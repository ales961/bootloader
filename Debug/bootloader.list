
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab0  08004ab0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab8  08004ab8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001014c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200101c4  200101c4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ec8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003276  00000000  00000000  00031f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  000351e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f40  00000000  00000000  000362a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025330  00000000  00000000  000371e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014cf2  00000000  00000000  0005c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da365  00000000  00000000  00071202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b567  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044cc  00000000  00000000  0014b5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000078 	.word	0x20000078
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004a44 	.word	0x08004a44

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	08004a44 	.word	0x08004a44

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 80004fa:	200c      	movs	r0, #12
 80004fc:	f004 f9e0 	bl	80048c0 <malloc>
 8000500:	4603      	mov	r3, r0
 8000502:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	4618      	mov	r0, r3
 8000508:	f004 f9da 	bl	80048c0 <malloc>
 800050c:	4603      	mov	r3, r0
 800050e:	461a      	mov	r2, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	88fa      	ldrh	r2, [r7, #6]
 8000518:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	f000 f886 	bl	800062c <bufferClear>
    return buffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	460b      	mov	r3, r1
 8000534:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	889a      	ldrh	r2, [r3, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	88db      	ldrh	r3, [r3, #6]
 800053e:	429a      	cmp	r2, r3
 8000540:	d21f      	bcs.n	8000582 <bufferPush+0x58>
        disableInt();
 8000542:	f000 f8e7 	bl	8000714 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	8812      	ldrh	r2, [r2, #0]
 800054e:	4413      	add	r3, r2
 8000550:	78fa      	ldrb	r2, [r7, #3]
 8000552:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	88d2      	ldrh	r2, [r2, #6]
 800055e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000562:	fb01 f202 	mul.w	r2, r1, r2
 8000566:	1a9b      	subs	r3, r3, r2
 8000568:	b29a      	uxth	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	889b      	ldrh	r3, [r3, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	b29a      	uxth	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	809a      	strh	r2, [r3, #4]

        enableInt();
 800057a:	f000 f8df 	bl	800073c <enableInt>
        return 1;
 800057e:	2301      	movs	r3, #1
 8000580:	e000      	b.n	8000584 <bufferPush+0x5a>
    } else
        return 0;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	4613      	mov	r3, r2
 8000598:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 800059a:	2300      	movs	r3, #0
 800059c:	82fb      	strh	r3, [r7, #22]
 800059e:	e00f      	b.n	80005c0 <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 80005a0:	8afb      	ldrh	r3, [r7, #22]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	4413      	add	r3, r2
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	f7ff ffbd 	bl	800052a <bufferPush>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <bufferPushValues+0x2e>
            return pushed;
 80005b6:	8afb      	ldrh	r3, [r7, #22]
 80005b8:	e007      	b.n	80005ca <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 80005ba:	8afb      	ldrh	r3, [r7, #22]
 80005bc:	3301      	adds	r3, #1
 80005be:	82fb      	strh	r3, [r7, #22]
 80005c0:	8afa      	ldrh	r2, [r7, #22]
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d3eb      	bcc.n	80005a0 <bufferPushValues+0x14>
    }
    return pushed;
 80005c8:	8afb      	ldrh	r3, [r7, #22]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b084      	sub	sp, #16
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	889b      	ldrh	r3, [r3, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d101      	bne.n	80005e6 <bufferPop+0x14>
        return 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	e01e      	b.n	8000624 <bufferPop+0x52>

    disableInt();
 80005e6:	f000 f895 	bl	8000714 <disableInt>

    buffer->size--;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	889b      	ldrh	r3, [r3, #4]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	8852      	ldrh	r2, [r2, #2]
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	885b      	ldrh	r3, [r3, #2]
 8000608:	3301      	adds	r3, #1
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	88d2      	ldrh	r2, [r2, #6]
 800060e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000612:	fb01 f202 	mul.w	r2, r1, r2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	b29a      	uxth	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	805a      	strh	r2, [r3, #2]

    enableInt();
 800061e:	f000 f88d 	bl	800073c <enableInt>

    return value;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <bufferClear>:

uint8_t bufferPeek(const Buffer * const buffer) {
    return buffer->data[buffer->ptrOut];
}

void bufferClear(Buffer * const buffer) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    disableInt();
 8000634:	f000 f86e 	bl	8000714 <disableInt>
    buffer->size = 0;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	805a      	strh	r2, [r3, #2]
    enableInt();
 800064a:	f000 f877 	bl	800073c <enableInt>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	889b      	ldrh	r3, [r3, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf14      	ite	ne
 8000666:	2301      	movne	r3, #1
 8000668:	2300      	moveq	r3, #0
 800066a:	b2db      	uxtb	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b087      	sub	sp, #28
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	4613      	mov	r3, r2
 8000684:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f7ff ffe5 	bl	8000656 <bufferHasValues>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <bufferPopValues+0x1e>
        return 0;
 8000692:	2300      	movs	r3, #0
 8000694:	e01d      	b.n	80006d2 <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f000 f81f 	bl	80006da <bufferGetSize>
 800069c:	4603      	mov	r3, r0
 800069e:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 80006a0:	8afa      	ldrh	r2, [r7, #22]
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d901      	bls.n	80006ac <bufferPopValues+0x34>
        popSize = bufSize;
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	82bb      	strh	r3, [r7, #20]
 80006b0:	e00a      	b.n	80006c8 <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 80006b2:	8abb      	ldrh	r3, [r7, #20]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	18d4      	adds	r4, r2, r3
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff ff8a 	bl	80005d2 <bufferPop>
 80006be:	4603      	mov	r3, r0
 80006c0:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++) {
 80006c2:	8abb      	ldrh	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	82bb      	strh	r3, [r7, #20]
 80006c8:	8aba      	ldrh	r2, [r7, #20]
 80006ca:	8afb      	ldrh	r3, [r7, #22]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d3f0      	bcc.n	80006b2 <bufferPopValues+0x3a>
    }
    return popSize;
 80006d0:	8afb      	ldrh	r3, [r7, #22]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	371c      	adds	r7, #28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd90      	pop	{r4, r7, pc}

080006da <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
    return buffer->size;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	889b      	ldrh	r3, [r3, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	88da      	ldrh	r2, [r3, #6]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	889b      	ldrh	r3, [r3, #4]
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	b29b      	uxth	r3, r3
}
 8000706:	4618      	mov	r0, r3
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <disableInt>:
		bufferPush(destination, var);
	}
	return 1;
}

static void disableInt() {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800071a:	f3ef 8310 	mrs	r3, PRIMASK
 800071e:	607b      	str	r3, [r7, #4]
  return(result);
 8000720:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <disableInt+0x24>)
 8000724:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000726:	b672      	cpsid	i
}
 8000728:	bf00      	nop
    __disable_irq();
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000094 	.word	0x20000094

0800073c <enableInt>:

static void enableInt() {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <enableInt+0x20>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f383 8810 	msr	PRIMASK, r3
}
 800074e:	bf00      	nop
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	20000094 	.word	0x20000094

08000760 <buttonInit>:
static uint16_t pin;
static buttonActionListener onClickHandler = NULL;

static uint8_t buttonIsPressed();

void buttonInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
	port = GPIOx;
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <buttonInit+0x2c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
    pin = GPIO_Pin;
 8000772:	4a07      	ldr	r2, [pc, #28]	; (8000790 <buttonInit+0x30>)
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	8013      	strh	r3, [r2, #0]
    onClickHandler = NULL;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <buttonInit+0x34>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000098 	.word	0x20000098
 8000790:	2000009c 	.word	0x2000009c
 8000794:	200000a0 	.word	0x200000a0

08000798 <buttonSetOnClick>:

void buttonSetOnClick(buttonActionListener actionListener) {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    onClickHandler = actionListener;
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <buttonSetOnClick+0x1c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	200000a0 	.word	0x200000a0

080007b8 <buttonUpdateState>:

static volatile uint32_t clickStart = 0;
void buttonUpdateState() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
    uint32_t time = HAL_GetTick();
 80007be:	f001 f84f 	bl	8001860 <HAL_GetTick>
 80007c2:	6078      	str	r0, [r7, #4]
    uint8_t isPressed = buttonIsPressed();
 80007c4:	f000 f82e 	bl	8000824 <buttonIsPressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	70fb      	strb	r3, [r7, #3]

    if (!isPressed && clickStart > 0 && (time - clickStart) >= SHORT_CLICK) {
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d114      	bne.n	80007fc <buttonUpdateState+0x44>
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <buttonUpdateState+0x64>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d010      	beq.n	80007fc <buttonUpdateState+0x44>
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <buttonUpdateState+0x64>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	2b31      	cmp	r3, #49	; 0x31
 80007e4:	d90a      	bls.n	80007fc <buttonUpdateState+0x44>
        clickStart = 0;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <buttonUpdateState+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
        if (onClickHandler != NULL)
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <buttonUpdateState+0x68>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00e      	beq.n	8000812 <buttonUpdateState+0x5a>
            (*onClickHandler)();
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <buttonUpdateState+0x68>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4798      	blx	r3
        if (onClickHandler != NULL)
 80007fa:	e00a      	b.n	8000812 <buttonUpdateState+0x5a>
    } else if (isPressed && clickStart == 0) {
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d007      	beq.n	8000812 <buttonUpdateState+0x5a>
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <buttonUpdateState+0x64>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d103      	bne.n	8000812 <buttonUpdateState+0x5a>
        clickStart = time;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <buttonUpdateState+0x64>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6013      	str	r3, [r2, #0]
    }
}
 8000810:	e7ff      	b.n	8000812 <buttonUpdateState+0x5a>
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000a4 	.word	0x200000a4
 8000820:	200000a0 	.word	0x200000a0

08000824 <buttonIsPressed>:

static uint8_t buttonIsPressed() {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <buttonIsPressed+0x24>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <buttonIsPressed+0x28>)
 800082e:	8812      	ldrh	r2, [r2, #0]
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f001 feb4 	bl	80025a0 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
}
 8000844:	4618      	mov	r0, r3
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000098 	.word	0x20000098
 800084c:	2000009c 	.word	0x2000009c

08000850 <FlashWriteBytes>:
#include "stm32f4xx_hal_flash_ex.h"
#include "flash.h"

uint32_t ptr = 0;

void FlashWriteBytes(uint32_t Address, uint8_t* Data, uint16_t size) {
 8000850:	b5b0      	push	{r4, r5, r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	4613      	mov	r3, r2
 800085c:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800085e:	f001 fa41 	bl	8001ce4 <HAL_FLASH_Unlock>
	for (uint16_t i = 0; i < size; i++) {
 8000862:	2300      	movs	r3, #0
 8000864:	82fb      	strh	r3, [r7, #22]
 8000866:	e012      	b.n	800088e <FlashWriteBytes+0x3e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address + i, Data[i]);
 8000868:	8afa      	ldrh	r2, [r7, #22]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	18d1      	adds	r1, r2, r3
 800086e:	8afb      	ldrh	r3, [r7, #22]
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2200      	movs	r2, #0
 800087a:	461c      	mov	r4, r3
 800087c:	4615      	mov	r5, r2
 800087e:	4622      	mov	r2, r4
 8000880:	462b      	mov	r3, r5
 8000882:	2000      	movs	r0, #0
 8000884:	f001 f9da 	bl	8001c3c <HAL_FLASH_Program>
	for (uint16_t i = 0; i < size; i++) {
 8000888:	8afb      	ldrh	r3, [r7, #22]
 800088a:	3301      	adds	r3, #1
 800088c:	82fb      	strh	r3, [r7, #22]
 800088e:	8afa      	ldrh	r2, [r7, #22]
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	429a      	cmp	r2, r3
 8000894:	d3e8      	bcc.n	8000868 <FlashWriteBytes+0x18>
	}
	HAL_FLASH_Lock();
 8000896:	f001 fa47 	bl	8001d28 <HAL_FLASH_Lock>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bdb0      	pop	{r4, r5, r7, pc}

080008a2 <FlashWriteWord>:

void FlashWriteWord(uint32_t Address, uint32_t Data) {
 80008a2:	b5b0      	push	{r4, r5, r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80008ac:	f001 fa1a 	bl	8001ce4 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2200      	movs	r2, #0
 80008b4:	461c      	mov	r4, r3
 80008b6:	4615      	mov	r5, r2
 80008b8:	4622      	mov	r2, r4
 80008ba:	462b      	mov	r3, r5
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	2002      	movs	r0, #2
 80008c0:	f001 f9bc 	bl	8001c3c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80008c4:	f001 fa30 	bl	8001d28 <HAL_FLASH_Lock>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bdb0      	pop	{r4, r5, r7, pc}

080008d0 <FlashReadByte>:

uint8_t FlashReadByte(uint32_t Address)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
    return (*(__IO uint8_t*)Address);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2db      	uxtb	r3, r3
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <EraseSector>:

void EraseSector(uint32_t Sector) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80008f4:	f001 f9f6 	bl	8001ce4 <HAL_FLASH_Unlock>
	uint32_t SectorError;
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <EraseSector+0x3c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Sector = Sector;
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <EraseSector+0x3c>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = 1 ;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <EraseSector+0x3c>)
 8000906:	2201      	movs	r2, #1
 8000908:	60da      	str	r2, [r3, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <EraseSector+0x3c>)
 800090c:	2202      	movs	r2, #2
 800090e:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <EraseSector+0x3c>)
 8000918:	f001 fb56 	bl	8001fc8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800091c:	f001 fa04 	bl	8001d28 <HAL_FLASH_Lock>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000a8 	.word	0x200000a8

0800092c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <MX_GPIO_Init+0x8c>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_GPIO_Init+0x8c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0x90>)
 80009ac:	f001 fc4c 	bl	8002248 <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800

080009c0 <asciiToHex>:
uint16_t address_data;//младшие 16 бит адреса
uint32_t program_data;//слово которое пишется во флеш
uint8_t calculation_check_sum = 0;//чек-сумма
uint8_t tempBuf[8];

void asciiToHex(uint8_t* buff, uint8_t count) {
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i=0; i<count;i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e023      	b.n	8000a1a <asciiToHex+0x5a>
		if(buff[i] <= '9' && buff[i] >= '0' ) {
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b39      	cmp	r3, #57	; 0x39
 80009dc:	d810      	bhi.n	8000a00 <asciiToHex+0x40>
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	4413      	add	r3, r2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b2f      	cmp	r3, #47	; 0x2f
 80009e8:	d90a      	bls.n	8000a00 <asciiToHex+0x40>
			buff[i] -= 0x30;
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	4413      	add	r3, r2
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	440b      	add	r3, r1
 80009f8:	3a30      	subs	r2, #48	; 0x30
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e009      	b.n	8000a14 <asciiToHex+0x54>
		}
		else {
			buff[i] = buff[i] - 0x41 + 10;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	440b      	add	r3, r1
 8000a0e:	3a37      	subs	r2, #55	; 0x37
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	701a      	strb	r2, [r3, #0]
	for(i=0; i<count;i++) {
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	3301      	adds	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
 8000a1a:	7bfa      	ldrb	r2, [r7, #15]
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d3d7      	bcc.n	80009d2 <asciiToHex+0x12>
		}
	}
}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <fillBuffer>:

void fillBuffer(uint8_t* destination, uint16_t* startPtr, uint16_t count) {
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	80fb      	strh	r3, [r7, #6]
	for (int16_t i = 0; i < count; i++) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	82fb      	strh	r3, [r7, #22]
 8000a42:	e018      	b.n	8000a76 <fillBuffer+0x46>
		destination[i] = FlashReadByte(SECTOR_20_ADDRESS + *startPtr + i);
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a4e:	4413      	add	r3, r2
 8000a50:	f103 6301 	add.w	r3, r3, #135266304	; 0x8100000
 8000a54:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8000a58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000a5c:	68f9      	ldr	r1, [r7, #12]
 8000a5e:	188c      	adds	r4, r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff35 	bl	80008d0 <FlashReadByte>
 8000a66:	4603      	mov	r3, r0
 8000a68:	7023      	strb	r3, [r4, #0]
	for (int16_t i = 0; i < count; i++) {
 8000a6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	3301      	adds	r3, #1
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	82fb      	strh	r3, [r7, #22]
 8000a76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbe1      	blt.n	8000a44 <fillBuffer+0x14>
	}
	*startPtr += count;
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	881a      	ldrh	r2, [r3, #0]
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4413      	add	r3, r2
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	801a      	strh	r2, [r3, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	371c      	adds	r7, #28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}
	...

08000a98 <flashHex>:

void flashHex(uint16_t size) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
	uint16_t ptr = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	817b      	strh	r3, [r7, #10]
	int16_t cntr = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	81fb      	strh	r3, [r7, #14]
	while (ptr < size) {
 8000aaa:	e183      	b.n	8000db4 <flashHex+0x31c>
		if(FlashReadByte(SECTOR_20_ADDRESS + ptr) == ':' || ptr == 0) { //TODO
 8000aac:	897b      	ldrh	r3, [r7, #10]
 8000aae:	f103 6301 	add.w	r3, r3, #135266304	; 0x8100000
 8000ab2:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff0a 	bl	80008d0 <FlashReadByte>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b3a      	cmp	r3, #58	; 0x3a
 8000ac0:	d003      	beq.n	8000aca <flashHex+0x32>
 8000ac2:	897b      	ldrh	r3, [r7, #10]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f040 8171 	bne.w	8000dac <flashHex+0x314>
			cntr++;
 8000aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	81fb      	strh	r3, [r7, #14]
			ptr++;
 8000ad6:	897b      	ldrh	r3, [r7, #10]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	817b      	strh	r3, [r7, #10]
			fillBuffer(tempBuf, &ptr, 8);
 8000ade:	f107 030a 	add.w	r3, r7, #10
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4876      	ldr	r0, [pc, #472]	; (8000cc0 <flashHex+0x228>)
 8000ae8:	f7ff ffa2 	bl	8000a30 <fillBuffer>
			asciiToHex(tempBuf, 8);
 8000aec:	2108      	movs	r1, #8
 8000aee:	4874      	ldr	r0, [pc, #464]	; (8000cc0 <flashHex+0x228>)
 8000af0:	f7ff ff66 	bl	80009c0 <asciiToHex>

			size_data = 2*(tempBuf[1] + 16*tempBuf[0]);//находим размер данных
 8000af4:	4b72      	ldr	r3, [pc, #456]	; (8000cc0 <flashHex+0x228>)
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b71      	ldr	r3, [pc, #452]	; (8000cc0 <flashHex+0x228>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	4413      	add	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b6e      	ldr	r3, [pc, #440]	; (8000cc4 <flashHex+0x22c>)
 8000b0a:	701a      	strb	r2, [r3, #0]
			address_data = tempBuf[5] + 16*tempBuf[4] + 256*tempBuf[3] + 4096*tempBuf[2];//адрес
 8000b0c:	4b6c      	ldr	r3, [pc, #432]	; (8000cc0 <flashHex+0x228>)
 8000b0e:	795b      	ldrb	r3, [r3, #5]
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b6b      	ldr	r3, [pc, #428]	; (8000cc0 <flashHex+0x228>)
 8000b14:	78db      	ldrb	r3, [r3, #3]
 8000b16:	b299      	uxth	r1, r3
 8000b18:	4b69      	ldr	r3, [pc, #420]	; (8000cc0 <flashHex+0x228>)
 8000b1a:	789b      	ldrb	r3, [r3, #2]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	440b      	add	r3, r1
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	011b      	lsls	r3, r3, #4
 8000b28:	b299      	uxth	r1, r3
 8000b2a:	4b65      	ldr	r3, [pc, #404]	; (8000cc0 <flashHex+0x228>)
 8000b2c:	791b      	ldrb	r3, [r3, #4]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	440b      	add	r3, r1
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	4413      	add	r3, r2
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b62      	ldr	r3, [pc, #392]	; (8000cc8 <flashHex+0x230>)
 8000b3e:	801a      	strh	r2, [r3, #0]
			type_data = tempBuf[7] + 16*tempBuf[6];//и тип
 8000b40:	4b5f      	ldr	r3, [pc, #380]	; (8000cc0 <flashHex+0x228>)
 8000b42:	79da      	ldrb	r2, [r3, #7]
 8000b44:	4b5e      	ldr	r3, [pc, #376]	; (8000cc0 <flashHex+0x228>)
 8000b46:	799b      	ldrb	r3, [r3, #6]
 8000b48:	011b      	lsls	r3, r3, #4
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b5e      	ldr	r3, [pc, #376]	; (8000ccc <flashHex+0x234>)
 8000b52:	701a      	strb	r2, [r3, #0]

			calculation_check_sum = size_data/2 + (uint8_t)address_data + (uint8_t)(address_data>>8) + type_data;//считаем чек сумму
 8000b54:	4b5b      	ldr	r3, [pc, #364]	; (8000cc4 <flashHex+0x22c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b5a      	ldr	r3, [pc, #360]	; (8000cc8 <flashHex+0x230>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4413      	add	r3, r2
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b58      	ldr	r3, [pc, #352]	; (8000cc8 <flashHex+0x230>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	4413      	add	r3, r2
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	4b55      	ldr	r3, [pc, #340]	; (8000ccc <flashHex+0x234>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b54      	ldr	r3, [pc, #336]	; (8000cd0 <flashHex+0x238>)
 8000b7e:	701a      	strb	r2, [r3, #0]

			if(type_data == 0x00) {
 8000b80:	4b52      	ldr	r3, [pc, #328]	; (8000ccc <flashHex+0x234>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f040 80ad 	bne.w	8000ce4 <flashHex+0x24c>
				while(size_data > 0) {
 8000b8a:	e06b      	b.n	8000c64 <flashHex+0x1cc>
					fillBuffer(tempBuf, &ptr, 8);
 8000b8c:	f107 030a 	add.w	r3, r7, #10
 8000b90:	2208      	movs	r2, #8
 8000b92:	4619      	mov	r1, r3
 8000b94:	484a      	ldr	r0, [pc, #296]	; (8000cc0 <flashHex+0x228>)
 8000b96:	f7ff ff4b 	bl	8000a30 <fillBuffer>
					asciiToHex(tempBuf, 8);
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	4848      	ldr	r0, [pc, #288]	; (8000cc0 <flashHex+0x228>)
 8000b9e:	f7ff ff0f 	bl	80009c0 <asciiToHex>


					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	737b      	strb	r3, [r7, #13]
 8000ba6:	e024      	b.n	8000bf2 <flashHex+0x15a>
						tempBuf[i] <<= 4;
 8000ba8:	7b7b      	ldrb	r3, [r7, #13]
 8000baa:	4a45      	ldr	r2, [pc, #276]	; (8000cc0 <flashHex+0x228>)
 8000bac:	5cd2      	ldrb	r2, [r2, r3]
 8000bae:	7b7b      	ldrb	r3, [r7, #13]
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d1      	uxtb	r1, r2
 8000bb4:	4a42      	ldr	r2, [pc, #264]	; (8000cc0 <flashHex+0x228>)
 8000bb6:	54d1      	strb	r1, [r2, r3]
						tempBuf[i] = tempBuf[i] | tempBuf[i+1];
 8000bb8:	7b7b      	ldrb	r3, [r7, #13]
 8000bba:	4a41      	ldr	r2, [pc, #260]	; (8000cc0 <flashHex+0x228>)
 8000bbc:	5cd1      	ldrb	r1, [r2, r3]
 8000bbe:	7b7b      	ldrb	r3, [r7, #13]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a3f      	ldr	r2, [pc, #252]	; (8000cc0 <flashHex+0x228>)
 8000bc4:	5cd2      	ldrb	r2, [r2, r3]
 8000bc6:	7b7b      	ldrb	r3, [r7, #13]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	b2d1      	uxtb	r1, r2
 8000bcc:	4a3c      	ldr	r2, [pc, #240]	; (8000cc0 <flashHex+0x228>)
 8000bce:	54d1      	strb	r1, [r2, r3]
						program_data |= tempBuf[i] <<(i*4);
 8000bd0:	7b7b      	ldrb	r3, [r7, #13]
 8000bd2:	4a3b      	ldr	r2, [pc, #236]	; (8000cc0 <flashHex+0x228>)
 8000bd4:	5cd3      	ldrb	r3, [r2, r3]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	7b7b      	ldrb	r3, [r7, #13]
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <flashHex+0x23c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	4a3a      	ldr	r2, [pc, #232]	; (8000cd4 <flashHex+0x23c>)
 8000bea:	6013      	str	r3, [r2, #0]
					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	737b      	strb	r3, [r7, #13]
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d9d7      	bls.n	8000ba8 <flashHex+0x110>
					}

					FlashWriteWord(extented_linear_adress + address_data, program_data);
 8000bf8:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <flashHex+0x230>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <flashHex+0x240>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <flashHex+0x23c>)
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fe49 	bl	80008a2 <FlashWriteWord>
					calculation_check_sum += (uint8_t)program_data + (uint8_t)(program_data>>8) + (uint8_t)(program_data>>16) + (uint8_t)(program_data>>24);
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <flashHex+0x23c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <flashHex+0x23c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <flashHex+0x23c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	0c1b      	lsrs	r3, r3, #16
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <flashHex+0x23c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	0e1b      	lsrs	r3, r3, #24
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4413      	add	r3, r2
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <flashHex+0x238>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <flashHex+0x238>)
 8000c44:	701a      	strb	r2, [r3, #0]
					size_data -= 8;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <flashHex+0x22c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	3b08      	subs	r3, #8
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <flashHex+0x22c>)
 8000c50:	701a      	strb	r2, [r3, #0]
					address_data += 4;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <flashHex+0x230>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	3304      	adds	r3, #4
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <flashHex+0x230>)
 8000c5c:	801a      	strh	r2, [r3, #0]
					program_data = 0;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <flashHex+0x23c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
				while(size_data > 0) {
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <flashHex+0x22c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d18f      	bne.n	8000b8c <flashHex+0xf4>
				}
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <flashHex+0x238>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	425b      	negs	r3, r3
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <flashHex+0x238>)
 8000c76:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, &ptr, 2);
 8000c78:	f107 030a 	add.w	r3, r7, #10
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <flashHex+0x228>)
 8000c82:	f7ff fed5 	bl	8000a30 <fillBuffer>
				asciiToHex(tempBuf, 2);
 8000c86:	2102      	movs	r1, #2
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <flashHex+0x228>)
 8000c8a:	f7ff fe99 	bl	80009c0 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <flashHex+0x228>)
 8000c90:	785a      	ldrb	r2, [r3, #1]
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <flashHex+0x228>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <flashHex+0x244>)
 8000ca0:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <flashHex+0x238>)
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <flashHex+0x244>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d003      	beq.n	8000cb6 <flashHex+0x21e>
					uartTransmit("\n\rchecksum error 1\n\r", 20);
 8000cae:	2114      	movs	r1, #20
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <flashHex+0x248>)
 8000cb2:	f000 fc1b 	bl	80014ec <uartTransmit>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <flashHex+0x238>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e076      	b.n	8000dac <flashHex+0x314>
 8000cbe:	bf00      	nop
 8000cc0:	200000d0 	.word	0x200000d0
 8000cc4:	200000c0 	.word	0x200000c0
 8000cc8:	200000c4 	.word	0x200000c4
 8000ccc:	200000c1 	.word	0x200000c1
 8000cd0:	200000cc 	.word	0x200000cc
 8000cd4:	200000c8 	.word	0x200000c8
 8000cd8:	200000bc 	.word	0x200000bc
 8000cdc:	200000c2 	.word	0x200000c2
 8000ce0:	08004a5c 	.word	0x08004a5c

			} else if(type_data == 0x04) {//дополнительный адрес
 8000ce4:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <flashHex+0x334>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d15b      	bne.n	8000da4 <flashHex+0x30c>
				fillBuffer(tempBuf, &ptr, 4);
 8000cec:	f107 030a 	add.w	r3, r7, #10
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4836      	ldr	r0, [pc, #216]	; (8000dd0 <flashHex+0x338>)
 8000cf6:	f7ff fe9b 	bl	8000a30 <fillBuffer>
				asciiToHex(tempBuf, 4);
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	4834      	ldr	r0, [pc, #208]	; (8000dd0 <flashHex+0x338>)
 8000cfe:	f7ff fe5f 	bl	80009c0 <asciiToHex>

				extented_linear_adress = (uint32_t)(tempBuf[0]<<28 | tempBuf[1]<<24 | tempBuf[2]<<20 | tempBuf[3]<<16 );//считаем адрес
 8000d02:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <flashHex+0x338>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	071a      	lsls	r2, r3, #28
 8000d08:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <flashHex+0x338>)
 8000d0a:	785b      	ldrb	r3, [r3, #1]
 8000d0c:	061b      	lsls	r3, r3, #24
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <flashHex+0x338>)
 8000d12:	789b      	ldrb	r3, [r3, #2]
 8000d14:	051b      	lsls	r3, r3, #20
 8000d16:	431a      	orrs	r2, r3
 8000d18:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <flashHex+0x338>)
 8000d1a:	78db      	ldrb	r3, [r3, #3]
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <flashHex+0x33c>)
 8000d24:	601a      	str	r2, [r3, #0]


				calculation_check_sum +=  16*tempBuf[0] + tempBuf[1]+ 16*tempBuf[2] + tempBuf[3];
 8000d26:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <flashHex+0x338>)
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <flashHex+0x338>)
 8000d2c:	789b      	ldrb	r3, [r3, #2]
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <flashHex+0x338>)
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <flashHex+0x338>)
 8000d40:	78db      	ldrb	r3, [r3, #3]
 8000d42:	4413      	add	r3, r2
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <flashHex+0x340>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <flashHex+0x340>)
 8000d50:	701a      	strb	r2, [r3, #0]
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <flashHex+0x340>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	425b      	negs	r3, r3
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <flashHex+0x340>)
 8000d5c:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, &ptr, 2);
 8000d5e:	f107 030a 	add.w	r3, r7, #10
 8000d62:	2202      	movs	r2, #2
 8000d64:	4619      	mov	r1, r3
 8000d66:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <flashHex+0x338>)
 8000d68:	f7ff fe62 	bl	8000a30 <fillBuffer>
				asciiToHex(tempBuf, 2);
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <flashHex+0x338>)
 8000d70:	f7ff fe26 	bl	80009c0 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <flashHex+0x338>)
 8000d76:	785a      	ldrb	r2, [r3, #1]
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <flashHex+0x338>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <flashHex+0x344>)
 8000d86:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <flashHex+0x340>)
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <flashHex+0x344>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d003      	beq.n	8000d9c <flashHex+0x304>
					uartTransmit("\n\rchecksum error 2\n\r", 20);
 8000d94:	2114      	movs	r1, #20
 8000d96:	4812      	ldr	r0, [pc, #72]	; (8000de0 <flashHex+0x348>)
 8000d98:	f000 fba8 	bl	80014ec <uartTransmit>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <flashHex+0x340>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e003      	b.n	8000dac <flashHex+0x314>
			} else if(type_data == 0x01) {//конец файла
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <flashHex+0x334>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d009      	beq.n	8000dc0 <flashHex+0x328>
				break;
			}
		}
		ptr++;
 8000dac:	897b      	ldrh	r3, [r7, #10]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	817b      	strh	r3, [r7, #10]
	while (ptr < size) {
 8000db4:	897b      	ldrh	r3, [r7, #10]
 8000db6:	88fa      	ldrh	r2, [r7, #6]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f63f ae77 	bhi.w	8000aac <flashHex+0x14>
	}
}
 8000dbe:	e000      	b.n	8000dc2 <flashHex+0x32a>
				break;
 8000dc0:	bf00      	nop
}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000c1 	.word	0x200000c1
 8000dd0:	200000d0 	.word	0x200000d0
 8000dd4:	200000bc 	.word	0x200000bc
 8000dd8:	200000cc 	.word	0x200000cc
 8000ddc:	200000c2 	.word	0x200000c2
 8000de0:	08004a74 	.word	0x08004a74

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f000 fca0 	bl	800172c <HAL_Init>

  /* USER CODE BEGIN Init */
  uartInit();
 8000dec:	f000 fba2 	bl	8001534 <uartInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df0:	f000 f8a2 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f7ff fd9a 	bl	800092c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000df8:	f000 fafe 	bl	80013f8 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8000dfc:	f000 fa16 	bl	800122c <MX_TIM6_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  uartEnableInterruption();
 8000e00:	f000 fbae 	bl	8001560 <uartEnableInterruption>
  buttonInit(GPIOC, GPIO_PIN_15);
 8000e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e08:	4841      	ldr	r0, [pc, #260]	; (8000f10 <main+0x12c>)
 8000e0a:	f7ff fca9 	bl	8000760 <buttonInit>
  buttonSetOnClick(&onButtonClick);
 8000e0e:	4841      	ldr	r0, [pc, #260]	; (8000f14 <main+0x130>)
 8000e10:	f7ff fcc2 	bl	8000798 <buttonSetOnClick>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uartTransmit("started\n\r", 9);
 8000e14:	2109      	movs	r1, #9
 8000e16:	4840      	ldr	r0, [pc, #256]	; (8000f18 <main+0x134>)
 8000e18:	f000 fb68 	bl	80014ec <uartTransmit>
  while (!isRxStarted()) {
 8000e1c:	e008      	b.n	8000e30 <main+0x4c>
	  HAL_IWDG_Refresh(&hiwdg);
 8000e1e:	483f      	ldr	r0, [pc, #252]	; (8000f1c <main+0x138>)
 8000e20:	f001 fbd6 	bl	80025d0 <HAL_IWDG_Refresh>
	  buttonUpdateState();
 8000e24:	f7ff fcc8 	bl	80007b8 <buttonUpdateState>
	  if (!loadApp) goto jumpToApp;
 8000e28:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <main+0x13c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d069      	beq.n	8000f04 <main+0x120>
  while (!isRxStarted()) {
 8000e30:	f000 fc46 	bl	80016c0 <isRxStarted>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f1      	beq.n	8000e1e <main+0x3a>
  }

  EraseSector(FLASH_SECTOR_19);
 8000e3a:	2013      	movs	r0, #19
 8000e3c:	f7ff fd56 	bl	80008ec <EraseSector>
  EraseSector(FLASH_SECTOR_20);
 8000e40:	2014      	movs	r0, #20
 8000e42:	f7ff fd53 	bl	80008ec <EraseSector>
  HAL_TIM_Base_Start_IT(&htim6);
 8000e46:	4837      	ldr	r0, [pc, #220]	; (8000f24 <main+0x140>)
 8000e48:	f002 f972 	bl	8003130 <HAL_TIM_Base_Start_IT>
  resetRxDone();
 8000e4c:	f000 fa4c 	bl	80012e8 <resetRxDone>
  while (isRxDone() == 0) {
 8000e50:	e028      	b.n	8000ea4 <main+0xc0>
	  HAL_IWDG_Refresh(&hiwdg);
 8000e52:	4832      	ldr	r0, [pc, #200]	; (8000f1c <main+0x138>)
 8000e54:	f001 fbbc 	bl	80025d0 <HAL_IWDG_Refresh>
	  rxBufSize = rxBufferGetSize();
 8000e58:	f000 fc12 	bl	8001680 <rxBufferGetSize>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <main+0x144>)
 8000e62:	801a      	strh	r2, [r3, #0]
	  if (rxBufSize > 60000) {
 8000e64:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <main+0x144>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d919      	bls.n	8000ea4 <main+0xc0>
		  rxBufToFlashBuf(flashBuf, rxBufSize);
 8000e70:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <main+0x144>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	482d      	ldr	r0, [pc, #180]	; (8000f2c <main+0x148>)
 8000e78:	f000 fc0e 	bl	8001698 <rxBufToFlashBuf>
		  FlashWriteBytes(SECTOR_20_ADDRESS + flashStoragePtr, flashBuf, rxBufSize);
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <main+0x14c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f103 6301 	add.w	r3, r3, #135266304	; 0x8100000
 8000e84:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8000e88:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <main+0x144>)
 8000e8a:	8812      	ldrh	r2, [r2, #0]
 8000e8c:	4927      	ldr	r1, [pc, #156]	; (8000f2c <main+0x148>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fcde 	bl	8000850 <FlashWriteBytes>
		  flashStoragePtr += rxBufSize;
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <main+0x144>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <main+0x14c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <main+0x14c>)
 8000ea2:	6013      	str	r3, [r2, #0]
  while (isRxDone() == 0) {
 8000ea4:	f000 fa2c 	bl	8001300 <isRxDone>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0d1      	beq.n	8000e52 <main+0x6e>
	  }
  }

  rxBufSize = rxBufferGetSize();
 8000eae:	f000 fbe7 	bl	8001680 <rxBufferGetSize>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <main+0x144>)
 8000eb8:	801a      	strh	r2, [r3, #0]
  if (rxBufSize > 0) {
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <main+0x144>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d019      	beq.n	8000ef6 <main+0x112>
  	rxBufToFlashBuf(flashBuf, rxBufSize);
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <main+0x144>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4818      	ldr	r0, [pc, #96]	; (8000f2c <main+0x148>)
 8000eca:	f000 fbe5 	bl	8001698 <rxBufToFlashBuf>
	FlashWriteBytes(SECTOR_20_ADDRESS + flashStoragePtr, flashBuf, rxBufSize);
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <main+0x14c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f103 6301 	add.w	r3, r3, #135266304	; 0x8100000
 8000ed6:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <main+0x144>)
 8000edc:	8812      	ldrh	r2, [r2, #0]
 8000ede:	4913      	ldr	r1, [pc, #76]	; (8000f2c <main+0x148>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fcb5 	bl	8000850 <FlashWriteBytes>
	flashStoragePtr += rxBufSize;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <main+0x144>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <main+0x14c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <main+0x14c>)
 8000ef4:	6013      	str	r3, [r2, #0]
  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  flashHex(flashStoragePtr);
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <main+0x14c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fdcb 	bl	8000a98 <flashHex>
 8000f02:	e000      	b.n	8000f06 <main+0x122>
	  if (!loadApp) goto jumpToApp;
 8000f04:	bf00      	nop
  jumpToApp:
  jumpToUserApp(SECTOR_19_ADDRESS);
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <main+0x150>)
 8000f08:	f000 f878 	bl	8000ffc <jumpToUserApp>
  while (1) {}
 8000f0c:	e7fe      	b.n	8000f0c <main+0x128>
 8000f0e:	bf00      	nop
 8000f10:	40020800 	.word	0x40020800
 8000f14:	080010ad 	.word	0x080010ad
 8000f18:	08004a8c 	.word	0x08004a8c
 8000f1c:	200000d8 	.word	0x200000d8
 8000f20:	20000000 	.word	0x20000000
 8000f24:	200100f4 	.word	0x200100f4
 8000f28:	200100e4 	.word	0x200100e4
 8000f2c:	200000e4 	.word	0x200000e4
 8000f30:	200100e8 	.word	0x200100e8
 8000f34:	08160000 	.word	0x08160000

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	; 0x50
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2230      	movs	r2, #48	; 0x30
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fcc2 	bl	80048d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <SystemClock_Config+0xbc>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <SystemClock_Config+0xbc>)
 8000f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <SystemClock_Config+0xbc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <SystemClock_Config+0xc0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <SystemClock_Config+0xc0>)
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <SystemClock_Config+0xc0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f98:	230a      	movs	r3, #10
 8000f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fb1d 	bl	80025f0 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000fbc:	f000 f882 	bl	80010c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fd80 	bl	8002ae0 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000fe6:	f000 f86d 	bl	80010c4 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	; 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40007000 	.word	0x40007000

08000ffc <jumpToUserApp>:

/* USER CODE BEGIN 4 */
void jumpToUserApp(uint32_t address) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	  void(*app_reset_handler)();

	  //shut down any tasks remaining
	  HAL_TIM_Base_Stop_IT(&htim6);
 8001004:	4825      	ldr	r0, [pc, #148]	; (800109c <jumpToUserApp+0xa0>)
 8001006:	f002 f903 	bl	8003210 <HAL_TIM_Base_Stop_IT>
	  uartDisableInterruption();
 800100a:	f000 fabb 	bl	8001584 <uartDisableInterruption>

	  __HAL_RCC_GPIOC_CLK_DISABLE();
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <jumpToUserApp+0xa4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <jumpToUserApp+0xa4>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <jumpToUserApp+0xa4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <jumpToUserApp+0xa4>)
 8001020:	f023 0308 	bic.w	r3, r3, #8
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <jumpToUserApp+0xa4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <jumpToUserApp+0xa4>)
 800102c:	f023 0302 	bic.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <jumpToUserApp+0xa4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <jumpToUserApp+0xa4>)
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 800103e:	f001 ff2f 	bl	8002ea0 <HAL_RCC_DeInit>
	  HAL_DeInit();// to disable all the peripherals
 8001042:	f000 fb95 	bl	8001770 <HAL_DeInit>

	  SysTick->CTRL = 0;//to turn off the systick
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <jumpToUserApp+0xa8>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <jumpToUserApp+0xa8>)
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <jumpToUserApp+0xa8>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f383 8810 	msr	PRIMASK, r3
}
 8001062:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop

	  //disable interrupts
	  __set_PRIMASK(1);
	  __disable_irq();

	  SCB->VTOR = address;//change this
 8001068:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <jumpToUserApp+0xac>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6093      	str	r3, [r2, #8]

	  //configure the MSP by reading the value from the base address
	  uint32_t msp_value = *(__IO uint32_t*) address;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	f383 8808 	msr	MSP, r3
}
 800107e:	bf00      	nop

	  __set_MSP(msp_value);

	  uint32_t resethandler_address = *(__IO uint32_t*) (address + 4);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3304      	adds	r3, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	61bb      	str	r3, [r7, #24]

	  //app_reset_handler = (void*)resethandler_address;
	  app_reset_handler = (void (*)(void)) (resethandler_address);
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 800108c:	b662      	cpsie	i
}
 800108e:	bf00      	nop

	  //jump to reset handler of the user app.
	  //NVIC_SystemReset(); //?????
	  __enable_irq();
	  app_reset_handler();
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	4798      	blx	r3
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200100f4 	.word	0x200100f4
 80010a0:	40023800 	.word	0x40023800
 80010a4:	e000e010 	.word	0xe000e010
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <onButtonClick>:

static void onButtonClick() {
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
    loadApp = 0;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <onButtonClick+0x14>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	20000000 	.word	0x20000000

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_MspInit+0x4c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_MspInit+0x4c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 fb64 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM6_DAC_IRQHandler+0x10>)
 800117a:	f002 f878 	bl	800326e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200100f4 	.word	0x200100f4

08001188 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <USART6_IRQHandler+0x10>)
 800118e:	f002 fc7d 	bl	8003a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2001014c 	.word	0x2001014c

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f003 fb4e 	bl	800486c <__errno>
 80011d0:	4603      	mov	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20030000 	.word	0x20030000
 80011fc:	00000400 	.word	0x00000400
 8001200:	200100ec 	.word	0x200100ec
 8001204:	200101c8 	.word	0x200101c8

08001208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x20>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <SystemInit+0x20>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_TIM6_Init+0x64>)
 800123c:	4a15      	ldr	r2, [pc, #84]	; (8001294 <MX_TIM6_Init+0x68>)
 800123e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_TIM6_Init+0x64>)
 8001242:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001246:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_TIM6_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_TIM6_Init+0x64>)
 8001250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001254:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_TIM6_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <MX_TIM6_Init+0x64>)
 800125e:	f001 ff17 	bl	8003090 <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001268:	f7ff ff2c 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_TIM6_Init+0x64>)
 800127a:	f002 f9c9 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001284:	f7ff ff1e 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200100f4 	.word	0x200100f4
 8001294:	40001000 	.word	0x40001000

08001298 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_TIM_Base_MspInit+0x48>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d115      	bne.n	80012d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_TIM_Base_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <HAL_TIM_Base_MspInit+0x4c>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_TIM_Base_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2036      	movs	r0, #54	; 0x36
 80012cc:	f000 fbd3 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012d0:	2036      	movs	r0, #54	; 0x36
 80012d2:	f000 fbec 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40001000 	.word	0x40001000
 80012e4:	40023800 	.word	0x40023800

080012e8 <resetRxDone>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void resetRxDone() {
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	rxDone = 0;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <resetRxDone+0x14>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	200100f0 	.word	0x200100f0

08001300 <isRxDone>:

uint8_t isRxDone() {
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	return rxDone;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <isRxDone+0x14>)
 8001306:	781b      	ldrb	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200100f0 	.word	0x200100f0

08001318 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a05      	ldr	r2, [pc, #20]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d102      	bne.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x18>
		rxDone = 1;
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
	}
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40001000 	.word	0x40001000
 8001340:	200100f0 	.word	0x200100f0

08001344 <uartHardwareTransmitInterrupt>:

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
}

void uartHardwareTransmitInterrupt(uint8_t buffer) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	usartHardwareTransmitBuffer = buffer;
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <uartHardwareTransmitInterrupt+0x28>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001354:	2047      	movs	r0, #71	; 0x47
 8001356:	f000 fbaa 	bl	8001aae <HAL_NVIC_EnableIRQ>
	HAL_UART_Transmit_IT(&huart6, &usartHardwareTransmitBuffer, 1);
 800135a:	2201      	movs	r2, #1
 800135c:	4903      	ldr	r1, [pc, #12]	; (800136c <uartHardwareTransmitInterrupt+0x28>)
 800135e:	4804      	ldr	r0, [pc, #16]	; (8001370 <uartHardwareTransmitInterrupt+0x2c>)
 8001360:	f002 fa33 	bl	80037ca <HAL_UART_Transmit_IT>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2001013c 	.word	0x2001013c
 8001370:	2001014c 	.word	0x2001014c

08001374 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_UART_TxCpltCallback+0x1c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_UART_TxCpltCallback+0x14>
		uartTransmitIntCallback();
 8001384:	f000 f96a 	bl	800165c <uartTransmitIntCallback>
	}
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2001014c 	.word	0x2001014c

08001394 <uartHardwareReceiveInterrupt>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
}

void uartHardwareReceiveInterrupt() {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001398:	2047      	movs	r0, #71	; 0x47
 800139a:	f000 fb88 	bl	8001aae <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart6, &usartHardwareReceiveBuffer, 1);
 800139e:	2201      	movs	r2, #1
 80013a0:	4902      	ldr	r1, [pc, #8]	; (80013ac <uartHardwareReceiveInterrupt+0x18>)
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <uartHardwareReceiveInterrupt+0x1c>)
 80013a4:	f002 fa56 	bl	8003854 <HAL_UART_Receive_IT>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2001013d 	.word	0x2001013d
 80013b0:	2001014c 	.word	0x2001014c

080013b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_UART_RxCpltCallback+0x24>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d104      	bne.n	80013ce <HAL_UART_RxCpltCallback+0x1a>
    	uartReceiveIntCallback(usartHardwareReceiveBuffer);
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_UART_RxCpltCallback+0x28>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f915 	bl	80015f8 <uartReceiveIntCallback>
    }
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2001014c 	.word	0x2001014c
 80013dc:	2001013d 	.word	0x2001013d

080013e0 <uartHardwareDisableInterrupts>:

void uartHardwareDisableInterrupts() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart6);
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <uartHardwareDisableInterrupts+0x14>)
 80013e6:	f002 fa65 	bl	80038b4 <HAL_UART_Abort>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80013ea:	2047      	movs	r0, #71	; 0x47
 80013ec:	f000 fb6d 	bl	8001aca <HAL_NVIC_DisableIRQ>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2001014c 	.word	0x2001014c

080013f8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART6_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART6_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART6_UART_Init+0x4c>)
 8001404:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001408:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART6_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART6_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART6_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART6_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART6_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART6_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART6_UART_Init+0x4c>)
 8001430:	f002 f97e 	bl	8003730 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f7ff fe43 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2001014c 	.word	0x2001014c
 8001448:	40011400 	.word	0x40011400

0800144c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_UART_MspInit+0x94>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d133      	bne.n	80014d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_UART_MspInit+0x98>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <HAL_UART_MspInit+0x98>)
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_UART_MspInit+0x98>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_UART_MspInit+0x98>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_UART_MspInit+0x98>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_UART_MspInit+0x98>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a6:	23c0      	movs	r3, #192	; 0xc0
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014b6:	2308      	movs	r3, #8
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <HAL_UART_MspInit+0x9c>)
 80014c2:	f000 fec1 	bl	8002248 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2047      	movs	r0, #71	; 0x47
 80014cc:	f000 fad3 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80014d0:	2047      	movs	r0, #71	; 0x47
 80014d2:	f000 faec 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40011400 	.word	0x40011400
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020800 	.word	0x40020800

080014ec <uartTransmit>:
  }
}

/* USER CODE BEGIN 1 */

uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <uartTransmit+0x16>
        return 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	e010      	b.n	8001524 <uartTransmit+0x38>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <uartTransmit+0x40>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f83e 	bl	800058c <bufferPushValues>
 8001510:	4603      	mov	r3, r0
 8001512:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <uartTransmit+0x44>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <uartTransmit+0x36>
        hardwareTransmitIT();
 800151e:	f000 f843 	bl	80015a8 <hardwareTransmitIT>
    }
    return transmitted;
 8001522:	89fb      	ldrh	r3, [r7, #14]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20010140 	.word	0x20010140
 8001530:	20010148 	.word	0x20010148

08001534 <uartInit>:

uint8_t uartHasNext() {
    return bufferHasValues(rxBuffer);
}

void uartInit() {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001538:	2040      	movs	r0, #64	; 0x40
 800153a:	f7fe ffd9 	bl	80004f0 <bufferCreate>
 800153e:	4603      	mov	r3, r0
 8001540:	4a05      	ldr	r2, [pc, #20]	; (8001558 <uartInit+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001544:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001548:	f7fe ffd2 	bl	80004f0 <bufferCreate>
 800154c:	4603      	mov	r3, r0
 800154e:	4a03      	ldr	r2, [pc, #12]	; (800155c <uartInit+0x28>)
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20010140 	.word	0x20010140
 800155c:	20010144 	.word	0x20010144

08001560 <uartEnableInterruption>:
        hardwareReceiveIT();
    }
    return received;
}

void uartEnableInterruption() {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    interruptionsEnabled = 1;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <uartEnableInterruption+0x1c>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
    transmitIntEnd = 1;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <uartEnableInterruption+0x20>)
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
    hardwareTransmitIT();
 8001570:	f000 f81a 	bl	80015a8 <hardwareTransmitIT>
    hardwareReceiveIT();
 8001574:	f000 f812 	bl	800159c <hardwareReceiveIT>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20010148 	.word	0x20010148
 8001580:	20000008 	.word	0x20000008

08001584 <uartDisableInterruption>:

void uartDisableInterruption() {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
    interruptionsEnabled = 0;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <uartDisableInterruption+0x14>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
    uartHardwareDisableInterrupts();
 800158e:	f7ff ff27 	bl	80013e0 <uartHardwareDisableInterrupts>
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20010148 	.word	0x20010148

0800159c <hardwareReceiveIT>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareReceiveIT() {
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
    uartHardwareReceiveInterrupt();
 80015a0:	f7ff fef8 	bl	8001394 <uartHardwareReceiveInterrupt>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <hardwareTransmitIT>:

static void hardwareTransmitIT() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
    if (!transmitIntEnd)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <hardwareTransmitIT+0x48>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d016      	beq.n	80015e6 <hardwareTransmitIT+0x3e>
        return;

    if (bufferHasValues(txBuffer)) {
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <hardwareTransmitIT+0x4c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff f84a 	bl	8000656 <bufferHasValues>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00f      	beq.n	80015e8 <hardwareTransmitIT+0x40>
        transmitIntEnd = 0;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <hardwareTransmitIT+0x48>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
        uint8_t data = bufferPop(txBuffer);
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <hardwareTransmitIT+0x4c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe fffd 	bl	80005d2 <bufferPop>
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
        uartHardwareTransmitInterrupt(data);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff feb0 	bl	8001344 <uartHardwareTransmitInterrupt>
 80015e4:	e000      	b.n	80015e8 <hardwareTransmitIT+0x40>
        return;
 80015e6:	bf00      	nop
    }
}
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20010140 	.word	0x20010140

080015f8 <uartReceiveIntCallback>:
        if (uartHardwareTransmitPolling(byte, 5))
            bufferPop(txBuffer);
    }
}

extern void uartReceiveIntCallback(uint8_t data) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
    if (bufferGetFreeSize(rxBuffer) > 0) {
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <uartReceiveIntCallback+0x54>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f873 	bl	80006f2 <bufferGetFreeSize>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d006      	beq.n	8001620 <uartReceiveIntCallback+0x28>
        bufferPush(rxBuffer, data);
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <uartReceiveIntCallback+0x54>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	79fa      	ldrb	r2, [r7, #7]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff85 	bl	800052a <bufferPush>
    }
    if (!isRxStarted()) rxStarted = 1;
 8001620:	f000 f84e 	bl	80016c0 <isRxStarted>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <uartReceiveIntCallback+0x38>
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <uartReceiveIntCallback+0x58>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
    TIM6->CNT = 0;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <uartReceiveIntCallback+0x5c>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24

    if (interruptionsEnabled)
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <uartReceiveIntCallback+0x60>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <uartReceiveIntCallback+0x4c>
        hardwareReceiveIT();
 8001640:	f7ff ffac 	bl	800159c <hardwareReceiveIT>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20010144 	.word	0x20010144
 8001650:	20010149 	.word	0x20010149
 8001654:	40001000 	.word	0x40001000
 8001658:	20010148 	.word	0x20010148

0800165c <uartTransmitIntCallback>:

extern void uartTransmitIntCallback() {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    transmitIntEnd = 1;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <uartTransmitIntCallback+0x1c>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <uartTransmitIntCallback+0x20>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <uartTransmitIntCallback+0x18>
        hardwareTransmitIT();
 8001670:	f7ff ff9a 	bl	80015a8 <hardwareTransmitIT>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000008 	.word	0x20000008
 800167c:	20010148 	.word	0x20010148

08001680 <rxBufferGetSize>:

uint16_t rxBufferGetSize() {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	return bufferGetSize(rxBuffer);
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <rxBufferGetSize+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff f826 	bl	80006da <bufferGetSize>
 800168e:	4603      	mov	r3, r0
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20010144 	.word	0x20010144

08001698 <rxBufToFlashBuf>:

uint8_t rxBufferPop() {
	return bufferPop(rxBuffer);
}

uint16_t rxBufToFlashBuf(uint8_t* flashBuf, uint16_t rxBufSize) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
	return bufferPopValues(rxBuffer, flashBuf, rxBufSize);
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <rxBufToFlashBuf+0x24>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	887a      	ldrh	r2, [r7, #2]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ffe3 	bl	8000678 <bufferPopValues>
 80016b2:	4603      	mov	r3, r0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20010144 	.word	0x20010144

080016c0 <isRxStarted>:

uint8_t isRxStarted() {
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
	return rxStarted;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <isRxStarted+0x14>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20010149 	.word	0x20010149

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f4:	4c0b      	ldr	r4, [pc, #44]	; (8001724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001702:	f7ff fd81 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001706:	f003 f8b7 	bl	8004878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fb6b 	bl	8000de4 <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001710:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800171c:	08004ac0 	.word	0x08004ac0
  ldr r2, =_sbss
 8001720:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001724:	200101c4 	.word	0x200101c4

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <HAL_Init+0x40>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_Init+0x40>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_Init+0x40>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f983 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	200f      	movs	r0, #15
 800175c:	f000 f83c 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff fcb6 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00

08001770 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_DeInit+0x54>)
 8001776:	f04f 32ff 	mov.w	r2, #4294967295
 800177a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_DeInit+0x54>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_DeInit+0x54>)
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_DeInit+0x54>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_DeInit+0x54>)
 8001792:	f04f 32ff 	mov.w	r2, #4294967295
 8001796:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_DeInit+0x54>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_DeInit+0x54>)
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <HAL_DeInit+0x54>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_DeInit+0x54>)
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_DeInit+0x54>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80017ba:	f000 f805 	bl	80017c8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f975 	bl	8001ae6 <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 f92f 	bl	8001a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000004 	.word	0x20000004
 8001830:	20000010 	.word	0x20000010
 8001834:	2000000c 	.word	0x2000000c

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x20>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_IncTick+0x24>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000010 	.word	0x20000010
 800185c:	20010190 	.word	0x20010190

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20010190 	.word	0x20010190

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db12      	blt.n	8001950 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	490a      	ldr	r1, [pc, #40]	; (800195c <__NVIC_DisableIRQ+0x44>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	3320      	adds	r3, #32
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001944:	f3bf 8f4f 	dsb	sy
}
 8001948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800194a:	f3bf 8f6f 	isb	sy
}
 800194e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff05 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff1a 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff0d 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff1d 	bl	8001918 <__NVIC_DisableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff94 	bl	8001a1c <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff fea8 	bl	8001860 <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d008      	beq.n	8001b30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e052      	b.n	8001bd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0216 	bic.w	r2, r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d103      	bne.n	8001b60 <HAL_DMA_Abort+0x62>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0208 	bic.w	r2, r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b80:	e013      	b.n	8001baa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b82:	f7ff fe6d 	bl	8001860 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d90c      	bls.n	8001baa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e015      	b.n	8001bd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e4      	bne.n	8001b82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	223f      	movs	r2, #63	; 0x3f
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d004      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e00c      	b.n	8001c16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2205      	movs	r2, #5
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_FLASH_Program+0xa0>)
 8001c50:	7e1b      	ldrb	r3, [r3, #24]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_FLASH_Program+0x1e>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e03b      	b.n	8001cd2 <HAL_FLASH_Program+0x96>
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_FLASH_Program+0xa0>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c64:	f000 f870 	bl	8001d48 <FLASH_WaitForLastOperation>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d12b      	bne.n	8001cca <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c78:	783b      	ldrb	r3, [r7, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	68b8      	ldr	r0, [r7, #8]
 8001c7e:	f000 f91b 	bl	8001eb8 <FLASH_Program_Byte>
 8001c82:	e016      	b.n	8001cb2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d105      	bne.n	8001c96 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001c8a:	883b      	ldrh	r3, [r7, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	68b8      	ldr	r0, [r7, #8]
 8001c90:	f000 f8ee 	bl	8001e70 <FLASH_Program_HalfWord>
 8001c94:	e00d      	b.n	8001cb2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d105      	bne.n	8001ca8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	68b8      	ldr	r0, [r7, #8]
 8001ca2:	f000 f8c3 	bl	8001e2c <FLASH_Program_Word>
 8001ca6:	e004      	b.n	8001cb2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cac:	68b8      	ldr	r0, [r7, #8]
 8001cae:	f000 f88b 	bl	8001dc8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cb6:	f000 f847 	bl	8001d48 <FLASH_WaitForLastOperation>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_FLASH_Program+0xa4>)
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_FLASH_Program+0xa4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <HAL_FLASH_Program+0xa0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20010194 	.word	0x20010194
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_FLASH_Unlock+0x38>)
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	da0b      	bge.n	8001d0e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_FLASH_Unlock+0x38>)
 8001cf8:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_FLASH_Unlock+0x3c>)
 8001cfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <HAL_FLASH_Unlock+0x38>)
 8001cfe:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <HAL_FLASH_Unlock+0x40>)
 8001d00:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_FLASH_Unlock+0x38>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da01      	bge.n	8001d0e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40023c00 	.word	0x40023c00
 8001d20:	45670123 	.word	0x45670123
 8001d24:	cdef89ab 	.word	0xcdef89ab

08001d28 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_FLASH_Lock+0x1c>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_FLASH_Lock+0x1c>)
 8001d32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d36:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40023c00 	.word	0x40023c00

08001d48 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <FLASH_WaitForLastOperation+0x78>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d5a:	f7ff fd81 	bl	8001860 <HAL_GetTick>
 8001d5e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001d60:	e010      	b.n	8001d84 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d00c      	beq.n	8001d84 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <FLASH_WaitForLastOperation+0x38>
 8001d70:	f7ff fd76 	bl	8001860 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d201      	bcs.n	8001d84 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e019      	b.n	8001db8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <FLASH_WaitForLastOperation+0x7c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1e8      	bne.n	8001d62 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <FLASH_WaitForLastOperation+0x7c>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <FLASH_WaitForLastOperation+0x7c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <FLASH_WaitForLastOperation+0x7c>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001dae:	f000 f8a5 	bl	8001efc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
  
}  
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20010194 	.word	0x20010194
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <FLASH_Program_DoubleWord+0x60>)
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <FLASH_Program_DoubleWord+0x60>)
 8001dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <FLASH_Program_DoubleWord+0x60>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <FLASH_Program_DoubleWord+0x60>)
 8001de6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001dea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <FLASH_Program_DoubleWord+0x60>)
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <FLASH_Program_DoubleWord+0x60>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001e04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	000a      	movs	r2, r1
 8001e12:	2300      	movs	r3, #0
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	3104      	adds	r1, #4
 8001e18:	4613      	mov	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <FLASH_Program_Word+0x40>)
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <FLASH_Program_Word+0x40>)
 8001e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <FLASH_Program_Word+0x40>)
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <FLASH_Program_Word+0x40>)
 8001e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <FLASH_Program_Word+0x40>)
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <FLASH_Program_Word+0x40>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	601a      	str	r2, [r3, #0]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40023c00 	.word	0x40023c00

08001e70 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <FLASH_Program_HalfWord+0x44>)
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <FLASH_Program_HalfWord+0x44>)
 8001e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <FLASH_Program_HalfWord+0x44>)
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <FLASH_Program_HalfWord+0x44>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <FLASH_Program_HalfWord+0x44>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <FLASH_Program_HalfWord+0x44>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	801a      	strh	r2, [r3, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <FLASH_Program_Byte+0x40>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <FLASH_Program_Byte+0x40>)
 8001eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ece:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <FLASH_Program_Byte+0x40>)
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <FLASH_Program_Byte+0x40>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <FLASH_Program_Byte+0x40>)
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <FLASH_Program_Byte+0x40>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	701a      	strb	r2, [r3, #0]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001f00:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001f16:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001f34:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f38:	2220      	movs	r2, #32
 8001f3a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001f52:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001f54:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001f70:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001f8e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f043 0320 	orr.w	r3, r3, #32
 8001fac:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <FLASH_SetErrorCode+0xc8>)
 8001fae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <FLASH_SetErrorCode+0xc4>)
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	60da      	str	r2, [r3, #12]
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40023c00 	.word	0x40023c00
 8001fc4:	20010194 	.word	0x20010194

08001fc8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <HAL_FLASHEx_Erase+0xdc>)
 8001fdc:	7e1b      	ldrb	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_FLASHEx_Erase+0x1e>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e05a      	b.n	800209c <HAL_FLASHEx_Erase+0xd4>
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <HAL_FLASHEx_Erase+0xdc>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ff0:	f7ff feaa 	bl	8001d48 <FLASH_WaitForLastOperation>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d14a      	bne.n	8002094 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d117      	bne.n	800203e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4619      	mov	r1, r3
 800201a:	4610      	mov	r0, r2
 800201c:	f000 f846 	bl	80020ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002020:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002024:	f7ff fe90 	bl	8001d48 <FLASH_WaitForLastOperation>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_FLASHEx_Erase+0xe0>)
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <HAL_FLASHEx_Erase+0xe0>)
 8002032:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002036:	f023 0304 	bic.w	r3, r3, #4
 800203a:	6113      	str	r3, [r2, #16]
 800203c:	e028      	b.n	8002090 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	e01c      	b.n	8002080 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	4619      	mov	r1, r3
 800204e:	68b8      	ldr	r0, [r7, #8]
 8002050:	f000 f866 	bl	8002120 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002054:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002058:	f7ff fe76 	bl	8001d48 <FLASH_WaitForLastOperation>
 800205c:	4603      	mov	r3, r0
 800205e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_FLASHEx_Erase+0xe0>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <HAL_FLASHEx_Erase+0xe0>)
 8002066:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800206a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	601a      	str	r2, [r3, #0]
          break;
 8002078:	e00a      	b.n	8002090 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	3301      	adds	r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4413      	add	r3, r2
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	429a      	cmp	r2, r3
 800208e:	d3da      	bcc.n	8002046 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002090:	f000 f894 	bl	80021bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_FLASHEx_Erase+0xdc>)
 8002096:	2200      	movs	r2, #0
 8002098:	761a      	strb	r2, [r3, #24]

  return status;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20010194 	.word	0x20010194
 80020a8:	40023c00 	.word	0x40023c00

080020ac <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <FLASH_MassErase+0x70>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <FLASH_MassErase+0x70>)
 80020be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c2:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d108      	bne.n	80020dc <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <FLASH_MassErase+0x70>)
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <FLASH_MassErase+0x70>)
 80020d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6113      	str	r3, [r2, #16]
 80020da:	e00f      	b.n	80020fc <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d106      	bne.n	80020f0 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <FLASH_MassErase+0x70>)
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	4a0d      	ldr	r2, [pc, #52]	; (800211c <FLASH_MassErase+0x70>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6113      	str	r3, [r2, #16]
 80020ee:	e005      	b.n	80020fc <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <FLASH_MassErase+0x70>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4a09      	ldr	r2, [pc, #36]	; (800211c <FLASH_MassErase+0x70>)
 80020f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020fa:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <FLASH_MassErase+0x70>)
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	4313      	orrs	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <FLASH_MassErase+0x70>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	6113      	str	r3, [r2, #16]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023c00 	.word	0x40023c00

08002120 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e010      	b.n	800215e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d103      	bne.n	800214a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e009      	b.n	800215e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d103      	bne.n	8002158 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e002      	b.n	800215e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002158:	f44f 7340 	mov.w	r3, #768	; 0x300
 800215c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b0b      	cmp	r3, #11
 8002162:	d902      	bls.n	800216a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <FLASH_Erase_Sector+0x98>)
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <FLASH_Erase_Sector+0x98>)
 8002170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002174:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <FLASH_Erase_Sector+0x98>)
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	490f      	ldr	r1, [pc, #60]	; (80021b8 <FLASH_Erase_Sector+0x98>)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <FLASH_Erase_Sector+0x98>)
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <FLASH_Erase_Sector+0x98>)
 8002188:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800218c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <FLASH_Erase_Sector+0x98>)
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4313      	orrs	r3, r2
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <FLASH_Erase_Sector+0x98>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <FLASH_Erase_Sector+0x98>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <FLASH_Erase_Sector+0x98>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021aa:	6113      	str	r3, [r2, #16]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40023c00 	.word	0x40023c00

080021bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <FLASH_FlushCaches+0x88>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d017      	beq.n	80021fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <FLASH_FlushCaches+0x88>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <FLASH_FlushCaches+0x88>)
 80021d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <FLASH_FlushCaches+0x88>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a19      	ldr	r2, [pc, #100]	; (8002244 <FLASH_FlushCaches+0x88>)
 80021de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <FLASH_FlushCaches+0x88>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a16      	ldr	r2, [pc, #88]	; (8002244 <FLASH_FlushCaches+0x88>)
 80021ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <FLASH_FlushCaches+0x88>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a13      	ldr	r2, [pc, #76]	; (8002244 <FLASH_FlushCaches+0x88>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <FLASH_FlushCaches+0x88>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d017      	beq.n	8002238 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <FLASH_FlushCaches+0x88>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <FLASH_FlushCaches+0x88>)
 800220e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002212:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <FLASH_FlushCaches+0x88>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <FLASH_FlushCaches+0x88>)
 800221a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <FLASH_FlushCaches+0x88>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <FLASH_FlushCaches+0x88>)
 8002226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800222a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <FLASH_FlushCaches+0x88>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <FLASH_FlushCaches+0x88>)
 8002232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002236:	6013      	str	r3, [r2, #0]
  }
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e177      	b.n	8002554 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	429a      	cmp	r2, r3
 800227e:	f040 8166 	bne.w	800254e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d005      	beq.n	800229a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	2b02      	cmp	r3, #2
 8002298:	d130      	bne.n	80022fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 0201 	and.w	r2, r3, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b03      	cmp	r3, #3
 8002306:	d017      	beq.n	8002338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d123      	bne.n	800238c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	69b9      	ldr	r1, [r7, #24]
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0203 	and.w	r2, r3, #3
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80c0 	beq.w	800254e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	4b66      	ldr	r3, [pc, #408]	; (800256c <HAL_GPIO_Init+0x324>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4a65      	ldr	r2, [pc, #404]	; (800256c <HAL_GPIO_Init+0x324>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
 80023de:	4b63      	ldr	r3, [pc, #396]	; (800256c <HAL_GPIO_Init+0x324>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ea:	4a61      	ldr	r2, [pc, #388]	; (8002570 <HAL_GPIO_Init+0x328>)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	3302      	adds	r3, #2
 80023f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	220f      	movs	r2, #15
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a58      	ldr	r2, [pc, #352]	; (8002574 <HAL_GPIO_Init+0x32c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d037      	beq.n	8002486 <HAL_GPIO_Init+0x23e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a57      	ldr	r2, [pc, #348]	; (8002578 <HAL_GPIO_Init+0x330>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d031      	beq.n	8002482 <HAL_GPIO_Init+0x23a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a56      	ldr	r2, [pc, #344]	; (800257c <HAL_GPIO_Init+0x334>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d02b      	beq.n	800247e <HAL_GPIO_Init+0x236>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a55      	ldr	r2, [pc, #340]	; (8002580 <HAL_GPIO_Init+0x338>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d025      	beq.n	800247a <HAL_GPIO_Init+0x232>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a54      	ldr	r2, [pc, #336]	; (8002584 <HAL_GPIO_Init+0x33c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d01f      	beq.n	8002476 <HAL_GPIO_Init+0x22e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a53      	ldr	r2, [pc, #332]	; (8002588 <HAL_GPIO_Init+0x340>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d019      	beq.n	8002472 <HAL_GPIO_Init+0x22a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a52      	ldr	r2, [pc, #328]	; (800258c <HAL_GPIO_Init+0x344>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_GPIO_Init+0x226>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a51      	ldr	r2, [pc, #324]	; (8002590 <HAL_GPIO_Init+0x348>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00d      	beq.n	800246a <HAL_GPIO_Init+0x222>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a50      	ldr	r2, [pc, #320]	; (8002594 <HAL_GPIO_Init+0x34c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d007      	beq.n	8002466 <HAL_GPIO_Init+0x21e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4f      	ldr	r2, [pc, #316]	; (8002598 <HAL_GPIO_Init+0x350>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d101      	bne.n	8002462 <HAL_GPIO_Init+0x21a>
 800245e:	2309      	movs	r3, #9
 8002460:	e012      	b.n	8002488 <HAL_GPIO_Init+0x240>
 8002462:	230a      	movs	r3, #10
 8002464:	e010      	b.n	8002488 <HAL_GPIO_Init+0x240>
 8002466:	2308      	movs	r3, #8
 8002468:	e00e      	b.n	8002488 <HAL_GPIO_Init+0x240>
 800246a:	2307      	movs	r3, #7
 800246c:	e00c      	b.n	8002488 <HAL_GPIO_Init+0x240>
 800246e:	2306      	movs	r3, #6
 8002470:	e00a      	b.n	8002488 <HAL_GPIO_Init+0x240>
 8002472:	2305      	movs	r3, #5
 8002474:	e008      	b.n	8002488 <HAL_GPIO_Init+0x240>
 8002476:	2304      	movs	r3, #4
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x240>
 800247a:	2303      	movs	r3, #3
 800247c:	e004      	b.n	8002488 <HAL_GPIO_Init+0x240>
 800247e:	2302      	movs	r3, #2
 8002480:	e002      	b.n	8002488 <HAL_GPIO_Init+0x240>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_GPIO_Init+0x240>
 8002486:	2300      	movs	r3, #0
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	f002 0203 	and.w	r2, r2, #3
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	4093      	lsls	r3, r2
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002498:	4935      	ldr	r1, [pc, #212]	; (8002570 <HAL_GPIO_Init+0x328>)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <HAL_GPIO_Init+0x354>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ca:	4a34      	ldr	r2, [pc, #208]	; (800259c <HAL_GPIO_Init+0x354>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_GPIO_Init+0x354>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f4:	4a29      	ldr	r2, [pc, #164]	; (800259c <HAL_GPIO_Init+0x354>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <HAL_GPIO_Init+0x354>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_GPIO_Init+0x354>)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002524:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_GPIO_Init+0x354>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <HAL_GPIO_Init+0x354>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b0f      	cmp	r3, #15
 8002558:	f67f ae84 	bls.w	8002264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	40013800 	.word	0x40013800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020400 	.word	0x40020400
 800257c:	40020800 	.word	0x40020800
 8002580:	40020c00 	.word	0x40020c00
 8002584:	40021000 	.word	0x40021000
 8002588:	40021400 	.word	0x40021400
 800258c:	40021800 	.word	0x40021800
 8002590:	40021c00 	.word	0x40021c00
 8002594:	40022000 	.word	0x40022000
 8002598:	40022400 	.word	0x40022400
 800259c:	40013c00 	.word	0x40013c00

080025a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e001      	b.n	80025c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80025e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e267      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d075      	beq.n	80026fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260e:	4b88      	ldr	r3, [pc, #544]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b04      	cmp	r3, #4
 8002618:	d00c      	beq.n	8002634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261a:	4b85      	ldr	r3, [pc, #532]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002622:	2b08      	cmp	r3, #8
 8002624:	d112      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002626:	4b82      	ldr	r3, [pc, #520]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002632:	d10b      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	4b7e      	ldr	r3, [pc, #504]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d05b      	beq.n	80026f8 <HAL_RCC_OscConfig+0x108>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d157      	bne.n	80026f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e242      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d106      	bne.n	8002664 <HAL_RCC_OscConfig+0x74>
 8002656:	4b76      	ldr	r3, [pc, #472]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a75      	ldr	r2, [pc, #468]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e01d      	b.n	80026a0 <HAL_RCC_OscConfig+0xb0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x98>
 800266e:	4b70      	ldr	r3, [pc, #448]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6f      	ldr	r2, [pc, #444]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b6d      	ldr	r3, [pc, #436]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6c      	ldr	r2, [pc, #432]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0xb0>
 8002688:	4b69      	ldr	r3, [pc, #420]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a68      	ldr	r2, [pc, #416]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b66      	ldr	r3, [pc, #408]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a65      	ldr	r2, [pc, #404]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff f8da 	bl	8001860 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b0:	f7ff f8d6 	bl	8001860 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e207      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0xc0>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff f8c6 	bl	8001860 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff f8c2 	bl	8001860 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1f3      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b51      	ldr	r3, [pc, #324]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0xe8>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d063      	beq.n	80027ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002706:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800271a:	2b08      	cmp	r3, #8
 800271c:	d11c      	bne.n	8002758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271e:	4b44      	ldr	r3, [pc, #272]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	4b41      	ldr	r3, [pc, #260]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x152>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e1c7      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4937      	ldr	r1, [pc, #220]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	e03a      	b.n	80027ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002760:	4b34      	ldr	r3, [pc, #208]	; (8002834 <HAL_RCC_OscConfig+0x244>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7ff f87b 	bl	8001860 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276e:	f7ff f877 	bl	8001860 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1a8      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4925      	ldr	r1, [pc, #148]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
 80027a0:	e015      	b.n	80027ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x244>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff f85a 	bl	8001860 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b0:	f7ff f856 	bl	8001860 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e187      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d036      	beq.n	8002848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_RCC_OscConfig+0x248>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7ff f83a 	bl	8001860 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f0:	f7ff f836 	bl	8001860 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e167      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x200>
 800280e:	e01b      	b.n	8002848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_RCC_OscConfig+0x248>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002816:	f7ff f823 	bl	8001860 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	e00e      	b.n	800283c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281e:	f7ff f81f 	bl	8001860 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d907      	bls.n	800283c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e150      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
 8002830:	40023800 	.word	0x40023800
 8002834:	42470000 	.word	0x42470000
 8002838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800283e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ea      	bne.n	800281e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8097 	beq.w	8002984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	4b81      	ldr	r3, [pc, #516]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	4b7d      	ldr	r3, [pc, #500]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a7c      	ldr	r2, [pc, #496]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b7a      	ldr	r3, [pc, #488]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b77      	ldr	r3, [pc, #476]	; (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d118      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002892:	4b74      	ldr	r3, [pc, #464]	; (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a73      	ldr	r2, [pc, #460]	; (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7fe ffdf 	bl	8001860 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a6:	f7fe ffdb 	bl	8001860 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e10c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4b6a      	ldr	r3, [pc, #424]	; (8002a64 <HAL_RCC_OscConfig+0x474>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x2ea>
 80028cc:	4b64      	ldr	r3, [pc, #400]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6713      	str	r3, [r2, #112]	; 0x70
 80028d8:	e01c      	b.n	8002914 <HAL_RCC_OscConfig+0x324>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x30c>
 80028e2:	4b5f      	ldr	r3, [pc, #380]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a5e      	ldr	r2, [pc, #376]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
 80028ee:	4b5c      	ldr	r3, [pc, #368]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	4a5b      	ldr	r2, [pc, #364]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6713      	str	r3, [r2, #112]	; 0x70
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x324>
 80028fc:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	4a57      	ldr	r2, [pc, #348]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	; 0x70
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	4a54      	ldr	r2, [pc, #336]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7fe ffa0 	bl	8001860 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe ff9c 	bl	8001860 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0cb      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0ee      	beq.n	8002924 <HAL_RCC_OscConfig+0x334>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002948:	f7fe ff8a 	bl	8001860 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe ff86 	bl	8001860 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0b5      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	4b3e      	ldr	r3, [pc, #248]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ee      	bne.n	8002950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002978:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	4a38      	ldr	r2, [pc, #224]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002982:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80a1 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800298e:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b08      	cmp	r3, #8
 8002998:	d05c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d141      	bne.n	8002a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_RCC_OscConfig+0x478>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe ff5a 	bl	8001860 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe ff56 	bl	8001860 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e087      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	019b      	lsls	r3, r3, #6
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	3b01      	subs	r3, #1
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	491b      	ldr	r1, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x478>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fe ff2f 	bl	8001860 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a06:	f7fe ff2b 	bl	8001860 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e05c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x416>
 8002a24:	e054      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_RCC_OscConfig+0x478>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe ff18 	bl	8001860 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe ff14 	bl	8001860 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e045      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x444>
 8002a52:	e03d      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e038      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_RCC_OscConfig+0x4ec>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d028      	beq.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d121      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d11a      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d111      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0cc      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d90c      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b65      	ldr	r3, [pc, #404]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d044      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d119      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e067      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4934      	ldr	r1, [pc, #208]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7fe fe46 	bl	8001860 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe fe42 	bl	8001860 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e04f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d20c      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490a      	ldr	r1, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fda6 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08004a98 	.word	0x08004a98
 8002ca4:	20000004 	.word	0x20000004
 8002ca8:	2000000c 	.word	0x2000000c

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb0:	b090      	sub	sp, #64	; 0x40
 8002cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb8:	2300      	movs	r3, #0
 8002cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d00d      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x40>
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	f200 80a1 	bhi.w	8002e18 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cde:	e09b      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ce2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ce4:	e09b      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ce6:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cea:	e098      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cec:	4b4f      	ldr	r3, [pc, #316]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf6:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d028      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d02:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	2200      	movs	r2, #0
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d14:	2100      	movs	r1, #0
 8002d16:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d18:	fb03 f201 	mul.w	r2, r3, r1
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	fb00 f303 	mul.w	r3, r0, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	4a43      	ldr	r2, [pc, #268]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d26:	fba0 1202 	umull	r1, r2, r0, r2
 8002d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d32:	4413      	add	r3, r2
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	2200      	movs	r2, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	61fa      	str	r2, [r7, #28]
 8002d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d46:	f7fd fa51 	bl	80001ec <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4613      	mov	r3, r2
 8002d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d52:	e053      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d54:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	099b      	lsrs	r3, r3, #6
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	617a      	str	r2, [r7, #20]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d66:	f04f 0b00 	mov.w	fp, #0
 8002d6a:	4652      	mov	r2, sl
 8002d6c:	465b      	mov	r3, fp
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7c:	0150      	lsls	r0, r2, #5
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	ebb2 080a 	subs.w	r8, r2, sl
 8002d86:	eb63 090b 	sbc.w	r9, r3, fp
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d9e:	ebb2 0408 	subs.w	r4, r2, r8
 8002da2:	eb63 0509 	sbc.w	r5, r3, r9
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	00eb      	lsls	r3, r5, #3
 8002db0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002db4:	00e2      	lsls	r2, r4, #3
 8002db6:	4614      	mov	r4, r2
 8002db8:	461d      	mov	r5, r3
 8002dba:	eb14 030a 	adds.w	r3, r4, sl
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	eb45 030b 	adc.w	r3, r5, fp
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	028b      	lsls	r3, r1, #10
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ddc:	4621      	mov	r1, r4
 8002dde:	028a      	lsls	r2, r1, #10
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de6:	2200      	movs	r2, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	60fa      	str	r2, [r7, #12]
 8002dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002df0:	f7fd f9fc 	bl	80001ec <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4613      	mov	r3, r2
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	3301      	adds	r3, #1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e16:	e002      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3740      	adds	r7, #64	; 0x40
 8002e24:	46bd      	mov	sp, r7
 8002e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	00f42400 	.word	0x00f42400
 8002e34:	017d7840 	.word	0x017d7840

08002e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000004 	.word	0x20000004

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e54:	f7ff fff0 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0a9b      	lsrs	r3, r3, #10
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4903      	ldr	r1, [pc, #12]	; (8002e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	08004aa8 	.word	0x08004aa8

08002e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e7c:	f7ff ffdc 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0b5b      	lsrs	r3, r3, #13
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	; (8002e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08004aa8 	.word	0x08004aa8

08002ea0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ea6:	f7fe fcdb 	bl	8001860 <HAL_GetTick>
 8002eaa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002eac:	4b72      	ldr	r3, [pc, #456]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a71      	ldr	r2, [pc, #452]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eba:	f7fe fcd1 	bl	8001860 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0d0      	b.n	800306e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002ed8:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a66      	ldr	r2, [pc, #408]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ee4:	f7fe fcbc 	bl	8001860 <HAL_GetTick>
 8002ee8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002eea:	4b63      	ldr	r3, [pc, #396]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef2:	f7fe fcb5 	bl	8001860 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0b2      	b.n	800306e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002f08:	4b5b      	ldr	r3, [pc, #364]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ee      	bne.n	8002ef2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f14:	f7fe fca4 	bl	8001860 <HAL_GetTick>
 8002f18:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002f1a:	4b57      	ldr	r3, [pc, #348]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a56      	ldr	r2, [pc, #344]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002f20:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002f24:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f28:	f7fe fc9a 	bl	8001860 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e099      	b.n	800306e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002f3a:	4b4f      	ldr	r3, [pc, #316]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f46:	f7fe fc8b 	bl	8001860 <HAL_GetTick>
 8002f4a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f4c:	4b4a      	ldr	r3, [pc, #296]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a49      	ldr	r2, [pc, #292]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7fe fc81 	bl	8001860 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e080      	b.n	800306e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002f6c:	4b42      	ldr	r3, [pc, #264]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f0      	bne.n	8002f5a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f78:	f7fe fc72 	bl	8001860 <HAL_GetTick>
 8002f7c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002f7e:	4b3e      	ldr	r3, [pc, #248]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a3d      	ldr	r2, [pc, #244]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002f84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f88:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f8c:	f7fe fc68 	bl	8001860 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e067      	b.n	800306e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002f9e:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002faa:	f7fe fc59 	bl	8001860 <HAL_GetTick>
 8002fae:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002fb0:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a30      	ldr	r2, [pc, #192]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fbe:	f7fe fc4f 	bl	8001860 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e04e      	b.n	800306e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002fd0:	4b29      	ldr	r3, [pc, #164]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002fdc:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002fde:	4a27      	ldr	r2, [pc, #156]	; (800307c <HAL_RCC_DeInit+0x1dc>)
 8002fe0:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002fe2:	4b25      	ldr	r3, [pc, #148]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_RCC_DeInit+0x1e0>)
 8002fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8002fea:	4b23      	ldr	r3, [pc, #140]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002fec:	4a24      	ldr	r2, [pc, #144]	; (8003080 <HAL_RCC_DeInit+0x1e0>)
 8002fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002ff2:	4b21      	ldr	r3, [pc, #132]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4a20      	ldr	r2, [pc, #128]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8002ff8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002ffc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8003004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003008:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8003010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003014:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	4a17      	ldr	r2, [pc, #92]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 800301c:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003020:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8003028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800302c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	4a11      	ldr	r2, [pc, #68]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8003034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003038:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800303a:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 8003048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304a:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <HAL_RCC_DeInit+0x1d8>)
 800304c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003050:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_DeInit+0x1e4>)
 8003054:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <HAL_RCC_DeInit+0x1e8>)
 8003056:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_RCC_DeInit+0x1ec>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fbbb 	bl	80017d8 <HAL_InitTick>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 800306c:	2300      	movs	r3, #0
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	04003010 	.word	0x04003010
 8003080:	24003000 	.word	0x24003000
 8003084:	20000004 	.word	0x20000004
 8003088:	00f42400 	.word	0x00f42400
 800308c:	2000000c 	.word	0x2000000c

08003090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e041      	b.n	8003126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe f8ee 	bl	8001298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f000 f9fe 	bl	80034d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d001      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e04e      	b.n	80031e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a23      	ldr	r2, [pc, #140]	; (80031f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d022      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x80>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003172:	d01d      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x80>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d018      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x80>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d013      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x80>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_TIM_Base_Start_IT+0xd0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00e      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x80>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_TIM_Base_Start_IT+0xd4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d009      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x80>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_TIM_Base_Start_IT+0xd8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x80>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_TIM_Base_Start_IT+0xdc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d111      	bne.n	80031d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b06      	cmp	r3, #6
 80031c0:	d010      	beq.n	80031e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d2:	e007      	b.n	80031e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40010000 	.word	0x40010000
 80031f8:	40000400 	.word	0x40000400
 80031fc:	40000800 	.word	0x40000800
 8003200:	40000c00 	.word	0x40000c00
 8003204:	40010400 	.word	0x40010400
 8003208:	40014000 	.word	0x40014000
 800320c:	40001800 	.word	0x40001800

08003210 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10f      	bne.n	8003258 <HAL_TIM_Base_Stop_IT+0x48>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6a1a      	ldr	r2, [r3, #32]
 800323e:	f240 4344 	movw	r3, #1092	; 0x444
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <HAL_TIM_Base_Stop_IT+0x48>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b02      	cmp	r3, #2
 8003282:	d122      	bne.n	80032ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	d11b      	bne.n	80032ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 0202 	mvn.w	r2, #2
 800329a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f8ee 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 80032b6:	e005      	b.n	80032c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f8e0 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8f1 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d122      	bne.n	800331e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d11b      	bne.n	800331e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 0204 	mvn.w	r2, #4
 80032ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f8c4 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 800330a:	e005      	b.n	8003318 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f8b6 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f8c7 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b08      	cmp	r3, #8
 800332a:	d122      	bne.n	8003372 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b08      	cmp	r3, #8
 8003338:	d11b      	bne.n	8003372 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f06f 0208 	mvn.w	r2, #8
 8003342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2204      	movs	r2, #4
 8003348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f89a 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 800335e:	e005      	b.n	800336c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f88c 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f89d 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b10      	cmp	r3, #16
 800337e:	d122      	bne.n	80033c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b10      	cmp	r3, #16
 800338c:	d11b      	bne.n	80033c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0210 	mvn.w	r2, #16
 8003396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2208      	movs	r2, #8
 800339c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f870 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 80033b2:	e005      	b.n	80033c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f862 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f873 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10e      	bne.n	80033f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f06f 0201 	mvn.w	r2, #1
 80033ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7fd ff93 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b80      	cmp	r3, #128	; 0x80
 80033fe:	d10e      	bne.n	800341e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	2b80      	cmp	r3, #128	; 0x80
 800340c:	d107      	bne.n	800341e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f97f 	bl	800371c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d10e      	bne.n	800344a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d107      	bne.n	800344a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f838 	bl	80034ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b20      	cmp	r3, #32
 8003456:	d10e      	bne.n	8003476 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b20      	cmp	r3, #32
 8003464:	d107      	bne.n	8003476 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0220 	mvn.w	r2, #32
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f949 	bl	8003708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a40      	ldr	r2, [pc, #256]	; (80035e4 <TIM_Base_SetConfig+0x114>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d013      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ee:	d00f      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3d      	ldr	r2, [pc, #244]	; (80035e8 <TIM_Base_SetConfig+0x118>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00b      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <TIM_Base_SetConfig+0x11c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <TIM_Base_SetConfig+0x120>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d003      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3a      	ldr	r2, [pc, #232]	; (80035f4 <TIM_Base_SetConfig+0x124>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d108      	bne.n	8003522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2f      	ldr	r2, [pc, #188]	; (80035e4 <TIM_Base_SetConfig+0x114>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d02b      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003530:	d027      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2c      	ldr	r2, [pc, #176]	; (80035e8 <TIM_Base_SetConfig+0x118>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d023      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2b      	ldr	r2, [pc, #172]	; (80035ec <TIM_Base_SetConfig+0x11c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01f      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <TIM_Base_SetConfig+0x120>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01b      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <TIM_Base_SetConfig+0x124>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d017      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <TIM_Base_SetConfig+0x128>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a27      	ldr	r2, [pc, #156]	; (80035fc <TIM_Base_SetConfig+0x12c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00f      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a26      	ldr	r2, [pc, #152]	; (8003600 <TIM_Base_SetConfig+0x130>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00b      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a25      	ldr	r2, [pc, #148]	; (8003604 <TIM_Base_SetConfig+0x134>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a24      	ldr	r2, [pc, #144]	; (8003608 <TIM_Base_SetConfig+0x138>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a23      	ldr	r2, [pc, #140]	; (800360c <TIM_Base_SetConfig+0x13c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <TIM_Base_SetConfig+0x114>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0xf8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <TIM_Base_SetConfig+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d103      	bne.n	80035d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	615a      	str	r2, [r3, #20]
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40010400 	.word	0x40010400
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800
 8003604:	40001800 	.word	0x40001800
 8003608:	40001c00 	.word	0x40001c00
 800360c:	40002000 	.word	0x40002000

08003610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e05a      	b.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a21      	ldr	r2, [pc, #132]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d01d      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a17      	ldr	r2, [pc, #92]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a15      	ldr	r2, [pc, #84]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10c      	bne.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40010400 	.word	0x40010400
 8003700:	40014000 	.word	0x40014000
 8003704:	40001800 	.word	0x40001800

08003708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e03f      	b.n	80037c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fd fe78 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	; 0x24
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fe05 	bl	8004384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	4613      	mov	r3, r2
 80037d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d130      	bne.n	8003846 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_UART_Transmit_IT+0x26>
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e029      	b.n	8003848 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_UART_Transmit_IT+0x38>
 80037fe:	2302      	movs	r3, #2
 8003800:	e022      	b.n	8003848 <HAL_UART_Transmit_IT+0x7e>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2221      	movs	r2, #33	; 0x21
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003840:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e000      	b.n	8003848 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	4613      	mov	r3, r2
 8003860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b20      	cmp	r3, #32
 800386c:	d11d      	bne.n	80038aa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_UART_Receive_IT+0x26>
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e016      	b.n	80038ac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_UART_Receive_IT+0x38>
 8003888:	2302      	movs	r3, #2
 800388a:	e00f      	b.n	80038ac <HAL_UART_Receive_IT+0x58>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	461a      	mov	r2, r3
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fb97 	bl	8003fd4 <UART_Start_Receive_IT>
 80038a6:	4603      	mov	r3, r0
 80038a8:	e000      	b.n	80038ac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80038aa:	2302      	movs	r3, #2
  }
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b0a0      	sub	sp, #128	; 0x80
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80038cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038ce:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80038d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80038dc:	66ba      	str	r2, [r7, #104]	; 0x68
 80038de:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80038e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80038ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e5      	bne.n	80038bc <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	67bb      	str	r3, [r7, #120]	; 0x78
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3314      	adds	r3, #20
 800390e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003910:	657a      	str	r2, [r7, #84]	; 0x54
 8003912:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003916:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800391e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	2b01      	cmp	r3, #1
 800392a:	d119      	bne.n	8003960 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	f023 0310 	bic.w	r3, r3, #16
 8003942:	677b      	str	r3, [r7, #116]	; 0x74
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800394c:	643a      	str	r2, [r7, #64]	; 0x40
 800394e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e5      	bne.n	800392c <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d136      	bne.n	80039dc <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3314      	adds	r3, #20
 8003974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	61fb      	str	r3, [r7, #28]
   return(result);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003984:	673b      	str	r3, [r7, #112]	; 0x70
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3314      	adds	r3, #20
 800398c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800398e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e5      	bne.n	800396e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ae:	2200      	movs	r2, #0
 80039b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe f8a1 	bl	8001afe <HAL_DMA_Abort>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe f92b 	bl	8001c22 <HAL_DMA_GetError>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d104      	bne.n	80039dc <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2210      	movs	r2, #16
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e052      	b.n	8003a82 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d136      	bne.n	8003a58 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a0a:	61ba      	str	r2, [r7, #24]
 8003a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6979      	ldr	r1, [r7, #20]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	613b      	str	r3, [r7, #16]
   return(result);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe f863 	bl	8001afe <HAL_DMA_Abort>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00c      	beq.n	8003a58 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe f8ed 	bl	8001c22 <HAL_DMA_GetError>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2210      	movs	r2, #16
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e014      	b.n	8003a82 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3780      	adds	r7, #128	; 0x80
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b0ba      	sub	sp, #232	; 0xe8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10f      	bne.n	8003af2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_UART_IRQHandler+0x66>
 8003ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fb8f 	bl	800420e <UART_Receive_IT>
      return;
 8003af0:	e256      	b.n	8003fa0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80de 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x22c>
 8003afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80d1 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_UART_IRQHandler+0xae>
 8003b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_UART_IRQHandler+0xd2>
 8003b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f043 0202 	orr.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_UART_IRQHandler+0xf6>
 8003b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d011      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x126>
 8003b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d105      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f043 0208 	orr.w	r2, r3, #8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 81ed 	beq.w	8003f96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_UART_IRQHandler+0x14e>
 8003bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fb1a 	bl	800420e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <HAL_UART_IRQHandler+0x17a>
 8003bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d04f      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa22 	bl	8004050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d141      	bne.n	8003c9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3314      	adds	r3, #20
 8003c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1d9      	bne.n	8003c1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d013      	beq.n	8003c96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	4a7d      	ldr	r2, [pc, #500]	; (8003e68 <HAL_UART_IRQHandler+0x3dc>)
 8003c74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd ffaf 	bl	8001bde <HAL_DMA_Abort_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c90:	4610      	mov	r0, r2
 8003c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	e00e      	b.n	8003cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f986 	bl	8003fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e00a      	b.n	8003cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f982 	bl	8003fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e006      	b.n	8003cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f97e 	bl	8003fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cb2:	e170      	b.n	8003f96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	bf00      	nop
    return;
 8003cb6:	e16e      	b.n	8003f96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 814a 	bne.w	8003f56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8143 	beq.w	8003f56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 813c 	beq.w	8003f56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	f040 80b4 	bne.w	8003e6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8140 	beq.w	8003f9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d22:	429a      	cmp	r2, r3
 8003d24:	f080 8139 	bcs.w	8003f9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3a:	f000 8088 	beq.w	8003e4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1d9      	bne.n	8003d3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003db2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003db6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e1      	bne.n	8003d8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3314      	adds	r3, #20
 8003de6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003df0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e3      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e30:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e3      	bne.n	8003e0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fd fe58 	bl	8001afe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f8ac 	bl	8003fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e64:	e099      	b.n	8003f9a <HAL_UART_IRQHandler+0x50e>
 8003e66:	bf00      	nop
 8003e68:	08004117 	.word	0x08004117
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 808b 	beq.w	8003f9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8086 	beq.w	8003f9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003eb6:	647a      	str	r2, [r7, #68]	; 0x44
 8003eb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e3      	bne.n	8003e92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3314      	adds	r3, #20
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3314      	adds	r3, #20
 8003eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003eee:	633a      	str	r2, [r7, #48]	; 0x30
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e3      	bne.n	8003eca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0310 	bic.w	r3, r3, #16
 8003f26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f34:	61fa      	str	r2, [r7, #28]
 8003f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	69b9      	ldr	r1, [r7, #24]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	617b      	str	r3, [r7, #20]
   return(result);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e3      	bne.n	8003f10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f834 	bl	8003fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f54:	e023      	b.n	8003f9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_UART_IRQHandler+0x4ea>
 8003f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8e5 	bl	800413e <UART_Transmit_IT>
    return;
 8003f74:	e014      	b.n	8003fa0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00e      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x514>
 8003f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f925 	bl	80041de <UART_EndTransmit_IT>
    return;
 8003f94:	e004      	b.n	8003fa0 <HAL_UART_IRQHandler+0x514>
    return;
 8003f96:	bf00      	nop
 8003f98:	e002      	b.n	8003fa0 <HAL_UART_IRQHandler+0x514>
      return;
 8003f9a:	bf00      	nop
 8003f9c:	e000      	b.n	8003fa0 <HAL_UART_IRQHandler+0x514>
      return;
 8003f9e:	bf00      	nop
  }
}
 8003fa0:	37e8      	adds	r7, #232	; 0xe8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop

08003fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2222      	movs	r2, #34	; 0x22
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004020:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0220 	orr.w	r2, r2, #32
 8004040:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b095      	sub	sp, #84	; 0x54
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800406e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004078:	643a      	str	r2, [r7, #64]	; 0x40
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800407e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e5      	bne.n	8004058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	61fb      	str	r3, [r7, #28]
   return(result);
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3314      	adds	r3, #20
 80040aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e5      	bne.n	800408c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d119      	bne.n	80040fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f023 0310 	bic.w	r3, r3, #16
 80040de:	647b      	str	r3, [r7, #68]	; 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e8:	61ba      	str	r2, [r7, #24]
 80040ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6979      	ldr	r1, [r7, #20]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	613b      	str	r3, [r7, #16]
   return(result);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e5      	bne.n	80040c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
}
 800410a:	bf00      	nop
 800410c:	3754      	adds	r7, #84	; 0x54
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7ff ff39 	bl	8003fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b21      	cmp	r3, #33	; 0x21
 8004150:	d13e      	bne.n	80041d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415a:	d114      	bne.n	8004186 <UART_Transmit_IT+0x48>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d110      	bne.n	8004186 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004178:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	1c9a      	adds	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	621a      	str	r2, [r3, #32]
 8004184:	e008      	b.n	8004198 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	1c59      	adds	r1, r3, #1
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6211      	str	r1, [r2, #32]
 8004190:	781a      	ldrb	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4619      	mov	r1, r3
 80041a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10f      	bne.n	80041cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fd f8b8 	bl	8001374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b08c      	sub	sp, #48	; 0x30
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b22      	cmp	r3, #34	; 0x22
 8004220:	f040 80ab 	bne.w	800437a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422c:	d117      	bne.n	800425e <UART_Receive_IT+0x50>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d113      	bne.n	800425e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424c:	b29a      	uxth	r2, r3
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	1c9a      	adds	r2, r3, #2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	; 0x28
 800425c:	e026      	b.n	80042ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004264:	2300      	movs	r3, #0
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004270:	d007      	beq.n	8004282 <UART_Receive_IT+0x74>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <UART_Receive_IT+0x82>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	b2da      	uxtb	r2, r3
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	e008      	b.n	80042a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800429c:	b2da      	uxtb	r2, r3
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4619      	mov	r1, r3
 80042ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d15a      	bne.n	8004376 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0220 	bic.w	r2, r2, #32
 80042ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d135      	bne.n	800436c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	613b      	str	r3, [r7, #16]
   return(result);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f023 0310 	bic.w	r3, r3, #16
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	330c      	adds	r3, #12
 8004324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004326:	623a      	str	r2, [r7, #32]
 8004328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	69f9      	ldr	r1, [r7, #28]
 800432c:	6a3a      	ldr	r2, [r7, #32]
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	61bb      	str	r3, [r7, #24]
   return(result);
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e5      	bne.n	8004306 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b10      	cmp	r3, #16
 8004346:	d10a      	bne.n	800435e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fe29 	bl	8003fbc <HAL_UARTEx_RxEventCallback>
 800436a:	e002      	b.n	8004372 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fd f821 	bl	80013b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e002      	b.n	800437c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e000      	b.n	800437c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800437a:	2302      	movs	r3, #2
  }
}
 800437c:	4618      	mov	r0, r3
 800437e:	3730      	adds	r7, #48	; 0x30
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004388:	b0c0      	sub	sp, #256	; 0x100
 800438a:	af00      	add	r7, sp, #0
 800438c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a0:	68d9      	ldr	r1, [r3, #12]
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	ea40 0301 	orr.w	r3, r0, r1
 80043ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043dc:	f021 010c 	bic.w	r1, r1, #12
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043ea:	430b      	orrs	r3, r1
 80043ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fe:	6999      	ldr	r1, [r3, #24]
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	ea40 0301 	orr.w	r3, r0, r1
 800440a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b8f      	ldr	r3, [pc, #572]	; (8004650 <UART_SetConfig+0x2cc>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d005      	beq.n	8004424 <UART_SetConfig+0xa0>
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b8d      	ldr	r3, [pc, #564]	; (8004654 <UART_SetConfig+0x2d0>)
 8004420:	429a      	cmp	r2, r3
 8004422:	d104      	bne.n	800442e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fe fd28 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8004428:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800442c:	e003      	b.n	8004436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800442e:	f7fe fd0f 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8004432:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004440:	f040 810c 	bne.w	800465c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004448:	2200      	movs	r2, #0
 800444a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800444e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004456:	4622      	mov	r2, r4
 8004458:	462b      	mov	r3, r5
 800445a:	1891      	adds	r1, r2, r2
 800445c:	65b9      	str	r1, [r7, #88]	; 0x58
 800445e:	415b      	adcs	r3, r3
 8004460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004466:	4621      	mov	r1, r4
 8004468:	eb12 0801 	adds.w	r8, r2, r1
 800446c:	4629      	mov	r1, r5
 800446e:	eb43 0901 	adc.w	r9, r3, r1
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800447e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004486:	4690      	mov	r8, r2
 8004488:	4699      	mov	r9, r3
 800448a:	4623      	mov	r3, r4
 800448c:	eb18 0303 	adds.w	r3, r8, r3
 8004490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004494:	462b      	mov	r3, r5
 8004496:	eb49 0303 	adc.w	r3, r9, r3
 800449a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044b2:	460b      	mov	r3, r1
 80044b4:	18db      	adds	r3, r3, r3
 80044b6:	653b      	str	r3, [r7, #80]	; 0x50
 80044b8:	4613      	mov	r3, r2
 80044ba:	eb42 0303 	adc.w	r3, r2, r3
 80044be:	657b      	str	r3, [r7, #84]	; 0x54
 80044c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044c8:	f7fb fe90 	bl	80001ec <__aeabi_uldivmod>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4b61      	ldr	r3, [pc, #388]	; (8004658 <UART_SetConfig+0x2d4>)
 80044d2:	fba3 2302 	umull	r2, r3, r3, r2
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	011c      	lsls	r4, r3, #4
 80044da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044ec:	4642      	mov	r2, r8
 80044ee:	464b      	mov	r3, r9
 80044f0:	1891      	adds	r1, r2, r2
 80044f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80044f4:	415b      	adcs	r3, r3
 80044f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044fc:	4641      	mov	r1, r8
 80044fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004502:	4649      	mov	r1, r9
 8004504:	eb43 0b01 	adc.w	fp, r3, r1
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800451c:	4692      	mov	sl, r2
 800451e:	469b      	mov	fp, r3
 8004520:	4643      	mov	r3, r8
 8004522:	eb1a 0303 	adds.w	r3, sl, r3
 8004526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800452a:	464b      	mov	r3, r9
 800452c:	eb4b 0303 	adc.w	r3, fp, r3
 8004530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004540:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004548:	460b      	mov	r3, r1
 800454a:	18db      	adds	r3, r3, r3
 800454c:	643b      	str	r3, [r7, #64]	; 0x40
 800454e:	4613      	mov	r3, r2
 8004550:	eb42 0303 	adc.w	r3, r2, r3
 8004554:	647b      	str	r3, [r7, #68]	; 0x44
 8004556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800455a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800455e:	f7fb fe45 	bl	80001ec <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4611      	mov	r1, r2
 8004568:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <UART_SetConfig+0x2d4>)
 800456a:	fba3 2301 	umull	r2, r3, r3, r1
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2264      	movs	r2, #100	; 0x64
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	1acb      	subs	r3, r1, r3
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800457e:	4b36      	ldr	r3, [pc, #216]	; (8004658 <UART_SetConfig+0x2d4>)
 8004580:	fba3 2302 	umull	r2, r3, r3, r2
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800458c:	441c      	add	r4, r3
 800458e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004598:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800459c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045a0:	4642      	mov	r2, r8
 80045a2:	464b      	mov	r3, r9
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045a8:	415b      	adcs	r3, r3
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045b0:	4641      	mov	r1, r8
 80045b2:	1851      	adds	r1, r2, r1
 80045b4:	6339      	str	r1, [r7, #48]	; 0x30
 80045b6:	4649      	mov	r1, r9
 80045b8:	414b      	adcs	r3, r1
 80045ba:	637b      	str	r3, [r7, #52]	; 0x34
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045c8:	4659      	mov	r1, fp
 80045ca:	00cb      	lsls	r3, r1, #3
 80045cc:	4651      	mov	r1, sl
 80045ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d2:	4651      	mov	r1, sl
 80045d4:	00ca      	lsls	r2, r1, #3
 80045d6:	4610      	mov	r0, r2
 80045d8:	4619      	mov	r1, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	4642      	mov	r2, r8
 80045de:	189b      	adds	r3, r3, r2
 80045e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045e4:	464b      	mov	r3, r9
 80045e6:	460a      	mov	r2, r1
 80045e8:	eb42 0303 	adc.w	r3, r2, r3
 80045ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004604:	460b      	mov	r3, r1
 8004606:	18db      	adds	r3, r3, r3
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
 800460a:	4613      	mov	r3, r2
 800460c:	eb42 0303 	adc.w	r3, r2, r3
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800461a:	f7fb fde7 	bl	80001ec <__aeabi_uldivmod>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <UART_SetConfig+0x2d4>)
 8004624:	fba3 1302 	umull	r1, r3, r3, r2
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	2164      	movs	r1, #100	; 0x64
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	3332      	adds	r3, #50	; 0x32
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <UART_SetConfig+0x2d4>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	f003 0207 	and.w	r2, r3, #7
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4422      	add	r2, r4
 800464a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800464c:	e105      	b.n	800485a <UART_SetConfig+0x4d6>
 800464e:	bf00      	nop
 8004650:	40011000 	.word	0x40011000
 8004654:	40011400 	.word	0x40011400
 8004658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800465c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004660:	2200      	movs	r2, #0
 8004662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004666:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800466a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800466e:	4642      	mov	r2, r8
 8004670:	464b      	mov	r3, r9
 8004672:	1891      	adds	r1, r2, r2
 8004674:	6239      	str	r1, [r7, #32]
 8004676:	415b      	adcs	r3, r3
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
 800467a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800467e:	4641      	mov	r1, r8
 8004680:	1854      	adds	r4, r2, r1
 8004682:	4649      	mov	r1, r9
 8004684:	eb43 0501 	adc.w	r5, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	00eb      	lsls	r3, r5, #3
 8004692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004696:	00e2      	lsls	r2, r4, #3
 8004698:	4614      	mov	r4, r2
 800469a:	461d      	mov	r5, r3
 800469c:	4643      	mov	r3, r8
 800469e:	18e3      	adds	r3, r4, r3
 80046a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046a4:	464b      	mov	r3, r9
 80046a6:	eb45 0303 	adc.w	r3, r5, r3
 80046aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046ca:	4629      	mov	r1, r5
 80046cc:	008b      	lsls	r3, r1, #2
 80046ce:	4621      	mov	r1, r4
 80046d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d4:	4621      	mov	r1, r4
 80046d6:	008a      	lsls	r2, r1, #2
 80046d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046dc:	f7fb fd86 	bl	80001ec <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4b60      	ldr	r3, [pc, #384]	; (8004868 <UART_SetConfig+0x4e4>)
 80046e6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	011c      	lsls	r4, r3, #4
 80046ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	61b9      	str	r1, [r7, #24]
 8004708:	415b      	adcs	r3, r3
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004710:	4641      	mov	r1, r8
 8004712:	1851      	adds	r1, r2, r1
 8004714:	6139      	str	r1, [r7, #16]
 8004716:	4649      	mov	r1, r9
 8004718:	414b      	adcs	r3, r1
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004728:	4659      	mov	r1, fp
 800472a:	00cb      	lsls	r3, r1, #3
 800472c:	4651      	mov	r1, sl
 800472e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004732:	4651      	mov	r1, sl
 8004734:	00ca      	lsls	r2, r1, #3
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	4603      	mov	r3, r0
 800473c:	4642      	mov	r2, r8
 800473e:	189b      	adds	r3, r3, r2
 8004740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004744:	464b      	mov	r3, r9
 8004746:	460a      	mov	r2, r1
 8004748:	eb42 0303 	adc.w	r3, r2, r3
 800474c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	67bb      	str	r3, [r7, #120]	; 0x78
 800475a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004768:	4649      	mov	r1, r9
 800476a:	008b      	lsls	r3, r1, #2
 800476c:	4641      	mov	r1, r8
 800476e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004772:	4641      	mov	r1, r8
 8004774:	008a      	lsls	r2, r1, #2
 8004776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800477a:	f7fb fd37 	bl	80001ec <__aeabi_uldivmod>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4b39      	ldr	r3, [pc, #228]	; (8004868 <UART_SetConfig+0x4e4>)
 8004784:	fba3 1302 	umull	r1, r3, r3, r2
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	2164      	movs	r1, #100	; 0x64
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	3332      	adds	r3, #50	; 0x32
 8004796:	4a34      	ldr	r2, [pc, #208]	; (8004868 <UART_SetConfig+0x4e4>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a2:	441c      	add	r4, r3
 80047a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a8:	2200      	movs	r2, #0
 80047aa:	673b      	str	r3, [r7, #112]	; 0x70
 80047ac:	677a      	str	r2, [r7, #116]	; 0x74
 80047ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047b2:	4642      	mov	r2, r8
 80047b4:	464b      	mov	r3, r9
 80047b6:	1891      	adds	r1, r2, r2
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	415b      	adcs	r3, r3
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c2:	4641      	mov	r1, r8
 80047c4:	1851      	adds	r1, r2, r1
 80047c6:	6039      	str	r1, [r7, #0]
 80047c8:	4649      	mov	r1, r9
 80047ca:	414b      	adcs	r3, r1
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047da:	4659      	mov	r1, fp
 80047dc:	00cb      	lsls	r3, r1, #3
 80047de:	4651      	mov	r1, sl
 80047e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e4:	4651      	mov	r1, sl
 80047e6:	00ca      	lsls	r2, r1, #3
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	4603      	mov	r3, r0
 80047ee:	4642      	mov	r2, r8
 80047f0:	189b      	adds	r3, r3, r2
 80047f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f4:	464b      	mov	r3, r9
 80047f6:	460a      	mov	r2, r1
 80047f8:	eb42 0303 	adc.w	r3, r2, r3
 80047fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	663b      	str	r3, [r7, #96]	; 0x60
 8004808:	667a      	str	r2, [r7, #100]	; 0x64
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004816:	4649      	mov	r1, r9
 8004818:	008b      	lsls	r3, r1, #2
 800481a:	4641      	mov	r1, r8
 800481c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004820:	4641      	mov	r1, r8
 8004822:	008a      	lsls	r2, r1, #2
 8004824:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004828:	f7fb fce0 	bl	80001ec <__aeabi_uldivmod>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <UART_SetConfig+0x4e4>)
 8004832:	fba3 1302 	umull	r1, r3, r3, r2
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2164      	movs	r1, #100	; 0x64
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	3332      	adds	r3, #50	; 0x32
 8004844:	4a08      	ldr	r2, [pc, #32]	; (8004868 <UART_SetConfig+0x4e4>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	f003 020f 	and.w	r2, r3, #15
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4422      	add	r2, r4
 8004858:	609a      	str	r2, [r3, #8]
}
 800485a:	bf00      	nop
 800485c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004866:	bf00      	nop
 8004868:	51eb851f 	.word	0x51eb851f

0800486c <__errno>:
 800486c:	4b01      	ldr	r3, [pc, #4]	; (8004874 <__errno+0x8>)
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000014 	.word	0x20000014

08004878 <__libc_init_array>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	4d0d      	ldr	r5, [pc, #52]	; (80048b0 <__libc_init_array+0x38>)
 800487c:	4c0d      	ldr	r4, [pc, #52]	; (80048b4 <__libc_init_array+0x3c>)
 800487e:	1b64      	subs	r4, r4, r5
 8004880:	10a4      	asrs	r4, r4, #2
 8004882:	2600      	movs	r6, #0
 8004884:	42a6      	cmp	r6, r4
 8004886:	d109      	bne.n	800489c <__libc_init_array+0x24>
 8004888:	4d0b      	ldr	r5, [pc, #44]	; (80048b8 <__libc_init_array+0x40>)
 800488a:	4c0c      	ldr	r4, [pc, #48]	; (80048bc <__libc_init_array+0x44>)
 800488c:	f000 f8da 	bl	8004a44 <_init>
 8004890:	1b64      	subs	r4, r4, r5
 8004892:	10a4      	asrs	r4, r4, #2
 8004894:	2600      	movs	r6, #0
 8004896:	42a6      	cmp	r6, r4
 8004898:	d105      	bne.n	80048a6 <__libc_init_array+0x2e>
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a0:	4798      	blx	r3
 80048a2:	3601      	adds	r6, #1
 80048a4:	e7ee      	b.n	8004884 <__libc_init_array+0xc>
 80048a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048aa:	4798      	blx	r3
 80048ac:	3601      	adds	r6, #1
 80048ae:	e7f2      	b.n	8004896 <__libc_init_array+0x1e>
 80048b0:	08004ab8 	.word	0x08004ab8
 80048b4:	08004ab8 	.word	0x08004ab8
 80048b8:	08004ab8 	.word	0x08004ab8
 80048bc:	08004abc 	.word	0x08004abc

080048c0 <malloc>:
 80048c0:	4b02      	ldr	r3, [pc, #8]	; (80048cc <malloc+0xc>)
 80048c2:	4601      	mov	r1, r0
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	f000 b82b 	b.w	8004920 <_malloc_r>
 80048ca:	bf00      	nop
 80048cc:	20000014 	.word	0x20000014

080048d0 <memset>:
 80048d0:	4402      	add	r2, r0
 80048d2:	4603      	mov	r3, r0
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d100      	bne.n	80048da <memset+0xa>
 80048d8:	4770      	bx	lr
 80048da:	f803 1b01 	strb.w	r1, [r3], #1
 80048de:	e7f9      	b.n	80048d4 <memset+0x4>

080048e0 <sbrk_aligned>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	4e0e      	ldr	r6, [pc, #56]	; (800491c <sbrk_aligned+0x3c>)
 80048e4:	460c      	mov	r4, r1
 80048e6:	6831      	ldr	r1, [r6, #0]
 80048e8:	4605      	mov	r5, r0
 80048ea:	b911      	cbnz	r1, 80048f2 <sbrk_aligned+0x12>
 80048ec:	f000 f88c 	bl	8004a08 <_sbrk_r>
 80048f0:	6030      	str	r0, [r6, #0]
 80048f2:	4621      	mov	r1, r4
 80048f4:	4628      	mov	r0, r5
 80048f6:	f000 f887 	bl	8004a08 <_sbrk_r>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	d00a      	beq.n	8004914 <sbrk_aligned+0x34>
 80048fe:	1cc4      	adds	r4, r0, #3
 8004900:	f024 0403 	bic.w	r4, r4, #3
 8004904:	42a0      	cmp	r0, r4
 8004906:	d007      	beq.n	8004918 <sbrk_aligned+0x38>
 8004908:	1a21      	subs	r1, r4, r0
 800490a:	4628      	mov	r0, r5
 800490c:	f000 f87c 	bl	8004a08 <_sbrk_r>
 8004910:	3001      	adds	r0, #1
 8004912:	d101      	bne.n	8004918 <sbrk_aligned+0x38>
 8004914:	f04f 34ff 	mov.w	r4, #4294967295
 8004918:	4620      	mov	r0, r4
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	200101b8 	.word	0x200101b8

08004920 <_malloc_r>:
 8004920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004924:	1ccd      	adds	r5, r1, #3
 8004926:	f025 0503 	bic.w	r5, r5, #3
 800492a:	3508      	adds	r5, #8
 800492c:	2d0c      	cmp	r5, #12
 800492e:	bf38      	it	cc
 8004930:	250c      	movcc	r5, #12
 8004932:	2d00      	cmp	r5, #0
 8004934:	4607      	mov	r7, r0
 8004936:	db01      	blt.n	800493c <_malloc_r+0x1c>
 8004938:	42a9      	cmp	r1, r5
 800493a:	d905      	bls.n	8004948 <_malloc_r+0x28>
 800493c:	230c      	movs	r3, #12
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	2600      	movs	r6, #0
 8004942:	4630      	mov	r0, r6
 8004944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004948:	4e2e      	ldr	r6, [pc, #184]	; (8004a04 <_malloc_r+0xe4>)
 800494a:	f000 f86d 	bl	8004a28 <__malloc_lock>
 800494e:	6833      	ldr	r3, [r6, #0]
 8004950:	461c      	mov	r4, r3
 8004952:	bb34      	cbnz	r4, 80049a2 <_malloc_r+0x82>
 8004954:	4629      	mov	r1, r5
 8004956:	4638      	mov	r0, r7
 8004958:	f7ff ffc2 	bl	80048e0 <sbrk_aligned>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	4604      	mov	r4, r0
 8004960:	d14d      	bne.n	80049fe <_malloc_r+0xde>
 8004962:	6834      	ldr	r4, [r6, #0]
 8004964:	4626      	mov	r6, r4
 8004966:	2e00      	cmp	r6, #0
 8004968:	d140      	bne.n	80049ec <_malloc_r+0xcc>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	4631      	mov	r1, r6
 800496e:	4638      	mov	r0, r7
 8004970:	eb04 0803 	add.w	r8, r4, r3
 8004974:	f000 f848 	bl	8004a08 <_sbrk_r>
 8004978:	4580      	cmp	r8, r0
 800497a:	d13a      	bne.n	80049f2 <_malloc_r+0xd2>
 800497c:	6821      	ldr	r1, [r4, #0]
 800497e:	3503      	adds	r5, #3
 8004980:	1a6d      	subs	r5, r5, r1
 8004982:	f025 0503 	bic.w	r5, r5, #3
 8004986:	3508      	adds	r5, #8
 8004988:	2d0c      	cmp	r5, #12
 800498a:	bf38      	it	cc
 800498c:	250c      	movcc	r5, #12
 800498e:	4629      	mov	r1, r5
 8004990:	4638      	mov	r0, r7
 8004992:	f7ff ffa5 	bl	80048e0 <sbrk_aligned>
 8004996:	3001      	adds	r0, #1
 8004998:	d02b      	beq.n	80049f2 <_malloc_r+0xd2>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	442b      	add	r3, r5
 800499e:	6023      	str	r3, [r4, #0]
 80049a0:	e00e      	b.n	80049c0 <_malloc_r+0xa0>
 80049a2:	6822      	ldr	r2, [r4, #0]
 80049a4:	1b52      	subs	r2, r2, r5
 80049a6:	d41e      	bmi.n	80049e6 <_malloc_r+0xc6>
 80049a8:	2a0b      	cmp	r2, #11
 80049aa:	d916      	bls.n	80049da <_malloc_r+0xba>
 80049ac:	1961      	adds	r1, r4, r5
 80049ae:	42a3      	cmp	r3, r4
 80049b0:	6025      	str	r5, [r4, #0]
 80049b2:	bf18      	it	ne
 80049b4:	6059      	strne	r1, [r3, #4]
 80049b6:	6863      	ldr	r3, [r4, #4]
 80049b8:	bf08      	it	eq
 80049ba:	6031      	streq	r1, [r6, #0]
 80049bc:	5162      	str	r2, [r4, r5]
 80049be:	604b      	str	r3, [r1, #4]
 80049c0:	4638      	mov	r0, r7
 80049c2:	f104 060b 	add.w	r6, r4, #11
 80049c6:	f000 f835 	bl	8004a34 <__malloc_unlock>
 80049ca:	f026 0607 	bic.w	r6, r6, #7
 80049ce:	1d23      	adds	r3, r4, #4
 80049d0:	1af2      	subs	r2, r6, r3
 80049d2:	d0b6      	beq.n	8004942 <_malloc_r+0x22>
 80049d4:	1b9b      	subs	r3, r3, r6
 80049d6:	50a3      	str	r3, [r4, r2]
 80049d8:	e7b3      	b.n	8004942 <_malloc_r+0x22>
 80049da:	6862      	ldr	r2, [r4, #4]
 80049dc:	42a3      	cmp	r3, r4
 80049de:	bf0c      	ite	eq
 80049e0:	6032      	streq	r2, [r6, #0]
 80049e2:	605a      	strne	r2, [r3, #4]
 80049e4:	e7ec      	b.n	80049c0 <_malloc_r+0xa0>
 80049e6:	4623      	mov	r3, r4
 80049e8:	6864      	ldr	r4, [r4, #4]
 80049ea:	e7b2      	b.n	8004952 <_malloc_r+0x32>
 80049ec:	4634      	mov	r4, r6
 80049ee:	6876      	ldr	r6, [r6, #4]
 80049f0:	e7b9      	b.n	8004966 <_malloc_r+0x46>
 80049f2:	230c      	movs	r3, #12
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4638      	mov	r0, r7
 80049f8:	f000 f81c 	bl	8004a34 <__malloc_unlock>
 80049fc:	e7a1      	b.n	8004942 <_malloc_r+0x22>
 80049fe:	6025      	str	r5, [r4, #0]
 8004a00:	e7de      	b.n	80049c0 <_malloc_r+0xa0>
 8004a02:	bf00      	nop
 8004a04:	200101b4 	.word	0x200101b4

08004a08 <_sbrk_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4d06      	ldr	r5, [pc, #24]	; (8004a24 <_sbrk_r+0x1c>)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	602b      	str	r3, [r5, #0]
 8004a14:	f7fc fbc2 	bl	800119c <_sbrk>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_sbrk_r+0x1a>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_sbrk_r+0x1a>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	200101bc 	.word	0x200101bc

08004a28 <__malloc_lock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__malloc_lock+0x8>)
 8004a2a:	f000 b809 	b.w	8004a40 <__retarget_lock_acquire_recursive>
 8004a2e:	bf00      	nop
 8004a30:	200101c0 	.word	0x200101c0

08004a34 <__malloc_unlock>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__malloc_unlock+0x8>)
 8004a36:	f000 b804 	b.w	8004a42 <__retarget_lock_release_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	200101c0 	.word	0x200101c0

08004a40 <__retarget_lock_acquire_recursive>:
 8004a40:	4770      	bx	lr

08004a42 <__retarget_lock_release_recursive>:
 8004a42:	4770      	bx	lr

08004a44 <_init>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr

08004a50 <_fini>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr
