
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012934  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f90  08012ae4  08012ae4  00022ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a74  08015a74  00030120  2**0
                  CONTENTS
  4 .ARM          00000008  08015a74  08015a74  00025a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a7c  08015a7c  00030120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a7c  08015a7c  00025a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a80  08015a80  00025a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08015a84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030120  2**0
                  CONTENTS
 10 .bss          0000807c  20000120  20000120  00030120  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  2000819c  2000819c  00030120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028aad  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074d9  00000000  00000000  00058bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fe0  00000000  00000000  000600d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e20  00000000  00000000  000620b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031448  00000000  00000000  00063ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032938  00000000  00000000  00095320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2c66  00000000  00000000  000c7c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ba8be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008afc  00000000  00000000  001ba910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000120 	.word	0x20000120
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012acc 	.word	0x08012acc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000124 	.word	0x20000124
 80001ec:	08012acc 	.word	0x08012acc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <getVersions>:
uint32_t notValidFlagAddress2 = CONFIG_2_ADDRESS + 8;
uint32_t versionAddress2 = CONFIG_2_ADDRESS + 12;
uint32_t notCorrectUpdateFlagAddress2 = CONFIG_2_ADDRESS + 16;

static char versionBuf[128];
char* getVersions() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	uint32_t ver1 = FlashReadWord(versionAddress1);
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <getVersions+0x74>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fbf6 	bl	8000dc0 <FlashReadWord>
 80005d4:	6078      	str	r0, [r7, #4]
	uint32_t ver2 = FlashReadWord(versionAddress2);
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <getVersions+0x78>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fbf0 	bl	8000dc0 <FlashReadWord>
 80005e0:	6038      	str	r0, [r7, #0]
	if (ver1 == EMPTY && ver2 == EMPTY) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d105      	bne.n	80005f6 <getVersions+0x32>
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f0:	d101      	bne.n	80005f6 <getVersions+0x32>
		return "No applications in flash\n";
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <getVersions+0x7c>)
 80005f4:	e01c      	b.n	8000630 <getVersions+0x6c>
	} else if (ver1 == EMPTY) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fc:	d106      	bne.n	800060c <getVersions+0x48>
		sprintf(versionBuf, "App 1 version: none\nApp 2 version: %"PRIu32"\n", ver2);
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	4910      	ldr	r1, [pc, #64]	; (8000644 <getVersions+0x80>)
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <getVersions+0x84>)
 8000604:	f011 f928 	bl	8011858 <siprintf>
		return versionBuf;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <getVersions+0x84>)
 800060a:	e011      	b.n	8000630 <getVersions+0x6c>
	} else if (ver2 == EMPTY) {
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000612:	d106      	bne.n	8000622 <getVersions+0x5e>
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: none\n", ver1);
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <getVersions+0x88>)
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <getVersions+0x84>)
 800061a:	f011 f91d 	bl	8011858 <siprintf>
		return versionBuf;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <getVersions+0x84>)
 8000620:	e006      	b.n	8000630 <getVersions+0x6c>
	} else {
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: %"PRIu32"\n", ver1, ver2);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	490a      	ldr	r1, [pc, #40]	; (8000650 <getVersions+0x8c>)
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <getVersions+0x84>)
 800062a:	f011 f915 	bl	8011858 <siprintf>
		return versionBuf;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <getVersions+0x84>)
	}
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000006c 	.word	0x2000006c
 800063c:	20000080 	.word	0x20000080
 8000640:	08012ae4 	.word	0x08012ae4
 8000644:	08012b00 	.word	0x08012b00
 8000648:	2000013c 	.word	0x2000013c
 800064c:	08012b28 	.word	0x08012b28
 8000650:	08012b50 	.word	0x08012b50

08000654 <getLatestApplicationAddress>:

uint32_t getLatestApplicationAddress() {
 8000654:	b598      	push	{r3, r4, r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if (FlashReadWord(seqAddress1) < FlashReadWord(seqAddress2)) {
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <getLatestApplicationAddress+0x4c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fbaf 	bl	8000dc0 <FlashReadWord>
 8000662:	4604      	mov	r4, r0
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <getLatestApplicationAddress+0x50>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fba9 	bl	8000dc0 <FlashReadWord>
 800066e:	4603      	mov	r3, r0
 8000670:	429c      	cmp	r4, r3
 8000672:	d201      	bcs.n	8000678 <getLatestApplicationAddress+0x24>
		return APP_1_ADDRESS;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <getLatestApplicationAddress+0x54>)
 8000676:	e010      	b.n	800069a <getLatestApplicationAddress+0x46>
	} else if (FlashReadWord(seqAddress2) < FlashReadWord(seqAddress1)) {
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <getLatestApplicationAddress+0x50>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fb9f 	bl	8000dc0 <FlashReadWord>
 8000682:	4604      	mov	r4, r0
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <getLatestApplicationAddress+0x4c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fb99 	bl	8000dc0 <FlashReadWord>
 800068e:	4603      	mov	r3, r0
 8000690:	429c      	cmp	r4, r3
 8000692:	d201      	bcs.n	8000698 <getLatestApplicationAddress+0x44>
		return APP_2_ADDRESS;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <getLatestApplicationAddress+0x58>)
 8000696:	e000      	b.n	800069a <getLatestApplicationAddress+0x46>
	} else {
		return 0;
 8000698:	2300      	movs	r3, #0
	}
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd98      	pop	{r3, r4, r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000060 	.word	0x20000060
 80006a4:	20000074 	.word	0x20000074
 80006a8:	08020000 	.word	0x08020000
 80006ac:	08110000 	.word	0x08110000

080006b0 <updateConfig>:

void updateConfig() {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 80006b6:	f7ff ffcd 	bl	8000654 <getLatestApplicationAddress>
 80006ba:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_1_ADDRESS) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <updateConfig+0x60>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d110      	bne.n	80006e6 <updateConfig+0x36>
		EraseSector(CONFIG_2_SECTOR);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fb87 	bl	8000dd8 <EraseSector>
		FlashWriteWord(seqAddress2, FlashReadWord(seqAddress1) - 1);
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <updateConfig+0x64>)
 80006cc:	681c      	ldr	r4, [r3, #0]
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <updateConfig+0x68>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fb74 	bl	8000dc0 <FlashReadWord>
 80006d8:	4603      	mov	r3, r0
 80006da:	3b01      	subs	r3, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	4620      	mov	r0, r4
 80006e0:	f000 fb4f 	bl	8000d82 <FlashWriteWord>
		EraseSector(CONFIG_1_SECTOR);
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
		//FlashWriteWord(firstBootFlagAddress1, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress1, 0xFFFF); // FFFF - not valid (default)
	}
}
 80006e4:	e00f      	b.n	8000706 <updateConfig+0x56>
		EraseSector(CONFIG_1_SECTOR);
 80006e6:	200e      	movs	r0, #14
 80006e8:	f000 fb76 	bl	8000dd8 <EraseSector>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <updateConfig+0x68>)
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <updateConfig+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fb63 	bl	8000dc0 <FlashReadWord>
 80006fa:	4603      	mov	r3, r0
 80006fc:	3b01      	subs	r3, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	4620      	mov	r0, r4
 8000702:	f000 fb3e 	bl	8000d82 <FlashWriteWord>
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bd90      	pop	{r4, r7, pc}
 800070e:	bf00      	nop
 8000710:	08020000 	.word	0x08020000
 8000714:	20000074 	.word	0x20000074
 8000718:	20000060 	.word	0x20000060

0800071c <setAppVersion>:

void setAppVersion(uint32_t version) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	uint32_t latestAppAddress = getLatestApplicationAddress();
 8000724:	f7ff ff96 	bl	8000654 <getLatestApplicationAddress>
 8000728:	60f8      	str	r0, [r7, #12]
		if (latestAppAddress == APP_1_ADDRESS) {
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <setAppVersion+0x38>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <setAppVersion+0x24>
			FlashWriteWord(versionAddress1, version);
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <setAppVersion+0x3c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fb22 	bl	8000d82 <FlashWriteWord>
		} else {
			FlashWriteWord(versionAddress2, version);
		}
}
 800073e:	e005      	b.n	800074c <setAppVersion+0x30>
			FlashWriteWord(versionAddress2, version);
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <setAppVersion+0x40>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fb1b 	bl	8000d82 <FlashWriteWord>
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	08020000 	.word	0x08020000
 8000758:	2000006c 	.word	0x2000006c
 800075c:	20000080 	.word	0x20000080

08000760 <setCorrectUpdateFlag>:

void setCorrectUpdateFlag() {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 8000766:	f7ff ff75 	bl	8000654 <getLatestApplicationAddress>
 800076a:	6078      	str	r0, [r7, #4]
		if (latestAppAddress == APP_1_ADDRESS) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <setCorrectUpdateFlag+0x38>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d106      	bne.n	8000782 <setCorrectUpdateFlag+0x22>
			FlashWriteWord(notCorrectUpdateFlagAddress1, 0);
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <setCorrectUpdateFlag+0x3c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fb01 	bl	8000d82 <FlashWriteWord>
		} else {
			FlashWriteWord(notCorrectUpdateFlagAddress2, 0);
		}
}
 8000780:	e005      	b.n	800078e <setCorrectUpdateFlag+0x2e>
			FlashWriteWord(notCorrectUpdateFlagAddress2, 0);
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <setCorrectUpdateFlag+0x40>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fafa 	bl	8000d82 <FlashWriteWord>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08020000 	.word	0x08020000
 800079c:	20000070 	.word	0x20000070
 80007a0:	20000084 	.word	0x20000084

080007a4 <validateApplications>:

void validateApplications() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
	uint32_t nValid1 = FlashReadWord(notValidFlagAddress1);
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <validateApplications+0x8c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fb06 	bl	8000dc0 <FlashReadWord>
 80007b4:	6178      	str	r0, [r7, #20]
	uint32_t firstBoot1 = FlashReadWord(firstBootFlagAddress1);
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <validateApplications+0x90>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fb00 	bl	8000dc0 <FlashReadWord>
 80007c0:	6138      	str	r0, [r7, #16]
	uint32_t nCorrect1 = FlashReadWord(notCorrectUpdateFlagAddress1);
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <validateApplications+0x94>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fafa 	bl	8000dc0 <FlashReadWord>
 80007cc:	60f8      	str	r0, [r7, #12]
	uint32_t nValid2 = FlashReadWord(notValidFlagAddress2);
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <validateApplications+0x98>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 faf4 	bl	8000dc0 <FlashReadWord>
 80007d8:	60b8      	str	r0, [r7, #8]
	uint32_t firstBoot2 = FlashReadWord(firstBootFlagAddress2);
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <validateApplications+0x9c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 faee 	bl	8000dc0 <FlashReadWord>
 80007e4:	6078      	str	r0, [r7, #4]
	uint32_t nCorrect2 = FlashReadWord(notCorrectUpdateFlagAddress2);
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <validateApplications+0xa0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fae8 	bl	8000dc0 <FlashReadWord>
 80007f0:	6038      	str	r0, [r7, #0]
	if ((nValid1 == EMPTY && firstBoot1 == 0) || nCorrect1 != 0)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f8:	d102      	bne.n	8000800 <validateApplications+0x5c>
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <validateApplications+0x62>
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <validateApplications+0x68>
		EraseSector(CONFIG_1_SECTOR);
 8000806:	200e      	movs	r0, #14
 8000808:	f000 fae6 	bl	8000dd8 <EraseSector>
	if ((nValid2 == EMPTY && firstBoot2 == 0) || nCorrect2 != 0)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000812:	d102      	bne.n	800081a <validateApplications+0x76>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <validateApplications+0x7c>
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <validateApplications+0x82>
		EraseSector(CONFIG_2_SECTOR);
 8000820:	200f      	movs	r0, #15
 8000822:	f000 fad9 	bl	8000dd8 <EraseSector>
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000068 	.word	0x20000068
 8000834:	20000064 	.word	0x20000064
 8000838:	20000070 	.word	0x20000070
 800083c:	2000007c 	.word	0x2000007c
 8000840:	20000078 	.word	0x20000078
 8000844:	20000084 	.word	0x20000084

08000848 <jumpToApp>:

void jumpToApp() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
	  uint32_t address = getLatestApplicationAddress();
 800084e:	f7ff ff01 	bl	8000654 <getLatestApplicationAddress>
 8000852:	6178      	str	r0, [r7, #20]
	  if (address == APP_1_ADDRESS)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	4a30      	ldr	r2, [pc, #192]	; (8000918 <jumpToApp+0xd0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <jumpToApp+0x22>
		  FlashWriteWord(firstBootFlagAddress1, 0);
 800085c:	4b2f      	ldr	r3, [pc, #188]	; (800091c <jumpToApp+0xd4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fa8d 	bl	8000d82 <FlashWriteWord>
 8000868:	e009      	b.n	800087e <jumpToApp+0x36>
	  else if (address == APP_2_ADDRESS)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <jumpToApp+0xd8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d105      	bne.n	800087e <jumpToApp+0x36>
		  FlashWriteWord(firstBootFlagAddress2, 0);
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <jumpToApp+0xdc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fa82 	bl	8000d82 <FlashWriteWord>

	  void(*app_reset_handler)();

	  //shut down any tasks remaining
	  HAL_TIM_Base_Stop_IT(&htim6);
 800087e:	482a      	ldr	r0, [pc, #168]	; (8000928 <jumpToApp+0xe0>)
 8000880:	f005 f83a 	bl	80058f8 <HAL_TIM_Base_Stop_IT>
	  uartDisableInterruption();
 8000884:	f001 fb82 	bl	8001f8c <uartDisableInterruption>

	  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <jumpToApp+0xe4>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a27      	ldr	r2, [pc, #156]	; (800092c <jumpToApp+0xe4>)
 800088e:	f023 0304 	bic.w	r3, r3, #4
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <jumpToApp+0xe4>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a24      	ldr	r2, [pc, #144]	; (800092c <jumpToApp+0xe4>)
 800089a:	f023 0308 	bic.w	r3, r3, #8
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <jumpToApp+0xe4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a21      	ldr	r2, [pc, #132]	; (800092c <jumpToApp+0xe4>)
 80008a6:	f023 0302 	bic.w	r3, r3, #2
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <jumpToApp+0xe4>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	4a1e      	ldr	r2, [pc, #120]	; (800092c <jumpToApp+0xe4>)
 80008b2:	f023 0301 	bic.w	r3, r3, #1
 80008b6:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 80008b8:	f004 fe66 	bl	8005588 <HAL_RCC_DeInit>
	  HAL_DeInit();// to disable all the peripherals
 80008bc:	f001 ffc2 	bl	8002844 <HAL_DeInit>

	  SysTick->CTRL = 0;//to turn off the systick
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <jumpToApp+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <jumpToApp+0xe8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <jumpToApp+0xe8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	2301      	movs	r3, #1
 80008d4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	f383 8810 	msr	PRIMASK, r3
}
 80008dc:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80008de:	b672      	cpsid	i
}
 80008e0:	bf00      	nop
	  //disable interrupts
	  __set_PRIMASK(1);
	  __disable_irq();

	  //__DMB(); // Data Memory Barrier to ensure write to memory is completed
	  SCB->VTOR = address;//change this
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <jumpToApp+0xec>)
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	6093      	str	r3, [r2, #8]
      //__DSB(); // Data Synchronization Barrier to ensure all subsequence instructions use the new configuation

	  //configure the MSP by reading the value from the base address
	  uint32_t msp_value = *(__IO uint32_t*) address;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f383 8808 	msr	MSP, r3
}
 80008f8:	bf00      	nop

	  __set_MSP(msp_value);

	  uint32_t resethandler_address = *(__IO uint32_t*) (address + 4);
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3304      	adds	r3, #4
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]

	  app_reset_handler = (void (*)(void)) (resethandler_address);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000906:	b662      	cpsie	i
}
 8000908:	bf00      	nop

	  //jump to reset handler of the user app.
	  __enable_irq();
	  app_reset_handler();
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	4798      	blx	r3
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	08020000 	.word	0x08020000
 800091c:	20000064 	.word	0x20000064
 8000920:	08110000 	.word	0x08110000
 8000924:	20000078 	.word	0x20000078
 8000928:	200002a4 	.word	0x200002a4
 800092c:	40023800 	.word	0x40023800
 8000930:	e000e010 	.word	0xe000e010
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <EraseNecessarySectors>:

void EraseNecessarySectors(uint32_t address, uint8_t* sector) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	if (address == sectorAddresses[*sector]) {
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <EraseNecessarySectors+0x3c>)
 800094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	d10a      	bne.n	800096a <EraseNecessarySectors+0x32>
		EraseSector(*sector);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fa3d 	bl	8000dd8 <EraseSector>
		(*sector)++;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	701a      	strb	r2, [r3, #0]
	}
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000000 	.word	0x20000000

08000978 <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 8000982:	200c      	movs	r0, #12
 8000984:	f010 fdda 	bl	801153c <malloc>
 8000988:	4603      	mov	r3, r0
 800098a:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4618      	mov	r0, r3
 8000990:	f010 fdd4 	bl	801153c <malloc>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	88fa      	ldrh	r2, [r7, #6]
 80009a0:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f000 f886 	bl	8000ab4 <bufferClear>
    return buffer;
 80009a8:	68fb      	ldr	r3, [r7, #12]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	889a      	ldrh	r2, [r3, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	88db      	ldrh	r3, [r3, #6]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d21f      	bcs.n	8000a0a <bufferPush+0x58>
        disableInt();
 80009ca:	f000 f8e7 	bl	8000b9c <disableInt>

        buffer->data[buffer->ptrIn] = value;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	8812      	ldrh	r2, [r2, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	78fa      	ldrb	r2, [r7, #3]
 80009da:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	88d2      	ldrh	r2, [r2, #6]
 80009e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80009ea:	fb01 f202 	mul.w	r2, r1, r2
 80009ee:	1a9b      	subs	r3, r3, r2
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	889b      	ldrh	r3, [r3, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	809a      	strh	r2, [r3, #4]

        enableInt();
 8000a02:	f000 f8df 	bl	8000bc4 <enableInt>
        return 1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <bufferPush+0x5a>
    } else
        return 0;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	82fb      	strh	r3, [r7, #22]
 8000a26:	e00f      	b.n	8000a48 <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 8000a28:	8afb      	ldrh	r3, [r7, #22]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ffbd 	bl	80009b2 <bufferPush>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <bufferPushValues+0x2e>
            return pushed;
 8000a3e:	8afb      	ldrh	r3, [r7, #22]
 8000a40:	e007      	b.n	8000a52 <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8000a42:	8afb      	ldrh	r3, [r7, #22]
 8000a44:	3301      	adds	r3, #1
 8000a46:	82fb      	strh	r3, [r7, #22]
 8000a48:	8afa      	ldrh	r2, [r7, #22]
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d3eb      	bcc.n	8000a28 <bufferPushValues+0x14>
    }
    return pushed;
 8000a50:	8afb      	ldrh	r3, [r7, #22]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <bufferPop+0x14>
        return 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e01e      	b.n	8000aac <bufferPop+0x52>

    disableInt();
 8000a6e:	f000 f895 	bl	8000b9c <disableInt>

    buffer->size--;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	8852      	ldrh	r2, [r2, #2]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	885b      	ldrh	r3, [r3, #2]
 8000a90:	3301      	adds	r3, #1
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	88d2      	ldrh	r2, [r2, #6]
 8000a96:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a9a:	fb01 f202 	mul.w	r2, r1, r2
 8000a9e:	1a9b      	subs	r3, r3, r2
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	805a      	strh	r2, [r3, #2]

    enableInt();
 8000aa6:	f000 f88d 	bl	8000bc4 <enableInt>

    return value;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <bufferClear>:

uint8_t bufferPeek(const Buffer * const buffer) {
    return buffer->data[buffer->ptrOut];
}

void bufferClear(Buffer * const buffer) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    disableInt();
 8000abc:	f000 f86e 	bl	8000b9c <disableInt>
    buffer->size = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	805a      	strh	r2, [r3, #2]
    enableInt();
 8000ad2:	f000 f877 	bl	8000bc4 <enableInt>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff ffe5 	bl	8000ade <bufferHasValues>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <bufferPopValues+0x1e>
        return 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e01d      	b.n	8000b5a <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f81f 	bl	8000b62 <bufferGetSize>
 8000b24:	4603      	mov	r3, r0
 8000b26:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 8000b28:	8afa      	ldrh	r2, [r7, #22]
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d901      	bls.n	8000b34 <bufferPopValues+0x34>
        popSize = bufSize;
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	82bb      	strh	r3, [r7, #20]
 8000b38:	e00a      	b.n	8000b50 <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 8000b3a:	8abb      	ldrh	r3, [r7, #20]
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	18d4      	adds	r4, r2, r3
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f7ff ff8a 	bl	8000a5a <bufferPop>
 8000b46:	4603      	mov	r3, r0
 8000b48:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 8000b4a:	8abb      	ldrh	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	82bb      	strh	r3, [r7, #20]
 8000b50:	8aba      	ldrh	r2, [r7, #20]
 8000b52:	8afb      	ldrh	r3, [r7, #22]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d3f0      	bcc.n	8000b3a <bufferPopValues+0x3a>
    return popSize;
 8000b58:	8afb      	ldrh	r3, [r7, #22]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}

08000b62 <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
    return buffer->size;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	889b      	ldrh	r3, [r3, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	88da      	ldrh	r2, [r3, #6]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	889b      	ldrh	r3, [r3, #4]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	b29b      	uxth	r3, r3
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <disableInt>:
		bufferPush(destination, var);
	}
	return 1;
}

static void disableInt() {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8000ba6:	607b      	str	r3, [r7, #4]
  return(result);
 8000ba8:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <disableInt+0x24>)
 8000bac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bae:	b672      	cpsid	i
}
 8000bb0:	bf00      	nop
    __disable_irq();
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200001bc 	.word	0x200001bc

08000bc4 <enableInt>:

static void enableInt() {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <enableInt+0x20>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f383 8810 	msr	PRIMASK, r3
}
 8000bd6:	bf00      	nop
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200001bc 	.word	0x200001bc

08000be8 <commandCreate>:
};

static uint8_t parseInt(const char *str, uint32_t *result);
static uint8_t parseOnOffStatus(const char *str, OnOffStatus *result);

Command * commandCreate(const char * const name, const CommandAction action, const CommandArgument argType) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	71fb      	strb	r3, [r7, #7]
    size_t nameLen = strlen(name);
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f7ff fb04 	bl	8000204 <strlen>
 8000bfc:	61f8      	str	r0, [r7, #28]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4618      	mov	r0, r3
 8000c04:	f010 fc9a 	bl	801153c <malloc>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	61bb      	str	r3, [r7, #24]
    strcpy(nameCopy, name);
 8000c0c:	68f9      	ldr	r1, [r7, #12]
 8000c0e:	69b8      	ldr	r0, [r7, #24]
 8000c10:	f010 fe42 	bl	8011898 <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 8000c14:	200c      	movs	r0, #12
 8000c16:	f010 fc91 	bl	801153c <malloc>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	617b      	str	r3, [r7, #20]
    command->name = nameCopy;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	601a      	str	r2, [r3, #0]
    command->action = action;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	605a      	str	r2, [r3, #4]
    command->argType = argType;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	79fa      	ldrb	r2, [r7, #7]
 8000c2e:	721a      	strb	r2, [r3, #8]
    return command;
 8000c30:	697b      	ldr	r3, [r7, #20]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <commandExecute>:

const char * commandExecute(const Command * const command, const char * const argument) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
    if (command == NULL || command->action == NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <commandExecute+0x18>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <commandExecute+0x1c>
        return NULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	e037      	b.n	8000cc8 <commandExecute+0x8c>
    switch (command->argType) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7a1b      	ldrb	r3, [r3, #8]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d02c      	beq.n	8000cba <commandExecute+0x7e>
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	dc30      	bgt.n	8000cc6 <commandExecute+0x8a>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <commandExecute+0x32>
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d013      	beq.n	8000c94 <commandExecute+0x58>
 8000c6c:	e02b      	b.n	8000cc6 <commandExecute+0x8a>
        case INT:
        {
            uint32_t intArg;
            if (!parseInt(argument, &intArg))
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	6838      	ldr	r0, [r7, #0]
 8000c76:	f000 f831 	bl	8000cdc <parseInt>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <commandExecute+0x48>
                return "The argument must be integer\n";
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <commandExecute+0x94>)
 8000c82:	e021      	b.n	8000cc8 <commandExecute+0x8c>
            return (*command->action)(&intArg);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f107 020c 	add.w	r2, r7, #12
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	4798      	blx	r3
 8000c90:	4603      	mov	r3, r0
 8000c92:	e019      	b.n	8000cc8 <commandExecute+0x8c>
        }
        case ON_OFF:
        {
            OnOffStatus statusArg;
            if (!parseOnOffStatus(argument, &statusArg))
 8000c94:	f107 030b 	add.w	r3, r7, #11
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6838      	ldr	r0, [r7, #0]
 8000c9c:	f000 f83a 	bl	8000d14 <parseOnOffStatus>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <commandExecute+0x6e>
                return "The argument must be 'on' or 'off'\n";
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <commandExecute+0x98>)
 8000ca8:	e00e      	b.n	8000cc8 <commandExecute+0x8c>
            return (*command->action)(&statusArg);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f107 020b 	add.w	r2, r7, #11
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4798      	blx	r3
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	e006      	b.n	8000cc8 <commandExecute+0x8c>
        }
        case NONE:
            return (*command->action)(NULL);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	4798      	blx	r3
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	e000      	b.n	8000cc8 <commandExecute+0x8c>
        default:
            return "Unknown argument type\n";
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <commandExecute+0x9c>)
    }
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	08012b78 	.word	0x08012b78
 8000cd4:	08012b98 	.word	0x08012b98
 8000cd8:	08012bbc 	.word	0x08012bbc

08000cdc <parseInt>:

static uint8_t parseInt(const char * const str, uint32_t * const result) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
    char *endPtr = NULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
    *result = strtoul(str, &(endPtr), 10);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	220a      	movs	r2, #10
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f010 fe4a 	bl	801198c <strtoul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	601a      	str	r2, [r3, #0]
    if (endPtr == str) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d101      	bne.n	8000d0a <parseInt+0x2e>
        return 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <parseInt+0x30>
    }
    return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <parseOnOffStatus>:

static uint8_t parseOnOffStatus(const char *str, OnOffStatus * const result) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
    if (strcmp(str, "on") == 0) {
 8000d1e:	490e      	ldr	r1, [pc, #56]	; (8000d58 <parseOnOffStatus+0x44>)
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fa65 	bl	80001f0 <strcmp>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d104      	bne.n	8000d36 <parseOnOffStatus+0x22>
        *result = ON;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
        return 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00c      	b.n	8000d50 <parseOnOffStatus+0x3c>
    } else if (strcmp(str, "off") == 0) {
 8000d36:	4909      	ldr	r1, [pc, #36]	; (8000d5c <parseOnOffStatus+0x48>)
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fa59 	bl	80001f0 <strcmp>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d104      	bne.n	8000d4e <parseOnOffStatus+0x3a>
        *result = OFF;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
        return 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <parseOnOffStatus+0x3c>
    }
    return 0;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	08012bd4 	.word	0x08012bd4
 8000d5c:	08012bd8 	.word	0x08012bd8

08000d60 <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <commandGetName+0x12>
        return NULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e001      	b.n	8000d76 <commandGetName+0x16>
    return command->name;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <FlashWriteWord>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
	HAL_FLASH_Lock();
}

void FlashWriteWord(uint32_t Address, uint32_t Data) {
 8000d82:	b5b0      	push	{r4, r5, r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 8000d90:	f003 fa20 	bl	80041d4 <HAL_FLASH_Unlock>
	while (status != HAL_OK)
 8000d94:	e00b      	b.n	8000dae <FlashWriteWord+0x2c>
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	461c      	mov	r4, r3
 8000d9c:	4615      	mov	r5, r2
 8000d9e:	4622      	mov	r2, r4
 8000da0:	462b      	mov	r3, r5
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	2002      	movs	r0, #2
 8000da6:	f003 f9c1 	bl	800412c <HAL_FLASH_Program>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f0      	bne.n	8000d96 <FlashWriteWord+0x14>
	HAL_FLASH_Lock();
 8000db4:	f003 fa30 	bl	8004218 <HAL_FLASH_Lock>
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bdb0      	pop	{r4, r5, r7, pc}

08000dc0 <FlashReadWord>:

uint8_t FlashReadByte(uint32_t Address) {
    return (*(__IO uint8_t*)Address);
}

uint32_t FlashReadWord(uint32_t Address) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
    return (*(__IO uint32_t*)Address);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <EraseSector>:

void EraseSector(uint32_t Sector) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 8000de4:	f003 f9f6 	bl	80041d4 <HAL_FLASH_Unlock>
	uint32_t SectorError;
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <EraseSector+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Sector = Sector;
 8000dee:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <EraseSector+0x4c>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = 1 ;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <EraseSector+0x4c>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	60da      	str	r2, [r3, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <EraseSector+0x4c>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	611a      	str	r2, [r3, #16]
	while (status != HAL_OK)
 8000e00:	e007      	b.n	8000e12 <EraseSector+0x3a>
		status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	4619      	mov	r1, r3
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <EraseSector+0x4c>)
 8000e0a:	f003 fb55 	bl	80044b8 <HAL_FLASHEx_Erase>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f4      	bne.n	8000e02 <EraseSector+0x2a>
	HAL_FLASH_Lock();
 8000e18:	f003 f9fe 	bl	8004218 <HAL_FLASH_Lock>
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200001c0 	.word	0x200001c0

08000e28 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a35      	ldr	r2, [pc, #212]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a2e      	ldr	r2, [pc, #184]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a20      	ldr	r2, [pc, #128]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e9c:	f043 0310 	orr.w	r3, r3, #16
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0310 	and.w	r3, r3, #16
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <MX_GPIO_Init+0xf8>)
 8000ed0:	f003 fdde 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin;
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_RST_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_GPIO_Init+0xf8>)
 8000eec:	f003 fc24 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_GPIO_Init+0xfc>)
 8000f0e:	f003 fc13 	bl	8004738 <HAL_GPIO_Init>

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40020000 	.word	0x40020000

08000f28 <asciiToHex>:
uint8_t tempBuf[8];

uint8_t firstFirmwarePlaceCheck = 1;
uint8_t current_sector = 0;

void asciiToHex(uint8_t* buff, uint8_t count) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i=0; i<count;i++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e023      	b.n	8000f82 <asciiToHex+0x5a>
		if(buff[i] <= '9' && buff[i] >= '0' ) {
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b39      	cmp	r3, #57	; 0x39
 8000f44:	d810      	bhi.n	8000f68 <asciiToHex+0x40>
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b2f      	cmp	r3, #47	; 0x2f
 8000f50:	d90a      	bls.n	8000f68 <asciiToHex+0x40>
			buff[i] -= 0x30;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	440b      	add	r3, r1
 8000f60:	3a30      	subs	r2, #48	; 0x30
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	e009      	b.n	8000f7c <asciiToHex+0x54>
		}
		else {
			buff[i] = buff[i] - 0x41 + 10;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	440b      	add	r3, r1
 8000f76:	3a37      	subs	r2, #55	; 0x37
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	701a      	strb	r2, [r3, #0]
	for(i=0; i<count;i++) {
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d3d7      	bcc.n	8000f3a <asciiToHex+0x12>
		}
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <fillBuffer>:

void fillBuffer(uint8_t* destination, uint8_t* source, uint16_t* startPtr, uint16_t count) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	807b      	strh	r3, [r7, #2]
	for (int16_t i = 0; i < count; i++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	82fb      	strh	r3, [r7, #22]
 8000faa:	e014      	b.n	8000fd6 <fillBuffer+0x3e>
		destination[i] = source[*startPtr + i];
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	441a      	add	r2, r3
 8000fbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	440b      	add	r3, r1
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	701a      	strb	r2, [r3, #0]
	for (int16_t i = 0; i < count; i++) {
 8000fca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	82fb      	strh	r3, [r7, #22]
 8000fd6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbe5      	blt.n	8000fac <fillBuffer+0x14>
	}
	*startPtr += count;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	881a      	ldrh	r2, [r3, #0]
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	801a      	strh	r2, [r3, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	371c      	adds	r7, #28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <flashHex>:

uint8_t flashHex(uint8_t* flashBuf, uint16_t size) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
	uint16_t ptr = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	81fb      	strh	r3, [r7, #14]
	while (ptr < size) {
 800100c:	e19f      	b.n	800134e <flashHex+0x352>
		if(flashBuf[ptr] == ':') {
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b3a      	cmp	r3, #58	; 0x3a
 800101a:	f040 8194 	bne.w	8001346 <flashHex+0x34a>
			ptr++;
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	3301      	adds	r3, #1
 8001022:	b29b      	uxth	r3, r3
 8001024:	81fb      	strh	r3, [r7, #14]
			fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8001026:	f107 020e 	add.w	r2, r7, #14
 800102a:	2308      	movs	r3, #8
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	4897      	ldr	r0, [pc, #604]	; (800128c <flashHex+0x290>)
 8001030:	f7ff ffb2 	bl	8000f98 <fillBuffer>
			asciiToHex(tempBuf, 8);
 8001034:	2108      	movs	r1, #8
 8001036:	4895      	ldr	r0, [pc, #596]	; (800128c <flashHex+0x290>)
 8001038:	f7ff ff76 	bl	8000f28 <asciiToHex>

			size_data = 2*(tempBuf[1] + 16*tempBuf[0]);//находим размер данных
 800103c:	4b93      	ldr	r3, [pc, #588]	; (800128c <flashHex+0x290>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	461a      	mov	r2, r3
 8001042:	4b92      	ldr	r3, [pc, #584]	; (800128c <flashHex+0x290>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	4413      	add	r3, r2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b8f      	ldr	r3, [pc, #572]	; (8001290 <flashHex+0x294>)
 8001052:	701a      	strb	r2, [r3, #0]
			address_data = tempBuf[5] + 16*tempBuf[4] + 256*tempBuf[3] + 4096*tempBuf[2];//адрес
 8001054:	4b8d      	ldr	r3, [pc, #564]	; (800128c <flashHex+0x290>)
 8001056:	795b      	ldrb	r3, [r3, #5]
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b8c      	ldr	r3, [pc, #560]	; (800128c <flashHex+0x290>)
 800105c:	78db      	ldrb	r3, [r3, #3]
 800105e:	b299      	uxth	r1, r3
 8001060:	4b8a      	ldr	r3, [pc, #552]	; (800128c <flashHex+0x290>)
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	b29b      	uxth	r3, r3
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	b29b      	uxth	r3, r3
 800106a:	440b      	add	r3, r1
 800106c:	b29b      	uxth	r3, r3
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	b299      	uxth	r1, r3
 8001072:	4b86      	ldr	r3, [pc, #536]	; (800128c <flashHex+0x290>)
 8001074:	791b      	ldrb	r3, [r3, #4]
 8001076:	b29b      	uxth	r3, r3
 8001078:	440b      	add	r3, r1
 800107a:	b29b      	uxth	r3, r3
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	b29b      	uxth	r3, r3
 8001080:	4413      	add	r3, r2
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b83      	ldr	r3, [pc, #524]	; (8001294 <flashHex+0x298>)
 8001086:	801a      	strh	r2, [r3, #0]
			type_data = tempBuf[7] + 16*tempBuf[6];//и тип
 8001088:	4b80      	ldr	r3, [pc, #512]	; (800128c <flashHex+0x290>)
 800108a:	79da      	ldrb	r2, [r3, #7]
 800108c:	4b7f      	ldr	r3, [pc, #508]	; (800128c <flashHex+0x290>)
 800108e:	799b      	ldrb	r3, [r3, #6]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b7f      	ldr	r3, [pc, #508]	; (8001298 <flashHex+0x29c>)
 800109a:	701a      	strb	r2, [r3, #0]

			calculation_check_sum = size_data/2 + (uint8_t)address_data + (uint8_t)(address_data>>8) + type_data;//считаем чек сумму
 800109c:	4b7c      	ldr	r3, [pc, #496]	; (8001290 <flashHex+0x294>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	085b      	lsrs	r3, r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b7b      	ldr	r3, [pc, #492]	; (8001294 <flashHex+0x298>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b79      	ldr	r3, [pc, #484]	; (8001294 <flashHex+0x298>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4413      	add	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b76      	ldr	r3, [pc, #472]	; (8001298 <flashHex+0x29c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b75      	ldr	r3, [pc, #468]	; (800129c <flashHex+0x2a0>)
 80010c6:	701a      	strb	r2, [r3, #0]

			if(type_data == 0x00) {
 80010c8:	4b73      	ldr	r3, [pc, #460]	; (8001298 <flashHex+0x29c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f040 80a2 	bne.w	8001216 <flashHex+0x21a>
				while(size_data > 0) {
 80010d2:	e075      	b.n	80011c0 <flashHex+0x1c4>
					fillBuffer(tempBuf, flashBuf, &ptr, 8);
 80010d4:	f107 020e 	add.w	r2, r7, #14
 80010d8:	2308      	movs	r3, #8
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	486b      	ldr	r0, [pc, #428]	; (800128c <flashHex+0x290>)
 80010de:	f7ff ff5b 	bl	8000f98 <fillBuffer>
					asciiToHex(tempBuf, 8);
 80010e2:	2108      	movs	r1, #8
 80010e4:	4869      	ldr	r0, [pc, #420]	; (800128c <flashHex+0x290>)
 80010e6:	f7ff ff1f 	bl	8000f28 <asciiToHex>


					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 80010ea:	2300      	movs	r3, #0
 80010ec:	75fb      	strb	r3, [r7, #23]
 80010ee:	e024      	b.n	800113a <flashHex+0x13e>
						tempBuf[i] <<= 4;
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	4a66      	ldr	r2, [pc, #408]	; (800128c <flashHex+0x290>)
 80010f4:	5cd2      	ldrb	r2, [r2, r3]
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d1      	uxtb	r1, r2
 80010fc:	4a63      	ldr	r2, [pc, #396]	; (800128c <flashHex+0x290>)
 80010fe:	54d1      	strb	r1, [r2, r3]
						tempBuf[i] = tempBuf[i] | tempBuf[i+1];
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	4a62      	ldr	r2, [pc, #392]	; (800128c <flashHex+0x290>)
 8001104:	5cd1      	ldrb	r1, [r2, r3]
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	3301      	adds	r3, #1
 800110a:	4a60      	ldr	r2, [pc, #384]	; (800128c <flashHex+0x290>)
 800110c:	5cd2      	ldrb	r2, [r2, r3]
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	430a      	orrs	r2, r1
 8001112:	b2d1      	uxtb	r1, r2
 8001114:	4a5d      	ldr	r2, [pc, #372]	; (800128c <flashHex+0x290>)
 8001116:	54d1      	strb	r1, [r2, r3]
						program_data |= tempBuf[i] <<(i*4);
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	4a5c      	ldr	r2, [pc, #368]	; (800128c <flashHex+0x290>)
 800111c:	5cd3      	ldrb	r3, [r2, r3]
 800111e:	461a      	mov	r2, r3
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	461a      	mov	r2, r3
 800112a:	4b5d      	ldr	r3, [pc, #372]	; (80012a0 <flashHex+0x2a4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4313      	orrs	r3, r2
 8001130:	4a5b      	ldr	r2, [pc, #364]	; (80012a0 <flashHex+0x2a4>)
 8001132:	6013      	str	r3, [r2, #0]
					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	3302      	adds	r3, #2
 8001138:	75fb      	strb	r3, [r7, #23]
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d9d7      	bls.n	80010f0 <flashHex+0xf4>
					}

					EraseNecessarySectors(extented_linear_adress + address_data, &current_sector);
 8001140:	4b54      	ldr	r3, [pc, #336]	; (8001294 <flashHex+0x298>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <flashHex+0x2a8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4956      	ldr	r1, [pc, #344]	; (80012a8 <flashHex+0x2ac>)
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fbf2 	bl	8000938 <EraseNecessarySectors>
					FlashWriteWord(extented_linear_adress + address_data, program_data);
 8001154:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <flashHex+0x298>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b52      	ldr	r3, [pc, #328]	; (80012a4 <flashHex+0x2a8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <flashHex+0x2a4>)
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe0b 	bl	8000d82 <FlashWriteWord>
					calculation_check_sum += (uint8_t)program_data + (uint8_t)(program_data>>8) + (uint8_t)(program_data>>16) + (uint8_t)(program_data>>24);
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <flashHex+0x2a4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <flashHex+0x2a4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4413      	add	r3, r2
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <flashHex+0x2a4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	0c1b      	lsrs	r3, r3, #16
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <flashHex+0x2a4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	0e1b      	lsrs	r3, r3, #24
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4413      	add	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <flashHex+0x2a0>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b3f      	ldr	r3, [pc, #252]	; (800129c <flashHex+0x2a0>)
 80011a0:	701a      	strb	r2, [r3, #0]
					size_data -= 8;
 80011a2:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <flashHex+0x294>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	3b08      	subs	r3, #8
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <flashHex+0x294>)
 80011ac:	701a      	strb	r2, [r3, #0]
					address_data += 4;
 80011ae:	4b39      	ldr	r3, [pc, #228]	; (8001294 <flashHex+0x298>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	3304      	adds	r3, #4
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <flashHex+0x298>)
 80011b8:	801a      	strh	r2, [r3, #0]
					program_data = 0;
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <flashHex+0x2a4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
				while(size_data > 0) {
 80011c0:	4b33      	ldr	r3, [pc, #204]	; (8001290 <flashHex+0x294>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d185      	bne.n	80010d4 <flashHex+0xd8>
				}
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 80011c8:	4b34      	ldr	r3, [pc, #208]	; (800129c <flashHex+0x2a0>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	425b      	negs	r3, r3
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <flashHex+0x2a0>)
 80011d2:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 80011d4:	f107 020e 	add.w	r2, r7, #14
 80011d8:	2302      	movs	r3, #2
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	482b      	ldr	r0, [pc, #172]	; (800128c <flashHex+0x290>)
 80011de:	f7ff fedb 	bl	8000f98 <fillBuffer>
				asciiToHex(tempBuf, 2);
 80011e2:	2102      	movs	r1, #2
 80011e4:	4829      	ldr	r0, [pc, #164]	; (800128c <flashHex+0x290>)
 80011e6:	f7ff fe9f 	bl	8000f28 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <flashHex+0x290>)
 80011ec:	785a      	ldrb	r2, [r3, #1]
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <flashHex+0x290>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <flashHex+0x2b0>)
 80011fc:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <flashHex+0x2a0>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <flashHex+0x2b0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d001      	beq.n	800120e <flashHex+0x212>
					return 0;
 800120a:	2300      	movs	r3, #0
 800120c:	e0a7      	b.n	800135e <flashHex+0x362>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <flashHex+0x2a0>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	e097      	b.n	8001346 <flashHex+0x34a>

			} else if(type_data == 0x04) {//дополнительный адрес
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <flashHex+0x29c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b04      	cmp	r3, #4
 800121c:	f040 808f 	bne.w	800133e <flashHex+0x342>
				fillBuffer(tempBuf, flashBuf, &ptr, 4);
 8001220:	f107 020e 	add.w	r2, r7, #14
 8001224:	2304      	movs	r3, #4
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4818      	ldr	r0, [pc, #96]	; (800128c <flashHex+0x290>)
 800122a:	f7ff feb5 	bl	8000f98 <fillBuffer>
				asciiToHex(tempBuf, 4);
 800122e:	2104      	movs	r1, #4
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <flashHex+0x290>)
 8001232:	f7ff fe79 	bl	8000f28 <asciiToHex>

				extented_linear_adress = (uint32_t)(tempBuf[0]<<28 | tempBuf[1]<<24 | tempBuf[2]<<20 | tempBuf[3]<<16 );//считаем адрес
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <flashHex+0x290>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	071a      	lsls	r2, r3, #28
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <flashHex+0x290>)
 800123e:	785b      	ldrb	r3, [r3, #1]
 8001240:	061b      	lsls	r3, r3, #24
 8001242:	431a      	orrs	r2, r3
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <flashHex+0x290>)
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	051b      	lsls	r3, r3, #20
 800124a:	431a      	orrs	r2, r3
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <flashHex+0x290>)
 800124e:	78db      	ldrb	r3, [r3, #3]
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	4313      	orrs	r3, r2
 8001254:	461a      	mov	r2, r3
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <flashHex+0x2a8>)
 8001258:	601a      	str	r2, [r3, #0]

				if (firstFirmwarePlaceCheck) {
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <flashHex+0x2b4>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d030      	beq.n	80012c4 <flashHex+0x2c8>
					uint32_t latest_app_address = getLatestApplicationAddress();
 8001262:	f7ff f9f7 	bl	8000654 <getLatestApplicationAddress>
 8001266:	6138      	str	r0, [r7, #16]
					if ((latest_app_address & 0xFFFF0000) != extented_linear_adress)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	0c1b      	lsrs	r3, r3, #16
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <flashHex+0x2a8>)
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	4293      	cmp	r3, r2
 8001274:	d001      	beq.n	800127a <flashHex+0x27e>
						return 2;
 8001276:	2302      	movs	r3, #2
 8001278:	e071      	b.n	800135e <flashHex+0x362>

					if (latest_app_address == APP_1_ADDRESS) current_sector = APP_1_SECTOR;
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <flashHex+0x2b8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d11a      	bne.n	80012b8 <flashHex+0x2bc>
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <flashHex+0x2ac>)
 8001284:	2205      	movs	r2, #5
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e019      	b.n	80012be <flashHex+0x2c2>
 800128a:	bf00      	nop
 800128c:	200001e8 	.word	0x200001e8
 8001290:	200001d8 	.word	0x200001d8
 8001294:	200001dc 	.word	0x200001dc
 8001298:	200001d9 	.word	0x200001d9
 800129c:	200001e4 	.word	0x200001e4
 80012a0:	200001e0 	.word	0x200001e0
 80012a4:	200001d4 	.word	0x200001d4
 80012a8:	200001f0 	.word	0x200001f0
 80012ac:	200001da 	.word	0x200001da
 80012b0:	20000088 	.word	0x20000088
 80012b4:	08020000 	.word	0x08020000
					else current_sector = APP_2_SECTOR;
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <flashHex+0x36c>)
 80012ba:	2210      	movs	r2, #16
 80012bc:	701a      	strb	r2, [r3, #0]

					firstFirmwarePlaceCheck = 0;
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <flashHex+0x370>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
				}

				calculation_check_sum +=  16*tempBuf[0] + tempBuf[1] + 16*tempBuf[2] + tempBuf[3];
 80012c4:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <flashHex+0x374>)
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <flashHex+0x374>)
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	4413      	add	r3, r2
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <flashHex+0x374>)
 80012d6:	785b      	ldrb	r3, [r3, #1]
 80012d8:	4413      	add	r3, r2
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <flashHex+0x374>)
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <flashHex+0x378>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <flashHex+0x378>)
 80012ee:	701a      	strb	r2, [r3, #0]
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <flashHex+0x378>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	425b      	negs	r3, r3
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <flashHex+0x378>)
 80012fa:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 80012fc:	f107 020e 	add.w	r2, r7, #14
 8001300:	2302      	movs	r3, #2
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	481a      	ldr	r0, [pc, #104]	; (8001370 <flashHex+0x374>)
 8001306:	f7ff fe47 	bl	8000f98 <fillBuffer>
				asciiToHex(tempBuf, 2);
 800130a:	2102      	movs	r1, #2
 800130c:	4818      	ldr	r0, [pc, #96]	; (8001370 <flashHex+0x374>)
 800130e:	f7ff fe0b 	bl	8000f28 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <flashHex+0x374>)
 8001314:	785a      	ldrb	r2, [r3, #1]
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <flashHex+0x374>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <flashHex+0x37c>)
 8001324:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <flashHex+0x378>)
 8001328:	781a      	ldrb	r2, [r3, #0]
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <flashHex+0x37c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d001      	beq.n	8001336 <flashHex+0x33a>
					return 0;
 8001332:	2300      	movs	r3, #0
 8001334:	e013      	b.n	800135e <flashHex+0x362>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <flashHex+0x378>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	e003      	b.n	8001346 <flashHex+0x34a>
			} else if(type_data == 0x01) {//конец файла
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <flashHex+0x380>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d009      	beq.n	800135a <flashHex+0x35e>
				break;
			}
		}
		ptr++;
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	3301      	adds	r3, #1
 800134a:	b29b      	uxth	r3, r3
 800134c:	81fb      	strh	r3, [r7, #14]
	while (ptr < size) {
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	887a      	ldrh	r2, [r7, #2]
 8001352:	429a      	cmp	r2, r3
 8001354:	f63f ae5b 	bhi.w	800100e <flashHex+0x12>
 8001358:	e000      	b.n	800135c <flashHex+0x360>
				break;
 800135a:	bf00      	nop
	}
	return 1;
 800135c:	2301      	movs	r3, #1
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001f0 	.word	0x200001f0
 800136c:	20000088 	.word	0x20000088
 8001370:	200001e8 	.word	0x200001e8
 8001374:	200001e4 	.word	0x200001e4
 8001378:	200001da 	.word	0x200001da
 800137c:	200001d9 	.word	0x200001d9

08001380 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_IWDG_Init+0x2c>)
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <MX_IWDG_Init+0x30>)
 8001388:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_IWDG_Init+0x2c>)
 800138c:	2206      	movs	r2, #6
 800138e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 640;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_IWDG_Init+0x2c>)
 8001392:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001396:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_IWDG_Init+0x2c>)
 800139a:	f003 fb92 	bl	8004ac2 <HAL_IWDG_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80013a4:	f000 f9d7 	bl	8001756 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200001f4 	.word	0x200001f4
 80013b0:	40003000 	.word	0x40003000

080013b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013b8:	f3bf 8f4f 	dsb	sy
}
 80013bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <__NVIC_SystemReset+0x24>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013c6:	4904      	ldr	r1, [pc, #16]	; (80013d8 <__NVIC_SystemReset+0x24>)
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_SystemReset+0x28>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013ce:	f3bf 8f4f 	dsb	sy
}
 80013d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <__NVIC_SystemReset+0x20>
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	05fa0004 	.word	0x05fa0004

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  commands[0] = commandCreate("jump", (CommandAction) jumpToUserApp, NONE);
 80013e6:	2202      	movs	r2, #2
 80013e8:	492e      	ldr	r1, [pc, #184]	; (80014a4 <main+0xc4>)
 80013ea:	482f      	ldr	r0, [pc, #188]	; (80014a8 <main+0xc8>)
 80013ec:	f7ff fbfc 	bl	8000be8 <commandCreate>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a2e      	ldr	r2, [pc, #184]	; (80014ac <main+0xcc>)
 80013f4:	6013      	str	r3, [r2, #0]
  commands[1] = commandCreate("update", (CommandAction) downloadFirmware, INT);
 80013f6:	2200      	movs	r2, #0
 80013f8:	492d      	ldr	r1, [pc, #180]	; (80014b0 <main+0xd0>)
 80013fa:	482e      	ldr	r0, [pc, #184]	; (80014b4 <main+0xd4>)
 80013fc:	f7ff fbf4 	bl	8000be8 <commandCreate>
 8001400:	4603      	mov	r3, r0
 8001402:	4a2a      	ldr	r2, [pc, #168]	; (80014ac <main+0xcc>)
 8001404:	6053      	str	r3, [r2, #4]
  commands[2] = commandCreate("version", (CommandAction) getAppVersions, NONE);
 8001406:	2202      	movs	r2, #2
 8001408:	492b      	ldr	r1, [pc, #172]	; (80014b8 <main+0xd8>)
 800140a:	482c      	ldr	r0, [pc, #176]	; (80014bc <main+0xdc>)
 800140c:	f7ff fbec 	bl	8000be8 <commandCreate>
 8001410:	4603      	mov	r3, r0
 8001412:	4a26      	ldr	r2, [pc, #152]	; (80014ac <main+0xcc>)
 8001414:	6093      	str	r3, [r2, #8]
  commands[3] = commandCreate("help", (CommandAction) getHelpInfo, NONE);
 8001416:	2202      	movs	r2, #2
 8001418:	4929      	ldr	r1, [pc, #164]	; (80014c0 <main+0xe0>)
 800141a:	482a      	ldr	r0, [pc, #168]	; (80014c4 <main+0xe4>)
 800141c:	f7ff fbe4 	bl	8000be8 <commandCreate>
 8001420:	4603      	mov	r3, r0
 8001422:	4a22      	ldr	r2, [pc, #136]	; (80014ac <main+0xcc>)
 8001424:	60d3      	str	r3, [r2, #12]
  commands[4] = commandCreate("clear", (CommandAction) eraseConfigs, NONE);
 8001426:	2202      	movs	r2, #2
 8001428:	4927      	ldr	r1, [pc, #156]	; (80014c8 <main+0xe8>)
 800142a:	4828      	ldr	r0, [pc, #160]	; (80014cc <main+0xec>)
 800142c:	f7ff fbdc 	bl	8000be8 <commandCreate>
 8001430:	4603      	mov	r3, r0
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <main+0xcc>)
 8001434:	6113      	str	r3, [r2, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001436:	f001 f9e3 	bl	8002800 <HAL_Init>

  /* USER CODE BEGIN Init */
  uartInit();
 800143a:	f000 fd5f 	bl	8001efc <uartInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 f851 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f7ff fcf1 	bl	8000e28 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001446:	f000 fc8b 	bl	8001d60 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 800144a:	f000 fbbf 	bl	8001bcc <MX_TIM6_Init>
  MX_IWDG_Init();
 800144e:	f7ff ff97 	bl	8001380 <MX_IWDG_Init>
  MX_LWIP_Init();
 8001452:	f005 fd7f 	bl	8006f54 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  uartEnableInterruption();
 8001456:	f000 fd87 	bl	8001f68 <uartEnableInterruption>
  menuInit(commands, 5);
 800145a:	2105      	movs	r1, #5
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <main+0xcc>)
 800145e:	f000 f97f 	bl	8001760 <menuInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_IWDG_Refresh(&hiwdg);
 8001462:	481b      	ldr	r0, [pc, #108]	; (80014d0 <main+0xf0>)
 8001464:	f003 fb6f 	bl	8004b46 <HAL_IWDG_Refresh>
	  MX_LWIP_Process(); // ethernetif_input(&gnetif) + sys_check_timeouts()
 8001468:	f005 fec0 	bl	80071ec <MX_LWIP_Process>

	  if (uartHasNext()) {
 800146c:	f000 fd3a 	bl	8001ee4 <uartHasNext>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <main+0x9a>
		  receiveAndSendChar();
 8001476:	f000 f911 	bl	800169c <receiveAndSendChar>
	  }

	  if (hasLine) {
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <main+0xf4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0ef      	beq.n	8001462 <main+0x82>
		  uartBuf[uartBufLast] = '\0';
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <main+0xf8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <main+0xfc>)
 800148a:	2100      	movs	r1, #0
 800148c:	5499      	strb	r1, [r3, r2]
		  const char* commandResult = menuExecuteCommand((char*) uartBuf);
 800148e:	4813      	ldr	r0, [pc, #76]	; (80014dc <main+0xfc>)
 8001490:	f000 f99a 	bl	80017c8 <menuExecuteCommand>
 8001494:	6078      	str	r0, [r7, #4]
		  sendMessage("\n");
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <main+0x100>)
 8001498:	f000 f94c 	bl	8001734 <sendMessage>
		  sendCommandResult(commandResult);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f92d 	bl	80016fc <sendCommandResult>
	  HAL_IWDG_Refresh(&hiwdg);
 80014a2:	e7de      	b.n	8001462 <main+0x82>
 80014a4:	080015d5 	.word	0x080015d5
 80014a8:	08012bdc 	.word	0x08012bdc
 80014ac:	20000284 	.word	0x20000284
 80014b0:	08001611 	.word	0x08001611
 80014b4:	08012be4 	.word	0x08012be4
 80014b8:	0800166d 	.word	0x0800166d
 80014bc:	08012bec 	.word	0x08012bec
 80014c0:	080015fd 	.word	0x080015fd
 80014c4:	08012bf4 	.word	0x08012bf4
 80014c8:	08001681 	.word	0x08001681
 80014cc:	08012bfc 	.word	0x08012bfc
 80014d0:	200001f4 	.word	0x200001f4
 80014d4:	20000281 	.word	0x20000281
 80014d8:	20000280 	.word	0x20000280
 80014dc:	20000200 	.word	0x20000200
 80014e0:	08012c04 	.word	0x08012c04

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b094      	sub	sp, #80	; 0x50
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0320 	add.w	r3, r7, #32
 80014ee:	2230      	movs	r2, #48	; 0x30
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f010 f862 	bl	80115bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <SystemClock_Config+0xe8>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a2e      	ldr	r2, [pc, #184]	; (80015cc <SystemClock_Config+0xe8>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
 8001518:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <SystemClock_Config+0xe8>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <SystemClock_Config+0xec>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <SystemClock_Config+0xec>)
 800152e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <SystemClock_Config+0xec>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001540:	2309      	movs	r3, #9
 8001542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800154a:	2301      	movs	r3, #1
 800154c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2302      	movs	r3, #2
 8001550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001558:	230f      	movs	r3, #15
 800155a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800155c:	23d8      	movs	r3, #216	; 0xd8
 800155e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001560:	2302      	movs	r3, #2
 8001562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001564:	2304      	movs	r3, #4
 8001566:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001568:	f107 0320 	add.w	r3, r7, #32
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fb4b 	bl	8004c08 <HAL_RCC_OscConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001578:	f000 f8ed 	bl	8001756 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800157c:	f003 faf4 	bl	8004b68 <HAL_PWREx_EnableOverDrive>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001586:	f000 f8e6 	bl	8001756 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158a:	230f      	movs	r3, #15
 800158c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158e:	2302      	movs	r3, #2
 8001590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800159a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800159c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	2105      	movs	r1, #5
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fda5 	bl	80050f8 <HAL_RCC_ClockConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80015b4:	f000 f8cf 	bl	8001756 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80015be:	2000      	movs	r0, #0
 80015c0:	f003 fe80 	bl	80052c4 <HAL_RCC_MCOConfig>
}
 80015c4:	bf00      	nop
 80015c6:	3750      	adds	r7, #80	; 0x50
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40007000 	.word	0x40007000

080015d4 <jumpToUserApp>:

/* USER CODE BEGIN 4 */
static char* jumpToUserApp() {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	validateApplications();
 80015d8:	f7ff f8e4 	bl	80007a4 <validateApplications>
	if (getLatestApplicationAddress() == 0) {
 80015dc:	f7ff f83a 	bl	8000654 <getLatestApplicationAddress>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <jumpToUserApp+0x16>
		return "No valid application in flash\n";
 80015e6:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <jumpToUserApp+0x20>)
 80015e8:	e002      	b.n	80015f0 <jumpToUserApp+0x1c>
	} else {
		jumpToApp();
 80015ea:	f7ff f92d 	bl	8000848 <jumpToApp>
		return "Done";
 80015ee:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <jumpToUserApp+0x24>)
	}
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	08012c08 	.word	0x08012c08
 80015f8:	08012c28 	.word	0x08012c28

080015fc <getHelpInfo>:

static char* getHelpInfo() {
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
    return "jump: jump to application\n\
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <getHelpInfo+0x10>)
update <version>: download firmware and jump to it\n\
version: get current version of application\n\
help: get information about commands\n\
clear: erase configs\n";
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	08012c30 	.word	0x08012c30

08001610 <downloadFirmware>:

static char* downloadFirmware(uint32_t* version) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	validateApplications();
 8001618:	f7ff f8c4 	bl	80007a4 <validateApplications>
	updateConfig();
 800161c:	f7ff f848 	bl	80006b0 <updateConfig>
	setAppVersion(*version);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff f879 	bl	800071c <setAppVersion>
	sendMessage("Send hex file via XMODEM\n");
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <downloadFirmware+0x58>)
 800162c:	f000 f882 	bl	8001734 <sendMessage>
	HAL_Delay(100);
 8001630:	2064      	movs	r0, #100	; 0x64
 8001632:	f001 f98b 	bl	800294c <HAL_Delay>
	uint8_t xmodemStatus = xmodemReceive();
 8001636:	f000 fd2f 	bl	8002098 <xmodemReceive>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]
	if (xmodemStatus == 1) {
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <downloadFirmware+0x40>
		setCorrectUpdateFlag();
 8001644:	f7ff f88c 	bl	8000760 <setCorrectUpdateFlag>
		return jumpToUserApp();
 8001648:	f7ff ffc4 	bl	80015d4 <jumpToUserApp>
 800164c:	4603      	mov	r3, r0
 800164e:	e006      	b.n	800165e <downloadFirmware+0x4e>
	} else if (xmodemStatus == 2) {
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d101      	bne.n	800165a <downloadFirmware+0x4a>
		NVIC_SystemReset(); //TODO
 8001656:	f7ff fead 	bl	80013b4 <__NVIC_SystemReset>
		return "Error. Choose firmware for another bank.\n";
	} else {
		NVIC_SystemReset(); //TODO
 800165a:	f7ff feab 	bl	80013b4 <__NVIC_SystemReset>
		return "Error. Update aborted.\n";
	};
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	08012ce4 	.word	0x08012ce4

0800166c <getAppVersions>:

static char* getAppVersions() {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	validateApplications();
 8001670:	f7ff f898 	bl	80007a4 <validateApplications>
	return getVersions();
 8001674:	f7fe ffa6 	bl	80005c4 <getVersions>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <eraseConfigs>:

static char* eraseConfigs() {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	EraseSector(CONFIG_1_SECTOR);
 8001684:	200e      	movs	r0, #14
 8001686:	f7ff fba7 	bl	8000dd8 <EraseSector>
	EraseSector(CONFIG_2_SECTOR);
 800168a:	200f      	movs	r0, #15
 800168c:	f7ff fba4 	bl	8000dd8 <EraseSector>
	return "Configs erased\n";
 8001690:	4b01      	ldr	r3, [pc, #4]	; (8001698 <eraseConfigs+0x18>)
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	08012d00 	.word	0x08012d00

0800169c <receiveAndSendChar>:

static void receiveAndSendChar() {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
    if (uartReceive(uartBuf + uartBufLast, 1)) {
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <receiveAndSendChar+0x54>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <receiveAndSendChar+0x58>)
 80016aa:	4413      	add	r3, r2
 80016ac:	2101      	movs	r1, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fc3a 	bl	8001f28 <uartReceive>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d016      	beq.n	80016e8 <receiveAndSendChar+0x4c>
        uint8_t received = uartBuf[uartBufLast];
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <receiveAndSendChar+0x54>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <receiveAndSendChar+0x58>)
 80016c2:	5c9b      	ldrb	r3, [r3, r2]
 80016c4:	71fb      	strb	r3, [r7, #7]
        uartBufLast++;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <receiveAndSendChar+0x54>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <receiveAndSendChar+0x54>)
 80016d0:	701a      	strb	r2, [r3, #0]
        uartTransmit(&received, 1);
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	2101      	movs	r1, #1
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fbbc 	bl	8001e54 <uartTransmit>

        if (received == '\r')
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2b0d      	cmp	r3, #13
 80016e0:	d102      	bne.n	80016e8 <receiveAndSendChar+0x4c>
            hasLine = 1;
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <receiveAndSendChar+0x5c>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
    }
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000280 	.word	0x20000280
 80016f4:	20000200 	.word	0x20000200
 80016f8:	20000281 	.word	0x20000281

080016fc <sendCommandResult>:

static void sendCommandResult(const char* commandResult) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7fe fd7d 	bl	8000204 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	b29b      	uxth	r3, r3
 800170e:	4619      	mov	r1, r3
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fb9f 	bl	8001e54 <uartTransmit>
    uartBufLast = 0;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <sendCommandResult+0x30>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
    hasLine = 0;
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <sendCommandResult+0x34>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000280 	.word	0x20000280
 8001730:	20000281 	.word	0x20000281

08001734 <sendMessage>:

static void sendMessage(const char* msg) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7fe fd61 	bl	8000204 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	b29b      	uxth	r3, r3
 8001746:	4619      	mov	r1, r3
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 fb83 	bl	8001e54 <uartTransmit>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800175a:	b672      	cpsid	i
}
 800175c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175e:	e7fe      	b.n	800175e <Error_Handler+0x8>

08001760 <menuInit>:
uint16_t menuSize;

static int32_t commandSepNameFromArg(const char *commandNameWithArg);
static void strTrim(char *str);

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <menuInit+0x60>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d121      	bne.n	80017b8 <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4618      	mov	r0, r3
 800177a:	f00f fedf 	bl	801153c <malloc>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <menuInit+0x60>)
 8001784:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 8001786:	2300      	movs	r3, #0
 8001788:	81fb      	strh	r3, [r7, #14]
 800178a:	e00d      	b.n	80017a8 <menuInit+0x48>
        menuCommands[i] = commands[i];
 800178c:	89fb      	ldrh	r3, [r7, #14]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	441a      	add	r2, r3
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <menuInit+0x60>)
 8001796:	6819      	ldr	r1, [r3, #0]
 8001798:	89fb      	ldrh	r3, [r7, #14]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 80017a2:	89fb      	ldrh	r3, [r7, #14]
 80017a4:	3301      	adds	r3, #1
 80017a6:	81fb      	strh	r3, [r7, #14]
 80017a8:	89fa      	ldrh	r2, [r7, #14]
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3ed      	bcc.n	800178c <menuInit+0x2c>
    }
    menuSize = commandsSize;
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <menuInit+0x64>)
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	8013      	strh	r3, [r2, #0]
 80017b6:	e000      	b.n	80017ba <menuInit+0x5a>
        return;
 80017b8:	bf00      	nop
}
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000298 	.word	0x20000298
 80017c4:	2000029c 	.word	0x2000029c

080017c8 <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandNameWithArg) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    strTrim(commandNameWithArg);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f866 	bl	80018a2 <strTrim>
    const int32_t sep = commandSepNameFromArg(commandNameWithArg);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f88a 	bl	80018f0 <commandSepNameFromArg>
 80017dc:	6178      	str	r0, [r7, #20]
    const char *commandArg = NULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    if (sep != -1) {
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d009      	beq.n	80017fe <menuExecuteCommand+0x36>
        commandNameWithArg[sep] = '\0';
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
        commandArg = commandNameWithArg + sep + 1;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	61fb      	str	r3, [r7, #28]
    }
    const char * const commandName = commandNameWithArg;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < menuSize; i++) {
 8001802:	2300      	movs	r3, #0
 8001804:	837b      	strh	r3, [r7, #26]
 8001806:	e020      	b.n	800184a <menuExecuteCommand+0x82>
        const Command * const command = menuCommands[i];
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <menuExecuteCommand+0x98>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	8b7b      	ldrh	r3, [r7, #26]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <menuExecuteCommand+0x98>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	8b7b      	ldrh	r3, [r7, #26]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fa9c 	bl	8000d60 <commandGetName>
 8001828:	4603      	mov	r3, r0
 800182a:	6939      	ldr	r1, [r7, #16]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fcdf 	bl	80001f0 <strcmp>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d105      	bne.n	8001844 <menuExecuteCommand+0x7c>
            return commandExecute(command, commandArg);
 8001838:	69f9      	ldr	r1, [r7, #28]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f7ff f9fe 	bl	8000c3c <commandExecute>
 8001840:	4603      	mov	r3, r0
 8001842:	e008      	b.n	8001856 <menuExecuteCommand+0x8e>
    for (uint16_t i = 0; i < menuSize; i++) {
 8001844:	8b7b      	ldrh	r3, [r7, #26]
 8001846:	3301      	adds	r3, #1
 8001848:	837b      	strh	r3, [r7, #26]
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <menuExecuteCommand+0x9c>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	8b7a      	ldrh	r2, [r7, #26]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3d9      	bcc.n	8001808 <menuExecuteCommand+0x40>
        }
    }
    return "Command not found, print \"help\" for getting info\n";
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <menuExecuteCommand+0xa0>)
}
 8001856:	4618      	mov	r0, r3
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000298 	.word	0x20000298
 8001864:	2000029c 	.word	0x2000029c
 8001868:	08012d10 	.word	0x08012d10

0800186c <isSpaceChar>:

static uint8_t isSpaceChar(char ch) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
    return ch == '\n' || ch == ' ' || ch == '\t' || ch == '\r';
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b0a      	cmp	r3, #10
 800187a:	d008      	beq.n	800188e <isSpaceChar+0x22>
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b20      	cmp	r3, #32
 8001880:	d005      	beq.n	800188e <isSpaceChar+0x22>
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b09      	cmp	r3, #9
 8001886:	d002      	beq.n	800188e <isSpaceChar+0x22>
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b0d      	cmp	r3, #13
 800188c:	d101      	bne.n	8001892 <isSpaceChar+0x26>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <isSpaceChar+0x28>
 8001892:	2300      	movs	r3, #0
 8001894:	b2db      	uxtb	r3, r3
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <strTrim>:

static void strTrim(char * const str) {
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(str);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7fe fcaa 	bl	8000204 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e011      	b.n	80018e0 <strTrim+0x3e>
        if (isSpaceChar(str[i])) {
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ffd1 	bl	800186c <isSpaceChar>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00b      	beq.n	80018e8 <strTrim+0x46>
            str[i] = '\0';
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
    for (int32_t i = len - 1; i >= 0; i--) {
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3b01      	subs	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	daea      	bge.n	80018bc <strTrim+0x1a>
 80018e6:	e000      	b.n	80018ea <strTrim+0x48>
        } else {
            return;
 80018e8:	bf00      	nop
        }
    }
}
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <commandSepNameFromArg>:

static int32_t commandSepNameFromArg(const char * const commandNameWithArg) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(commandNameWithArg);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7fe fc83 	bl	8000204 <strlen>
 80018fe:	4603      	mov	r3, r0
 8001900:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3b01      	subs	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	e00a      	b.n	8001920 <commandSepNameFromArg+0x30>
        if (commandNameWithArg[i] == ' ') {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b20      	cmp	r3, #32
 8001914:	d101      	bne.n	800191a <commandSepNameFromArg+0x2a>
            return i;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	e007      	b.n	800192a <commandSepNameFromArg+0x3a>
    for (int32_t i = len - 1; i >= 0; i--) {
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3b01      	subs	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	daf1      	bge.n	800190a <commandSepNameFromArg+0x1a>
        }
    }
    return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_MspInit+0x4c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_MspInit+0x4c>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler+0x4>

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d0:	f000 ff9c 	bl	800290c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM6_DAC_IRQHandler+0x10>)
 80019de:	f003 ffba 	bl	8005956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200002a4 	.word	0x200002a4

080019ec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <ETH_IRQHandler+0x10>)
 80019f2:	f001 fcb3 	bl	800335c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000500c 	.word	0x2000500c

08001a00 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <USART6_IRQHandler+0x10>)
 8001a06:	f004 fbb5 	bl	8006174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200002fc 	.word	0x200002fc

08001a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
	return 1;
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_kill>:

int _kill(int pid, int sig)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <_kill+0x20>)
 8001a30:	2216      	movs	r2, #22
 8001a32:	601a      	str	r2, [r3, #0]
	return -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	20008194 	.word	0x20008194

08001a48 <_exit>:

void _exit (int status)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ffe5 	bl	8001a24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a5a:	e7fe      	b.n	8001a5a <_exit+0x12>

08001a5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e00a      	b.n	8001a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a6e:	f3af 8000 	nop.w
 8001a72:	4601      	mov	r1, r0
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	b2ca      	uxtb	r2, r1
 8001a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbf0      	blt.n	8001a6e <_read+0x12>
	}

return len;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e009      	b.n	8001abc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf1      	blt.n	8001aa8 <_write+0x12>
	}
	return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af6:	605a      	str	r2, [r3, #4]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_isatty>:

int _isatty(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
	return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <_sbrk+0x5c>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <_sbrk+0x60>)
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <_sbrk+0x64>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <_sbrk+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d205      	bcs.n	8001b74 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <_sbrk+0x6c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20030000 	.word	0x20030000
 8001b98:	00004000 	.word	0x00004000
 8001b9c:	200002a0 	.word	0x200002a0
 8001ba0:	200081a0 	.word	0x200081a0
 8001ba4:	20008194 	.word	0x20008194

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001bdc:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <MX_TIM6_Init+0x68>)
 8001bde:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44999;
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001be2:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001be6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001bf0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bf4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001bfe:	f003 fdbb 	bl	8005778 <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c08:	f7ff fda5 	bl	8001756 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c14:	463b      	mov	r3, r7
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001c1a:	f004 f86d 	bl	8005cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c24:	f7ff fd97 	bl	8001756 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200002a4 	.word	0x200002a4
 8001c34:	40001000 	.word	0x40001000

08001c38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <HAL_TIM_Base_MspInit+0x48>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d115      	bne.n	8001c76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_TIM_Base_MspInit+0x4c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <HAL_TIM_Base_MspInit+0x4c>)
 8001c54:	f043 0310 	orr.w	r3, r3, #16
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_TIM_Base_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2036      	movs	r0, #54	; 0x36
 8001c6c:	f000 ff91 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c70:	2036      	movs	r0, #54	; 0x36
 8001c72:	f000 ffaa 	bl	8002bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40001000 	.word	0x40001000
 8001c84:	40023800 	.word	0x40023800

08001c88 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d102      	bne.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x18>
		uartTransmitChar(X_C);
 8001c9a:	2043      	movs	r0, #67	; 0x43
 8001c9c:	f000 f8fe 	bl	8001e9c <uartTransmitChar>
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40001000 	.word	0x40001000

08001cac <uartHardwareTransmitInterrupt>:

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
}

void uartHardwareTransmitInterrupt(uint8_t buffer) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	usartHardwareTransmitBuffer = buffer;
 8001cb6:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <uartHardwareTransmitInterrupt+0x28>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001cbc:	2047      	movs	r0, #71	; 0x47
 8001cbe:	f000 ff84 	bl	8002bca <HAL_NVIC_EnableIRQ>
	HAL_UART_Transmit_IT(&huart6, &usartHardwareTransmitBuffer, 1);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4903      	ldr	r1, [pc, #12]	; (8001cd4 <uartHardwareTransmitInterrupt+0x28>)
 8001cc6:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <uartHardwareTransmitInterrupt+0x2c>)
 8001cc8:	f004 f8f3 	bl	8005eb2 <HAL_UART_Transmit_IT>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200002ec 	.word	0x200002ec
 8001cd8:	200002fc 	.word	0x200002fc

08001cdc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_UART_TxCpltCallback+0x1c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_UART_TxCpltCallback+0x14>
		uartTransmitIntCallback();
 8001cec:	f000 f9b6 	bl	800205c <uartTransmitIntCallback>
	}
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200002fc 	.word	0x200002fc

08001cfc <uartHardwareReceiveInterrupt>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
}

void uartHardwareReceiveInterrupt() {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d00:	2047      	movs	r0, #71	; 0x47
 8001d02:	f000 ff62 	bl	8002bca <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart6, &usartHardwareReceiveBuffer, 1);
 8001d06:	2201      	movs	r2, #1
 8001d08:	4902      	ldr	r1, [pc, #8]	; (8001d14 <uartHardwareReceiveInterrupt+0x18>)
 8001d0a:	4803      	ldr	r0, [pc, #12]	; (8001d18 <uartHardwareReceiveInterrupt+0x1c>)
 8001d0c:	f004 f916 	bl	8005f3c <HAL_UART_Receive_IT>
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200002ed 	.word	0x200002ed
 8001d18:	200002fc 	.word	0x200002fc

08001d1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <HAL_UART_RxCpltCallback+0x24>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d104      	bne.n	8001d36 <HAL_UART_RxCpltCallback+0x1a>
    	uartReceiveIntCallback(usartHardwareReceiveBuffer);
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_UART_RxCpltCallback+0x28>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f965 	bl	8002000 <uartReceiveIntCallback>
    }
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200002fc 	.word	0x200002fc
 8001d44:	200002ed 	.word	0x200002ed

08001d48 <uartHardwareDisableInterrupts>:

void uartHardwareDisableInterrupts() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart6);
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <uartHardwareDisableInterrupts+0x14>)
 8001d4e:	f004 f925 	bl	8005f9c <HAL_UART_Abort>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8001d52:	2047      	movs	r0, #71	; 0x47
 8001d54:	f000 ff47 	bl	8002be6 <HAL_NVIC_DisableIRQ>
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200002fc 	.word	0x200002fc

08001d60 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <MX_USART6_UART_Init+0x50>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_USART6_UART_Init+0x4c>)
 8001d98:	f004 f83e 	bl	8005e18 <HAL_UART_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001da2:	f7ff fcd8 	bl	8001756 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200002fc 	.word	0x200002fc
 8001db0:	40011400 	.word	0x40011400

08001db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <HAL_UART_MspInit+0x94>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d133      	bne.n	8001e3e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_UART_MspInit+0x98>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_UART_MspInit+0x98>)
 8001de0:	f043 0320 	orr.w	r3, r3, #32
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_UART_MspInit+0x98>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_UART_MspInit+0x98>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <HAL_UART_MspInit+0x98>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_UART_MspInit+0x98>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e0e:	23c0      	movs	r3, #192	; 0xc0
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e1e:	2308      	movs	r3, #8
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4809      	ldr	r0, [pc, #36]	; (8001e50 <HAL_UART_MspInit+0x9c>)
 8001e2a:	f002 fc85 	bl	8004738 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	2047      	movs	r0, #71	; 0x47
 8001e34:	f000 fead 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e38:	2047      	movs	r0, #71	; 0x47
 8001e3a:	f000 fec6 	bl	8002bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40011400 	.word	0x40011400
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020800 	.word	0x40020800

08001e54 <uartTransmit>:
  }
}

/* USER CODE BEGIN 1 */

uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <uartTransmit+0x16>
        return 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e010      	b.n	8001e8c <uartTransmit+0x38>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <uartTransmit+0x40>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fdce 	bl	8000a14 <bufferPushValues>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <uartTransmit+0x44>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <uartTransmit+0x36>
        hardwareTransmitIT();
 8001e86:	f000 f893 	bl	8001fb0 <hardwareTransmitIT>
    }
    return transmitted;
 8001e8a:	89fb      	ldrh	r3, [r7, #14]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200002f0 	.word	0x200002f0
 8001e98:	200002f8 	.word	0x200002f8

08001e9c <uartTransmitChar>:

uint8_t uartTransmitChar(const uint8_t msg) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
    if (msg == NULL)
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <uartTransmitChar+0x14>
        return 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e010      	b.n	8001ed2 <uartTransmitChar+0x36>
    const uint8_t transmitted = bufferPush(txBuffer, msg);
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <uartTransmitChar+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fd7a 	bl	80009b2 <bufferPush>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	73fb      	strb	r3, [r7, #15]
    if (interruptionsEnabled) {
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <uartTransmitChar+0x44>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <uartTransmitChar+0x34>
        hardwareTransmitIT();
 8001ecc:	f000 f870 	bl	8001fb0 <hardwareTransmitIT>
    }
    return transmitted;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200002f0 	.word	0x200002f0
 8001ee0:	200002f8 	.word	0x200002f8

08001ee4 <uartHasNext>:

uint8_t uartHasNext() {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
    return bufferHasValues(rxBuffer);
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <uartHasNext+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fdf6 	bl	8000ade <bufferHasValues>
 8001ef2:	4603      	mov	r3, r0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200002f4 	.word	0x200002f4

08001efc <uartInit>:

void uartInit() {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001f00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f04:	f7fe fd38 	bl	8000978 <bufferCreate>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <uartInit+0x24>)
 8001f0c:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001f0e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f12:	f7fe fd31 	bl	8000978 <bufferCreate>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4a02      	ldr	r2, [pc, #8]	; (8001f24 <uartInit+0x28>)
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200002f0 	.word	0x200002f0
 8001f24:	200002f4 	.word	0x200002f4

08001f28 <uartReceive>:
        hardwareTransmit();
        hardwareReceive();
    }
}

uint16_t uartReceive(uint8_t * const buffer, const uint16_t size) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
    const uint16_t received = bufferPopValues(rxBuffer, buffer, size);
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <uartReceive+0x38>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	887a      	ldrh	r2, [r7, #2]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fddf 	bl	8000b00 <bufferPopValues>
 8001f42:	4603      	mov	r3, r0
 8001f44:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <uartReceive+0x3c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <uartReceive+0x2c>
        hardwareReceiveIT();
 8001f50:	f000 f828 	bl	8001fa4 <hardwareReceiveIT>
    }
    return received;
 8001f54:	89fb      	ldrh	r3, [r7, #14]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200002f4 	.word	0x200002f4
 8001f64:	200002f8 	.word	0x200002f8

08001f68 <uartEnableInterruption>:

void uartEnableInterruption() {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
    interruptionsEnabled = 1;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <uartEnableInterruption+0x1c>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
    transmitIntEnd = 1;
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <uartEnableInterruption+0x20>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
    hardwareTransmitIT();
 8001f78:	f000 f81a 	bl	8001fb0 <hardwareTransmitIT>
    hardwareReceiveIT();
 8001f7c:	f000 f812 	bl	8001fa4 <hardwareReceiveIT>
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200002f8 	.word	0x200002f8
 8001f88:	20000090 	.word	0x20000090

08001f8c <uartDisableInterruption>:

void uartDisableInterruption() {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
    interruptionsEnabled = 0;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <uartDisableInterruption+0x14>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
    uartHardwareDisableInterrupts();
 8001f96:	f7ff fed7 	bl	8001d48 <uartHardwareDisableInterrupts>
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200002f8 	.word	0x200002f8

08001fa4 <hardwareReceiveIT>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareReceiveIT() {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
    uartHardwareReceiveInterrupt();
 8001fa8:	f7ff fea8 	bl	8001cfc <uartHardwareReceiveInterrupt>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <hardwareTransmitIT>:

static void hardwareTransmitIT() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
    if (!transmitIntEnd)
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <hardwareTransmitIT+0x48>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d016      	beq.n	8001fee <hardwareTransmitIT+0x3e>
        return;

    if (bufferHasValues(txBuffer)) {
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <hardwareTransmitIT+0x4c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fd8a 	bl	8000ade <bufferHasValues>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00f      	beq.n	8001ff0 <hardwareTransmitIT+0x40>
        transmitIntEnd = 0;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <hardwareTransmitIT+0x48>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
        uint8_t data = bufferPop(txBuffer);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <hardwareTransmitIT+0x4c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fd3d 	bl	8000a5a <bufferPop>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	71fb      	strb	r3, [r7, #7]
        uartHardwareTransmitInterrupt(data);
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fe60 	bl	8001cac <uartHardwareTransmitInterrupt>
 8001fec:	e000      	b.n	8001ff0 <hardwareTransmitIT+0x40>
        return;
 8001fee:	bf00      	nop
    }
}
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000090 	.word	0x20000090
 8001ffc:	200002f0 	.word	0x200002f0

08002000 <uartReceiveIntCallback>:
        if (uartHardwareTransmitPolling(byte, 5))
            bufferPop(txBuffer);
    }
}

extern void uartReceiveIntCallback(uint8_t data) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
    if (bufferGetFreeSize(rxBuffer) > 0) {
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <uartReceiveIntCallback+0x50>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fdb3 	bl	8000b7a <bufferGetFreeSize>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d006      	beq.n	8002028 <uartReceiveIntCallback+0x28>
        bufferPush(rxBuffer, data);
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <uartReceiveIntCallback+0x50>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	79fa      	ldrb	r2, [r7, #7]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fcc5 	bl	80009b2 <bufferPush>
    }
    if (!isRxStarted()) rxStarted = 1;
 8002028:	f000 f82a 	bl	8002080 <isRxStarted>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <uartReceiveIntCallback+0x38>
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <uartReceiveIntCallback+0x54>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <uartReceiveIntCallback+0x58>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <uartReceiveIntCallback+0x46>
        hardwareReceiveIT();
 8002042:	f7ff ffaf 	bl	8001fa4 <hardwareReceiveIT>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200002f4 	.word	0x200002f4
 8002054:	200002f9 	.word	0x200002f9
 8002058:	200002f8 	.word	0x200002f8

0800205c <uartTransmitIntCallback>:

extern void uartTransmitIntCallback() {
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
    transmitIntEnd = 1;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <uartTransmitIntCallback+0x1c>)
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <uartTransmitIntCallback+0x20>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <uartTransmitIntCallback+0x18>
        hardwareTransmitIT();
 8002070:	f7ff ff9e 	bl	8001fb0 <hardwareTransmitIT>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000090 	.word	0x20000090
 800207c:	200002f8 	.word	0x200002f8

08002080 <isRxStarted>:

uint16_t rxBufToProgBuf(uint8_t* buf) {
	return bufferPopValues(rxBuffer, buf, bufferGetSize(rxBuffer));
}

uint8_t isRxStarted() {
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
	return rxStarted;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <isRxStarted+0x14>)
 8002086:	781b      	ldrb	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	200002f9 	.word	0x200002f9

08002098 <xmodemReceive>:
 * @brief   This function is the base of the Xmodem protocol.
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  uint8_t
 */
uint8_t xmodemReceive() {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	717b      	strb	r3, [r7, #5]
    uint8_t error_number = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	713b      	strb	r3, [r7, #4]
    uint8_t header = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	71fb      	strb	r3, [r7, #7]
    xmodemPacketNumber = 1u;
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <xmodemReceive+0x10c>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6); //send "C" every 10 sec
 80020b0:	483d      	ldr	r0, [pc, #244]	; (80021a8 <xmodemReceive+0x110>)
 80020b2:	f003 fbb1 	bl	8005818 <HAL_TIM_Base_Start_IT>
    timerWorking = 1;
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <xmodemReceive+0x114>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
    /* Loop until there isn't any error or done. */
    while (status == X_OK) {
 80020bc:	e05d      	b.n	800217a <xmodemReceive+0xe2>
  	    WRITE_REG(IWDG->KR, 0x0000AAAAU);
 80020be:	4b3c      	ldr	r3, [pc, #240]	; (80021b0 <xmodemReceive+0x118>)
 80020c0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80020c4:	601a      	str	r2, [r3, #0]
	    xmodemBufSize = uartReceive(xmodemBuf, 1);
 80020c6:	2101      	movs	r1, #1
 80020c8:	483a      	ldr	r0, [pc, #232]	; (80021b4 <xmodemReceive+0x11c>)
 80020ca:	f7ff ff2d 	bl	8001f28 <uartReceive>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <xmodemReceive+0x120>)
 80020d4:	801a      	strh	r2, [r3, #0]
	    if (xmodemBufSize != 1) continue;
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <xmodemReceive+0x120>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d000      	beq.n	80020e0 <xmodemReceive+0x48>
 80020de:	e04c      	b.n	800217a <xmodemReceive+0xe2>
	    if (timerWorking) {
 80020e0:	4b32      	ldr	r3, [pc, #200]	; (80021ac <xmodemReceive+0x114>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <xmodemReceive+0x5c>
	    	HAL_TIM_Base_Stop_IT(&htim6); //stop sending "C"
 80020e8:	482f      	ldr	r0, [pc, #188]	; (80021a8 <xmodemReceive+0x110>)
 80020ea:	f003 fc05 	bl	80058f8 <HAL_TIM_Base_Stop_IT>
	    	timerWorking = 0;
 80020ee:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <xmodemReceive+0x114>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
	    }
    	HAL_Delay(100);
 80020f4:	2064      	movs	r0, #100	; 0x64
 80020f6:	f000 fc29 	bl	800294c <HAL_Delay>
        header = xmodemBuf[0];
 80020fa:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <xmodemReceive+0x11c>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]

        xmodem_status packet_status = X_ERROR;
 8002100:	23ff      	movs	r3, #255	; 0xff
 8002102:	71bb      	strb	r3, [r7, #6]
        /* The header can be: SOH, STX, EOT and CAN. */
        switch (header) {
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	2b18      	cmp	r3, #24
 8002108:	d02c      	beq.n	8002164 <xmodemReceive+0xcc>
 800210a:	2b18      	cmp	r3, #24
 800210c:	dc2d      	bgt.n	800216a <xmodemReceive+0xd2>
 800210e:	2b01      	cmp	r3, #1
 8002110:	d002      	beq.n	8002118 <xmodemReceive+0x80>
 8002112:	2b04      	cmp	r3, #4
 8002114:	d020      	beq.n	8002158 <xmodemReceive+0xc0>
 8002116:	e028      	b.n	800216a <xmodemReceive+0xd2>
            case X_SOH:
                packet_status = xmodem_handle_packet(header); //If the handling was successful, then send an ACK
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f888 	bl	8002230 <xmodem_handle_packet>
 8002120:	4603      	mov	r3, r0
 8002122:	71bb      	strb	r3, [r7, #6]
                if (packet_status == X_OK) {
 8002124:	79bb      	ldrb	r3, [r7, #6]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <xmodemReceive+0x9a>
                	uartTransmitChar(X_ACK);
 800212a:	2006      	movs	r0, #6
 800212c:	f7ff feb6 	bl	8001e9c <uartTransmitChar>
 8002130:	e023      	b.n	800217a <xmodemReceive+0xe2>
                } else if (packet_status == X_WRONG_FIRMWARE) {
 8002132:	79bb      	ldrb	r3, [r7, #6]
 8002134:	2b78      	cmp	r3, #120	; 0x78
 8002136:	d107      	bne.n	8002148 <xmodemReceive+0xb0>
                	xmodem_error_handler(&error_number, 0);
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f000 f903 	bl	8002348 <xmodem_error_handler>
                	status = X_WRONG_FIRMWARE;
 8002142:	2378      	movs	r3, #120	; 0x78
 8002144:	717b      	strb	r3, [r7, #5]
 8002146:	e018      	b.n	800217a <xmodemReceive+0xe2>
                } else {
                	status = xmodem_error_handler(&error_number, X_MAX_ERRORS); //Error while processing the packet, either send a NAK or do graceful abort
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2103      	movs	r1, #3
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f8fb 	bl	8002348 <xmodem_error_handler>
 8002152:	4603      	mov	r3, r0
 8002154:	717b      	strb	r3, [r7, #5]
                }
                break;
 8002156:	e010      	b.n	800217a <xmodemReceive+0xe2>
            /* End of Transmission. */
            case X_EOT:
            	uartTransmitChar(X_ACK);
 8002158:	2006      	movs	r0, #6
 800215a:	f7ff fe9f 	bl	8001e9c <uartTransmitChar>
            	status = X_DONE;
 800215e:	23aa      	movs	r3, #170	; 0xaa
 8002160:	717b      	strb	r3, [r7, #5]
            	break;
 8002162:	e00a      	b.n	800217a <xmodemReceive+0xe2>
            /* Abort from host. */
            case X_CAN:
           		status = X_ERROR;
 8002164:	23ff      	movs	r3, #255	; 0xff
 8002166:	717b      	strb	r3, [r7, #5]
           		break;
 8002168:	e007      	b.n	800217a <xmodemReceive+0xe2>
            default:
            /* Wrong header. */
            	status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	2103      	movs	r1, #3
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f8ea 	bl	8002348 <xmodem_error_handler>
 8002174:	4603      	mov	r3, r0
 8002176:	717b      	strb	r3, [r7, #5]
            	break;
 8002178:	bf00      	nop
    while (status == X_OK) {
 800217a:	797b      	ldrb	r3, [r7, #5]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d09d      	beq.n	80020be <xmodemReceive+0x26>
        }
    }
    if (status == X_DONE) return 1;
 8002182:	797b      	ldrb	r3, [r7, #5]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2baa      	cmp	r3, #170	; 0xaa
 8002188:	d101      	bne.n	800218e <xmodemReceive+0xf6>
 800218a:	2301      	movs	r3, #1
 800218c:	e006      	b.n	800219c <xmodemReceive+0x104>
    else if (status == X_WRONG_FIRMWARE) return 2;
 800218e:	797b      	ldrb	r3, [r7, #5]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b78      	cmp	r3, #120	; 0x78
 8002194:	d101      	bne.n	800219a <xmodemReceive+0x102>
 8002196:	2302      	movs	r3, #2
 8002198:	e000      	b.n	800219c <xmodemReceive+0x104>
    else return 0;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000091 	.word	0x20000091
 80021a8:	200002a4 	.word	0x200002a4
 80021ac:	200004c6 	.word	0x200004c6
 80021b0:	40003000 	.word	0x40003000
 80021b4:	20000340 	.word	0x20000340
 80021b8:	20000440 	.word	0x20000440

080021bc <xmodemCalcCrc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodemCalcCrc(uint8_t *data, uint16_t length)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 80021c8:	2300      	movs	r3, #0
 80021ca:	81fb      	strh	r3, [r7, #14]
    while (length)
 80021cc:	e026      	b.n	800221c <xmodemCalcCrc+0x60>
    {
        length--;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	b21a      	sxth	r2, r3
 80021e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e4:	4053      	eors	r3, r2
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	737b      	strb	r3, [r7, #13]
 80021ee:	e012      	b.n	8002216 <xmodemCalcCrc+0x5a>
        {
            if (crc & 0x8000u)
 80021f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da08      	bge.n	800220a <xmodemCalcCrc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	81fb      	strh	r3, [r7, #14]
 8002208:	e002      	b.n	8002210 <xmodemCalcCrc+0x54>
            }
            else
            {
                crc = crc << 1u;
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8002210:	7b7b      	ldrb	r3, [r7, #13]
 8002212:	3301      	adds	r3, #1
 8002214:	737b      	strb	r3, [r7, #13]
 8002216:	7b7b      	ldrb	r3, [r7, #13]
 8002218:	2b07      	cmp	r3, #7
 800221a:	d9e9      	bls.n	80021f0 <xmodemCalcCrc+0x34>
    while (length)
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1d5      	bne.n	80021ce <xmodemCalcCrc+0x12>
            }
        }
    }
    return crc;
 8002222:	89fb      	ldrh	r3, [r7, #14]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <xmodem_handle_packet>:
/**
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b0a6      	sub	sp, #152	; 0x98
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
	uint8_t dataTempBuf[128];
	uint8_t crcBuf[2];
    uint16_t size = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

    /* Receive packet number */
    size = uartReceive(xmodemBuf, 2);
 8002240:	2102      	movs	r1, #2
 8002242:	483e      	ldr	r0, [pc, #248]	; (800233c <xmodem_handle_packet+0x10c>)
 8002244:	f7ff fe70 	bl	8001f28 <uartReceive>
 8002248:	4603      	mov	r3, r0
 800224a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2)
 800224e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002252:	2b02      	cmp	r3, #2
 8002254:	d001      	beq.n	800225a <xmodem_handle_packet+0x2a>
    	return X_ERROR_UART;
 8002256:	2304      	movs	r3, #4
 8002258:	e06c      	b.n	8002334 <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] != xmodemPacketNumber)
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <xmodem_handle_packet+0x10c>)
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	4b38      	ldr	r3, [pc, #224]	; (8002340 <xmodem_handle_packet+0x110>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <xmodem_handle_packet+0x3a>
    	return X_ERROR_NUMBER;
 8002266:	2302      	movs	r3, #2
 8002268:	e064      	b.n	8002334 <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] + xmodemBuf[1] != 255)
 800226a:	4b34      	ldr	r3, [pc, #208]	; (800233c <xmodem_handle_packet+0x10c>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <xmodem_handle_packet+0x10c>)
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	4413      	add	r3, r2
 8002276:	2bff      	cmp	r3, #255	; 0xff
 8002278:	d001      	beq.n	800227e <xmodem_handle_packet+0x4e>
    	return X_ERROR_NUMBER;
 800227a:	2302      	movs	r3, #2
 800227c:	e05a      	b.n	8002334 <xmodem_handle_packet+0x104>

    /* Receive packet data */
    size = uartReceive(dataTempBuf, X_PACKET_128_SIZE);
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fe4f 	bl	8001f28 <uartReceive>
 800228a:	4603      	mov	r3, r0
 800228c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != X_PACKET_128_SIZE)
 8002290:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d001      	beq.n	800229c <xmodem_handle_packet+0x6c>
    	return X_ERROR_UART;
 8002298:	2304      	movs	r3, #4
 800229a:	e04b      	b.n	8002334 <xmodem_handle_packet+0x104>

    /* Receive CRC */
    size = uartReceive(crcBuf, 2);
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2102      	movs	r1, #2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fe40 	bl	8001f28 <uartReceive>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2)
 80022ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d001      	beq.n	80022ba <xmodem_handle_packet+0x8a>
    	return X_ERROR_UART;
 80022b6:	2304      	movs	r3, #4
 80022b8:	e03c      	b.n	8002334 <xmodem_handle_packet+0x104>

    /* Check CRC */
    uint16_t crcMerged = ((uint16_t) crcBuf[0] << 8) | ((uint16_t) crcBuf[1]); //Merge the two bytes of CRC
 80022ba:	7b3b      	ldrb	r3, [r7, #12]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	b21a      	sxth	r2, r3
 80022c0:	7b7b      	ldrb	r3, [r7, #13]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    uint16_t crcCalculated = xmodemCalcCrc(dataTempBuf, X_PACKET_128_SIZE);
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff72 	bl	80021bc <xmodemCalcCrc>
 80022d8:	4603      	mov	r3, r0
 80022da:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    if (crcMerged != crcCalculated)
 80022de:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80022e2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <xmodem_handle_packet+0xbe>
    	return X_ERROR_CRC;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e022      	b.n	8002334 <xmodem_handle_packet+0x104>

    /* Add remaining data from previous packet to current data */
    addRemainingDataToCurrentBuf(dataTempBuf);
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f862 	bl	80023bc <addRemainingDataToCurrentBuf>

    /* Remove unfinished line from xmodemBuf and place it to remaining data */
    cutBuf();
 80022f8:	f000 f8aa 	bl	8002450 <cutBuf>

    /* Move data to flash */
    uint8_t flashHexCode = flashHex(xmodemBuf, xmodemBufSize);
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <xmodem_handle_packet+0x114>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	480e      	ldr	r0, [pc, #56]	; (800233c <xmodem_handle_packet+0x10c>)
 8002304:	f7fe fe7a 	bl	8000ffc <flashHex>
 8002308:	4603      	mov	r3, r0
 800230a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
    if (flashHexCode == 0)
 800230e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <xmodem_handle_packet+0xea>
    	return X_ERROR_FLASH;
 8002316:	2308      	movs	r3, #8
 8002318:	e00c      	b.n	8002334 <xmodem_handle_packet+0x104>
    if (flashHexCode == 2)
 800231a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800231e:	2b02      	cmp	r3, #2
 8002320:	d101      	bne.n	8002326 <xmodem_handle_packet+0xf6>
    	return X_WRONG_FIRMWARE;
 8002322:	2378      	movs	r3, #120	; 0x78
 8002324:	e006      	b.n	8002334 <xmodem_handle_packet+0x104>

    xmodemPacketNumber++;
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <xmodem_handle_packet+0x110>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <xmodem_handle_packet+0x110>)
 8002330:	701a      	strb	r2, [r3, #0]
    return X_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3798      	adds	r7, #152	; 0x98
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000340 	.word	0x20000340
 8002340:	20000091 	.word	0x20000091
 8002344:	20000440 	.word	0x20000440

08002348 <xmodem_error_handler>:
 *          Raises the error counter, then if the number of the errors reached critical, do a graceful abort, otherwise send a NAK.
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	70fb      	strb	r3, [r7, #3]
	xmodem_status status = X_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
	/* Raise the error counter. */
	(*error_number)++;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	701a      	strb	r2, [r3, #0]
	/* If the counter reached the max value, then abort. */
	if ((*error_number) >= max_error_number) {
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	429a      	cmp	r2, r3
 800236c:	d808      	bhi.n	8002380 <xmodem_error_handler+0x38>
		/* Graceful abort. */
		uartTransmitChar(X_CAN);
 800236e:	2018      	movs	r0, #24
 8002370:	f7ff fd94 	bl	8001e9c <uartTransmitChar>
		uartTransmitChar(X_CAN);
 8002374:	2018      	movs	r0, #24
 8002376:	f7ff fd91 	bl	8001e9c <uartTransmitChar>
		status = X_ERROR;
 800237a:	23ff      	movs	r3, #255	; 0xff
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	e004      	b.n	800238a <xmodem_error_handler+0x42>
	} else { // Otherwise send a NAK for a repeat.
		uartTransmitChar(X_NAK);
 8002380:	2015      	movs	r0, #21
 8002382:	f7ff fd8b 	bl	8001e9c <uartTransmitChar>
		status = X_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
	}
	if (xmodemPacketNumber == 1 && status == X_OK) {
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <xmodem_error_handler+0x68>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d108      	bne.n	80023a4 <xmodem_error_handler+0x5c>
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <xmodem_error_handler+0x5c>
		HAL_TIM_Base_Start_IT(&htim6);
 8002398:	4806      	ldr	r0, [pc, #24]	; (80023b4 <xmodem_error_handler+0x6c>)
 800239a:	f003 fa3d 	bl	8005818 <HAL_TIM_Base_Start_IT>
		timerWorking = 1;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <xmodem_error_handler+0x70>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000091 	.word	0x20000091
 80023b4:	200002a4 	.word	0x200002a4
 80023b8:	200004c6 	.word	0x200004c6

080023bc <addRemainingDataToCurrentBuf>:


void addRemainingDataToCurrentBuf(uint8_t* receivedData) {
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (remainingDataSize != 0) {
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <addRemainingDataToCurrentBuf+0x84>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d011      	beq.n	80023f0 <addRemainingDataToCurrentBuf+0x34>
		for (i = 0; i < remainingDataSize; i++) {
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e008      	b.n	80023e4 <addRemainingDataToCurrentBuf+0x28>
			xmodemBuf[i] = remainingDataBuf[i];
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	491b      	ldr	r1, [pc, #108]	; (8002444 <addRemainingDataToCurrentBuf+0x88>)
 80023d8:	5c89      	ldrb	r1, [r1, r2]
 80023da:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <addRemainingDataToCurrentBuf+0x8c>)
 80023dc:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < remainingDataSize; i++) {
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	3301      	adds	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	4b15      	ldr	r3, [pc, #84]	; (8002440 <addRemainingDataToCurrentBuf+0x84>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d3f0      	bcc.n	80023d2 <addRemainingDataToCurrentBuf+0x16>
		}
	}
	xmodemBufSize = remainingDataSize;
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <addRemainingDataToCurrentBuf+0x84>)
 80023f2:	881a      	ldrh	r2, [r3, #0]
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <addRemainingDataToCurrentBuf+0x90>)
 80023f6:	801a      	strh	r2, [r3, #0]
	remainingDataSize = 0;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <addRemainingDataToCurrentBuf+0x84>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	e00d      	b.n	8002420 <addRemainingDataToCurrentBuf+0x64>
		xmodemBuf[xmodemBufSize + i] = receivedData[i];
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	441a      	add	r2, r3
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <addRemainingDataToCurrentBuf+0x90>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	4619      	mov	r1, r3
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	440b      	add	r3, r1
 8002414:	7811      	ldrb	r1, [r2, #0]
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <addRemainingDataToCurrentBuf+0x8c>)
 8002418:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	3301      	adds	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002424:	2b00      	cmp	r3, #0
 8002426:	daed      	bge.n	8002404 <addRemainingDataToCurrentBuf+0x48>
	}
	xmodemBufSize += X_PACKET_128_SIZE;
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <addRemainingDataToCurrentBuf+0x90>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	3380      	adds	r3, #128	; 0x80
 800242e:	b29a      	uxth	r2, r3
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <addRemainingDataToCurrentBuf+0x90>)
 8002432:	801a      	strh	r2, [r3, #0]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	200004c4 	.word	0x200004c4
 8002444:	20000444 	.word	0x20000444
 8002448:	20000340 	.word	0x20000340
 800244c:	20000440 	.word	0x20000440

08002450 <cutBuf>:

void cutBuf() {
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t linePtr;

	for (i = xmodemBufSize - 1; i >= 0; i--) {
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <cutBuf+0x8c>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <cutBuf+0x90>)
 8002464:	5cd3      	ldrb	r3, [r2, r3]
 8002466:	2b0a      	cmp	r3, #10
 8002468:	d111      	bne.n	800248e <cutBuf+0x3e>
			linePtr = i;
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	71bb      	strb	r3, [r7, #6]
			break;
 800246e:	bf00      	nop
		}
	}
	remainingDataSize = xmodemBufSize - linePtr - 1;
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <cutBuf+0x8c>)
 8002472:	881a      	ldrh	r2, [r3, #0]
 8002474:	79bb      	ldrb	r3, [r7, #6]
 8002476:	b29b      	uxth	r3, r3
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <cutBuf+0x94>)
 8002482:	801a      	strh	r2, [r3, #0]
	if (remainingDataSize == 0) return;
 8002484:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <cutBuf+0x94>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d104      	bne.n	8002496 <cutBuf+0x46>
 800248c:	e020      	b.n	80024d0 <cutBuf+0x80>
	for (i = xmodemBufSize - 1; i >= 0; i--) {
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	3b01      	subs	r3, #1
 8002492:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002494:	e7e4      	b.n	8002460 <cutBuf+0x10>
	xmodemBufSize -= remainingDataSize;
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <cutBuf+0x8c>)
 8002498:	881a      	ldrh	r2, [r3, #0]
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <cutBuf+0x94>)
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <cutBuf+0x8c>)
 80024a4:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < remainingDataSize; i++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	71fb      	strb	r3, [r7, #7]
 80024aa:	e00b      	b.n	80024c4 <cutBuf+0x74>
		remainingDataBuf[i] = xmodemBuf[(linePtr + 1) + i];
 80024ac:	79bb      	ldrb	r3, [r7, #6]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	441a      	add	r2, r3
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	490a      	ldr	r1, [pc, #40]	; (80024e0 <cutBuf+0x90>)
 80024b8:	5c89      	ldrb	r1, [r1, r2]
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <cutBuf+0x98>)
 80024bc:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < remainingDataSize; i++) {
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	3301      	adds	r3, #1
 80024c2:	71fb      	strb	r3, [r7, #7]
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <cutBuf+0x94>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d3ed      	bcc.n	80024ac <cutBuf+0x5c>
	}
}
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000440 	.word	0x20000440
 80024e0:	20000340 	.word	0x20000340
 80024e4:	200004c4 	.word	0x200004c4
 80024e8:	20000444 	.word	0x20000444

080024ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f0:	480d      	ldr	r0, [pc, #52]	; (8002528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024f2:	490e      	ldr	r1, [pc, #56]	; (800252c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024f4:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002508:	4c0b      	ldr	r4, [pc, #44]	; (8002538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002516:	f7ff fb47 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800251a:	f00e ffeb 	bl	80114f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251e:	f7fe ff5f 	bl	80013e0 <main>
  bx  lr    
 8002522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002524:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800252c:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8002530:	08015a84 	.word	0x08015a84
  ldr r2, =_sbss
 8002534:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8002538:	2000819c 	.word	0x2000819c

0800253c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800253c:	e7fe      	b.n	800253c <ADC_IRQHandler>

0800253e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <LAN8742_RegisterBusIO+0x28>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <LAN8742_RegisterBusIO+0x28>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <LAN8742_RegisterBusIO+0x28>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	e014      	b.n	8002596 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d17c      	bne.n	80026bc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e01c      	b.n	8002616 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f107 0208 	add.w	r2, r7, #8
 80025e4:	2112      	movs	r1, #18
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	4798      	blx	r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	da03      	bge.n	80025f8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80025f0:	f06f 0304 	mvn.w	r3, #4
 80025f4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80025f6:	e00b      	b.n	8002610 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	d105      	bne.n	8002610 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
         break;
 800260e:	e005      	b.n	800261c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3301      	adds	r3, #1
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b1f      	cmp	r3, #31
 800261a:	d9df      	bls.n	80025dc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b1f      	cmp	r3, #31
 8002622:	d902      	bls.n	800262a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002624:	f06f 0302 	mvn.w	r3, #2
 8002628:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d145      	bne.n	80026bc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6810      	ldr	r0, [r2, #0]
 8002638:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800263c:	2100      	movs	r1, #0
 800263e:	4798      	blx	r3
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	db37      	blt.n	80026b6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6810      	ldr	r0, [r2, #0]
 800264e:	f107 0208 	add.w	r2, r7, #8
 8002652:	2100      	movs	r1, #0
 8002654:	4798      	blx	r3
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	db28      	blt.n	80026ae <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4798      	blx	r3
 8002662:	4603      	mov	r3, r0
 8002664:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002666:	e01c      	b.n	80026a2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4798      	blx	r3
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800267a:	d80e      	bhi.n	800269a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6810      	ldr	r0, [r2, #0]
 8002684:	f107 0208 	add.w	r2, r7, #8
 8002688:	2100      	movs	r1, #0
 800268a:	4798      	blx	r3
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	da07      	bge.n	80026a2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002692:	f06f 0304 	mvn.w	r3, #4
 8002696:	613b      	str	r3, [r7, #16]
                 break;
 8002698:	e010      	b.n	80026bc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800269a:	f06f 0301 	mvn.w	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
               break;
 80026a0:	e00c      	b.n	80026bc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1dd      	bne.n	8002668 <LAN8742_Init+0xc6>
 80026ac:	e006      	b.n	80026bc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80026ae:	f06f 0304 	mvn.w	r3, #4
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e002      	b.n	80026bc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80026b6:	f06f 0303 	mvn.w	r3, #3
 80026ba:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d112      	bne.n	80026e8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	4798      	blx	r3
 80026c8:	4603      	mov	r3, r0
 80026ca:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80026cc:	bf00      	nop
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	4798      	blx	r3
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80026e0:	d9f5      	bls.n	80026ce <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80026e8:	693b      	ldr	r3, [r7, #16]
 }
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6810      	ldr	r0, [r2, #0]
 8002706:	f107 020c 	add.w	r2, r7, #12
 800270a:	2101      	movs	r1, #1
 800270c:	4798      	blx	r3
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	da02      	bge.n	800271a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002714:	f06f 0304 	mvn.w	r3, #4
 8002718:	e06e      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6810      	ldr	r0, [r2, #0]
 8002722:	f107 020c 	add.w	r2, r7, #12
 8002726:	2101      	movs	r1, #1
 8002728:	4798      	blx	r3
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	da02      	bge.n	8002736 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002730:	f06f 0304 	mvn.w	r3, #4
 8002734:	e060      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002740:	2301      	movs	r3, #1
 8002742:	e059      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6810      	ldr	r0, [r2, #0]
 800274c:	f107 020c 	add.w	r2, r7, #12
 8002750:	2100      	movs	r1, #0
 8002752:	4798      	blx	r3
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	da02      	bge.n	8002760 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800275a:	f06f 0304 	mvn.w	r3, #4
 800275e:	e04b      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11b      	bne.n	80027a2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <LAN8742_GetLinkState+0x90>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800277e:	2302      	movs	r3, #2
 8002780:	e03a      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800278c:	2303      	movs	r3, #3
 800278e:	e033      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800279a:	2304      	movs	r3, #4
 800279c:	e02c      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800279e:	2305      	movs	r3, #5
 80027a0:	e02a      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6810      	ldr	r0, [r2, #0]
 80027aa:	f107 020c 	add.w	r2, r7, #12
 80027ae:	211f      	movs	r1, #31
 80027b0:	4798      	blx	r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	da02      	bge.n	80027be <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80027b8:	f06f 0304 	mvn.w	r3, #4
 80027bc:	e01c      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80027c8:	2306      	movs	r3, #6
 80027ca:	e015      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 031c 	and.w	r3, r3, #28
 80027d2:	2b18      	cmp	r3, #24
 80027d4:	d101      	bne.n	80027da <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80027d6:	2302      	movs	r3, #2
 80027d8:	e00e      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 031c 	and.w	r3, r3, #28
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d101      	bne.n	80027e8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e007      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 031c 	and.w	r3, r3, #28
 80027ee:	2b14      	cmp	r3, #20
 80027f0:	d101      	bne.n	80027f6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80027f2:	2304      	movs	r3, #4
 80027f4:	e000      	b.n	80027f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80027f6:	2305      	movs	r3, #5
    }				
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <HAL_Init+0x40>)
 800280a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_Init+0x40>)
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a07      	ldr	r2, [pc, #28]	; (8002840 <HAL_Init+0x40>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f000 f9a7 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282e:	200f      	movs	r0, #15
 8002830:	f000 f83c 	bl	80028ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002834:	f7ff f87e 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023c00 	.word	0x40023c00

08002844 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_DeInit+0x54>)
 800284a:	f04f 32ff 	mov.w	r2, #4294967295
 800284e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_DeInit+0x54>)
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_DeInit+0x54>)
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_DeInit+0x54>)
 8002860:	2200      	movs	r2, #0
 8002862:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_DeInit+0x54>)
 8002866:	f04f 32ff 	mov.w	r2, #4294967295
 800286a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_DeInit+0x54>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_DeInit+0x54>)
 8002874:	f04f 32ff 	mov.w	r2, #4294967295
 8002878:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_DeInit+0x54>)
 800287c:	2200      	movs	r2, #0
 800287e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_DeInit+0x54>)
 8002882:	f04f 32ff 	mov.w	r2, #4294967295
 8002886:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_DeInit+0x54>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800288e:	f000 f805 	bl	800289c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40023800 	.word	0x40023800

0800289c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_InitTick+0x54>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_InitTick+0x58>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f999 	bl	8002c02 <HAL_SYSTICK_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00e      	b.n	80028f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b0f      	cmp	r3, #15
 80028de:	d80a      	bhi.n	80028f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e0:	2200      	movs	r2, #0
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f000 f953 	bl	8002b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <HAL_InitTick+0x5c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	2000008c 	.word	0x2000008c
 8002904:	20000098 	.word	0x20000098
 8002908:	20000094 	.word	0x20000094

0800290c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_IncTick+0x20>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_IncTick+0x24>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4413      	add	r3, r2
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_IncTick+0x24>)
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000098 	.word	0x20000098
 8002930:	200004c8 	.word	0x200004c8

08002934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return uwTick;
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_GetTick+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200004c8 	.word	0x200004c8

0800294c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff ffee 	bl	8002934 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d005      	beq.n	8002972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_Delay+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002972:	bf00      	nop
 8002974:	f7ff ffde 	bl	8002934 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d8f7      	bhi.n	8002974 <HAL_Delay+0x28>
  {
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000098 	.word	0x20000098

08002994 <__NVIC_SetPriorityGrouping>:
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c6:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	60d3      	str	r3, [r2, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_GetPriorityGrouping>:
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <__NVIC_GetPriorityGrouping+0x18>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	f003 0307 	and.w	r3, r3, #7
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_EnableIRQ>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db0b      	blt.n	8002a22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	4907      	ldr	r1, [pc, #28]	; (8002a30 <__NVIC_EnableIRQ+0x38>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2001      	movs	r0, #1
 8002a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000e100 	.word	0xe000e100

08002a34 <__NVIC_DisableIRQ>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db12      	blt.n	8002a6c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	490a      	ldr	r1, [pc, #40]	; (8002a78 <__NVIC_DisableIRQ+0x44>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2001      	movs	r0, #1
 8002a56:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5a:	3320      	adds	r3, #32
 8002a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a60:	f3bf 8f4f 	dsb	sy
}
 8002a64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a66:	f3bf 8f6f 	isb	sy
}
 8002a6a:	bf00      	nop
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b48:	d301      	bcc.n	8002b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <SysTick_Config+0x40>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b56:	210f      	movs	r1, #15
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f7ff ff8e 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <SysTick_Config+0x40>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SysTick_Config+0x40>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff05 	bl	8002994 <__NVIC_SetPriorityGrouping>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba4:	f7ff ff1a 	bl	80029dc <__NVIC_GetPriorityGrouping>
 8002ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	6978      	ldr	r0, [r7, #20]
 8002bb0:	f7ff ff8e 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff5d 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff0d 	bl	80029f8 <__NVIC_EnableIRQ>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff1d 	bl	8002a34 <__NVIC_DisableIRQ>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ff94 	bl	8002b38 <SysTick_Config>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff fe84 	bl	8002934 <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d008      	beq.n	8002c4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e052      	b.n	8002cf2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0216 	bic.w	r2, r2, #22
 8002c5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <HAL_DMA_Abort+0x62>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0208 	bic.w	r2, r2, #8
 8002c8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c9c:	e013      	b.n	8002cc6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c9e:	f7ff fe49 	bl	8002934 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d90c      	bls.n	8002cc6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e015      	b.n	8002cf2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e4      	bne.n	8002c9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	223f      	movs	r2, #63	; 0x3f
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d004      	beq.n	8002d18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e00c      	b.n	8002d32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2205      	movs	r2, #5
 8002d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e06c      	b.n	8002e44 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d106      	bne.n	8002d82 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2223      	movs	r2, #35	; 0x23
 8002d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f004 fbed 	bl	800755c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <HAL_ETH_Init+0xf4>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a30      	ldr	r2, [pc, #192]	; (8002e4c <HAL_ETH_Init+0xf4>)
 8002d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b2e      	ldr	r3, [pc, #184]	; (8002e4c <HAL_ETH_Init+0xf4>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d9e:	4b2c      	ldr	r3, [pc, #176]	; (8002e50 <HAL_ETH_Init+0xf8>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a2b      	ldr	r2, [pc, #172]	; (8002e50 <HAL_ETH_Init+0xf8>)
 8002da4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002da8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002daa:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_ETH_Init+0xf8>)
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4927      	ldr	r1, [pc, #156]	; (8002e50 <HAL_ETH_Init+0xf8>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_ETH_Init+0xf8>)
 8002dba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd4:	f7ff fdae 	bl	8002934 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002dda:	e011      	b.n	8002e00 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ddc:	f7ff fdaa 	bl	8002934 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dea:	d909      	bls.n	8002e00 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2204      	movs	r2, #4
 8002df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	22e0      	movs	r2, #224	; 0xe0
 8002df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e021      	b.n	8002e44 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e4      	bne.n	8002ddc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fee4 	bl	8003be0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 ff8b 	bl	8003d34 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 ffe1 	bl	8003de6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 ff49 	bl	8003cc4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40013800 	.word	0x40013800

08002e54 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d150      	bne.n	8002f08 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2223      	movs	r2, #35	; 0x23
 8002e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2204      	movs	r2, #4
 8002e72:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f9fd 	bl	8003274 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0208 	orr.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7ff fd5a 	bl	800294c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0204 	orr.w	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7ff fd47 	bl	800294c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fd2a 	bl	8003920 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ede:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ee2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	f043 0302 	orr.w	r3, r3, #2
 8002ef6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002efa:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2223      	movs	r2, #35	; 0x23
 8002f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f20:	2b23      	cmp	r3, #35	; 0x23
 8002f22:	d14a      	bne.n	8002fba <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2223      	movs	r2, #35	; 0x23
 8002f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f42:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	f023 0302 	bic.w	r3, r3, #2
 8002f56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f5a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f74:	2001      	movs	r0, #1
 8002f76:	f7ff fce9 	bl	800294c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fccc 	bl	8003920 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0208 	bic.w	r2, r2, #8
 8002f96:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f7ff fcd3 	bl	800294c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e000      	b.n	8002fbc <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
  }
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07c      	b.n	80030e4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff0:	2b23      	cmp	r3, #35	; 0x23
 8002ff2:	d176      	bne.n	80030e2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 ff61 	bl	8003ec0 <ETH_Prepare_Tx_Descriptors>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f043 0202 	orr.w	r2, r3, #2
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e065      	b.n	80030e4 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8003018:	f3bf 8f4f 	dsb	sy
}
 800301c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3206      	adds	r2, #6
 8003026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	2b03      	cmp	r3, #3
 800303c:	d904      	bls.n	8003048 <HAL_ETH_Transmit+0x84>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	1f1a      	subs	r2, r3, #4
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3106      	adds	r1, #6
 8003054:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003058:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800305c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800305e:	f7ff fc69 	bl	8002934 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003064:	e037      	b.n	80030d6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d011      	beq.n	800309c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f043 0208 	orr.w	r2, r3, #8
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e023      	b.n	80030e4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d018      	beq.n	80030d6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7ff fc46 	bl	8002934 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <HAL_ETH_Transmit+0xf6>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10d      	bne.n	80030d6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f043 0204 	orr.w	r2, r3, #4
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80030d0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e006      	b.n	80030e4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	dbc3      	blt.n	8003066 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0a8      	b.n	800326a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311e:	2b23      	cmp	r3, #35	; 0x23
 8003120:	d001      	beq.n	8003126 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0a1      	b.n	800326a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	3212      	adds	r2, #18
 8003132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003136:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313c:	f1c3 0304 	rsb	r3, r3, #4
 8003140:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003142:	e06a      	b.n	800321a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	699a      	ldr	r2, [r3, #24]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003168:	2b00      	cmp	r3, #0
 800316a:	d103      	bne.n	8003174 <HAL_ETH_ReadData+0x88>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d040      	beq.n	80031f6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	0c1b      	lsrs	r3, r3, #16
 80031a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80031a8:	3b04      	subs	r3, #4
 80031aa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80031d0:	461a      	mov	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f004 fb8b 	bl	80078f0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	441a      	add	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2200      	movs	r2, #0
 80031f4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3301      	adds	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d902      	bls.n	8003208 <HAL_ETH_ReadData+0x11c>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3b04      	subs	r3, #4
 8003206:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	3212      	adds	r2, #18
 800320e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003212:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	3301      	adds	r3, #1
 8003218:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db06      	blt.n	8003230 <HAL_ETH_ReadData+0x144>
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	d202      	bcs.n	8003230 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d089      	beq.n	8003144 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	441a      	add	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f815 	bl	8003274 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	e000      	b.n	800326a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003280:	2301      	movs	r3, #1
 8003282:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003288:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	3212      	adds	r2, #18
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800329c:	e040      	b.n	8003320 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d112      	bne.n	80032cc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80032a6:	f107 030c 	add.w	r3, r7, #12
 80032aa:	4618      	mov	r0, r3
 80032ac:	f004 faf0 	bl	8007890 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	74fb      	strb	r3, [r7, #19]
 80032ba:	e007      	b.n	80032cc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	461a      	mov	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	461a      	mov	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d026      	beq.n	8003320 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d103      	bne.n	80032e2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <ETH_UpdateDescriptor+0xe4>)
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	e003      	b.n	80032ea <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80032e8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80032ea:	f3bf 8f5f 	dmb	sy
}
 80032ee:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3301      	adds	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d902      	bls.n	800330e <ETH_UpdateDescriptor+0x9a>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3b04      	subs	r3, #4
 800330c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	3212      	adds	r2, #18
 8003314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003318:	617b      	str	r3, [r7, #20]
      desccount--;
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	3b01      	subs	r3, #1
 800331e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <ETH_UpdateDescriptor+0xb8>
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1b8      	bne.n	800329e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	429a      	cmp	r2, r3
 8003334:	d00c      	beq.n	8003350 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800333e:	461a      	mov	r2, r3
 8003340:	2300      	movs	r3, #0
 8003342:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003350:	bf00      	nop
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	800045f8 	.word	0x800045f8

0800335c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d112      	bne.n	800339c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d109      	bne.n	800339c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003390:	461a      	mov	r2, r3
 8003392:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <HAL_ETH_IRQHandler+0x178>)
 8003394:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8ac 	bl	80034f4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d113      	bne.n	80033d6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d10a      	bne.n	80033d6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c8:	461a      	mov	r2, r3
 80033ca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80033ce:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f885 	bl	80034e0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e8:	d14c      	bne.n	8003484 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fc:	d142      	bne.n	8003484 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	f043 0208 	orr.w	r2, r3, #8
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800341c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003420:	d11a      	bne.n	8003458 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_ETH_IRQHandler+0x17c>)
 800342e:	4013      	ands	r3, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003448:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800344c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	22e0      	movs	r2, #224	; 0xe0
 8003452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003456:	e012      	b.n	800347e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	f248 6380 	movw	r3, #34432	; 0x8680
 8003466:	4013      	ands	r3, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003476:	461a      	mov	r2, r3
 8003478:	f248 6380 	movw	r3, #34432	; 0x8680
 800347c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f842 	bl	8003508 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b08      	cmp	r3, #8
 8003490:	d10e      	bne.n	80034b0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f83a 	bl	800351c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_ETH_IRQHandler+0x180>)
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d006      	beq.n	80034ca <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80034bc:	4b07      	ldr	r3, [pc, #28]	; (80034dc <HAL_ETH_IRQHandler+0x180>)
 80034be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034c2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f833 	bl	8003530 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	00010040 	.word	0x00010040
 80034d8:	007e2000 	.word	0x007e2000
 80034dc:	40013c00 	.word	0x40013c00

080034e0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 031c 	and.w	r3, r3, #28
 8003560:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	02db      	lsls	r3, r3, #11
 8003566:	b29b      	uxth	r3, r3
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	019b      	lsls	r3, r3, #6
 8003572:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f023 0302 	bic.w	r3, r3, #2
 8003582:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003594:	f7ff f9ce 	bl	8002934 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800359a:	e00d      	b.n	80035b8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800359c:	f7ff f9ca 	bl	8002934 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035aa:	d301      	bcc.n	80035b0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e010      	b.n	80035d2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ec      	bne.n	800359c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 031c 	and.w	r3, r3, #28
 80035f6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	02db      	lsls	r3, r3, #11
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	019b      	lsls	r3, r3, #6
 8003608:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003634:	f7ff f97e 	bl	8002934 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800363a:	e00d      	b.n	8003658 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800363c:	f7ff f97a 	bl	8002934 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364a:	d301      	bcc.n	8003650 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e009      	b.n	8003664 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1ec      	bne.n	800363c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0d9      	b.n	8003834 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf14      	ite	ne
 800368e:	2301      	movne	r3, #1
 8003690:	2300      	moveq	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf14      	ite	ne
 80036d4:	2301      	movne	r3, #1
 80036d6:	2300      	moveq	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bf0c      	ite	eq
 80036ee:	2301      	moveq	r3, #1
 80036f0:	2300      	movne	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	bf14      	ite	ne
 8003772:	2301      	movne	r3, #1
 8003774:	2300      	moveq	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	0c1b      	lsrs	r3, r3, #16
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e00b      	b.n	800386c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385a:	2b10      	cmp	r3, #16
 800385c:	d105      	bne.n	800386a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800385e:	6839      	ldr	r1, [r7, #0]
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f883 	bl	800396c <ETH_SetMACConfig>

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 031c 	bic.w	r3, r3, #28
 800388a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800388c:	f001 fe48 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 8003890:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <HAL_ETH_SetMDIOClockRange+0x98>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d908      	bls.n	80038ac <HAL_ETH_SetMDIOClockRange+0x38>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d804      	bhi.n	80038ac <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f043 0308 	orr.w	r3, r3, #8
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	e027      	b.n	80038fc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d908      	bls.n	80038c6 <HAL_ETH_SetMDIOClockRange+0x52>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d204      	bcs.n	80038c6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f043 030c 	orr.w	r3, r3, #12
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e01a      	b.n	80038fc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4a12      	ldr	r2, [pc, #72]	; (8003914 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d303      	bcc.n	80038d6 <HAL_ETH_SetMDIOClockRange+0x62>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4a11      	ldr	r2, [pc, #68]	; (8003918 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d911      	bls.n	80038fa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d908      	bls.n	80038f0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d804      	bhi.n	80038f0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e005      	b.n	80038fc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f043 0310 	orr.w	r3, r3, #16
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e000      	b.n	80038fc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80038fa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	611a      	str	r2, [r3, #16]
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	01312cff 	.word	0x01312cff
 8003910:	02160ebf 	.word	0x02160ebf
 8003914:	03938700 	.word	0x03938700
 8003918:	05f5e0ff 	.word	0x05f5e0ff
 800391c:	08f0d17f 	.word	0x08f0d17f

08003920 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800393e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003942:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003950:	2001      	movs	r0, #1
 8003952:	f7fe fffb 	bl	800294c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003960:	6193      	str	r3, [r2, #24]
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <ETH_SetMACConfig+0x15c>)
 8003982:	4013      	ands	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	7c1b      	ldrb	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <ETH_SetMACConfig+0x28>
 800398e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003992:	e000      	b.n	8003996 <ETH_SetMACConfig+0x2a>
 8003994:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	7c5b      	ldrb	r3, [r3, #17]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <ETH_SetMACConfig+0x38>
 800399e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039a2:	e000      	b.n	80039a6 <ETH_SetMACConfig+0x3a>
 80039a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80039a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80039ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	7fdb      	ldrb	r3, [r3, #31]
 80039b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80039b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80039ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	7f92      	ldrb	r2, [r2, #30]
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	d102      	bne.n	80039ca <ETH_SetMACConfig+0x5e>
 80039c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039c8:	e000      	b.n	80039cc <ETH_SetMACConfig+0x60>
 80039ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80039cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	7f1b      	ldrb	r3, [r3, #28]
 80039d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80039d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80039da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	791b      	ldrb	r3, [r3, #4]
 80039e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80039e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80039ea:	2a00      	cmp	r2, #0
 80039ec:	d102      	bne.n	80039f4 <ETH_SetMACConfig+0x88>
 80039ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f2:	e000      	b.n	80039f6 <ETH_SetMACConfig+0x8a>
 80039f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80039f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	7bdb      	ldrb	r3, [r3, #15]
 80039fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80039fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003a04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a0c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a26:	2001      	movs	r0, #1
 8003a28:	f7fe ff90 	bl	800294c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003a42:	4013      	ands	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d101      	bne.n	8003a5a <ETH_SetMACConfig+0xee>
 8003a56:	2280      	movs	r2, #128	; 0x80
 8003a58:	e000      	b.n	8003a5c <ETH_SetMACConfig+0xf0>
 8003a5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a5c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003a62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003a6a:	2a01      	cmp	r2, #1
 8003a6c:	d101      	bne.n	8003a72 <ETH_SetMACConfig+0x106>
 8003a6e:	2208      	movs	r2, #8
 8003a70:	e000      	b.n	8003a74 <ETH_SetMACConfig+0x108>
 8003a72:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003a74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003a7c:	2a01      	cmp	r2, #1
 8003a7e:	d101      	bne.n	8003a84 <ETH_SetMACConfig+0x118>
 8003a80:	2204      	movs	r2, #4
 8003a82:	e000      	b.n	8003a86 <ETH_SetMACConfig+0x11a>
 8003a84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003a86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003a8e:	2a01      	cmp	r2, #1
 8003a90:	d101      	bne.n	8003a96 <ETH_SetMACConfig+0x12a>
 8003a92:	2202      	movs	r2, #2
 8003a94:	e000      	b.n	8003a98 <ETH_SetMACConfig+0x12c>
 8003a96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f7fe ff4b 	bl	800294c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	619a      	str	r2, [r3, #24]
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	ff20810f 	.word	0xff20810f

08003acc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <ETH_SetDMAConfig+0x110>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	7b1b      	ldrb	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <ETH_SetDMAConfig+0x2c>
 8003af2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003af6:	e000      	b.n	8003afa <ETH_SetDMAConfig+0x2e>
 8003af8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	7b5b      	ldrb	r3, [r3, #13]
 8003afe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b00:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	7f52      	ldrb	r2, [r2, #29]
 8003b06:	2a00      	cmp	r2, #0
 8003b08:	d102      	bne.n	8003b10 <ETH_SetDMAConfig+0x44>
 8003b0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b0e:	e000      	b.n	8003b12 <ETH_SetDMAConfig+0x46>
 8003b10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003b12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	7b9b      	ldrb	r3, [r3, #14]
 8003b18:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003b1a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003b20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	7f1b      	ldrb	r3, [r3, #28]
 8003b26:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003b28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	7f9b      	ldrb	r3, [r3, #30]
 8003b2e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003b30:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003b36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b3e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b40:	4313      	orrs	r3, r2
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b50:	461a      	mov	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7fe fef2 	bl	800294c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b70:	461a      	mov	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	791b      	ldrb	r3, [r3, #4]
 8003b7a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b80:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003b86:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003b8c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b94:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003b96:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003b9e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ba4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bb2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7fe fec3 	bl	800294c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	f8de3f23 	.word	0xf8de3f23

08003be0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b0a6      	sub	sp, #152	; 0x98
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003c42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003c54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c58:	4619      	mov	r1, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff fe86 	bl	800396c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003c64:	2301      	movs	r3, #1
 8003c66:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003c82:	2300      	movs	r3, #0
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c94:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ca0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003cb0:	f107 0308 	add.w	r3, r7, #8
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff ff08 	bl	8003acc <ETH_SetDMAConfig>
}
 8003cbc:	bf00      	nop
 8003cbe:	3798      	adds	r7, #152	; 0x98
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3305      	adds	r3, #5
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	3204      	adds	r2, #4
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <ETH_MACAddressConfig+0x68>)
 8003ce6:	4413      	add	r3, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3303      	adds	r3, #3
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	061a      	lsls	r2, r3, #24
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3301      	adds	r3, #1
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	7812      	ldrb	r2, [r2, #0]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <ETH_MACAddressConfig+0x6c>)
 8003d16:	4413      	add	r3, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	6013      	str	r3, [r2, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40028040 	.word	0x40028040
 8003d30:	40028044 	.word	0x40028044

08003d34 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e03e      	b.n	8003dc0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68d9      	ldr	r1, [r3, #12]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	440b      	add	r3, r1
 8003d52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	3206      	adds	r2, #6
 8003d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d80c      	bhi.n	8003da4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68d9      	ldr	r1, [r3, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	e004      	b.n	8003dae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d9bd      	bls.n	8003d42 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd8:	611a      	str	r2, [r3, #16]
}
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e046      	b.n	8003e82 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6919      	ldr	r1, [r3, #16]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	440b      	add	r3, r1
 8003e04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2200      	movs	r2, #0
 8003e22:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e30:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003e38:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	3212      	adds	r2, #18
 8003e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d80c      	bhi.n	8003e72 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6919      	ldr	r1, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	440b      	add	r3, r1
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	60da      	str	r2, [r3, #12]
 8003e70:	e004      	b.n	8003e7c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	461a      	mov	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d9b5      	bls.n	8003df4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb2:	60da      	str	r2, [r3, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b08d      	sub	sp, #52	; 0x34
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3318      	adds	r3, #24
 8003ed0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eea:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f02:	d007      	beq.n	8003f14 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	3304      	adds	r3, #4
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003f14:	2302      	movs	r3, #2
 8003f16:	e103      	b.n	8004120 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003f30:	f023 031f 	bic.w	r3, r3, #31
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	6852      	ldr	r2, [r2, #4]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003f9e:	f3bf 8f5f 	dmb	sy
}
 8003fa2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003fb0:	e084      	b.n	80040bc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e005      	b.n	8003fde <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d902      	bls.n	8003ff0 <ETH_Prepare_Tx_Descriptors+0x130>
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	3b04      	subs	r3, #4
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800400e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004012:	d007      	beq.n	8004024 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	3304      	adds	r3, #4
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d029      	beq.n	8004078 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800402c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004030:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004032:	2300      	movs	r3, #0
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
 8004036:	e019      	b.n	800406c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8004038:	f3bf 8f5f 	dmb	sy
}
 800403c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	3301      	adds	r3, #1
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	2b03      	cmp	r3, #3
 8004054:	d902      	bls.n	800405c <ETH_Prepare_Tx_Descriptors+0x19c>
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004058:	3b04      	subs	r3, #4
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004064:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	3301      	adds	r3, #1
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28
 800406c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	429a      	cmp	r2, r3
 8004072:	d3e1      	bcc.n	8004038 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8004074:	2302      	movs	r3, #2
 8004076:	e053      	b.n	8004120 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	3301      	adds	r3, #1
 800407c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004096:	f023 031f 	bic.w	r3, r3, #31
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	6852      	ldr	r2, [r2, #4]
 800409e:	431a      	orrs	r2, r3
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	3301      	adds	r3, #1
 80040a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80040aa:	f3bf 8f5f 	dmb	sy
}
 80040ae:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f47f af76 	bne.w	8003fb2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d006      	beq.n	80040da <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e005      	b.n	80040e6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040f6:	6979      	ldr	r1, [r7, #20]
 80040f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fa:	3304      	adds	r3, #4
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004106:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004108:	b672      	cpsid	i
}
 800410a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	4413      	add	r3, r2
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800411a:	b662      	cpsie	i
}
 800411c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3734      	adds	r7, #52	; 0x34
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_FLASH_Program+0xa0>)
 8004140:	7e1b      	ldrb	r3, [r3, #24]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_FLASH_Program+0x1e>
 8004146:	2302      	movs	r3, #2
 8004148:	e03b      	b.n	80041c2 <HAL_FLASH_Program+0x96>
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_FLASH_Program+0xa0>)
 800414c:	2201      	movs	r2, #1
 800414e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004150:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004154:	f000 f870 	bl	8004238 <FLASH_WaitForLastOperation>
 8004158:	4603      	mov	r3, r0
 800415a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d12b      	bne.n	80041ba <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004168:	783b      	ldrb	r3, [r7, #0]
 800416a:	4619      	mov	r1, r3
 800416c:	68b8      	ldr	r0, [r7, #8]
 800416e:	f000 f91b 	bl	80043a8 <FLASH_Program_Byte>
 8004172:	e016      	b.n	80041a2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800417a:	883b      	ldrh	r3, [r7, #0]
 800417c:	4619      	mov	r1, r3
 800417e:	68b8      	ldr	r0, [r7, #8]
 8004180:	f000 f8ee 	bl	8004360 <FLASH_Program_HalfWord>
 8004184:	e00d      	b.n	80041a2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d105      	bne.n	8004198 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4619      	mov	r1, r3
 8004190:	68b8      	ldr	r0, [r7, #8]
 8004192:	f000 f8c3 	bl	800431c <FLASH_Program_Word>
 8004196:	e004      	b.n	80041a2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800419c:	68b8      	ldr	r0, [r7, #8]
 800419e:	f000 f88b 	bl	80042b8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041a6:	f000 f847 	bl	8004238 <FLASH_WaitForLastOperation>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <HAL_FLASH_Program+0xa4>)
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <HAL_FLASH_Program+0xa4>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <HAL_FLASH_Program+0xa0>)
 80041bc:	2200      	movs	r2, #0
 80041be:	761a      	strb	r2, [r3, #24]
  
  return status;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	200004cc 	.word	0x200004cc
 80041d0:	40023c00 	.word	0x40023c00

080041d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_FLASH_Unlock+0x38>)
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	da0b      	bge.n	80041fe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <HAL_FLASH_Unlock+0x38>)
 80041e8:	4a09      	ldr	r2, [pc, #36]	; (8004210 <HAL_FLASH_Unlock+0x3c>)
 80041ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80041ec:	4b07      	ldr	r3, [pc, #28]	; (800420c <HAL_FLASH_Unlock+0x38>)
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <HAL_FLASH_Unlock+0x40>)
 80041f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_FLASH_Unlock+0x38>)
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da01      	bge.n	80041fe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80041fe:	79fb      	ldrb	r3, [r7, #7]
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	40023c00 	.word	0x40023c00
 8004210:	45670123 	.word	0x45670123
 8004214:	cdef89ab 	.word	0xcdef89ab

08004218 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_FLASH_Lock+0x1c>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	4a04      	ldr	r2, [pc, #16]	; (8004234 <HAL_FLASH_Lock+0x1c>)
 8004222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004226:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40023c00 	.word	0x40023c00

08004238 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004244:	4b1a      	ldr	r3, [pc, #104]	; (80042b0 <FLASH_WaitForLastOperation+0x78>)
 8004246:	2200      	movs	r2, #0
 8004248:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800424a:	f7fe fb73 	bl	8002934 <HAL_GetTick>
 800424e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004250:	e010      	b.n	8004274 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d00c      	beq.n	8004274 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <FLASH_WaitForLastOperation+0x38>
 8004260:	f7fe fb68 	bl	8002934 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	d201      	bcs.n	8004274 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e019      	b.n	80042a8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <FLASH_WaitForLastOperation+0x7c>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e8      	bne.n	8004252 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <FLASH_WaitForLastOperation+0x7c>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <FLASH_WaitForLastOperation+0x7c>)
 800428e:	2201      	movs	r2, #1
 8004290:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <FLASH_WaitForLastOperation+0x7c>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800429e:	f000 f8a5 	bl	80043ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
  
}  
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	200004cc 	.word	0x200004cc
 80042b4:	40023c00 	.word	0x40023c00

080042b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <FLASH_Program_DoubleWord+0x60>)
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	4a13      	ldr	r2, [pc, #76]	; (8004318 <FLASH_Program_DoubleWord+0x60>)
 80042ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80042d0:	4b11      	ldr	r3, [pc, #68]	; (8004318 <FLASH_Program_DoubleWord+0x60>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	4a10      	ldr	r2, [pc, #64]	; (8004318 <FLASH_Program_DoubleWord+0x60>)
 80042d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80042da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <FLASH_Program_DoubleWord+0x60>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	4a0d      	ldr	r2, [pc, #52]	; (8004318 <FLASH_Program_DoubleWord+0x60>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80042ee:	f3bf 8f6f 	isb	sy
}
 80042f2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80042f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	000a      	movs	r2, r1
 8004302:	2300      	movs	r3, #0
 8004304:	68f9      	ldr	r1, [r7, #12]
 8004306:	3104      	adds	r1, #4
 8004308:	4613      	mov	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40023c00 	.word	0x40023c00

0800431c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <FLASH_Program_Word+0x40>)
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	4a0c      	ldr	r2, [pc, #48]	; (800435c <FLASH_Program_Word+0x40>)
 800432c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004330:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <FLASH_Program_Word+0x40>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <FLASH_Program_Word+0x40>)
 8004338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800433e:	4b07      	ldr	r3, [pc, #28]	; (800435c <FLASH_Program_Word+0x40>)
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	4a06      	ldr	r2, [pc, #24]	; (800435c <FLASH_Program_Word+0x40>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	601a      	str	r2, [r3, #0]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40023c00 	.word	0x40023c00

08004360 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <FLASH_Program_HalfWord+0x44>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <FLASH_Program_HalfWord+0x44>)
 8004372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004376:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <FLASH_Program_HalfWord+0x44>)
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <FLASH_Program_HalfWord+0x44>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <FLASH_Program_HalfWord+0x44>)
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	4a06      	ldr	r2, [pc, #24]	; (80043a4 <FLASH_Program_HalfWord+0x44>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	887a      	ldrh	r2, [r7, #2]
 8004394:	801a      	strh	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40023c00 	.word	0x40023c00

080043a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <FLASH_Program_Byte+0x40>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <FLASH_Program_Byte+0x40>)
 80043ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <FLASH_Program_Byte+0x40>)
 80043c2:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <FLASH_Program_Byte+0x40>)
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <FLASH_Program_Byte+0x40>)
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	4a06      	ldr	r2, [pc, #24]	; (80043e8 <FLASH_Program_Byte+0x40>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	701a      	strb	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40023c00 	.word	0x40023c00

080043ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80043f0:	4b2f      	ldr	r3, [pc, #188]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80043fc:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f043 0310 	orr.w	r3, r3, #16
 8004404:	4a2b      	ldr	r2, [pc, #172]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 8004406:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004408:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 800440a:	2210      	movs	r2, #16
 800440c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800440e:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800441a:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f043 0308 	orr.w	r3, r3, #8
 8004422:	4a24      	ldr	r2, [pc, #144]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 8004424:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004426:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 8004428:	2220      	movs	r2, #32
 800442a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800442c:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f043 0304 	orr.w	r3, r3, #4
 8004440:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 8004442:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004444:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 8004446:	2240      	movs	r2, #64	; 0x40
 8004448:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800444a:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f043 0302 	orr.w	r3, r3, #2
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 8004460:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004462:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 8004464:	2280      	movs	r2, #128	; 0x80
 8004466:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d009      	beq.n	8004488 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004474:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	4a0d      	ldr	r2, [pc, #52]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 800447e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 8004482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004486:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004494:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f043 0320 	orr.w	r3, r3, #32
 800449c:	4a05      	ldr	r2, [pc, #20]	; (80044b4 <FLASH_SetErrorCode+0xc8>)
 800449e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80044a0:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <FLASH_SetErrorCode+0xc4>)
 80044a2:	2202      	movs	r2, #2
 80044a4:	60da      	str	r2, [r3, #12]
  }
}
 80044a6:	bf00      	nop
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	40023c00 	.word	0x40023c00
 80044b4:	200004cc 	.word	0x200004cc

080044b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80044ca:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_FLASHEx_Erase+0xdc>)
 80044cc:	7e1b      	ldrb	r3, [r3, #24]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_FLASHEx_Erase+0x1e>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e05a      	b.n	800458c <HAL_FLASHEx_Erase+0xd4>
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_FLASHEx_Erase+0xdc>)
 80044d8:	2201      	movs	r2, #1
 80044da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044e0:	f7ff feaa 	bl	8004238 <FLASH_WaitForLastOperation>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d14a      	bne.n	8004584 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f04f 32ff 	mov.w	r2, #4294967295
 80044f4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d117      	bne.n	800452e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f000 f846 	bl	800459c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004510:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004514:	f7ff fe90 	bl	8004238 <FLASH_WaitForLastOperation>
 8004518:	4603      	mov	r3, r0
 800451a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <HAL_FLASHEx_Erase+0xe0>)
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <HAL_FLASHEx_Erase+0xe0>)
 8004522:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004526:	f023 0304 	bic.w	r3, r3, #4
 800452a:	6113      	str	r3, [r2, #16]
 800452c:	e028      	b.n	8004580 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	e01c      	b.n	8004570 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	4619      	mov	r1, r3
 800453e:	68b8      	ldr	r0, [r7, #8]
 8004540:	f000 f866 	bl	8004610 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004544:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004548:	f7ff fe76 	bl	8004238 <FLASH_WaitForLastOperation>
 800454c:	4603      	mov	r3, r0
 800454e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <HAL_FLASHEx_Erase+0xe0>)
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	4a10      	ldr	r2, [pc, #64]	; (8004598 <HAL_FLASHEx_Erase+0xe0>)
 8004556:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800455a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	601a      	str	r2, [r3, #0]
          break;
 8004568:	e00a      	b.n	8004580 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	3301      	adds	r3, #1
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4413      	add	r3, r2
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	d3da      	bcc.n	8004536 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004580:	f000 f894 	bl	80046ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <HAL_FLASHEx_Erase+0xdc>)
 8004586:	2200      	movs	r2, #0
 8004588:	761a      	strb	r2, [r3, #24]

  return status;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	200004cc 	.word	0x200004cc
 8004598:	40023c00 	.word	0x40023c00

0800459c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	6039      	str	r1, [r7, #0]
 80045a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80045a8:	4b18      	ldr	r3, [pc, #96]	; (800460c <FLASH_MassErase+0x70>)
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	4a17      	ldr	r2, [pc, #92]	; (800460c <FLASH_MassErase+0x70>)
 80045ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b2:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d108      	bne.n	80045cc <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80045ba:	4b14      	ldr	r3, [pc, #80]	; (800460c <FLASH_MassErase+0x70>)
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	4a13      	ldr	r2, [pc, #76]	; (800460c <FLASH_MassErase+0x70>)
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	6113      	str	r3, [r2, #16]
 80045ca:	e00f      	b.n	80045ec <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d106      	bne.n	80045e0 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80045d2:	4b0e      	ldr	r3, [pc, #56]	; (800460c <FLASH_MassErase+0x70>)
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	4a0d      	ldr	r2, [pc, #52]	; (800460c <FLASH_MassErase+0x70>)
 80045d8:	f043 0304 	orr.w	r3, r3, #4
 80045dc:	6113      	str	r3, [r2, #16]
 80045de:	e005      	b.n	80045ec <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <FLASH_MassErase+0x70>)
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	4a09      	ldr	r2, [pc, #36]	; (800460c <FLASH_MassErase+0x70>)
 80045e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ea:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80045ec:	4b07      	ldr	r3, [pc, #28]	; (800460c <FLASH_MassErase+0x70>)
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	4313      	orrs	r3, r2
 80045f6:	4a05      	ldr	r2, [pc, #20]	; (800460c <FLASH_MassErase+0x70>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fc:	6113      	str	r3, [r2, #16]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40023c00 	.word	0x40023c00

08004610 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	e010      	b.n	800464e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d103      	bne.n	800463a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	e009      	b.n	800464e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d103      	bne.n	8004648 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e002      	b.n	800464e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004648:	f44f 7340 	mov.w	r3, #768	; 0x300
 800464c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b0b      	cmp	r3, #11
 8004652:	d902      	bls.n	800465a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <FLASH_Erase_Sector+0x98>)
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <FLASH_Erase_Sector+0x98>)
 8004660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004664:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <FLASH_Erase_Sector+0x98>)
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	490f      	ldr	r1, [pc, #60]	; (80046a8 <FLASH_Erase_Sector+0x98>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <FLASH_Erase_Sector+0x98>)
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <FLASH_Erase_Sector+0x98>)
 8004678:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800467c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <FLASH_Erase_Sector+0x98>)
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4313      	orrs	r3, r2
 8004688:	4a07      	ldr	r2, [pc, #28]	; (80046a8 <FLASH_Erase_Sector+0x98>)
 800468a:	f043 0302 	orr.w	r3, r3, #2
 800468e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <FLASH_Erase_Sector+0x98>)
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <FLASH_Erase_Sector+0x98>)
 8004696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469a:	6113      	str	r3, [r2, #16]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	40023c00 	.word	0x40023c00

080046ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d017      	beq.n	80046ec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80046bc:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80046c8:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a19      	ldr	r2, [pc, #100]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b17      	ldr	r3, [pc, #92]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a16      	ldr	r2, [pc, #88]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046e0:	4b14      	ldr	r3, [pc, #80]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a13      	ldr	r2, [pc, #76]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d017      	beq.n	8004728 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0d      	ldr	r2, [pc, #52]	; (8004734 <FLASH_FlushCaches+0x88>)
 80046fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004702:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <FLASH_FlushCaches+0x88>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <FLASH_FlushCaches+0x88>)
 800470a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b08      	ldr	r3, [pc, #32]	; (8004734 <FLASH_FlushCaches+0x88>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a07      	ldr	r2, [pc, #28]	; (8004734 <FLASH_FlushCaches+0x88>)
 8004716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800471a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <FLASH_FlushCaches+0x88>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <FLASH_FlushCaches+0x88>)
 8004722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004726:	6013      	str	r3, [r2, #0]
  }
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40023c00 	.word	0x40023c00

08004738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	; 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800474a:	2300      	movs	r3, #0
 800474c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e177      	b.n	8004a44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004754:	2201      	movs	r2, #1
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	429a      	cmp	r2, r3
 800476e:	f040 8166 	bne.w	8004a3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b01      	cmp	r3, #1
 800477c:	d005      	beq.n	800478a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004786:	2b02      	cmp	r3, #2
 8004788:	d130      	bne.n	80047ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	2203      	movs	r2, #3
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047c0:	2201      	movs	r2, #1
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 0201 	and.w	r2, r3, #1
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d017      	beq.n	8004828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	2203      	movs	r2, #3
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4013      	ands	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d123      	bne.n	800487c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	08da      	lsrs	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3208      	adds	r2, #8
 800483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	220f      	movs	r2, #15
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	08da      	lsrs	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3208      	adds	r2, #8
 8004876:	69b9      	ldr	r1, [r7, #24]
 8004878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2203      	movs	r2, #3
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0203 	and.w	r2, r3, #3
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80c0 	beq.w	8004a3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <HAL_GPIO_Init+0x324>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	4a65      	ldr	r2, [pc, #404]	; (8004a5c <HAL_GPIO_Init+0x324>)
 80048c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048cc:	6453      	str	r3, [r2, #68]	; 0x44
 80048ce:	4b63      	ldr	r3, [pc, #396]	; (8004a5c <HAL_GPIO_Init+0x324>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048da:	4a61      	ldr	r2, [pc, #388]	; (8004a60 <HAL_GPIO_Init+0x328>)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	3302      	adds	r3, #2
 80048e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	220f      	movs	r2, #15
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a58      	ldr	r2, [pc, #352]	; (8004a64 <HAL_GPIO_Init+0x32c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d037      	beq.n	8004976 <HAL_GPIO_Init+0x23e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a57      	ldr	r2, [pc, #348]	; (8004a68 <HAL_GPIO_Init+0x330>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d031      	beq.n	8004972 <HAL_GPIO_Init+0x23a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a56      	ldr	r2, [pc, #344]	; (8004a6c <HAL_GPIO_Init+0x334>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d02b      	beq.n	800496e <HAL_GPIO_Init+0x236>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a55      	ldr	r2, [pc, #340]	; (8004a70 <HAL_GPIO_Init+0x338>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d025      	beq.n	800496a <HAL_GPIO_Init+0x232>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a54      	ldr	r2, [pc, #336]	; (8004a74 <HAL_GPIO_Init+0x33c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01f      	beq.n	8004966 <HAL_GPIO_Init+0x22e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a53      	ldr	r2, [pc, #332]	; (8004a78 <HAL_GPIO_Init+0x340>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d019      	beq.n	8004962 <HAL_GPIO_Init+0x22a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a52      	ldr	r2, [pc, #328]	; (8004a7c <HAL_GPIO_Init+0x344>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_GPIO_Init+0x226>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a51      	ldr	r2, [pc, #324]	; (8004a80 <HAL_GPIO_Init+0x348>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00d      	beq.n	800495a <HAL_GPIO_Init+0x222>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a50      	ldr	r2, [pc, #320]	; (8004a84 <HAL_GPIO_Init+0x34c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <HAL_GPIO_Init+0x21e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a4f      	ldr	r2, [pc, #316]	; (8004a88 <HAL_GPIO_Init+0x350>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_GPIO_Init+0x21a>
 800494e:	2309      	movs	r3, #9
 8004950:	e012      	b.n	8004978 <HAL_GPIO_Init+0x240>
 8004952:	230a      	movs	r3, #10
 8004954:	e010      	b.n	8004978 <HAL_GPIO_Init+0x240>
 8004956:	2308      	movs	r3, #8
 8004958:	e00e      	b.n	8004978 <HAL_GPIO_Init+0x240>
 800495a:	2307      	movs	r3, #7
 800495c:	e00c      	b.n	8004978 <HAL_GPIO_Init+0x240>
 800495e:	2306      	movs	r3, #6
 8004960:	e00a      	b.n	8004978 <HAL_GPIO_Init+0x240>
 8004962:	2305      	movs	r3, #5
 8004964:	e008      	b.n	8004978 <HAL_GPIO_Init+0x240>
 8004966:	2304      	movs	r3, #4
 8004968:	e006      	b.n	8004978 <HAL_GPIO_Init+0x240>
 800496a:	2303      	movs	r3, #3
 800496c:	e004      	b.n	8004978 <HAL_GPIO_Init+0x240>
 800496e:	2302      	movs	r3, #2
 8004970:	e002      	b.n	8004978 <HAL_GPIO_Init+0x240>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_GPIO_Init+0x240>
 8004976:	2300      	movs	r3, #0
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	f002 0203 	and.w	r2, r2, #3
 800497e:	0092      	lsls	r2, r2, #2
 8004980:	4093      	lsls	r3, r2
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004988:	4935      	ldr	r1, [pc, #212]	; (8004a60 <HAL_GPIO_Init+0x328>)
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	089b      	lsrs	r3, r3, #2
 800498e:	3302      	adds	r3, #2
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004996:	4b3d      	ldr	r3, [pc, #244]	; (8004a8c <HAL_GPIO_Init+0x354>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	43db      	mvns	r3, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ba:	4a34      	ldr	r2, [pc, #208]	; (8004a8c <HAL_GPIO_Init+0x354>)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049c0:	4b32      	ldr	r3, [pc, #200]	; (8004a8c <HAL_GPIO_Init+0x354>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049e4:	4a29      	ldr	r2, [pc, #164]	; (8004a8c <HAL_GPIO_Init+0x354>)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049ea:	4b28      	ldr	r3, [pc, #160]	; (8004a8c <HAL_GPIO_Init+0x354>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <HAL_GPIO_Init+0x354>)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a14:	4b1d      	ldr	r3, [pc, #116]	; (8004a8c <HAL_GPIO_Init+0x354>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4013      	ands	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a38:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <HAL_GPIO_Init+0x354>)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3301      	adds	r3, #1
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	2b0f      	cmp	r3, #15
 8004a48:	f67f ae84 	bls.w	8004754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	3724      	adds	r7, #36	; 0x24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	40013800 	.word	0x40013800
 8004a64:	40020000 	.word	0x40020000
 8004a68:	40020400 	.word	0x40020400
 8004a6c:	40020800 	.word	0x40020800
 8004a70:	40020c00 	.word	0x40020c00
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40021400 	.word	0x40021400
 8004a7c:	40021800 	.word	0x40021800
 8004a80:	40021c00 	.word	0x40021c00
 8004a84:	40022000 	.word	0x40022000
 8004a88:	40022400 	.word	0x40022400
 8004a8c:	40013c00 	.word	0x40013c00

08004a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa0:	787b      	ldrb	r3, [r7, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004aac:	e003      	b.n	8004ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004aae:	887b      	ldrh	r3, [r7, #2]
 8004ab0:	041a      	lsls	r2, r3, #16
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	619a      	str	r2, [r3, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e034      	b.n	8004b3e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004adc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f245 5255 	movw	r2, #21845	; 0x5555
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6852      	ldr	r2, [r2, #4]
 8004af0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6892      	ldr	r2, [r2, #8]
 8004afa:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004afc:	f7fd ff1a 	bl	8002934 <HAL_GetTick>
 8004b00:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004b02:	e00f      	b.n	8004b24 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004b04:	f7fd ff16 	bl	8002934 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b31      	cmp	r3, #49	; 0x31
 8004b10:	d908      	bls.n	8004b24 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e00c      	b.n	8004b3e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e8      	bne.n	8004b04 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004b56:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	4a1f      	ldr	r2, [pc, #124]	; (8004bf8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6413      	str	r3, [r2, #64]	; 0x40
 8004b82:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_PWREx_EnableOverDrive+0x94>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b94:	f7fd fece 	bl	8002934 <HAL_GetTick>
 8004b98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b9a:	e009      	b.n	8004bb0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b9c:	f7fd feca 	bl	8002934 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004baa:	d901      	bls.n	8004bb0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e01f      	b.n	8004bf0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bb0:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbc:	d1ee      	bne.n	8004b9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bbe:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bc4:	f7fd feb6 	bl	8002934 <HAL_GetTick>
 8004bc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bca:	e009      	b.n	8004be0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bcc:	f7fd feb2 	bl	8002934 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bda:	d901      	bls.n	8004be0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e007      	b.n	8004bf0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bec:	d1ee      	bne.n	8004bcc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	420e0040 	.word	0x420e0040
 8004c00:	40007000 	.word	0x40007000
 8004c04:	420e0044 	.word	0x420e0044

08004c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e267      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d075      	beq.n	8004d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c26:	4b88      	ldr	r3, [pc, #544]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d00c      	beq.n	8004c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c32:	4b85      	ldr	r3, [pc, #532]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d112      	bne.n	8004c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3e:	4b82      	ldr	r3, [pc, #520]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4c:	4b7e      	ldr	r3, [pc, #504]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05b      	beq.n	8004d10 <HAL_RCC_OscConfig+0x108>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d157      	bne.n	8004d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e242      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCC_OscConfig+0x74>
 8004c6e:	4b76      	ldr	r3, [pc, #472]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a75      	ldr	r2, [pc, #468]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e01d      	b.n	8004cb8 <HAL_RCC_OscConfig+0xb0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x98>
 8004c86:	4b70      	ldr	r3, [pc, #448]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6f      	ldr	r2, [pc, #444]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b6d      	ldr	r3, [pc, #436]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6c      	ldr	r2, [pc, #432]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0xb0>
 8004ca0:	4b69      	ldr	r3, [pc, #420]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a68      	ldr	r2, [pc, #416]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	4b66      	ldr	r3, [pc, #408]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a65      	ldr	r2, [pc, #404]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d013      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fd fe38 	bl	8002934 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fd fe34 	bl	8002934 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	; 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e207      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	4b5b      	ldr	r3, [pc, #364]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xc0>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fe24 	bl	8002934 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fd fe20 	bl	8002934 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e1f3      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d02:	4b51      	ldr	r3, [pc, #324]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0xe8>
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d063      	beq.n	8004de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00b      	beq.n	8004d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d11c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d36:	4b44      	ldr	r3, [pc, #272]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d116      	bne.n	8004d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d42:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_RCC_OscConfig+0x152>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d001      	beq.n	8004d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e1c7      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4937      	ldr	r1, [pc, #220]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6e:	e03a      	b.n	8004de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d020      	beq.n	8004dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d78:	4b34      	ldr	r3, [pc, #208]	; (8004e4c <HAL_RCC_OscConfig+0x244>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7e:	f7fd fdd9 	bl	8002934 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d86:	f7fd fdd5 	bl	8002934 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e1a8      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d98:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da4:	4b28      	ldr	r3, [pc, #160]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4925      	ldr	r1, [pc, #148]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]
 8004db8:	e015      	b.n	8004de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCC_OscConfig+0x244>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fd fdb8 	bl	8002934 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc8:	f7fd fdb4 	bl	8002934 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e187      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d036      	beq.n	8004e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d016      	beq.n	8004e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <HAL_RCC_OscConfig+0x248>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fd fd98 	bl	8002934 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e08:	f7fd fd94 	bl	8002934 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e167      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0x200>
 8004e26:	e01b      	b.n	8004e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <HAL_RCC_OscConfig+0x248>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2e:	f7fd fd81 	bl	8002934 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e34:	e00e      	b.n	8004e54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e36:	f7fd fd7d 	bl	8002934 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d907      	bls.n	8004e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e150      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	42470000 	.word	0x42470000
 8004e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e54:	4b88      	ldr	r3, [pc, #544]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1ea      	bne.n	8004e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8097 	beq.w	8004f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e72:	4b81      	ldr	r3, [pc, #516]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	4b7d      	ldr	r3, [pc, #500]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	4a7c      	ldr	r2, [pc, #496]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8e:	4b7a      	ldr	r3, [pc, #488]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9e:	4b77      	ldr	r3, [pc, #476]	; (800507c <HAL_RCC_OscConfig+0x474>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d118      	bne.n	8004edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eaa:	4b74      	ldr	r3, [pc, #464]	; (800507c <HAL_RCC_OscConfig+0x474>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a73      	ldr	r2, [pc, #460]	; (800507c <HAL_RCC_OscConfig+0x474>)
 8004eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb6:	f7fd fd3d 	bl	8002934 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebe:	f7fd fd39 	bl	8002934 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e10c      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	4b6a      	ldr	r3, [pc, #424]	; (800507c <HAL_RCC_OscConfig+0x474>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x2ea>
 8004ee4:	4b64      	ldr	r3, [pc, #400]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	4a63      	ldr	r2, [pc, #396]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef0:	e01c      	b.n	8004f2c <HAL_RCC_OscConfig+0x324>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x30c>
 8004efa:	4b5f      	ldr	r3, [pc, #380]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	4a5e      	ldr	r2, [pc, #376]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	6713      	str	r3, [r2, #112]	; 0x70
 8004f06:	4b5c      	ldr	r3, [pc, #368]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4a5b      	ldr	r2, [pc, #364]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0x324>
 8004f14:	4b58      	ldr	r3, [pc, #352]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	4a57      	ldr	r2, [pc, #348]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f20:	4b55      	ldr	r3, [pc, #340]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	4a54      	ldr	r2, [pc, #336]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f26:	f023 0304 	bic.w	r3, r3, #4
 8004f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d015      	beq.n	8004f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fd fcfe 	bl	8002934 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f3c:	f7fd fcfa 	bl	8002934 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e0cb      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f52:	4b49      	ldr	r3, [pc, #292]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ee      	beq.n	8004f3c <HAL_RCC_OscConfig+0x334>
 8004f5e:	e014      	b.n	8004f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f60:	f7fd fce8 	bl	8002934 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f66:	e00a      	b.n	8004f7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fd fce4 	bl	8002934 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e0b5      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7e:	4b3e      	ldr	r3, [pc, #248]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1ee      	bne.n	8004f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f90:	4b39      	ldr	r3, [pc, #228]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	4a38      	ldr	r2, [pc, #224]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80a1 	beq.w	80050e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa6:	4b34      	ldr	r3, [pc, #208]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d05c      	beq.n	800506c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d141      	bne.n	800503e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fba:	4b31      	ldr	r3, [pc, #196]	; (8005080 <HAL_RCC_OscConfig+0x478>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fd fcb8 	bl	8002934 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc8:	f7fd fcb4 	bl	8002934 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e087      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	4b27      	ldr	r3, [pc, #156]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	019b      	lsls	r3, r3, #6
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	3b01      	subs	r3, #1
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	061b      	lsls	r3, r3, #24
 800500a:	491b      	ldr	r1, [pc, #108]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 800500c:	4313      	orrs	r3, r2
 800500e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005010:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCC_OscConfig+0x478>)
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005016:	f7fd fc8d 	bl	8002934 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501e:	f7fd fc89 	bl	8002934 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e05c      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005030:	4b11      	ldr	r3, [pc, #68]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x416>
 800503c:	e054      	b.n	80050e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <HAL_RCC_OscConfig+0x478>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd fc76 	bl	8002934 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fd fc72 	bl	8002934 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e045      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_RCC_OscConfig+0x470>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x444>
 800506a:	e03d      	b.n	80050e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d107      	bne.n	8005084 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e038      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
 8005078:	40023800 	.word	0x40023800
 800507c:	40007000 	.word	0x40007000
 8005080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005084:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <HAL_RCC_OscConfig+0x4ec>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d028      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d121      	bne.n	80050e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d11a      	bne.n	80050e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050b4:	4013      	ands	r3, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050bc:	4293      	cmp	r3, r2
 80050be:	d111      	bne.n	80050e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	3b01      	subs	r3, #1
 80050ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023800 	.word	0x40023800

080050f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0cc      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800510c:	4b68      	ldr	r3, [pc, #416]	; (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d90c      	bls.n	8005134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b65      	ldr	r3, [pc, #404]	; (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005122:	4b63      	ldr	r3, [pc, #396]	; (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d001      	beq.n	8005134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0b8      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d020      	beq.n	8005182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800514c:	4b59      	ldr	r3, [pc, #356]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	4a58      	ldr	r2, [pc, #352]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005164:	4b53      	ldr	r3, [pc, #332]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	4a52      	ldr	r2, [pc, #328]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800516e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005170:	4b50      	ldr	r3, [pc, #320]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	494d      	ldr	r1, [pc, #308]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d044      	beq.n	8005218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d107      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005196:	4b47      	ldr	r3, [pc, #284]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d119      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e07f      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d003      	beq.n	80051b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b6:	4b3f      	ldr	r3, [pc, #252]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e06f      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c6:	4b3b      	ldr	r3, [pc, #236]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e067      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d6:	4b37      	ldr	r3, [pc, #220]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 0203 	bic.w	r2, r3, #3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4934      	ldr	r1, [pc, #208]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e8:	f7fd fba4 	bl	8002934 <HAL_GetTick>
 80051ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f0:	f7fd fba0 	bl	8002934 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e04f      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005206:	4b2b      	ldr	r3, [pc, #172]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 020c 	and.w	r2, r3, #12
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	429a      	cmp	r2, r3
 8005216:	d1eb      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005218:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d20c      	bcs.n	8005240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005226:	4b22      	ldr	r3, [pc, #136]	; (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522e:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d001      	beq.n	8005240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e032      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800524c:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4916      	ldr	r1, [pc, #88]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	4313      	orrs	r3, r2
 800525c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	490e      	ldr	r1, [pc, #56]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800527e:	f000 f889 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005282:	4602      	mov	r2, r0
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	091b      	lsrs	r3, r3, #4
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	490a      	ldr	r1, [pc, #40]	; (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005290:	5ccb      	ldrb	r3, [r1, r3]
 8005292:	fa22 f303 	lsr.w	r3, r2, r3
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800529a:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <HAL_RCC_ClockConfig+0x1c8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fd fb04 	bl	80028ac <HAL_InitTick>

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40023c00 	.word	0x40023c00
 80052b4:	40023800 	.word	0x40023800
 80052b8:	08015724 	.word	0x08015724
 80052bc:	2000008c 	.word	0x2000008c
 80052c0:	20000094 	.word	0x20000094

080052c4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08c      	sub	sp, #48	; 0x30
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d129      	bne.n	800532a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <HAL_RCC_MCOConfig+0xc4>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	4a2a      	ldr	r2, [pc, #168]	; (8005388 <HAL_RCC_MCOConfig+0xc4>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6313      	str	r3, [r2, #48]	; 0x30
 80052e6:	4b28      	ldr	r3, [pc, #160]	; (8005388 <HAL_RCC_MCOConfig+0xc4>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80052f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f8:	2302      	movs	r3, #2
 80052fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fc:	2303      	movs	r3, #3
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005300:	2300      	movs	r3, #0
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005304:	2300      	movs	r3, #0
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005308:	f107 031c 	add.w	r3, r7, #28
 800530c:	4619      	mov	r1, r3
 800530e:	481f      	ldr	r0, [pc, #124]	; (800538c <HAL_RCC_MCOConfig+0xc8>)
 8005310:	f7ff fa12 	bl	8004738 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005314:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <HAL_RCC_MCOConfig+0xc4>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	430b      	orrs	r3, r1
 8005322:	4919      	ldr	r1, [pc, #100]	; (8005388 <HAL_RCC_MCOConfig+0xc4>)
 8005324:	4313      	orrs	r3, r2
 8005326:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005328:	e029      	b.n	800537e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	4b16      	ldr	r3, [pc, #88]	; (8005388 <HAL_RCC_MCOConfig+0xc4>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	4a15      	ldr	r2, [pc, #84]	; (8005388 <HAL_RCC_MCOConfig+0xc4>)
 8005334:	f043 0304 	orr.w	r3, r3, #4
 8005338:	6313      	str	r3, [r2, #48]	; 0x30
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <HAL_RCC_MCOConfig+0xc4>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800534a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534c:	2302      	movs	r3, #2
 800534e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005350:	2303      	movs	r3, #3
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005354:	2300      	movs	r3, #0
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005358:	2300      	movs	r3, #0
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800535c:	f107 031c 	add.w	r3, r7, #28
 8005360:	4619      	mov	r1, r3
 8005362:	480b      	ldr	r0, [pc, #44]	; (8005390 <HAL_RCC_MCOConfig+0xcc>)
 8005364:	f7ff f9e8 	bl	8004738 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005368:	4b07      	ldr	r3, [pc, #28]	; (8005388 <HAL_RCC_MCOConfig+0xc4>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	00d9      	lsls	r1, r3, #3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	430b      	orrs	r3, r1
 8005378:	4903      	ldr	r1, [pc, #12]	; (8005388 <HAL_RCC_MCOConfig+0xc4>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
}
 800537e:	bf00      	nop
 8005380:	3730      	adds	r7, #48	; 0x30
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40023800 	.word	0x40023800
 800538c:	40020000 	.word	0x40020000
 8005390:	40020800 	.word	0x40020800

08005394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005398:	b090      	sub	sp, #64	; 0x40
 800539a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
 80053a0:	2300      	movs	r3, #0
 80053a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a4:	2300      	movs	r3, #0
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053ac:	4b59      	ldr	r3, [pc, #356]	; (8005514 <HAL_RCC_GetSysClockFreq+0x180>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 030c 	and.w	r3, r3, #12
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d00d      	beq.n	80053d4 <HAL_RCC_GetSysClockFreq+0x40>
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	f200 80a1 	bhi.w	8005500 <HAL_RCC_GetSysClockFreq+0x16c>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_RCC_GetSysClockFreq+0x34>
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d003      	beq.n	80053ce <HAL_RCC_GetSysClockFreq+0x3a>
 80053c6:	e09b      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053c8:	4b53      	ldr	r3, [pc, #332]	; (8005518 <HAL_RCC_GetSysClockFreq+0x184>)
 80053ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80053cc:	e09b      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053ce:	4b53      	ldr	r3, [pc, #332]	; (800551c <HAL_RCC_GetSysClockFreq+0x188>)
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053d2:	e098      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053d4:	4b4f      	ldr	r3, [pc, #316]	; (8005514 <HAL_RCC_GetSysClockFreq+0x180>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053de:	4b4d      	ldr	r3, [pc, #308]	; (8005514 <HAL_RCC_GetSysClockFreq+0x180>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d028      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ea:	4b4a      	ldr	r3, [pc, #296]	; (8005514 <HAL_RCC_GetSysClockFreq+0x180>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	099b      	lsrs	r3, r3, #6
 80053f0:	2200      	movs	r2, #0
 80053f2:	623b      	str	r3, [r7, #32]
 80053f4:	627a      	str	r2, [r7, #36]	; 0x24
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053fc:	2100      	movs	r1, #0
 80053fe:	4b47      	ldr	r3, [pc, #284]	; (800551c <HAL_RCC_GetSysClockFreq+0x188>)
 8005400:	fb03 f201 	mul.w	r2, r3, r1
 8005404:	2300      	movs	r3, #0
 8005406:	fb00 f303 	mul.w	r3, r0, r3
 800540a:	4413      	add	r3, r2
 800540c:	4a43      	ldr	r2, [pc, #268]	; (800551c <HAL_RCC_GetSysClockFreq+0x188>)
 800540e:	fba0 1202 	umull	r1, r2, r0, r2
 8005412:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005414:	460a      	mov	r2, r1
 8005416:	62ba      	str	r2, [r7, #40]	; 0x28
 8005418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541a:	4413      	add	r3, r2
 800541c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005420:	2200      	movs	r2, #0
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	61fa      	str	r2, [r7, #28]
 8005426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800542a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800542e:	f7fa ff47 	bl	80002c0 <__aeabi_uldivmod>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4613      	mov	r3, r2
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543a:	e053      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800543c:	4b35      	ldr	r3, [pc, #212]	; (8005514 <HAL_RCC_GetSysClockFreq+0x180>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	099b      	lsrs	r3, r3, #6
 8005442:	2200      	movs	r2, #0
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	617a      	str	r2, [r7, #20]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800544e:	f04f 0b00 	mov.w	fp, #0
 8005452:	4652      	mov	r2, sl
 8005454:	465b      	mov	r3, fp
 8005456:	f04f 0000 	mov.w	r0, #0
 800545a:	f04f 0100 	mov.w	r1, #0
 800545e:	0159      	lsls	r1, r3, #5
 8005460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005464:	0150      	lsls	r0, r2, #5
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	ebb2 080a 	subs.w	r8, r2, sl
 800546e:	eb63 090b 	sbc.w	r9, r3, fp
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800547e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005482:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005486:	ebb2 0408 	subs.w	r4, r2, r8
 800548a:	eb63 0509 	sbc.w	r5, r3, r9
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	00eb      	lsls	r3, r5, #3
 8005498:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800549c:	00e2      	lsls	r2, r4, #3
 800549e:	4614      	mov	r4, r2
 80054a0:	461d      	mov	r5, r3
 80054a2:	eb14 030a 	adds.w	r3, r4, sl
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	eb45 030b 	adc.w	r3, r5, fp
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ba:	4629      	mov	r1, r5
 80054bc:	028b      	lsls	r3, r1, #10
 80054be:	4621      	mov	r1, r4
 80054c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054c4:	4621      	mov	r1, r4
 80054c6:	028a      	lsls	r2, r1, #10
 80054c8:	4610      	mov	r0, r2
 80054ca:	4619      	mov	r1, r3
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	2200      	movs	r2, #0
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	60fa      	str	r2, [r7, #12]
 80054d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054d8:	f7fa fef2 	bl	80002c0 <__aeabi_uldivmod>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4613      	mov	r3, r2
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_GetSysClockFreq+0x180>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	3301      	adds	r3, #1
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80054f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054fe:	e002      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetSysClockFreq+0x184>)
 8005502:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005508:	4618      	mov	r0, r3
 800550a:	3740      	adds	r7, #64	; 0x40
 800550c:	46bd      	mov	sp, r7
 800550e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005512:	bf00      	nop
 8005514:	40023800 	.word	0x40023800
 8005518:	00f42400 	.word	0x00f42400
 800551c:	017d7840 	.word	0x017d7840

08005520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <HAL_RCC_GetHCLKFreq+0x14>)
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	2000008c 	.word	0x2000008c

08005538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800553c:	f7ff fff0 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 8005540:	4602      	mov	r2, r0
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	0a9b      	lsrs	r3, r3, #10
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	4903      	ldr	r1, [pc, #12]	; (800555c <HAL_RCC_GetPCLK1Freq+0x24>)
 800554e:	5ccb      	ldrb	r3, [r1, r3]
 8005550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005554:	4618      	mov	r0, r3
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40023800 	.word	0x40023800
 800555c:	08015734 	.word	0x08015734

08005560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005564:	f7ff ffdc 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 8005568:	4602      	mov	r2, r0
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	0b5b      	lsrs	r3, r3, #13
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	4903      	ldr	r1, [pc, #12]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005576:	5ccb      	ldrb	r3, [r1, r3]
 8005578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800557c:	4618      	mov	r0, r3
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40023800 	.word	0x40023800
 8005584:	08015734 	.word	0x08015734

08005588 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800558e:	f7fd f9d1 	bl	8002934 <HAL_GetTick>
 8005592:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005594:	4b72      	ldr	r3, [pc, #456]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a71      	ldr	r2, [pc, #452]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a2:	f7fd f9c7 	bl	8002934 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e0d0      	b.n	8005756 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80055b4:	4b6a      	ldr	r3, [pc, #424]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80055c0:	4b67      	ldr	r3, [pc, #412]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a66      	ldr	r2, [pc, #408]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80055c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80055cc:	f7fd f9b2 	bl	8002934 <HAL_GetTick>
 80055d0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80055d2:	4b63      	ldr	r3, [pc, #396]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80055d8:	e00a      	b.n	80055f0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055da:	f7fd f9ab 	bl	8002934 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e0b2      	b.n	8005756 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80055f0:	4b5b      	ldr	r3, [pc, #364]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 030c 	and.w	r3, r3, #12
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ee      	bne.n	80055da <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80055fc:	f7fd f99a 	bl	8002934 <HAL_GetTick>
 8005600:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8005602:	4b57      	ldr	r3, [pc, #348]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a56      	ldr	r2, [pc, #344]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005608:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800560c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800560e:	e008      	b.n	8005622 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005610:	f7fd f990 	bl	8002934 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b64      	cmp	r3, #100	; 0x64
 800561c:	d901      	bls.n	8005622 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e099      	b.n	8005756 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005622:	4b4f      	ldr	r3, [pc, #316]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1f0      	bne.n	8005610 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800562e:	f7fd f981 	bl	8002934 <HAL_GetTick>
 8005632:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005634:	4b4a      	ldr	r3, [pc, #296]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a49      	ldr	r2, [pc, #292]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 800563a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800563e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005640:	e008      	b.n	8005654 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005642:	f7fd f977 	bl	8002934 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e080      	b.n	8005756 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005654:	4b42      	ldr	r3, [pc, #264]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f0      	bne.n	8005642 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005660:	f7fd f968 	bl	8002934 <HAL_GetTick>
 8005664:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8005666:	4b3e      	ldr	r3, [pc, #248]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a3d      	ldr	r2, [pc, #244]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 800566c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005670:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005674:	f7fd f95e 	bl	8002934 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e067      	b.n	8005756 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005686:	4b36      	ldr	r3, [pc, #216]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005692:	f7fd f94f 	bl	8002934 <HAL_GetTick>
 8005696:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8005698:	4b31      	ldr	r3, [pc, #196]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a30      	ldr	r2, [pc, #192]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 800569e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a2:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056a6:	f7fd f945 	bl	8002934 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e04e      	b.n	8005756 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80056b8:	4b29      	ldr	r3, [pc, #164]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f0      	bne.n	80056a6 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80056c4:	4b26      	ldr	r3, [pc, #152]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80056c6:	4a27      	ldr	r2, [pc, #156]	; (8005764 <HAL_RCC_DeInit+0x1dc>)
 80056c8:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80056ca:	4b25      	ldr	r3, [pc, #148]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80056cc:	4a26      	ldr	r2, [pc, #152]	; (8005768 <HAL_RCC_DeInit+0x1e0>)
 80056ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 80056d2:	4b23      	ldr	r3, [pc, #140]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80056d4:	4a24      	ldr	r2, [pc, #144]	; (8005768 <HAL_RCC_DeInit+0x1e0>)
 80056d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80056da:	4b21      	ldr	r3, [pc, #132]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	4a20      	ldr	r2, [pc, #128]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80056e0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80056e4:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80056e6:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80056ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80056f2:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 80056f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80056fe:	4b18      	ldr	r3, [pc, #96]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	4a17      	ldr	r2, [pc, #92]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005704:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8005708:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	4a14      	ldr	r2, [pc, #80]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005714:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	4a11      	ldr	r2, [pc, #68]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 800571c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005720:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005726:	4a0e      	ldr	r2, [pc, #56]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005732:	4a0b      	ldr	r2, [pc, #44]	; (8005760 <HAL_RCC_DeInit+0x1d8>)
 8005734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005738:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800573a:	4b0c      	ldr	r3, [pc, #48]	; (800576c <HAL_RCC_DeInit+0x1e4>)
 800573c:	4a0c      	ldr	r2, [pc, #48]	; (8005770 <HAL_RCC_DeInit+0x1e8>)
 800573e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8005740:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <HAL_RCC_DeInit+0x1ec>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7fd f8b1 	bl	80028ac <HAL_InitTick>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8005754:	2300      	movs	r3, #0
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800
 8005764:	04003010 	.word	0x04003010
 8005768:	24003000 	.word	0x24003000
 800576c:	2000008c 	.word	0x2000008c
 8005770:	00f42400 	.word	0x00f42400
 8005774:	20000094 	.word	0x20000094

08005778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e041      	b.n	800580e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fc fa4a 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f000 f9fe 	bl	8005bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	d001      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e04e      	b.n	80058ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a23      	ldr	r2, [pc, #140]	; (80058dc <HAL_TIM_Base_Start_IT+0xc4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d022      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x80>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585a:	d01d      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x80>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d018      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x80>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x80>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00e      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x80>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d009      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x80>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x80>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d111      	bne.n	80058bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d010      	beq.n	80058cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ba:	e007      	b.n	80058cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40010400 	.word	0x40010400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40001800 	.word	0x40001800

080058f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0201 	bic.w	r2, r2, #1
 800590e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6a1a      	ldr	r2, [r3, #32]
 8005916:	f241 1311 	movw	r3, #4369	; 0x1111
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10f      	bne.n	8005940 <HAL_TIM_Base_Stop_IT+0x48>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	f240 4344 	movw	r3, #1092	; 0x444
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d107      	bne.n	8005940 <HAL_TIM_Base_Stop_IT+0x48>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b02      	cmp	r3, #2
 800596a:	d122      	bne.n	80059b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d11b      	bne.n	80059b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f06f 0202 	mvn.w	r2, #2
 8005982:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f8ee 	bl	8005b7a <HAL_TIM_IC_CaptureCallback>
 800599e:	e005      	b.n	80059ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f8e0 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8f1 	bl	8005b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d122      	bne.n	8005a06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d11b      	bne.n	8005a06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f06f 0204 	mvn.w	r2, #4
 80059d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f8c4 	bl	8005b7a <HAL_TIM_IC_CaptureCallback>
 80059f2:	e005      	b.n	8005a00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f8b6 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f8c7 	bl	8005b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d122      	bne.n	8005a5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d11b      	bne.n	8005a5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f06f 0208 	mvn.w	r2, #8
 8005a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f89a 	bl	8005b7a <HAL_TIM_IC_CaptureCallback>
 8005a46:	e005      	b.n	8005a54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f88c 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f89d 	bl	8005b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d122      	bne.n	8005aae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d11b      	bne.n	8005aae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f06f 0210 	mvn.w	r2, #16
 8005a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2208      	movs	r2, #8
 8005a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f870 	bl	8005b7a <HAL_TIM_IC_CaptureCallback>
 8005a9a:	e005      	b.n	8005aa8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f862 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f873 	bl	8005b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d10e      	bne.n	8005ada <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d107      	bne.n	8005ada <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f06f 0201 	mvn.w	r2, #1
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fc f8d7 	bl	8001c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b80      	cmp	r3, #128	; 0x80
 8005ae6:	d10e      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af2:	2b80      	cmp	r3, #128	; 0x80
 8005af4:	d107      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f97f 	bl	8005e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	d10e      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d107      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f838 	bl	8005ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d10e      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d107      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 0220 	mvn.w	r2, #32
 8005b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f949 	bl	8005df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a40      	ldr	r2, [pc, #256]	; (8005ccc <TIM_Base_SetConfig+0x114>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd6:	d00f      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a3d      	ldr	r2, [pc, #244]	; (8005cd0 <TIM_Base_SetConfig+0x118>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00b      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3c      	ldr	r2, [pc, #240]	; (8005cd4 <TIM_Base_SetConfig+0x11c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d007      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3b      	ldr	r2, [pc, #236]	; (8005cd8 <TIM_Base_SetConfig+0x120>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3a      	ldr	r2, [pc, #232]	; (8005cdc <TIM_Base_SetConfig+0x124>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d108      	bne.n	8005c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a2f      	ldr	r2, [pc, #188]	; (8005ccc <TIM_Base_SetConfig+0x114>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d02b      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c18:	d027      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2c      	ldr	r2, [pc, #176]	; (8005cd0 <TIM_Base_SetConfig+0x118>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d023      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <TIM_Base_SetConfig+0x11c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01f      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <TIM_Base_SetConfig+0x120>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01b      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a29      	ldr	r2, [pc, #164]	; (8005cdc <TIM_Base_SetConfig+0x124>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d017      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a28      	ldr	r2, [pc, #160]	; (8005ce0 <TIM_Base_SetConfig+0x128>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a27      	ldr	r2, [pc, #156]	; (8005ce4 <TIM_Base_SetConfig+0x12c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00f      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a26      	ldr	r2, [pc, #152]	; (8005ce8 <TIM_Base_SetConfig+0x130>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00b      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a25      	ldr	r2, [pc, #148]	; (8005cec <TIM_Base_SetConfig+0x134>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a24      	ldr	r2, [pc, #144]	; (8005cf0 <TIM_Base_SetConfig+0x138>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d003      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a23      	ldr	r2, [pc, #140]	; (8005cf4 <TIM_Base_SetConfig+0x13c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d108      	bne.n	8005c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <TIM_Base_SetConfig+0x114>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_Base_SetConfig+0xf8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a0c      	ldr	r2, [pc, #48]	; (8005cdc <TIM_Base_SetConfig+0x124>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d103      	bne.n	8005cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	615a      	str	r2, [r3, #20]
}
 8005cbe:	bf00      	nop
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40000800 	.word	0x40000800
 8005cd8:	40000c00 	.word	0x40000c00
 8005cdc:	40010400 	.word	0x40010400
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800
 8005cec:	40001800 	.word	0x40001800
 8005cf0:	40001c00 	.word	0x40001c00
 8005cf4:	40002000 	.word	0x40002000

08005cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e05a      	b.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a21      	ldr	r2, [pc, #132]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d022      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5c:	d01d      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1d      	ldr	r2, [pc, #116]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d018      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1a      	ldr	r2, [pc, #104]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00e      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d009      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d004      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a15      	ldr	r2, [pc, #84]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d10c      	bne.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40010400 	.word	0x40010400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40001800 	.word	0x40001800

08005df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e03f      	b.n	8005eaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fb ffb8 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2224      	movs	r2, #36	; 0x24
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fe05 	bl	8006a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695a      	ldr	r2, [r3, #20]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d130      	bne.n	8005f2e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_UART_Transmit_IT+0x26>
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e029      	b.n	8005f30 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Transmit_IT+0x38>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e022      	b.n	8005f30 <HAL_UART_Transmit_IT+0x7e>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	88fa      	ldrh	r2, [r7, #6]
 8005efc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	88fa      	ldrh	r2, [r7, #6]
 8005f02:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2221      	movs	r2, #33	; 0x21
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f28:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e000      	b.n	8005f30 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
  }
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d11d      	bne.n	8005f92 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <HAL_UART_Receive_IT+0x26>
 8005f5c:	88fb      	ldrh	r3, [r7, #6]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e016      	b.n	8005f94 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_UART_Receive_IT+0x38>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e00f      	b.n	8005f94 <HAL_UART_Receive_IT+0x58>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	461a      	mov	r2, r3
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 fb97 	bl	80066bc <UART_Start_Receive_IT>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	e000      	b.n	8005f94 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f92:	2302      	movs	r3, #2
  }
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b0a0      	sub	sp, #128	; 0x80
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fb6:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8005fba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005fc4:	66ba      	str	r2, [r7, #104]	; 0x68
 8005fc6:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005fca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e5      	bne.n	8005fa4 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3314      	adds	r3, #20
 8005fde:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3314      	adds	r3, #20
 8005ff6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ff8:	657a      	str	r2, [r7, #84]	; 0x54
 8005ffa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ffe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e5      	bne.n	8005fd8 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	2b01      	cmp	r3, #1
 8006012:	d119      	bne.n	8006048 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	677b      	str	r3, [r7, #116]	; 0x74
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006034:	643a      	str	r2, [r7, #64]	; 0x40
 8006036:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800603a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006052:	2b80      	cmp	r3, #128	; 0x80
 8006054:	d136      	bne.n	80060c4 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3314      	adds	r3, #20
 800605c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	61fb      	str	r3, [r7, #28]
   return(result);
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606c:	673b      	str	r3, [r7, #112]	; 0x70
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3314      	adds	r3, #20
 8006074:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800607c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e5      	bne.n	8006056 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608e:	2b00      	cmp	r3, #0
 8006090:	d018      	beq.n	80060c4 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006096:	2200      	movs	r2, #0
 8006098:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fc fdbb 	bl	8002c1a <HAL_DMA_Abort>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00c      	beq.n	80060c4 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fc fe45 	bl	8002d3e <HAL_DMA_GetError>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d104      	bne.n	80060c4 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2210      	movs	r2, #16
 80060be:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e052      	b.n	800616a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d136      	bne.n	8006140 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3314      	adds	r3, #20
 80060f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060f2:	61ba      	str	r2, [r7, #24]
 80060f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6979      	ldr	r1, [r7, #20]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	2b00      	cmp	r3, #0
 800610c:	d018      	beq.n	8006140 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	2200      	movs	r2, #0
 8006114:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	4618      	mov	r0, r3
 800611c:	f7fc fd7d 	bl	8002c1a <HAL_DMA_Abort>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00c      	beq.n	8006140 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	4618      	mov	r0, r3
 800612c:	f7fc fe07 	bl	8002d3e <HAL_DMA_GetError>
 8006130:	4603      	mov	r3, r0
 8006132:	2b20      	cmp	r3, #32
 8006134:	d104      	bne.n	8006140 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2210      	movs	r2, #16
 800613a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e014      	b.n	800616a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3780      	adds	r7, #128	; 0x80
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b0ba      	sub	sp, #232	; 0xe8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800619a:	2300      	movs	r3, #0
 800619c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10f      	bne.n	80061da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <HAL_UART_IRQHandler+0x66>
 80061c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fb8f 	bl	80068f6 <UART_Receive_IT>
      return;
 80061d8:	e256      	b.n	8006688 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80de 	beq.w	80063a0 <HAL_UART_IRQHandler+0x22c>
 80061e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80d1 	beq.w	80063a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <HAL_UART_IRQHandler+0xae>
 800620a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f043 0201 	orr.w	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <HAL_UART_IRQHandler+0xd2>
 800622e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f043 0202 	orr.w	r2, r3, #2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00b      	beq.n	800626a <HAL_UART_IRQHandler+0xf6>
 8006252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	f043 0204 	orr.w	r2, r3, #4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800626a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <HAL_UART_IRQHandler+0x126>
 8006276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f043 0208 	orr.w	r2, r3, #8
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 81ed 	beq.w	800667e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a8:	f003 0320 	and.w	r3, r3, #32
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_UART_IRQHandler+0x14e>
 80062b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fb1a 	bl	80068f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d103      	bne.n	80062ee <HAL_UART_IRQHandler+0x17a>
 80062e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d04f      	beq.n	800638e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa22 	bl	8006738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	d141      	bne.n	8006386 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3314      	adds	r3, #20
 8006308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800631c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3314      	adds	r3, #20
 800632a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800632e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800633a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1d9      	bne.n	8006302 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006352:	2b00      	cmp	r3, #0
 8006354:	d013      	beq.n	800637e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	4a7d      	ldr	r2, [pc, #500]	; (8006550 <HAL_UART_IRQHandler+0x3dc>)
 800635c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	4618      	mov	r0, r3
 8006364:	f7fc fcc9 	bl	8002cfa <HAL_DMA_Abort_IT>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d016      	beq.n	800639c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006378:	4610      	mov	r0, r2
 800637a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	e00e      	b.n	800639c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f986 	bl	8006690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006384:	e00a      	b.n	800639c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f982 	bl	8006690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	e006      	b.n	800639c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f97e 	bl	8006690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800639a:	e170      	b.n	800667e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639c:	bf00      	nop
    return;
 800639e:	e16e      	b.n	800667e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	f040 814a 	bne.w	800663e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8143 	beq.w	800663e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 813c 	beq.w	800663e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063c6:	2300      	movs	r3, #0
 80063c8:	60bb      	str	r3, [r7, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	f040 80b4 	bne.w	8006554 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8140 	beq.w	8006682 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800640a:	429a      	cmp	r2, r3
 800640c:	f080 8139 	bcs.w	8006682 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006416:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006422:	f000 8088 	beq.w	8006536 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800643c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006452:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800645e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800646a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1d9      	bne.n	8006426 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3314      	adds	r3, #20
 8006492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006496:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800649a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800649e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e1      	bne.n	8006472 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3314      	adds	r3, #20
 80064ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e3      	bne.n	80064ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006506:	f023 0310 	bic.w	r3, r3, #16
 800650a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	330c      	adds	r3, #12
 8006514:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006518:	65ba      	str	r2, [r7, #88]	; 0x58
 800651a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800651e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e3      	bne.n	80064f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	4618      	mov	r0, r3
 8006532:	f7fc fb72 	bl	8002c1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800653e:	b29b      	uxth	r3, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f8ac 	bl	80066a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800654c:	e099      	b.n	8006682 <HAL_UART_IRQHandler+0x50e>
 800654e:	bf00      	nop
 8006550:	080067ff 	.word	0x080067ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800655c:	b29b      	uxth	r3, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 808b 	beq.w	8006686 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 8086 	beq.w	8006686 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	330c      	adds	r3, #12
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	330c      	adds	r3, #12
 800659a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800659e:	647a      	str	r2, [r7, #68]	; 0x44
 80065a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e3      	bne.n	800657a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3314      	adds	r3, #20
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	623b      	str	r3, [r7, #32]
   return(result);
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3314      	adds	r3, #20
 80065d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065d6:	633a      	str	r2, [r7, #48]	; 0x30
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e3      	bne.n	80065b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	330c      	adds	r3, #12
 80065fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	60fb      	str	r3, [r7, #12]
   return(result);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0310 	bic.w	r3, r3, #16
 800660e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800661c:	61fa      	str	r2, [r7, #28]
 800661e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	69b9      	ldr	r1, [r7, #24]
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	617b      	str	r3, [r7, #20]
   return(result);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e3      	bne.n	80065f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f834 	bl	80066a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800663c:	e023      	b.n	8006686 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_UART_IRQHandler+0x4ea>
 800664a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8e5 	bl	8006826 <UART_Transmit_IT>
    return;
 800665c:	e014      	b.n	8006688 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800665e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00e      	beq.n	8006688 <HAL_UART_IRQHandler+0x514>
 800666a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f925 	bl	80068c6 <UART_EndTransmit_IT>
    return;
 800667c:	e004      	b.n	8006688 <HAL_UART_IRQHandler+0x514>
    return;
 800667e:	bf00      	nop
 8006680:	e002      	b.n	8006688 <HAL_UART_IRQHandler+0x514>
      return;
 8006682:	bf00      	nop
 8006684:	e000      	b.n	8006688 <HAL_UART_IRQHandler+0x514>
      return;
 8006686:	bf00      	nop
  }
}
 8006688:	37e8      	adds	r7, #232	; 0xe8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop

08006690 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	88fa      	ldrh	r2, [r7, #6]
 80066d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	88fa      	ldrh	r2, [r7, #6]
 80066da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2222      	movs	r2, #34	; 0x22
 80066e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006708:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0201 	orr.w	r2, r2, #1
 8006718:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0220 	orr.w	r2, r2, #32
 8006728:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006738:	b480      	push	{r7}
 800673a:	b095      	sub	sp, #84	; 0x54
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	330c      	adds	r3, #12
 8006746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006760:	643a      	str	r2, [r7, #64]	; 0x40
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e5      	bne.n	8006740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3314      	adds	r3, #20
 800677a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	61fb      	str	r3, [r7, #28]
   return(result);
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	64bb      	str	r3, [r7, #72]	; 0x48
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3314      	adds	r3, #20
 8006792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800679a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e5      	bne.n	8006774 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d119      	bne.n	80067e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	330c      	adds	r3, #12
 80067b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	60bb      	str	r3, [r7, #8]
   return(result);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f023 0310 	bic.w	r3, r3, #16
 80067c6:	647b      	str	r3, [r7, #68]	; 0x44
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067d0:	61ba      	str	r2, [r7, #24]
 80067d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6979      	ldr	r1, [r7, #20]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	613b      	str	r3, [r7, #16]
   return(result);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e5      	bne.n	80067b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067f2:	bf00      	nop
 80067f4:	3754      	adds	r7, #84	; 0x54
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f7ff ff39 	bl	8006690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b21      	cmp	r3, #33	; 0x21
 8006838:	d13e      	bne.n	80068b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006842:	d114      	bne.n	800686e <UART_Transmit_IT+0x48>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d110      	bne.n	800686e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006860:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	1c9a      	adds	r2, r3, #2
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	621a      	str	r2, [r3, #32]
 800686c:	e008      	b.n	8006880 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	1c59      	adds	r1, r3, #1
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6211      	str	r1, [r2, #32]
 8006878:	781a      	ldrb	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29b      	uxth	r3, r3
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	4619      	mov	r1, r3
 800688e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10f      	bne.n	80068b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e000      	b.n	80068ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068b8:	2302      	movs	r3, #2
  }
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b082      	sub	sp, #8
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fb f9f8 	bl	8001cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b08c      	sub	sp, #48	; 0x30
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b22      	cmp	r3, #34	; 0x22
 8006908:	f040 80ab 	bne.w	8006a62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006914:	d117      	bne.n	8006946 <UART_Receive_IT+0x50>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d113      	bne.n	8006946 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	b29b      	uxth	r3, r3
 8006930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006934:	b29a      	uxth	r2, r3
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	1c9a      	adds	r2, r3, #2
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	629a      	str	r2, [r3, #40]	; 0x28
 8006944:	e026      	b.n	8006994 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800694c:	2300      	movs	r3, #0
 800694e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006958:	d007      	beq.n	800696a <UART_Receive_IT+0x74>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <UART_Receive_IT+0x82>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	b2da      	uxtb	r2, r3
 8006972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	e008      	b.n	800698a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006984:	b2da      	uxtb	r2, r3
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006988:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	4619      	mov	r1, r3
 80069a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d15a      	bne.n	8006a5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0220 	bic.w	r2, r2, #32
 80069b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0201 	bic.w	r2, r2, #1
 80069d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d135      	bne.n	8006a54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	613b      	str	r3, [r7, #16]
   return(result);
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f023 0310 	bic.w	r3, r3, #16
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a0e:	623a      	str	r2, [r7, #32]
 8006a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	69f9      	ldr	r1, [r7, #28]
 8006a14:	6a3a      	ldr	r2, [r7, #32]
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e5      	bne.n	80069ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b10      	cmp	r3, #16
 8006a2e:	d10a      	bne.n	8006a46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff fe29 	bl	80066a4 <HAL_UARTEx_RxEventCallback>
 8006a52:	e002      	b.n	8006a5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fb f961 	bl	8001d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e002      	b.n	8006a64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e000      	b.n	8006a64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a62:	2302      	movs	r3, #2
  }
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3730      	adds	r7, #48	; 0x30
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a70:	b0c0      	sub	sp, #256	; 0x100
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a88:	68d9      	ldr	r1, [r3, #12]
 8006a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	ea40 0301 	orr.w	r3, r0, r1
 8006a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ac4:	f021 010c 	bic.w	r1, r1, #12
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae6:	6999      	ldr	r1, [r3, #24]
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	ea40 0301 	orr.w	r3, r0, r1
 8006af2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b8f      	ldr	r3, [pc, #572]	; (8006d38 <UART_SetConfig+0x2cc>)
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d005      	beq.n	8006b0c <UART_SetConfig+0xa0>
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4b8d      	ldr	r3, [pc, #564]	; (8006d3c <UART_SetConfig+0x2d0>)
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d104      	bne.n	8006b16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b0c:	f7fe fd28 	bl	8005560 <HAL_RCC_GetPCLK2Freq>
 8006b10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b14:	e003      	b.n	8006b1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b16:	f7fe fd0f 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 8006b1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b28:	f040 810c 	bne.w	8006d44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b3e:	4622      	mov	r2, r4
 8006b40:	462b      	mov	r3, r5
 8006b42:	1891      	adds	r1, r2, r2
 8006b44:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b46:	415b      	adcs	r3, r3
 8006b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b4e:	4621      	mov	r1, r4
 8006b50:	eb12 0801 	adds.w	r8, r2, r1
 8006b54:	4629      	mov	r1, r5
 8006b56:	eb43 0901 	adc.w	r9, r3, r1
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	f04f 0300 	mov.w	r3, #0
 8006b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b6e:	4690      	mov	r8, r2
 8006b70:	4699      	mov	r9, r3
 8006b72:	4623      	mov	r3, r4
 8006b74:	eb18 0303 	adds.w	r3, r8, r3
 8006b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	eb49 0303 	adc.w	r3, r9, r3
 8006b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	18db      	adds	r3, r3, r3
 8006b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	eb42 0303 	adc.w	r3, r2, r3
 8006ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bb0:	f7f9 fb86 	bl	80002c0 <__aeabi_uldivmod>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4b61      	ldr	r3, [pc, #388]	; (8006d40 <UART_SetConfig+0x2d4>)
 8006bba:	fba3 2302 	umull	r2, r3, r3, r2
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	011c      	lsls	r4, r3, #4
 8006bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006bd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	1891      	adds	r1, r2, r2
 8006bda:	64b9      	str	r1, [r7, #72]	; 0x48
 8006bdc:	415b      	adcs	r3, r3
 8006bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006be4:	4641      	mov	r1, r8
 8006be6:	eb12 0a01 	adds.w	sl, r2, r1
 8006bea:	4649      	mov	r1, r9
 8006bec:	eb43 0b01 	adc.w	fp, r3, r1
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006bfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c04:	4692      	mov	sl, r2
 8006c06:	469b      	mov	fp, r3
 8006c08:	4643      	mov	r3, r8
 8006c0a:	eb1a 0303 	adds.w	r3, sl, r3
 8006c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c12:	464b      	mov	r3, r9
 8006c14:	eb4b 0303 	adc.w	r3, fp, r3
 8006c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c30:	460b      	mov	r3, r1
 8006c32:	18db      	adds	r3, r3, r3
 8006c34:	643b      	str	r3, [r7, #64]	; 0x40
 8006c36:	4613      	mov	r3, r2
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c46:	f7f9 fb3b 	bl	80002c0 <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4611      	mov	r1, r2
 8006c50:	4b3b      	ldr	r3, [pc, #236]	; (8006d40 <UART_SetConfig+0x2d4>)
 8006c52:	fba3 2301 	umull	r2, r3, r3, r1
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	2264      	movs	r2, #100	; 0x64
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	1acb      	subs	r3, r1, r3
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c66:	4b36      	ldr	r3, [pc, #216]	; (8006d40 <UART_SetConfig+0x2d4>)
 8006c68:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c74:	441c      	add	r4, r3
 8006c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	1891      	adds	r1, r2, r2
 8006c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c90:	415b      	adcs	r3, r3
 8006c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c98:	4641      	mov	r1, r8
 8006c9a:	1851      	adds	r1, r2, r1
 8006c9c:	6339      	str	r1, [r7, #48]	; 0x30
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	414b      	adcs	r3, r1
 8006ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006cb0:	4659      	mov	r1, fp
 8006cb2:	00cb      	lsls	r3, r1, #3
 8006cb4:	4651      	mov	r1, sl
 8006cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cba:	4651      	mov	r1, sl
 8006cbc:	00ca      	lsls	r2, r1, #3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	189b      	adds	r3, r3, r2
 8006cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ccc:	464b      	mov	r3, r9
 8006cce:	460a      	mov	r2, r1
 8006cd0:	eb42 0303 	adc.w	r3, r2, r3
 8006cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ce4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ce8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006cec:	460b      	mov	r3, r1
 8006cee:	18db      	adds	r3, r3, r3
 8006cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	eb42 0303 	adc.w	r3, r2, r3
 8006cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d02:	f7f9 fadd 	bl	80002c0 <__aeabi_uldivmod>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <UART_SetConfig+0x2d4>)
 8006d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d10:	095b      	lsrs	r3, r3, #5
 8006d12:	2164      	movs	r1, #100	; 0x64
 8006d14:	fb01 f303 	mul.w	r3, r1, r3
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	3332      	adds	r3, #50	; 0x32
 8006d1e:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <UART_SetConfig+0x2d4>)
 8006d20:	fba2 2303 	umull	r2, r3, r2, r3
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	f003 0207 	and.w	r2, r3, #7
 8006d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4422      	add	r2, r4
 8006d32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d34:	e105      	b.n	8006f42 <UART_SetConfig+0x4d6>
 8006d36:	bf00      	nop
 8006d38:	40011000 	.word	0x40011000
 8006d3c:	40011400 	.word	0x40011400
 8006d40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d56:	4642      	mov	r2, r8
 8006d58:	464b      	mov	r3, r9
 8006d5a:	1891      	adds	r1, r2, r2
 8006d5c:	6239      	str	r1, [r7, #32]
 8006d5e:	415b      	adcs	r3, r3
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
 8006d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d66:	4641      	mov	r1, r8
 8006d68:	1854      	adds	r4, r2, r1
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	eb43 0501 	adc.w	r5, r3, r1
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	00eb      	lsls	r3, r5, #3
 8006d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d7e:	00e2      	lsls	r2, r4, #3
 8006d80:	4614      	mov	r4, r2
 8006d82:	461d      	mov	r5, r3
 8006d84:	4643      	mov	r3, r8
 8006d86:	18e3      	adds	r3, r4, r3
 8006d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	eb45 0303 	adc.w	r3, r5, r3
 8006d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006da2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006db2:	4629      	mov	r1, r5
 8006db4:	008b      	lsls	r3, r1, #2
 8006db6:	4621      	mov	r1, r4
 8006db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	008a      	lsls	r2, r1, #2
 8006dc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006dc4:	f7f9 fa7c 	bl	80002c0 <__aeabi_uldivmod>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4b60      	ldr	r3, [pc, #384]	; (8006f50 <UART_SetConfig+0x4e4>)
 8006dce:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	011c      	lsls	r4, r3, #4
 8006dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006de0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006de4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006de8:	4642      	mov	r2, r8
 8006dea:	464b      	mov	r3, r9
 8006dec:	1891      	adds	r1, r2, r2
 8006dee:	61b9      	str	r1, [r7, #24]
 8006df0:	415b      	adcs	r3, r3
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006df8:	4641      	mov	r1, r8
 8006dfa:	1851      	adds	r1, r2, r1
 8006dfc:	6139      	str	r1, [r7, #16]
 8006dfe:	4649      	mov	r1, r9
 8006e00:	414b      	adcs	r3, r1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e10:	4659      	mov	r1, fp
 8006e12:	00cb      	lsls	r3, r1, #3
 8006e14:	4651      	mov	r1, sl
 8006e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e1a:	4651      	mov	r1, sl
 8006e1c:	00ca      	lsls	r2, r1, #3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4619      	mov	r1, r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	4642      	mov	r2, r8
 8006e26:	189b      	adds	r3, r3, r2
 8006e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	460a      	mov	r2, r1
 8006e30:	eb42 0303 	adc.w	r3, r2, r3
 8006e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e50:	4649      	mov	r1, r9
 8006e52:	008b      	lsls	r3, r1, #2
 8006e54:	4641      	mov	r1, r8
 8006e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e5a:	4641      	mov	r1, r8
 8006e5c:	008a      	lsls	r2, r1, #2
 8006e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e62:	f7f9 fa2d 	bl	80002c0 <__aeabi_uldivmod>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4b39      	ldr	r3, [pc, #228]	; (8006f50 <UART_SetConfig+0x4e4>)
 8006e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e70:	095b      	lsrs	r3, r3, #5
 8006e72:	2164      	movs	r1, #100	; 0x64
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	3332      	adds	r3, #50	; 0x32
 8006e7e:	4a34      	ldr	r2, [pc, #208]	; (8006f50 <UART_SetConfig+0x4e4>)
 8006e80:	fba2 2303 	umull	r2, r3, r2, r3
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e8a:	441c      	add	r4, r3
 8006e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e90:	2200      	movs	r2, #0
 8006e92:	673b      	str	r3, [r7, #112]	; 0x70
 8006e94:	677a      	str	r2, [r7, #116]	; 0x74
 8006e96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e9a:	4642      	mov	r2, r8
 8006e9c:	464b      	mov	r3, r9
 8006e9e:	1891      	adds	r1, r2, r2
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	415b      	adcs	r3, r3
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eaa:	4641      	mov	r1, r8
 8006eac:	1851      	adds	r1, r2, r1
 8006eae:	6039      	str	r1, [r7, #0]
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	414b      	adcs	r3, r1
 8006eb4:	607b      	str	r3, [r7, #4]
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ec2:	4659      	mov	r1, fp
 8006ec4:	00cb      	lsls	r3, r1, #3
 8006ec6:	4651      	mov	r1, sl
 8006ec8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ecc:	4651      	mov	r1, sl
 8006ece:	00ca      	lsls	r2, r1, #3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	189b      	adds	r3, r3, r2
 8006eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8006edc:	464b      	mov	r3, r9
 8006ede:	460a      	mov	r2, r1
 8006ee0:	eb42 0303 	adc.w	r3, r2, r3
 8006ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	663b      	str	r3, [r7, #96]	; 0x60
 8006ef0:	667a      	str	r2, [r7, #100]	; 0x64
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006efe:	4649      	mov	r1, r9
 8006f00:	008b      	lsls	r3, r1, #2
 8006f02:	4641      	mov	r1, r8
 8006f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f08:	4641      	mov	r1, r8
 8006f0a:	008a      	lsls	r2, r1, #2
 8006f0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f10:	f7f9 f9d6 	bl	80002c0 <__aeabi_uldivmod>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <UART_SetConfig+0x4e4>)
 8006f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	2164      	movs	r1, #100	; 0x64
 8006f22:	fb01 f303 	mul.w	r3, r1, r3
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	3332      	adds	r3, #50	; 0x32
 8006f2c:	4a08      	ldr	r2, [pc, #32]	; (8006f50 <UART_SetConfig+0x4e4>)
 8006f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	f003 020f 	and.w	r2, r3, #15
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4422      	add	r2, r4
 8006f40:	609a      	str	r2, [r3, #8]
}
 8006f42:	bf00      	nop
 8006f44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f4e:	bf00      	nop
 8006f50:	51eb851f 	.word	0x51eb851f

08006f54 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006f5a:	4b8d      	ldr	r3, [pc, #564]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006f5c:	22c0      	movs	r2, #192	; 0xc0
 8006f5e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006f60:	4b8b      	ldr	r3, [pc, #556]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006f62:	22a8      	movs	r2, #168	; 0xa8
 8006f64:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8006f66:	4b8a      	ldr	r3, [pc, #552]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006f68:	2264      	movs	r2, #100	; 0x64
 8006f6a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 193;
 8006f6c:	4b88      	ldr	r3, [pc, #544]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006f6e:	22c1      	movs	r2, #193	; 0xc1
 8006f70:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006f72:	4b88      	ldr	r3, [pc, #544]	; (8007194 <MX_LWIP_Init+0x240>)
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006f78:	4b86      	ldr	r3, [pc, #536]	; (8007194 <MX_LWIP_Init+0x240>)
 8006f7a:	22ff      	movs	r2, #255	; 0xff
 8006f7c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006f7e:	4b85      	ldr	r3, [pc, #532]	; (8007194 <MX_LWIP_Init+0x240>)
 8006f80:	22ff      	movs	r2, #255	; 0xff
 8006f82:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006f84:	4b83      	ldr	r3, [pc, #524]	; (8007194 <MX_LWIP_Init+0x240>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8006f8a:	4b83      	ldr	r3, [pc, #524]	; (8007198 <MX_LWIP_Init+0x244>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8006f90:	4b81      	ldr	r3, [pc, #516]	; (8007198 <MX_LWIP_Init+0x244>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006f96:	4b80      	ldr	r3, [pc, #512]	; (8007198 <MX_LWIP_Init+0x244>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8006f9c:	4b7e      	ldr	r3, [pc, #504]	; (8007198 <MX_LWIP_Init+0x244>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006fa2:	f000 fdbd 	bl	8007b20 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006fa6:	4b7a      	ldr	r3, [pc, #488]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	061a      	lsls	r2, r3, #24
 8006fac:	4b78      	ldr	r3, [pc, #480]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	4b76      	ldr	r3, [pc, #472]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006fb6:	789b      	ldrb	r3, [r3, #2]
 8006fb8:	021b      	lsls	r3, r3, #8
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	4a74      	ldr	r2, [pc, #464]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006fbe:	78d2      	ldrb	r2, [r2, #3]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	061a      	lsls	r2, r3, #24
 8006fc4:	4b72      	ldr	r3, [pc, #456]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	0619      	lsls	r1, r3, #24
 8006fca:	4b71      	ldr	r3, [pc, #452]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006fcc:	785b      	ldrb	r3, [r3, #1]
 8006fce:	041b      	lsls	r3, r3, #16
 8006fd0:	4319      	orrs	r1, r3
 8006fd2:	4b6f      	ldr	r3, [pc, #444]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006fd4:	789b      	ldrb	r3, [r3, #2]
 8006fd6:	021b      	lsls	r3, r3, #8
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	496d      	ldr	r1, [pc, #436]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006fdc:	78c9      	ldrb	r1, [r1, #3]
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	4b69      	ldr	r3, [pc, #420]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	0619      	lsls	r1, r3, #24
 8006fee:	4b68      	ldr	r3, [pc, #416]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006ff0:	785b      	ldrb	r3, [r3, #1]
 8006ff2:	041b      	lsls	r3, r3, #16
 8006ff4:	4319      	orrs	r1, r3
 8006ff6:	4b66      	ldr	r3, [pc, #408]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006ff8:	789b      	ldrb	r3, [r3, #2]
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	4964      	ldr	r1, [pc, #400]	; (8007190 <MX_LWIP_Init+0x23c>)
 8007000:	78c9      	ldrb	r1, [r1, #3]
 8007002:	430b      	orrs	r3, r1
 8007004:	0a1b      	lsrs	r3, r3, #8
 8007006:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800700a:	431a      	orrs	r2, r3
 800700c:	4b60      	ldr	r3, [pc, #384]	; (8007190 <MX_LWIP_Init+0x23c>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	0619      	lsls	r1, r3, #24
 8007012:	4b5f      	ldr	r3, [pc, #380]	; (8007190 <MX_LWIP_Init+0x23c>)
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	041b      	lsls	r3, r3, #16
 8007018:	4319      	orrs	r1, r3
 800701a:	4b5d      	ldr	r3, [pc, #372]	; (8007190 <MX_LWIP_Init+0x23c>)
 800701c:	789b      	ldrb	r3, [r3, #2]
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	430b      	orrs	r3, r1
 8007022:	495b      	ldr	r1, [pc, #364]	; (8007190 <MX_LWIP_Init+0x23c>)
 8007024:	78c9      	ldrb	r1, [r1, #3]
 8007026:	430b      	orrs	r3, r1
 8007028:	0e1b      	lsrs	r3, r3, #24
 800702a:	4313      	orrs	r3, r2
 800702c:	4a5b      	ldr	r2, [pc, #364]	; (800719c <MX_LWIP_Init+0x248>)
 800702e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007030:	4b58      	ldr	r3, [pc, #352]	; (8007194 <MX_LWIP_Init+0x240>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	061a      	lsls	r2, r3, #24
 8007036:	4b57      	ldr	r3, [pc, #348]	; (8007194 <MX_LWIP_Init+0x240>)
 8007038:	785b      	ldrb	r3, [r3, #1]
 800703a:	041b      	lsls	r3, r3, #16
 800703c:	431a      	orrs	r2, r3
 800703e:	4b55      	ldr	r3, [pc, #340]	; (8007194 <MX_LWIP_Init+0x240>)
 8007040:	789b      	ldrb	r3, [r3, #2]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	4313      	orrs	r3, r2
 8007046:	4a53      	ldr	r2, [pc, #332]	; (8007194 <MX_LWIP_Init+0x240>)
 8007048:	78d2      	ldrb	r2, [r2, #3]
 800704a:	4313      	orrs	r3, r2
 800704c:	061a      	lsls	r2, r3, #24
 800704e:	4b51      	ldr	r3, [pc, #324]	; (8007194 <MX_LWIP_Init+0x240>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	0619      	lsls	r1, r3, #24
 8007054:	4b4f      	ldr	r3, [pc, #316]	; (8007194 <MX_LWIP_Init+0x240>)
 8007056:	785b      	ldrb	r3, [r3, #1]
 8007058:	041b      	lsls	r3, r3, #16
 800705a:	4319      	orrs	r1, r3
 800705c:	4b4d      	ldr	r3, [pc, #308]	; (8007194 <MX_LWIP_Init+0x240>)
 800705e:	789b      	ldrb	r3, [r3, #2]
 8007060:	021b      	lsls	r3, r3, #8
 8007062:	430b      	orrs	r3, r1
 8007064:	494b      	ldr	r1, [pc, #300]	; (8007194 <MX_LWIP_Init+0x240>)
 8007066:	78c9      	ldrb	r1, [r1, #3]
 8007068:	430b      	orrs	r3, r1
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007070:	431a      	orrs	r2, r3
 8007072:	4b48      	ldr	r3, [pc, #288]	; (8007194 <MX_LWIP_Init+0x240>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	0619      	lsls	r1, r3, #24
 8007078:	4b46      	ldr	r3, [pc, #280]	; (8007194 <MX_LWIP_Init+0x240>)
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	041b      	lsls	r3, r3, #16
 800707e:	4319      	orrs	r1, r3
 8007080:	4b44      	ldr	r3, [pc, #272]	; (8007194 <MX_LWIP_Init+0x240>)
 8007082:	789b      	ldrb	r3, [r3, #2]
 8007084:	021b      	lsls	r3, r3, #8
 8007086:	430b      	orrs	r3, r1
 8007088:	4942      	ldr	r1, [pc, #264]	; (8007194 <MX_LWIP_Init+0x240>)
 800708a:	78c9      	ldrb	r1, [r1, #3]
 800708c:	430b      	orrs	r3, r1
 800708e:	0a1b      	lsrs	r3, r3, #8
 8007090:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007094:	431a      	orrs	r2, r3
 8007096:	4b3f      	ldr	r3, [pc, #252]	; (8007194 <MX_LWIP_Init+0x240>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	0619      	lsls	r1, r3, #24
 800709c:	4b3d      	ldr	r3, [pc, #244]	; (8007194 <MX_LWIP_Init+0x240>)
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	041b      	lsls	r3, r3, #16
 80070a2:	4319      	orrs	r1, r3
 80070a4:	4b3b      	ldr	r3, [pc, #236]	; (8007194 <MX_LWIP_Init+0x240>)
 80070a6:	789b      	ldrb	r3, [r3, #2]
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	430b      	orrs	r3, r1
 80070ac:	4939      	ldr	r1, [pc, #228]	; (8007194 <MX_LWIP_Init+0x240>)
 80070ae:	78c9      	ldrb	r1, [r1, #3]
 80070b0:	430b      	orrs	r3, r1
 80070b2:	0e1b      	lsrs	r3, r3, #24
 80070b4:	4313      	orrs	r3, r2
 80070b6:	4a3a      	ldr	r2, [pc, #232]	; (80071a0 <MX_LWIP_Init+0x24c>)
 80070b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80070ba:	4b37      	ldr	r3, [pc, #220]	; (8007198 <MX_LWIP_Init+0x244>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	061a      	lsls	r2, r3, #24
 80070c0:	4b35      	ldr	r3, [pc, #212]	; (8007198 <MX_LWIP_Init+0x244>)
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	041b      	lsls	r3, r3, #16
 80070c6:	431a      	orrs	r2, r3
 80070c8:	4b33      	ldr	r3, [pc, #204]	; (8007198 <MX_LWIP_Init+0x244>)
 80070ca:	789b      	ldrb	r3, [r3, #2]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	4313      	orrs	r3, r2
 80070d0:	4a31      	ldr	r2, [pc, #196]	; (8007198 <MX_LWIP_Init+0x244>)
 80070d2:	78d2      	ldrb	r2, [r2, #3]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	061a      	lsls	r2, r3, #24
 80070d8:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <MX_LWIP_Init+0x244>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	0619      	lsls	r1, r3, #24
 80070de:	4b2e      	ldr	r3, [pc, #184]	; (8007198 <MX_LWIP_Init+0x244>)
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	4319      	orrs	r1, r3
 80070e6:	4b2c      	ldr	r3, [pc, #176]	; (8007198 <MX_LWIP_Init+0x244>)
 80070e8:	789b      	ldrb	r3, [r3, #2]
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	430b      	orrs	r3, r1
 80070ee:	492a      	ldr	r1, [pc, #168]	; (8007198 <MX_LWIP_Init+0x244>)
 80070f0:	78c9      	ldrb	r1, [r1, #3]
 80070f2:	430b      	orrs	r3, r1
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070fa:	431a      	orrs	r2, r3
 80070fc:	4b26      	ldr	r3, [pc, #152]	; (8007198 <MX_LWIP_Init+0x244>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	0619      	lsls	r1, r3, #24
 8007102:	4b25      	ldr	r3, [pc, #148]	; (8007198 <MX_LWIP_Init+0x244>)
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	041b      	lsls	r3, r3, #16
 8007108:	4319      	orrs	r1, r3
 800710a:	4b23      	ldr	r3, [pc, #140]	; (8007198 <MX_LWIP_Init+0x244>)
 800710c:	789b      	ldrb	r3, [r3, #2]
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	430b      	orrs	r3, r1
 8007112:	4921      	ldr	r1, [pc, #132]	; (8007198 <MX_LWIP_Init+0x244>)
 8007114:	78c9      	ldrb	r1, [r1, #3]
 8007116:	430b      	orrs	r3, r1
 8007118:	0a1b      	lsrs	r3, r3, #8
 800711a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800711e:	431a      	orrs	r2, r3
 8007120:	4b1d      	ldr	r3, [pc, #116]	; (8007198 <MX_LWIP_Init+0x244>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	0619      	lsls	r1, r3, #24
 8007126:	4b1c      	ldr	r3, [pc, #112]	; (8007198 <MX_LWIP_Init+0x244>)
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	4319      	orrs	r1, r3
 800712e:	4b1a      	ldr	r3, [pc, #104]	; (8007198 <MX_LWIP_Init+0x244>)
 8007130:	789b      	ldrb	r3, [r3, #2]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	430b      	orrs	r3, r1
 8007136:	4918      	ldr	r1, [pc, #96]	; (8007198 <MX_LWIP_Init+0x244>)
 8007138:	78c9      	ldrb	r1, [r1, #3]
 800713a:	430b      	orrs	r3, r1
 800713c:	0e1b      	lsrs	r3, r3, #24
 800713e:	4313      	orrs	r3, r2
 8007140:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <MX_LWIP_Init+0x250>)
 8007142:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007144:	4b18      	ldr	r3, [pc, #96]	; (80071a8 <MX_LWIP_Init+0x254>)
 8007146:	9302      	str	r3, [sp, #8]
 8007148:	4b18      	ldr	r3, [pc, #96]	; (80071ac <MX_LWIP_Init+0x258>)
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	2300      	movs	r3, #0
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4b14      	ldr	r3, [pc, #80]	; (80071a4 <MX_LWIP_Init+0x250>)
 8007152:	4a13      	ldr	r2, [pc, #76]	; (80071a0 <MX_LWIP_Init+0x24c>)
 8007154:	4911      	ldr	r1, [pc, #68]	; (800719c <MX_LWIP_Init+0x248>)
 8007156:	4816      	ldr	r0, [pc, #88]	; (80071b0 <MX_LWIP_Init+0x25c>)
 8007158:	f001 f9ca 	bl	80084f0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800715c:	4814      	ldr	r0, [pc, #80]	; (80071b0 <MX_LWIP_Init+0x25c>)
 800715e:	f001 fb79 	bl	8008854 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007162:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <MX_LWIP_Init+0x25c>)
 8007164:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007168:	089b      	lsrs	r3, r3, #2
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007174:	480e      	ldr	r0, [pc, #56]	; (80071b0 <MX_LWIP_Init+0x25c>)
 8007176:	f001 fb7d 	bl	8008874 <netif_set_up>
 800717a:	e002      	b.n	8007182 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800717c:	480c      	ldr	r0, [pc, #48]	; (80071b0 <MX_LWIP_Init+0x25c>)
 800717e:	f001 fbe5 	bl	800894c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007182:	490c      	ldr	r1, [pc, #48]	; (80071b4 <MX_LWIP_Init+0x260>)
 8007184:	480a      	ldr	r0, [pc, #40]	; (80071b0 <MX_LWIP_Init+0x25c>)
 8007186:	f001 fc77 	bl	8008a78 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800718a:	bf00      	nop
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000530 	.word	0x20000530
 8007194:	20000534 	.word	0x20000534
 8007198:	20000538 	.word	0x20000538
 800719c:	20000524 	.word	0x20000524
 80071a0:	20000528 	.word	0x20000528
 80071a4:	2000052c 	.word	0x2000052c
 80071a8:	08011349 	.word	0x08011349
 80071ac:	080074b5 	.word	0x080074b5
 80071b0:	200004f0 	.word	0x200004f0
 80071b4:	08007209 	.word	0x08007209

080071b8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80071c0:	f7fb fbb8 	bl	8002934 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <Ethernet_Link_Periodic_Handle+0x30>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b63      	cmp	r3, #99	; 0x63
 80071ce:	d907      	bls.n	80071e0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80071d0:	f7fb fbb0 	bl	8002934 <HAL_GetTick>
 80071d4:	4603      	mov	r3, r0
 80071d6:	4a04      	ldr	r2, [pc, #16]	; (80071e8 <Ethernet_Link_Periodic_Handle+0x30>)
 80071d8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 facc 	bl	8007778 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	200004ec 	.word	0x200004ec

080071ec <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80071f0:	4804      	ldr	r0, [pc, #16]	; (8007204 <MX_LWIP_Process+0x18>)
 80071f2:	f000 f93f 	bl	8007474 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80071f6:	f007 fcb1 	bl	800eb5c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80071fa:	4802      	ldr	r0, [pc, #8]	; (8007204 <MX_LWIP_Process+0x18>)
 80071fc:	f7ff ffdc 	bl	80071b8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007200:	bf00      	nop
 8007202:	bd80      	pop	{r7, pc}
 8007204:	200004f0 	.word	0x200004f0

08007208 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007228:	4b40      	ldr	r3, [pc, #256]	; (800732c <low_level_init+0x110>)
 800722a:	4a41      	ldr	r2, [pc, #260]	; (8007330 <low_level_init+0x114>)
 800722c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800722e:	2300      	movs	r3, #0
 8007230:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007232:	2380      	movs	r3, #128	; 0x80
 8007234:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007236:	23e1      	movs	r3, #225	; 0xe1
 8007238:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800723a:	2300      	movs	r3, #0
 800723c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800723e:	2300      	movs	r3, #0
 8007240:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007242:	2300      	movs	r3, #0
 8007244:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007246:	4a39      	ldr	r2, [pc, #228]	; (800732c <low_level_init+0x110>)
 8007248:	f107 0308 	add.w	r3, r7, #8
 800724c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800724e:	4b37      	ldr	r3, [pc, #220]	; (800732c <low_level_init+0x110>)
 8007250:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007254:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007256:	4b35      	ldr	r3, [pc, #212]	; (800732c <low_level_init+0x110>)
 8007258:	4a36      	ldr	r2, [pc, #216]	; (8007334 <low_level_init+0x118>)
 800725a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800725c:	4b33      	ldr	r3, [pc, #204]	; (800732c <low_level_init+0x110>)
 800725e:	4a36      	ldr	r2, [pc, #216]	; (8007338 <low_level_init+0x11c>)
 8007260:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007262:	4b32      	ldr	r3, [pc, #200]	; (800732c <low_level_init+0x110>)
 8007264:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007268:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800726a:	4830      	ldr	r0, [pc, #192]	; (800732c <low_level_init+0x110>)
 800726c:	f7fb fd74 	bl	8002d58 <HAL_ETH_Init>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007274:	2238      	movs	r2, #56	; 0x38
 8007276:	2100      	movs	r1, #0
 8007278:	4830      	ldr	r0, [pc, #192]	; (800733c <low_level_init+0x120>)
 800727a:	f00a f99f 	bl	80115bc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800727e:	4b2f      	ldr	r3, [pc, #188]	; (800733c <low_level_init+0x120>)
 8007280:	2221      	movs	r2, #33	; 0x21
 8007282:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007284:	4b2d      	ldr	r3, [pc, #180]	; (800733c <low_level_init+0x120>)
 8007286:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800728a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800728c:	4b2b      	ldr	r3, [pc, #172]	; (800733c <low_level_init+0x120>)
 800728e:	2200      	movs	r2, #0
 8007290:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007292:	482b      	ldr	r0, [pc, #172]	; (8007340 <low_level_init+0x124>)
 8007294:	f000 fff4 	bl	8008280 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2206      	movs	r2, #6
 800729c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80072a0:	4b22      	ldr	r3, [pc, #136]	; (800732c <low_level_init+0x110>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80072ac:	4b1f      	ldr	r3, [pc, #124]	; (800732c <low_level_init+0x110>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	785a      	ldrb	r2, [r3, #1]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80072b8:	4b1c      	ldr	r3, [pc, #112]	; (800732c <low_level_init+0x110>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	789a      	ldrb	r2, [r3, #2]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80072c4:	4b19      	ldr	r3, [pc, #100]	; (800732c <low_level_init+0x110>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	78da      	ldrb	r2, [r3, #3]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80072d0:	4b16      	ldr	r3, [pc, #88]	; (800732c <low_level_init+0x110>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	791a      	ldrb	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80072dc:	4b13      	ldr	r3, [pc, #76]	; (800732c <low_level_init+0x110>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	795a      	ldrb	r2, [r3, #5]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80072ee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072f6:	f043 030a 	orr.w	r3, r3, #10
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007302:	4910      	ldr	r1, [pc, #64]	; (8007344 <low_level_init+0x128>)
 8007304:	4810      	ldr	r0, [pc, #64]	; (8007348 <low_level_init+0x12c>)
 8007306:	f7fb f91a 	bl	800253e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800730a:	480f      	ldr	r0, [pc, #60]	; (8007348 <low_level_init+0x12c>)
 800730c:	f7fb f949 	bl	80025a2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa2e 	bl	8007778 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800731c:	e001      	b.n	8007322 <low_level_init+0x106>
    Error_Handler();
 800731e:	f7fa fa1a 	bl	8001756 <Error_Handler>
}
 8007322:	bf00      	nop
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	2000500c 	.word	0x2000500c
 8007330:	40028000 	.word	0x40028000
 8007334:	20004f6c 	.word	0x20004f6c
 8007338:	20004ecc 	.word	0x20004ecc
 800733c:	200050bc 	.word	0x200050bc
 8007340:	0801573c 	.word	0x0801573c
 8007344:	2000009c 	.word	0x2000009c
 8007348:	200050f4 	.word	0x200050f4

0800734c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b092      	sub	sp, #72	; 0x48
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007364:	f107 030c 	add.w	r3, r7, #12
 8007368:	2230      	movs	r2, #48	; 0x30
 800736a:	2100      	movs	r1, #0
 800736c:	4618      	mov	r0, r3
 800736e:	f00a f925 	bl	80115bc <memset>

  for(q = p; q != NULL; q = q->next)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	643b      	str	r3, [r7, #64]	; 0x40
 8007376:	e045      	b.n	8007404 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800737a:	2b03      	cmp	r3, #3
 800737c:	d902      	bls.n	8007384 <low_level_output+0x38>
      return ERR_IF;
 800737e:	f06f 030b 	mvn.w	r3, #11
 8007382:	e055      	b.n	8007430 <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 8007384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007386:	6859      	ldr	r1, [r3, #4]
 8007388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800738a:	4613      	mov	r3, r2
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	3348      	adds	r3, #72	; 0x48
 8007394:	443b      	add	r3, r7
 8007396:	3b3c      	subs	r3, #60	; 0x3c
 8007398:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800739a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800739c:	895b      	ldrh	r3, [r3, #10]
 800739e:	4619      	mov	r1, r3
 80073a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073a2:	4613      	mov	r3, r2
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	3348      	adds	r3, #72	; 0x48
 80073ac:	443b      	add	r3, r7
 80073ae:	3b38      	subs	r3, #56	; 0x38
 80073b0:	6019      	str	r1, [r3, #0]

    if(i>0)
 80073b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d011      	beq.n	80073dc <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80073b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ba:	1e5a      	subs	r2, r3, #1
 80073bc:	f107 000c 	add.w	r0, r7, #12
 80073c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073c2:	460b      	mov	r3, r1
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	440b      	add	r3, r1
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	18c1      	adds	r1, r0, r3
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	3348      	adds	r3, #72	; 0x48
 80073d6:	443b      	add	r3, r7
 80073d8:	3b34      	subs	r3, #52	; 0x34
 80073da:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80073dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d109      	bne.n	80073f8 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 80073e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073e6:	4613      	mov	r3, r2
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	3348      	adds	r3, #72	; 0x48
 80073f0:	443b      	add	r3, r7
 80073f2:	3b34      	subs	r3, #52	; 0x34
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
    }

    i++;
 80073f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fa:	3301      	adds	r3, #1
 80073fc:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80073fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	643b      	str	r3, [r7, #64]	; 0x40
 8007404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1b6      	bne.n	8007378 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	891b      	ldrh	r3, [r3, #8]
 800740e:	461a      	mov	r2, r3
 8007410:	4b09      	ldr	r3, [pc, #36]	; (8007438 <low_level_output+0xec>)
 8007412:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007414:	4a08      	ldr	r2, [pc, #32]	; (8007438 <low_level_output+0xec>)
 8007416:	f107 030c 	add.w	r3, r7, #12
 800741a:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800741c:	4a06      	ldr	r2, [pc, #24]	; (8007438 <low_level_output+0xec>)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007422:	2214      	movs	r2, #20
 8007424:	4904      	ldr	r1, [pc, #16]	; (8007438 <low_level_output+0xec>)
 8007426:	4805      	ldr	r0, [pc, #20]	; (800743c <low_level_output+0xf0>)
 8007428:	f7fb fdcc 	bl	8002fc4 <HAL_ETH_Transmit>

  return errval;
 800742c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007430:	4618      	mov	r0, r3
 8007432:	3748      	adds	r7, #72	; 0x48
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	200050bc 	.word	0x200050bc
 800743c:	2000500c 	.word	0x2000500c

08007440 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800744c:	4b07      	ldr	r3, [pc, #28]	; (800746c <low_level_input+0x2c>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d105      	bne.n	8007460 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007454:	f107 030c 	add.w	r3, r7, #12
 8007458:	4619      	mov	r1, r3
 800745a:	4805      	ldr	r0, [pc, #20]	; (8007470 <low_level_input+0x30>)
 800745c:	f7fb fe46 	bl	80030ec <HAL_ETH_ReadData>
  }

  return p;
 8007460:	68fb      	ldr	r3, [r7, #12]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20004ec4 	.word	0x20004ec4
 8007470:	2000500c 	.word	0x2000500c

08007474 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff ffdd 	bl	8007440 <low_level_input>
 8007486:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	4798      	blx	r3
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f001 fe6a 	bl	8009178 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1ea      	bne.n	8007480 <ethernetif_input+0xc>
}
 80074aa:	bf00      	nop
 80074ac:	bf00      	nop
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <ethernetif_init+0x1c>
 80074c2:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <ethernetif_init+0x48>)
 80074c4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80074c8:	490d      	ldr	r1, [pc, #52]	; (8007500 <ethernetif_init+0x4c>)
 80074ca:	480e      	ldr	r0, [pc, #56]	; (8007504 <ethernetif_init+0x50>)
 80074cc:	f00a f95e 	bl	801178c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2273      	movs	r2, #115	; 0x73
 80074d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2274      	movs	r2, #116	; 0x74
 80074dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a09      	ldr	r2, [pc, #36]	; (8007508 <ethernetif_init+0x54>)
 80074e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a08      	ldr	r2, [pc, #32]	; (800750c <ethernetif_init+0x58>)
 80074ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff fe95 	bl	800721c <low_level_init>

  return ERR_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	08012d44 	.word	0x08012d44
 8007500:	08012d60 	.word	0x08012d60
 8007504:	08012d70 	.word	0x08012d70
 8007508:	0800f7ed 	.word	0x0800f7ed
 800750c:	0800734d 	.word	0x0800734d

08007510 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800751c:	68f9      	ldr	r1, [r7, #12]
 800751e:	4808      	ldr	r0, [pc, #32]	; (8007540 <pbuf_free_custom+0x30>)
 8007520:	f000 ff90 	bl	8008444 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007524:	4b07      	ldr	r3, [pc, #28]	; (8007544 <pbuf_free_custom+0x34>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d105      	bne.n	8007538 <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800752c:	4b05      	ldr	r3, [pc, #20]	; (8007544 <pbuf_free_custom+0x34>)
 800752e:	2200      	movs	r2, #0
 8007530:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 8007532:	4b05      	ldr	r3, [pc, #20]	; (8007548 <pbuf_free_custom+0x38>)
 8007534:	2201      	movs	r2, #1
 8007536:	601a      	str	r2, [r3, #0]
  }
}
 8007538:	bf00      	nop
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	0801573c 	.word	0x0801573c
 8007544:	20004ec4 	.word	0x20004ec4
 8007548:	20004ec8 	.word	0x20004ec8

0800754c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007550:	f7fb f9f0 	bl	8002934 <HAL_GetTick>
 8007554:	4603      	mov	r3, r0
}
 8007556:	4618      	mov	r0, r3
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08e      	sub	sp, #56	; 0x38
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	609a      	str	r2, [r3, #8]
 8007570:	60da      	str	r2, [r3, #12]
 8007572:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a52      	ldr	r2, [pc, #328]	; (80076c4 <HAL_ETH_MspInit+0x168>)
 800757a:	4293      	cmp	r3, r2
 800757c:	f040 809d 	bne.w	80076ba <HAL_ETH_MspInit+0x15e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007580:	2300      	movs	r3, #0
 8007582:	623b      	str	r3, [r7, #32]
 8007584:	4b50      	ldr	r3, [pc, #320]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	4a4f      	ldr	r2, [pc, #316]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 800758a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800758e:	6313      	str	r3, [r2, #48]	; 0x30
 8007590:	4b4d      	ldr	r3, [pc, #308]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007598:	623b      	str	r3, [r7, #32]
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	2300      	movs	r3, #0
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	4b49      	ldr	r3, [pc, #292]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	4a48      	ldr	r2, [pc, #288]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075aa:	6313      	str	r3, [r2, #48]	; 0x30
 80075ac:	4b46      	ldr	r3, [pc, #280]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2300      	movs	r3, #0
 80075ba:	61bb      	str	r3, [r7, #24]
 80075bc:	4b42      	ldr	r3, [pc, #264]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c0:	4a41      	ldr	r2, [pc, #260]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075c6:	6313      	str	r3, [r2, #48]	; 0x30
 80075c8:	4b3f      	ldr	r3, [pc, #252]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	4b3b      	ldr	r3, [pc, #236]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	4a3a      	ldr	r2, [pc, #232]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075de:	f043 0304 	orr.w	r3, r3, #4
 80075e2:	6313      	str	r3, [r2, #48]	; 0x30
 80075e4:	4b38      	ldr	r3, [pc, #224]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075f0:	2300      	movs	r3, #0
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	4b34      	ldr	r3, [pc, #208]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	4a33      	ldr	r2, [pc, #204]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 80075fa:	f043 0301 	orr.w	r3, r3, #1
 80075fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007600:	4b31      	ldr	r3, [pc, #196]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 8007602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	4b2d      	ldr	r3, [pc, #180]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 8007612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007614:	4a2c      	ldr	r2, [pc, #176]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 8007616:	f043 0302 	orr.w	r3, r3, #2
 800761a:	6313      	str	r3, [r2, #48]	; 0x30
 800761c:	4b2a      	ldr	r3, [pc, #168]	; (80076c8 <HAL_ETH_MspInit+0x16c>)
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007628:	2332      	movs	r3, #50	; 0x32
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800762c:	2302      	movs	r3, #2
 800762e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007630:	2300      	movs	r3, #0
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007634:	2303      	movs	r3, #3
 8007636:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007638:	230b      	movs	r3, #11
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800763c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007640:	4619      	mov	r1, r3
 8007642:	4822      	ldr	r0, [pc, #136]	; (80076cc <HAL_ETH_MspInit+0x170>)
 8007644:	f7fd f878 	bl	8004738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007648:	2386      	movs	r3, #134	; 0x86
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800764c:	2302      	movs	r3, #2
 800764e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007650:	2300      	movs	r3, #0
 8007652:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007654:	2303      	movs	r3, #3
 8007656:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007658:	230b      	movs	r3, #11
 800765a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800765c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007660:	4619      	mov	r1, r3
 8007662:	481b      	ldr	r0, [pc, #108]	; (80076d0 <HAL_ETH_MspInit+0x174>)
 8007664:	f7fd f868 	bl	8004738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007668:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800766e:	2302      	movs	r3, #2
 8007670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007672:	2300      	movs	r3, #0
 8007674:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007676:	2303      	movs	r3, #3
 8007678:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800767a:	230b      	movs	r3, #11
 800767c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800767e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007682:	4619      	mov	r1, r3
 8007684:	4813      	ldr	r0, [pc, #76]	; (80076d4 <HAL_ETH_MspInit+0x178>)
 8007686:	f7fd f857 	bl	8004738 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800768a:	2200      	movs	r2, #0
 800768c:	2100      	movs	r1, #0
 800768e:	203d      	movs	r0, #61	; 0x3d
 8007690:	f7fb fa7f 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007694:	203d      	movs	r0, #61	; 0x3d
 8007696:	f7fb fa98 	bl	8002bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */
    /*Reset KSZ8081*/
    HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 800769a:	2200      	movs	r2, #0
 800769c:	2180      	movs	r1, #128	; 0x80
 800769e:	480e      	ldr	r0, [pc, #56]	; (80076d8 <HAL_ETH_MspInit+0x17c>)
 80076a0:	f7fd f9f6 	bl	8004a90 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80076a4:	2001      	movs	r0, #1
 80076a6:	f7fb f951 	bl	800294c <HAL_Delay>
    HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80076aa:	2201      	movs	r2, #1
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	480a      	ldr	r0, [pc, #40]	; (80076d8 <HAL_ETH_MspInit+0x17c>)
 80076b0:	f7fd f9ee 	bl	8004a90 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80076b4:	2001      	movs	r0, #1
 80076b6:	f7fb f949 	bl	800294c <HAL_Delay>
  /* USER CODE END ETH_MspInit 1 */
  }
}
 80076ba:	bf00      	nop
 80076bc:	3738      	adds	r7, #56	; 0x38
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40028000 	.word	0x40028000
 80076c8:	40023800 	.word	0x40023800
 80076cc:	40020800 	.word	0x40020800
 80076d0:	40020000 	.word	0x40020000
 80076d4:	40020400 	.word	0x40020400
 80076d8:	40021000 	.word	0x40021000

080076dc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80076e0:	4802      	ldr	r0, [pc, #8]	; (80076ec <ETH_PHY_IO_Init+0x10>)
 80076e2:	f7fc f8c7 	bl	8003874 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	2000500c 	.word	0x2000500c

080076f0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
  return 0;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	68f9      	ldr	r1, [r7, #12]
 8007712:	4807      	ldr	r0, [pc, #28]	; (8007730 <ETH_PHY_IO_ReadReg+0x30>)
 8007714:	f7fb ff16 	bl	8003544 <HAL_ETH_ReadPHYRegister>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800771e:	f04f 33ff 	mov.w	r3, #4294967295
 8007722:	e000      	b.n	8007726 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	2000500c 	.word	0x2000500c

08007734 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	68f9      	ldr	r1, [r7, #12]
 8007746:	4807      	ldr	r0, [pc, #28]	; (8007764 <ETH_PHY_IO_WriteReg+0x30>)
 8007748:	f7fb ff47 	bl	80035da <HAL_ETH_WritePHYRegister>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007752:	f04f 33ff 	mov.w	r3, #4294967295
 8007756:	e000      	b.n	800775a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	2000500c 	.word	0x2000500c

08007768 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800776c:	f7fb f8e2 	bl	8002934 <HAL_GetTick>
 8007770:	4603      	mov	r3, r0
}
 8007772:	4618      	mov	r0, r3
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b0a0      	sub	sp, #128	; 0x80
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007780:	f107 030c 	add.w	r3, r7, #12
 8007784:	2264      	movs	r2, #100	; 0x64
 8007786:	2100      	movs	r1, #0
 8007788:	4618      	mov	r0, r3
 800778a:	f009 ff17 	bl	80115bc <memset>
  int32_t PHYLinkState = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007796:	2300      	movs	r3, #0
 8007798:	67bb      	str	r3, [r7, #120]	; 0x78
 800779a:	2300      	movs	r3, #0
 800779c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800779e:	483a      	ldr	r0, [pc, #232]	; (8007888 <ethernet_link_check_state+0x110>)
 80077a0:	f7fa ffa7 	bl	80026f2 <LAN8742_GetLinkState>
 80077a4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077ac:	089b      	lsrs	r3, r3, #2
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00c      	beq.n	80077d2 <ethernet_link_check_state+0x5a>
 80077b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	dc09      	bgt.n	80077d2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80077be:	4833      	ldr	r0, [pc, #204]	; (800788c <ethernet_link_check_state+0x114>)
 80077c0:	f7fb fba7 	bl	8002f12 <HAL_ETH_Stop>
    netif_set_down(netif);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f8c1 	bl	800894c <netif_set_down>
    netif_set_link_down(netif);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 f924 	bl	8008a18 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80077d0:	e055      	b.n	800787e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d14e      	bne.n	800787e <ethernet_link_check_state+0x106>
 80077e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	dd4b      	ble.n	800787e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80077e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077e8:	3b02      	subs	r3, #2
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d82a      	bhi.n	8007844 <ethernet_link_check_state+0xcc>
 80077ee:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <ethernet_link_check_state+0x7c>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	08007805 	.word	0x08007805
 80077f8:	08007817 	.word	0x08007817
 80077fc:	08007827 	.word	0x08007827
 8007800:	08007837 	.word	0x08007837
      duplex = ETH_FULLDUPLEX_MODE;
 8007804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007808:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800780a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800780e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007810:	2301      	movs	r3, #1
 8007812:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007814:	e017      	b.n	8007846 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007816:	2300      	movs	r3, #0
 8007818:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800781a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800781e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007820:	2301      	movs	r3, #1
 8007822:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007824:	e00f      	b.n	8007846 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8007826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800782a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800782c:	2300      	movs	r3, #0
 800782e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007830:	2301      	movs	r3, #1
 8007832:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007834:	e007      	b.n	8007846 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007836:	2300      	movs	r3, #0
 8007838:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800783a:	2300      	movs	r3, #0
 800783c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800783e:	2301      	movs	r3, #1
 8007840:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007842:	e000      	b.n	8007846 <ethernet_link_check_state+0xce>
      break;
 8007844:	bf00      	nop
    if(linkchanged)
 8007846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007848:	2b00      	cmp	r3, #0
 800784a:	d018      	beq.n	800787e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800784c:	f107 030c 	add.w	r3, r7, #12
 8007850:	4619      	mov	r1, r3
 8007852:	480e      	ldr	r0, [pc, #56]	; (800788c <ethernet_link_check_state+0x114>)
 8007854:	f7fb ff0a 	bl	800366c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800785c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007860:	f107 030c 	add.w	r3, r7, #12
 8007864:	4619      	mov	r1, r3
 8007866:	4809      	ldr	r0, [pc, #36]	; (800788c <ethernet_link_check_state+0x114>)
 8007868:	f7fb ffea 	bl	8003840 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800786c:	4807      	ldr	r0, [pc, #28]	; (800788c <ethernet_link_check_state+0x114>)
 800786e:	f7fb faf1 	bl	8002e54 <HAL_ETH_Start>
      netif_set_up(netif);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fffe 	bl	8008874 <netif_set_up>
      netif_set_link_up(netif);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f899 	bl	80089b0 <netif_set_link_up>
}
 800787e:	bf00      	nop
 8007880:	3780      	adds	r7, #128	; 0x80
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	200050f4 	.word	0x200050f4
 800788c:	2000500c 	.word	0x2000500c

08007890 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af02      	add	r7, sp, #8
 8007896:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007898:	4812      	ldr	r0, [pc, #72]	; (80078e4 <HAL_ETH_RxAllocateCallback+0x54>)
 800789a:	f000 fd65 	bl	8008368 <memp_malloc_pool>
 800789e:	60f8      	str	r0, [r7, #12]
  if (p)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d014      	beq.n	80078d0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f103 0220 	add.w	r2, r3, #32
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4a0d      	ldr	r2, [pc, #52]	; (80078e8 <HAL_ETH_RxAllocateCallback+0x58>)
 80078b4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80078be:	9201      	str	r2, [sp, #4]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2241      	movs	r2, #65	; 0x41
 80078c6:	2100      	movs	r1, #0
 80078c8:	2000      	movs	r0, #0
 80078ca:	f001 fa9b 	bl	8008e04 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80078ce:	e005      	b.n	80078dc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80078d0:	4b06      	ldr	r3, [pc, #24]	; (80078ec <HAL_ETH_RxAllocateCallback+0x5c>)
 80078d2:	2201      	movs	r2, #1
 80078d4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]
}
 80078dc:	bf00      	nop
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	0801573c 	.word	0x0801573c
 80078e8:	08007511 	.word	0x08007511
 80078ec:	20004ec4 	.word	0x20004ec4

080078f0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b089      	sub	sp, #36	; 0x24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3b20      	subs	r3, #32
 800790e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	2200      	movs	r2, #0
 800791a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	887a      	ldrh	r2, [r7, #2]
 8007920:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d103      	bne.n	8007932 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e003      	b.n	800793a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	69fa      	ldr	r2, [r7, #28]
 800793e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	61fb      	str	r3, [r7, #28]
 8007946:	e009      	b.n	800795c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	891a      	ldrh	r2, [r3, #8]
 800794c:	887b      	ldrh	r3, [r7, #2]
 800794e:	4413      	add	r3, r2
 8007950:	b29a      	uxth	r2, r3
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	61fb      	str	r3, [r7, #28]
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f2      	bne.n	8007948 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	3724      	adds	r7, #36	; 0x24
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	b21a      	sxth	r2, r3
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	b29b      	uxth	r3, r3
 8007986:	b21b      	sxth	r3, r3
 8007988:	4313      	orrs	r3, r2
 800798a:	b21b      	sxth	r3, r3
 800798c:	b29b      	uxth	r3, r3
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	061a      	lsls	r2, r3, #24
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	0e1b      	lsrs	r3, r3, #24
 80079be:	4313      	orrs	r3, r2
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b089      	sub	sp, #36	; 0x24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00d      	beq.n	8007a0c <lwip_standard_chksum+0x40>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dd0a      	ble.n	8007a0c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	1c53      	adds	r3, r2, #1
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	f107 030e 	add.w	r3, r7, #14
 8007a00:	3301      	adds	r3, #1
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	701a      	strb	r2, [r3, #0]
    len--;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8007a10:	e00a      	b.n	8007a28 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	1c9a      	adds	r2, r3, #2
 8007a16:	61ba      	str	r2, [r7, #24]
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	4413      	add	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
    len -= 2;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	3b02      	subs	r3, #2
 8007a26:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	dcf1      	bgt.n	8007a12 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	dd04      	ble.n	8007a3e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8007a34:	f107 030e 	add.w	r3, r7, #14
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	7812      	ldrb	r2, [r2, #0]
 8007a3c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8007a3e:	89fb      	ldrh	r3, [r7, #14]
 8007a40:	461a      	mov	r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	4413      	add	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	0c1a      	lsrs	r2, r3, #16
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	4413      	add	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	0c1a      	lsrs	r2, r3, #16
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d007      	beq.n	8007a76 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	0a1b      	lsrs	r3, r3, #8
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	b29b      	uxth	r3, r3
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3724      	adds	r7, #36	; 0x24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b086      	sub	sp, #24
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	613b      	str	r3, [r7, #16]
 8007a9a:	e02b      	b.n	8007af4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	895b      	ldrh	r3, [r3, #10]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	f7ff ff90 	bl	80079cc <lwip_standard_chksum>
 8007aac:	4603      	mov	r3, r0
 8007aae:	461a      	mov	r2, r3
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	0c1a      	lsrs	r2, r3, #16
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	4413      	add	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	895b      	ldrh	r3, [r3, #10]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00e      	beq.n	8007aee <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bf0c      	ite	eq
 8007ad6:	2301      	moveq	r3, #1
 8007ad8:	2300      	movne	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	0a1b      	lsrs	r3, r3, #8
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1d0      	bne.n	8007a9c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d007      	beq.n	8007b10 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	0a1b      	lsrs	r3, r3, #8
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	43db      	mvns	r3, r3
 8007b16:	b29b      	uxth	r3, r3
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007b2a:	f000 f8d5 	bl	8007cd8 <mem_init>
  memp_init();
 8007b2e:	f000 fbd7 	bl	80082e0 <memp_init>
  pbuf_init();
  netif_init();
 8007b32:	f000 fcd5 	bl	80084e0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007b36:	f007 f853 	bl	800ebe0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007b3a:	f001 fdab 	bl	8009694 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007b3e:	f006 ffc5 	bl	800eacc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007b56:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <ptr_to_mem+0x20>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	88fb      	ldrh	r3, [r7, #6]
 8007b5c:	4413      	add	r3, r2
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	2000512c 	.word	0x2000512c

08007b70 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <mem_to_ptr+0x20>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	b29b      	uxth	r3, r3
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	2000512c 	.word	0x2000512c

08007b94 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007b94:	b590      	push	{r4, r7, lr}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007b9c:	4b45      	ldr	r3, [pc, #276]	; (8007cb4 <plug_holes+0x120>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d206      	bcs.n	8007bb4 <plug_holes+0x20>
 8007ba6:	4b44      	ldr	r3, [pc, #272]	; (8007cb8 <plug_holes+0x124>)
 8007ba8:	f240 12df 	movw	r2, #479	; 0x1df
 8007bac:	4943      	ldr	r1, [pc, #268]	; (8007cbc <plug_holes+0x128>)
 8007bae:	4844      	ldr	r0, [pc, #272]	; (8007cc0 <plug_holes+0x12c>)
 8007bb0:	f009 fdec 	bl	801178c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007bb4:	4b43      	ldr	r3, [pc, #268]	; (8007cc4 <plug_holes+0x130>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d306      	bcc.n	8007bcc <plug_holes+0x38>
 8007bbe:	4b3e      	ldr	r3, [pc, #248]	; (8007cb8 <plug_holes+0x124>)
 8007bc0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007bc4:	4940      	ldr	r1, [pc, #256]	; (8007cc8 <plug_holes+0x134>)
 8007bc6:	483e      	ldr	r0, [pc, #248]	; (8007cc0 <plug_holes+0x12c>)
 8007bc8:	f009 fde0 	bl	801178c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	791b      	ldrb	r3, [r3, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d006      	beq.n	8007be2 <plug_holes+0x4e>
 8007bd4:	4b38      	ldr	r3, [pc, #224]	; (8007cb8 <plug_holes+0x124>)
 8007bd6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007bda:	493c      	ldr	r1, [pc, #240]	; (8007ccc <plug_holes+0x138>)
 8007bdc:	4838      	ldr	r0, [pc, #224]	; (8007cc0 <plug_holes+0x12c>)
 8007bde:	f009 fdd5 	bl	801178c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007bea:	d906      	bls.n	8007bfa <plug_holes+0x66>
 8007bec:	4b32      	ldr	r3, [pc, #200]	; (8007cb8 <plug_holes+0x124>)
 8007bee:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007bf2:	4937      	ldr	r1, [pc, #220]	; (8007cd0 <plug_holes+0x13c>)
 8007bf4:	4832      	ldr	r0, [pc, #200]	; (8007cc0 <plug_holes+0x12c>)
 8007bf6:	f009 fdc9 	bl	801178c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff ffa4 	bl	8007b4c <ptr_to_mem>
 8007c04:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d024      	beq.n	8007c58 <plug_holes+0xc4>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	791b      	ldrb	r3, [r3, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d120      	bne.n	8007c58 <plug_holes+0xc4>
 8007c16:	4b2b      	ldr	r3, [pc, #172]	; (8007cc4 <plug_holes+0x130>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d01b      	beq.n	8007c58 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007c20:	4b2c      	ldr	r3, [pc, #176]	; (8007cd4 <plug_holes+0x140>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d102      	bne.n	8007c30 <plug_holes+0x9c>
      lfree = mem;
 8007c2a:	4a2a      	ldr	r2, [pc, #168]	; (8007cd4 <plug_holes+0x140>)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	881a      	ldrh	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c40:	d00a      	beq.n	8007c58 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff ff80 	bl	8007b4c <ptr_to_mem>
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff ff8e 	bl	8007b70 <mem_to_ptr>
 8007c54:	4603      	mov	r3, r0
 8007c56:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	885b      	ldrh	r3, [r3, #2]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff ff75 	bl	8007b4c <ptr_to_mem>
 8007c62:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d01f      	beq.n	8007cac <plug_holes+0x118>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	791b      	ldrb	r3, [r3, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d11b      	bne.n	8007cac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007c74:	4b17      	ldr	r3, [pc, #92]	; (8007cd4 <plug_holes+0x140>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d102      	bne.n	8007c84 <plug_holes+0xf0>
      lfree = pmem;
 8007c7e:	4a15      	ldr	r2, [pc, #84]	; (8007cd4 <plug_holes+0x140>)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	881a      	ldrh	r2, [r3, #0]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c94:	d00a      	beq.n	8007cac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff ff56 	bl	8007b4c <ptr_to_mem>
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	68b8      	ldr	r0, [r7, #8]
 8007ca4:	f7ff ff64 	bl	8007b70 <mem_to_ptr>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007cac:	bf00      	nop
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd90      	pop	{r4, r7, pc}
 8007cb4:	2000512c 	.word	0x2000512c
 8007cb8:	08012d98 	.word	0x08012d98
 8007cbc:	08012dc8 	.word	0x08012dc8
 8007cc0:	08012de0 	.word	0x08012de0
 8007cc4:	20005130 	.word	0x20005130
 8007cc8:	08012e08 	.word	0x08012e08
 8007ccc:	08012e24 	.word	0x08012e24
 8007cd0:	08012e40 	.word	0x08012e40
 8007cd4:	20005134 	.word	0x20005134

08007cd8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007cde:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <mem_init+0x60>)
 8007ce0:	4a16      	ldr	r2, [pc, #88]	; (8007d3c <mem_init+0x64>)
 8007ce2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007ce4:	4b14      	ldr	r3, [pc, #80]	; (8007d38 <mem_init+0x60>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007cf0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007cfe:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007d02:	f7ff ff23 	bl	8007b4c <ptr_to_mem>
 8007d06:	4603      	mov	r3, r0
 8007d08:	4a0d      	ldr	r2, [pc, #52]	; (8007d40 <mem_init+0x68>)
 8007d0a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <mem_init+0x68>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2201      	movs	r2, #1
 8007d12:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <mem_init+0x68>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007d1c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007d1e:	4b08      	ldr	r3, [pc, #32]	; (8007d40 <mem_init+0x68>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007d26:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007d28:	4b03      	ldr	r3, [pc, #12]	; (8007d38 <mem_init+0x60>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a05      	ldr	r2, [pc, #20]	; (8007d44 <mem_init+0x6c>)
 8007d2e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	2000512c 	.word	0x2000512c
 8007d3c:	30044000 	.word	0x30044000
 8007d40:	20005130 	.word	0x20005130
 8007d44:	20005134 	.word	0x20005134

08007d48 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff ff0d 	bl	8007b70 <mem_to_ptr>
 8007d56:	4603      	mov	r3, r0
 8007d58:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fef4 	bl	8007b4c <ptr_to_mem>
 8007d64:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	885b      	ldrh	r3, [r3, #2]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff feee 	bl	8007b4c <ptr_to_mem>
 8007d70:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d7a:	d818      	bhi.n	8007dae <mem_link_valid+0x66>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	885b      	ldrh	r3, [r3, #2]
 8007d80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d84:	d813      	bhi.n	8007dae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007d8a:	8afa      	ldrh	r2, [r7, #22]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d004      	beq.n	8007d9a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	8afa      	ldrh	r2, [r7, #22]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d109      	bne.n	8007dae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007d9a:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <mem_link_valid+0x74>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d006      	beq.n	8007db2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	885b      	ldrh	r3, [r3, #2]
 8007da8:	8afa      	ldrh	r2, [r7, #22]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d001      	beq.n	8007db2 <mem_link_valid+0x6a>
    return 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	e000      	b.n	8007db4 <mem_link_valid+0x6c>
  }
  return 1;
 8007db2:	2301      	movs	r3, #1
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20005130 	.word	0x20005130

08007dc0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d04c      	beq.n	8007e68 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f003 0303 	and.w	r3, r3, #3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d007      	beq.n	8007de8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007dd8:	4b25      	ldr	r3, [pc, #148]	; (8007e70 <mem_free+0xb0>)
 8007dda:	f240 2273 	movw	r2, #627	; 0x273
 8007dde:	4925      	ldr	r1, [pc, #148]	; (8007e74 <mem_free+0xb4>)
 8007de0:	4825      	ldr	r0, [pc, #148]	; (8007e78 <mem_free+0xb8>)
 8007de2:	f009 fcd3 	bl	801178c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007de6:	e040      	b.n	8007e6a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3b08      	subs	r3, #8
 8007dec:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007dee:	4b23      	ldr	r3, [pc, #140]	; (8007e7c <mem_free+0xbc>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d306      	bcc.n	8007e06 <mem_free+0x46>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f103 020c 	add.w	r2, r3, #12
 8007dfe:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <mem_free+0xc0>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d907      	bls.n	8007e16 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007e06:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <mem_free+0xb0>)
 8007e08:	f240 227f 	movw	r2, #639	; 0x27f
 8007e0c:	491d      	ldr	r1, [pc, #116]	; (8007e84 <mem_free+0xc4>)
 8007e0e:	481a      	ldr	r0, [pc, #104]	; (8007e78 <mem_free+0xb8>)
 8007e10:	f009 fcbc 	bl	801178c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007e14:	e029      	b.n	8007e6a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	791b      	ldrb	r3, [r3, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d107      	bne.n	8007e2e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007e1e:	4b14      	ldr	r3, [pc, #80]	; (8007e70 <mem_free+0xb0>)
 8007e20:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007e24:	4918      	ldr	r1, [pc, #96]	; (8007e88 <mem_free+0xc8>)
 8007e26:	4814      	ldr	r0, [pc, #80]	; (8007e78 <mem_free+0xb8>)
 8007e28:	f009 fcb0 	bl	801178c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007e2c:	e01d      	b.n	8007e6a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff ff8a 	bl	8007d48 <mem_link_valid>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d107      	bne.n	8007e4a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	; (8007e70 <mem_free+0xb0>)
 8007e3c:	f240 2295 	movw	r2, #661	; 0x295
 8007e40:	4912      	ldr	r1, [pc, #72]	; (8007e8c <mem_free+0xcc>)
 8007e42:	480d      	ldr	r0, [pc, #52]	; (8007e78 <mem_free+0xb8>)
 8007e44:	f009 fca2 	bl	801178c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007e48:	e00f      	b.n	8007e6a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007e50:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <mem_free+0xd0>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d202      	bcs.n	8007e60 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007e5a:	4a0d      	ldr	r2, [pc, #52]	; (8007e90 <mem_free+0xd0>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff fe97 	bl	8007b94 <plug_holes>
 8007e66:	e000      	b.n	8007e6a <mem_free+0xaa>
    return;
 8007e68:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	08012d98 	.word	0x08012d98
 8007e74:	08012e6c 	.word	0x08012e6c
 8007e78:	08012de0 	.word	0x08012de0
 8007e7c:	2000512c 	.word	0x2000512c
 8007e80:	20005130 	.word	0x20005130
 8007e84:	08012e90 	.word	0x08012e90
 8007e88:	08012eac 	.word	0x08012eac
 8007e8c:	08012ed4 	.word	0x08012ed4
 8007e90:	20005134 	.word	0x20005134

08007e94 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007ea0:	887b      	ldrh	r3, [r7, #2]
 8007ea2:	3303      	adds	r3, #3
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f023 0303 	bic.w	r3, r3, #3
 8007eaa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007eac:	8bfb      	ldrh	r3, [r7, #30]
 8007eae:	2b0b      	cmp	r3, #11
 8007eb0:	d801      	bhi.n	8007eb6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007eb6:	8bfb      	ldrh	r3, [r7, #30]
 8007eb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ebc:	d803      	bhi.n	8007ec6 <mem_trim+0x32>
 8007ebe:	8bfa      	ldrh	r2, [r7, #30]
 8007ec0:	887b      	ldrh	r3, [r7, #2]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d201      	bcs.n	8007eca <mem_trim+0x36>
    return NULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e0cc      	b.n	8008064 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007eca:	4b68      	ldr	r3, [pc, #416]	; (800806c <mem_trim+0x1d8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d304      	bcc.n	8007ede <mem_trim+0x4a>
 8007ed4:	4b66      	ldr	r3, [pc, #408]	; (8008070 <mem_trim+0x1dc>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d306      	bcc.n	8007eec <mem_trim+0x58>
 8007ede:	4b65      	ldr	r3, [pc, #404]	; (8008074 <mem_trim+0x1e0>)
 8007ee0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007ee4:	4964      	ldr	r1, [pc, #400]	; (8008078 <mem_trim+0x1e4>)
 8007ee6:	4865      	ldr	r0, [pc, #404]	; (800807c <mem_trim+0x1e8>)
 8007ee8:	f009 fc50 	bl	801178c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007eec:	4b5f      	ldr	r3, [pc, #380]	; (800806c <mem_trim+0x1d8>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d304      	bcc.n	8007f00 <mem_trim+0x6c>
 8007ef6:	4b5e      	ldr	r3, [pc, #376]	; (8008070 <mem_trim+0x1dc>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d301      	bcc.n	8007f04 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	e0af      	b.n	8008064 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3b08      	subs	r3, #8
 8007f08:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007f0a:	69b8      	ldr	r0, [r7, #24]
 8007f0c:	f7ff fe30 	bl	8007b70 <mem_to_ptr>
 8007f10:	4603      	mov	r3, r0
 8007f12:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	881a      	ldrh	r2, [r3, #0]
 8007f18:	8afb      	ldrh	r3, [r7, #22]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b08      	subs	r3, #8
 8007f20:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007f22:	8bfa      	ldrh	r2, [r7, #30]
 8007f24:	8abb      	ldrh	r3, [r7, #20]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d906      	bls.n	8007f38 <mem_trim+0xa4>
 8007f2a:	4b52      	ldr	r3, [pc, #328]	; (8008074 <mem_trim+0x1e0>)
 8007f2c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007f30:	4953      	ldr	r1, [pc, #332]	; (8008080 <mem_trim+0x1ec>)
 8007f32:	4852      	ldr	r0, [pc, #328]	; (800807c <mem_trim+0x1e8>)
 8007f34:	f009 fc2a 	bl	801178c <iprintf>
  if (newsize > size) {
 8007f38:	8bfa      	ldrh	r2, [r7, #30]
 8007f3a:	8abb      	ldrh	r3, [r7, #20]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d901      	bls.n	8007f44 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	e08f      	b.n	8008064 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007f44:	8bfa      	ldrh	r2, [r7, #30]
 8007f46:	8abb      	ldrh	r3, [r7, #20]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d101      	bne.n	8007f50 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	e089      	b.n	8008064 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7ff fdf9 	bl	8007b4c <ptr_to_mem>
 8007f5a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	791b      	ldrb	r3, [r3, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d13f      	bne.n	8007fe4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007f6c:	d106      	bne.n	8007f7c <mem_trim+0xe8>
 8007f6e:	4b41      	ldr	r3, [pc, #260]	; (8008074 <mem_trim+0x1e0>)
 8007f70:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007f74:	4943      	ldr	r1, [pc, #268]	; (8008084 <mem_trim+0x1f0>)
 8007f76:	4841      	ldr	r0, [pc, #260]	; (800807c <mem_trim+0x1e8>)
 8007f78:	f009 fc08 	bl	801178c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007f82:	8afa      	ldrh	r2, [r7, #22]
 8007f84:	8bfb      	ldrh	r3, [r7, #30]
 8007f86:	4413      	add	r3, r2
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007f8e:	4b3e      	ldr	r3, [pc, #248]	; (8008088 <mem_trim+0x1f4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d106      	bne.n	8007fa6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007f98:	89fb      	ldrh	r3, [r7, #14]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fdd6 	bl	8007b4c <ptr_to_mem>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	4a39      	ldr	r2, [pc, #228]	; (8008088 <mem_trim+0x1f4>)
 8007fa4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007fa6:	89fb      	ldrh	r3, [r7, #14]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7ff fdcf 	bl	8007b4c <ptr_to_mem>
 8007fae:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	89ba      	ldrh	r2, [r7, #12]
 8007fba:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	8afa      	ldrh	r2, [r7, #22]
 8007fc0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	89fa      	ldrh	r2, [r7, #14]
 8007fc6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007fd0:	d047      	beq.n	8008062 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff fdb8 	bl	8007b4c <ptr_to_mem>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	89fb      	ldrh	r3, [r7, #14]
 8007fe0:	8053      	strh	r3, [r2, #2]
 8007fe2:	e03e      	b.n	8008062 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007fe4:	8bfb      	ldrh	r3, [r7, #30]
 8007fe6:	f103 0214 	add.w	r2, r3, #20
 8007fea:	8abb      	ldrh	r3, [r7, #20]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d838      	bhi.n	8008062 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007ff0:	8afa      	ldrh	r2, [r7, #22]
 8007ff2:	8bfb      	ldrh	r3, [r7, #30]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008004:	d106      	bne.n	8008014 <mem_trim+0x180>
 8008006:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <mem_trim+0x1e0>)
 8008008:	f240 3216 	movw	r2, #790	; 0x316
 800800c:	491d      	ldr	r1, [pc, #116]	; (8008084 <mem_trim+0x1f0>)
 800800e:	481b      	ldr	r0, [pc, #108]	; (800807c <mem_trim+0x1e8>)
 8008010:	f009 fbbc 	bl	801178c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008014:	89fb      	ldrh	r3, [r7, #14]
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff fd98 	bl	8007b4c <ptr_to_mem>
 800801c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800801e:	4b1a      	ldr	r3, [pc, #104]	; (8008088 <mem_trim+0x1f4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	429a      	cmp	r2, r3
 8008026:	d202      	bcs.n	800802e <mem_trim+0x19a>
      lfree = mem2;
 8008028:	4a17      	ldr	r2, [pc, #92]	; (8008088 <mem_trim+0x1f4>)
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2200      	movs	r2, #0
 8008032:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	881a      	ldrh	r2, [r3, #0]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	8afa      	ldrh	r2, [r7, #22]
 8008040:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	89fa      	ldrh	r2, [r7, #14]
 8008046:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008050:	d007      	beq.n	8008062 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff fd78 	bl	8007b4c <ptr_to_mem>
 800805c:	4602      	mov	r2, r0
 800805e:	89fb      	ldrh	r3, [r7, #14]
 8008060:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008062:	687b      	ldr	r3, [r7, #4]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	2000512c 	.word	0x2000512c
 8008070:	20005130 	.word	0x20005130
 8008074:	08012d98 	.word	0x08012d98
 8008078:	08012f08 	.word	0x08012f08
 800807c:	08012de0 	.word	0x08012de0
 8008080:	08012f20 	.word	0x08012f20
 8008084:	08012f40 	.word	0x08012f40
 8008088:	20005134 	.word	0x20005134

0800808c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <mem_malloc+0x14>
    return NULL;
 800809c:	2300      	movs	r3, #0
 800809e:	e0d9      	b.n	8008254 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80080a0:	88fb      	ldrh	r3, [r7, #6]
 80080a2:	3303      	adds	r3, #3
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f023 0303 	bic.w	r3, r3, #3
 80080aa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80080ac:	8bbb      	ldrh	r3, [r7, #28]
 80080ae:	2b0b      	cmp	r3, #11
 80080b0:	d801      	bhi.n	80080b6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80080b2:	230c      	movs	r3, #12
 80080b4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80080b6:	8bbb      	ldrh	r3, [r7, #28]
 80080b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80080bc:	d803      	bhi.n	80080c6 <mem_malloc+0x3a>
 80080be:	8bba      	ldrh	r2, [r7, #28]
 80080c0:	88fb      	ldrh	r3, [r7, #6]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d201      	bcs.n	80080ca <mem_malloc+0x3e>
    return NULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	e0c4      	b.n	8008254 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80080ca:	4b64      	ldr	r3, [pc, #400]	; (800825c <mem_malloc+0x1d0>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff fd4e 	bl	8007b70 <mem_to_ptr>
 80080d4:	4603      	mov	r3, r0
 80080d6:	83fb      	strh	r3, [r7, #30]
 80080d8:	e0b4      	b.n	8008244 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80080da:	8bfb      	ldrh	r3, [r7, #30]
 80080dc:	4618      	mov	r0, r3
 80080de:	f7ff fd35 	bl	8007b4c <ptr_to_mem>
 80080e2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	791b      	ldrb	r3, [r3, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f040 80a4 	bne.w	8008236 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	8bfb      	ldrh	r3, [r7, #30]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	f1a3 0208 	sub.w	r2, r3, #8
 80080fc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80080fe:	429a      	cmp	r2, r3
 8008100:	f0c0 8099 	bcc.w	8008236 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	8bfb      	ldrh	r3, [r7, #30]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	f1a3 0208 	sub.w	r2, r3, #8
 8008112:	8bbb      	ldrh	r3, [r7, #28]
 8008114:	3314      	adds	r3, #20
 8008116:	429a      	cmp	r2, r3
 8008118:	d333      	bcc.n	8008182 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800811a:	8bfa      	ldrh	r2, [r7, #30]
 800811c:	8bbb      	ldrh	r3, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	b29b      	uxth	r3, r3
 8008122:	3308      	adds	r3, #8
 8008124:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008126:	8a7b      	ldrh	r3, [r7, #18]
 8008128:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800812c:	d106      	bne.n	800813c <mem_malloc+0xb0>
 800812e:	4b4c      	ldr	r3, [pc, #304]	; (8008260 <mem_malloc+0x1d4>)
 8008130:	f240 3287 	movw	r2, #903	; 0x387
 8008134:	494b      	ldr	r1, [pc, #300]	; (8008264 <mem_malloc+0x1d8>)
 8008136:	484c      	ldr	r0, [pc, #304]	; (8008268 <mem_malloc+0x1dc>)
 8008138:	f009 fb28 	bl	801178c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800813c:	8a7b      	ldrh	r3, [r7, #18]
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff fd04 	bl	8007b4c <ptr_to_mem>
 8008144:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	881a      	ldrh	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8bfa      	ldrh	r2, [r7, #30]
 8008158:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	8a7a      	ldrh	r2, [r7, #18]
 800815e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2201      	movs	r2, #1
 8008164:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800816e:	d00b      	beq.n	8008188 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fce9 	bl	8007b4c <ptr_to_mem>
 800817a:	4602      	mov	r2, r0
 800817c:	8a7b      	ldrh	r3, [r7, #18]
 800817e:	8053      	strh	r3, [r2, #2]
 8008180:	e002      	b.n	8008188 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2201      	movs	r2, #1
 8008186:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008188:	4b34      	ldr	r3, [pc, #208]	; (800825c <mem_malloc+0x1d0>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	429a      	cmp	r2, r3
 8008190:	d127      	bne.n	80081e2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008192:	4b32      	ldr	r3, [pc, #200]	; (800825c <mem_malloc+0x1d0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008198:	e005      	b.n	80081a6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff fcd4 	bl	8007b4c <ptr_to_mem>
 80081a4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	791b      	ldrb	r3, [r3, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d004      	beq.n	80081b8 <mem_malloc+0x12c>
 80081ae:	4b2f      	ldr	r3, [pc, #188]	; (800826c <mem_malloc+0x1e0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d1f0      	bne.n	800819a <mem_malloc+0x10e>
          }
          lfree = cur;
 80081b8:	4a28      	ldr	r2, [pc, #160]	; (800825c <mem_malloc+0x1d0>)
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80081be:	4b27      	ldr	r3, [pc, #156]	; (800825c <mem_malloc+0x1d0>)
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	4b2a      	ldr	r3, [pc, #168]	; (800826c <mem_malloc+0x1e0>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d00b      	beq.n	80081e2 <mem_malloc+0x156>
 80081ca:	4b24      	ldr	r3, [pc, #144]	; (800825c <mem_malloc+0x1d0>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	791b      	ldrb	r3, [r3, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d006      	beq.n	80081e2 <mem_malloc+0x156>
 80081d4:	4b22      	ldr	r3, [pc, #136]	; (8008260 <mem_malloc+0x1d4>)
 80081d6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80081da:	4925      	ldr	r1, [pc, #148]	; (8008270 <mem_malloc+0x1e4>)
 80081dc:	4822      	ldr	r0, [pc, #136]	; (8008268 <mem_malloc+0x1dc>)
 80081de:	f009 fad5 	bl	801178c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80081e2:	8bba      	ldrh	r2, [r7, #28]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	4413      	add	r3, r2
 80081e8:	3308      	adds	r3, #8
 80081ea:	4a20      	ldr	r2, [pc, #128]	; (800826c <mem_malloc+0x1e0>)
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d906      	bls.n	8008200 <mem_malloc+0x174>
 80081f2:	4b1b      	ldr	r3, [pc, #108]	; (8008260 <mem_malloc+0x1d4>)
 80081f4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80081f8:	491e      	ldr	r1, [pc, #120]	; (8008274 <mem_malloc+0x1e8>)
 80081fa:	481b      	ldr	r0, [pc, #108]	; (8008268 <mem_malloc+0x1dc>)
 80081fc:	f009 fac6 	bl	801178c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d006      	beq.n	8008218 <mem_malloc+0x18c>
 800820a:	4b15      	ldr	r3, [pc, #84]	; (8008260 <mem_malloc+0x1d4>)
 800820c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008210:	4919      	ldr	r1, [pc, #100]	; (8008278 <mem_malloc+0x1ec>)
 8008212:	4815      	ldr	r0, [pc, #84]	; (8008268 <mem_malloc+0x1dc>)
 8008214:	f009 faba 	bl	801178c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d006      	beq.n	8008230 <mem_malloc+0x1a4>
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <mem_malloc+0x1d4>)
 8008224:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008228:	4914      	ldr	r1, [pc, #80]	; (800827c <mem_malloc+0x1f0>)
 800822a:	480f      	ldr	r0, [pc, #60]	; (8008268 <mem_malloc+0x1dc>)
 800822c:	f009 faae 	bl	801178c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	3308      	adds	r3, #8
 8008234:	e00e      	b.n	8008254 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008236:	8bfb      	ldrh	r3, [r7, #30]
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff fc87 	bl	8007b4c <ptr_to_mem>
 800823e:	4603      	mov	r3, r0
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008244:	8bfa      	ldrh	r2, [r7, #30]
 8008246:	8bbb      	ldrh	r3, [r7, #28]
 8008248:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800824c:	429a      	cmp	r2, r3
 800824e:	f4ff af44 	bcc.w	80080da <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	20005134 	.word	0x20005134
 8008260:	08012d98 	.word	0x08012d98
 8008264:	08012f40 	.word	0x08012f40
 8008268:	08012de0 	.word	0x08012de0
 800826c:	20005130 	.word	0x20005130
 8008270:	08012f54 	.word	0x08012f54
 8008274:	08012f70 	.word	0x08012f70
 8008278:	08012fa0 	.word	0x08012fa0
 800827c:	08012fd0 	.word	0x08012fd0

08008280 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	3303      	adds	r3, #3
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	e011      	b.n	80082c6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	4413      	add	r3, r2
 80082be:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3301      	adds	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	885b      	ldrh	r3, [r3, #2]
 80082ca:	461a      	mov	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4293      	cmp	r3, r2
 80082d0:	dbe7      	blt.n	80082a2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80082e6:	2300      	movs	r3, #0
 80082e8:	80fb      	strh	r3, [r7, #6]
 80082ea:	e009      	b.n	8008300 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80082ec:	88fb      	ldrh	r3, [r7, #6]
 80082ee:	4a08      	ldr	r2, [pc, #32]	; (8008310 <memp_init+0x30>)
 80082f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff ffc3 	bl	8008280 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80082fa:	88fb      	ldrh	r3, [r7, #6]
 80082fc:	3301      	adds	r3, #1
 80082fe:	80fb      	strh	r3, [r7, #6]
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	2b08      	cmp	r3, #8
 8008304:	d9f2      	bls.n	80082ec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	080157b4 	.word	0x080157b4

08008314 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d012      	beq.n	8008350 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	6812      	ldr	r2, [r2, #0]
 8008332:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f003 0303 	and.w	r3, r3, #3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d006      	beq.n	800834c <do_memp_malloc_pool+0x38>
 800833e:	4b07      	ldr	r3, [pc, #28]	; (800835c <do_memp_malloc_pool+0x48>)
 8008340:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008344:	4906      	ldr	r1, [pc, #24]	; (8008360 <do_memp_malloc_pool+0x4c>)
 8008346:	4807      	ldr	r0, [pc, #28]	; (8008364 <do_memp_malloc_pool+0x50>)
 8008348:	f009 fa20 	bl	801178c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	e000      	b.n	8008352 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	08012ff4 	.word	0x08012ff4
 8008360:	08013024 	.word	0x08013024
 8008364:	08013048 	.word	0x08013048

08008368 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d106      	bne.n	8008384 <memp_malloc_pool+0x1c>
 8008376:	4b0a      	ldr	r3, [pc, #40]	; (80083a0 <memp_malloc_pool+0x38>)
 8008378:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800837c:	4909      	ldr	r1, [pc, #36]	; (80083a4 <memp_malloc_pool+0x3c>)
 800837e:	480a      	ldr	r0, [pc, #40]	; (80083a8 <memp_malloc_pool+0x40>)
 8008380:	f009 fa04 	bl	801178c <iprintf>
  if (desc == NULL) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <memp_malloc_pool+0x26>
    return NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	e003      	b.n	8008396 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff ffc0 	bl	8008314 <do_memp_malloc_pool>
 8008394:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	08012ff4 	.word	0x08012ff4
 80083a4:	08013070 	.word	0x08013070
 80083a8:	08013048 	.word	0x08013048

080083ac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d908      	bls.n	80083ce <memp_malloc+0x22>
 80083bc:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <memp_malloc+0x3c>)
 80083be:	f240 1257 	movw	r2, #343	; 0x157
 80083c2:	490a      	ldr	r1, [pc, #40]	; (80083ec <memp_malloc+0x40>)
 80083c4:	480a      	ldr	r0, [pc, #40]	; (80083f0 <memp_malloc+0x44>)
 80083c6:	f009 f9e1 	bl	801178c <iprintf>
 80083ca:	2300      	movs	r3, #0
 80083cc:	e008      	b.n	80083e0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <memp_malloc+0x48>)
 80083d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff ff9c 	bl	8008314 <do_memp_malloc_pool>
 80083dc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80083de:	68fb      	ldr	r3, [r7, #12]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	08012ff4 	.word	0x08012ff4
 80083ec:	08013084 	.word	0x08013084
 80083f0:	08013048 	.word	0x08013048
 80083f4:	080157b4 	.word	0x080157b4

080083f8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	f003 0303 	and.w	r3, r3, #3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d006      	beq.n	800841a <do_memp_free_pool+0x22>
 800840c:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <do_memp_free_pool+0x40>)
 800840e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008412:	490a      	ldr	r1, [pc, #40]	; (800843c <do_memp_free_pool+0x44>)
 8008414:	480a      	ldr	r0, [pc, #40]	; (8008440 <do_memp_free_pool+0x48>)
 8008416:	f009 f9b9 	bl	801178c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008430:	bf00      	nop
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	08012ff4 	.word	0x08012ff4
 800843c:	080130a4 	.word	0x080130a4
 8008440:	08013048 	.word	0x08013048

08008444 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <memp_free_pool+0x1e>
 8008454:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <memp_free_pool+0x3c>)
 8008456:	f240 1295 	movw	r2, #405	; 0x195
 800845a:	490a      	ldr	r1, [pc, #40]	; (8008484 <memp_free_pool+0x40>)
 800845c:	480a      	ldr	r0, [pc, #40]	; (8008488 <memp_free_pool+0x44>)
 800845e:	f009 f995 	bl	801178c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d007      	beq.n	8008478 <memp_free_pool+0x34>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff ffc1 	bl	80083f8 <do_memp_free_pool>
 8008476:	e000      	b.n	800847a <memp_free_pool+0x36>
    return;
 8008478:	bf00      	nop
}
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	08012ff4 	.word	0x08012ff4
 8008484:	08013070 	.word	0x08013070
 8008488:	08013048 	.word	0x08013048

0800848c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	6039      	str	r1, [r7, #0]
 8008496:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	2b08      	cmp	r3, #8
 800849c:	d907      	bls.n	80084ae <memp_free+0x22>
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <memp_free+0x44>)
 80084a0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80084a4:	490b      	ldr	r1, [pc, #44]	; (80084d4 <memp_free+0x48>)
 80084a6:	480c      	ldr	r0, [pc, #48]	; (80084d8 <memp_free+0x4c>)
 80084a8:	f009 f970 	bl	801178c <iprintf>
 80084ac:	e00c      	b.n	80084c8 <memp_free+0x3c>

  if (mem == NULL) {
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d008      	beq.n	80084c6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	4a09      	ldr	r2, [pc, #36]	; (80084dc <memp_free+0x50>)
 80084b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff ff9a 	bl	80083f8 <do_memp_free_pool>
 80084c4:	e000      	b.n	80084c8 <memp_free+0x3c>
    return;
 80084c6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	08012ff4 	.word	0x08012ff4
 80084d4:	080130c4 	.word	0x080130c4
 80084d8:	08013048 	.word	0x08013048
 80084dc:	080157b4 	.word	0x080157b4

080084e0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
	...

080084f0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d108      	bne.n	8008516 <netif_add+0x26>
 8008504:	4b57      	ldr	r3, [pc, #348]	; (8008664 <netif_add+0x174>)
 8008506:	f240 1227 	movw	r2, #295	; 0x127
 800850a:	4957      	ldr	r1, [pc, #348]	; (8008668 <netif_add+0x178>)
 800850c:	4857      	ldr	r0, [pc, #348]	; (800866c <netif_add+0x17c>)
 800850e:	f009 f93d 	bl	801178c <iprintf>
 8008512:	2300      	movs	r3, #0
 8008514:	e0a2      	b.n	800865c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	2b00      	cmp	r3, #0
 800851a:	d108      	bne.n	800852e <netif_add+0x3e>
 800851c:	4b51      	ldr	r3, [pc, #324]	; (8008664 <netif_add+0x174>)
 800851e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008522:	4953      	ldr	r1, [pc, #332]	; (8008670 <netif_add+0x180>)
 8008524:	4851      	ldr	r0, [pc, #324]	; (800866c <netif_add+0x17c>)
 8008526:	f009 f931 	bl	801178c <iprintf>
 800852a:	2300      	movs	r3, #0
 800852c:	e096      	b.n	800865c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008534:	4b4f      	ldr	r3, [pc, #316]	; (8008674 <netif_add+0x184>)
 8008536:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800853e:	4b4d      	ldr	r3, [pc, #308]	; (8008674 <netif_add+0x184>)
 8008540:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008548:	4b4a      	ldr	r3, [pc, #296]	; (8008674 <netif_add+0x184>)
 800854a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4a45      	ldr	r2, [pc, #276]	; (8008678 <netif_add+0x188>)
 8008562:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6a3a      	ldr	r2, [r7, #32]
 800857c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800857e:	4b3f      	ldr	r3, [pc, #252]	; (800867c <netif_add+0x18c>)
 8008580:	781a      	ldrb	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800858c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 f913 	bl	80087c0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	4798      	blx	r3
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <netif_add+0xba>
    return NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	e058      	b.n	800865c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085b0:	2bff      	cmp	r3, #255	; 0xff
 80085b2:	d103      	bne.n	80085bc <netif_add+0xcc>
        netif->num = 0;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80085c0:	4b2f      	ldr	r3, [pc, #188]	; (8008680 <netif_add+0x190>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	e02b      	b.n	8008620 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d106      	bne.n	80085de <netif_add+0xee>
 80085d0:	4b24      	ldr	r3, [pc, #144]	; (8008664 <netif_add+0x174>)
 80085d2:	f240 128b 	movw	r2, #395	; 0x18b
 80085d6:	492b      	ldr	r1, [pc, #172]	; (8008684 <netif_add+0x194>)
 80085d8:	4824      	ldr	r0, [pc, #144]	; (800866c <netif_add+0x17c>)
 80085da:	f009 f8d7 	bl	801178c <iprintf>
        num_netifs++;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	3301      	adds	r3, #1
 80085e2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	2bff      	cmp	r3, #255	; 0xff
 80085e8:	dd06      	ble.n	80085f8 <netif_add+0x108>
 80085ea:	4b1e      	ldr	r3, [pc, #120]	; (8008664 <netif_add+0x174>)
 80085ec:	f240 128d 	movw	r2, #397	; 0x18d
 80085f0:	4925      	ldr	r1, [pc, #148]	; (8008688 <netif_add+0x198>)
 80085f2:	481e      	ldr	r0, [pc, #120]	; (800866c <netif_add+0x17c>)
 80085f4:	f009 f8ca 	bl	801178c <iprintf>
        if (netif2->num == netif->num) {
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008604:	429a      	cmp	r2, r3
 8008606:	d108      	bne.n	800861a <netif_add+0x12a>
          netif->num++;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800860e:	3301      	adds	r3, #1
 8008610:	b2da      	uxtb	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008618:	e005      	b.n	8008626 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1d0      	bne.n	80085c8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1be      	bne.n	80085aa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008632:	2bfe      	cmp	r3, #254	; 0xfe
 8008634:	d103      	bne.n	800863e <netif_add+0x14e>
    netif_num = 0;
 8008636:	4b11      	ldr	r3, [pc, #68]	; (800867c <netif_add+0x18c>)
 8008638:	2200      	movs	r2, #0
 800863a:	701a      	strb	r2, [r3, #0]
 800863c:	e006      	b.n	800864c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008644:	3301      	adds	r3, #1
 8008646:	b2da      	uxtb	r2, r3
 8008648:	4b0c      	ldr	r3, [pc, #48]	; (800867c <netif_add+0x18c>)
 800864a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800864c:	4b0c      	ldr	r3, [pc, #48]	; (8008680 <netif_add+0x190>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008654:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <netif_add+0x190>)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800865a:	68fb      	ldr	r3, [r7, #12]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	080130e0 	.word	0x080130e0
 8008668:	08013174 	.word	0x08013174
 800866c:	08013130 	.word	0x08013130
 8008670:	08013190 	.word	0x08013190
 8008674:	08015818 	.word	0x08015818
 8008678:	08008a9b 	.word	0x08008a9b
 800867c:	2000802c 	.word	0x2000802c
 8008680:	20008024 	.word	0x20008024
 8008684:	080131b4 	.word	0x080131b4
 8008688:	080131c8 	.word	0x080131c8

0800868c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f002 fb43 	bl	800ad24 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f006 fc27 	bl	800eef4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80086a6:	bf00      	nop
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
	...

080086b0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <netif_do_set_ipaddr+0x20>
 80086c2:	4b1d      	ldr	r3, [pc, #116]	; (8008738 <netif_do_set_ipaddr+0x88>)
 80086c4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80086c8:	491c      	ldr	r1, [pc, #112]	; (800873c <netif_do_set_ipaddr+0x8c>)
 80086ca:	481d      	ldr	r0, [pc, #116]	; (8008740 <netif_do_set_ipaddr+0x90>)
 80086cc:	f009 f85e 	bl	801178c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <netif_do_set_ipaddr+0x34>
 80086d6:	4b18      	ldr	r3, [pc, #96]	; (8008738 <netif_do_set_ipaddr+0x88>)
 80086d8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80086dc:	4917      	ldr	r1, [pc, #92]	; (800873c <netif_do_set_ipaddr+0x8c>)
 80086de:	4818      	ldr	r0, [pc, #96]	; (8008740 <netif_do_set_ipaddr+0x90>)
 80086e0:	f009 f854 	bl	801178c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3304      	adds	r3, #4
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d01c      	beq.n	800872c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3304      	adds	r3, #4
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008702:	f107 0314 	add.w	r3, r7, #20
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff ffbf 	bl	800868c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <netif_do_set_ipaddr+0x6a>
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	e000      	b.n	800871c <netif_do_set_ipaddr+0x6c>
 800871a:	2300      	movs	r3, #0
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008720:	2101      	movs	r1, #1
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f8d2 	bl	80088cc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008728:	2301      	movs	r3, #1
 800872a:	e000      	b.n	800872e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	080130e0 	.word	0x080130e0
 800873c:	080131f8 	.word	0x080131f8
 8008740:	08013130 	.word	0x08013130

08008744 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3308      	adds	r3, #8
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d00a      	beq.n	8008774 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <netif_do_set_netmask+0x26>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	e000      	b.n	800876c <netif_do_set_netmask+0x28>
 800876a:	2300      	movs	r3, #0
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008770:	2301      	movs	r3, #1
 8008772:	e000      	b.n	8008776 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	60f8      	str	r0, [r7, #12]
 800878a:	60b9      	str	r1, [r7, #8]
 800878c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	330c      	adds	r3, #12
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d00a      	beq.n	80087b2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <netif_do_set_gw+0x26>
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	e000      	b.n	80087aa <netif_do_set_gw+0x28>
 80087a8:	2300      	movs	r3, #0
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80087ae:	2301      	movs	r3, #1
 80087b0:	e000      	b.n	80087b4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
 80087cc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80087dc:	4b1c      	ldr	r3, [pc, #112]	; (8008850 <netif_set_addr+0x90>)
 80087de:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80087e6:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <netif_set_addr+0x90>)
 80087e8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80087f0:	4b17      	ldr	r3, [pc, #92]	; (8008850 <netif_set_addr+0x90>)
 80087f2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <netif_set_addr+0x42>
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <netif_set_addr+0x46>
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <netif_set_addr+0x48>
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]
  if (remove) {
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d006      	beq.n	800881e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008810:	f107 0310 	add.w	r3, r7, #16
 8008814:	461a      	mov	r2, r3
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f7ff ff49 	bl	80086b0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7ff ff8e 	bl	8008744 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f7ff ffa8 	bl	8008782 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d106      	bne.n	8008846 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008838:	f107 0310 	add.w	r3, r7, #16
 800883c:	461a      	mov	r2, r3
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f7ff ff35 	bl	80086b0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008846:	bf00      	nop
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	08015818 	.word	0x08015818

08008854 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800885c:	4a04      	ldr	r2, [pc, #16]	; (8008870 <netif_set_default+0x1c>)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	20008028 	.word	0x20008028

08008874 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d107      	bne.n	8008892 <netif_set_up+0x1e>
 8008882:	4b0f      	ldr	r3, [pc, #60]	; (80088c0 <netif_set_up+0x4c>)
 8008884:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008888:	490e      	ldr	r1, [pc, #56]	; (80088c4 <netif_set_up+0x50>)
 800888a:	480f      	ldr	r0, [pc, #60]	; (80088c8 <netif_set_up+0x54>)
 800888c:	f008 ff7e 	bl	801178c <iprintf>
 8008890:	e013      	b.n	80088ba <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10c      	bne.n	80088ba <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088a6:	f043 0301 	orr.w	r3, r3, #1
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80088b2:	2103      	movs	r1, #3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f809 	bl	80088cc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	080130e0 	.word	0x080130e0
 80088c4:	08013268 	.word	0x08013268
 80088c8:	08013130 	.word	0x08013130

080088cc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <netif_issue_reports+0x20>
 80088de:	4b18      	ldr	r3, [pc, #96]	; (8008940 <netif_issue_reports+0x74>)
 80088e0:	f240 326d 	movw	r2, #877	; 0x36d
 80088e4:	4917      	ldr	r1, [pc, #92]	; (8008944 <netif_issue_reports+0x78>)
 80088e6:	4818      	ldr	r0, [pc, #96]	; (8008948 <netif_issue_reports+0x7c>)
 80088e8:	f008 ff50 	bl	801178c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01e      	beq.n	8008938 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008900:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008904:	2b00      	cmp	r3, #0
 8008906:	d017      	beq.n	8008938 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d013      	beq.n	800893a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3304      	adds	r3, #4
 8008916:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00e      	beq.n	800893a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008922:	f003 0308 	and.w	r3, r3, #8
 8008926:	2b00      	cmp	r3, #0
 8008928:	d007      	beq.n	800893a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3304      	adds	r3, #4
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f007 fa49 	bl	800fdc8 <etharp_request>
 8008936:	e000      	b.n	800893a <netif_issue_reports+0x6e>
    return;
 8008938:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	080130e0 	.word	0x080130e0
 8008944:	08013284 	.word	0x08013284
 8008948:	08013130 	.word	0x08013130

0800894c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d107      	bne.n	800896a <netif_set_down+0x1e>
 800895a:	4b12      	ldr	r3, [pc, #72]	; (80089a4 <netif_set_down+0x58>)
 800895c:	f240 329b 	movw	r2, #923	; 0x39b
 8008960:	4911      	ldr	r1, [pc, #68]	; (80089a8 <netif_set_down+0x5c>)
 8008962:	4812      	ldr	r0, [pc, #72]	; (80089ac <netif_set_down+0x60>)
 8008964:	f008 ff12 	bl	801178c <iprintf>
 8008968:	e019      	b.n	800899e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b00      	cmp	r3, #0
 8008976:	d012      	beq.n	800899e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800897e:	f023 0301 	bic.w	r3, r3, #1
 8008982:	b2da      	uxtb	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008990:	f003 0308 	and.w	r3, r3, #8
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f006 fdd3 	bl	800f544 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	080130e0 	.word	0x080130e0
 80089a8:	080132a8 	.word	0x080132a8
 80089ac:	08013130 	.word	0x08013130

080089b0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d107      	bne.n	80089ce <netif_set_link_up+0x1e>
 80089be:	4b13      	ldr	r3, [pc, #76]	; (8008a0c <netif_set_link_up+0x5c>)
 80089c0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80089c4:	4912      	ldr	r1, [pc, #72]	; (8008a10 <netif_set_link_up+0x60>)
 80089c6:	4813      	ldr	r0, [pc, #76]	; (8008a14 <netif_set_link_up+0x64>)
 80089c8:	f008 fee0 	bl	801178c <iprintf>
 80089cc:	e01b      	b.n	8008a06 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d114      	bne.n	8008a06 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089e2:	f043 0304 	orr.w	r3, r3, #4
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80089ee:	2103      	movs	r1, #3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff ff6b 	bl	80088cc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <netif_set_link_up+0x56>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	080130e0 	.word	0x080130e0
 8008a10:	080132c8 	.word	0x080132c8
 8008a14:	08013130 	.word	0x08013130

08008a18 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d107      	bne.n	8008a36 <netif_set_link_down+0x1e>
 8008a26:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <netif_set_link_down+0x54>)
 8008a28:	f240 4206 	movw	r2, #1030	; 0x406
 8008a2c:	4910      	ldr	r1, [pc, #64]	; (8008a70 <netif_set_link_down+0x58>)
 8008a2e:	4811      	ldr	r0, [pc, #68]	; (8008a74 <netif_set_link_down+0x5c>)
 8008a30:	f008 feac 	bl	801178c <iprintf>
 8008a34:	e017      	b.n	8008a66 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d010      	beq.n	8008a66 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a4a:	f023 0304 	bic.w	r3, r3, #4
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <netif_set_link_down+0x4e>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	080130e0 	.word	0x080130e0
 8008a70:	080132ec 	.word	0x080132ec
 8008a74:	08013130 	.word	0x08013130

08008a78 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	61da      	str	r2, [r3, #28]
  }
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	60f8      	str	r0, [r7, #12]
 8008aa2:	60b9      	str	r1, [r7, #8]
 8008aa4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008aa6:	f06f 030b 	mvn.w	r3, #11
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d013      	beq.n	8008af0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008ac8:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <netif_get_by_index+0x48>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	e00c      	b.n	8008aea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	79fa      	ldrb	r2, [r7, #7]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d101      	bne.n	8008ae4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	e006      	b.n	8008af2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1ef      	bne.n	8008ad0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	20008024 	.word	0x20008024

08008b04 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008b0a:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <pbuf_free_ooseq+0x38>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <pbuf_free_ooseq+0x3c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	607b      	str	r3, [r7, #4]
 8008b16:	e00a      	b.n	8008b2e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f002 f93d 	bl	800ada0 <tcp_free_ooseq>
      return;
 8008b26:	e005      	b.n	8008b34 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	607b      	str	r3, [r7, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1f1      	bne.n	8008b18 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	2000802d 	.word	0x2000802d
 8008b40:	2000803c 	.word	0x2000803c

08008b44 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008b48:	4b03      	ldr	r3, [pc, #12]	; (8008b58 <pbuf_pool_is_empty+0x14>)
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008b4e:	bf00      	nop
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	2000802d 	.word	0x2000802d

08008b5c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4611      	mov	r1, r2
 8008b68:	461a      	mov	r2, r3
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	80fb      	strh	r3, [r7, #6]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	88fa      	ldrh	r2, [r7, #6]
 8008b82:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	88ba      	ldrh	r2, [r7, #4]
 8008b88:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008b8a:	8b3b      	ldrh	r3, [r7, #24]
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	7f3a      	ldrb	r2, [r7, #28]
 8008b96:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	73da      	strb	r2, [r3, #15]
}
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08c      	sub	sp, #48	; 0x30
 8008bb4:	af02      	add	r7, sp, #8
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	71fb      	strb	r3, [r7, #7]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	80bb      	strh	r3, [r7, #4]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008bc6:	887b      	ldrh	r3, [r7, #2]
 8008bc8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008bcc:	d07f      	beq.n	8008cce <pbuf_alloc+0x11e>
 8008bce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008bd2:	f300 80c8 	bgt.w	8008d66 <pbuf_alloc+0x1b6>
 8008bd6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008bda:	d010      	beq.n	8008bfe <pbuf_alloc+0x4e>
 8008bdc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008be0:	f300 80c1 	bgt.w	8008d66 <pbuf_alloc+0x1b6>
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d002      	beq.n	8008bee <pbuf_alloc+0x3e>
 8008be8:	2b41      	cmp	r3, #65	; 0x41
 8008bea:	f040 80bc 	bne.w	8008d66 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008bee:	887a      	ldrh	r2, [r7, #2]
 8008bf0:	88bb      	ldrh	r3, [r7, #4]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	f000 f8d1 	bl	8008d9c <pbuf_alloc_reference>
 8008bfa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008bfc:	e0bd      	b.n	8008d7a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008c06:	88bb      	ldrh	r3, [r7, #4]
 8008c08:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008c0a:	2008      	movs	r0, #8
 8008c0c:	f7ff fbce 	bl	80083ac <memp_malloc>
 8008c10:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d109      	bne.n	8008c2c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008c18:	f7ff ff94 	bl	8008b44 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <pbuf_alloc+0x78>
            pbuf_free(p);
 8008c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c24:	f000 faa8 	bl	8009178 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e0a7      	b.n	8008d7c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008c2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c2e:	3303      	adds	r3, #3
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	f023 0303 	bic.w	r3, r3, #3
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	8b7a      	ldrh	r2, [r7, #26]
 8008c40:	4293      	cmp	r3, r2
 8008c42:	bf28      	it	cs
 8008c44:	4613      	movcs	r3, r2
 8008c46:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008c48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c4a:	3310      	adds	r3, #16
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	4413      	add	r3, r2
 8008c50:	3303      	adds	r3, #3
 8008c52:	f023 0303 	bic.w	r3, r3, #3
 8008c56:	4618      	mov	r0, r3
 8008c58:	89f9      	ldrh	r1, [r7, #14]
 8008c5a:	8b7a      	ldrh	r2, [r7, #26]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	887b      	ldrh	r3, [r7, #2]
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	460b      	mov	r3, r1
 8008c66:	4601      	mov	r1, r0
 8008c68:	6938      	ldr	r0, [r7, #16]
 8008c6a:	f7ff ff77 	bl	8008b5c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d006      	beq.n	8008c88 <pbuf_alloc+0xd8>
 8008c7a:	4b42      	ldr	r3, [pc, #264]	; (8008d84 <pbuf_alloc+0x1d4>)
 8008c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c80:	4941      	ldr	r1, [pc, #260]	; (8008d88 <pbuf_alloc+0x1d8>)
 8008c82:	4842      	ldr	r0, [pc, #264]	; (8008d8c <pbuf_alloc+0x1dc>)
 8008c84:	f008 fd82 	bl	801178c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008c88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c8a:	3303      	adds	r3, #3
 8008c8c:	f023 0303 	bic.w	r3, r3, #3
 8008c90:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008c94:	d106      	bne.n	8008ca4 <pbuf_alloc+0xf4>
 8008c96:	4b3b      	ldr	r3, [pc, #236]	; (8008d84 <pbuf_alloc+0x1d4>)
 8008c98:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008c9c:	493c      	ldr	r1, [pc, #240]	; (8008d90 <pbuf_alloc+0x1e0>)
 8008c9e:	483b      	ldr	r0, [pc, #236]	; (8008d8c <pbuf_alloc+0x1dc>)
 8008ca0:	f008 fd74 	bl	801178c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
 8008cae:	e002      	b.n	8008cb6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008cba:	8b7a      	ldrh	r2, [r7, #26]
 8008cbc:	89fb      	ldrh	r3, [r7, #14]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008cc6:	8b7b      	ldrh	r3, [r7, #26]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d19e      	bne.n	8008c0a <pbuf_alloc+0x5a>
      break;
 8008ccc:	e055      	b.n	8008d7a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008cce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008cd0:	3303      	adds	r3, #3
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f023 0303 	bic.w	r3, r3, #3
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	88bb      	ldrh	r3, [r7, #4]
 8008cdc:	3303      	adds	r3, #3
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	f023 0303 	bic.w	r3, r3, #3
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	4413      	add	r3, r2
 8008ce8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008cea:	8b3b      	ldrh	r3, [r7, #24]
 8008cec:	3310      	adds	r3, #16
 8008cee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008cf0:	8b3a      	ldrh	r2, [r7, #24]
 8008cf2:	88bb      	ldrh	r3, [r7, #4]
 8008cf4:	3303      	adds	r3, #3
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d306      	bcc.n	8008d0c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008cfe:	8afa      	ldrh	r2, [r7, #22]
 8008d00:	88bb      	ldrh	r3, [r7, #4]
 8008d02:	3303      	adds	r3, #3
 8008d04:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d201      	bcs.n	8008d10 <pbuf_alloc+0x160>
        return NULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e035      	b.n	8008d7c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008d10:	8afb      	ldrh	r3, [r7, #22]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff f9ba 	bl	800808c <mem_malloc>
 8008d18:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <pbuf_alloc+0x174>
        return NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	e02b      	b.n	8008d7c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008d24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d26:	3310      	adds	r3, #16
 8008d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3303      	adds	r3, #3
 8008d2e:	f023 0303 	bic.w	r3, r3, #3
 8008d32:	4618      	mov	r0, r3
 8008d34:	88b9      	ldrh	r1, [r7, #4]
 8008d36:	88ba      	ldrh	r2, [r7, #4]
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	887b      	ldrh	r3, [r7, #2]
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	460b      	mov	r3, r1
 8008d42:	4601      	mov	r1, r0
 8008d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d46:	f7ff ff09 	bl	8008b5c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d010      	beq.n	8008d78 <pbuf_alloc+0x1c8>
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <pbuf_alloc+0x1d4>)
 8008d58:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008d5c:	490d      	ldr	r1, [pc, #52]	; (8008d94 <pbuf_alloc+0x1e4>)
 8008d5e:	480b      	ldr	r0, [pc, #44]	; (8008d8c <pbuf_alloc+0x1dc>)
 8008d60:	f008 fd14 	bl	801178c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008d64:	e008      	b.n	8008d78 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008d66:	4b07      	ldr	r3, [pc, #28]	; (8008d84 <pbuf_alloc+0x1d4>)
 8008d68:	f240 1227 	movw	r2, #295	; 0x127
 8008d6c:	490a      	ldr	r1, [pc, #40]	; (8008d98 <pbuf_alloc+0x1e8>)
 8008d6e:	4807      	ldr	r0, [pc, #28]	; (8008d8c <pbuf_alloc+0x1dc>)
 8008d70:	f008 fd0c 	bl	801178c <iprintf>
      return NULL;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e001      	b.n	8008d7c <pbuf_alloc+0x1cc>
      break;
 8008d78:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3728      	adds	r7, #40	; 0x28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	08013310 	.word	0x08013310
 8008d88:	08013340 	.word	0x08013340
 8008d8c:	08013370 	.word	0x08013370
 8008d90:	08013398 	.word	0x08013398
 8008d94:	080133cc 	.word	0x080133cc
 8008d98:	080133f8 	.word	0x080133f8

08008d9c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	807b      	strh	r3, [r7, #2]
 8008da8:	4613      	mov	r3, r2
 8008daa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008dac:	883b      	ldrh	r3, [r7, #0]
 8008dae:	2b41      	cmp	r3, #65	; 0x41
 8008db0:	d009      	beq.n	8008dc6 <pbuf_alloc_reference+0x2a>
 8008db2:	883b      	ldrh	r3, [r7, #0]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d006      	beq.n	8008dc6 <pbuf_alloc_reference+0x2a>
 8008db8:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <pbuf_alloc_reference+0x5c>)
 8008dba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008dbe:	490f      	ldr	r1, [pc, #60]	; (8008dfc <pbuf_alloc_reference+0x60>)
 8008dc0:	480f      	ldr	r0, [pc, #60]	; (8008e00 <pbuf_alloc_reference+0x64>)
 8008dc2:	f008 fce3 	bl	801178c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008dc6:	2007      	movs	r0, #7
 8008dc8:	f7ff faf0 	bl	80083ac <memp_malloc>
 8008dcc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e00b      	b.n	8008df0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008dd8:	8879      	ldrh	r1, [r7, #2]
 8008dda:	887a      	ldrh	r2, [r7, #2]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	883b      	ldrh	r3, [r7, #0]
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	460b      	mov	r3, r1
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7ff feb7 	bl	8008b5c <pbuf_init_alloced_pbuf>
  return p;
 8008dee:	68fb      	ldr	r3, [r7, #12]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	08013310 	.word	0x08013310
 8008dfc:	08013414 	.word	0x08013414
 8008e00:	08013370 	.word	0x08013370

08008e04 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af02      	add	r7, sp, #8
 8008e0a:	607b      	str	r3, [r7, #4]
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
 8008e10:	460b      	mov	r3, r1
 8008e12:	81bb      	strh	r3, [r7, #12]
 8008e14:	4613      	mov	r3, r2
 8008e16:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008e1c:	8a7b      	ldrh	r3, [r7, #18]
 8008e1e:	3303      	adds	r3, #3
 8008e20:	f023 0203 	bic.w	r2, r3, #3
 8008e24:	89bb      	ldrh	r3, [r7, #12]
 8008e26:	441a      	add	r2, r3
 8008e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d901      	bls.n	8008e32 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e018      	b.n	8008e64 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d007      	beq.n	8008e48 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008e38:	8a7b      	ldrh	r3, [r7, #18]
 8008e3a:	3303      	adds	r3, #3
 8008e3c:	f023 0303 	bic.w	r3, r3, #3
 8008e40:	6a3a      	ldr	r2, [r7, #32]
 8008e42:	4413      	add	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]
 8008e46:	e001      	b.n	8008e4c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	89b9      	ldrh	r1, [r7, #12]
 8008e50:	89ba      	ldrh	r2, [r7, #12]
 8008e52:	2302      	movs	r3, #2
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	897b      	ldrh	r3, [r7, #10]
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	6979      	ldr	r1, [r7, #20]
 8008e5e:	f7ff fe7d 	bl	8008b5c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008e62:	687b      	ldr	r3, [r7, #4]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <pbuf_realloc+0x20>
 8008e7e:	4b3a      	ldr	r3, [pc, #232]	; (8008f68 <pbuf_realloc+0xfc>)
 8008e80:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008e84:	4939      	ldr	r1, [pc, #228]	; (8008f6c <pbuf_realloc+0x100>)
 8008e86:	483a      	ldr	r0, [pc, #232]	; (8008f70 <pbuf_realloc+0x104>)
 8008e88:	f008 fc80 	bl	801178c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	891b      	ldrh	r3, [r3, #8]
 8008e90:	887a      	ldrh	r2, [r7, #2]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d263      	bcs.n	8008f5e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	891a      	ldrh	r2, [r3, #8]
 8008e9a:	887b      	ldrh	r3, [r7, #2]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008ea0:	887b      	ldrh	r3, [r7, #2]
 8008ea2:	817b      	strh	r3, [r7, #10]
  q = p;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008ea8:	e018      	b.n	8008edc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	895b      	ldrh	r3, [r3, #10]
 8008eae:	897a      	ldrh	r2, [r7, #10]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	891a      	ldrh	r2, [r3, #8]
 8008eb8:	893b      	ldrh	r3, [r7, #8]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d106      	bne.n	8008edc <pbuf_realloc+0x70>
 8008ece:	4b26      	ldr	r3, [pc, #152]	; (8008f68 <pbuf_realloc+0xfc>)
 8008ed0:	f240 12af 	movw	r2, #431	; 0x1af
 8008ed4:	4927      	ldr	r1, [pc, #156]	; (8008f74 <pbuf_realloc+0x108>)
 8008ed6:	4826      	ldr	r0, [pc, #152]	; (8008f70 <pbuf_realloc+0x104>)
 8008ed8:	f008 fc58 	bl	801178c <iprintf>
  while (rem_len > q->len) {
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	895b      	ldrh	r3, [r3, #10]
 8008ee0:	897a      	ldrh	r2, [r7, #10]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d8e1      	bhi.n	8008eaa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	7b1b      	ldrb	r3, [r3, #12]
 8008eea:	f003 030f 	and.w	r3, r3, #15
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d121      	bne.n	8008f36 <pbuf_realloc+0xca>
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	895b      	ldrh	r3, [r3, #10]
 8008ef6:	897a      	ldrh	r2, [r7, #10]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d01c      	beq.n	8008f36 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	7b5b      	ldrb	r3, [r3, #13]
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d116      	bne.n	8008f36 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	897b      	ldrh	r3, [r7, #10]
 8008f14:	4413      	add	r3, r2
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	4619      	mov	r1, r3
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7fe ffba 	bl	8007e94 <mem_trim>
 8008f20:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <pbuf_realloc+0xca>
 8008f28:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <pbuf_realloc+0xfc>)
 8008f2a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008f2e:	4912      	ldr	r1, [pc, #72]	; (8008f78 <pbuf_realloc+0x10c>)
 8008f30:	480f      	ldr	r0, [pc, #60]	; (8008f70 <pbuf_realloc+0x104>)
 8008f32:	f008 fc2b 	bl	801178c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	897a      	ldrh	r2, [r7, #10]
 8008f3a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	895a      	ldrh	r2, [r3, #10]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d004      	beq.n	8008f56 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 f911 	bl	8009178 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	e000      	b.n	8008f60 <pbuf_realloc+0xf4>
    return;
 8008f5e:	bf00      	nop

}
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	08013310 	.word	0x08013310
 8008f6c:	08013428 	.word	0x08013428
 8008f70:	08013370 	.word	0x08013370
 8008f74:	08013440 	.word	0x08013440
 8008f78:	08013458 	.word	0x08013458

08008f7c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <pbuf_add_header_impl+0x22>
 8008f90:	4b2b      	ldr	r3, [pc, #172]	; (8009040 <pbuf_add_header_impl+0xc4>)
 8008f92:	f240 12df 	movw	r2, #479	; 0x1df
 8008f96:	492b      	ldr	r1, [pc, #172]	; (8009044 <pbuf_add_header_impl+0xc8>)
 8008f98:	482b      	ldr	r0, [pc, #172]	; (8009048 <pbuf_add_header_impl+0xcc>)
 8008f9a:	f008 fbf7 	bl	801178c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <pbuf_add_header_impl+0x30>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008faa:	d301      	bcc.n	8008fb0 <pbuf_add_header_impl+0x34>
    return 1;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e043      	b.n	8009038 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <pbuf_add_header_impl+0x3e>
    return 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e03e      	b.n	8009038 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	891a      	ldrh	r2, [r3, #8]
 8008fc2:	8a7b      	ldrh	r3, [r7, #18]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	8a7a      	ldrh	r2, [r7, #18]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d901      	bls.n	8008fd2 <pbuf_add_header_impl+0x56>
    return 1;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e032      	b.n	8009038 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	7b1b      	ldrb	r3, [r3, #12]
 8008fd6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008fd8:	8a3b      	ldrh	r3, [r7, #16]
 8008fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00c      	beq.n	8008ffc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	685a      	ldr	r2, [r3, #4]
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	425b      	negs	r3, r3
 8008fea:	4413      	add	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3310      	adds	r3, #16
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d20d      	bcs.n	8009014 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e01d      	b.n	8009038 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d006      	beq.n	8009010 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	425b      	negs	r3, r3
 800900a:	4413      	add	r3, r2
 800900c:	617b      	str	r3, [r7, #20]
 800900e:	e001      	b.n	8009014 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009010:	2301      	movs	r3, #1
 8009012:	e011      	b.n	8009038 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	895a      	ldrh	r2, [r3, #10]
 800901e:	8a7b      	ldrh	r3, [r7, #18]
 8009020:	4413      	add	r3, r2
 8009022:	b29a      	uxth	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	891a      	ldrh	r2, [r3, #8]
 800902c:	8a7b      	ldrh	r3, [r7, #18]
 800902e:	4413      	add	r3, r2
 8009030:	b29a      	uxth	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	811a      	strh	r2, [r3, #8]


  return 0;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	08013310 	.word	0x08013310
 8009044:	08013474 	.word	0x08013474
 8009048:	08013370 	.word	0x08013370

0800904c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009056:	2200      	movs	r2, #0
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff ff8e 	bl	8008f7c <pbuf_add_header_impl>
 8009060:	4603      	mov	r3, r0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <pbuf_remove_header+0x1e>
 800907c:	4b20      	ldr	r3, [pc, #128]	; (8009100 <pbuf_remove_header+0x94>)
 800907e:	f240 224b 	movw	r2, #587	; 0x24b
 8009082:	4920      	ldr	r1, [pc, #128]	; (8009104 <pbuf_remove_header+0x98>)
 8009084:	4820      	ldr	r0, [pc, #128]	; (8009108 <pbuf_remove_header+0x9c>)
 8009086:	f008 fb81 	bl	801178c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d003      	beq.n	8009098 <pbuf_remove_header+0x2c>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009096:	d301      	bcc.n	800909c <pbuf_remove_header+0x30>
    return 1;
 8009098:	2301      	movs	r3, #1
 800909a:	e02c      	b.n	80090f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <pbuf_remove_header+0x3a>
    return 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e027      	b.n	80090f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	895b      	ldrh	r3, [r3, #10]
 80090ae:	89fa      	ldrh	r2, [r7, #14]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d908      	bls.n	80090c6 <pbuf_remove_header+0x5a>
 80090b4:	4b12      	ldr	r3, [pc, #72]	; (8009100 <pbuf_remove_header+0x94>)
 80090b6:	f240 2255 	movw	r2, #597	; 0x255
 80090ba:	4914      	ldr	r1, [pc, #80]	; (800910c <pbuf_remove_header+0xa0>)
 80090bc:	4812      	ldr	r0, [pc, #72]	; (8009108 <pbuf_remove_header+0x9c>)
 80090be:	f008 fb65 	bl	801178c <iprintf>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e017      	b.n	80090f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	441a      	add	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	895a      	ldrh	r2, [r3, #10]
 80090dc:	89fb      	ldrh	r3, [r7, #14]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	891a      	ldrh	r2, [r3, #8]
 80090ea:	89fb      	ldrh	r3, [r7, #14]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	08013310 	.word	0x08013310
 8009104:	08013474 	.word	0x08013474
 8009108:	08013370 	.word	0x08013370
 800910c:	08013480 	.word	0x08013480

08009110 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	807b      	strh	r3, [r7, #2]
 800911c:	4613      	mov	r3, r2
 800911e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009120:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009124:	2b00      	cmp	r3, #0
 8009126:	da08      	bge.n	800913a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009128:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800912c:	425b      	negs	r3, r3
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff ff9b 	bl	800906c <pbuf_remove_header>
 8009136:	4603      	mov	r3, r0
 8009138:	e007      	b.n	800914a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800913a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800913e:	787a      	ldrb	r2, [r7, #1]
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7ff ff1a 	bl	8008f7c <pbuf_add_header_impl>
 8009148:	4603      	mov	r3, r0
  }
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	460b      	mov	r3, r1
 800915c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800915e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009162:	2201      	movs	r2, #1
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff ffd2 	bl	8009110 <pbuf_header_impl>
 800916c:	4603      	mov	r3, r0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d106      	bne.n	800919a <pbuf_free+0x22>
 800918c:	4b38      	ldr	r3, [pc, #224]	; (8009270 <pbuf_free+0xf8>)
 800918e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009192:	4938      	ldr	r1, [pc, #224]	; (8009274 <pbuf_free+0xfc>)
 8009194:	4838      	ldr	r0, [pc, #224]	; (8009278 <pbuf_free+0x100>)
 8009196:	f008 faf9 	bl	801178c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800919a:	2300      	movs	r3, #0
 800919c:	e063      	b.n	8009266 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80091a2:	e05c      	b.n	800925e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	7b9b      	ldrb	r3, [r3, #14]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d106      	bne.n	80091ba <pbuf_free+0x42>
 80091ac:	4b30      	ldr	r3, [pc, #192]	; (8009270 <pbuf_free+0xf8>)
 80091ae:	f240 22f1 	movw	r2, #753	; 0x2f1
 80091b2:	4932      	ldr	r1, [pc, #200]	; (800927c <pbuf_free+0x104>)
 80091b4:	4830      	ldr	r0, [pc, #192]	; (8009278 <pbuf_free+0x100>)
 80091b6:	f008 fae9 	bl	801178c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	7b9b      	ldrb	r3, [r3, #14]
 80091be:	3b01      	subs	r3, #1
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	739a      	strb	r2, [r3, #14]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7b9b      	ldrb	r3, [r3, #14]
 80091ca:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80091cc:	7dbb      	ldrb	r3, [r7, #22]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d143      	bne.n	800925a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7b1b      	ldrb	r3, [r3, #12]
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7b5b      	ldrb	r3, [r3, #13]
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d011      	beq.n	8009212 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <pbuf_free+0x90>
 80091fa:	4b1d      	ldr	r3, [pc, #116]	; (8009270 <pbuf_free+0xf8>)
 80091fc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009200:	491f      	ldr	r1, [pc, #124]	; (8009280 <pbuf_free+0x108>)
 8009202:	481d      	ldr	r0, [pc, #116]	; (8009278 <pbuf_free+0x100>)
 8009204:	f008 fac2 	bl	801178c <iprintf>
        pc->custom_free_function(p);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	4798      	blx	r3
 8009210:	e01d      	b.n	800924e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	2b02      	cmp	r3, #2
 8009216:	d104      	bne.n	8009222 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	2008      	movs	r0, #8
 800921c:	f7ff f936 	bl	800848c <memp_free>
 8009220:	e015      	b.n	800924e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d104      	bne.n	8009232 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	2007      	movs	r0, #7
 800922c:	f7ff f92e 	bl	800848c <memp_free>
 8009230:	e00d      	b.n	800924e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d103      	bne.n	8009240 <pbuf_free+0xc8>
          mem_free(p);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fe fdc1 	bl	8007dc0 <mem_free>
 800923e:	e006      	b.n	800924e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <pbuf_free+0xf8>)
 8009242:	f240 320f 	movw	r2, #783	; 0x30f
 8009246:	490f      	ldr	r1, [pc, #60]	; (8009284 <pbuf_free+0x10c>)
 8009248:	480b      	ldr	r0, [pc, #44]	; (8009278 <pbuf_free+0x100>)
 800924a:	f008 fa9f 	bl	801178c <iprintf>
        }
      }
      count++;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	3301      	adds	r3, #1
 8009252:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	607b      	str	r3, [r7, #4]
 8009258:	e001      	b.n	800925e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d19f      	bne.n	80091a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	08013310 	.word	0x08013310
 8009274:	08013474 	.word	0x08013474
 8009278:	08013370 	.word	0x08013370
 800927c:	080134a0 	.word	0x080134a0
 8009280:	080134b8 	.word	0x080134b8
 8009284:	080134dc 	.word	0x080134dc

08009288 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009294:	e005      	b.n	80092a2 <pbuf_clen+0x1a>
    ++len;
 8009296:	89fb      	ldrh	r3, [r7, #14]
 8009298:	3301      	adds	r3, #1
 800929a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1f6      	bne.n	8009296 <pbuf_clen+0xe>
  }
  return len;
 80092a8:	89fb      	ldrh	r3, [r7, #14]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
	...

080092b8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d010      	beq.n	80092e8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	7b9b      	ldrb	r3, [r3, #14]
 80092ca:	3301      	adds	r3, #1
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	7b9b      	ldrb	r3, [r3, #14]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d106      	bne.n	80092e8 <pbuf_ref+0x30>
 80092da:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <pbuf_ref+0x38>)
 80092dc:	f240 3242 	movw	r2, #834	; 0x342
 80092e0:	4904      	ldr	r1, [pc, #16]	; (80092f4 <pbuf_ref+0x3c>)
 80092e2:	4805      	ldr	r0, [pc, #20]	; (80092f8 <pbuf_ref+0x40>)
 80092e4:	f008 fa52 	bl	801178c <iprintf>
  }
}
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	08013310 	.word	0x08013310
 80092f4:	080134f0 	.word	0x080134f0
 80092f8:	08013370 	.word	0x08013370

080092fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <pbuf_cat+0x16>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d107      	bne.n	8009322 <pbuf_cat+0x26>
 8009312:	4b20      	ldr	r3, [pc, #128]	; (8009394 <pbuf_cat+0x98>)
 8009314:	f240 3259 	movw	r2, #857	; 0x359
 8009318:	491f      	ldr	r1, [pc, #124]	; (8009398 <pbuf_cat+0x9c>)
 800931a:	4820      	ldr	r0, [pc, #128]	; (800939c <pbuf_cat+0xa0>)
 800931c:	f008 fa36 	bl	801178c <iprintf>
 8009320:	e034      	b.n	800938c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	e00a      	b.n	800933e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	891a      	ldrh	r2, [r3, #8]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	891b      	ldrh	r3, [r3, #8]
 8009330:	4413      	add	r3, r2
 8009332:	b29a      	uxth	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	60fb      	str	r3, [r7, #12]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1f0      	bne.n	8009328 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	891a      	ldrh	r2, [r3, #8]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	895b      	ldrh	r3, [r3, #10]
 800934e:	429a      	cmp	r2, r3
 8009350:	d006      	beq.n	8009360 <pbuf_cat+0x64>
 8009352:	4b10      	ldr	r3, [pc, #64]	; (8009394 <pbuf_cat+0x98>)
 8009354:	f240 3262 	movw	r2, #866	; 0x362
 8009358:	4911      	ldr	r1, [pc, #68]	; (80093a0 <pbuf_cat+0xa4>)
 800935a:	4810      	ldr	r0, [pc, #64]	; (800939c <pbuf_cat+0xa0>)
 800935c:	f008 fa16 	bl	801178c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d006      	beq.n	8009376 <pbuf_cat+0x7a>
 8009368:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <pbuf_cat+0x98>)
 800936a:	f240 3263 	movw	r2, #867	; 0x363
 800936e:	490d      	ldr	r1, [pc, #52]	; (80093a4 <pbuf_cat+0xa8>)
 8009370:	480a      	ldr	r0, [pc, #40]	; (800939c <pbuf_cat+0xa0>)
 8009372:	f008 fa0b 	bl	801178c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	891a      	ldrh	r2, [r3, #8]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	891b      	ldrh	r3, [r3, #8]
 800937e:	4413      	add	r3, r2
 8009380:	b29a      	uxth	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	08013310 	.word	0x08013310
 8009398:	08013504 	.word	0x08013504
 800939c:	08013370 	.word	0x08013370
 80093a0:	0801353c 	.word	0x0801353c
 80093a4:	0801356c 	.word	0x0801356c

080093a8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80093b2:	2300      	movs	r3, #0
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d008      	beq.n	80093d2 <pbuf_copy+0x2a>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d005      	beq.n	80093d2 <pbuf_copy+0x2a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	891a      	ldrh	r2, [r3, #8]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	891b      	ldrh	r3, [r3, #8]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d209      	bcs.n	80093e6 <pbuf_copy+0x3e>
 80093d2:	4b57      	ldr	r3, [pc, #348]	; (8009530 <pbuf_copy+0x188>)
 80093d4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80093d8:	4956      	ldr	r1, [pc, #344]	; (8009534 <pbuf_copy+0x18c>)
 80093da:	4857      	ldr	r0, [pc, #348]	; (8009538 <pbuf_copy+0x190>)
 80093dc:	f008 f9d6 	bl	801178c <iprintf>
 80093e0:	f06f 030f 	mvn.w	r3, #15
 80093e4:	e09f      	b.n	8009526 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	895b      	ldrh	r3, [r3, #10]
 80093ea:	461a      	mov	r2, r3
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	1ad2      	subs	r2, r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	895b      	ldrh	r3, [r3, #10]
 80093f4:	4619      	mov	r1, r3
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	1acb      	subs	r3, r1, r3
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d306      	bcc.n	800940c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	895b      	ldrh	r3, [r3, #10]
 8009402:	461a      	mov	r2, r3
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	60fb      	str	r3, [r7, #12]
 800940a:	e005      	b.n	8009418 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	895b      	ldrh	r3, [r3, #10]
 8009410:	461a      	mov	r2, r3
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	18d0      	adds	r0, r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	4413      	add	r3, r2
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	4619      	mov	r1, r3
 800942c:	f008 f89e 	bl	801156c <memcpy>
    offset_to += len;
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	4413      	add	r3, r2
 8009436:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	4413      	add	r3, r2
 800943e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	895b      	ldrh	r3, [r3, #10]
 8009444:	461a      	mov	r2, r3
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	4293      	cmp	r3, r2
 800944a:	d906      	bls.n	800945a <pbuf_copy+0xb2>
 800944c:	4b38      	ldr	r3, [pc, #224]	; (8009530 <pbuf_copy+0x188>)
 800944e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009452:	493a      	ldr	r1, [pc, #232]	; (800953c <pbuf_copy+0x194>)
 8009454:	4838      	ldr	r0, [pc, #224]	; (8009538 <pbuf_copy+0x190>)
 8009456:	f008 f999 	bl	801178c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	895b      	ldrh	r3, [r3, #10]
 800945e:	461a      	mov	r2, r3
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	4293      	cmp	r3, r2
 8009464:	d906      	bls.n	8009474 <pbuf_copy+0xcc>
 8009466:	4b32      	ldr	r3, [pc, #200]	; (8009530 <pbuf_copy+0x188>)
 8009468:	f240 32da 	movw	r2, #986	; 0x3da
 800946c:	4934      	ldr	r1, [pc, #208]	; (8009540 <pbuf_copy+0x198>)
 800946e:	4832      	ldr	r0, [pc, #200]	; (8009538 <pbuf_copy+0x190>)
 8009470:	f008 f98c 	bl	801178c <iprintf>
    if (offset_from >= p_from->len) {
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	895b      	ldrh	r3, [r3, #10]
 8009478:	461a      	mov	r2, r3
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	4293      	cmp	r3, r2
 800947e:	d304      	bcc.n	800948a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	895b      	ldrh	r3, [r3, #10]
 800948e:	461a      	mov	r2, r3
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	4293      	cmp	r3, r2
 8009494:	d114      	bne.n	80094c0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10c      	bne.n	80094c0 <pbuf_copy+0x118>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d009      	beq.n	80094c0 <pbuf_copy+0x118>
 80094ac:	4b20      	ldr	r3, [pc, #128]	; (8009530 <pbuf_copy+0x188>)
 80094ae:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80094b2:	4924      	ldr	r1, [pc, #144]	; (8009544 <pbuf_copy+0x19c>)
 80094b4:	4820      	ldr	r0, [pc, #128]	; (8009538 <pbuf_copy+0x190>)
 80094b6:	f008 f969 	bl	801178c <iprintf>
 80094ba:	f06f 030f 	mvn.w	r3, #15
 80094be:	e032      	b.n	8009526 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d013      	beq.n	80094ee <pbuf_copy+0x146>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	895a      	ldrh	r2, [r3, #10]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	891b      	ldrh	r3, [r3, #8]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d10d      	bne.n	80094ee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d009      	beq.n	80094ee <pbuf_copy+0x146>
 80094da:	4b15      	ldr	r3, [pc, #84]	; (8009530 <pbuf_copy+0x188>)
 80094dc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80094e0:	4919      	ldr	r1, [pc, #100]	; (8009548 <pbuf_copy+0x1a0>)
 80094e2:	4815      	ldr	r0, [pc, #84]	; (8009538 <pbuf_copy+0x190>)
 80094e4:	f008 f952 	bl	801178c <iprintf>
 80094e8:	f06f 0305 	mvn.w	r3, #5
 80094ec:	e01b      	b.n	8009526 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d013      	beq.n	800951c <pbuf_copy+0x174>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	895a      	ldrh	r2, [r3, #10]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	891b      	ldrh	r3, [r3, #8]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d10d      	bne.n	800951c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <pbuf_copy+0x174>
 8009508:	4b09      	ldr	r3, [pc, #36]	; (8009530 <pbuf_copy+0x188>)
 800950a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800950e:	490e      	ldr	r1, [pc, #56]	; (8009548 <pbuf_copy+0x1a0>)
 8009510:	4809      	ldr	r0, [pc, #36]	; (8009538 <pbuf_copy+0x190>)
 8009512:	f008 f93b 	bl	801178c <iprintf>
 8009516:	f06f 0305 	mvn.w	r3, #5
 800951a:	e004      	b.n	8009526 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	f47f af61 	bne.w	80093e6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	08013310 	.word	0x08013310
 8009534:	080135b8 	.word	0x080135b8
 8009538:	08013370 	.word	0x08013370
 800953c:	080135e8 	.word	0x080135e8
 8009540:	08013600 	.word	0x08013600
 8009544:	0801361c 	.word	0x0801361c
 8009548:	0801362c 	.word	0x0801362c

0800954c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	4611      	mov	r1, r2
 8009558:	461a      	mov	r2, r3
 800955a:	460b      	mov	r3, r1
 800955c:	80fb      	strh	r3, [r7, #6]
 800955e:	4613      	mov	r3, r2
 8009560:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d108      	bne.n	8009582 <pbuf_copy_partial+0x36>
 8009570:	4b2b      	ldr	r3, [pc, #172]	; (8009620 <pbuf_copy_partial+0xd4>)
 8009572:	f240 420a 	movw	r2, #1034	; 0x40a
 8009576:	492b      	ldr	r1, [pc, #172]	; (8009624 <pbuf_copy_partial+0xd8>)
 8009578:	482b      	ldr	r0, [pc, #172]	; (8009628 <pbuf_copy_partial+0xdc>)
 800957a:	f008 f907 	bl	801178c <iprintf>
 800957e:	2300      	movs	r3, #0
 8009580:	e04a      	b.n	8009618 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d108      	bne.n	800959a <pbuf_copy_partial+0x4e>
 8009588:	4b25      	ldr	r3, [pc, #148]	; (8009620 <pbuf_copy_partial+0xd4>)
 800958a:	f240 420b 	movw	r2, #1035	; 0x40b
 800958e:	4927      	ldr	r1, [pc, #156]	; (800962c <pbuf_copy_partial+0xe0>)
 8009590:	4825      	ldr	r0, [pc, #148]	; (8009628 <pbuf_copy_partial+0xdc>)
 8009592:	f008 f8fb 	bl	801178c <iprintf>
 8009596:	2300      	movs	r3, #0
 8009598:	e03e      	b.n	8009618 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	e034      	b.n	800960a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80095a0:	88bb      	ldrh	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00a      	beq.n	80095bc <pbuf_copy_partial+0x70>
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	895b      	ldrh	r3, [r3, #10]
 80095aa:	88ba      	ldrh	r2, [r7, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d305      	bcc.n	80095bc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	895b      	ldrh	r3, [r3, #10]
 80095b4:	88ba      	ldrh	r2, [r7, #4]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	80bb      	strh	r3, [r7, #4]
 80095ba:	e023      	b.n	8009604 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	895a      	ldrh	r2, [r3, #10]
 80095c0:	88bb      	ldrh	r3, [r7, #4]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80095c6:	8b3a      	ldrh	r2, [r7, #24]
 80095c8:	88fb      	ldrh	r3, [r7, #6]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d901      	bls.n	80095d2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80095ce:	88fb      	ldrh	r3, [r7, #6]
 80095d0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80095d2:	8b7b      	ldrh	r3, [r7, #26]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	18d0      	adds	r0, r2, r3
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	88bb      	ldrh	r3, [r7, #4]
 80095de:	4413      	add	r3, r2
 80095e0:	8b3a      	ldrh	r2, [r7, #24]
 80095e2:	4619      	mov	r1, r3
 80095e4:	f007 ffc2 	bl	801156c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80095e8:	8afa      	ldrh	r2, [r7, #22]
 80095ea:	8b3b      	ldrh	r3, [r7, #24]
 80095ec:	4413      	add	r3, r2
 80095ee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80095f0:	8b7a      	ldrh	r2, [r7, #26]
 80095f2:	8b3b      	ldrh	r3, [r7, #24]
 80095f4:	4413      	add	r3, r2
 80095f6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80095f8:	88fa      	ldrh	r2, [r7, #6]
 80095fa:	8b3b      	ldrh	r3, [r7, #24]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	88fb      	ldrh	r3, [r7, #6]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <pbuf_copy_partial+0xca>
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1c4      	bne.n	80095a0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009616:	8afb      	ldrh	r3, [r7, #22]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	08013310 	.word	0x08013310
 8009624:	08013658 	.word	0x08013658
 8009628:	08013370 	.word	0x08013370
 800962c:	08013678 	.word	0x08013678

08009630 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	4603      	mov	r3, r0
 8009638:	603a      	str	r2, [r7, #0]
 800963a:	71fb      	strb	r3, [r7, #7]
 800963c:	460b      	mov	r3, r1
 800963e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	8919      	ldrh	r1, [r3, #8]
 8009644:	88ba      	ldrh	r2, [r7, #4]
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff fab1 	bl	8008bb0 <pbuf_alloc>
 800964e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <pbuf_clone+0x2a>
    return NULL;
 8009656:	2300      	movs	r3, #0
 8009658:	e011      	b.n	800967e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff fea3 	bl	80093a8 <pbuf_copy>
 8009662:	4603      	mov	r3, r0
 8009664:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009666:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d006      	beq.n	800967c <pbuf_clone+0x4c>
 800966e:	4b06      	ldr	r3, [pc, #24]	; (8009688 <pbuf_clone+0x58>)
 8009670:	f240 5224 	movw	r2, #1316	; 0x524
 8009674:	4905      	ldr	r1, [pc, #20]	; (800968c <pbuf_clone+0x5c>)
 8009676:	4806      	ldr	r0, [pc, #24]	; (8009690 <pbuf_clone+0x60>)
 8009678:	f008 f888 	bl	801178c <iprintf>
  return q;
 800967c:	68fb      	ldr	r3, [r7, #12]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	08013310 	.word	0x08013310
 800968c:	08013784 	.word	0x08013784
 8009690:	08013370 	.word	0x08013370

08009694 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009698:	f008 f890 	bl	80117bc <rand>
 800969c:	4603      	mov	r3, r0
 800969e:	b29b      	uxth	r3, r3
 80096a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	4b01      	ldr	r3, [pc, #4]	; (80096b4 <tcp_init+0x20>)
 80096ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80096b0:	bf00      	nop
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	200000b0 	.word	0x200000b0

080096b8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	7d1b      	ldrb	r3, [r3, #20]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d105      	bne.n	80096d4 <tcp_free+0x1c>
 80096c8:	4b06      	ldr	r3, [pc, #24]	; (80096e4 <tcp_free+0x2c>)
 80096ca:	22d4      	movs	r2, #212	; 0xd4
 80096cc:	4906      	ldr	r1, [pc, #24]	; (80096e8 <tcp_free+0x30>)
 80096ce:	4807      	ldr	r0, [pc, #28]	; (80096ec <tcp_free+0x34>)
 80096d0:	f008 f85c 	bl	801178c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	2001      	movs	r0, #1
 80096d8:	f7fe fed8 	bl	800848c <memp_free>
}
 80096dc:	bf00      	nop
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	08013810 	.word	0x08013810
 80096e8:	08013840 	.word	0x08013840
 80096ec:	08013854 	.word	0x08013854

080096f0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	7d1b      	ldrb	r3, [r3, #20]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d105      	bne.n	800970c <tcp_free_listen+0x1c>
 8009700:	4b06      	ldr	r3, [pc, #24]	; (800971c <tcp_free_listen+0x2c>)
 8009702:	22df      	movs	r2, #223	; 0xdf
 8009704:	4906      	ldr	r1, [pc, #24]	; (8009720 <tcp_free_listen+0x30>)
 8009706:	4807      	ldr	r0, [pc, #28]	; (8009724 <tcp_free_listen+0x34>)
 8009708:	f008 f840 	bl	801178c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800970c:	6879      	ldr	r1, [r7, #4]
 800970e:	2002      	movs	r0, #2
 8009710:	f7fe febc 	bl	800848c <memp_free>
}
 8009714:	bf00      	nop
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	08013810 	.word	0x08013810
 8009720:	0801387c 	.word	0x0801387c
 8009724:	08013854 	.word	0x08013854

08009728 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800972c:	f000 fea2 	bl	800a474 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009730:	4b07      	ldr	r3, [pc, #28]	; (8009750 <tcp_tmr+0x28>)
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	3301      	adds	r3, #1
 8009736:	b2da      	uxtb	r2, r3
 8009738:	4b05      	ldr	r3, [pc, #20]	; (8009750 <tcp_tmr+0x28>)
 800973a:	701a      	strb	r2, [r3, #0]
 800973c:	4b04      	ldr	r3, [pc, #16]	; (8009750 <tcp_tmr+0x28>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009748:	f000 fb54 	bl	8009df4 <tcp_slowtmr>
  }
}
 800974c:	bf00      	nop
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20008045 	.word	0x20008045

08009754 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d105      	bne.n	8009770 <tcp_remove_listener+0x1c>
 8009764:	4b0d      	ldr	r3, [pc, #52]	; (800979c <tcp_remove_listener+0x48>)
 8009766:	22ff      	movs	r2, #255	; 0xff
 8009768:	490d      	ldr	r1, [pc, #52]	; (80097a0 <tcp_remove_listener+0x4c>)
 800976a:	480e      	ldr	r0, [pc, #56]	; (80097a4 <tcp_remove_listener+0x50>)
 800976c:	f008 f80e 	bl	801178c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	e00a      	b.n	800978c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	429a      	cmp	r2, r3
 800977e:	d102      	bne.n	8009786 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1f1      	bne.n	8009776 <tcp_remove_listener+0x22>
    }
  }
}
 8009792:	bf00      	nop
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	08013810 	.word	0x08013810
 80097a0:	08013898 	.word	0x08013898
 80097a4:	08013854 	.word	0x08013854

080097a8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d106      	bne.n	80097c4 <tcp_listen_closed+0x1c>
 80097b6:	4b14      	ldr	r3, [pc, #80]	; (8009808 <tcp_listen_closed+0x60>)
 80097b8:	f240 1211 	movw	r2, #273	; 0x111
 80097bc:	4913      	ldr	r1, [pc, #76]	; (800980c <tcp_listen_closed+0x64>)
 80097be:	4814      	ldr	r0, [pc, #80]	; (8009810 <tcp_listen_closed+0x68>)
 80097c0:	f007 ffe4 	bl	801178c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	7d1b      	ldrb	r3, [r3, #20]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d006      	beq.n	80097da <tcp_listen_closed+0x32>
 80097cc:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <tcp_listen_closed+0x60>)
 80097ce:	f44f 7289 	mov.w	r2, #274	; 0x112
 80097d2:	4910      	ldr	r1, [pc, #64]	; (8009814 <tcp_listen_closed+0x6c>)
 80097d4:	480e      	ldr	r0, [pc, #56]	; (8009810 <tcp_listen_closed+0x68>)
 80097d6:	f007 ffd9 	bl	801178c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80097da:	2301      	movs	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	e00b      	b.n	80097f8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80097e0:	4a0d      	ldr	r2, [pc, #52]	; (8009818 <tcp_listen_closed+0x70>)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7ff ffb1 	bl	8009754 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3301      	adds	r3, #1
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d9f0      	bls.n	80097e0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80097fe:	bf00      	nop
 8009800:	bf00      	nop
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	08013810 	.word	0x08013810
 800980c:	080138c0 	.word	0x080138c0
 8009810:	08013854 	.word	0x08013854
 8009814:	080138cc 	.word	0x080138cc
 8009818:	080157f0 	.word	0x080157f0

0800981c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800981c:	b5b0      	push	{r4, r5, r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af04      	add	r7, sp, #16
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	460b      	mov	r3, r1
 8009826:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d106      	bne.n	800983c <tcp_close_shutdown+0x20>
 800982e:	4b63      	ldr	r3, [pc, #396]	; (80099bc <tcp_close_shutdown+0x1a0>)
 8009830:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009834:	4962      	ldr	r1, [pc, #392]	; (80099c0 <tcp_close_shutdown+0x1a4>)
 8009836:	4863      	ldr	r0, [pc, #396]	; (80099c4 <tcp_close_shutdown+0x1a8>)
 8009838:	f007 ffa8 	bl	801178c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800983c:	78fb      	ldrb	r3, [r7, #3]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d066      	beq.n	8009910 <tcp_close_shutdown+0xf4>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	7d1b      	ldrb	r3, [r3, #20]
 8009846:	2b04      	cmp	r3, #4
 8009848:	d003      	beq.n	8009852 <tcp_close_shutdown+0x36>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	7d1b      	ldrb	r3, [r3, #20]
 800984e:	2b07      	cmp	r3, #7
 8009850:	d15e      	bne.n	8009910 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009856:	2b00      	cmp	r3, #0
 8009858:	d104      	bne.n	8009864 <tcp_close_shutdown+0x48>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800985e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009862:	d055      	beq.n	8009910 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	8b5b      	ldrh	r3, [r3, #26]
 8009868:	f003 0310 	and.w	r3, r3, #16
 800986c:	2b00      	cmp	r3, #0
 800986e:	d106      	bne.n	800987e <tcp_close_shutdown+0x62>
 8009870:	4b52      	ldr	r3, [pc, #328]	; (80099bc <tcp_close_shutdown+0x1a0>)
 8009872:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009876:	4954      	ldr	r1, [pc, #336]	; (80099c8 <tcp_close_shutdown+0x1ac>)
 8009878:	4852      	ldr	r0, [pc, #328]	; (80099c4 <tcp_close_shutdown+0x1a8>)
 800987a:	f007 ff87 	bl	801178c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009886:	687d      	ldr	r5, [r7, #4]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3304      	adds	r3, #4
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	8ad2      	ldrh	r2, [r2, #22]
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	8b09      	ldrh	r1, [r1, #24]
 8009894:	9102      	str	r1, [sp, #8]
 8009896:	9201      	str	r2, [sp, #4]
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	462b      	mov	r3, r5
 800989c:	4622      	mov	r2, r4
 800989e:	4601      	mov	r1, r0
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f004 fe91 	bl	800e5c8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 f8c6 	bl	800aa38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80098ac:	4b47      	ldr	r3, [pc, #284]	; (80099cc <tcp_close_shutdown+0x1b0>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d105      	bne.n	80098c2 <tcp_close_shutdown+0xa6>
 80098b6:	4b45      	ldr	r3, [pc, #276]	; (80099cc <tcp_close_shutdown+0x1b0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	4a43      	ldr	r2, [pc, #268]	; (80099cc <tcp_close_shutdown+0x1b0>)
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	e013      	b.n	80098ea <tcp_close_shutdown+0xce>
 80098c2:	4b42      	ldr	r3, [pc, #264]	; (80099cc <tcp_close_shutdown+0x1b0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60fb      	str	r3, [r7, #12]
 80098c8:	e00c      	b.n	80098e4 <tcp_close_shutdown+0xc8>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d104      	bne.n	80098de <tcp_close_shutdown+0xc2>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68da      	ldr	r2, [r3, #12]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	60da      	str	r2, [r3, #12]
 80098dc:	e005      	b.n	80098ea <tcp_close_shutdown+0xce>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1ef      	bne.n	80098ca <tcp_close_shutdown+0xae>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	60da      	str	r2, [r3, #12]
 80098f0:	4b37      	ldr	r3, [pc, #220]	; (80099d0 <tcp_close_shutdown+0x1b4>)
 80098f2:	2201      	movs	r2, #1
 80098f4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80098f6:	4b37      	ldr	r3, [pc, #220]	; (80099d4 <tcp_close_shutdown+0x1b8>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d102      	bne.n	8009906 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009900:	f003 fd5e 	bl	800d3c0 <tcp_trigger_input_pcb_close>
 8009904:	e002      	b.n	800990c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff fed6 	bl	80096b8 <tcp_free>
      }
      return ERR_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	e050      	b.n	80099b2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	7d1b      	ldrb	r3, [r3, #20]
 8009914:	2b02      	cmp	r3, #2
 8009916:	d03b      	beq.n	8009990 <tcp_close_shutdown+0x174>
 8009918:	2b02      	cmp	r3, #2
 800991a:	dc44      	bgt.n	80099a6 <tcp_close_shutdown+0x18a>
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <tcp_close_shutdown+0x10a>
 8009920:	2b01      	cmp	r3, #1
 8009922:	d02a      	beq.n	800997a <tcp_close_shutdown+0x15e>
 8009924:	e03f      	b.n	80099a6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	8adb      	ldrh	r3, [r3, #22]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d021      	beq.n	8009972 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800992e:	4b2a      	ldr	r3, [pc, #168]	; (80099d8 <tcp_close_shutdown+0x1bc>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	429a      	cmp	r2, r3
 8009936:	d105      	bne.n	8009944 <tcp_close_shutdown+0x128>
 8009938:	4b27      	ldr	r3, [pc, #156]	; (80099d8 <tcp_close_shutdown+0x1bc>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	4a26      	ldr	r2, [pc, #152]	; (80099d8 <tcp_close_shutdown+0x1bc>)
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	e013      	b.n	800996c <tcp_close_shutdown+0x150>
 8009944:	4b24      	ldr	r3, [pc, #144]	; (80099d8 <tcp_close_shutdown+0x1bc>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60bb      	str	r3, [r7, #8]
 800994a:	e00c      	b.n	8009966 <tcp_close_shutdown+0x14a>
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	429a      	cmp	r2, r3
 8009954:	d104      	bne.n	8009960 <tcp_close_shutdown+0x144>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	60da      	str	r2, [r3, #12]
 800995e:	e005      	b.n	800996c <tcp_close_shutdown+0x150>
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	60bb      	str	r3, [r7, #8]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1ef      	bne.n	800994c <tcp_close_shutdown+0x130>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff fea0 	bl	80096b8 <tcp_free>
      break;
 8009978:	e01a      	b.n	80099b0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff ff14 	bl	80097a8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	4816      	ldr	r0, [pc, #88]	; (80099dc <tcp_close_shutdown+0x1c0>)
 8009984:	f001 f8a8 	bl	800aad8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff feb1 	bl	80096f0 <tcp_free_listen>
      break;
 800998e:	e00f      	b.n	80099b0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	480e      	ldr	r0, [pc, #56]	; (80099cc <tcp_close_shutdown+0x1b0>)
 8009994:	f001 f8a0 	bl	800aad8 <tcp_pcb_remove>
 8009998:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <tcp_close_shutdown+0x1b4>)
 800999a:	2201      	movs	r2, #1
 800999c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff fe8a 	bl	80096b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80099a4:	e004      	b.n	80099b0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f81a 	bl	80099e0 <tcp_close_shutdown_fin>
 80099ac:	4603      	mov	r3, r0
 80099ae:	e000      	b.n	80099b2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bdb0      	pop	{r4, r5, r7, pc}
 80099ba:	bf00      	nop
 80099bc:	08013810 	.word	0x08013810
 80099c0:	080138e4 	.word	0x080138e4
 80099c4:	08013854 	.word	0x08013854
 80099c8:	08013904 	.word	0x08013904
 80099cc:	2000803c 	.word	0x2000803c
 80099d0:	20008044 	.word	0x20008044
 80099d4:	2000807c 	.word	0x2000807c
 80099d8:	20008034 	.word	0x20008034
 80099dc:	20008038 	.word	0x20008038

080099e0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <tcp_close_shutdown_fin+0x1c>
 80099ee:	4b2e      	ldr	r3, [pc, #184]	; (8009aa8 <tcp_close_shutdown_fin+0xc8>)
 80099f0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80099f4:	492d      	ldr	r1, [pc, #180]	; (8009aac <tcp_close_shutdown_fin+0xcc>)
 80099f6:	482e      	ldr	r0, [pc, #184]	; (8009ab0 <tcp_close_shutdown_fin+0xd0>)
 80099f8:	f007 fec8 	bl	801178c <iprintf>

  switch (pcb->state) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	7d1b      	ldrb	r3, [r3, #20]
 8009a00:	2b07      	cmp	r3, #7
 8009a02:	d020      	beq.n	8009a46 <tcp_close_shutdown_fin+0x66>
 8009a04:	2b07      	cmp	r3, #7
 8009a06:	dc2b      	bgt.n	8009a60 <tcp_close_shutdown_fin+0x80>
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d002      	beq.n	8009a12 <tcp_close_shutdown_fin+0x32>
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d00d      	beq.n	8009a2c <tcp_close_shutdown_fin+0x4c>
 8009a10:	e026      	b.n	8009a60 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f003 fee6 	bl	800d7e4 <tcp_send_fin>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d11f      	bne.n	8009a64 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2205      	movs	r2, #5
 8009a28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a2a:	e01b      	b.n	8009a64 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f003 fed9 	bl	800d7e4 <tcp_send_fin>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d114      	bne.n	8009a68 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2205      	movs	r2, #5
 8009a42:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a44:	e010      	b.n	8009a68 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f003 fecc 	bl	800d7e4 <tcp_send_fin>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d109      	bne.n	8009a6c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2209      	movs	r2, #9
 8009a5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a5e:	e005      	b.n	8009a6c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	e01c      	b.n	8009a9e <tcp_close_shutdown_fin+0xbe>
      break;
 8009a64:	bf00      	nop
 8009a66:	e002      	b.n	8009a6e <tcp_close_shutdown_fin+0x8e>
      break;
 8009a68:	bf00      	nop
 8009a6a:	e000      	b.n	8009a6e <tcp_close_shutdown_fin+0x8e>
      break;
 8009a6c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d103      	bne.n	8009a7e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f003 fff2 	bl	800da60 <tcp_output>
 8009a7c:	e00d      	b.n	8009a9a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a86:	d108      	bne.n	8009a9a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	8b5b      	ldrh	r3, [r3, #26]
 8009a8c:	f043 0308 	orr.w	r3, r3, #8
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e001      	b.n	8009a9e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	08013810 	.word	0x08013810
 8009aac:	080138c0 	.word	0x080138c0
 8009ab0:	08013854 	.word	0x08013854

08009ab4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d109      	bne.n	8009ad6 <tcp_close+0x22>
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <tcp_close+0x4c>)
 8009ac4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009ac8:	490e      	ldr	r1, [pc, #56]	; (8009b04 <tcp_close+0x50>)
 8009aca:	480f      	ldr	r0, [pc, #60]	; (8009b08 <tcp_close+0x54>)
 8009acc:	f007 fe5e 	bl	801178c <iprintf>
 8009ad0:	f06f 030f 	mvn.w	r3, #15
 8009ad4:	e00f      	b.n	8009af6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	7d1b      	ldrb	r3, [r3, #20]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d006      	beq.n	8009aec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	8b5b      	ldrh	r3, [r3, #26]
 8009ae2:	f043 0310 	orr.w	r3, r3, #16
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009aec:	2101      	movs	r1, #1
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff fe94 	bl	800981c <tcp_close_shutdown>
 8009af4:	4603      	mov	r3, r0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	08013810 	.word	0x08013810
 8009b04:	08013920 	.word	0x08013920
 8009b08:	08013854 	.word	0x08013854

08009b0c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08e      	sub	sp, #56	; 0x38
 8009b10:	af04      	add	r7, sp, #16
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d107      	bne.n	8009b2c <tcp_abandon+0x20>
 8009b1c:	4b52      	ldr	r3, [pc, #328]	; (8009c68 <tcp_abandon+0x15c>)
 8009b1e:	f240 223d 	movw	r2, #573	; 0x23d
 8009b22:	4952      	ldr	r1, [pc, #328]	; (8009c6c <tcp_abandon+0x160>)
 8009b24:	4852      	ldr	r0, [pc, #328]	; (8009c70 <tcp_abandon+0x164>)
 8009b26:	f007 fe31 	bl	801178c <iprintf>
 8009b2a:	e099      	b.n	8009c60 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	7d1b      	ldrb	r3, [r3, #20]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d106      	bne.n	8009b42 <tcp_abandon+0x36>
 8009b34:	4b4c      	ldr	r3, [pc, #304]	; (8009c68 <tcp_abandon+0x15c>)
 8009b36:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009b3a:	494e      	ldr	r1, [pc, #312]	; (8009c74 <tcp_abandon+0x168>)
 8009b3c:	484c      	ldr	r0, [pc, #304]	; (8009c70 <tcp_abandon+0x164>)
 8009b3e:	f007 fe25 	bl	801178c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	7d1b      	ldrb	r3, [r3, #20]
 8009b46:	2b0a      	cmp	r3, #10
 8009b48:	d107      	bne.n	8009b5a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009b4a:	6879      	ldr	r1, [r7, #4]
 8009b4c:	484a      	ldr	r0, [pc, #296]	; (8009c78 <tcp_abandon+0x16c>)
 8009b4e:	f000 ffc3 	bl	800aad8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fdb0 	bl	80096b8 <tcp_free>
 8009b58:	e082      	b.n	8009c60 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b66:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b74:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	7d1b      	ldrb	r3, [r3, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d126      	bne.n	8009bd2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	8adb      	ldrh	r3, [r3, #22]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d02e      	beq.n	8009bea <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b8c:	4b3b      	ldr	r3, [pc, #236]	; (8009c7c <tcp_abandon+0x170>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d105      	bne.n	8009ba2 <tcp_abandon+0x96>
 8009b96:	4b39      	ldr	r3, [pc, #228]	; (8009c7c <tcp_abandon+0x170>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	4a37      	ldr	r2, [pc, #220]	; (8009c7c <tcp_abandon+0x170>)
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	e013      	b.n	8009bca <tcp_abandon+0xbe>
 8009ba2:	4b36      	ldr	r3, [pc, #216]	; (8009c7c <tcp_abandon+0x170>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	61fb      	str	r3, [r7, #28]
 8009ba8:	e00c      	b.n	8009bc4 <tcp_abandon+0xb8>
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d104      	bne.n	8009bbe <tcp_abandon+0xb2>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	60da      	str	r2, [r3, #12]
 8009bbc:	e005      	b.n	8009bca <tcp_abandon+0xbe>
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	61fb      	str	r3, [r7, #28]
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1ef      	bne.n	8009baa <tcp_abandon+0x9e>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	60da      	str	r2, [r3, #12]
 8009bd0:	e00b      	b.n	8009bea <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	8adb      	ldrh	r3, [r3, #22]
 8009bda:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4828      	ldr	r0, [pc, #160]	; (8009c80 <tcp_abandon+0x174>)
 8009be0:	f000 ff7a 	bl	800aad8 <tcp_pcb_remove>
 8009be4:	4b27      	ldr	r3, [pc, #156]	; (8009c84 <tcp_abandon+0x178>)
 8009be6:	2201      	movs	r2, #1
 8009be8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d004      	beq.n	8009bfc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 fd1c 	bl	800a634 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fd13 	bl	800a634 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d004      	beq.n	8009c20 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 fd0a 	bl	800a634 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00e      	beq.n	8009c44 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009c26:	6879      	ldr	r1, [r7, #4]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	8b12      	ldrh	r2, [r2, #24]
 8009c30:	9202      	str	r2, [sp, #8]
 8009c32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009c34:	9201      	str	r2, [sp, #4]
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	69b9      	ldr	r1, [r7, #24]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f004 fcc2 	bl	800e5c8 <tcp_rst>
    }
    last_state = pcb->state;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	7d1b      	ldrb	r3, [r3, #20]
 8009c48:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff fd34 	bl	80096b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d004      	beq.n	8009c60 <tcp_abandon+0x154>
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f06f 010c 	mvn.w	r1, #12
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	4798      	blx	r3
  }
}
 8009c60:	3728      	adds	r7, #40	; 0x28
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	08013810 	.word	0x08013810
 8009c6c:	08013954 	.word	0x08013954
 8009c70:	08013854 	.word	0x08013854
 8009c74:	08013970 	.word	0x08013970
 8009c78:	20008040 	.word	0x20008040
 8009c7c:	20008034 	.word	0x20008034
 8009c80:	2000803c 	.word	0x2000803c
 8009c84:	20008044 	.word	0x20008044

08009c88 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009c90:	2101      	movs	r1, #1
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff ff3a 	bl	8009b0c <tcp_abandon>
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d106      	bne.n	8009cbc <tcp_update_rcv_ann_wnd+0x1c>
 8009cae:	4b25      	ldr	r3, [pc, #148]	; (8009d44 <tcp_update_rcv_ann_wnd+0xa4>)
 8009cb0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009cb4:	4924      	ldr	r1, [pc, #144]	; (8009d48 <tcp_update_rcv_ann_wnd+0xa8>)
 8009cb6:	4825      	ldr	r0, [pc, #148]	; (8009d4c <tcp_update_rcv_ann_wnd+0xac>)
 8009cb8:	f007 fd68 	bl	801178c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009cc4:	4413      	add	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009cd0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009cd4:	bf28      	it	cs
 8009cd6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009cda:	b292      	uxth	r2, r2
 8009cdc:	4413      	add	r3, r2
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	db08      	blt.n	8009cf8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	e020      	b.n	8009d3a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	dd03      	ble.n	8009d0e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d0c:	e014      	b.n	8009d38 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d20:	d306      	bcc.n	8009d30 <tcp_update_rcv_ann_wnd+0x90>
 8009d22:	4b08      	ldr	r3, [pc, #32]	; (8009d44 <tcp_update_rcv_ann_wnd+0xa4>)
 8009d24:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009d28:	4909      	ldr	r1, [pc, #36]	; (8009d50 <tcp_update_rcv_ann_wnd+0xb0>)
 8009d2a:	4808      	ldr	r0, [pc, #32]	; (8009d4c <tcp_update_rcv_ann_wnd+0xac>)
 8009d2c:	f007 fd2e 	bl	801178c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009d38:	2300      	movs	r3, #0
  }
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	08013810 	.word	0x08013810
 8009d48:	08013a6c 	.word	0x08013a6c
 8009d4c:	08013854 	.word	0x08013854
 8009d50:	08013a90 	.word	0x08013a90

08009d54 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d107      	bne.n	8009d76 <tcp_recved+0x22>
 8009d66:	4b1f      	ldr	r3, [pc, #124]	; (8009de4 <tcp_recved+0x90>)
 8009d68:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009d6c:	491e      	ldr	r1, [pc, #120]	; (8009de8 <tcp_recved+0x94>)
 8009d6e:	481f      	ldr	r0, [pc, #124]	; (8009dec <tcp_recved+0x98>)
 8009d70:	f007 fd0c 	bl	801178c <iprintf>
 8009d74:	e032      	b.n	8009ddc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7d1b      	ldrb	r3, [r3, #20]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d106      	bne.n	8009d8c <tcp_recved+0x38>
 8009d7e:	4b19      	ldr	r3, [pc, #100]	; (8009de4 <tcp_recved+0x90>)
 8009d80:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009d84:	491a      	ldr	r1, [pc, #104]	; (8009df0 <tcp_recved+0x9c>)
 8009d86:	4819      	ldr	r0, [pc, #100]	; (8009dec <tcp_recved+0x98>)
 8009d88:	f007 fd00 	bl	801178c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d90:	887b      	ldrh	r3, [r7, #2]
 8009d92:	4413      	add	r3, r2
 8009d94:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009d96:	89fb      	ldrh	r3, [r7, #14]
 8009d98:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009d9c:	d804      	bhi.n	8009da8 <tcp_recved+0x54>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da2:	89fa      	ldrh	r2, [r7, #14]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d204      	bcs.n	8009db2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009dae:	851a      	strh	r2, [r3, #40]	; 0x28
 8009db0:	e002      	b.n	8009db8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	89fa      	ldrh	r2, [r7, #14]
 8009db6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff ff71 	bl	8009ca0 <tcp_update_rcv_ann_wnd>
 8009dbe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009dc6:	d309      	bcc.n	8009ddc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	8b5b      	ldrh	r3, [r3, #26]
 8009dcc:	f043 0302 	orr.w	r3, r3, #2
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f003 fe42 	bl	800da60 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	08013810 	.word	0x08013810
 8009de8:	08013aac 	.word	0x08013aac
 8009dec:	08013854 	.word	0x08013854
 8009df0:	08013ac4 	.word	0x08013ac4

08009df4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009df4:	b5b0      	push	{r4, r5, r7, lr}
 8009df6:	b090      	sub	sp, #64	; 0x40
 8009df8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009e00:	4b94      	ldr	r3, [pc, #592]	; (800a054 <tcp_slowtmr+0x260>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3301      	adds	r3, #1
 8009e06:	4a93      	ldr	r2, [pc, #588]	; (800a054 <tcp_slowtmr+0x260>)
 8009e08:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009e0a:	4b93      	ldr	r3, [pc, #588]	; (800a058 <tcp_slowtmr+0x264>)
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	4b91      	ldr	r3, [pc, #580]	; (800a058 <tcp_slowtmr+0x264>)
 8009e14:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009e16:	2300      	movs	r3, #0
 8009e18:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009e1a:	4b90      	ldr	r3, [pc, #576]	; (800a05c <tcp_slowtmr+0x268>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009e20:	e29f      	b.n	800a362 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	7d1b      	ldrb	r3, [r3, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d106      	bne.n	8009e38 <tcp_slowtmr+0x44>
 8009e2a:	4b8d      	ldr	r3, [pc, #564]	; (800a060 <tcp_slowtmr+0x26c>)
 8009e2c:	f240 42be 	movw	r2, #1214	; 0x4be
 8009e30:	498c      	ldr	r1, [pc, #560]	; (800a064 <tcp_slowtmr+0x270>)
 8009e32:	488d      	ldr	r0, [pc, #564]	; (800a068 <tcp_slowtmr+0x274>)
 8009e34:	f007 fcaa 	bl	801178c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	7d1b      	ldrb	r3, [r3, #20]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d106      	bne.n	8009e4e <tcp_slowtmr+0x5a>
 8009e40:	4b87      	ldr	r3, [pc, #540]	; (800a060 <tcp_slowtmr+0x26c>)
 8009e42:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009e46:	4989      	ldr	r1, [pc, #548]	; (800a06c <tcp_slowtmr+0x278>)
 8009e48:	4887      	ldr	r0, [pc, #540]	; (800a068 <tcp_slowtmr+0x274>)
 8009e4a:	f007 fc9f 	bl	801178c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e50:	7d1b      	ldrb	r3, [r3, #20]
 8009e52:	2b0a      	cmp	r3, #10
 8009e54:	d106      	bne.n	8009e64 <tcp_slowtmr+0x70>
 8009e56:	4b82      	ldr	r3, [pc, #520]	; (800a060 <tcp_slowtmr+0x26c>)
 8009e58:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009e5c:	4984      	ldr	r1, [pc, #528]	; (800a070 <tcp_slowtmr+0x27c>)
 8009e5e:	4882      	ldr	r0, [pc, #520]	; (800a068 <tcp_slowtmr+0x274>)
 8009e60:	f007 fc94 	bl	801178c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e66:	7f9a      	ldrb	r2, [r3, #30]
 8009e68:	4b7b      	ldr	r3, [pc, #492]	; (800a058 <tcp_slowtmr+0x264>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d105      	bne.n	8009e7c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e72:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009e7a:	e272      	b.n	800a362 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009e7c:	4b76      	ldr	r3, [pc, #472]	; (800a058 <tcp_slowtmr+0x264>)
 8009e7e:	781a      	ldrb	r2, [r3, #0]
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d10a      	bne.n	8009eae <tcp_slowtmr+0xba>
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	d905      	bls.n	8009eae <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009eac:	e11e      	b.n	800a0ec <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009eb4:	2b0b      	cmp	r3, #11
 8009eb6:	d905      	bls.n	8009ec4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ec2:	e113      	b.n	800a0ec <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d075      	beq.n	8009fba <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d006      	beq.n	8009ee4 <tcp_slowtmr+0xf0>
 8009ed6:	4b62      	ldr	r3, [pc, #392]	; (800a060 <tcp_slowtmr+0x26c>)
 8009ed8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009edc:	4965      	ldr	r1, [pc, #404]	; (800a074 <tcp_slowtmr+0x280>)
 8009ede:	4862      	ldr	r0, [pc, #392]	; (800a068 <tcp_slowtmr+0x274>)
 8009ee0:	f007 fc54 	bl	801178c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d106      	bne.n	8009efa <tcp_slowtmr+0x106>
 8009eec:	4b5c      	ldr	r3, [pc, #368]	; (800a060 <tcp_slowtmr+0x26c>)
 8009eee:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009ef2:	4961      	ldr	r1, [pc, #388]	; (800a078 <tcp_slowtmr+0x284>)
 8009ef4:	485c      	ldr	r0, [pc, #368]	; (800a068 <tcp_slowtmr+0x274>)
 8009ef6:	f007 fc49 	bl	801178c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009f00:	2b0b      	cmp	r3, #11
 8009f02:	d905      	bls.n	8009f10 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f08:	3301      	adds	r3, #1
 8009f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f0e:	e0ed      	b.n	800a0ec <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009f16:	3b01      	subs	r3, #1
 8009f18:	4a58      	ldr	r2, [pc, #352]	; (800a07c <tcp_slowtmr+0x288>)
 8009f1a:	5cd3      	ldrb	r3, [r2, r3]
 8009f1c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009f24:	7c7a      	ldrb	r2, [r7, #17]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d907      	bls.n	8009f3a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009f30:	3301      	adds	r3, #1
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f36:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009f40:	7c7a      	ldrb	r2, [r7, #17]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	f200 80d2 	bhi.w	800a0ec <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009f48:	2301      	movs	r3, #1
 8009f4a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d108      	bne.n	8009f68 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009f56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f58:	f004 fc2a 	bl	800e7b0 <tcp_zero_window_probe>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d014      	beq.n	8009f8c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009f62:	2300      	movs	r3, #0
 8009f64:	623b      	str	r3, [r7, #32]
 8009f66:	e011      	b.n	8009f8c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f72:	f003 faef 	bl	800d554 <tcp_split_unsent_seg>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d107      	bne.n	8009f8c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f7e:	f003 fd6f 	bl	800da60 <tcp_output>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 80ac 	beq.w	800a0ec <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009fa2:	2b06      	cmp	r3, #6
 8009fa4:	f200 80a2 	bhi.w	800a0ec <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009fae:	3301      	adds	r3, #1
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009fb8:	e098      	b.n	800a0ec <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	db0f      	blt.n	8009fe4 <tcp_slowtmr+0x1f0>
 8009fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009fca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d008      	beq.n	8009fe4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	3301      	adds	r3, #1
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	b21a      	sxth	r2, r3
 8009fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	db7b      	blt.n	800a0ec <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009ff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ff6:	f004 f825 	bl	800e044 <tcp_rexmit_rto_prepare>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d007      	beq.n	800a010 <tcp_slowtmr+0x21c>
 800a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a004:	2b00      	cmp	r3, #0
 800a006:	d171      	bne.n	800a0ec <tcp_slowtmr+0x2f8>
 800a008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d06d      	beq.n	800a0ec <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	7d1b      	ldrb	r3, [r3, #20]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d03a      	beq.n	800a08e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a01e:	2b0c      	cmp	r3, #12
 800a020:	bf28      	it	cs
 800a022:	230c      	movcs	r3, #12
 800a024:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a028:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a02c:	10db      	asrs	r3, r3, #3
 800a02e:	b21b      	sxth	r3, r3
 800a030:	461a      	mov	r2, r3
 800a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a034:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a038:	4413      	add	r3, r2
 800a03a:	7efa      	ldrb	r2, [r7, #27]
 800a03c:	4910      	ldr	r1, [pc, #64]	; (800a080 <tcp_slowtmr+0x28c>)
 800a03e:	5c8a      	ldrb	r2, [r1, r2]
 800a040:	4093      	lsls	r3, r2
 800a042:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a04a:	4293      	cmp	r3, r2
 800a04c:	dc1a      	bgt.n	800a084 <tcp_slowtmr+0x290>
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	b21a      	sxth	r2, r3
 800a052:	e019      	b.n	800a088 <tcp_slowtmr+0x294>
 800a054:	20008030 	.word	0x20008030
 800a058:	20008046 	.word	0x20008046
 800a05c:	2000803c 	.word	0x2000803c
 800a060:	08013810 	.word	0x08013810
 800a064:	08013b54 	.word	0x08013b54
 800a068:	08013854 	.word	0x08013854
 800a06c:	08013b80 	.word	0x08013b80
 800a070:	08013bac 	.word	0x08013bac
 800a074:	08013bdc 	.word	0x08013bdc
 800a078:	08013c10 	.word	0x08013c10
 800a07c:	080157e8 	.word	0x080157e8
 800a080:	080157d8 	.word	0x080157d8
 800a084:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a090:	2200      	movs	r2, #0
 800a092:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	bf28      	it	cs
 800a0a4:	4613      	movcs	r3, r2
 800a0a6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a0a8:	8a7b      	ldrh	r3, [r7, #18]
 800a0aa:	085b      	lsrs	r3, r3, #1
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d206      	bcs.n	800a0d4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0ca:	005b      	lsls	r3, r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a0e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0e8:	f004 f81c 	bl	800e124 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	7d1b      	ldrb	r3, [r3, #20]
 800a0f0:	2b06      	cmp	r3, #6
 800a0f2:	d111      	bne.n	800a118 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	8b5b      	ldrh	r3, [r3, #26]
 800a0f8:	f003 0310 	and.w	r3, r3, #16
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00b      	beq.n	800a118 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a100:	4b9d      	ldr	r3, [pc, #628]	; (800a378 <tcp_slowtmr+0x584>)
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	2b28      	cmp	r3, #40	; 0x28
 800a10c:	d904      	bls.n	800a118 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a10e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a112:	3301      	adds	r3, #1
 800a114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11a:	7a5b      	ldrb	r3, [r3, #9]
 800a11c:	f003 0308 	and.w	r3, r3, #8
 800a120:	2b00      	cmp	r3, #0
 800a122:	d04c      	beq.n	800a1be <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d003      	beq.n	800a134 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a130:	2b07      	cmp	r3, #7
 800a132:	d144      	bne.n	800a1be <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a134:	4b90      	ldr	r3, [pc, #576]	; (800a378 <tcp_slowtmr+0x584>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a144:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a148:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a14c:	498b      	ldr	r1, [pc, #556]	; (800a37c <tcp_slowtmr+0x588>)
 800a14e:	fba1 1303 	umull	r1, r3, r1, r3
 800a152:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a154:	429a      	cmp	r2, r3
 800a156:	d90a      	bls.n	800a16e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a15c:	3301      	adds	r3, #1
 800a15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a162:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a166:	3301      	adds	r3, #1
 800a168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a16c:	e027      	b.n	800a1be <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a16e:	4b82      	ldr	r3, [pc, #520]	; (800a378 <tcp_slowtmr+0x584>)
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a184:	4618      	mov	r0, r3
 800a186:	4b7e      	ldr	r3, [pc, #504]	; (800a380 <tcp_slowtmr+0x58c>)
 800a188:	fb00 f303 	mul.w	r3, r0, r3
 800a18c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a18e:	497b      	ldr	r1, [pc, #492]	; (800a37c <tcp_slowtmr+0x588>)
 800a190:	fba1 1303 	umull	r1, r3, r1, r3
 800a194:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a196:	429a      	cmp	r2, r3
 800a198:	d911      	bls.n	800a1be <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a19a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a19c:	f004 fac8 	bl	800e730 <tcp_keepalive>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a1a6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d107      	bne.n	800a1be <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ba:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d011      	beq.n	800a1ea <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a1c6:	4b6c      	ldr	r3, [pc, #432]	; (800a378 <tcp_slowtmr+0x584>)
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	1ad2      	subs	r2, r2, r3
 800a1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	460b      	mov	r3, r1
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	440b      	add	r3, r1
 800a1de:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d302      	bcc.n	800a1ea <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a1e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1e6:	f000 fddb 	bl	800ada0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ec:	7d1b      	ldrb	r3, [r3, #20]
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d10b      	bne.n	800a20a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1f2:	4b61      	ldr	r3, [pc, #388]	; (800a378 <tcp_slowtmr+0x584>)
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	2b28      	cmp	r3, #40	; 0x28
 800a1fe:	d904      	bls.n	800a20a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a204:	3301      	adds	r3, #1
 800a206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20c:	7d1b      	ldrb	r3, [r3, #20]
 800a20e:	2b09      	cmp	r3, #9
 800a210:	d10b      	bne.n	800a22a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a212:	4b59      	ldr	r3, [pc, #356]	; (800a378 <tcp_slowtmr+0x584>)
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	2bf0      	cmp	r3, #240	; 0xf0
 800a21e:	d904      	bls.n	800a22a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a224:	3301      	adds	r3, #1
 800a226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a22a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d060      	beq.n	800a2f4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a238:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a23a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a23c:	f000 fbfc 	bl	800aa38 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	2b00      	cmp	r3, #0
 800a244:	d010      	beq.n	800a268 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a246:	4b4f      	ldr	r3, [pc, #316]	; (800a384 <tcp_slowtmr+0x590>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d106      	bne.n	800a25e <tcp_slowtmr+0x46a>
 800a250:	4b4d      	ldr	r3, [pc, #308]	; (800a388 <tcp_slowtmr+0x594>)
 800a252:	f240 526d 	movw	r2, #1389	; 0x56d
 800a256:	494d      	ldr	r1, [pc, #308]	; (800a38c <tcp_slowtmr+0x598>)
 800a258:	484d      	ldr	r0, [pc, #308]	; (800a390 <tcp_slowtmr+0x59c>)
 800a25a:	f007 fa97 	bl	801178c <iprintf>
        prev->next = pcb->next;
 800a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a264:	60da      	str	r2, [r3, #12]
 800a266:	e00f      	b.n	800a288 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a268:	4b46      	ldr	r3, [pc, #280]	; (800a384 <tcp_slowtmr+0x590>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a26e:	429a      	cmp	r2, r3
 800a270:	d006      	beq.n	800a280 <tcp_slowtmr+0x48c>
 800a272:	4b45      	ldr	r3, [pc, #276]	; (800a388 <tcp_slowtmr+0x594>)
 800a274:	f240 5271 	movw	r2, #1393	; 0x571
 800a278:	4946      	ldr	r1, [pc, #280]	; (800a394 <tcp_slowtmr+0x5a0>)
 800a27a:	4845      	ldr	r0, [pc, #276]	; (800a390 <tcp_slowtmr+0x59c>)
 800a27c:	f007 fa86 	bl	801178c <iprintf>
        tcp_active_pcbs = pcb->next;
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	4a3f      	ldr	r2, [pc, #252]	; (800a384 <tcp_slowtmr+0x590>)
 800a286:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d013      	beq.n	800a2b8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a292:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a298:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29c:	3304      	adds	r3, #4
 800a29e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2a0:	8ad2      	ldrh	r2, [r2, #22]
 800a2a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2a4:	8b09      	ldrh	r1, [r1, #24]
 800a2a6:	9102      	str	r1, [sp, #8]
 800a2a8:	9201      	str	r2, [sp, #4]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	462b      	mov	r3, r5
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	4601      	mov	r1, r0
 800a2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2b4:	f004 f988 	bl	800e5c8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	7d1b      	ldrb	r3, [r3, #20]
 800a2c2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a2ce:	6838      	ldr	r0, [r7, #0]
 800a2d0:	f7ff f9f2 	bl	80096b8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a2d4:	4b30      	ldr	r3, [pc, #192]	; (800a398 <tcp_slowtmr+0x5a4>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d004      	beq.n	800a2ea <tcp_slowtmr+0x4f6>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f06f 010c 	mvn.w	r1, #12
 800a2e6:	68b8      	ldr	r0, [r7, #8]
 800a2e8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a2ea:	4b2b      	ldr	r3, [pc, #172]	; (800a398 <tcp_slowtmr+0x5a4>)
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d037      	beq.n	800a362 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a2f2:	e590      	b.n	8009e16 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	7f1b      	ldrb	r3, [r3, #28]
 800a302:	3301      	adds	r3, #1
 800a304:	b2da      	uxtb	r2, r3
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	7f1a      	ldrb	r2, [r3, #28]
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	7f5b      	ldrb	r3, [r3, #29]
 800a312:	429a      	cmp	r2, r3
 800a314:	d325      	bcc.n	800a362 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	2200      	movs	r2, #0
 800a31a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a31c:	4b1e      	ldr	r3, [pc, #120]	; (800a398 <tcp_slowtmr+0x5a4>)
 800a31e:	2200      	movs	r2, #0
 800a320:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00b      	beq.n	800a344 <tcp_slowtmr+0x550>
 800a32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a334:	6912      	ldr	r2, [r2, #16]
 800a336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a338:	4610      	mov	r0, r2
 800a33a:	4798      	blx	r3
 800a33c:	4603      	mov	r3, r0
 800a33e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a342:	e002      	b.n	800a34a <tcp_slowtmr+0x556>
 800a344:	2300      	movs	r3, #0
 800a346:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a34a:	4b13      	ldr	r3, [pc, #76]	; (800a398 <tcp_slowtmr+0x5a4>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d000      	beq.n	800a354 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a352:	e560      	b.n	8009e16 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a354:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d102      	bne.n	800a362 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a35c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a35e:	f003 fb7f 	bl	800da60 <tcp_output>
  while (pcb != NULL) {
 800a362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a364:	2b00      	cmp	r3, #0
 800a366:	f47f ad5c 	bne.w	8009e22 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a36a:	2300      	movs	r3, #0
 800a36c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a36e:	4b0b      	ldr	r3, [pc, #44]	; (800a39c <tcp_slowtmr+0x5a8>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a374:	e067      	b.n	800a446 <tcp_slowtmr+0x652>
 800a376:	bf00      	nop
 800a378:	20008030 	.word	0x20008030
 800a37c:	10624dd3 	.word	0x10624dd3
 800a380:	000124f8 	.word	0x000124f8
 800a384:	2000803c 	.word	0x2000803c
 800a388:	08013810 	.word	0x08013810
 800a38c:	08013c48 	.word	0x08013c48
 800a390:	08013854 	.word	0x08013854
 800a394:	08013c74 	.word	0x08013c74
 800a398:	20008044 	.word	0x20008044
 800a39c:	20008040 	.word	0x20008040
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	7d1b      	ldrb	r3, [r3, #20]
 800a3a4:	2b0a      	cmp	r3, #10
 800a3a6:	d006      	beq.n	800a3b6 <tcp_slowtmr+0x5c2>
 800a3a8:	4b2b      	ldr	r3, [pc, #172]	; (800a458 <tcp_slowtmr+0x664>)
 800a3aa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a3ae:	492b      	ldr	r1, [pc, #172]	; (800a45c <tcp_slowtmr+0x668>)
 800a3b0:	482b      	ldr	r0, [pc, #172]	; (800a460 <tcp_slowtmr+0x66c>)
 800a3b2:	f007 f9eb 	bl	801178c <iprintf>
    pcb_remove = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a3bc:	4b29      	ldr	r3, [pc, #164]	; (800a464 <tcp_slowtmr+0x670>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	2bf0      	cmp	r3, #240	; 0xf0
 800a3c8:	d904      	bls.n	800a3d4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d02f      	beq.n	800a43c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a3dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3de:	f000 fb2b 	bl	800aa38 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d010      	beq.n	800a40a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a3e8:	4b1f      	ldr	r3, [pc, #124]	; (800a468 <tcp_slowtmr+0x674>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d106      	bne.n	800a400 <tcp_slowtmr+0x60c>
 800a3f2:	4b19      	ldr	r3, [pc, #100]	; (800a458 <tcp_slowtmr+0x664>)
 800a3f4:	f240 52af 	movw	r2, #1455	; 0x5af
 800a3f8:	491c      	ldr	r1, [pc, #112]	; (800a46c <tcp_slowtmr+0x678>)
 800a3fa:	4819      	ldr	r0, [pc, #100]	; (800a460 <tcp_slowtmr+0x66c>)
 800a3fc:	f007 f9c6 	bl	801178c <iprintf>
        prev->next = pcb->next;
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	60da      	str	r2, [r3, #12]
 800a408:	e00f      	b.n	800a42a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a40a:	4b17      	ldr	r3, [pc, #92]	; (800a468 <tcp_slowtmr+0x674>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a410:	429a      	cmp	r2, r3
 800a412:	d006      	beq.n	800a422 <tcp_slowtmr+0x62e>
 800a414:	4b10      	ldr	r3, [pc, #64]	; (800a458 <tcp_slowtmr+0x664>)
 800a416:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a41a:	4915      	ldr	r1, [pc, #84]	; (800a470 <tcp_slowtmr+0x67c>)
 800a41c:	4810      	ldr	r0, [pc, #64]	; (800a460 <tcp_slowtmr+0x66c>)
 800a41e:	f007 f9b5 	bl	801178c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	4a10      	ldr	r2, [pc, #64]	; (800a468 <tcp_slowtmr+0x674>)
 800a428:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a434:	69f8      	ldr	r0, [r7, #28]
 800a436:	f7ff f93f 	bl	80096b8 <tcp_free>
 800a43a:	e004      	b.n	800a446 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1a9      	bne.n	800a3a0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a44c:	bf00      	nop
 800a44e:	bf00      	nop
 800a450:	3730      	adds	r7, #48	; 0x30
 800a452:	46bd      	mov	sp, r7
 800a454:	bdb0      	pop	{r4, r5, r7, pc}
 800a456:	bf00      	nop
 800a458:	08013810 	.word	0x08013810
 800a45c:	08013ca0 	.word	0x08013ca0
 800a460:	08013854 	.word	0x08013854
 800a464:	20008030 	.word	0x20008030
 800a468:	20008040 	.word	0x20008040
 800a46c:	08013cd0 	.word	0x08013cd0
 800a470:	08013cf8 	.word	0x08013cf8

0800a474 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a47a:	4b2d      	ldr	r3, [pc, #180]	; (800a530 <tcp_fasttmr+0xbc>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	3301      	adds	r3, #1
 800a480:	b2da      	uxtb	r2, r3
 800a482:	4b2b      	ldr	r3, [pc, #172]	; (800a530 <tcp_fasttmr+0xbc>)
 800a484:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a486:	4b2b      	ldr	r3, [pc, #172]	; (800a534 <tcp_fasttmr+0xc0>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a48c:	e048      	b.n	800a520 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	7f9a      	ldrb	r2, [r3, #30]
 800a492:	4b27      	ldr	r3, [pc, #156]	; (800a530 <tcp_fasttmr+0xbc>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d03f      	beq.n	800a51a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a49a:	4b25      	ldr	r3, [pc, #148]	; (800a530 <tcp_fasttmr+0xbc>)
 800a49c:	781a      	ldrb	r2, [r3, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	8b5b      	ldrh	r3, [r3, #26]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d010      	beq.n	800a4d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	8b5b      	ldrh	r3, [r3, #26]
 800a4b2:	f043 0302 	orr.w	r3, r3, #2
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f003 facf 	bl	800da60 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	8b5b      	ldrh	r3, [r3, #26]
 800a4c6:	f023 0303 	bic.w	r3, r3, #3
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	8b5b      	ldrh	r3, [r3, #26]
 800a4d4:	f003 0308 	and.w	r3, r3, #8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d009      	beq.n	800a4f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	8b5b      	ldrh	r3, [r3, #26]
 800a4e0:	f023 0308 	bic.w	r3, r3, #8
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff fa78 	bl	80099e0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a4fe:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <tcp_fasttmr+0xc4>)
 800a500:	2200      	movs	r2, #0
 800a502:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f819 	bl	800a53c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a50a:	4b0b      	ldr	r3, [pc, #44]	; (800a538 <tcp_fasttmr+0xc4>)
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d000      	beq.n	800a514 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a512:	e7b8      	b.n	800a486 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	607b      	str	r3, [r7, #4]
 800a518:	e002      	b.n	800a520 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1b3      	bne.n	800a48e <tcp_fasttmr+0x1a>
    }
  }
}
 800a526:	bf00      	nop
 800a528:	bf00      	nop
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	20008046 	.word	0x20008046
 800a534:	2000803c 	.word	0x2000803c
 800a538:	20008044 	.word	0x20008044

0800a53c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a53c:	b590      	push	{r4, r7, lr}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d109      	bne.n	800a55e <tcp_process_refused_data+0x22>
 800a54a:	4b37      	ldr	r3, [pc, #220]	; (800a628 <tcp_process_refused_data+0xec>)
 800a54c:	f240 6209 	movw	r2, #1545	; 0x609
 800a550:	4936      	ldr	r1, [pc, #216]	; (800a62c <tcp_process_refused_data+0xf0>)
 800a552:	4837      	ldr	r0, [pc, #220]	; (800a630 <tcp_process_refused_data+0xf4>)
 800a554:	f007 f91a 	bl	801178c <iprintf>
 800a558:	f06f 030f 	mvn.w	r3, #15
 800a55c:	e060      	b.n	800a620 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a562:	7b5b      	ldrb	r3, [r3, #13]
 800a564:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a56a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00b      	beq.n	800a594 <tcp_process_refused_data+0x58>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6918      	ldr	r0, [r3, #16]
 800a586:	2300      	movs	r3, #0
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	6879      	ldr	r1, [r7, #4]
 800a58c:	47a0      	blx	r4
 800a58e:	4603      	mov	r3, r0
 800a590:	73fb      	strb	r3, [r7, #15]
 800a592:	e007      	b.n	800a5a4 <tcp_process_refused_data+0x68>
 800a594:	2300      	movs	r3, #0
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	2000      	movs	r0, #0
 800a59c:	f000 f8a4 	bl	800a6e8 <tcp_recv_null>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a5a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d12a      	bne.n	800a602 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d033      	beq.n	800a61e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a5be:	d005      	beq.n	800a5cc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00b      	beq.n	800a5ee <tcp_process_refused_data+0xb2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6918      	ldr	r0, [r3, #16]
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	47a0      	blx	r4
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]
 800a5ec:	e001      	b.n	800a5f2 <tcp_process_refused_data+0xb6>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a5f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5f6:	f113 0f0d 	cmn.w	r3, #13
 800a5fa:	d110      	bne.n	800a61e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a5fc:	f06f 030c 	mvn.w	r3, #12
 800a600:	e00e      	b.n	800a620 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a606:	f113 0f0d 	cmn.w	r3, #13
 800a60a:	d102      	bne.n	800a612 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a60c:	f06f 030c 	mvn.w	r3, #12
 800a610:	e006      	b.n	800a620 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a618:	f06f 0304 	mvn.w	r3, #4
 800a61c:	e000      	b.n	800a620 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	bd90      	pop	{r4, r7, pc}
 800a628:	08013810 	.word	0x08013810
 800a62c:	08013d20 	.word	0x08013d20
 800a630:	08013854 	.word	0x08013854

0800a634 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a63c:	e007      	b.n	800a64e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f80a 	bl	800a65e <tcp_seg_free>
    seg = next;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1f4      	bne.n	800a63e <tcp_segs_free+0xa>
  }
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b082      	sub	sp, #8
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00c      	beq.n	800a686 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d004      	beq.n	800a67e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	4618      	mov	r0, r3
 800a67a:	f7fe fd7d 	bl	8009178 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a67e:	6879      	ldr	r1, [r7, #4]
 800a680:	2003      	movs	r0, #3
 800a682:	f7fd ff03 	bl	800848c <memp_free>
  }
}
 800a686:	bf00      	nop
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
	...

0800a690 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d106      	bne.n	800a6ac <tcp_seg_copy+0x1c>
 800a69e:	4b0f      	ldr	r3, [pc, #60]	; (800a6dc <tcp_seg_copy+0x4c>)
 800a6a0:	f240 6282 	movw	r2, #1666	; 0x682
 800a6a4:	490e      	ldr	r1, [pc, #56]	; (800a6e0 <tcp_seg_copy+0x50>)
 800a6a6:	480f      	ldr	r0, [pc, #60]	; (800a6e4 <tcp_seg_copy+0x54>)
 800a6a8:	f007 f870 	bl	801178c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a6ac:	2003      	movs	r0, #3
 800a6ae:	f7fd fe7d 	bl	80083ac <memp_malloc>
 800a6b2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <tcp_seg_copy+0x2e>
    return NULL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e00a      	b.n	800a6d4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a6be:	2210      	movs	r2, #16
 800a6c0:	6879      	ldr	r1, [r7, #4]
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f006 ff52 	bl	801156c <memcpy>
  pbuf_ref(cseg->p);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fe fdf3 	bl	80092b8 <pbuf_ref>
  return cseg;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	08013810 	.word	0x08013810
 800a6e0:	08013d64 	.word	0x08013d64
 800a6e4:	08013854 	.word	0x08013854

0800a6e8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d109      	bne.n	800a710 <tcp_recv_null+0x28>
 800a6fc:	4b12      	ldr	r3, [pc, #72]	; (800a748 <tcp_recv_null+0x60>)
 800a6fe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a702:	4912      	ldr	r1, [pc, #72]	; (800a74c <tcp_recv_null+0x64>)
 800a704:	4812      	ldr	r0, [pc, #72]	; (800a750 <tcp_recv_null+0x68>)
 800a706:	f007 f841 	bl	801178c <iprintf>
 800a70a:	f06f 030f 	mvn.w	r3, #15
 800a70e:	e016      	b.n	800a73e <tcp_recv_null+0x56>

  if (p != NULL) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	891b      	ldrh	r3, [r3, #8]
 800a71a:	4619      	mov	r1, r3
 800a71c:	68b8      	ldr	r0, [r7, #8]
 800a71e:	f7ff fb19 	bl	8009d54 <tcp_recved>
    pbuf_free(p);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7fe fd28 	bl	8009178 <pbuf_free>
 800a728:	e008      	b.n	800a73c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a72a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d104      	bne.n	800a73c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a732:	68b8      	ldr	r0, [r7, #8]
 800a734:	f7ff f9be 	bl	8009ab4 <tcp_close>
 800a738:	4603      	mov	r3, r0
 800a73a:	e000      	b.n	800a73e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	08013810 	.word	0x08013810
 800a74c:	08013d80 	.word	0x08013d80
 800a750:	08013854 	.word	0x08013854

0800a754 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a762:	2b00      	cmp	r3, #0
 800a764:	db01      	blt.n	800a76a <tcp_kill_prio+0x16>
 800a766:	79fb      	ldrb	r3, [r7, #7]
 800a768:	e000      	b.n	800a76c <tcp_kill_prio+0x18>
 800a76a:	237f      	movs	r3, #127	; 0x7f
 800a76c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a76e:	7afb      	ldrb	r3, [r7, #11]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d034      	beq.n	800a7de <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a774:	7afb      	ldrb	r3, [r7, #11]
 800a776:	3b01      	subs	r3, #1
 800a778:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a77e:	2300      	movs	r3, #0
 800a780:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a782:	4b19      	ldr	r3, [pc, #100]	; (800a7e8 <tcp_kill_prio+0x94>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	e01f      	b.n	800a7ca <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	7d5b      	ldrb	r3, [r3, #21]
 800a78e:	7afa      	ldrb	r2, [r7, #11]
 800a790:	429a      	cmp	r2, r3
 800a792:	d80c      	bhi.n	800a7ae <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a798:	7afa      	ldrb	r2, [r7, #11]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d112      	bne.n	800a7c4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a79e:	4b13      	ldr	r3, [pc, #76]	; (800a7ec <tcp_kill_prio+0x98>)
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d80a      	bhi.n	800a7c4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a7ae:	4b0f      	ldr	r3, [pc, #60]	; (800a7ec <tcp_kill_prio+0x98>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	7d5b      	ldrb	r3, [r3, #21]
 800a7c2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1dc      	bne.n	800a78a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a7d6:	6938      	ldr	r0, [r7, #16]
 800a7d8:	f7ff fa56 	bl	8009c88 <tcp_abort>
 800a7dc:	e000      	b.n	800a7e0 <tcp_kill_prio+0x8c>
    return;
 800a7de:	bf00      	nop
  }
}
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	2000803c 	.word	0x2000803c
 800a7ec:	20008030 	.word	0x20008030

0800a7f0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d009      	beq.n	800a814 <tcp_kill_state+0x24>
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	2b09      	cmp	r3, #9
 800a804:	d006      	beq.n	800a814 <tcp_kill_state+0x24>
 800a806:	4b1a      	ldr	r3, [pc, #104]	; (800a870 <tcp_kill_state+0x80>)
 800a808:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a80c:	4919      	ldr	r1, [pc, #100]	; (800a874 <tcp_kill_state+0x84>)
 800a80e:	481a      	ldr	r0, [pc, #104]	; (800a878 <tcp_kill_state+0x88>)
 800a810:	f006 ffbc 	bl	801178c <iprintf>

  inactivity = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a818:	2300      	movs	r3, #0
 800a81a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a81c:	4b17      	ldr	r3, [pc, #92]	; (800a87c <tcp_kill_state+0x8c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	617b      	str	r3, [r7, #20]
 800a822:	e017      	b.n	800a854 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	7d1b      	ldrb	r3, [r3, #20]
 800a828:	79fa      	ldrb	r2, [r7, #7]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d10f      	bne.n	800a84e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a82e:	4b14      	ldr	r3, [pc, #80]	; (800a880 <tcp_kill_state+0x90>)
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d807      	bhi.n	800a84e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a83e:	4b10      	ldr	r3, [pc, #64]	; (800a880 <tcp_kill_state+0x90>)
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1e4      	bne.n	800a824 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d003      	beq.n	800a868 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a860:	2100      	movs	r1, #0
 800a862:	6938      	ldr	r0, [r7, #16]
 800a864:	f7ff f952 	bl	8009b0c <tcp_abandon>
  }
}
 800a868:	bf00      	nop
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	08013810 	.word	0x08013810
 800a874:	08013d9c 	.word	0x08013d9c
 800a878:	08013854 	.word	0x08013854
 800a87c:	2000803c 	.word	0x2000803c
 800a880:	20008030 	.word	0x20008030

0800a884 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a88e:	2300      	movs	r3, #0
 800a890:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a892:	4b12      	ldr	r3, [pc, #72]	; (800a8dc <tcp_kill_timewait+0x58>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e012      	b.n	800a8c0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a89a:	4b11      	ldr	r3, [pc, #68]	; (800a8e0 <tcp_kill_timewait+0x5c>)
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d807      	bhi.n	800a8ba <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a8aa:	4b0d      	ldr	r3, [pc, #52]	; (800a8e0 <tcp_kill_timewait+0x5c>)
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1e9      	bne.n	800a89a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d002      	beq.n	800a8d2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a8cc:	68b8      	ldr	r0, [r7, #8]
 800a8ce:	f7ff f9db 	bl	8009c88 <tcp_abort>
  }
}
 800a8d2:	bf00      	nop
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20008040 	.word	0x20008040
 800a8e0:	20008030 	.word	0x20008030

0800a8e4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a8ea:	4b10      	ldr	r3, [pc, #64]	; (800a92c <tcp_handle_closepend+0x48>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a8f0:	e014      	b.n	800a91c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	8b5b      	ldrh	r3, [r3, #26]
 800a8fc:	f003 0308 	and.w	r3, r3, #8
 800a900:	2b00      	cmp	r3, #0
 800a902:	d009      	beq.n	800a918 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	8b5b      	ldrh	r3, [r3, #26]
 800a908:	f023 0308 	bic.w	r3, r3, #8
 800a90c:	b29a      	uxth	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7ff f864 	bl	80099e0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1e7      	bne.n	800a8f2 <tcp_handle_closepend+0xe>
  }
}
 800a922:	bf00      	nop
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	2000803c 	.word	0x2000803c

0800a930 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	4603      	mov	r3, r0
 800a938:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a93a:	2001      	movs	r0, #1
 800a93c:	f7fd fd36 	bl	80083ac <memp_malloc>
 800a940:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d126      	bne.n	800a996 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a948:	f7ff ffcc 	bl	800a8e4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a94c:	f7ff ff9a 	bl	800a884 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a950:	2001      	movs	r0, #1
 800a952:	f7fd fd2b 	bl	80083ac <memp_malloc>
 800a956:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d11b      	bne.n	800a996 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a95e:	2009      	movs	r0, #9
 800a960:	f7ff ff46 	bl	800a7f0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a964:	2001      	movs	r0, #1
 800a966:	f7fd fd21 	bl	80083ac <memp_malloc>
 800a96a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d111      	bne.n	800a996 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a972:	2008      	movs	r0, #8
 800a974:	f7ff ff3c 	bl	800a7f0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a978:	2001      	movs	r0, #1
 800a97a:	f7fd fd17 	bl	80083ac <memp_malloc>
 800a97e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d107      	bne.n	800a996 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fee3 	bl	800a754 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a98e:	2001      	movs	r0, #1
 800a990:	f7fd fd0c 	bl	80083ac <memp_malloc>
 800a994:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d03f      	beq.n	800aa1c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a99c:	229c      	movs	r2, #156	; 0x9c
 800a99e:	2100      	movs	r1, #0
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f006 fe0b 	bl	80115bc <memset>
    pcb->prio = prio;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	79fa      	ldrb	r2, [r7, #7]
 800a9aa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a9b2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a9bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	22ff      	movs	r2, #255	; 0xff
 800a9ca:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a9d2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2206      	movs	r2, #6
 800a9d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2206      	movs	r2, #6
 800a9e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9e8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	; (800aa28 <tcp_alloc+0xf8>)
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a9fa:	4b0c      	ldr	r3, [pc, #48]	; (800aa2c <tcp_alloc+0xfc>)
 800a9fc:	781a      	ldrb	r2, [r3, #0]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800aa08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4a08      	ldr	r2, [pc, #32]	; (800aa30 <tcp_alloc+0x100>)
 800aa10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4a07      	ldr	r2, [pc, #28]	; (800aa34 <tcp_alloc+0x104>)
 800aa18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20008030 	.word	0x20008030
 800aa2c:	20008046 	.word	0x20008046
 800aa30:	0800a6e9 	.word	0x0800a6e9
 800aa34:	006ddd00 	.word	0x006ddd00

0800aa38 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d107      	bne.n	800aa56 <tcp_pcb_purge+0x1e>
 800aa46:	4b21      	ldr	r3, [pc, #132]	; (800aacc <tcp_pcb_purge+0x94>)
 800aa48:	f640 0251 	movw	r2, #2129	; 0x851
 800aa4c:	4920      	ldr	r1, [pc, #128]	; (800aad0 <tcp_pcb_purge+0x98>)
 800aa4e:	4821      	ldr	r0, [pc, #132]	; (800aad4 <tcp_pcb_purge+0x9c>)
 800aa50:	f006 fe9c 	bl	801178c <iprintf>
 800aa54:	e037      	b.n	800aac6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	7d1b      	ldrb	r3, [r3, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d033      	beq.n	800aac6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800aa62:	2b0a      	cmp	r3, #10
 800aa64:	d02f      	beq.n	800aac6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d02b      	beq.n	800aac6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d007      	beq.n	800aa86 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe fb7c 	bl	8009178 <pbuf_free>
      pcb->refused_data = NULL;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f986 	bl	800ada0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa9a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff fdc7 	bl	800a634 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7ff fdc2 	bl	800a634 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	66da      	str	r2, [r3, #108]	; 0x6c
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	08013810 	.word	0x08013810
 800aad0:	08013e5c 	.word	0x08013e5c
 800aad4:	08013854 	.word	0x08013854

0800aad8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d106      	bne.n	800aaf6 <tcp_pcb_remove+0x1e>
 800aae8:	4b3e      	ldr	r3, [pc, #248]	; (800abe4 <tcp_pcb_remove+0x10c>)
 800aaea:	f640 0283 	movw	r2, #2179	; 0x883
 800aaee:	493e      	ldr	r1, [pc, #248]	; (800abe8 <tcp_pcb_remove+0x110>)
 800aaf0:	483e      	ldr	r0, [pc, #248]	; (800abec <tcp_pcb_remove+0x114>)
 800aaf2:	f006 fe4b 	bl	801178c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d106      	bne.n	800ab0a <tcp_pcb_remove+0x32>
 800aafc:	4b39      	ldr	r3, [pc, #228]	; (800abe4 <tcp_pcb_remove+0x10c>)
 800aafe:	f640 0284 	movw	r2, #2180	; 0x884
 800ab02:	493b      	ldr	r1, [pc, #236]	; (800abf0 <tcp_pcb_remove+0x118>)
 800ab04:	4839      	ldr	r0, [pc, #228]	; (800abec <tcp_pcb_remove+0x114>)
 800ab06:	f006 fe41 	bl	801178c <iprintf>

  TCP_RMV(pcblist, pcb);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d105      	bne.n	800ab20 <tcp_pcb_remove+0x48>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68da      	ldr	r2, [r3, #12]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	601a      	str	r2, [r3, #0]
 800ab1e:	e013      	b.n	800ab48 <tcp_pcb_remove+0x70>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	e00c      	b.n	800ab42 <tcp_pcb_remove+0x6a>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	683a      	ldr	r2, [r7, #0]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d104      	bne.n	800ab3c <tcp_pcb_remove+0x64>
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	60da      	str	r2, [r3, #12]
 800ab3a:	e005      	b.n	800ab48 <tcp_pcb_remove+0x70>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1ef      	bne.n	800ab28 <tcp_pcb_remove+0x50>
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ab4e:	6838      	ldr	r0, [r7, #0]
 800ab50:	f7ff ff72 	bl	800aa38 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	7d1b      	ldrb	r3, [r3, #20]
 800ab58:	2b0a      	cmp	r3, #10
 800ab5a:	d013      	beq.n	800ab84 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d00f      	beq.n	800ab84 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	8b5b      	ldrh	r3, [r3, #26]
 800ab68:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d009      	beq.n	800ab84 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	8b5b      	ldrh	r3, [r3, #26]
 800ab74:	f043 0302 	orr.w	r3, r3, #2
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ab7e:	6838      	ldr	r0, [r7, #0]
 800ab80:	f002 ff6e 	bl	800da60 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	7d1b      	ldrb	r3, [r3, #20]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d020      	beq.n	800abce <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d006      	beq.n	800aba2 <tcp_pcb_remove+0xca>
 800ab94:	4b13      	ldr	r3, [pc, #76]	; (800abe4 <tcp_pcb_remove+0x10c>)
 800ab96:	f640 0293 	movw	r2, #2195	; 0x893
 800ab9a:	4916      	ldr	r1, [pc, #88]	; (800abf4 <tcp_pcb_remove+0x11c>)
 800ab9c:	4813      	ldr	r0, [pc, #76]	; (800abec <tcp_pcb_remove+0x114>)
 800ab9e:	f006 fdf5 	bl	801178c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d006      	beq.n	800abb8 <tcp_pcb_remove+0xe0>
 800abaa:	4b0e      	ldr	r3, [pc, #56]	; (800abe4 <tcp_pcb_remove+0x10c>)
 800abac:	f640 0294 	movw	r2, #2196	; 0x894
 800abb0:	4911      	ldr	r1, [pc, #68]	; (800abf8 <tcp_pcb_remove+0x120>)
 800abb2:	480e      	ldr	r0, [pc, #56]	; (800abec <tcp_pcb_remove+0x114>)
 800abb4:	f006 fdea 	bl	801178c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d006      	beq.n	800abce <tcp_pcb_remove+0xf6>
 800abc0:	4b08      	ldr	r3, [pc, #32]	; (800abe4 <tcp_pcb_remove+0x10c>)
 800abc2:	f640 0296 	movw	r2, #2198	; 0x896
 800abc6:	490d      	ldr	r1, [pc, #52]	; (800abfc <tcp_pcb_remove+0x124>)
 800abc8:	4808      	ldr	r0, [pc, #32]	; (800abec <tcp_pcb_remove+0x114>)
 800abca:	f006 fddf 	bl	801178c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2200      	movs	r2, #0
 800abd2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2200      	movs	r2, #0
 800abd8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800abda:	bf00      	nop
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	08013810 	.word	0x08013810
 800abe8:	08013e78 	.word	0x08013e78
 800abec:	08013854 	.word	0x08013854
 800abf0:	08013e94 	.word	0x08013e94
 800abf4:	08013eb4 	.word	0x08013eb4
 800abf8:	08013ecc 	.word	0x08013ecc
 800abfc:	08013ee8 	.word	0x08013ee8

0800ac00 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d106      	bne.n	800ac1c <tcp_next_iss+0x1c>
 800ac0e:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <tcp_next_iss+0x38>)
 800ac10:	f640 02af 	movw	r2, #2223	; 0x8af
 800ac14:	4909      	ldr	r1, [pc, #36]	; (800ac3c <tcp_next_iss+0x3c>)
 800ac16:	480a      	ldr	r0, [pc, #40]	; (800ac40 <tcp_next_iss+0x40>)
 800ac18:	f006 fdb8 	bl	801178c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ac1c:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <tcp_next_iss+0x44>)
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <tcp_next_iss+0x48>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4413      	add	r3, r2
 800ac26:	4a07      	ldr	r2, [pc, #28]	; (800ac44 <tcp_next_iss+0x44>)
 800ac28:	6013      	str	r3, [r2, #0]
  return iss;
 800ac2a:	4b06      	ldr	r3, [pc, #24]	; (800ac44 <tcp_next_iss+0x44>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	08013810 	.word	0x08013810
 800ac3c:	08013f00 	.word	0x08013f00
 800ac40:	08013854 	.word	0x08013854
 800ac44:	200000b4 	.word	0x200000b4
 800ac48:	20008030 	.word	0x20008030

0800ac4c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <tcp_eff_send_mss_netif+0x22>
 800ac60:	4b14      	ldr	r3, [pc, #80]	; (800acb4 <tcp_eff_send_mss_netif+0x68>)
 800ac62:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ac66:	4914      	ldr	r1, [pc, #80]	; (800acb8 <tcp_eff_send_mss_netif+0x6c>)
 800ac68:	4814      	ldr	r0, [pc, #80]	; (800acbc <tcp_eff_send_mss_netif+0x70>)
 800ac6a:	f006 fd8f 	bl	801178c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ac74:	89fb      	ldrh	r3, [r7, #14]
 800ac76:	e019      	b.n	800acac <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ac7c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ac7e:	8afb      	ldrh	r3, [r7, #22]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d012      	beq.n	800acaa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ac84:	2328      	movs	r3, #40	; 0x28
 800ac86:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ac88:	8afa      	ldrh	r2, [r7, #22]
 800ac8a:	8abb      	ldrh	r3, [r7, #20]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d904      	bls.n	800ac9a <tcp_eff_send_mss_netif+0x4e>
 800ac90:	8afa      	ldrh	r2, [r7, #22]
 800ac92:	8abb      	ldrh	r3, [r7, #20]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	e000      	b.n	800ac9c <tcp_eff_send_mss_netif+0x50>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ac9e:	8a7a      	ldrh	r2, [r7, #18]
 800aca0:	89fb      	ldrh	r3, [r7, #14]
 800aca2:	4293      	cmp	r3, r2
 800aca4:	bf28      	it	cs
 800aca6:	4613      	movcs	r3, r2
 800aca8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800acaa:	89fb      	ldrh	r3, [r7, #14]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	08013810 	.word	0x08013810
 800acb8:	08013f1c 	.word	0x08013f1c
 800acbc:	08013854 	.word	0x08013854

0800acc0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d119      	bne.n	800ad08 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800acd4:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800acd6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800acda:	4910      	ldr	r1, [pc, #64]	; (800ad1c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800acdc:	4810      	ldr	r0, [pc, #64]	; (800ad20 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800acde:	f006 fd55 	bl	801178c <iprintf>

  while (pcb != NULL) {
 800ace2:	e011      	b.n	800ad08 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	429a      	cmp	r2, r3
 800acee:	d108      	bne.n	800ad02 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7fe ffc6 	bl	8009c88 <tcp_abort>
      pcb = next;
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	e002      	b.n	800ad08 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1ea      	bne.n	800ace4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ad0e:	bf00      	nop
 800ad10:	bf00      	nop
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	08013810 	.word	0x08013810
 800ad1c:	08013f44 	.word	0x08013f44
 800ad20:	08013854 	.word	0x08013854

0800ad24 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d02a      	beq.n	800ad8a <tcp_netif_ip_addr_changed+0x66>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d026      	beq.n	800ad8a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ad3c:	4b15      	ldr	r3, [pc, #84]	; (800ad94 <tcp_netif_ip_addr_changed+0x70>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ffbc 	bl	800acc0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ad48:	4b13      	ldr	r3, [pc, #76]	; (800ad98 <tcp_netif_ip_addr_changed+0x74>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff ffb6 	bl	800acc0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d017      	beq.n	800ad8a <tcp_netif_ip_addr_changed+0x66>
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d013      	beq.n	800ad8a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad62:	4b0e      	ldr	r3, [pc, #56]	; (800ad9c <tcp_netif_ip_addr_changed+0x78>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	60fb      	str	r3, [r7, #12]
 800ad68:	e00c      	b.n	800ad84 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d103      	bne.n	800ad7e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1ef      	bne.n	800ad6a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ad8a:	bf00      	nop
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	2000803c 	.word	0x2000803c
 800ad98:	20008034 	.word	0x20008034
 800ad9c:	20008038 	.word	0x20008038

0800ada0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adac:	2b00      	cmp	r3, #0
 800adae:	d007      	beq.n	800adc0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7ff fc3d 	bl	800a634 <tcp_segs_free>
    pcb->ooseq = NULL;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800adc8:	b590      	push	{r4, r7, lr}
 800adca:	b08d      	sub	sp, #52	; 0x34
 800adcc:	af04      	add	r7, sp, #16
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d105      	bne.n	800ade4 <tcp_input+0x1c>
 800add8:	4b9b      	ldr	r3, [pc, #620]	; (800b048 <tcp_input+0x280>)
 800adda:	2283      	movs	r2, #131	; 0x83
 800addc:	499b      	ldr	r1, [pc, #620]	; (800b04c <tcp_input+0x284>)
 800adde:	489c      	ldr	r0, [pc, #624]	; (800b050 <tcp_input+0x288>)
 800ade0:	f006 fcd4 	bl	801178c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	4a9a      	ldr	r2, [pc, #616]	; (800b054 <tcp_input+0x28c>)
 800adea:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	895b      	ldrh	r3, [r3, #10]
 800adf0:	2b13      	cmp	r3, #19
 800adf2:	f240 83d1 	bls.w	800b598 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800adf6:	4b98      	ldr	r3, [pc, #608]	; (800b058 <tcp_input+0x290>)
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	4a97      	ldr	r2, [pc, #604]	; (800b058 <tcp_input+0x290>)
 800adfc:	6812      	ldr	r2, [r2, #0]
 800adfe:	4611      	mov	r1, r2
 800ae00:	4618      	mov	r0, r3
 800ae02:	f005 fc21 	bl	8010648 <ip4_addr_isbroadcast_u32>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f040 83c7 	bne.w	800b59c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ae0e:	4b92      	ldr	r3, [pc, #584]	; (800b058 <tcp_input+0x290>)
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ae16:	2be0      	cmp	r3, #224	; 0xe0
 800ae18:	f000 83c0 	beq.w	800b59c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ae1c:	4b8d      	ldr	r3, [pc, #564]	; (800b054 <tcp_input+0x28c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	899b      	ldrh	r3, [r3, #12]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fc fda3 	bl	8007970 <lwip_htons>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	0b1b      	lsrs	r3, r3, #12
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ae36:	7cbb      	ldrb	r3, [r7, #18]
 800ae38:	2b13      	cmp	r3, #19
 800ae3a:	f240 83b1 	bls.w	800b5a0 <tcp_input+0x7d8>
 800ae3e:	7cbb      	ldrb	r3, [r7, #18]
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	891b      	ldrh	r3, [r3, #8]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	f200 83aa 	bhi.w	800b5a0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ae4c:	7cbb      	ldrb	r3, [r7, #18]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	3b14      	subs	r3, #20
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	4b81      	ldr	r3, [pc, #516]	; (800b05c <tcp_input+0x294>)
 800ae56:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ae58:	4b81      	ldr	r3, [pc, #516]	; (800b060 <tcp_input+0x298>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	895a      	ldrh	r2, [r3, #10]
 800ae62:	7cbb      	ldrb	r3, [r7, #18]
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d309      	bcc.n	800ae7e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ae6a:	4b7c      	ldr	r3, [pc, #496]	; (800b05c <tcp_input+0x294>)
 800ae6c:	881a      	ldrh	r2, [r3, #0]
 800ae6e:	4b7d      	ldr	r3, [pc, #500]	; (800b064 <tcp_input+0x29c>)
 800ae70:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ae72:	7cbb      	ldrb	r3, [r7, #18]
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7fe f8f8 	bl	800906c <pbuf_remove_header>
 800ae7c:	e04e      	b.n	800af1c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d105      	bne.n	800ae92 <tcp_input+0xca>
 800ae86:	4b70      	ldr	r3, [pc, #448]	; (800b048 <tcp_input+0x280>)
 800ae88:	22c2      	movs	r2, #194	; 0xc2
 800ae8a:	4977      	ldr	r1, [pc, #476]	; (800b068 <tcp_input+0x2a0>)
 800ae8c:	4870      	ldr	r0, [pc, #448]	; (800b050 <tcp_input+0x288>)
 800ae8e:	f006 fc7d 	bl	801178c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ae92:	2114      	movs	r1, #20
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7fe f8e9 	bl	800906c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	895a      	ldrh	r2, [r3, #10]
 800ae9e:	4b71      	ldr	r3, [pc, #452]	; (800b064 <tcp_input+0x29c>)
 800aea0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800aea2:	4b6e      	ldr	r3, [pc, #440]	; (800b05c <tcp_input+0x294>)
 800aea4:	881a      	ldrh	r2, [r3, #0]
 800aea6:	4b6f      	ldr	r3, [pc, #444]	; (800b064 <tcp_input+0x29c>)
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800aeae:	4b6d      	ldr	r3, [pc, #436]	; (800b064 <tcp_input+0x29c>)
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7fe f8d9 	bl	800906c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	895b      	ldrh	r3, [r3, #10]
 800aec0:	8a3a      	ldrh	r2, [r7, #16]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	f200 836e 	bhi.w	800b5a4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	4a64      	ldr	r2, [pc, #400]	; (800b060 <tcp_input+0x298>)
 800aed0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	8a3a      	ldrh	r2, [r7, #16]
 800aed8:	4611      	mov	r1, r2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe f8c6 	bl	800906c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	891a      	ldrh	r2, [r3, #8]
 800aee4:	8a3b      	ldrh	r3, [r7, #16]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	895b      	ldrh	r3, [r3, #10]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d005      	beq.n	800af02 <tcp_input+0x13a>
 800aef6:	4b54      	ldr	r3, [pc, #336]	; (800b048 <tcp_input+0x280>)
 800aef8:	22df      	movs	r2, #223	; 0xdf
 800aefa:	495c      	ldr	r1, [pc, #368]	; (800b06c <tcp_input+0x2a4>)
 800aefc:	4854      	ldr	r0, [pc, #336]	; (800b050 <tcp_input+0x288>)
 800aefe:	f006 fc45 	bl	801178c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	891a      	ldrh	r2, [r3, #8]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	891b      	ldrh	r3, [r3, #8]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d005      	beq.n	800af1c <tcp_input+0x154>
 800af10:	4b4d      	ldr	r3, [pc, #308]	; (800b048 <tcp_input+0x280>)
 800af12:	22e0      	movs	r2, #224	; 0xe0
 800af14:	4956      	ldr	r1, [pc, #344]	; (800b070 <tcp_input+0x2a8>)
 800af16:	484e      	ldr	r0, [pc, #312]	; (800b050 <tcp_input+0x288>)
 800af18:	f006 fc38 	bl	801178c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800af1c:	4b4d      	ldr	r3, [pc, #308]	; (800b054 <tcp_input+0x28c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	b29b      	uxth	r3, r3
 800af24:	4a4b      	ldr	r2, [pc, #300]	; (800b054 <tcp_input+0x28c>)
 800af26:	6814      	ldr	r4, [r2, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fc fd21 	bl	8007970 <lwip_htons>
 800af2e:	4603      	mov	r3, r0
 800af30:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800af32:	4b48      	ldr	r3, [pc, #288]	; (800b054 <tcp_input+0x28c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	885b      	ldrh	r3, [r3, #2]
 800af38:	b29b      	uxth	r3, r3
 800af3a:	4a46      	ldr	r2, [pc, #280]	; (800b054 <tcp_input+0x28c>)
 800af3c:	6814      	ldr	r4, [r2, #0]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fc fd16 	bl	8007970 <lwip_htons>
 800af44:	4603      	mov	r3, r0
 800af46:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800af48:	4b42      	ldr	r3, [pc, #264]	; (800b054 <tcp_input+0x28c>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	4a41      	ldr	r2, [pc, #260]	; (800b054 <tcp_input+0x28c>)
 800af50:	6814      	ldr	r4, [r2, #0]
 800af52:	4618      	mov	r0, r3
 800af54:	f7fc fd21 	bl	800799a <lwip_htonl>
 800af58:	4603      	mov	r3, r0
 800af5a:	6063      	str	r3, [r4, #4]
 800af5c:	6863      	ldr	r3, [r4, #4]
 800af5e:	4a45      	ldr	r2, [pc, #276]	; (800b074 <tcp_input+0x2ac>)
 800af60:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800af62:	4b3c      	ldr	r3, [pc, #240]	; (800b054 <tcp_input+0x28c>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	4a3a      	ldr	r2, [pc, #232]	; (800b054 <tcp_input+0x28c>)
 800af6a:	6814      	ldr	r4, [r2, #0]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fc fd14 	bl	800799a <lwip_htonl>
 800af72:	4603      	mov	r3, r0
 800af74:	60a3      	str	r3, [r4, #8]
 800af76:	68a3      	ldr	r3, [r4, #8]
 800af78:	4a3f      	ldr	r2, [pc, #252]	; (800b078 <tcp_input+0x2b0>)
 800af7a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800af7c:	4b35      	ldr	r3, [pc, #212]	; (800b054 <tcp_input+0x28c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	89db      	ldrh	r3, [r3, #14]
 800af82:	b29b      	uxth	r3, r3
 800af84:	4a33      	ldr	r2, [pc, #204]	; (800b054 <tcp_input+0x28c>)
 800af86:	6814      	ldr	r4, [r2, #0]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fc fcf1 	bl	8007970 <lwip_htons>
 800af8e:	4603      	mov	r3, r0
 800af90:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800af92:	4b30      	ldr	r3, [pc, #192]	; (800b054 <tcp_input+0x28c>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	899b      	ldrh	r3, [r3, #12]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fc fce8 	bl	8007970 <lwip_htons>
 800afa0:	4603      	mov	r3, r0
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	4b34      	ldr	r3, [pc, #208]	; (800b07c <tcp_input+0x2b4>)
 800afac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	891a      	ldrh	r2, [r3, #8]
 800afb2:	4b33      	ldr	r3, [pc, #204]	; (800b080 <tcp_input+0x2b8>)
 800afb4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800afb6:	4b31      	ldr	r3, [pc, #196]	; (800b07c <tcp_input+0x2b4>)
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	f003 0303 	and.w	r3, r3, #3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00c      	beq.n	800afdc <tcp_input+0x214>
    tcplen++;
 800afc2:	4b2f      	ldr	r3, [pc, #188]	; (800b080 <tcp_input+0x2b8>)
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	3301      	adds	r3, #1
 800afc8:	b29a      	uxth	r2, r3
 800afca:	4b2d      	ldr	r3, [pc, #180]	; (800b080 <tcp_input+0x2b8>)
 800afcc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	891a      	ldrh	r2, [r3, #8]
 800afd2:	4b2b      	ldr	r3, [pc, #172]	; (800b080 <tcp_input+0x2b8>)
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	f200 82e6 	bhi.w	800b5a8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800afdc:	2300      	movs	r3, #0
 800afde:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800afe0:	4b28      	ldr	r3, [pc, #160]	; (800b084 <tcp_input+0x2bc>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	61fb      	str	r3, [r7, #28]
 800afe6:	e09d      	b.n	800b124 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	7d1b      	ldrb	r3, [r3, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d105      	bne.n	800affc <tcp_input+0x234>
 800aff0:	4b15      	ldr	r3, [pc, #84]	; (800b048 <tcp_input+0x280>)
 800aff2:	22fb      	movs	r2, #251	; 0xfb
 800aff4:	4924      	ldr	r1, [pc, #144]	; (800b088 <tcp_input+0x2c0>)
 800aff6:	4816      	ldr	r0, [pc, #88]	; (800b050 <tcp_input+0x288>)
 800aff8:	f006 fbc8 	bl	801178c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	7d1b      	ldrb	r3, [r3, #20]
 800b000:	2b0a      	cmp	r3, #10
 800b002:	d105      	bne.n	800b010 <tcp_input+0x248>
 800b004:	4b10      	ldr	r3, [pc, #64]	; (800b048 <tcp_input+0x280>)
 800b006:	22fc      	movs	r2, #252	; 0xfc
 800b008:	4920      	ldr	r1, [pc, #128]	; (800b08c <tcp_input+0x2c4>)
 800b00a:	4811      	ldr	r0, [pc, #68]	; (800b050 <tcp_input+0x288>)
 800b00c:	f006 fbbe 	bl	801178c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	7d1b      	ldrb	r3, [r3, #20]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d105      	bne.n	800b024 <tcp_input+0x25c>
 800b018:	4b0b      	ldr	r3, [pc, #44]	; (800b048 <tcp_input+0x280>)
 800b01a:	22fd      	movs	r2, #253	; 0xfd
 800b01c:	491c      	ldr	r1, [pc, #112]	; (800b090 <tcp_input+0x2c8>)
 800b01e:	480c      	ldr	r0, [pc, #48]	; (800b050 <tcp_input+0x288>)
 800b020:	f006 fbb4 	bl	801178c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	7a1b      	ldrb	r3, [r3, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d033      	beq.n	800b094 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	7a1a      	ldrb	r2, [r3, #8]
 800b030:	4b09      	ldr	r3, [pc, #36]	; (800b058 <tcp_input+0x290>)
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b038:	3301      	adds	r3, #1
 800b03a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d029      	beq.n	800b094 <tcp_input+0x2cc>
      prev = pcb;
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	61bb      	str	r3, [r7, #24]
      continue;
 800b044:	e06b      	b.n	800b11e <tcp_input+0x356>
 800b046:	bf00      	nop
 800b048:	08013f78 	.word	0x08013f78
 800b04c:	08013fac 	.word	0x08013fac
 800b050:	08013fc4 	.word	0x08013fc4
 800b054:	20008058 	.word	0x20008058
 800b058:	20005114 	.word	0x20005114
 800b05c:	2000805c 	.word	0x2000805c
 800b060:	20008060 	.word	0x20008060
 800b064:	2000805e 	.word	0x2000805e
 800b068:	08013fec 	.word	0x08013fec
 800b06c:	08013ffc 	.word	0x08013ffc
 800b070:	08014008 	.word	0x08014008
 800b074:	20008068 	.word	0x20008068
 800b078:	2000806c 	.word	0x2000806c
 800b07c:	20008074 	.word	0x20008074
 800b080:	20008072 	.word	0x20008072
 800b084:	2000803c 	.word	0x2000803c
 800b088:	08014028 	.word	0x08014028
 800b08c:	08014050 	.word	0x08014050
 800b090:	0801407c 	.word	0x0801407c
    }

    if (pcb->remote_port == tcphdr->src &&
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	8b1a      	ldrh	r2, [r3, #24]
 800b098:	4b72      	ldr	r3, [pc, #456]	; (800b264 <tcp_input+0x49c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d13a      	bne.n	800b11a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	8ada      	ldrh	r2, [r3, #22]
 800b0a8:	4b6e      	ldr	r3, [pc, #440]	; (800b264 <tcp_input+0x49c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	885b      	ldrh	r3, [r3, #2]
 800b0ae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d132      	bne.n	800b11a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	4b6b      	ldr	r3, [pc, #428]	; (800b268 <tcp_input+0x4a0>)
 800b0ba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d12c      	bne.n	800b11a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	4b68      	ldr	r3, [pc, #416]	; (800b268 <tcp_input+0x4a0>)
 800b0c6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d126      	bne.n	800b11a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	69fa      	ldr	r2, [r7, #28]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d106      	bne.n	800b0e4 <tcp_input+0x31c>
 800b0d6:	4b65      	ldr	r3, [pc, #404]	; (800b26c <tcp_input+0x4a4>)
 800b0d8:	f240 120d 	movw	r2, #269	; 0x10d
 800b0dc:	4964      	ldr	r1, [pc, #400]	; (800b270 <tcp_input+0x4a8>)
 800b0de:	4865      	ldr	r0, [pc, #404]	; (800b274 <tcp_input+0x4ac>)
 800b0e0:	f006 fb54 	bl	801178c <iprintf>
      if (prev != NULL) {
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <tcp_input+0x338>
        prev->next = pcb->next;
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	68da      	ldr	r2, [r3, #12]
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b0f2:	4b61      	ldr	r3, [pc, #388]	; (800b278 <tcp_input+0x4b0>)
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b0fa:	4a5f      	ldr	r2, [pc, #380]	; (800b278 <tcp_input+0x4b0>)
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	69fa      	ldr	r2, [r7, #28]
 800b106:	429a      	cmp	r2, r3
 800b108:	d111      	bne.n	800b12e <tcp_input+0x366>
 800b10a:	4b58      	ldr	r3, [pc, #352]	; (800b26c <tcp_input+0x4a4>)
 800b10c:	f240 1215 	movw	r2, #277	; 0x115
 800b110:	495a      	ldr	r1, [pc, #360]	; (800b27c <tcp_input+0x4b4>)
 800b112:	4858      	ldr	r0, [pc, #352]	; (800b274 <tcp_input+0x4ac>)
 800b114:	f006 fb3a 	bl	801178c <iprintf>
      break;
 800b118:	e009      	b.n	800b12e <tcp_input+0x366>
    }
    prev = pcb;
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	61fb      	str	r3, [r7, #28]
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	2b00      	cmp	r3, #0
 800b128:	f47f af5e 	bne.w	800afe8 <tcp_input+0x220>
 800b12c:	e000      	b.n	800b130 <tcp_input+0x368>
      break;
 800b12e:	bf00      	nop
  }

  if (pcb == NULL) {
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	2b00      	cmp	r3, #0
 800b134:	f040 80aa 	bne.w	800b28c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b138:	4b51      	ldr	r3, [pc, #324]	; (800b280 <tcp_input+0x4b8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	61fb      	str	r3, [r7, #28]
 800b13e:	e03f      	b.n	800b1c0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	7d1b      	ldrb	r3, [r3, #20]
 800b144:	2b0a      	cmp	r3, #10
 800b146:	d006      	beq.n	800b156 <tcp_input+0x38e>
 800b148:	4b48      	ldr	r3, [pc, #288]	; (800b26c <tcp_input+0x4a4>)
 800b14a:	f240 121f 	movw	r2, #287	; 0x11f
 800b14e:	494d      	ldr	r1, [pc, #308]	; (800b284 <tcp_input+0x4bc>)
 800b150:	4848      	ldr	r0, [pc, #288]	; (800b274 <tcp_input+0x4ac>)
 800b152:	f006 fb1b 	bl	801178c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	7a1b      	ldrb	r3, [r3, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d009      	beq.n	800b172 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	7a1a      	ldrb	r2, [r3, #8]
 800b162:	4b41      	ldr	r3, [pc, #260]	; (800b268 <tcp_input+0x4a0>)
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b16a:	3301      	adds	r3, #1
 800b16c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b16e:	429a      	cmp	r2, r3
 800b170:	d122      	bne.n	800b1b8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	8b1a      	ldrh	r2, [r3, #24]
 800b176:	4b3b      	ldr	r3, [pc, #236]	; (800b264 <tcp_input+0x49c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	429a      	cmp	r2, r3
 800b180:	d11b      	bne.n	800b1ba <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	8ada      	ldrh	r2, [r3, #22]
 800b186:	4b37      	ldr	r3, [pc, #220]	; (800b264 <tcp_input+0x49c>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	885b      	ldrh	r3, [r3, #2]
 800b18c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b18e:	429a      	cmp	r2, r3
 800b190:	d113      	bne.n	800b1ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	4b34      	ldr	r3, [pc, #208]	; (800b268 <tcp_input+0x4a0>)
 800b198:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d10d      	bne.n	800b1ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	4b31      	ldr	r3, [pc, #196]	; (800b268 <tcp_input+0x4a0>)
 800b1a4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d107      	bne.n	800b1ba <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b1aa:	69f8      	ldr	r0, [r7, #28]
 800b1ac:	f000 fb56 	bl	800b85c <tcp_timewait_input>
        }
        pbuf_free(p);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7fd ffe1 	bl	8009178 <pbuf_free>
        return;
 800b1b6:	e1fd      	b.n	800b5b4 <tcp_input+0x7ec>
        continue;
 800b1b8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	61fb      	str	r3, [r7, #28]
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1bc      	bne.n	800b140 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b1ca:	4b2f      	ldr	r3, [pc, #188]	; (800b288 <tcp_input+0x4c0>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	617b      	str	r3, [r7, #20]
 800b1d0:	e02a      	b.n	800b228 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	7a1b      	ldrb	r3, [r3, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00c      	beq.n	800b1f4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	7a1a      	ldrb	r2, [r3, #8]
 800b1de:	4b22      	ldr	r3, [pc, #136]	; (800b268 <tcp_input+0x4a0>)
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d002      	beq.n	800b1f4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	61bb      	str	r3, [r7, #24]
        continue;
 800b1f2:	e016      	b.n	800b222 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	8ada      	ldrh	r2, [r3, #22]
 800b1f8:	4b1a      	ldr	r3, [pc, #104]	; (800b264 <tcp_input+0x49c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	885b      	ldrh	r3, [r3, #2]
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	429a      	cmp	r2, r3
 800b202:	d10c      	bne.n	800b21e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	4b17      	ldr	r3, [pc, #92]	; (800b268 <tcp_input+0x4a0>)
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d00f      	beq.n	800b230 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00d      	beq.n	800b232 <tcp_input+0x46a>
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d009      	beq.n	800b232 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	617b      	str	r3, [r7, #20]
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1d1      	bne.n	800b1d2 <tcp_input+0x40a>
 800b22e:	e000      	b.n	800b232 <tcp_input+0x46a>
            break;
 800b230:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d029      	beq.n	800b28c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00a      	beq.n	800b254 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	68da      	ldr	r2, [r3, #12]
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b246:	4b10      	ldr	r3, [pc, #64]	; (800b288 <tcp_input+0x4c0>)
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b24e:	4a0e      	ldr	r2, [pc, #56]	; (800b288 <tcp_input+0x4c0>)
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b254:	6978      	ldr	r0, [r7, #20]
 800b256:	f000 fa03 	bl	800b660 <tcp_listen_input>
      }
      pbuf_free(p);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7fd ff8c 	bl	8009178 <pbuf_free>
      return;
 800b260:	e1a8      	b.n	800b5b4 <tcp_input+0x7ec>
 800b262:	bf00      	nop
 800b264:	20008058 	.word	0x20008058
 800b268:	20005114 	.word	0x20005114
 800b26c:	08013f78 	.word	0x08013f78
 800b270:	080140a4 	.word	0x080140a4
 800b274:	08013fc4 	.word	0x08013fc4
 800b278:	2000803c 	.word	0x2000803c
 800b27c:	080140d0 	.word	0x080140d0
 800b280:	20008040 	.word	0x20008040
 800b284:	080140fc 	.word	0x080140fc
 800b288:	20008038 	.word	0x20008038
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f000 8158 	beq.w	800b544 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b294:	4b95      	ldr	r3, [pc, #596]	; (800b4ec <tcp_input+0x724>)
 800b296:	2200      	movs	r2, #0
 800b298:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	891a      	ldrh	r2, [r3, #8]
 800b29e:	4b93      	ldr	r3, [pc, #588]	; (800b4ec <tcp_input+0x724>)
 800b2a0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b2a2:	4a92      	ldr	r2, [pc, #584]	; (800b4ec <tcp_input+0x724>)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b2a8:	4b91      	ldr	r3, [pc, #580]	; (800b4f0 <tcp_input+0x728>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a8f      	ldr	r2, [pc, #572]	; (800b4ec <tcp_input+0x724>)
 800b2ae:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b2b0:	4b90      	ldr	r3, [pc, #576]	; (800b4f4 <tcp_input+0x72c>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b2b6:	4b90      	ldr	r3, [pc, #576]	; (800b4f8 <tcp_input+0x730>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b2bc:	4b8f      	ldr	r3, [pc, #572]	; (800b4fc <tcp_input+0x734>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b2c2:	4b8f      	ldr	r3, [pc, #572]	; (800b500 <tcp_input+0x738>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	f003 0308 	and.w	r3, r3, #8
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d006      	beq.n	800b2dc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	7b5b      	ldrb	r3, [r3, #13]
 800b2d2:	f043 0301 	orr.w	r3, r3, #1
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d017      	beq.n	800b314 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b2e4:	69f8      	ldr	r0, [r7, #28]
 800b2e6:	f7ff f929 	bl	800a53c <tcp_process_refused_data>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	f113 0f0d 	cmn.w	r3, #13
 800b2f0:	d007      	beq.n	800b302 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00c      	beq.n	800b314 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b2fa:	4b82      	ldr	r3, [pc, #520]	; (800b504 <tcp_input+0x73c>)
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d008      	beq.n	800b314 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b306:	2b00      	cmp	r3, #0
 800b308:	f040 80e3 	bne.w	800b4d2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b30c:	69f8      	ldr	r0, [r7, #28]
 800b30e:	f003 f9ad 	bl	800e66c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b312:	e0de      	b.n	800b4d2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b314:	4a7c      	ldr	r2, [pc, #496]	; (800b508 <tcp_input+0x740>)
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b31a:	69f8      	ldr	r0, [r7, #28]
 800b31c:	f000 fb18 	bl	800b950 <tcp_process>
 800b320:	4603      	mov	r3, r0
 800b322:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b324:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b328:	f113 0f0d 	cmn.w	r3, #13
 800b32c:	f000 80d3 	beq.w	800b4d6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b330:	4b71      	ldr	r3, [pc, #452]	; (800b4f8 <tcp_input+0x730>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	f003 0308 	and.w	r3, r3, #8
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d015      	beq.n	800b368 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b342:	2b00      	cmp	r3, #0
 800b344:	d008      	beq.n	800b358 <tcp_input+0x590>
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34c:	69fa      	ldr	r2, [r7, #28]
 800b34e:	6912      	ldr	r2, [r2, #16]
 800b350:	f06f 010d 	mvn.w	r1, #13
 800b354:	4610      	mov	r0, r2
 800b356:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b358:	69f9      	ldr	r1, [r7, #28]
 800b35a:	486c      	ldr	r0, [pc, #432]	; (800b50c <tcp_input+0x744>)
 800b35c:	f7ff fbbc 	bl	800aad8 <tcp_pcb_remove>
        tcp_free(pcb);
 800b360:	69f8      	ldr	r0, [r7, #28]
 800b362:	f7fe f9a9 	bl	80096b8 <tcp_free>
 800b366:	e0da      	b.n	800b51e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b368:	2300      	movs	r3, #0
 800b36a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b36c:	4b63      	ldr	r3, [pc, #396]	; (800b4fc <tcp_input+0x734>)
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d01d      	beq.n	800b3b0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b374:	4b61      	ldr	r3, [pc, #388]	; (800b4fc <tcp_input+0x734>)
 800b376:	881b      	ldrh	r3, [r3, #0]
 800b378:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00a      	beq.n	800b39a <tcp_input+0x5d2>
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b38a:	69fa      	ldr	r2, [r7, #28]
 800b38c:	6910      	ldr	r0, [r2, #16]
 800b38e:	89fa      	ldrh	r2, [r7, #14]
 800b390:	69f9      	ldr	r1, [r7, #28]
 800b392:	4798      	blx	r3
 800b394:	4603      	mov	r3, r0
 800b396:	74fb      	strb	r3, [r7, #19]
 800b398:	e001      	b.n	800b39e <tcp_input+0x5d6>
 800b39a:	2300      	movs	r3, #0
 800b39c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b39e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3a2:	f113 0f0d 	cmn.w	r3, #13
 800b3a6:	f000 8098 	beq.w	800b4da <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b3aa:	4b54      	ldr	r3, [pc, #336]	; (800b4fc <tcp_input+0x734>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b3b0:	69f8      	ldr	r0, [r7, #28]
 800b3b2:	f000 f915 	bl	800b5e0 <tcp_input_delayed_close>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f040 8090 	bne.w	800b4de <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b3be:	4b4d      	ldr	r3, [pc, #308]	; (800b4f4 <tcp_input+0x72c>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d041      	beq.n	800b44a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d006      	beq.n	800b3dc <tcp_input+0x614>
 800b3ce:	4b50      	ldr	r3, [pc, #320]	; (800b510 <tcp_input+0x748>)
 800b3d0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b3d4:	494f      	ldr	r1, [pc, #316]	; (800b514 <tcp_input+0x74c>)
 800b3d6:	4850      	ldr	r0, [pc, #320]	; (800b518 <tcp_input+0x750>)
 800b3d8:	f006 f9d8 	bl	801178c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	8b5b      	ldrh	r3, [r3, #26]
 800b3e0:	f003 0310 	and.w	r3, r3, #16
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d008      	beq.n	800b3fa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b3e8:	4b42      	ldr	r3, [pc, #264]	; (800b4f4 <tcp_input+0x72c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fd fec3 	bl	8009178 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b3f2:	69f8      	ldr	r0, [r7, #28]
 800b3f4:	f7fe fc48 	bl	8009c88 <tcp_abort>
            goto aborted;
 800b3f8:	e091      	b.n	800b51e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00c      	beq.n	800b41e <tcp_input+0x656>
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	6918      	ldr	r0, [r3, #16]
 800b40e:	4b39      	ldr	r3, [pc, #228]	; (800b4f4 <tcp_input+0x72c>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	2300      	movs	r3, #0
 800b414:	69f9      	ldr	r1, [r7, #28]
 800b416:	47a0      	blx	r4
 800b418:	4603      	mov	r3, r0
 800b41a:	74fb      	strb	r3, [r7, #19]
 800b41c:	e008      	b.n	800b430 <tcp_input+0x668>
 800b41e:	4b35      	ldr	r3, [pc, #212]	; (800b4f4 <tcp_input+0x72c>)
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	2300      	movs	r3, #0
 800b424:	69f9      	ldr	r1, [r7, #28]
 800b426:	2000      	movs	r0, #0
 800b428:	f7ff f95e 	bl	800a6e8 <tcp_recv_null>
 800b42c:	4603      	mov	r3, r0
 800b42e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b430:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b434:	f113 0f0d 	cmn.w	r3, #13
 800b438:	d053      	beq.n	800b4e2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b43a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b442:	4b2c      	ldr	r3, [pc, #176]	; (800b4f4 <tcp_input+0x72c>)
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b44a:	4b2b      	ldr	r3, [pc, #172]	; (800b4f8 <tcp_input+0x730>)
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	f003 0320 	and.w	r3, r3, #32
 800b452:	2b00      	cmp	r3, #0
 800b454:	d030      	beq.n	800b4b8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d009      	beq.n	800b472 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b462:	7b5a      	ldrb	r2, [r3, #13]
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b468:	f042 0220 	orr.w	r2, r2, #32
 800b46c:	b2d2      	uxtb	r2, r2
 800b46e:	735a      	strb	r2, [r3, #13]
 800b470:	e022      	b.n	800b4b8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b476:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b47a:	d005      	beq.n	800b488 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b480:	3301      	adds	r3, #1
 800b482:	b29a      	uxth	r2, r3
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00b      	beq.n	800b4aa <tcp_input+0x6e2>
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	6918      	ldr	r0, [r3, #16]
 800b49c:	2300      	movs	r3, #0
 800b49e:	2200      	movs	r2, #0
 800b4a0:	69f9      	ldr	r1, [r7, #28]
 800b4a2:	47a0      	blx	r4
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	74fb      	strb	r3, [r7, #19]
 800b4a8:	e001      	b.n	800b4ae <tcp_input+0x6e6>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b4ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4b2:	f113 0f0d 	cmn.w	r3, #13
 800b4b6:	d016      	beq.n	800b4e6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b4b8:	4b13      	ldr	r3, [pc, #76]	; (800b508 <tcp_input+0x740>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b4be:	69f8      	ldr	r0, [r7, #28]
 800b4c0:	f000 f88e 	bl	800b5e0 <tcp_input_delayed_close>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d128      	bne.n	800b51c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b4ca:	69f8      	ldr	r0, [r7, #28]
 800b4cc:	f002 fac8 	bl	800da60 <tcp_output>
 800b4d0:	e025      	b.n	800b51e <tcp_input+0x756>
        goto aborted;
 800b4d2:	bf00      	nop
 800b4d4:	e023      	b.n	800b51e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b4d6:	bf00      	nop
 800b4d8:	e021      	b.n	800b51e <tcp_input+0x756>
              goto aborted;
 800b4da:	bf00      	nop
 800b4dc:	e01f      	b.n	800b51e <tcp_input+0x756>
          goto aborted;
 800b4de:	bf00      	nop
 800b4e0:	e01d      	b.n	800b51e <tcp_input+0x756>
            goto aborted;
 800b4e2:	bf00      	nop
 800b4e4:	e01b      	b.n	800b51e <tcp_input+0x756>
              goto aborted;
 800b4e6:	bf00      	nop
 800b4e8:	e019      	b.n	800b51e <tcp_input+0x756>
 800b4ea:	bf00      	nop
 800b4ec:	20008048 	.word	0x20008048
 800b4f0:	20008058 	.word	0x20008058
 800b4f4:	20008078 	.word	0x20008078
 800b4f8:	20008075 	.word	0x20008075
 800b4fc:	20008070 	.word	0x20008070
 800b500:	20008074 	.word	0x20008074
 800b504:	20008072 	.word	0x20008072
 800b508:	2000807c 	.word	0x2000807c
 800b50c:	2000803c 	.word	0x2000803c
 800b510:	08013f78 	.word	0x08013f78
 800b514:	0801412c 	.word	0x0801412c
 800b518:	08013fc4 	.word	0x08013fc4
          goto aborted;
 800b51c:	bf00      	nop
    tcp_input_pcb = NULL;
 800b51e:	4b27      	ldr	r3, [pc, #156]	; (800b5bc <tcp_input+0x7f4>)
 800b520:	2200      	movs	r2, #0
 800b522:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b524:	4b26      	ldr	r3, [pc, #152]	; (800b5c0 <tcp_input+0x7f8>)
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b52a:	4b26      	ldr	r3, [pc, #152]	; (800b5c4 <tcp_input+0x7fc>)
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d03f      	beq.n	800b5b2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b532:	4b24      	ldr	r3, [pc, #144]	; (800b5c4 <tcp_input+0x7fc>)
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	4618      	mov	r0, r3
 800b538:	f7fd fe1e 	bl	8009178 <pbuf_free>
      inseg.p = NULL;
 800b53c:	4b21      	ldr	r3, [pc, #132]	; (800b5c4 <tcp_input+0x7fc>)
 800b53e:	2200      	movs	r2, #0
 800b540:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b542:	e036      	b.n	800b5b2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b544:	4b20      	ldr	r3, [pc, #128]	; (800b5c8 <tcp_input+0x800>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	899b      	ldrh	r3, [r3, #12]
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fc fa0f 	bl	8007970 <lwip_htons>
 800b552:	4603      	mov	r3, r0
 800b554:	b2db      	uxtb	r3, r3
 800b556:	f003 0304 	and.w	r3, r3, #4
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d118      	bne.n	800b590 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b55e:	4b1b      	ldr	r3, [pc, #108]	; (800b5cc <tcp_input+0x804>)
 800b560:	6819      	ldr	r1, [r3, #0]
 800b562:	4b1b      	ldr	r3, [pc, #108]	; (800b5d0 <tcp_input+0x808>)
 800b564:	881b      	ldrh	r3, [r3, #0]
 800b566:	461a      	mov	r2, r3
 800b568:	4b1a      	ldr	r3, [pc, #104]	; (800b5d4 <tcp_input+0x80c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b56e:	4b16      	ldr	r3, [pc, #88]	; (800b5c8 <tcp_input+0x800>)
 800b570:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b572:	885b      	ldrh	r3, [r3, #2]
 800b574:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b576:	4a14      	ldr	r2, [pc, #80]	; (800b5c8 <tcp_input+0x800>)
 800b578:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b57a:	8812      	ldrh	r2, [r2, #0]
 800b57c:	b292      	uxth	r2, r2
 800b57e:	9202      	str	r2, [sp, #8]
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	4b15      	ldr	r3, [pc, #84]	; (800b5d8 <tcp_input+0x810>)
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	4b15      	ldr	r3, [pc, #84]	; (800b5dc <tcp_input+0x814>)
 800b588:	4602      	mov	r2, r0
 800b58a:	2000      	movs	r0, #0
 800b58c:	f003 f81c 	bl	800e5c8 <tcp_rst>
    pbuf_free(p);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7fd fdf1 	bl	8009178 <pbuf_free>
  return;
 800b596:	e00c      	b.n	800b5b2 <tcp_input+0x7ea>
    goto dropped;
 800b598:	bf00      	nop
 800b59a:	e006      	b.n	800b5aa <tcp_input+0x7e2>
    goto dropped;
 800b59c:	bf00      	nop
 800b59e:	e004      	b.n	800b5aa <tcp_input+0x7e2>
    goto dropped;
 800b5a0:	bf00      	nop
 800b5a2:	e002      	b.n	800b5aa <tcp_input+0x7e2>
      goto dropped;
 800b5a4:	bf00      	nop
 800b5a6:	e000      	b.n	800b5aa <tcp_input+0x7e2>
      goto dropped;
 800b5a8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7fd fde4 	bl	8009178 <pbuf_free>
 800b5b0:	e000      	b.n	800b5b4 <tcp_input+0x7ec>
  return;
 800b5b2:	bf00      	nop
}
 800b5b4:	3724      	adds	r7, #36	; 0x24
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd90      	pop	{r4, r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	2000807c 	.word	0x2000807c
 800b5c0:	20008078 	.word	0x20008078
 800b5c4:	20008048 	.word	0x20008048
 800b5c8:	20008058 	.word	0x20008058
 800b5cc:	2000806c 	.word	0x2000806c
 800b5d0:	20008072 	.word	0x20008072
 800b5d4:	20008068 	.word	0x20008068
 800b5d8:	20005124 	.word	0x20005124
 800b5dc:	20005128 	.word	0x20005128

0800b5e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d106      	bne.n	800b5fc <tcp_input_delayed_close+0x1c>
 800b5ee:	4b17      	ldr	r3, [pc, #92]	; (800b64c <tcp_input_delayed_close+0x6c>)
 800b5f0:	f240 225a 	movw	r2, #602	; 0x25a
 800b5f4:	4916      	ldr	r1, [pc, #88]	; (800b650 <tcp_input_delayed_close+0x70>)
 800b5f6:	4817      	ldr	r0, [pc, #92]	; (800b654 <tcp_input_delayed_close+0x74>)
 800b5f8:	f006 f8c8 	bl	801178c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b5fc:	4b16      	ldr	r3, [pc, #88]	; (800b658 <tcp_input_delayed_close+0x78>)
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	f003 0310 	and.w	r3, r3, #16
 800b604:	2b00      	cmp	r3, #0
 800b606:	d01c      	beq.n	800b642 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	8b5b      	ldrh	r3, [r3, #26]
 800b60c:	f003 0310 	and.w	r3, r3, #16
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10d      	bne.n	800b630 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d008      	beq.n	800b630 <tcp_input_delayed_close+0x50>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	6912      	ldr	r2, [r2, #16]
 800b628:	f06f 010e 	mvn.w	r1, #14
 800b62c:	4610      	mov	r0, r2
 800b62e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b630:	6879      	ldr	r1, [r7, #4]
 800b632:	480a      	ldr	r0, [pc, #40]	; (800b65c <tcp_input_delayed_close+0x7c>)
 800b634:	f7ff fa50 	bl	800aad8 <tcp_pcb_remove>
    tcp_free(pcb);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7fe f83d 	bl	80096b8 <tcp_free>
    return 1;
 800b63e:	2301      	movs	r3, #1
 800b640:	e000      	b.n	800b644 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	08013f78 	.word	0x08013f78
 800b650:	08014148 	.word	0x08014148
 800b654:	08013fc4 	.word	0x08013fc4
 800b658:	20008075 	.word	0x20008075
 800b65c:	2000803c 	.word	0x2000803c

0800b660 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b660:	b590      	push	{r4, r7, lr}
 800b662:	b08b      	sub	sp, #44	; 0x2c
 800b664:	af04      	add	r7, sp, #16
 800b666:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b668:	4b6f      	ldr	r3, [pc, #444]	; (800b828 <tcp_listen_input+0x1c8>)
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	f003 0304 	and.w	r3, r3, #4
 800b670:	2b00      	cmp	r3, #0
 800b672:	f040 80d2 	bne.w	800b81a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d106      	bne.n	800b68a <tcp_listen_input+0x2a>
 800b67c:	4b6b      	ldr	r3, [pc, #428]	; (800b82c <tcp_listen_input+0x1cc>)
 800b67e:	f240 2281 	movw	r2, #641	; 0x281
 800b682:	496b      	ldr	r1, [pc, #428]	; (800b830 <tcp_listen_input+0x1d0>)
 800b684:	486b      	ldr	r0, [pc, #428]	; (800b834 <tcp_listen_input+0x1d4>)
 800b686:	f006 f881 	bl	801178c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b68a:	4b67      	ldr	r3, [pc, #412]	; (800b828 <tcp_listen_input+0x1c8>)
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	f003 0310 	and.w	r3, r3, #16
 800b692:	2b00      	cmp	r3, #0
 800b694:	d019      	beq.n	800b6ca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b696:	4b68      	ldr	r3, [pc, #416]	; (800b838 <tcp_listen_input+0x1d8>)
 800b698:	6819      	ldr	r1, [r3, #0]
 800b69a:	4b68      	ldr	r3, [pc, #416]	; (800b83c <tcp_listen_input+0x1dc>)
 800b69c:	881b      	ldrh	r3, [r3, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	4b67      	ldr	r3, [pc, #412]	; (800b840 <tcp_listen_input+0x1e0>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b6a6:	4b67      	ldr	r3, [pc, #412]	; (800b844 <tcp_listen_input+0x1e4>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6aa:	885b      	ldrh	r3, [r3, #2]
 800b6ac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b6ae:	4a65      	ldr	r2, [pc, #404]	; (800b844 <tcp_listen_input+0x1e4>)
 800b6b0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6b2:	8812      	ldrh	r2, [r2, #0]
 800b6b4:	b292      	uxth	r2, r2
 800b6b6:	9202      	str	r2, [sp, #8]
 800b6b8:	9301      	str	r3, [sp, #4]
 800b6ba:	4b63      	ldr	r3, [pc, #396]	; (800b848 <tcp_listen_input+0x1e8>)
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	4b63      	ldr	r3, [pc, #396]	; (800b84c <tcp_listen_input+0x1ec>)
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f002 ff80 	bl	800e5c8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b6c8:	e0a9      	b.n	800b81e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b6ca:	4b57      	ldr	r3, [pc, #348]	; (800b828 <tcp_listen_input+0x1c8>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	f003 0302 	and.w	r3, r3, #2
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 80a3 	beq.w	800b81e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	7d5b      	ldrb	r3, [r3, #21]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7ff f927 	bl	800a930 <tcp_alloc>
 800b6e2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d111      	bne.n	800b70e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	699b      	ldr	r3, [r3, #24]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00a      	beq.n	800b708 <tcp_listen_input+0xa8>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	699b      	ldr	r3, [r3, #24]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	6910      	ldr	r0, [r2, #16]
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fe:	2100      	movs	r1, #0
 800b700:	4798      	blx	r3
 800b702:	4603      	mov	r3, r0
 800b704:	73bb      	strb	r3, [r7, #14]
      return;
 800b706:	e08b      	b.n	800b820 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b708:	23f0      	movs	r3, #240	; 0xf0
 800b70a:	73bb      	strb	r3, [r7, #14]
      return;
 800b70c:	e088      	b.n	800b820 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b70e:	4b50      	ldr	r3, [pc, #320]	; (800b850 <tcp_listen_input+0x1f0>)
 800b710:	695a      	ldr	r2, [r3, #20]
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b716:	4b4e      	ldr	r3, [pc, #312]	; (800b850 <tcp_listen_input+0x1f0>)
 800b718:	691a      	ldr	r2, [r3, #16]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	8ada      	ldrh	r2, [r3, #22]
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b726:	4b47      	ldr	r3, [pc, #284]	; (800b844 <tcp_listen_input+0x1e4>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	2203      	movs	r2, #3
 800b736:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b738:	4b41      	ldr	r3, [pc, #260]	; (800b840 <tcp_listen_input+0x1e0>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	1c5a      	adds	r2, r3, #1
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b74a:	6978      	ldr	r0, [r7, #20]
 800b74c:	f7ff fa58 	bl	800ac00 <tcp_next_iss>
 800b750:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b76a:	4b35      	ldr	r3, [pc, #212]	; (800b840 <tcp_listen_input+0x1e0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	1e5a      	subs	r2, r3, #1
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	691a      	ldr	r2, [r3, #16]
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	7a5b      	ldrb	r3, [r3, #9]
 800b786:	f003 030c 	and.w	r3, r3, #12
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	7a1a      	ldrb	r2, [r3, #8]
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b798:	4b2e      	ldr	r3, [pc, #184]	; (800b854 <tcp_listen_input+0x1f4>)
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	60da      	str	r2, [r3, #12]
 800b7a0:	4a2c      	ldr	r2, [pc, #176]	; (800b854 <tcp_listen_input+0x1f4>)
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	f003 f8d1 	bl	800e94c <tcp_timer_needed>
 800b7aa:	4b2b      	ldr	r3, [pc, #172]	; (800b858 <tcp_listen_input+0x1f8>)
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b7b0:	6978      	ldr	r0, [r7, #20]
 800b7b2:	f001 fd8f 	bl	800d2d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b7b6:	4b23      	ldr	r3, [pc, #140]	; (800b844 <tcp_listen_input+0x1e4>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	89db      	ldrh	r3, [r3, #14]
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f004 fc9f 	bl	801011c <ip4_route>
 800b7de:	4601      	mov	r1, r0
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f7ff fa30 	bl	800ac4c <tcp_eff_send_mss_netif>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b7f4:	2112      	movs	r1, #18
 800b7f6:	6978      	ldr	r0, [r7, #20]
 800b7f8:	f002 f844 	bl	800d884 <tcp_enqueue_flags>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d004      	beq.n	800b812 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b808:	2100      	movs	r1, #0
 800b80a:	6978      	ldr	r0, [r7, #20]
 800b80c:	f7fe f97e 	bl	8009b0c <tcp_abandon>
      return;
 800b810:	e006      	b.n	800b820 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b812:	6978      	ldr	r0, [r7, #20]
 800b814:	f002 f924 	bl	800da60 <tcp_output>
  return;
 800b818:	e001      	b.n	800b81e <tcp_listen_input+0x1be>
    return;
 800b81a:	bf00      	nop
 800b81c:	e000      	b.n	800b820 <tcp_listen_input+0x1c0>
  return;
 800b81e:	bf00      	nop
}
 800b820:	371c      	adds	r7, #28
 800b822:	46bd      	mov	sp, r7
 800b824:	bd90      	pop	{r4, r7, pc}
 800b826:	bf00      	nop
 800b828:	20008074 	.word	0x20008074
 800b82c:	08013f78 	.word	0x08013f78
 800b830:	08014170 	.word	0x08014170
 800b834:	08013fc4 	.word	0x08013fc4
 800b838:	2000806c 	.word	0x2000806c
 800b83c:	20008072 	.word	0x20008072
 800b840:	20008068 	.word	0x20008068
 800b844:	20008058 	.word	0x20008058
 800b848:	20005124 	.word	0x20005124
 800b84c:	20005128 	.word	0x20005128
 800b850:	20005114 	.word	0x20005114
 800b854:	2000803c 	.word	0x2000803c
 800b858:	20008044 	.word	0x20008044

0800b85c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af04      	add	r7, sp, #16
 800b862:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b864:	4b2f      	ldr	r3, [pc, #188]	; (800b924 <tcp_timewait_input+0xc8>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	f003 0304 	and.w	r3, r3, #4
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d153      	bne.n	800b918 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <tcp_timewait_input+0x28>
 800b876:	4b2c      	ldr	r3, [pc, #176]	; (800b928 <tcp_timewait_input+0xcc>)
 800b878:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b87c:	492b      	ldr	r1, [pc, #172]	; (800b92c <tcp_timewait_input+0xd0>)
 800b87e:	482c      	ldr	r0, [pc, #176]	; (800b930 <tcp_timewait_input+0xd4>)
 800b880:	f005 ff84 	bl	801178c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b884:	4b27      	ldr	r3, [pc, #156]	; (800b924 <tcp_timewait_input+0xc8>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	f003 0302 	and.w	r3, r3, #2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d02a      	beq.n	800b8e6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b890:	4b28      	ldr	r3, [pc, #160]	; (800b934 <tcp_timewait_input+0xd8>)
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	db2d      	blt.n	800b8fa <tcp_timewait_input+0x9e>
 800b89e:	4b25      	ldr	r3, [pc, #148]	; (800b934 <tcp_timewait_input+0xd8>)
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a6:	6879      	ldr	r1, [r7, #4]
 800b8a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b8aa:	440b      	add	r3, r1
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	dc23      	bgt.n	800b8fa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8b2:	4b21      	ldr	r3, [pc, #132]	; (800b938 <tcp_timewait_input+0xdc>)
 800b8b4:	6819      	ldr	r1, [r3, #0]
 800b8b6:	4b21      	ldr	r3, [pc, #132]	; (800b93c <tcp_timewait_input+0xe0>)
 800b8b8:	881b      	ldrh	r3, [r3, #0]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	4b1d      	ldr	r3, [pc, #116]	; (800b934 <tcp_timewait_input+0xd8>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8c2:	4b1f      	ldr	r3, [pc, #124]	; (800b940 <tcp_timewait_input+0xe4>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8c6:	885b      	ldrh	r3, [r3, #2]
 800b8c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8ca:	4a1d      	ldr	r2, [pc, #116]	; (800b940 <tcp_timewait_input+0xe4>)
 800b8cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8ce:	8812      	ldrh	r2, [r2, #0]
 800b8d0:	b292      	uxth	r2, r2
 800b8d2:	9202      	str	r2, [sp, #8]
 800b8d4:	9301      	str	r3, [sp, #4]
 800b8d6:	4b1b      	ldr	r3, [pc, #108]	; (800b944 <tcp_timewait_input+0xe8>)
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	4b1b      	ldr	r3, [pc, #108]	; (800b948 <tcp_timewait_input+0xec>)
 800b8dc:	4602      	mov	r2, r0
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f002 fe72 	bl	800e5c8 <tcp_rst>
      return;
 800b8e4:	e01b      	b.n	800b91e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b8e6:	4b0f      	ldr	r3, [pc, #60]	; (800b924 <tcp_timewait_input+0xc8>)
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	f003 0301 	and.w	r3, r3, #1
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d003      	beq.n	800b8fa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b8f2:	4b16      	ldr	r3, [pc, #88]	; (800b94c <tcp_timewait_input+0xf0>)
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b8fa:	4b10      	ldr	r3, [pc, #64]	; (800b93c <tcp_timewait_input+0xe0>)
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00c      	beq.n	800b91c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	8b5b      	ldrh	r3, [r3, #26]
 800b906:	f043 0302 	orr.w	r3, r3, #2
 800b90a:	b29a      	uxth	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f002 f8a5 	bl	800da60 <tcp_output>
  }
  return;
 800b916:	e001      	b.n	800b91c <tcp_timewait_input+0xc0>
    return;
 800b918:	bf00      	nop
 800b91a:	e000      	b.n	800b91e <tcp_timewait_input+0xc2>
  return;
 800b91c:	bf00      	nop
}
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	20008074 	.word	0x20008074
 800b928:	08013f78 	.word	0x08013f78
 800b92c:	08014190 	.word	0x08014190
 800b930:	08013fc4 	.word	0x08013fc4
 800b934:	20008068 	.word	0x20008068
 800b938:	2000806c 	.word	0x2000806c
 800b93c:	20008072 	.word	0x20008072
 800b940:	20008058 	.word	0x20008058
 800b944:	20005124 	.word	0x20005124
 800b948:	20005128 	.word	0x20005128
 800b94c:	20008030 	.word	0x20008030

0800b950 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b950:	b590      	push	{r4, r7, lr}
 800b952:	b08d      	sub	sp, #52	; 0x34
 800b954:	af04      	add	r7, sp, #16
 800b956:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <tcp_process+0x24>
 800b966:	4b9d      	ldr	r3, [pc, #628]	; (800bbdc <tcp_process+0x28c>)
 800b968:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b96c:	499c      	ldr	r1, [pc, #624]	; (800bbe0 <tcp_process+0x290>)
 800b96e:	489d      	ldr	r0, [pc, #628]	; (800bbe4 <tcp_process+0x294>)
 800b970:	f005 ff0c 	bl	801178c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b974:	4b9c      	ldr	r3, [pc, #624]	; (800bbe8 <tcp_process+0x298>)
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d04e      	beq.n	800ba1e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	7d1b      	ldrb	r3, [r3, #20]
 800b984:	2b02      	cmp	r3, #2
 800b986:	d108      	bne.n	800b99a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b98c:	4b97      	ldr	r3, [pc, #604]	; (800bbec <tcp_process+0x29c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d123      	bne.n	800b9dc <tcp_process+0x8c>
        acceptable = 1;
 800b994:	2301      	movs	r3, #1
 800b996:	76fb      	strb	r3, [r7, #27]
 800b998:	e020      	b.n	800b9dc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b99e:	4b94      	ldr	r3, [pc, #592]	; (800bbf0 <tcp_process+0x2a0>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d102      	bne.n	800b9ac <tcp_process+0x5c>
        acceptable = 1;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	76fb      	strb	r3, [r7, #27]
 800b9aa:	e017      	b.n	800b9dc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b9ac:	4b90      	ldr	r3, [pc, #576]	; (800bbf0 <tcp_process+0x2a0>)
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	db10      	blt.n	800b9dc <tcp_process+0x8c>
 800b9ba:	4b8d      	ldr	r3, [pc, #564]	; (800bbf0 <tcp_process+0x2a0>)
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	6879      	ldr	r1, [r7, #4]
 800b9c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b9c6:	440b      	add	r3, r1
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	dc06      	bgt.n	800b9dc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	8b5b      	ldrh	r3, [r3, #26]
 800b9d2:	f043 0302 	orr.w	r3, r3, #2
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b9dc:	7efb      	ldrb	r3, [r7, #27]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d01b      	beq.n	800ba1a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	7d1b      	ldrb	r3, [r3, #20]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d106      	bne.n	800b9f8 <tcp_process+0xa8>
 800b9ea:	4b7c      	ldr	r3, [pc, #496]	; (800bbdc <tcp_process+0x28c>)
 800b9ec:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b9f0:	4980      	ldr	r1, [pc, #512]	; (800bbf4 <tcp_process+0x2a4>)
 800b9f2:	487c      	ldr	r0, [pc, #496]	; (800bbe4 <tcp_process+0x294>)
 800b9f4:	f005 feca 	bl	801178c <iprintf>
      recv_flags |= TF_RESET;
 800b9f8:	4b7f      	ldr	r3, [pc, #508]	; (800bbf8 <tcp_process+0x2a8>)
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	f043 0308 	orr.w	r3, r3, #8
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	4b7d      	ldr	r3, [pc, #500]	; (800bbf8 <tcp_process+0x2a8>)
 800ba04:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	8b5b      	ldrh	r3, [r3, #26]
 800ba0a:	f023 0301 	bic.w	r3, r3, #1
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ba14:	f06f 030d 	mvn.w	r3, #13
 800ba18:	e37a      	b.n	800c110 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	e378      	b.n	800c110 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ba1e:	4b72      	ldr	r3, [pc, #456]	; (800bbe8 <tcp_process+0x298>)
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	f003 0302 	and.w	r3, r3, #2
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d010      	beq.n	800ba4c <tcp_process+0xfc>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	7d1b      	ldrb	r3, [r3, #20]
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d00c      	beq.n	800ba4c <tcp_process+0xfc>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	7d1b      	ldrb	r3, [r3, #20]
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	d008      	beq.n	800ba4c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	8b5b      	ldrh	r3, [r3, #26]
 800ba3e:	f043 0302 	orr.w	r3, r3, #2
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	e361      	b.n	800c110 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	8b5b      	ldrh	r3, [r3, #26]
 800ba50:	f003 0310 	and.w	r3, r3, #16
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d103      	bne.n	800ba60 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ba58:	4b68      	ldr	r3, [pc, #416]	; (800bbfc <tcp_process+0x2ac>)
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 fc2f 	bl	800d2d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	7d1b      	ldrb	r3, [r3, #20]
 800ba7a:	3b02      	subs	r3, #2
 800ba7c:	2b07      	cmp	r3, #7
 800ba7e:	f200 8337 	bhi.w	800c0f0 <tcp_process+0x7a0>
 800ba82:	a201      	add	r2, pc, #4	; (adr r2, 800ba88 <tcp_process+0x138>)
 800ba84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba88:	0800baa9 	.word	0x0800baa9
 800ba8c:	0800bcd9 	.word	0x0800bcd9
 800ba90:	0800be51 	.word	0x0800be51
 800ba94:	0800be7b 	.word	0x0800be7b
 800ba98:	0800bf9f 	.word	0x0800bf9f
 800ba9c:	0800be51 	.word	0x0800be51
 800baa0:	0800c02b 	.word	0x0800c02b
 800baa4:	0800c0bb 	.word	0x0800c0bb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800baa8:	4b4f      	ldr	r3, [pc, #316]	; (800bbe8 <tcp_process+0x298>)
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	f003 0310 	and.w	r3, r3, #16
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 80e4 	beq.w	800bc7e <tcp_process+0x32e>
 800bab6:	4b4c      	ldr	r3, [pc, #304]	; (800bbe8 <tcp_process+0x298>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	f003 0302 	and.w	r3, r3, #2
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f000 80dd 	beq.w	800bc7e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac8:	1c5a      	adds	r2, r3, #1
 800baca:	4b48      	ldr	r3, [pc, #288]	; (800bbec <tcp_process+0x29c>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	f040 80d5 	bne.w	800bc7e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bad4:	4b46      	ldr	r3, [pc, #280]	; (800bbf0 <tcp_process+0x2a0>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	1c5a      	adds	r2, r3, #1
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bae6:	4b41      	ldr	r3, [pc, #260]	; (800bbec <tcp_process+0x29c>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800baee:	4b44      	ldr	r3, [pc, #272]	; (800bc00 <tcp_process+0x2b0>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	89db      	ldrh	r3, [r3, #14]
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bb08:	4b39      	ldr	r3, [pc, #228]	; (800bbf0 <tcp_process+0x2a0>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	1e5a      	subs	r2, r3, #1
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2204      	movs	r2, #4
 800bb16:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	3304      	adds	r3, #4
 800bb20:	4618      	mov	r0, r3
 800bb22:	f004 fafb 	bl	801011c <ip4_route>
 800bb26:	4601      	mov	r1, r0
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f7ff f88c 	bl	800ac4c <tcp_eff_send_mss_netif>
 800bb34:	4603      	mov	r3, r0
 800bb36:	461a      	mov	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb40:	009a      	lsls	r2, r3, #2
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	f241 111c 	movw	r1, #4380	; 0x111c
 800bb4c:	428b      	cmp	r3, r1
 800bb4e:	bf38      	it	cc
 800bb50:	460b      	movcc	r3, r1
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d204      	bcs.n	800bb60 <tcp_process+0x210>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	e00d      	b.n	800bb7c <tcp_process+0x22c>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	f241 121c 	movw	r2, #4380	; 0x111c
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d904      	bls.n	800bb78 <tcp_process+0x228>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb72:	005b      	lsls	r3, r3, #1
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	e001      	b.n	800bb7c <tcp_process+0x22c>
 800bb78:	f241 131c 	movw	r3, #4380	; 0x111c
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d106      	bne.n	800bb9a <tcp_process+0x24a>
 800bb8c:	4b13      	ldr	r3, [pc, #76]	; (800bbdc <tcp_process+0x28c>)
 800bb8e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bb92:	491c      	ldr	r1, [pc, #112]	; (800bc04 <tcp_process+0x2b4>)
 800bb94:	4813      	ldr	r0, [pc, #76]	; (800bbe4 <tcp_process+0x294>)
 800bb96:	f005 fdf9 	bl	801178c <iprintf>
        --pcb->snd_queuelen;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bba0:	3b01      	subs	r3, #1
 800bba2:	b29a      	uxth	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d12a      	bne.n	800bc0c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <tcp_process+0x280>
 800bbc2:	4b06      	ldr	r3, [pc, #24]	; (800bbdc <tcp_process+0x28c>)
 800bbc4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800bbc8:	490f      	ldr	r1, [pc, #60]	; (800bc08 <tcp_process+0x2b8>)
 800bbca:	4806      	ldr	r0, [pc, #24]	; (800bbe4 <tcp_process+0x294>)
 800bbcc:	f005 fdde 	bl	801178c <iprintf>
          pcb->unsent = rseg->next;
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	66da      	str	r2, [r3, #108]	; 0x6c
 800bbd8:	e01c      	b.n	800bc14 <tcp_process+0x2c4>
 800bbda:	bf00      	nop
 800bbdc:	08013f78 	.word	0x08013f78
 800bbe0:	080141b0 	.word	0x080141b0
 800bbe4:	08013fc4 	.word	0x08013fc4
 800bbe8:	20008074 	.word	0x20008074
 800bbec:	2000806c 	.word	0x2000806c
 800bbf0:	20008068 	.word	0x20008068
 800bbf4:	080141cc 	.word	0x080141cc
 800bbf8:	20008075 	.word	0x20008075
 800bbfc:	20008030 	.word	0x20008030
 800bc00:	20008058 	.word	0x20008058
 800bc04:	080141ec 	.word	0x080141ec
 800bc08:	08014204 	.word	0x08014204
        } else {
          pcb->unacked = rseg->next;
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800bc14:	69f8      	ldr	r0, [r7, #28]
 800bc16:	f7fe fd22 	bl	800a65e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d104      	bne.n	800bc2c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc28:	861a      	strh	r2, [r3, #48]	; 0x30
 800bc2a:	e006      	b.n	800bc3a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00a      	beq.n	800bc5a <tcp_process+0x30a>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	6910      	ldr	r0, [r2, #16]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	6879      	ldr	r1, [r7, #4]
 800bc52:	4798      	blx	r3
 800bc54:	4603      	mov	r3, r0
 800bc56:	76bb      	strb	r3, [r7, #26]
 800bc58:	e001      	b.n	800bc5e <tcp_process+0x30e>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800bc5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bc62:	f113 0f0d 	cmn.w	r3, #13
 800bc66:	d102      	bne.n	800bc6e <tcp_process+0x31e>
          return ERR_ABRT;
 800bc68:	f06f 030c 	mvn.w	r3, #12
 800bc6c:	e250      	b.n	800c110 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	8b5b      	ldrh	r3, [r3, #26]
 800bc72:	f043 0302 	orr.w	r3, r3, #2
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bc7c:	e23a      	b.n	800c0f4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800bc7e:	4b98      	ldr	r3, [pc, #608]	; (800bee0 <tcp_process+0x590>)
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	f003 0310 	and.w	r3, r3, #16
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f000 8234 	beq.w	800c0f4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc8c:	4b95      	ldr	r3, [pc, #596]	; (800bee4 <tcp_process+0x594>)
 800bc8e:	6819      	ldr	r1, [r3, #0]
 800bc90:	4b95      	ldr	r3, [pc, #596]	; (800bee8 <tcp_process+0x598>)
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	461a      	mov	r2, r3
 800bc96:	4b95      	ldr	r3, [pc, #596]	; (800beec <tcp_process+0x59c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc9c:	4b94      	ldr	r3, [pc, #592]	; (800bef0 <tcp_process+0x5a0>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bca0:	885b      	ldrh	r3, [r3, #2]
 800bca2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bca4:	4a92      	ldr	r2, [pc, #584]	; (800bef0 <tcp_process+0x5a0>)
 800bca6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bca8:	8812      	ldrh	r2, [r2, #0]
 800bcaa:	b292      	uxth	r2, r2
 800bcac:	9202      	str	r2, [sp, #8]
 800bcae:	9301      	str	r3, [sp, #4]
 800bcb0:	4b90      	ldr	r3, [pc, #576]	; (800bef4 <tcp_process+0x5a4>)
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	4b90      	ldr	r3, [pc, #576]	; (800bef8 <tcp_process+0x5a8>)
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f002 fc85 	bl	800e5c8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcc4:	2b05      	cmp	r3, #5
 800bcc6:	f200 8215 	bhi.w	800c0f4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f002 fa4f 	bl	800e174 <tcp_rexmit_rto>
      break;
 800bcd6:	e20d      	b.n	800c0f4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bcd8:	4b81      	ldr	r3, [pc, #516]	; (800bee0 <tcp_process+0x590>)
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	f003 0310 	and.w	r3, r3, #16
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 80a1 	beq.w	800be28 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bce6:	4b7f      	ldr	r3, [pc, #508]	; (800bee4 <tcp_process+0x594>)
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	db7e      	blt.n	800bdf4 <tcp_process+0x4a4>
 800bcf6:	4b7b      	ldr	r3, [pc, #492]	; (800bee4 <tcp_process+0x594>)
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	dc77      	bgt.n	800bdf4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2204      	movs	r2, #4
 800bd08:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d102      	bne.n	800bd18 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bd12:	23fa      	movs	r3, #250	; 0xfa
 800bd14:	76bb      	strb	r3, [r7, #26]
 800bd16:	e01d      	b.n	800bd54 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d106      	bne.n	800bd30 <tcp_process+0x3e0>
 800bd22:	4b76      	ldr	r3, [pc, #472]	; (800befc <tcp_process+0x5ac>)
 800bd24:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bd28:	4975      	ldr	r1, [pc, #468]	; (800bf00 <tcp_process+0x5b0>)
 800bd2a:	4876      	ldr	r0, [pc, #472]	; (800bf04 <tcp_process+0x5b4>)
 800bd2c:	f005 fd2e 	bl	801178c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <tcp_process+0x400>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd3e:	699b      	ldr	r3, [r3, #24]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	6910      	ldr	r0, [r2, #16]
 800bd44:	2200      	movs	r2, #0
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	4798      	blx	r3
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	76bb      	strb	r3, [r7, #26]
 800bd4e:	e001      	b.n	800bd54 <tcp_process+0x404>
 800bd50:	23f0      	movs	r3, #240	; 0xf0
 800bd52:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bd54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00a      	beq.n	800bd72 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bd5c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bd60:	f113 0f0d 	cmn.w	r3, #13
 800bd64:	d002      	beq.n	800bd6c <tcp_process+0x41c>
              tcp_abort(pcb);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7fd ff8e 	bl	8009c88 <tcp_abort>
            }
            return ERR_ABRT;
 800bd6c:	f06f 030c 	mvn.w	r3, #12
 800bd70:	e1ce      	b.n	800c110 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fae0 	bl	800c338 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bd78:	4b63      	ldr	r3, [pc, #396]	; (800bf08 <tcp_process+0x5b8>)
 800bd7a:	881b      	ldrh	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d005      	beq.n	800bd8c <tcp_process+0x43c>
            recv_acked--;
 800bd80:	4b61      	ldr	r3, [pc, #388]	; (800bf08 <tcp_process+0x5b8>)
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	4b5f      	ldr	r3, [pc, #380]	; (800bf08 <tcp_process+0x5b8>)
 800bd8a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd90:	009a      	lsls	r2, r3, #2
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	f241 111c 	movw	r1, #4380	; 0x111c
 800bd9c:	428b      	cmp	r3, r1
 800bd9e:	bf38      	it	cc
 800bda0:	460b      	movcc	r3, r1
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d204      	bcs.n	800bdb0 <tcp_process+0x460>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	e00d      	b.n	800bdcc <tcp_process+0x47c>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	f241 121c 	movw	r2, #4380	; 0x111c
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d904      	bls.n	800bdc8 <tcp_process+0x478>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdc2:	005b      	lsls	r3, r3, #1
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	e001      	b.n	800bdcc <tcp_process+0x47c>
 800bdc8:	f241 131c 	movw	r3, #4380	; 0x111c
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800bdd2:	4b4e      	ldr	r3, [pc, #312]	; (800bf0c <tcp_process+0x5bc>)
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	f003 0320 	and.w	r3, r3, #32
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d037      	beq.n	800be4e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	8b5b      	ldrh	r3, [r3, #26]
 800bde2:	f043 0302 	orr.w	r3, r3, #2
 800bde6:	b29a      	uxth	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2207      	movs	r2, #7
 800bdf0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800bdf2:	e02c      	b.n	800be4e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdf4:	4b3b      	ldr	r3, [pc, #236]	; (800bee4 <tcp_process+0x594>)
 800bdf6:	6819      	ldr	r1, [r3, #0]
 800bdf8:	4b3b      	ldr	r3, [pc, #236]	; (800bee8 <tcp_process+0x598>)
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	4b3b      	ldr	r3, [pc, #236]	; (800beec <tcp_process+0x59c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be04:	4b3a      	ldr	r3, [pc, #232]	; (800bef0 <tcp_process+0x5a0>)
 800be06:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be08:	885b      	ldrh	r3, [r3, #2]
 800be0a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be0c:	4a38      	ldr	r2, [pc, #224]	; (800bef0 <tcp_process+0x5a0>)
 800be0e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be10:	8812      	ldrh	r2, [r2, #0]
 800be12:	b292      	uxth	r2, r2
 800be14:	9202      	str	r2, [sp, #8]
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	4b36      	ldr	r3, [pc, #216]	; (800bef4 <tcp_process+0x5a4>)
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	4b36      	ldr	r3, [pc, #216]	; (800bef8 <tcp_process+0x5a8>)
 800be1e:	4602      	mov	r2, r0
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f002 fbd1 	bl	800e5c8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800be26:	e167      	b.n	800c0f8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800be28:	4b2d      	ldr	r3, [pc, #180]	; (800bee0 <tcp_process+0x590>)
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 8161 	beq.w	800c0f8 <tcp_process+0x7a8>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3a:	1e5a      	subs	r2, r3, #1
 800be3c:	4b2b      	ldr	r3, [pc, #172]	; (800beec <tcp_process+0x59c>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	f040 8159 	bne.w	800c0f8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f002 f9b6 	bl	800e1b8 <tcp_rexmit>
      break;
 800be4c:	e154      	b.n	800c0f8 <tcp_process+0x7a8>
 800be4e:	e153      	b.n	800c0f8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fa71 	bl	800c338 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800be56:	4b2d      	ldr	r3, [pc, #180]	; (800bf0c <tcp_process+0x5bc>)
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	f003 0320 	and.w	r3, r3, #32
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f000 814c 	beq.w	800c0fc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	8b5b      	ldrh	r3, [r3, #26]
 800be68:	f043 0302 	orr.w	r3, r3, #2
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2207      	movs	r2, #7
 800be76:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be78:	e140      	b.n	800c0fc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fa5c 	bl	800c338 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800be80:	4b22      	ldr	r3, [pc, #136]	; (800bf0c <tcp_process+0x5bc>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	f003 0320 	and.w	r3, r3, #32
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d071      	beq.n	800bf70 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800be8c:	4b14      	ldr	r3, [pc, #80]	; (800bee0 <tcp_process+0x590>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	f003 0310 	and.w	r3, r3, #16
 800be94:	2b00      	cmp	r3, #0
 800be96:	d060      	beq.n	800bf5a <tcp_process+0x60a>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be9c:	4b11      	ldr	r3, [pc, #68]	; (800bee4 <tcp_process+0x594>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d15a      	bne.n	800bf5a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d156      	bne.n	800bf5a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	8b5b      	ldrh	r3, [r3, #26]
 800beb0:	f043 0302 	orr.w	r3, r3, #2
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7fe fdbc 	bl	800aa38 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bec0:	4b13      	ldr	r3, [pc, #76]	; (800bf10 <tcp_process+0x5c0>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d105      	bne.n	800bed6 <tcp_process+0x586>
 800beca:	4b11      	ldr	r3, [pc, #68]	; (800bf10 <tcp_process+0x5c0>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	4a0f      	ldr	r2, [pc, #60]	; (800bf10 <tcp_process+0x5c0>)
 800bed2:	6013      	str	r3, [r2, #0]
 800bed4:	e02e      	b.n	800bf34 <tcp_process+0x5e4>
 800bed6:	4b0e      	ldr	r3, [pc, #56]	; (800bf10 <tcp_process+0x5c0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	617b      	str	r3, [r7, #20]
 800bedc:	e027      	b.n	800bf2e <tcp_process+0x5de>
 800bede:	bf00      	nop
 800bee0:	20008074 	.word	0x20008074
 800bee4:	2000806c 	.word	0x2000806c
 800bee8:	20008072 	.word	0x20008072
 800beec:	20008068 	.word	0x20008068
 800bef0:	20008058 	.word	0x20008058
 800bef4:	20005124 	.word	0x20005124
 800bef8:	20005128 	.word	0x20005128
 800befc:	08013f78 	.word	0x08013f78
 800bf00:	08014218 	.word	0x08014218
 800bf04:	08013fc4 	.word	0x08013fc4
 800bf08:	20008070 	.word	0x20008070
 800bf0c:	20008075 	.word	0x20008075
 800bf10:	2000803c 	.word	0x2000803c
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d104      	bne.n	800bf28 <tcp_process+0x5d8>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68da      	ldr	r2, [r3, #12]
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	60da      	str	r2, [r3, #12]
 800bf26:	e005      	b.n	800bf34 <tcp_process+0x5e4>
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1ef      	bne.n	800bf14 <tcp_process+0x5c4>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	60da      	str	r2, [r3, #12]
 800bf3a:	4b77      	ldr	r3, [pc, #476]	; (800c118 <tcp_process+0x7c8>)
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	220a      	movs	r2, #10
 800bf44:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800bf46:	4b75      	ldr	r3, [pc, #468]	; (800c11c <tcp_process+0x7cc>)
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	60da      	str	r2, [r3, #12]
 800bf4e:	4a73      	ldr	r2, [pc, #460]	; (800c11c <tcp_process+0x7cc>)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	f002 fcfa 	bl	800e94c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800bf58:	e0d2      	b.n	800c100 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	8b5b      	ldrh	r3, [r3, #26]
 800bf5e:	f043 0302 	orr.w	r3, r3, #2
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	751a      	strb	r2, [r3, #20]
      break;
 800bf6e:	e0c7      	b.n	800c100 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bf70:	4b6b      	ldr	r3, [pc, #428]	; (800c120 <tcp_process+0x7d0>)
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	f003 0310 	and.w	r3, r3, #16
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f000 80c1 	beq.w	800c100 <tcp_process+0x7b0>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf82:	4b68      	ldr	r3, [pc, #416]	; (800c124 <tcp_process+0x7d4>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	f040 80ba 	bne.w	800c100 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f040 80b5 	bne.w	800c100 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2206      	movs	r2, #6
 800bf9a:	751a      	strb	r2, [r3, #20]
      break;
 800bf9c:	e0b0      	b.n	800c100 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f9ca 	bl	800c338 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bfa4:	4b60      	ldr	r3, [pc, #384]	; (800c128 <tcp_process+0x7d8>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	f003 0320 	and.w	r3, r3, #32
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f000 80a9 	beq.w	800c104 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	8b5b      	ldrh	r3, [r3, #26]
 800bfb6:	f043 0302 	orr.w	r3, r3, #2
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7fe fd39 	bl	800aa38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bfc6:	4b59      	ldr	r3, [pc, #356]	; (800c12c <tcp_process+0x7dc>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d105      	bne.n	800bfdc <tcp_process+0x68c>
 800bfd0:	4b56      	ldr	r3, [pc, #344]	; (800c12c <tcp_process+0x7dc>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	4a55      	ldr	r2, [pc, #340]	; (800c12c <tcp_process+0x7dc>)
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	e013      	b.n	800c004 <tcp_process+0x6b4>
 800bfdc:	4b53      	ldr	r3, [pc, #332]	; (800c12c <tcp_process+0x7dc>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	613b      	str	r3, [r7, #16]
 800bfe2:	e00c      	b.n	800bffe <tcp_process+0x6ae>
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d104      	bne.n	800bff8 <tcp_process+0x6a8>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68da      	ldr	r2, [r3, #12]
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	60da      	str	r2, [r3, #12]
 800bff6:	e005      	b.n	800c004 <tcp_process+0x6b4>
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	613b      	str	r3, [r7, #16]
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1ef      	bne.n	800bfe4 <tcp_process+0x694>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	60da      	str	r2, [r3, #12]
 800c00a:	4b43      	ldr	r3, [pc, #268]	; (800c118 <tcp_process+0x7c8>)
 800c00c:	2201      	movs	r2, #1
 800c00e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	220a      	movs	r2, #10
 800c014:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c016:	4b41      	ldr	r3, [pc, #260]	; (800c11c <tcp_process+0x7cc>)
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	60da      	str	r2, [r3, #12]
 800c01e:	4a3f      	ldr	r2, [pc, #252]	; (800c11c <tcp_process+0x7cc>)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6013      	str	r3, [r2, #0]
 800c024:	f002 fc92 	bl	800e94c <tcp_timer_needed>
      }
      break;
 800c028:	e06c      	b.n	800c104 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 f984 	bl	800c338 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c030:	4b3b      	ldr	r3, [pc, #236]	; (800c120 <tcp_process+0x7d0>)
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	f003 0310 	and.w	r3, r3, #16
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d065      	beq.n	800c108 <tcp_process+0x7b8>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c040:	4b38      	ldr	r3, [pc, #224]	; (800c124 <tcp_process+0x7d4>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	429a      	cmp	r2, r3
 800c046:	d15f      	bne.n	800c108 <tcp_process+0x7b8>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d15b      	bne.n	800c108 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7fe fcf1 	bl	800aa38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c056:	4b35      	ldr	r3, [pc, #212]	; (800c12c <tcp_process+0x7dc>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d105      	bne.n	800c06c <tcp_process+0x71c>
 800c060:	4b32      	ldr	r3, [pc, #200]	; (800c12c <tcp_process+0x7dc>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	4a31      	ldr	r2, [pc, #196]	; (800c12c <tcp_process+0x7dc>)
 800c068:	6013      	str	r3, [r2, #0]
 800c06a:	e013      	b.n	800c094 <tcp_process+0x744>
 800c06c:	4b2f      	ldr	r3, [pc, #188]	; (800c12c <tcp_process+0x7dc>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	60fb      	str	r3, [r7, #12]
 800c072:	e00c      	b.n	800c08e <tcp_process+0x73e>
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d104      	bne.n	800c088 <tcp_process+0x738>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68da      	ldr	r2, [r3, #12]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	60da      	str	r2, [r3, #12]
 800c086:	e005      	b.n	800c094 <tcp_process+0x744>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1ef      	bne.n	800c074 <tcp_process+0x724>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	60da      	str	r2, [r3, #12]
 800c09a:	4b1f      	ldr	r3, [pc, #124]	; (800c118 <tcp_process+0x7c8>)
 800c09c:	2201      	movs	r2, #1
 800c09e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	220a      	movs	r2, #10
 800c0a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c0a6:	4b1d      	ldr	r3, [pc, #116]	; (800c11c <tcp_process+0x7cc>)
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	60da      	str	r2, [r3, #12]
 800c0ae:	4a1b      	ldr	r2, [pc, #108]	; (800c11c <tcp_process+0x7cc>)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6013      	str	r3, [r2, #0]
 800c0b4:	f002 fc4a 	bl	800e94c <tcp_timer_needed>
      }
      break;
 800c0b8:	e026      	b.n	800c108 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 f93c 	bl	800c338 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c0c0:	4b17      	ldr	r3, [pc, #92]	; (800c120 <tcp_process+0x7d0>)
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	f003 0310 	and.w	r3, r3, #16
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d01f      	beq.n	800c10c <tcp_process+0x7bc>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0d0:	4b14      	ldr	r3, [pc, #80]	; (800c124 <tcp_process+0x7d4>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d119      	bne.n	800c10c <tcp_process+0x7bc>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d115      	bne.n	800c10c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c0e0:	4b11      	ldr	r3, [pc, #68]	; (800c128 <tcp_process+0x7d8>)
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	f043 0310 	orr.w	r3, r3, #16
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	4b0f      	ldr	r3, [pc, #60]	; (800c128 <tcp_process+0x7d8>)
 800c0ec:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c0ee:	e00d      	b.n	800c10c <tcp_process+0x7bc>
    default:
      break;
 800c0f0:	bf00      	nop
 800c0f2:	e00c      	b.n	800c10e <tcp_process+0x7be>
      break;
 800c0f4:	bf00      	nop
 800c0f6:	e00a      	b.n	800c10e <tcp_process+0x7be>
      break;
 800c0f8:	bf00      	nop
 800c0fa:	e008      	b.n	800c10e <tcp_process+0x7be>
      break;
 800c0fc:	bf00      	nop
 800c0fe:	e006      	b.n	800c10e <tcp_process+0x7be>
      break;
 800c100:	bf00      	nop
 800c102:	e004      	b.n	800c10e <tcp_process+0x7be>
      break;
 800c104:	bf00      	nop
 800c106:	e002      	b.n	800c10e <tcp_process+0x7be>
      break;
 800c108:	bf00      	nop
 800c10a:	e000      	b.n	800c10e <tcp_process+0x7be>
      break;
 800c10c:	bf00      	nop
  }
  return ERR_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3724      	adds	r7, #36	; 0x24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd90      	pop	{r4, r7, pc}
 800c118:	20008044 	.word	0x20008044
 800c11c:	20008040 	.word	0x20008040
 800c120:	20008074 	.word	0x20008074
 800c124:	2000806c 	.word	0x2000806c
 800c128:	20008075 	.word	0x20008075
 800c12c:	2000803c 	.word	0x2000803c

0800c130 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c130:	b590      	push	{r4, r7, lr}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <tcp_oos_insert_segment+0x1e>
 800c140:	4b3b      	ldr	r3, [pc, #236]	; (800c230 <tcp_oos_insert_segment+0x100>)
 800c142:	f240 421f 	movw	r2, #1055	; 0x41f
 800c146:	493b      	ldr	r1, [pc, #236]	; (800c234 <tcp_oos_insert_segment+0x104>)
 800c148:	483b      	ldr	r0, [pc, #236]	; (800c238 <tcp_oos_insert_segment+0x108>)
 800c14a:	f005 fb1f 	bl	801178c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	899b      	ldrh	r3, [r3, #12]
 800c154:	b29b      	uxth	r3, r3
 800c156:	4618      	mov	r0, r3
 800c158:	f7fb fc0a 	bl	8007970 <lwip_htons>
 800c15c:	4603      	mov	r3, r0
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	f003 0301 	and.w	r3, r3, #1
 800c164:	2b00      	cmp	r3, #0
 800c166:	d028      	beq.n	800c1ba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c168:	6838      	ldr	r0, [r7, #0]
 800c16a:	f7fe fa63 	bl	800a634 <tcp_segs_free>
    next = NULL;
 800c16e:	2300      	movs	r3, #0
 800c170:	603b      	str	r3, [r7, #0]
 800c172:	e056      	b.n	800c222 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	899b      	ldrh	r3, [r3, #12]
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7fb fbf7 	bl	8007970 <lwip_htons>
 800c182:	4603      	mov	r3, r0
 800c184:	b2db      	uxtb	r3, r3
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00d      	beq.n	800c1aa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	899b      	ldrh	r3, [r3, #12]
 800c194:	b29c      	uxth	r4, r3
 800c196:	2001      	movs	r0, #1
 800c198:	f7fb fbea 	bl	8007970 <lwip_htons>
 800c19c:	4603      	mov	r3, r0
 800c19e:	461a      	mov	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	4322      	orrs	r2, r4
 800c1a6:	b292      	uxth	r2, r2
 800c1a8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f7fe fa52 	bl	800a65e <tcp_seg_free>
    while (next &&
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00e      	beq.n	800c1de <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	891b      	ldrh	r3, [r3, #8]
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	4b1d      	ldr	r3, [pc, #116]	; (800c23c <tcp_oos_insert_segment+0x10c>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	441a      	add	r2, r3
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	8909      	ldrh	r1, [r1, #8]
 800c1d6:	440b      	add	r3, r1
 800c1d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	daca      	bge.n	800c174 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d01e      	beq.n	800c222 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	891b      	ldrh	r3, [r3, #8]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	4b14      	ldr	r3, [pc, #80]	; (800c23c <tcp_oos_insert_segment+0x10c>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	441a      	add	r2, r3
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	dd12      	ble.n	800c222 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	b29a      	uxth	r2, r3
 800c204:	4b0d      	ldr	r3, [pc, #52]	; (800c23c <tcp_oos_insert_segment+0x10c>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	b29b      	uxth	r3, r3
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	891b      	ldrh	r3, [r3, #8]
 800c21a:	4619      	mov	r1, r3
 800c21c:	4610      	mov	r0, r2
 800c21e:	f7fc fe25 	bl	8008e6c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	601a      	str	r2, [r3, #0]
}
 800c228:	bf00      	nop
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd90      	pop	{r4, r7, pc}
 800c230:	08013f78 	.word	0x08013f78
 800c234:	08014238 	.word	0x08014238
 800c238:	08013fc4 	.word	0x08013fc4
 800c23c:	20008068 	.word	0x20008068

0800c240 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c240:	b5b0      	push	{r4, r5, r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
 800c24c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c24e:	e03e      	b.n	800c2ce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fd f812 	bl	8009288 <pbuf_clen>
 800c264:	4603      	mov	r3, r0
 800c266:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c26e:	8a7a      	ldrh	r2, [r7, #18]
 800c270:	429a      	cmp	r2, r3
 800c272:	d906      	bls.n	800c282 <tcp_free_acked_segments+0x42>
 800c274:	4b2a      	ldr	r3, [pc, #168]	; (800c320 <tcp_free_acked_segments+0xe0>)
 800c276:	f240 4257 	movw	r2, #1111	; 0x457
 800c27a:	492a      	ldr	r1, [pc, #168]	; (800c324 <tcp_free_acked_segments+0xe4>)
 800c27c:	482a      	ldr	r0, [pc, #168]	; (800c328 <tcp_free_acked_segments+0xe8>)
 800c27e:	f005 fa85 	bl	801178c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c288:	8a7b      	ldrh	r3, [r7, #18]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	891a      	ldrh	r2, [r3, #8]
 800c298:	4b24      	ldr	r3, [pc, #144]	; (800c32c <tcp_free_acked_segments+0xec>)
 800c29a:	881b      	ldrh	r3, [r3, #0]
 800c29c:	4413      	add	r3, r2
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	4b22      	ldr	r3, [pc, #136]	; (800c32c <tcp_free_acked_segments+0xec>)
 800c2a2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c2a4:	6978      	ldr	r0, [r7, #20]
 800c2a6:	f7fe f9da 	bl	800a65e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00c      	beq.n	800c2ce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d109      	bne.n	800c2ce <tcp_free_acked_segments+0x8e>
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d106      	bne.n	800c2ce <tcp_free_acked_segments+0x8e>
 800c2c0:	4b17      	ldr	r3, [pc, #92]	; (800c320 <tcp_free_acked_segments+0xe0>)
 800c2c2:	f240 4261 	movw	r2, #1121	; 0x461
 800c2c6:	491a      	ldr	r1, [pc, #104]	; (800c330 <tcp_free_acked_segments+0xf0>)
 800c2c8:	4817      	ldr	r0, [pc, #92]	; (800c328 <tcp_free_acked_segments+0xe8>)
 800c2ca:	f005 fa5f 	bl	801178c <iprintf>
  while (seg_list != NULL &&
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d020      	beq.n	800c316 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fb fb5d 	bl	800799a <lwip_htonl>
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	891b      	ldrh	r3, [r3, #8]
 800c2e6:	461d      	mov	r5, r3
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	899b      	ldrh	r3, [r3, #12]
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fb fb3d 	bl	8007970 <lwip_htons>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	f003 0303 	and.w	r3, r3, #3
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d001      	beq.n	800c306 <tcp_free_acked_segments+0xc6>
 800c302:	2301      	movs	r3, #1
 800c304:	e000      	b.n	800c308 <tcp_free_acked_segments+0xc8>
 800c306:	2300      	movs	r3, #0
 800c308:	442b      	add	r3, r5
 800c30a:	18e2      	adds	r2, r4, r3
 800c30c:	4b09      	ldr	r3, [pc, #36]	; (800c334 <tcp_free_acked_segments+0xf4>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c312:	2b00      	cmp	r3, #0
 800c314:	dd9c      	ble.n	800c250 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c316:	68bb      	ldr	r3, [r7, #8]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bdb0      	pop	{r4, r5, r7, pc}
 800c320:	08013f78 	.word	0x08013f78
 800c324:	08014260 	.word	0x08014260
 800c328:	08013fc4 	.word	0x08013fc4
 800c32c:	20008070 	.word	0x20008070
 800c330:	08014288 	.word	0x08014288
 800c334:	2000806c 	.word	0x2000806c

0800c338 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c338:	b5b0      	push	{r4, r5, r7, lr}
 800c33a:	b094      	sub	sp, #80	; 0x50
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d106      	bne.n	800c358 <tcp_receive+0x20>
 800c34a:	4b91      	ldr	r3, [pc, #580]	; (800c590 <tcp_receive+0x258>)
 800c34c:	f240 427b 	movw	r2, #1147	; 0x47b
 800c350:	4990      	ldr	r1, [pc, #576]	; (800c594 <tcp_receive+0x25c>)
 800c352:	4891      	ldr	r0, [pc, #580]	; (800c598 <tcp_receive+0x260>)
 800c354:	f005 fa1a 	bl	801178c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	7d1b      	ldrb	r3, [r3, #20]
 800c35c:	2b03      	cmp	r3, #3
 800c35e:	d806      	bhi.n	800c36e <tcp_receive+0x36>
 800c360:	4b8b      	ldr	r3, [pc, #556]	; (800c590 <tcp_receive+0x258>)
 800c362:	f240 427c 	movw	r2, #1148	; 0x47c
 800c366:	498d      	ldr	r1, [pc, #564]	; (800c59c <tcp_receive+0x264>)
 800c368:	488b      	ldr	r0, [pc, #556]	; (800c598 <tcp_receive+0x260>)
 800c36a:	f005 fa0f 	bl	801178c <iprintf>

  if (flags & TCP_ACK) {
 800c36e:	4b8c      	ldr	r3, [pc, #560]	; (800c5a0 <tcp_receive+0x268>)
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	f003 0310 	and.w	r3, r3, #16
 800c376:	2b00      	cmp	r3, #0
 800c378:	f000 8264 	beq.w	800c844 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c382:	461a      	mov	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c388:	4413      	add	r3, r2
 800c38a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c390:	4b84      	ldr	r3, [pc, #528]	; (800c5a4 <tcp_receive+0x26c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	db1b      	blt.n	800c3d2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c39e:	4b81      	ldr	r3, [pc, #516]	; (800c5a4 <tcp_receive+0x26c>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d106      	bne.n	800c3b4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c3aa:	4b7f      	ldr	r3, [pc, #508]	; (800c5a8 <tcp_receive+0x270>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	db0e      	blt.n	800c3d2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c3b8:	4b7b      	ldr	r3, [pc, #492]	; (800c5a8 <tcp_receive+0x270>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d125      	bne.n	800c40c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c3c0:	4b7a      	ldr	r3, [pc, #488]	; (800c5ac <tcp_receive+0x274>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	89db      	ldrh	r3, [r3, #14]
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d91c      	bls.n	800c40c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c3d2:	4b76      	ldr	r3, [pc, #472]	; (800c5ac <tcp_receive+0x274>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	89db      	ldrh	r3, [r3, #14]
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d205      	bcs.n	800c3fc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c3fc:	4b69      	ldr	r3, [pc, #420]	; (800c5a4 <tcp_receive+0x26c>)
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c404:	4b68      	ldr	r3, [pc, #416]	; (800c5a8 <tcp_receive+0x270>)
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c40c:	4b66      	ldr	r3, [pc, #408]	; (800c5a8 <tcp_receive+0x270>)
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c414:	1ad3      	subs	r3, r2, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	dc58      	bgt.n	800c4cc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c41a:	4b65      	ldr	r3, [pc, #404]	; (800c5b0 <tcp_receive+0x278>)
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d14b      	bne.n	800c4ba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c42c:	4413      	add	r3, r2
 800c42e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c430:	429a      	cmp	r2, r3
 800c432:	d142      	bne.n	800c4ba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	db3d      	blt.n	800c4ba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c442:	4b59      	ldr	r3, [pc, #356]	; (800c5a8 <tcp_receive+0x270>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	429a      	cmp	r2, r3
 800c448:	d137      	bne.n	800c4ba <tcp_receive+0x182>
              found_dupack = 1;
 800c44a:	2301      	movs	r3, #1
 800c44c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c454:	2bff      	cmp	r3, #255	; 0xff
 800c456:	d007      	beq.n	800c468 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c45e:	3301      	adds	r3, #1
 800c460:	b2da      	uxtb	r2, r3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d91b      	bls.n	800c4aa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c47c:	4413      	add	r3, r2
 800c47e:	b29a      	uxth	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c486:	429a      	cmp	r2, r3
 800c488:	d30a      	bcc.n	800c4a0 <tcp_receive+0x168>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c494:	4413      	add	r3, r2
 800c496:	b29a      	uxth	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c49e:	e004      	b.n	800c4aa <tcp_receive+0x172>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d902      	bls.n	800c4ba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f001 feeb 	bl	800e290 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f040 8161 	bne.w	800c784 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c4ca:	e15b      	b.n	800c784 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4cc:	4b36      	ldr	r3, [pc, #216]	; (800c5a8 <tcp_receive+0x270>)
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f2c0 814e 	blt.w	800c77a <tcp_receive+0x442>
 800c4de:	4b32      	ldr	r3, [pc, #200]	; (800c5a8 <tcp_receive+0x270>)
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f300 8146 	bgt.w	800c77a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	8b5b      	ldrh	r3, [r3, #26]
 800c4f2:	f003 0304 	and.w	r3, r3, #4
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d010      	beq.n	800c51c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	8b5b      	ldrh	r3, [r3, #26]
 800c4fe:	f023 0304 	bic.w	r3, r3, #4
 800c502:	b29a      	uxth	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c52a:	10db      	asrs	r3, r3, #3
 800c52c:	b21b      	sxth	r3, r3
 800c52e:	b29a      	uxth	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c536:	b29b      	uxth	r3, r3
 800c538:	4413      	add	r3, r2
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	b21a      	sxth	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c544:	4b18      	ldr	r3, [pc, #96]	; (800c5a8 <tcp_receive+0x270>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	b29a      	uxth	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c54e:	b29b      	uxth	r3, r3
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c55c:	4b12      	ldr	r3, [pc, #72]	; (800c5a8 <tcp_receive+0x270>)
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	7d1b      	ldrb	r3, [r3, #20]
 800c568:	2b03      	cmp	r3, #3
 800c56a:	f240 8097 	bls.w	800c69c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d245      	bcs.n	800c60a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	8b5b      	ldrh	r3, [r3, #26]
 800c582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c586:	2b00      	cmp	r3, #0
 800c588:	d014      	beq.n	800c5b4 <tcp_receive+0x27c>
 800c58a:	2301      	movs	r3, #1
 800c58c:	e013      	b.n	800c5b6 <tcp_receive+0x27e>
 800c58e:	bf00      	nop
 800c590:	08013f78 	.word	0x08013f78
 800c594:	080142a8 	.word	0x080142a8
 800c598:	08013fc4 	.word	0x08013fc4
 800c59c:	080142c4 	.word	0x080142c4
 800c5a0:	20008074 	.word	0x20008074
 800c5a4:	20008068 	.word	0x20008068
 800c5a8:	2000806c 	.word	0x2000806c
 800c5ac:	20008058 	.word	0x20008058
 800c5b0:	20008072 	.word	0x20008072
 800c5b4:	2302      	movs	r3, #2
 800c5b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c5ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5c4:	fb12 f303 	smulbb	r3, r2, r3
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	bf28      	it	cs
 800c5d0:	4613      	movcs	r3, r2
 800c5d2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c5da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c5dc:	4413      	add	r3, r2
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d309      	bcc.n	800c5fe <tcp_receive+0x2c6>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c5f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c5f2:	4413      	add	r3, r2
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c5fc:	e04e      	b.n	800c69c <tcp_receive+0x364>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c604:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c608:	e048      	b.n	800c69c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c610:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c612:	4413      	add	r3, r2
 800c614:	b29a      	uxth	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d309      	bcc.n	800c634 <tcp_receive+0x2fc>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c626:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c628:	4413      	add	r3, r2
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c632:	e004      	b.n	800c63e <tcp_receive+0x306>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c63a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d326      	bcc.n	800c69c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	b29a      	uxth	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c66e:	4413      	add	r3, r2
 800c670:	b29a      	uxth	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c678:	429a      	cmp	r2, r3
 800c67a:	d30a      	bcc.n	800c692 <tcp_receive+0x35a>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c686:	4413      	add	r3, r2
 800c688:	b29a      	uxth	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c690:	e004      	b.n	800c69c <tcp_receive+0x364>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c698:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6a4:	4a98      	ldr	r2, [pc, #608]	; (800c908 <tcp_receive+0x5d0>)
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7ff fdca 	bl	800c240 <tcp_free_acked_segments>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ba:	4a94      	ldr	r2, [pc, #592]	; (800c90c <tcp_receive+0x5d4>)
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f7ff fdbf 	bl	800c240 <tcp_free_acked_segments>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d104      	bne.n	800c6da <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6d6:	861a      	strh	r2, [r3, #48]	; 0x30
 800c6d8:	e002      	b.n	800c6e0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d103      	bne.n	800c6f6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c6fc:	4b84      	ldr	r3, [pc, #528]	; (800c910 <tcp_receive+0x5d8>)
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	4413      	add	r3, r2
 800c702:	b29a      	uxth	r2, r3
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	8b5b      	ldrh	r3, [r3, #26]
 800c70e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c712:	2b00      	cmp	r3, #0
 800c714:	d035      	beq.n	800c782 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d118      	bne.n	800c750 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00c      	beq.n	800c740 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	4618      	mov	r0, r3
 800c734:	f7fb f931 	bl	800799a <lwip_htonl>
 800c738:	4603      	mov	r3, r0
 800c73a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	dc20      	bgt.n	800c782 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	8b5b      	ldrh	r3, [r3, #26]
 800c744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c748:	b29a      	uxth	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c74e:	e018      	b.n	800c782 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7fb f91c 	bl	800799a <lwip_htonl>
 800c762:	4603      	mov	r3, r0
 800c764:	1ae3      	subs	r3, r4, r3
 800c766:	2b00      	cmp	r3, #0
 800c768:	dc0b      	bgt.n	800c782 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	8b5b      	ldrh	r3, [r3, #26]
 800c76e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c772:	b29a      	uxth	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c778:	e003      	b.n	800c782 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f001 ff76 	bl	800e66c <tcp_send_empty_ack>
 800c780:	e000      	b.n	800c784 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c782:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d05b      	beq.n	800c844 <tcp_receive+0x50c>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c790:	4b60      	ldr	r3, [pc, #384]	; (800c914 <tcp_receive+0x5dc>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	2b00      	cmp	r3, #0
 800c798:	da54      	bge.n	800c844 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c79a:	4b5f      	ldr	r3, [pc, #380]	; (800c918 <tcp_receive+0x5e0>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c7ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7b8:	10db      	asrs	r3, r3, #3
 800c7ba:	b21b      	sxth	r3, r3
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c7d2:	4413      	add	r3, r2
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	b21a      	sxth	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c7dc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	da05      	bge.n	800c7f0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c7e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c7e8:	425b      	negs	r3, r3
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c7f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c7fa:	109b      	asrs	r3, r3, #2
 800c7fc:	b21b      	sxth	r3, r3
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	b29b      	uxth	r3, r3
 800c804:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c80e:	b29a      	uxth	r2, r3
 800c810:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c814:	4413      	add	r3, r2
 800c816:	b29b      	uxth	r3, r3
 800c818:	b21a      	sxth	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c824:	10db      	asrs	r3, r3, #3
 800c826:	b21b      	sxth	r3, r3
 800c828:	b29a      	uxth	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c830:	b29b      	uxth	r3, r3
 800c832:	4413      	add	r3, r2
 800c834:	b29b      	uxth	r3, r3
 800c836:	b21a      	sxth	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c844:	4b35      	ldr	r3, [pc, #212]	; (800c91c <tcp_receive+0x5e4>)
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f000 84e2 	beq.w	800d212 <tcp_receive+0xeda>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	7d1b      	ldrb	r3, [r3, #20]
 800c852:	2b06      	cmp	r3, #6
 800c854:	f200 84dd 	bhi.w	800d212 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c85c:	4b30      	ldr	r3, [pc, #192]	; (800c920 <tcp_receive+0x5e8>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	3b01      	subs	r3, #1
 800c864:	2b00      	cmp	r3, #0
 800c866:	f2c0 808f 	blt.w	800c988 <tcp_receive+0x650>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c86e:	4b2b      	ldr	r3, [pc, #172]	; (800c91c <tcp_receive+0x5e4>)
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	4619      	mov	r1, r3
 800c874:	4b2a      	ldr	r3, [pc, #168]	; (800c920 <tcp_receive+0x5e8>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	440b      	add	r3, r1
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	3301      	adds	r3, #1
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f300 8082 	bgt.w	800c988 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c884:	4b27      	ldr	r3, [pc, #156]	; (800c924 <tcp_receive+0x5ec>)
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c88e:	4b24      	ldr	r3, [pc, #144]	; (800c920 <tcp_receive+0x5e8>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c896:	4b23      	ldr	r3, [pc, #140]	; (800c924 <tcp_receive+0x5ec>)
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <tcp_receive+0x574>
 800c89e:	4b22      	ldr	r3, [pc, #136]	; (800c928 <tcp_receive+0x5f0>)
 800c8a0:	f240 5294 	movw	r2, #1428	; 0x594
 800c8a4:	4921      	ldr	r1, [pc, #132]	; (800c92c <tcp_receive+0x5f4>)
 800c8a6:	4822      	ldr	r0, [pc, #136]	; (800c930 <tcp_receive+0x5f8>)
 800c8a8:	f004 ff70 	bl	801178c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d906      	bls.n	800c8c4 <tcp_receive+0x58c>
 800c8b6:	4b1c      	ldr	r3, [pc, #112]	; (800c928 <tcp_receive+0x5f0>)
 800c8b8:	f240 5295 	movw	r2, #1429	; 0x595
 800c8bc:	491d      	ldr	r1, [pc, #116]	; (800c934 <tcp_receive+0x5fc>)
 800c8be:	481c      	ldr	r0, [pc, #112]	; (800c930 <tcp_receive+0x5f8>)
 800c8c0:	f004 ff64 	bl	801178c <iprintf>
      off = (u16_t)off32;
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c8ca:	4b16      	ldr	r3, [pc, #88]	; (800c924 <tcp_receive+0x5ec>)
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	891b      	ldrh	r3, [r3, #8]
 800c8d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d906      	bls.n	800c8e6 <tcp_receive+0x5ae>
 800c8d8:	4b13      	ldr	r3, [pc, #76]	; (800c928 <tcp_receive+0x5f0>)
 800c8da:	f240 5297 	movw	r2, #1431	; 0x597
 800c8de:	4916      	ldr	r1, [pc, #88]	; (800c938 <tcp_receive+0x600>)
 800c8e0:	4813      	ldr	r0, [pc, #76]	; (800c930 <tcp_receive+0x5f8>)
 800c8e2:	f004 ff53 	bl	801178c <iprintf>
      inseg.len -= off;
 800c8e6:	4b0f      	ldr	r3, [pc, #60]	; (800c924 <tcp_receive+0x5ec>)
 800c8e8:	891a      	ldrh	r2, [r3, #8]
 800c8ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	4b0c      	ldr	r3, [pc, #48]	; (800c924 <tcp_receive+0x5ec>)
 800c8f4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c8f6:	4b0b      	ldr	r3, [pc, #44]	; (800c924 <tcp_receive+0x5ec>)
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	891a      	ldrh	r2, [r3, #8]
 800c8fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c904:	e02a      	b.n	800c95c <tcp_receive+0x624>
 800c906:	bf00      	nop
 800c908:	080142e0 	.word	0x080142e0
 800c90c:	080142e8 	.word	0x080142e8
 800c910:	20008070 	.word	0x20008070
 800c914:	2000806c 	.word	0x2000806c
 800c918:	20008030 	.word	0x20008030
 800c91c:	20008072 	.word	0x20008072
 800c920:	20008068 	.word	0x20008068
 800c924:	20008048 	.word	0x20008048
 800c928:	08013f78 	.word	0x08013f78
 800c92c:	080142f0 	.word	0x080142f0
 800c930:	08013fc4 	.word	0x08013fc4
 800c934:	08014300 	.word	0x08014300
 800c938:	08014310 	.word	0x08014310
        off -= p->len;
 800c93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c93e:	895b      	ldrh	r3, [r3, #10]
 800c940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c94c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c94e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c952:	2200      	movs	r2, #0
 800c954:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c95e:	895b      	ldrh	r3, [r3, #10]
 800c960:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c964:	429a      	cmp	r2, r3
 800c966:	d8e9      	bhi.n	800c93c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c968:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c96c:	4619      	mov	r1, r3
 800c96e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c970:	f7fc fb7c 	bl	800906c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c978:	4a91      	ldr	r2, [pc, #580]	; (800cbc0 <tcp_receive+0x888>)
 800c97a:	6013      	str	r3, [r2, #0]
 800c97c:	4b91      	ldr	r3, [pc, #580]	; (800cbc4 <tcp_receive+0x88c>)
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	4a8f      	ldr	r2, [pc, #572]	; (800cbc0 <tcp_receive+0x888>)
 800c982:	6812      	ldr	r2, [r2, #0]
 800c984:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c986:	e00d      	b.n	800c9a4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c988:	4b8d      	ldr	r3, [pc, #564]	; (800cbc0 <tcp_receive+0x888>)
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	2b00      	cmp	r3, #0
 800c994:	da06      	bge.n	800c9a4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	8b5b      	ldrh	r3, [r3, #26]
 800c99a:	f043 0302 	orr.w	r3, r3, #2
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c9a4:	4b86      	ldr	r3, [pc, #536]	; (800cbc0 <tcp_receive+0x888>)
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f2c0 842a 	blt.w	800d208 <tcp_receive+0xed0>
 800c9b4:	4b82      	ldr	r3, [pc, #520]	; (800cbc0 <tcp_receive+0x888>)
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9bc:	6879      	ldr	r1, [r7, #4]
 800c9be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c9c0:	440b      	add	r3, r1
 800c9c2:	1ad3      	subs	r3, r2, r3
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f300 841e 	bgt.w	800d208 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9d0:	4b7b      	ldr	r3, [pc, #492]	; (800cbc0 <tcp_receive+0x888>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	f040 829a 	bne.w	800cf0e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c9da:	4b7a      	ldr	r3, [pc, #488]	; (800cbc4 <tcp_receive+0x88c>)
 800c9dc:	891c      	ldrh	r4, [r3, #8]
 800c9de:	4b79      	ldr	r3, [pc, #484]	; (800cbc4 <tcp_receive+0x88c>)
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	899b      	ldrh	r3, [r3, #12]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fa ffc2 	bl	8007970 <lwip_htons>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	f003 0303 	and.w	r3, r3, #3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <tcp_receive+0x6c4>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e000      	b.n	800c9fe <tcp_receive+0x6c6>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4423      	add	r3, r4
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	4b71      	ldr	r3, [pc, #452]	; (800cbc8 <tcp_receive+0x890>)
 800ca04:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca0a:	4b6f      	ldr	r3, [pc, #444]	; (800cbc8 <tcp_receive+0x890>)
 800ca0c:	881b      	ldrh	r3, [r3, #0]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d275      	bcs.n	800cafe <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ca12:	4b6c      	ldr	r3, [pc, #432]	; (800cbc4 <tcp_receive+0x88c>)
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	899b      	ldrh	r3, [r3, #12]
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fa ffa8 	bl	8007970 <lwip_htons>
 800ca20:	4603      	mov	r3, r0
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	f003 0301 	and.w	r3, r3, #1
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d01f      	beq.n	800ca6c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ca2c:	4b65      	ldr	r3, [pc, #404]	; (800cbc4 <tcp_receive+0x88c>)
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	899b      	ldrh	r3, [r3, #12]
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	b21b      	sxth	r3, r3
 800ca36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ca3a:	b21c      	sxth	r4, r3
 800ca3c:	4b61      	ldr	r3, [pc, #388]	; (800cbc4 <tcp_receive+0x88c>)
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	899b      	ldrh	r3, [r3, #12]
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7fa ff93 	bl	8007970 <lwip_htons>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fa ff8a 	bl	8007970 <lwip_htons>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	b21b      	sxth	r3, r3
 800ca60:	4323      	orrs	r3, r4
 800ca62:	b21a      	sxth	r2, r3
 800ca64:	4b57      	ldr	r3, [pc, #348]	; (800cbc4 <tcp_receive+0x88c>)
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca70:	4b54      	ldr	r3, [pc, #336]	; (800cbc4 <tcp_receive+0x88c>)
 800ca72:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ca74:	4b53      	ldr	r3, [pc, #332]	; (800cbc4 <tcp_receive+0x88c>)
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	899b      	ldrh	r3, [r3, #12]
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7fa ff77 	bl	8007970 <lwip_htons>
 800ca82:	4603      	mov	r3, r0
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	f003 0302 	and.w	r3, r3, #2
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d005      	beq.n	800ca9a <tcp_receive+0x762>
            inseg.len -= 1;
 800ca8e:	4b4d      	ldr	r3, [pc, #308]	; (800cbc4 <tcp_receive+0x88c>)
 800ca90:	891b      	ldrh	r3, [r3, #8]
 800ca92:	3b01      	subs	r3, #1
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	4b4b      	ldr	r3, [pc, #300]	; (800cbc4 <tcp_receive+0x88c>)
 800ca98:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ca9a:	4b4a      	ldr	r3, [pc, #296]	; (800cbc4 <tcp_receive+0x88c>)
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	4a49      	ldr	r2, [pc, #292]	; (800cbc4 <tcp_receive+0x88c>)
 800caa0:	8912      	ldrh	r2, [r2, #8]
 800caa2:	4611      	mov	r1, r2
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fc f9e1 	bl	8008e6c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800caaa:	4b46      	ldr	r3, [pc, #280]	; (800cbc4 <tcp_receive+0x88c>)
 800caac:	891c      	ldrh	r4, [r3, #8]
 800caae:	4b45      	ldr	r3, [pc, #276]	; (800cbc4 <tcp_receive+0x88c>)
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	899b      	ldrh	r3, [r3, #12]
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fa ff5a 	bl	8007970 <lwip_htons>
 800cabc:	4603      	mov	r3, r0
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	f003 0303 	and.w	r3, r3, #3
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d001      	beq.n	800cacc <tcp_receive+0x794>
 800cac8:	2301      	movs	r3, #1
 800caca:	e000      	b.n	800cace <tcp_receive+0x796>
 800cacc:	2300      	movs	r3, #0
 800cace:	4423      	add	r3, r4
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	4b3d      	ldr	r3, [pc, #244]	; (800cbc8 <tcp_receive+0x890>)
 800cad4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cad6:	4b3c      	ldr	r3, [pc, #240]	; (800cbc8 <tcp_receive+0x890>)
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	461a      	mov	r2, r3
 800cadc:	4b38      	ldr	r3, [pc, #224]	; (800cbc0 <tcp_receive+0x888>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	441a      	add	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800caea:	440b      	add	r3, r1
 800caec:	429a      	cmp	r2, r3
 800caee:	d006      	beq.n	800cafe <tcp_receive+0x7c6>
 800caf0:	4b36      	ldr	r3, [pc, #216]	; (800cbcc <tcp_receive+0x894>)
 800caf2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800caf6:	4936      	ldr	r1, [pc, #216]	; (800cbd0 <tcp_receive+0x898>)
 800caf8:	4836      	ldr	r0, [pc, #216]	; (800cbd4 <tcp_receive+0x89c>)
 800cafa:	f004 fe47 	bl	801178c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 80e7 	beq.w	800ccd6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cb08:	4b2e      	ldr	r3, [pc, #184]	; (800cbc4 <tcp_receive+0x88c>)
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	899b      	ldrh	r3, [r3, #12]
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fa ff2d 	bl	8007970 <lwip_htons>
 800cb16:	4603      	mov	r3, r0
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	f003 0301 	and.w	r3, r3, #1
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d010      	beq.n	800cb44 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cb22:	e00a      	b.n	800cb3a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb28:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f7fd fd92 	bl	800a65e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1f0      	bne.n	800cb24 <tcp_receive+0x7ec>
 800cb42:	e0c8      	b.n	800ccd6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cb4a:	e052      	b.n	800cbf2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	899b      	ldrh	r3, [r3, #12]
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fa ff0b 	bl	8007970 <lwip_htons>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	f003 0301 	and.w	r3, r3, #1
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d03d      	beq.n	800cbe2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cb66:	4b17      	ldr	r3, [pc, #92]	; (800cbc4 <tcp_receive+0x88c>)
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	899b      	ldrh	r3, [r3, #12]
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fa fefe 	bl	8007970 <lwip_htons>
 800cb74:	4603      	mov	r3, r0
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d130      	bne.n	800cbe2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cb80:	4b10      	ldr	r3, [pc, #64]	; (800cbc4 <tcp_receive+0x88c>)
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	899b      	ldrh	r3, [r3, #12]
 800cb86:	b29c      	uxth	r4, r3
 800cb88:	2001      	movs	r0, #1
 800cb8a:	f7fa fef1 	bl	8007970 <lwip_htons>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	461a      	mov	r2, r3
 800cb92:	4b0c      	ldr	r3, [pc, #48]	; (800cbc4 <tcp_receive+0x88c>)
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	4322      	orrs	r2, r4
 800cb98:	b292      	uxth	r2, r2
 800cb9a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cb9c:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <tcp_receive+0x88c>)
 800cb9e:	891c      	ldrh	r4, [r3, #8]
 800cba0:	4b08      	ldr	r3, [pc, #32]	; (800cbc4 <tcp_receive+0x88c>)
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	899b      	ldrh	r3, [r3, #12]
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fa fee1 	bl	8007970 <lwip_htons>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	f003 0303 	and.w	r3, r3, #3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00e      	beq.n	800cbd8 <tcp_receive+0x8a0>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e00d      	b.n	800cbda <tcp_receive+0x8a2>
 800cbbe:	bf00      	nop
 800cbc0:	20008068 	.word	0x20008068
 800cbc4:	20008048 	.word	0x20008048
 800cbc8:	20008072 	.word	0x20008072
 800cbcc:	08013f78 	.word	0x08013f78
 800cbd0:	08014320 	.word	0x08014320
 800cbd4:	08013fc4 	.word	0x08013fc4
 800cbd8:	2300      	movs	r3, #0
 800cbda:	4423      	add	r3, r4
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	4b98      	ldr	r3, [pc, #608]	; (800ce40 <tcp_receive+0xb08>)
 800cbe0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cbe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800cbec:	6938      	ldr	r0, [r7, #16]
 800cbee:	f7fd fd36 	bl	800a65e <tcp_seg_free>
            while (next &&
 800cbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00e      	beq.n	800cc16 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cbf8:	4b91      	ldr	r3, [pc, #580]	; (800ce40 <tcp_receive+0xb08>)
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	4b91      	ldr	r3, [pc, #580]	; (800ce44 <tcp_receive+0xb0c>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	441a      	add	r2, r3
 800cc04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc0c:	8909      	ldrh	r1, [r1, #8]
 800cc0e:	440b      	add	r3, r1
 800cc10:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	da9a      	bge.n	800cb4c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d059      	beq.n	800ccd0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800cc1c:	4b88      	ldr	r3, [pc, #544]	; (800ce40 <tcp_receive+0xb08>)
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	461a      	mov	r2, r3
 800cc22:	4b88      	ldr	r3, [pc, #544]	; (800ce44 <tcp_receive+0xb0c>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	441a      	add	r2, r3
 800cc28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	dd4d      	ble.n	800ccd0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	4b81      	ldr	r3, [pc, #516]	; (800ce44 <tcp_receive+0xb0c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	1ad3      	subs	r3, r2, r3
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	4b80      	ldr	r3, [pc, #512]	; (800ce48 <tcp_receive+0xb10>)
 800cc48:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cc4a:	4b7f      	ldr	r3, [pc, #508]	; (800ce48 <tcp_receive+0xb10>)
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	899b      	ldrh	r3, [r3, #12]
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fa fe8c 	bl	8007970 <lwip_htons>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	f003 0302 	and.w	r3, r3, #2
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d005      	beq.n	800cc70 <tcp_receive+0x938>
                inseg.len -= 1;
 800cc64:	4b78      	ldr	r3, [pc, #480]	; (800ce48 <tcp_receive+0xb10>)
 800cc66:	891b      	ldrh	r3, [r3, #8]
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	4b76      	ldr	r3, [pc, #472]	; (800ce48 <tcp_receive+0xb10>)
 800cc6e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800cc70:	4b75      	ldr	r3, [pc, #468]	; (800ce48 <tcp_receive+0xb10>)
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	4a74      	ldr	r2, [pc, #464]	; (800ce48 <tcp_receive+0xb10>)
 800cc76:	8912      	ldrh	r2, [r2, #8]
 800cc78:	4611      	mov	r1, r2
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fc f8f6 	bl	8008e6c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cc80:	4b71      	ldr	r3, [pc, #452]	; (800ce48 <tcp_receive+0xb10>)
 800cc82:	891c      	ldrh	r4, [r3, #8]
 800cc84:	4b70      	ldr	r3, [pc, #448]	; (800ce48 <tcp_receive+0xb10>)
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	899b      	ldrh	r3, [r3, #12]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fa fe6f 	bl	8007970 <lwip_htons>
 800cc92:	4603      	mov	r3, r0
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	f003 0303 	and.w	r3, r3, #3
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <tcp_receive+0x96a>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e000      	b.n	800cca4 <tcp_receive+0x96c>
 800cca2:	2300      	movs	r3, #0
 800cca4:	4423      	add	r3, r4
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	4b65      	ldr	r3, [pc, #404]	; (800ce40 <tcp_receive+0xb08>)
 800ccaa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ccac:	4b64      	ldr	r3, [pc, #400]	; (800ce40 <tcp_receive+0xb08>)
 800ccae:	881b      	ldrh	r3, [r3, #0]
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	4b64      	ldr	r3, [pc, #400]	; (800ce44 <tcp_receive+0xb0c>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	441a      	add	r2, r3
 800ccb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d006      	beq.n	800ccd0 <tcp_receive+0x998>
 800ccc2:	4b62      	ldr	r3, [pc, #392]	; (800ce4c <tcp_receive+0xb14>)
 800ccc4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ccc8:	4961      	ldr	r1, [pc, #388]	; (800ce50 <tcp_receive+0xb18>)
 800ccca:	4862      	ldr	r0, [pc, #392]	; (800ce54 <tcp_receive+0xb1c>)
 800cccc:	f004 fd5e 	bl	801178c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccd4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ccd6:	4b5a      	ldr	r3, [pc, #360]	; (800ce40 <tcp_receive+0xb08>)
 800ccd8:	881b      	ldrh	r3, [r3, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	4b59      	ldr	r3, [pc, #356]	; (800ce44 <tcp_receive+0xb0c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	441a      	add	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ccea:	4b55      	ldr	r3, [pc, #340]	; (800ce40 <tcp_receive+0xb08>)
 800ccec:	881b      	ldrh	r3, [r3, #0]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d206      	bcs.n	800cd00 <tcp_receive+0x9c8>
 800ccf2:	4b56      	ldr	r3, [pc, #344]	; (800ce4c <tcp_receive+0xb14>)
 800ccf4:	f240 6207 	movw	r2, #1543	; 0x607
 800ccf8:	4957      	ldr	r1, [pc, #348]	; (800ce58 <tcp_receive+0xb20>)
 800ccfa:	4856      	ldr	r0, [pc, #344]	; (800ce54 <tcp_receive+0xb1c>)
 800ccfc:	f004 fd46 	bl	801178c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd04:	4b4e      	ldr	r3, [pc, #312]	; (800ce40 <tcp_receive+0xb08>)
 800cd06:	881b      	ldrh	r3, [r3, #0]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7fc ffc5 	bl	8009ca0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cd16:	4b4c      	ldr	r3, [pc, #304]	; (800ce48 <tcp_receive+0xb10>)
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	891b      	ldrh	r3, [r3, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d006      	beq.n	800cd2e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800cd20:	4b49      	ldr	r3, [pc, #292]	; (800ce48 <tcp_receive+0xb10>)
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	4a4d      	ldr	r2, [pc, #308]	; (800ce5c <tcp_receive+0xb24>)
 800cd26:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cd28:	4b47      	ldr	r3, [pc, #284]	; (800ce48 <tcp_receive+0xb10>)
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd2e:	4b46      	ldr	r3, [pc, #280]	; (800ce48 <tcp_receive+0xb10>)
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	899b      	ldrh	r3, [r3, #12]
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fa fe1a 	bl	8007970 <lwip_htons>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 80b8 	beq.w	800ceba <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cd4a:	4b45      	ldr	r3, [pc, #276]	; (800ce60 <tcp_receive+0xb28>)
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	f043 0320 	orr.w	r3, r3, #32
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	4b42      	ldr	r3, [pc, #264]	; (800ce60 <tcp_receive+0xb28>)
 800cd56:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cd58:	e0af      	b.n	800ceba <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd5e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	4a36      	ldr	r2, [pc, #216]	; (800ce44 <tcp_receive+0xb0c>)
 800cd6a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	891b      	ldrh	r3, [r3, #8]
 800cd70:	461c      	mov	r4, r3
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	899b      	ldrh	r3, [r3, #12]
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fa fdf8 	bl	8007970 <lwip_htons>
 800cd80:	4603      	mov	r3, r0
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	f003 0303 	and.w	r3, r3, #3
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d001      	beq.n	800cd90 <tcp_receive+0xa58>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e000      	b.n	800cd92 <tcp_receive+0xa5a>
 800cd90:	2300      	movs	r3, #0
 800cd92:	191a      	adds	r2, r3, r4
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd98:	441a      	add	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cda2:	461c      	mov	r4, r3
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	891b      	ldrh	r3, [r3, #8]
 800cda8:	461d      	mov	r5, r3
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	899b      	ldrh	r3, [r3, #12]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fa fddc 	bl	8007970 <lwip_htons>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	f003 0303 	and.w	r3, r3, #3
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <tcp_receive+0xa90>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e000      	b.n	800cdca <tcp_receive+0xa92>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	442b      	add	r3, r5
 800cdcc:	429c      	cmp	r4, r3
 800cdce:	d206      	bcs.n	800cdde <tcp_receive+0xaa6>
 800cdd0:	4b1e      	ldr	r3, [pc, #120]	; (800ce4c <tcp_receive+0xb14>)
 800cdd2:	f240 622b 	movw	r2, #1579	; 0x62b
 800cdd6:	4923      	ldr	r1, [pc, #140]	; (800ce64 <tcp_receive+0xb2c>)
 800cdd8:	481e      	ldr	r0, [pc, #120]	; (800ce54 <tcp_receive+0xb1c>)
 800cdda:	f004 fcd7 	bl	801178c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	891b      	ldrh	r3, [r3, #8]
 800cde2:	461c      	mov	r4, r3
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	899b      	ldrh	r3, [r3, #12]
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fa fdbf 	bl	8007970 <lwip_htons>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	f003 0303 	and.w	r3, r3, #3
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <tcp_receive+0xaca>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e000      	b.n	800ce04 <tcp_receive+0xacc>
 800ce02:	2300      	movs	r3, #0
 800ce04:	1919      	adds	r1, r3, r4
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce0a:	b28b      	uxth	r3, r1
 800ce0c:	1ad3      	subs	r3, r2, r3
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f7fc ff43 	bl	8009ca0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	891b      	ldrh	r3, [r3, #8]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d028      	beq.n	800ce76 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ce24:	4b0d      	ldr	r3, [pc, #52]	; (800ce5c <tcp_receive+0xb24>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d01d      	beq.n	800ce68 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ce2c:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <tcp_receive+0xb24>)
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	4619      	mov	r1, r3
 800ce36:	4610      	mov	r0, r2
 800ce38:	f7fc fa60 	bl	80092fc <pbuf_cat>
 800ce3c:	e018      	b.n	800ce70 <tcp_receive+0xb38>
 800ce3e:	bf00      	nop
 800ce40:	20008072 	.word	0x20008072
 800ce44:	20008068 	.word	0x20008068
 800ce48:	20008048 	.word	0x20008048
 800ce4c:	08013f78 	.word	0x08013f78
 800ce50:	08014358 	.word	0x08014358
 800ce54:	08013fc4 	.word	0x08013fc4
 800ce58:	08014394 	.word	0x08014394
 800ce5c:	20008078 	.word	0x20008078
 800ce60:	20008075 	.word	0x20008075
 800ce64:	080143b4 	.word	0x080143b4
            } else {
              recv_data = cseg->p;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	4a70      	ldr	r2, [pc, #448]	; (800d030 <tcp_receive+0xcf8>)
 800ce6e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	2200      	movs	r2, #0
 800ce74:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	899b      	ldrh	r3, [r3, #12]
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fa fd76 	bl	8007970 <lwip_htons>
 800ce84:	4603      	mov	r3, r0
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	f003 0301 	and.w	r3, r3, #1
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00d      	beq.n	800ceac <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ce90:	4b68      	ldr	r3, [pc, #416]	; (800d034 <tcp_receive+0xcfc>)
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	f043 0320 	orr.w	r3, r3, #32
 800ce98:	b2da      	uxtb	r2, r3
 800ce9a:	4b66      	ldr	r3, [pc, #408]	; (800d034 <tcp_receive+0xcfc>)
 800ce9c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	7d1b      	ldrb	r3, [r3, #20]
 800cea2:	2b04      	cmp	r3, #4
 800cea4:	d102      	bne.n	800ceac <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2207      	movs	r2, #7
 800ceaa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ceb4:	68b8      	ldr	r0, [r7, #8]
 800ceb6:	f7fd fbd2 	bl	800a65e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d008      	beq.n	800ced4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800cece:	429a      	cmp	r2, r3
 800ced0:	f43f af43 	beq.w	800cd5a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	8b5b      	ldrh	r3, [r3, #26]
 800ced8:	f003 0301 	and.w	r3, r3, #1
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00e      	beq.n	800cefe <tcp_receive+0xbc6>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	8b5b      	ldrh	r3, [r3, #26]
 800cee4:	f023 0301 	bic.w	r3, r3, #1
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	835a      	strh	r2, [r3, #26]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	8b5b      	ldrh	r3, [r3, #26]
 800cef2:	f043 0302 	orr.w	r3, r3, #2
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cefc:	e188      	b.n	800d210 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	8b5b      	ldrh	r3, [r3, #26]
 800cf02:	f043 0301 	orr.w	r3, r3, #1
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cf0c:	e180      	b.n	800d210 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d106      	bne.n	800cf24 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cf16:	4848      	ldr	r0, [pc, #288]	; (800d038 <tcp_receive+0xd00>)
 800cf18:	f7fd fbba 	bl	800a690 <tcp_seg_copy>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	675a      	str	r2, [r3, #116]	; 0x74
 800cf22:	e16d      	b.n	800d200 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800cf24:	2300      	movs	r3, #0
 800cf26:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf2e:	e157      	b.n	800d1e0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	4b41      	ldr	r3, [pc, #260]	; (800d03c <tcp_receive+0xd04>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d11d      	bne.n	800cf7a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cf3e:	4b3e      	ldr	r3, [pc, #248]	; (800d038 <tcp_receive+0xd00>)
 800cf40:	891a      	ldrh	r2, [r3, #8]
 800cf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf44:	891b      	ldrh	r3, [r3, #8]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	f240 814f 	bls.w	800d1ea <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cf4c:	483a      	ldr	r0, [pc, #232]	; (800d038 <tcp_receive+0xd00>)
 800cf4e:	f7fd fb9f 	bl	800a690 <tcp_seg_copy>
 800cf52:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f000 8149 	beq.w	800d1ee <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800cf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d003      	beq.n	800cf6a <tcp_receive+0xc32>
                    prev->next = cseg;
 800cf62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf64:	697a      	ldr	r2, [r7, #20]
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	e002      	b.n	800cf70 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	697a      	ldr	r2, [r7, #20]
 800cf6e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cf70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf72:	6978      	ldr	r0, [r7, #20]
 800cf74:	f7ff f8dc 	bl	800c130 <tcp_oos_insert_segment>
                }
                break;
 800cf78:	e139      	b.n	800d1ee <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d117      	bne.n	800cfb0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cf80:	4b2e      	ldr	r3, [pc, #184]	; (800d03c <tcp_receive+0xd04>)
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	da57      	bge.n	800d040 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cf90:	4829      	ldr	r0, [pc, #164]	; (800d038 <tcp_receive+0xd00>)
 800cf92:	f7fd fb7d 	bl	800a690 <tcp_seg_copy>
 800cf96:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	f000 8129 	beq.w	800d1f2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	69ba      	ldr	r2, [r7, #24]
 800cfa4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800cfa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfa8:	69b8      	ldr	r0, [r7, #24]
 800cfaa:	f7ff f8c1 	bl	800c130 <tcp_oos_insert_segment>
                  }
                  break;
 800cfae:	e120      	b.n	800d1f2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cfb0:	4b22      	ldr	r3, [pc, #136]	; (800d03c <tcp_receive+0xd04>)
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	db3e      	blt.n	800d040 <tcp_receive+0xd08>
 800cfc2:	4b1e      	ldr	r3, [pc, #120]	; (800d03c <tcp_receive+0xd04>)
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	1ad3      	subs	r3, r2, r3
 800cfce:	3301      	adds	r3, #1
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	dc35      	bgt.n	800d040 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cfd4:	4818      	ldr	r0, [pc, #96]	; (800d038 <tcp_receive+0xd00>)
 800cfd6:	f7fd fb5b 	bl	800a690 <tcp_seg_copy>
 800cfda:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 8109 	beq.w	800d1f6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfec:	8912      	ldrh	r2, [r2, #8]
 800cfee:	441a      	add	r2, r3
 800cff0:	4b12      	ldr	r3, [pc, #72]	; (800d03c <tcp_receive+0xd04>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	dd12      	ble.n	800d020 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cffa:	4b10      	ldr	r3, [pc, #64]	; (800d03c <tcp_receive+0xd04>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	b29a      	uxth	r2, r3
 800d000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	b29b      	uxth	r3, r3
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d00e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d012:	685a      	ldr	r2, [r3, #4]
 800d014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d016:	891b      	ldrh	r3, [r3, #8]
 800d018:	4619      	mov	r1, r3
 800d01a:	4610      	mov	r0, r2
 800d01c:	f7fb ff26 	bl	8008e6c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d022:	69fa      	ldr	r2, [r7, #28]
 800d024:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d026:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d028:	69f8      	ldr	r0, [r7, #28]
 800d02a:	f7ff f881 	bl	800c130 <tcp_oos_insert_segment>
                  }
                  break;
 800d02e:	e0e2      	b.n	800d1f6 <tcp_receive+0xebe>
 800d030:	20008078 	.word	0x20008078
 800d034:	20008075 	.word	0x20008075
 800d038:	20008048 	.word	0x20008048
 800d03c:	20008068 	.word	0x20008068
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d042:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f040 80c6 	bne.w	800d1da <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d04e:	4b80      	ldr	r3, [pc, #512]	; (800d250 <tcp_receive+0xf18>)
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f340 80bd 	ble.w	800d1da <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	899b      	ldrh	r3, [r3, #12]
 800d066:	b29b      	uxth	r3, r3
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fa fc81 	bl	8007970 <lwip_htons>
 800d06e:	4603      	mov	r3, r0
 800d070:	b2db      	uxtb	r3, r3
 800d072:	f003 0301 	and.w	r3, r3, #1
 800d076:	2b00      	cmp	r3, #0
 800d078:	f040 80bf 	bne.w	800d1fa <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d07c:	4875      	ldr	r0, [pc, #468]	; (800d254 <tcp_receive+0xf1c>)
 800d07e:	f7fd fb07 	bl	800a690 <tcp_seg_copy>
 800d082:	4602      	mov	r2, r0
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f000 80b6 	beq.w	800d1fe <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d09a:	8912      	ldrh	r2, [r2, #8]
 800d09c:	441a      	add	r2, r3
 800d09e:	4b6c      	ldr	r3, [pc, #432]	; (800d250 <tcp_receive+0xf18>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	1ad3      	subs	r3, r2, r3
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	dd12      	ble.n	800d0ce <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d0a8:	4b69      	ldr	r3, [pc, #420]	; (800d250 <tcp_receive+0xf18>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c0:	685a      	ldr	r2, [r3, #4]
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c4:	891b      	ldrh	r3, [r3, #8]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	f7fb fecf 	bl	8008e6c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d0ce:	4b62      	ldr	r3, [pc, #392]	; (800d258 <tcp_receive+0xf20>)
 800d0d0:	881b      	ldrh	r3, [r3, #0]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	4b5e      	ldr	r3, [pc, #376]	; (800d250 <tcp_receive+0xf18>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	441a      	add	r2, r3
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d0e2:	440b      	add	r3, r1
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f340 8089 	ble.w	800d1fe <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	899b      	ldrh	r3, [r3, #12]
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fa fc3a 	bl	8007970 <lwip_htons>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	2b00      	cmp	r3, #0
 800d106:	d022      	beq.n	800d14e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	899b      	ldrh	r3, [r3, #12]
 800d110:	b29b      	uxth	r3, r3
 800d112:	b21b      	sxth	r3, r3
 800d114:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d118:	b21c      	sxth	r4, r3
 800d11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	899b      	ldrh	r3, [r3, #12]
 800d122:	b29b      	uxth	r3, r3
 800d124:	4618      	mov	r0, r3
 800d126:	f7fa fc23 	bl	8007970 <lwip_htons>
 800d12a:	4603      	mov	r3, r0
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	b29b      	uxth	r3, r3
 800d130:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d134:	b29b      	uxth	r3, r3
 800d136:	4618      	mov	r0, r3
 800d138:	f7fa fc1a 	bl	8007970 <lwip_htons>
 800d13c:	4603      	mov	r3, r0
 800d13e:	b21b      	sxth	r3, r3
 800d140:	4323      	orrs	r3, r4
 800d142:	b21a      	sxth	r2, r3
 800d144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	b292      	uxth	r2, r2
 800d14c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d152:	b29a      	uxth	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d158:	4413      	add	r3, r2
 800d15a:	b299      	uxth	r1, r3
 800d15c:	4b3c      	ldr	r3, [pc, #240]	; (800d250 <tcp_receive+0xf18>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	b29a      	uxth	r2, r3
 800d162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	1a8a      	subs	r2, r1, r2
 800d168:	b292      	uxth	r2, r2
 800d16a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	891b      	ldrh	r3, [r3, #8]
 800d178:	4619      	mov	r1, r3
 800d17a:	4610      	mov	r0, r2
 800d17c:	f7fb fe76 	bl	8008e6c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	891c      	ldrh	r4, [r3, #8]
 800d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	899b      	ldrh	r3, [r3, #12]
 800d18e:	b29b      	uxth	r3, r3
 800d190:	4618      	mov	r0, r3
 800d192:	f7fa fbed 	bl	8007970 <lwip_htons>
 800d196:	4603      	mov	r3, r0
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	f003 0303 	and.w	r3, r3, #3
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <tcp_receive+0xe6e>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e000      	b.n	800d1a8 <tcp_receive+0xe70>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	4423      	add	r3, r4
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	4b2a      	ldr	r3, [pc, #168]	; (800d258 <tcp_receive+0xf20>)
 800d1ae:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d1b0:	4b29      	ldr	r3, [pc, #164]	; (800d258 <tcp_receive+0xf20>)
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	4b26      	ldr	r3, [pc, #152]	; (800d250 <tcp_receive+0xf18>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	441a      	add	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c0:	6879      	ldr	r1, [r7, #4]
 800d1c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d1c4:	440b      	add	r3, r1
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d019      	beq.n	800d1fe <tcp_receive+0xec6>
 800d1ca:	4b24      	ldr	r3, [pc, #144]	; (800d25c <tcp_receive+0xf24>)
 800d1cc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d1d0:	4923      	ldr	r1, [pc, #140]	; (800d260 <tcp_receive+0xf28>)
 800d1d2:	4824      	ldr	r0, [pc, #144]	; (800d264 <tcp_receive+0xf2c>)
 800d1d4:	f004 fada 	bl	801178c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d1d8:	e011      	b.n	800d1fe <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f47f aea4 	bne.w	800cf30 <tcp_receive+0xbf8>
 800d1e8:	e00a      	b.n	800d200 <tcp_receive+0xec8>
                break;
 800d1ea:	bf00      	nop
 800d1ec:	e008      	b.n	800d200 <tcp_receive+0xec8>
                break;
 800d1ee:	bf00      	nop
 800d1f0:	e006      	b.n	800d200 <tcp_receive+0xec8>
                  break;
 800d1f2:	bf00      	nop
 800d1f4:	e004      	b.n	800d200 <tcp_receive+0xec8>
                  break;
 800d1f6:	bf00      	nop
 800d1f8:	e002      	b.n	800d200 <tcp_receive+0xec8>
                  break;
 800d1fa:	bf00      	nop
 800d1fc:	e000      	b.n	800d200 <tcp_receive+0xec8>
                break;
 800d1fe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f001 fa33 	bl	800e66c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d206:	e003      	b.n	800d210 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f001 fa2f 	bl	800e66c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d20e:	e01a      	b.n	800d246 <tcp_receive+0xf0e>
 800d210:	e019      	b.n	800d246 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d212:	4b0f      	ldr	r3, [pc, #60]	; (800d250 <tcp_receive+0xf18>)
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	db0a      	blt.n	800d236 <tcp_receive+0xefe>
 800d220:	4b0b      	ldr	r3, [pc, #44]	; (800d250 <tcp_receive+0xf18>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d228:	6879      	ldr	r1, [r7, #4]
 800d22a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d22c:	440b      	add	r3, r1
 800d22e:	1ad3      	subs	r3, r2, r3
 800d230:	3301      	adds	r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	dd07      	ble.n	800d246 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	8b5b      	ldrh	r3, [r3, #26]
 800d23a:	f043 0302 	orr.w	r3, r3, #2
 800d23e:	b29a      	uxth	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d244:	e7ff      	b.n	800d246 <tcp_receive+0xf0e>
 800d246:	bf00      	nop
 800d248:	3750      	adds	r7, #80	; 0x50
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bdb0      	pop	{r4, r5, r7, pc}
 800d24e:	bf00      	nop
 800d250:	20008068 	.word	0x20008068
 800d254:	20008048 	.word	0x20008048
 800d258:	20008072 	.word	0x20008072
 800d25c:	08013f78 	.word	0x08013f78
 800d260:	08014320 	.word	0x08014320
 800d264:	08013fc4 	.word	0x08013fc4

0800d268 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d26e:	4b15      	ldr	r3, [pc, #84]	; (800d2c4 <tcp_get_next_optbyte+0x5c>)
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	b291      	uxth	r1, r2
 800d276:	4a13      	ldr	r2, [pc, #76]	; (800d2c4 <tcp_get_next_optbyte+0x5c>)
 800d278:	8011      	strh	r1, [r2, #0]
 800d27a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d27c:	4b12      	ldr	r3, [pc, #72]	; (800d2c8 <tcp_get_next_optbyte+0x60>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d004      	beq.n	800d28e <tcp_get_next_optbyte+0x26>
 800d284:	4b11      	ldr	r3, [pc, #68]	; (800d2cc <tcp_get_next_optbyte+0x64>)
 800d286:	881b      	ldrh	r3, [r3, #0]
 800d288:	88fa      	ldrh	r2, [r7, #6]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d208      	bcs.n	800d2a0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d28e:	4b10      	ldr	r3, [pc, #64]	; (800d2d0 <tcp_get_next_optbyte+0x68>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3314      	adds	r3, #20
 800d294:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d296:	88fb      	ldrh	r3, [r7, #6]
 800d298:	683a      	ldr	r2, [r7, #0]
 800d29a:	4413      	add	r3, r2
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	e00b      	b.n	800d2b8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d2a0:	88fb      	ldrh	r3, [r7, #6]
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	4b09      	ldr	r3, [pc, #36]	; (800d2cc <tcp_get_next_optbyte+0x64>)
 800d2a6:	881b      	ldrh	r3, [r3, #0]
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d2ae:	4b06      	ldr	r3, [pc, #24]	; (800d2c8 <tcp_get_next_optbyte+0x60>)
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	797b      	ldrb	r3, [r7, #5]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr
 800d2c4:	20008064 	.word	0x20008064
 800d2c8:	20008060 	.word	0x20008060
 800d2cc:	2000805e 	.word	0x2000805e
 800d2d0:	20008058 	.word	0x20008058

0800d2d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d106      	bne.n	800d2f0 <tcp_parseopt+0x1c>
 800d2e2:	4b32      	ldr	r3, [pc, #200]	; (800d3ac <tcp_parseopt+0xd8>)
 800d2e4:	f240 727d 	movw	r2, #1917	; 0x77d
 800d2e8:	4931      	ldr	r1, [pc, #196]	; (800d3b0 <tcp_parseopt+0xdc>)
 800d2ea:	4832      	ldr	r0, [pc, #200]	; (800d3b4 <tcp_parseopt+0xe0>)
 800d2ec:	f004 fa4e 	bl	801178c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d2f0:	4b31      	ldr	r3, [pc, #196]	; (800d3b8 <tcp_parseopt+0xe4>)
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d055      	beq.n	800d3a4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d2f8:	4b30      	ldr	r3, [pc, #192]	; (800d3bc <tcp_parseopt+0xe8>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	801a      	strh	r2, [r3, #0]
 800d2fe:	e045      	b.n	800d38c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d300:	f7ff ffb2 	bl	800d268 <tcp_get_next_optbyte>
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d006      	beq.n	800d31c <tcp_parseopt+0x48>
 800d30e:	2b02      	cmp	r3, #2
 800d310:	dc2b      	bgt.n	800d36a <tcp_parseopt+0x96>
 800d312:	2b00      	cmp	r3, #0
 800d314:	d041      	beq.n	800d39a <tcp_parseopt+0xc6>
 800d316:	2b01      	cmp	r3, #1
 800d318:	d127      	bne.n	800d36a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d31a:	e037      	b.n	800d38c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d31c:	f7ff ffa4 	bl	800d268 <tcp_get_next_optbyte>
 800d320:	4603      	mov	r3, r0
 800d322:	2b04      	cmp	r3, #4
 800d324:	d13b      	bne.n	800d39e <tcp_parseopt+0xca>
 800d326:	4b25      	ldr	r3, [pc, #148]	; (800d3bc <tcp_parseopt+0xe8>)
 800d328:	881b      	ldrh	r3, [r3, #0]
 800d32a:	3301      	adds	r3, #1
 800d32c:	4a22      	ldr	r2, [pc, #136]	; (800d3b8 <tcp_parseopt+0xe4>)
 800d32e:	8812      	ldrh	r2, [r2, #0]
 800d330:	4293      	cmp	r3, r2
 800d332:	da34      	bge.n	800d39e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d334:	f7ff ff98 	bl	800d268 <tcp_get_next_optbyte>
 800d338:	4603      	mov	r3, r0
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	021b      	lsls	r3, r3, #8
 800d33e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d340:	f7ff ff92 	bl	800d268 <tcp_get_next_optbyte>
 800d344:	4603      	mov	r3, r0
 800d346:	b29a      	uxth	r2, r3
 800d348:	89bb      	ldrh	r3, [r7, #12]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d34e:	89bb      	ldrh	r3, [r7, #12]
 800d350:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d354:	d804      	bhi.n	800d360 <tcp_parseopt+0x8c>
 800d356:	89bb      	ldrh	r3, [r7, #12]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d001      	beq.n	800d360 <tcp_parseopt+0x8c>
 800d35c:	89ba      	ldrh	r2, [r7, #12]
 800d35e:	e001      	b.n	800d364 <tcp_parseopt+0x90>
 800d360:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d368:	e010      	b.n	800d38c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d36a:	f7ff ff7d 	bl	800d268 <tcp_get_next_optbyte>
 800d36e:	4603      	mov	r3, r0
 800d370:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d372:	7afb      	ldrb	r3, [r7, #11]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d914      	bls.n	800d3a2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d378:	7afb      	ldrb	r3, [r7, #11]
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	4b0f      	ldr	r3, [pc, #60]	; (800d3bc <tcp_parseopt+0xe8>)
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	4413      	add	r3, r2
 800d382:	b29b      	uxth	r3, r3
 800d384:	3b02      	subs	r3, #2
 800d386:	b29a      	uxth	r2, r3
 800d388:	4b0c      	ldr	r3, [pc, #48]	; (800d3bc <tcp_parseopt+0xe8>)
 800d38a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d38c:	4b0b      	ldr	r3, [pc, #44]	; (800d3bc <tcp_parseopt+0xe8>)
 800d38e:	881a      	ldrh	r2, [r3, #0]
 800d390:	4b09      	ldr	r3, [pc, #36]	; (800d3b8 <tcp_parseopt+0xe4>)
 800d392:	881b      	ldrh	r3, [r3, #0]
 800d394:	429a      	cmp	r2, r3
 800d396:	d3b3      	bcc.n	800d300 <tcp_parseopt+0x2c>
 800d398:	e004      	b.n	800d3a4 <tcp_parseopt+0xd0>
          return;
 800d39a:	bf00      	nop
 800d39c:	e002      	b.n	800d3a4 <tcp_parseopt+0xd0>
            return;
 800d39e:	bf00      	nop
 800d3a0:	e000      	b.n	800d3a4 <tcp_parseopt+0xd0>
            return;
 800d3a2:	bf00      	nop
      }
    }
  }
}
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	08013f78 	.word	0x08013f78
 800d3b0:	080143dc 	.word	0x080143dc
 800d3b4:	08013fc4 	.word	0x08013fc4
 800d3b8:	2000805c 	.word	0x2000805c
 800d3bc:	20008064 	.word	0x20008064

0800d3c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d3c4:	4b05      	ldr	r3, [pc, #20]	; (800d3dc <tcp_trigger_input_pcb_close+0x1c>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	f043 0310 	orr.w	r3, r3, #16
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	4b03      	ldr	r3, [pc, #12]	; (800d3dc <tcp_trigger_input_pcb_close+0x1c>)
 800d3d0:	701a      	strb	r2, [r3, #0]
}
 800d3d2:	bf00      	nop
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr
 800d3dc:	20008075 	.word	0x20008075

0800d3e0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00a      	beq.n	800d408 <tcp_route+0x28>
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	7a1b      	ldrb	r3, [r3, #8]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d006      	beq.n	800d408 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	7a1b      	ldrb	r3, [r3, #8]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fb fb5a 	bl	8008ab8 <netif_get_by_index>
 800d404:	4603      	mov	r3, r0
 800d406:	e003      	b.n	800d410 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f002 fe87 	bl	801011c <ip4_route>
 800d40e:	4603      	mov	r3, r0
  }
}
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d418:	b590      	push	{r4, r7, lr}
 800d41a:	b087      	sub	sp, #28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	603b      	str	r3, [r7, #0]
 800d424:	4613      	mov	r3, r2
 800d426:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d105      	bne.n	800d43a <tcp_create_segment+0x22>
 800d42e:	4b44      	ldr	r3, [pc, #272]	; (800d540 <tcp_create_segment+0x128>)
 800d430:	22a3      	movs	r2, #163	; 0xa3
 800d432:	4944      	ldr	r1, [pc, #272]	; (800d544 <tcp_create_segment+0x12c>)
 800d434:	4844      	ldr	r0, [pc, #272]	; (800d548 <tcp_create_segment+0x130>)
 800d436:	f004 f9a9 	bl	801178c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d105      	bne.n	800d44c <tcp_create_segment+0x34>
 800d440:	4b3f      	ldr	r3, [pc, #252]	; (800d540 <tcp_create_segment+0x128>)
 800d442:	22a4      	movs	r2, #164	; 0xa4
 800d444:	4941      	ldr	r1, [pc, #260]	; (800d54c <tcp_create_segment+0x134>)
 800d446:	4840      	ldr	r0, [pc, #256]	; (800d548 <tcp_create_segment+0x130>)
 800d448:	f004 f9a0 	bl	801178c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d44c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	b2db      	uxtb	r3, r3
 800d454:	f003 0304 	and.w	r3, r3, #4
 800d458:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d45a:	2003      	movs	r0, #3
 800d45c:	f7fa ffa6 	bl	80083ac <memp_malloc>
 800d460:	6138      	str	r0, [r7, #16]
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d104      	bne.n	800d472 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d468:	68b8      	ldr	r0, [r7, #8]
 800d46a:	f7fb fe85 	bl	8009178 <pbuf_free>
    return NULL;
 800d46e:	2300      	movs	r3, #0
 800d470:	e061      	b.n	800d536 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d478:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	2200      	movs	r2, #0
 800d47e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	68ba      	ldr	r2, [r7, #8]
 800d484:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	891a      	ldrh	r2, [r3, #8]
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	429a      	cmp	r2, r3
 800d490:	d205      	bcs.n	800d49e <tcp_create_segment+0x86>
 800d492:	4b2b      	ldr	r3, [pc, #172]	; (800d540 <tcp_create_segment+0x128>)
 800d494:	22b0      	movs	r2, #176	; 0xb0
 800d496:	492e      	ldr	r1, [pc, #184]	; (800d550 <tcp_create_segment+0x138>)
 800d498:	482b      	ldr	r0, [pc, #172]	; (800d548 <tcp_create_segment+0x130>)
 800d49a:	f004 f977 	bl	801178c <iprintf>
  seg->len = p->tot_len - optlen;
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	891a      	ldrh	r2, [r3, #8]
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	1ad3      	subs	r3, r2, r3
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d4ae:	2114      	movs	r1, #20
 800d4b0:	68b8      	ldr	r0, [r7, #8]
 800d4b2:	f7fb fdcb 	bl	800904c <pbuf_add_header>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d004      	beq.n	800d4c6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d4bc:	6938      	ldr	r0, [r7, #16]
 800d4be:	f7fd f8ce 	bl	800a65e <tcp_seg_free>
    return NULL;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	e037      	b.n	800d536 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	685a      	ldr	r2, [r3, #4]
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	8ada      	ldrh	r2, [r3, #22]
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	68dc      	ldr	r4, [r3, #12]
 800d4d8:	4610      	mov	r0, r2
 800d4da:	f7fa fa49 	bl	8007970 <lwip_htons>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	8b1a      	ldrh	r2, [r3, #24]
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	68dc      	ldr	r4, [r3, #12]
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	f7fa fa40 	bl	8007970 <lwip_htons>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	68dc      	ldr	r4, [r3, #12]
 800d4f8:	6838      	ldr	r0, [r7, #0]
 800d4fa:	f7fa fa4e 	bl	800799a <lwip_htonl>
 800d4fe:	4603      	mov	r3, r0
 800d500:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d502:	7dfb      	ldrb	r3, [r7, #23]
 800d504:	089b      	lsrs	r3, r3, #2
 800d506:	b2db      	uxtb	r3, r3
 800d508:	b29b      	uxth	r3, r3
 800d50a:	3305      	adds	r3, #5
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	031b      	lsls	r3, r3, #12
 800d510:	b29a      	uxth	r2, r3
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	b29b      	uxth	r3, r3
 800d516:	4313      	orrs	r3, r2
 800d518:	b29a      	uxth	r2, r3
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	68dc      	ldr	r4, [r3, #12]
 800d51e:	4610      	mov	r0, r2
 800d520:	f7fa fa26 	bl	8007970 <lwip_htons>
 800d524:	4603      	mov	r3, r0
 800d526:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	2200      	movs	r2, #0
 800d52e:	749a      	strb	r2, [r3, #18]
 800d530:	2200      	movs	r2, #0
 800d532:	74da      	strb	r2, [r3, #19]
  return seg;
 800d534:	693b      	ldr	r3, [r7, #16]
}
 800d536:	4618      	mov	r0, r3
 800d538:	371c      	adds	r7, #28
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd90      	pop	{r4, r7, pc}
 800d53e:	bf00      	nop
 800d540:	080143f8 	.word	0x080143f8
 800d544:	0801442c 	.word	0x0801442c
 800d548:	0801444c 	.word	0x0801444c
 800d54c:	08014474 	.word	0x08014474
 800d550:	08014498 	.word	0x08014498

0800d554 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d554:	b590      	push	{r4, r7, lr}
 800d556:	b08b      	sub	sp, #44	; 0x2c
 800d558:	af02      	add	r7, sp, #8
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	460b      	mov	r3, r1
 800d55e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d560:	2300      	movs	r3, #0
 800d562:	61fb      	str	r3, [r7, #28]
 800d564:	2300      	movs	r3, #0
 800d566:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d568:	2300      	movs	r3, #0
 800d56a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d106      	bne.n	800d580 <tcp_split_unsent_seg+0x2c>
 800d572:	4b95      	ldr	r3, [pc, #596]	; (800d7c8 <tcp_split_unsent_seg+0x274>)
 800d574:	f240 324b 	movw	r2, #843	; 0x34b
 800d578:	4994      	ldr	r1, [pc, #592]	; (800d7cc <tcp_split_unsent_seg+0x278>)
 800d57a:	4895      	ldr	r0, [pc, #596]	; (800d7d0 <tcp_split_unsent_seg+0x27c>)
 800d57c:	f004 f906 	bl	801178c <iprintf>

  useg = pcb->unsent;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d584:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d102      	bne.n	800d592 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d58c:	f04f 33ff 	mov.w	r3, #4294967295
 800d590:	e116      	b.n	800d7c0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d592:	887b      	ldrh	r3, [r7, #2]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d109      	bne.n	800d5ac <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d598:	4b8b      	ldr	r3, [pc, #556]	; (800d7c8 <tcp_split_unsent_seg+0x274>)
 800d59a:	f240 3253 	movw	r2, #851	; 0x353
 800d59e:	498d      	ldr	r1, [pc, #564]	; (800d7d4 <tcp_split_unsent_seg+0x280>)
 800d5a0:	488b      	ldr	r0, [pc, #556]	; (800d7d0 <tcp_split_unsent_seg+0x27c>)
 800d5a2:	f004 f8f3 	bl	801178c <iprintf>
    return ERR_VAL;
 800d5a6:	f06f 0305 	mvn.w	r3, #5
 800d5aa:	e109      	b.n	800d7c0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	891b      	ldrh	r3, [r3, #8]
 800d5b0:	887a      	ldrh	r2, [r7, #2]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d301      	bcc.n	800d5ba <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	e102      	b.n	800d7c0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5be:	887a      	ldrh	r2, [r7, #2]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d906      	bls.n	800d5d2 <tcp_split_unsent_seg+0x7e>
 800d5c4:	4b80      	ldr	r3, [pc, #512]	; (800d7c8 <tcp_split_unsent_seg+0x274>)
 800d5c6:	f240 325b 	movw	r2, #859	; 0x35b
 800d5ca:	4983      	ldr	r1, [pc, #524]	; (800d7d8 <tcp_split_unsent_seg+0x284>)
 800d5cc:	4880      	ldr	r0, [pc, #512]	; (800d7d0 <tcp_split_unsent_seg+0x27c>)
 800d5ce:	f004 f8dd 	bl	801178c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	891b      	ldrh	r3, [r3, #8]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d106      	bne.n	800d5e8 <tcp_split_unsent_seg+0x94>
 800d5da:	4b7b      	ldr	r3, [pc, #492]	; (800d7c8 <tcp_split_unsent_seg+0x274>)
 800d5dc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d5e0:	497e      	ldr	r1, [pc, #504]	; (800d7dc <tcp_split_unsent_seg+0x288>)
 800d5e2:	487b      	ldr	r0, [pc, #492]	; (800d7d0 <tcp_split_unsent_seg+0x27c>)
 800d5e4:	f004 f8d2 	bl	801178c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	7a9b      	ldrb	r3, [r3, #10]
 800d5ec:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	f003 0304 	and.w	r3, r3, #4
 800d5f8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	891a      	ldrh	r2, [r3, #8]
 800d5fe:	887b      	ldrh	r3, [r7, #2]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d604:	7bbb      	ldrb	r3, [r7, #14]
 800d606:	b29a      	uxth	r2, r3
 800d608:	89bb      	ldrh	r3, [r7, #12]
 800d60a:	4413      	add	r3, r2
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d612:	4619      	mov	r1, r3
 800d614:	2036      	movs	r0, #54	; 0x36
 800d616:	f7fb facb 	bl	8008bb0 <pbuf_alloc>
 800d61a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f000 80b7 	beq.w	800d792 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	891a      	ldrh	r2, [r3, #8]
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	891b      	ldrh	r3, [r3, #8]
 800d62e:	1ad3      	subs	r3, r2, r3
 800d630:	b29a      	uxth	r2, r3
 800d632:	887b      	ldrh	r3, [r7, #2]
 800d634:	4413      	add	r3, r2
 800d636:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	6858      	ldr	r0, [r3, #4]
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	7bbb      	ldrb	r3, [r7, #14]
 800d642:	18d1      	adds	r1, r2, r3
 800d644:	897b      	ldrh	r3, [r7, #10]
 800d646:	89ba      	ldrh	r2, [r7, #12]
 800d648:	f7fb ff80 	bl	800954c <pbuf_copy_partial>
 800d64c:	4603      	mov	r3, r0
 800d64e:	461a      	mov	r2, r3
 800d650:	89bb      	ldrh	r3, [r7, #12]
 800d652:	4293      	cmp	r3, r2
 800d654:	f040 809f 	bne.w	800d796 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	68db      	ldr	r3, [r3, #12]
 800d65c:	899b      	ldrh	r3, [r3, #12]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	4618      	mov	r0, r3
 800d662:	f7fa f985 	bl	8007970 <lwip_htons>
 800d666:	4603      	mov	r3, r0
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d66e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d670:	2300      	movs	r3, #0
 800d672:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d674:	7efb      	ldrb	r3, [r7, #27]
 800d676:	f003 0308 	and.w	r3, r3, #8
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d007      	beq.n	800d68e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d67e:	7efb      	ldrb	r3, [r7, #27]
 800d680:	f023 0308 	bic.w	r3, r3, #8
 800d684:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d686:	7ebb      	ldrb	r3, [r7, #26]
 800d688:	f043 0308 	orr.w	r3, r3, #8
 800d68c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d68e:	7efb      	ldrb	r3, [r7, #27]
 800d690:	f003 0301 	and.w	r3, r3, #1
 800d694:	2b00      	cmp	r3, #0
 800d696:	d007      	beq.n	800d6a8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d698:	7efb      	ldrb	r3, [r7, #27]
 800d69a:	f023 0301 	bic.w	r3, r3, #1
 800d69e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d6a0:	7ebb      	ldrb	r3, [r7, #26]
 800d6a2:	f043 0301 	orr.w	r3, r3, #1
 800d6a6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fa f973 	bl	800799a <lwip_htonl>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	887b      	ldrh	r3, [r7, #2]
 800d6b8:	18d1      	adds	r1, r2, r3
 800d6ba:	7eba      	ldrb	r2, [r7, #26]
 800d6bc:	7bfb      	ldrb	r3, [r7, #15]
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	6939      	ldr	r1, [r7, #16]
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7ff fea7 	bl	800d418 <tcp_create_segment>
 800d6ca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d063      	beq.n	800d79a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fb fdd6 	bl	8009288 <pbuf_clen>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	461a      	mov	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d6e6:	1a9b      	subs	r3, r3, r2
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	6858      	ldr	r0, [r3, #4]
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	891a      	ldrh	r2, [r3, #8]
 800d6fa:	89bb      	ldrh	r3, [r7, #12]
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	4619      	mov	r1, r3
 800d702:	f7fb fbb3 	bl	8008e6c <pbuf_realloc>
  useg->len -= remainder;
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	891a      	ldrh	r2, [r3, #8]
 800d70a:	89bb      	ldrh	r3, [r7, #12]
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	b29a      	uxth	r2, r3
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	899b      	ldrh	r3, [r3, #12]
 800d71a:	b29c      	uxth	r4, r3
 800d71c:	7efb      	ldrb	r3, [r7, #27]
 800d71e:	b29b      	uxth	r3, r3
 800d720:	4618      	mov	r0, r3
 800d722:	f7fa f925 	bl	8007970 <lwip_htons>
 800d726:	4603      	mov	r3, r0
 800d728:	461a      	mov	r2, r3
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	4322      	orrs	r2, r4
 800d730:	b292      	uxth	r2, r2
 800d732:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fb fda5 	bl	8009288 <pbuf_clen>
 800d73e:	4603      	mov	r3, r0
 800d740:	461a      	mov	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d748:	4413      	add	r3, r2
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	4618      	mov	r0, r3
 800d758:	f7fb fd96 	bl	8009288 <pbuf_clen>
 800d75c:	4603      	mov	r3, r0
 800d75e:	461a      	mov	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d766:	4413      	add	r3, r2
 800d768:	b29a      	uxth	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	69fa      	ldr	r2, [r7, #28]
 800d77c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d103      	bne.n	800d78e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	e016      	b.n	800d7c0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d792:	bf00      	nop
 800d794:	e002      	b.n	800d79c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d796:	bf00      	nop
 800d798:	e000      	b.n	800d79c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d79a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d006      	beq.n	800d7b0 <tcp_split_unsent_seg+0x25c>
 800d7a2:	4b09      	ldr	r3, [pc, #36]	; (800d7c8 <tcp_split_unsent_seg+0x274>)
 800d7a4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d7a8:	490d      	ldr	r1, [pc, #52]	; (800d7e0 <tcp_split_unsent_seg+0x28c>)
 800d7aa:	4809      	ldr	r0, [pc, #36]	; (800d7d0 <tcp_split_unsent_seg+0x27c>)
 800d7ac:	f003 ffee 	bl	801178c <iprintf>
  if (p != NULL) {
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d002      	beq.n	800d7bc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d7b6:	6938      	ldr	r0, [r7, #16]
 800d7b8:	f7fb fcde 	bl	8009178 <pbuf_free>
  }

  return ERR_MEM;
 800d7bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3724      	adds	r7, #36	; 0x24
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd90      	pop	{r4, r7, pc}
 800d7c8:	080143f8 	.word	0x080143f8
 800d7cc:	0801478c 	.word	0x0801478c
 800d7d0:	0801444c 	.word	0x0801444c
 800d7d4:	080147b0 	.word	0x080147b0
 800d7d8:	080147d4 	.word	0x080147d4
 800d7dc:	080147e4 	.word	0x080147e4
 800d7e0:	080147f4 	.word	0x080147f4

0800d7e4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d7e4:	b590      	push	{r4, r7, lr}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d106      	bne.n	800d800 <tcp_send_fin+0x1c>
 800d7f2:	4b21      	ldr	r3, [pc, #132]	; (800d878 <tcp_send_fin+0x94>)
 800d7f4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d7f8:	4920      	ldr	r1, [pc, #128]	; (800d87c <tcp_send_fin+0x98>)
 800d7fa:	4821      	ldr	r0, [pc, #132]	; (800d880 <tcp_send_fin+0x9c>)
 800d7fc:	f003 ffc6 	bl	801178c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d804:	2b00      	cmp	r3, #0
 800d806:	d02e      	beq.n	800d866 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d80c:	60fb      	str	r3, [r7, #12]
 800d80e:	e002      	b.n	800d816 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1f8      	bne.n	800d810 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	899b      	ldrh	r3, [r3, #12]
 800d824:	b29b      	uxth	r3, r3
 800d826:	4618      	mov	r0, r3
 800d828:	f7fa f8a2 	bl	8007970 <lwip_htons>
 800d82c:	4603      	mov	r3, r0
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	f003 0307 	and.w	r3, r3, #7
 800d834:	2b00      	cmp	r3, #0
 800d836:	d116      	bne.n	800d866 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	899b      	ldrh	r3, [r3, #12]
 800d83e:	b29c      	uxth	r4, r3
 800d840:	2001      	movs	r0, #1
 800d842:	f7fa f895 	bl	8007970 <lwip_htons>
 800d846:	4603      	mov	r3, r0
 800d848:	461a      	mov	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	4322      	orrs	r2, r4
 800d850:	b292      	uxth	r2, r2
 800d852:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	8b5b      	ldrh	r3, [r3, #26]
 800d858:	f043 0320 	orr.w	r3, r3, #32
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d862:	2300      	movs	r3, #0
 800d864:	e004      	b.n	800d870 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d866:	2101      	movs	r1, #1
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f80b 	bl	800d884 <tcp_enqueue_flags>
 800d86e:	4603      	mov	r3, r0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	bd90      	pop	{r4, r7, pc}
 800d878:	080143f8 	.word	0x080143f8
 800d87c:	08014800 	.word	0x08014800
 800d880:	0801444c 	.word	0x0801444c

0800d884 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b08a      	sub	sp, #40	; 0x28
 800d888:	af02      	add	r7, sp, #8
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	460b      	mov	r3, r1
 800d88e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d890:	2300      	movs	r3, #0
 800d892:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d894:	2300      	movs	r3, #0
 800d896:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d898:	78fb      	ldrb	r3, [r7, #3]
 800d89a:	f003 0303 	and.w	r3, r3, #3
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d106      	bne.n	800d8b0 <tcp_enqueue_flags+0x2c>
 800d8a2:	4b67      	ldr	r3, [pc, #412]	; (800da40 <tcp_enqueue_flags+0x1bc>)
 800d8a4:	f240 4211 	movw	r2, #1041	; 0x411
 800d8a8:	4966      	ldr	r1, [pc, #408]	; (800da44 <tcp_enqueue_flags+0x1c0>)
 800d8aa:	4867      	ldr	r0, [pc, #412]	; (800da48 <tcp_enqueue_flags+0x1c4>)
 800d8ac:	f003 ff6e 	bl	801178c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d106      	bne.n	800d8c4 <tcp_enqueue_flags+0x40>
 800d8b6:	4b62      	ldr	r3, [pc, #392]	; (800da40 <tcp_enqueue_flags+0x1bc>)
 800d8b8:	f240 4213 	movw	r2, #1043	; 0x413
 800d8bc:	4963      	ldr	r1, [pc, #396]	; (800da4c <tcp_enqueue_flags+0x1c8>)
 800d8be:	4862      	ldr	r0, [pc, #392]	; (800da48 <tcp_enqueue_flags+0x1c4>)
 800d8c0:	f003 ff64 	bl	801178c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d8c4:	78fb      	ldrb	r3, [r7, #3]
 800d8c6:	f003 0302 	and.w	r3, r3, #2
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d8d2:	7ffb      	ldrb	r3, [r7, #31]
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	f003 0304 	and.w	r3, r3, #4
 800d8dc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d8de:	7dfb      	ldrb	r3, [r7, #23]
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	2036      	movs	r0, #54	; 0x36
 800d8ea:	f7fb f961 	bl	8008bb0 <pbuf_alloc>
 800d8ee:	6138      	str	r0, [r7, #16]
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d109      	bne.n	800d90a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	8b5b      	ldrh	r3, [r3, #26]
 800d8fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d904:	f04f 33ff 	mov.w	r3, #4294967295
 800d908:	e095      	b.n	800da36 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	895a      	ldrh	r2, [r3, #10]
 800d90e:	7dfb      	ldrb	r3, [r7, #23]
 800d910:	b29b      	uxth	r3, r3
 800d912:	429a      	cmp	r2, r3
 800d914:	d206      	bcs.n	800d924 <tcp_enqueue_flags+0xa0>
 800d916:	4b4a      	ldr	r3, [pc, #296]	; (800da40 <tcp_enqueue_flags+0x1bc>)
 800d918:	f240 4239 	movw	r2, #1081	; 0x439
 800d91c:	494c      	ldr	r1, [pc, #304]	; (800da50 <tcp_enqueue_flags+0x1cc>)
 800d91e:	484a      	ldr	r0, [pc, #296]	; (800da48 <tcp_enqueue_flags+0x1c4>)
 800d920:	f003 ff34 	bl	801178c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d928:	78fa      	ldrb	r2, [r7, #3]
 800d92a:	7ffb      	ldrb	r3, [r7, #31]
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	460b      	mov	r3, r1
 800d930:	6939      	ldr	r1, [r7, #16]
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f7ff fd70 	bl	800d418 <tcp_create_segment>
 800d938:	60f8      	str	r0, [r7, #12]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d109      	bne.n	800d954 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	8b5b      	ldrh	r3, [r3, #26]
 800d944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d948:	b29a      	uxth	r2, r3
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d94e:	f04f 33ff 	mov.w	r3, #4294967295
 800d952:	e070      	b.n	800da36 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	f003 0303 	and.w	r3, r3, #3
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d006      	beq.n	800d96e <tcp_enqueue_flags+0xea>
 800d960:	4b37      	ldr	r3, [pc, #220]	; (800da40 <tcp_enqueue_flags+0x1bc>)
 800d962:	f240 4242 	movw	r2, #1090	; 0x442
 800d966:	493b      	ldr	r1, [pc, #236]	; (800da54 <tcp_enqueue_flags+0x1d0>)
 800d968:	4837      	ldr	r0, [pc, #220]	; (800da48 <tcp_enqueue_flags+0x1c4>)
 800d96a:	f003 ff0f 	bl	801178c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	891b      	ldrh	r3, [r3, #8]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d006      	beq.n	800d984 <tcp_enqueue_flags+0x100>
 800d976:	4b32      	ldr	r3, [pc, #200]	; (800da40 <tcp_enqueue_flags+0x1bc>)
 800d978:	f240 4243 	movw	r2, #1091	; 0x443
 800d97c:	4936      	ldr	r1, [pc, #216]	; (800da58 <tcp_enqueue_flags+0x1d4>)
 800d97e:	4832      	ldr	r0, [pc, #200]	; (800da48 <tcp_enqueue_flags+0x1c4>)
 800d980:	f003 ff04 	bl	801178c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d103      	bne.n	800d994 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	66da      	str	r2, [r3, #108]	; 0x6c
 800d992:	e00d      	b.n	800d9b0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d998:	61bb      	str	r3, [r7, #24]
 800d99a:	e002      	b.n	800d9a2 <tcp_enqueue_flags+0x11e>
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	61bb      	str	r3, [r7, #24]
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1f8      	bne.n	800d99c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d9b8:	78fb      	ldrb	r3, [r7, #3]
 800d9ba:	f003 0302 	and.w	r3, r3, #2
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d104      	bne.n	800d9cc <tcp_enqueue_flags+0x148>
 800d9c2:	78fb      	ldrb	r3, [r7, #3]
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d004      	beq.n	800d9d6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9d0:	1c5a      	adds	r2, r3, #1
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d9d6:	78fb      	ldrb	r3, [r7, #3]
 800d9d8:	f003 0301 	and.w	r3, r3, #1
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d006      	beq.n	800d9ee <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	8b5b      	ldrh	r3, [r3, #26]
 800d9e4:	f043 0320 	orr.w	r3, r3, #32
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fb fc48 	bl	8009288 <pbuf_clen>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da02:	4413      	add	r3, r2
 800da04:	b29a      	uxth	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00e      	beq.n	800da34 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d10a      	bne.n	800da34 <tcp_enqueue_flags+0x1b0>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da22:	2b00      	cmp	r3, #0
 800da24:	d106      	bne.n	800da34 <tcp_enqueue_flags+0x1b0>
 800da26:	4b06      	ldr	r3, [pc, #24]	; (800da40 <tcp_enqueue_flags+0x1bc>)
 800da28:	f240 4265 	movw	r2, #1125	; 0x465
 800da2c:	490b      	ldr	r1, [pc, #44]	; (800da5c <tcp_enqueue_flags+0x1d8>)
 800da2e:	4806      	ldr	r0, [pc, #24]	; (800da48 <tcp_enqueue_flags+0x1c4>)
 800da30:	f003 feac 	bl	801178c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3720      	adds	r7, #32
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	080143f8 	.word	0x080143f8
 800da44:	0801481c 	.word	0x0801481c
 800da48:	0801444c 	.word	0x0801444c
 800da4c:	08014874 	.word	0x08014874
 800da50:	08014894 	.word	0x08014894
 800da54:	080148d0 	.word	0x080148d0
 800da58:	080148e8 	.word	0x080148e8
 800da5c:	08014914 	.word	0x08014914

0800da60 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800da60:	b5b0      	push	{r4, r5, r7, lr}
 800da62:	b08a      	sub	sp, #40	; 0x28
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d106      	bne.n	800da7c <tcp_output+0x1c>
 800da6e:	4b8a      	ldr	r3, [pc, #552]	; (800dc98 <tcp_output+0x238>)
 800da70:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800da74:	4989      	ldr	r1, [pc, #548]	; (800dc9c <tcp_output+0x23c>)
 800da76:	488a      	ldr	r0, [pc, #552]	; (800dca0 <tcp_output+0x240>)
 800da78:	f003 fe88 	bl	801178c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	7d1b      	ldrb	r3, [r3, #20]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d106      	bne.n	800da92 <tcp_output+0x32>
 800da84:	4b84      	ldr	r3, [pc, #528]	; (800dc98 <tcp_output+0x238>)
 800da86:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800da8a:	4986      	ldr	r1, [pc, #536]	; (800dca4 <tcp_output+0x244>)
 800da8c:	4884      	ldr	r0, [pc, #528]	; (800dca0 <tcp_output+0x240>)
 800da8e:	f003 fe7d 	bl	801178c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800da92:	4b85      	ldr	r3, [pc, #532]	; (800dca8 <tcp_output+0x248>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d101      	bne.n	800daa0 <tcp_output+0x40>
    return ERR_OK;
 800da9c:	2300      	movs	r3, #0
 800da9e:	e1ce      	b.n	800de3e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800daac:	4293      	cmp	r3, r2
 800daae:	bf28      	it	cs
 800dab0:	4613      	movcs	r3, r2
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daba:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d10b      	bne.n	800dada <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	8b5b      	ldrh	r3, [r3, #26]
 800dac6:	f003 0302 	and.w	r3, r3, #2
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f000 81aa 	beq.w	800de24 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fdcb 	bl	800e66c <tcp_send_empty_ack>
 800dad6:	4603      	mov	r3, r0
 800dad8:	e1b1      	b.n	800de3e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dada:	6879      	ldr	r1, [r7, #4]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	3304      	adds	r3, #4
 800dae0:	461a      	mov	r2, r3
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7ff fc7c 	bl	800d3e0 <tcp_route>
 800dae8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d102      	bne.n	800daf6 <tcp_output+0x96>
    return ERR_RTE;
 800daf0:	f06f 0303 	mvn.w	r3, #3
 800daf4:	e1a3      	b.n	800de3e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d003      	beq.n	800db04 <tcp_output+0xa4>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d111      	bne.n	800db28 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d002      	beq.n	800db10 <tcp_output+0xb0>
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	3304      	adds	r3, #4
 800db0e:	e000      	b.n	800db12 <tcp_output+0xb2>
 800db10:	2300      	movs	r3, #0
 800db12:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d102      	bne.n	800db20 <tcp_output+0xc0>
      return ERR_RTE;
 800db1a:	f06f 0303 	mvn.w	r3, #3
 800db1e:	e18e      	b.n	800de3e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	4618      	mov	r0, r3
 800db30:	f7f9 ff33 	bl	800799a <lwip_htonl>
 800db34:	4602      	mov	r2, r0
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db3a:	1ad3      	subs	r3, r2, r3
 800db3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db3e:	8912      	ldrh	r2, [r2, #8]
 800db40:	4413      	add	r3, r2
 800db42:	69ba      	ldr	r2, [r7, #24]
 800db44:	429a      	cmp	r2, r3
 800db46:	d227      	bcs.n	800db98 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db4e:	461a      	mov	r2, r3
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	4293      	cmp	r3, r2
 800db54:	d114      	bne.n	800db80 <tcp_output+0x120>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d110      	bne.n	800db80 <tcp_output+0x120>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db64:	2b00      	cmp	r3, #0
 800db66:	d10b      	bne.n	800db80 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2201      	movs	r2, #1
 800db74:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	8b5b      	ldrh	r3, [r3, #26]
 800db84:	f003 0302 	and.w	r3, r3, #2
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f000 814d 	beq.w	800de28 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 fd6c 	bl	800e66c <tcp_send_empty_ack>
 800db94:	4603      	mov	r3, r0
 800db96:	e152      	b.n	800de3e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dba6:	6a3b      	ldr	r3, [r7, #32]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f000 811c 	beq.w	800dde6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800dbae:	e002      	b.n	800dbb6 <tcp_output+0x156>
 800dbb0:	6a3b      	ldr	r3, [r7, #32]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	623b      	str	r3, [r7, #32]
 800dbb6:	6a3b      	ldr	r3, [r7, #32]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1f8      	bne.n	800dbb0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dbbe:	e112      	b.n	800dde6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	899b      	ldrh	r3, [r3, #12]
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7f9 fed1 	bl	8007970 <lwip_htons>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	f003 0304 	and.w	r3, r3, #4
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d006      	beq.n	800dbe8 <tcp_output+0x188>
 800dbda:	4b2f      	ldr	r3, [pc, #188]	; (800dc98 <tcp_output+0x238>)
 800dbdc:	f240 5236 	movw	r2, #1334	; 0x536
 800dbe0:	4932      	ldr	r1, [pc, #200]	; (800dcac <tcp_output+0x24c>)
 800dbe2:	482f      	ldr	r0, [pc, #188]	; (800dca0 <tcp_output+0x240>)
 800dbe4:	f003 fdd2 	bl	801178c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d01f      	beq.n	800dc30 <tcp_output+0x1d0>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	8b5b      	ldrh	r3, [r3, #26]
 800dbf4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d119      	bne.n	800dc30 <tcp_output+0x1d0>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00b      	beq.n	800dc1c <tcp_output+0x1bc>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d110      	bne.n	800dc30 <tcp_output+0x1d0>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc12:	891a      	ldrh	r2, [r3, #8]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d209      	bcs.n	800dc30 <tcp_output+0x1d0>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d004      	beq.n	800dc30 <tcp_output+0x1d0>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc2c:	2b08      	cmp	r3, #8
 800dc2e:	d901      	bls.n	800dc34 <tcp_output+0x1d4>
 800dc30:	2301      	movs	r3, #1
 800dc32:	e000      	b.n	800dc36 <tcp_output+0x1d6>
 800dc34:	2300      	movs	r3, #0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d106      	bne.n	800dc48 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	8b5b      	ldrh	r3, [r3, #26]
 800dc3e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f000 80e4 	beq.w	800de10 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	7d1b      	ldrb	r3, [r3, #20]
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	d00d      	beq.n	800dc6c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	899b      	ldrh	r3, [r3, #12]
 800dc56:	b29c      	uxth	r4, r3
 800dc58:	2010      	movs	r0, #16
 800dc5a:	f7f9 fe89 	bl	8007970 <lwip_htons>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	461a      	mov	r2, r3
 800dc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	4322      	orrs	r2, r4
 800dc68:	b292      	uxth	r2, r2
 800dc6a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dc6c:	697a      	ldr	r2, [r7, #20]
 800dc6e:	6879      	ldr	r1, [r7, #4]
 800dc70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc72:	f000 f909 	bl	800de88 <tcp_output_segment>
 800dc76:	4603      	mov	r3, r0
 800dc78:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800dc7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d016      	beq.n	800dcb0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	8b5b      	ldrh	r3, [r3, #26]
 800dc86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc8a:	b29a      	uxth	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	835a      	strh	r2, [r3, #26]
      return err;
 800dc90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc94:	e0d3      	b.n	800de3e <tcp_output+0x3de>
 800dc96:	bf00      	nop
 800dc98:	080143f8 	.word	0x080143f8
 800dc9c:	0801493c 	.word	0x0801493c
 800dca0:	0801444c 	.word	0x0801444c
 800dca4:	08014954 	.word	0x08014954
 800dca8:	2000807c 	.word	0x2000807c
 800dcac:	0801497c 	.word	0x0801497c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800dcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	7d1b      	ldrb	r3, [r3, #20]
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d006      	beq.n	800dcce <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	8b5b      	ldrh	r3, [r3, #26]
 800dcc4:	f023 0303 	bic.w	r3, r3, #3
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800dcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7f9 fe60 	bl	800799a <lwip_htonl>
 800dcda:	4604      	mov	r4, r0
 800dcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcde:	891b      	ldrh	r3, [r3, #8]
 800dce0:	461d      	mov	r5, r3
 800dce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	899b      	ldrh	r3, [r3, #12]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7f9 fe40 	bl	8007970 <lwip_htons>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	f003 0303 	and.w	r3, r3, #3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d001      	beq.n	800dd00 <tcp_output+0x2a0>
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e000      	b.n	800dd02 <tcp_output+0x2a2>
 800dd00:	2300      	movs	r3, #0
 800dd02:	442b      	add	r3, r5
 800dd04:	4423      	add	r3, r4
 800dd06:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	da02      	bge.n	800dd1a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	68ba      	ldr	r2, [r7, #8]
 800dd18:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800dd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1c:	891b      	ldrh	r3, [r3, #8]
 800dd1e:	461c      	mov	r4, r3
 800dd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	899b      	ldrh	r3, [r3, #12]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7f9 fe21 	bl	8007970 <lwip_htons>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	f003 0303 	and.w	r3, r3, #3
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <tcp_output+0x2de>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e000      	b.n	800dd40 <tcp_output+0x2e0>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	4423      	add	r3, r4
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d049      	beq.n	800ddda <tcp_output+0x37a>
      seg->next = NULL;
 800dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd48:	2200      	movs	r2, #0
 800dd4a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d105      	bne.n	800dd60 <tcp_output+0x300>
        pcb->unacked = seg;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd58:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5c:	623b      	str	r3, [r7, #32]
 800dd5e:	e03f      	b.n	800dde0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800dd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7f9 fe17 	bl	800799a <lwip_htonl>
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	6a3b      	ldr	r3, [r7, #32]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7f9 fe10 	bl	800799a <lwip_htonl>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	1ae3      	subs	r3, r4, r3
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	da24      	bge.n	800ddcc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3370      	adds	r3, #112	; 0x70
 800dd86:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dd88:	e002      	b.n	800dd90 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d011      	beq.n	800ddbc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7f9 fdfa 	bl	800799a <lwip_htonl>
 800dda6:	4604      	mov	r4, r0
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7f9 fdf3 	bl	800799a <lwip_htonl>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	dbe6      	blt.n	800dd8a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	e009      	b.n	800dde0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ddcc:	6a3b      	ldr	r3, [r7, #32]
 800ddce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ddd2:	6a3b      	ldr	r3, [r7, #32]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	623b      	str	r3, [r7, #32]
 800ddd8:	e002      	b.n	800dde0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ddda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dddc:	f7fc fc3f 	bl	800a65e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d012      	beq.n	800de12 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7f9 fdd1 	bl	800799a <lwip_htonl>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de02:	8912      	ldrh	r2, [r2, #8]
 800de04:	4413      	add	r3, r2
  while (seg != NULL &&
 800de06:	69ba      	ldr	r2, [r7, #24]
 800de08:	429a      	cmp	r2, r3
 800de0a:	f4bf aed9 	bcs.w	800dbc0 <tcp_output+0x160>
 800de0e:	e000      	b.n	800de12 <tcp_output+0x3b2>
      break;
 800de10:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de16:	2b00      	cmp	r3, #0
 800de18:	d108      	bne.n	800de2c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800de22:	e004      	b.n	800de2e <tcp_output+0x3ce>
    goto output_done;
 800de24:	bf00      	nop
 800de26:	e002      	b.n	800de2e <tcp_output+0x3ce>
    goto output_done;
 800de28:	bf00      	nop
 800de2a:	e000      	b.n	800de2e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800de2c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	8b5b      	ldrh	r3, [r3, #26]
 800de32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de36:	b29a      	uxth	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3728      	adds	r7, #40	; 0x28
 800de42:	46bd      	mov	sp, r7
 800de44:	bdb0      	pop	{r4, r5, r7, pc}
 800de46:	bf00      	nop

0800de48 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d106      	bne.n	800de64 <tcp_output_segment_busy+0x1c>
 800de56:	4b09      	ldr	r3, [pc, #36]	; (800de7c <tcp_output_segment_busy+0x34>)
 800de58:	f240 529a 	movw	r2, #1434	; 0x59a
 800de5c:	4908      	ldr	r1, [pc, #32]	; (800de80 <tcp_output_segment_busy+0x38>)
 800de5e:	4809      	ldr	r0, [pc, #36]	; (800de84 <tcp_output_segment_busy+0x3c>)
 800de60:	f003 fc94 	bl	801178c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	7b9b      	ldrb	r3, [r3, #14]
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d001      	beq.n	800de72 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800de6e:	2301      	movs	r3, #1
 800de70:	e000      	b.n	800de74 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	080143f8 	.word	0x080143f8
 800de80:	08014994 	.word	0x08014994
 800de84:	0801444c 	.word	0x0801444c

0800de88 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800de88:	b5b0      	push	{r4, r5, r7, lr}
 800de8a:	b08c      	sub	sp, #48	; 0x30
 800de8c:	af04      	add	r7, sp, #16
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d106      	bne.n	800dea8 <tcp_output_segment+0x20>
 800de9a:	4b63      	ldr	r3, [pc, #396]	; (800e028 <tcp_output_segment+0x1a0>)
 800de9c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800dea0:	4962      	ldr	r1, [pc, #392]	; (800e02c <tcp_output_segment+0x1a4>)
 800dea2:	4863      	ldr	r0, [pc, #396]	; (800e030 <tcp_output_segment+0x1a8>)
 800dea4:	f003 fc72 	bl	801178c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d106      	bne.n	800debc <tcp_output_segment+0x34>
 800deae:	4b5e      	ldr	r3, [pc, #376]	; (800e028 <tcp_output_segment+0x1a0>)
 800deb0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800deb4:	495f      	ldr	r1, [pc, #380]	; (800e034 <tcp_output_segment+0x1ac>)
 800deb6:	485e      	ldr	r0, [pc, #376]	; (800e030 <tcp_output_segment+0x1a8>)
 800deb8:	f003 fc68 	bl	801178c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <tcp_output_segment+0x48>
 800dec2:	4b59      	ldr	r3, [pc, #356]	; (800e028 <tcp_output_segment+0x1a0>)
 800dec4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800dec8:	495b      	ldr	r1, [pc, #364]	; (800e038 <tcp_output_segment+0x1b0>)
 800deca:	4859      	ldr	r0, [pc, #356]	; (800e030 <tcp_output_segment+0x1a8>)
 800decc:	f003 fc5e 	bl	801178c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ded0:	68f8      	ldr	r0, [r7, #12]
 800ded2:	f7ff ffb9 	bl	800de48 <tcp_output_segment_busy>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d001      	beq.n	800dee0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800dedc:	2300      	movs	r3, #0
 800dede:	e09f      	b.n	800e020 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	68dc      	ldr	r4, [r3, #12]
 800dee8:	4610      	mov	r0, r2
 800deea:	f7f9 fd56 	bl	800799a <lwip_htonl>
 800deee:	4603      	mov	r3, r0
 800def0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	68dc      	ldr	r4, [r3, #12]
 800defa:	4610      	mov	r0, r2
 800defc:	f7f9 fd38 	bl	8007970 <lwip_htons>
 800df00:	4603      	mov	r3, r0
 800df02:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800df0c:	441a      	add	r2, r3
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	3314      	adds	r3, #20
 800df18:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	7a9b      	ldrb	r3, [r3, #10]
 800df1e:	f003 0301 	and.w	r3, r3, #1
 800df22:	2b00      	cmp	r3, #0
 800df24:	d015      	beq.n	800df52 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	3304      	adds	r3, #4
 800df2a:	461a      	mov	r2, r3
 800df2c:	6879      	ldr	r1, [r7, #4]
 800df2e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800df32:	f7fc fe8b 	bl	800ac4c <tcp_eff_send_mss_netif>
 800df36:	4603      	mov	r3, r0
 800df38:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800df3a:	8b7b      	ldrh	r3, [r7, #26]
 800df3c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800df40:	4618      	mov	r0, r3
 800df42:	f7f9 fd2a 	bl	800799a <lwip_htonl>
 800df46:	4602      	mov	r2, r0
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	3304      	adds	r3, #4
 800df50:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df58:	2b00      	cmp	r3, #0
 800df5a:	da02      	bge.n	800df62 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2200      	movs	r2, #0
 800df60:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10c      	bne.n	800df84 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800df6a:	4b34      	ldr	r3, [pc, #208]	; (800e03c <tcp_output_segment+0x1b4>)
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7f9 fd0e 	bl	800799a <lwip_htonl>
 800df7e:	4602      	mov	r2, r0
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	68da      	ldr	r2, [r3, #12]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	8959      	ldrh	r1, [r3, #10]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	8b3a      	ldrh	r2, [r7, #24]
 800df9e:	1a8a      	subs	r2, r1, r2
 800dfa0:	b292      	uxth	r2, r2
 800dfa2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	8919      	ldrh	r1, [r3, #8]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	8b3a      	ldrh	r2, [r7, #24]
 800dfb0:	1a8a      	subs	r2, r1, r2
 800dfb2:	b292      	uxth	r2, r2
 800dfb4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	68d2      	ldr	r2, [r2, #12]
 800dfbe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	741a      	strb	r2, [r3, #16]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	f103 0214 	add.w	r2, r3, #20
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	7a9b      	ldrb	r3, [r3, #10]
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	f003 0304 	and.w	r3, r3, #4
 800dfde:	4413      	add	r3, r2
 800dfe0:	69fa      	ldr	r2, [r7, #28]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d006      	beq.n	800dff4 <tcp_output_segment+0x16c>
 800dfe6:	4b10      	ldr	r3, [pc, #64]	; (800e028 <tcp_output_segment+0x1a0>)
 800dfe8:	f240 621c 	movw	r2, #1564	; 0x61c
 800dfec:	4914      	ldr	r1, [pc, #80]	; (800e040 <tcp_output_segment+0x1b8>)
 800dfee:	4810      	ldr	r0, [pc, #64]	; (800e030 <tcp_output_segment+0x1a8>)
 800dff0:	f003 fbcc 	bl	801178c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6858      	ldr	r0, [r3, #4]
 800dff8:	68b9      	ldr	r1, [r7, #8]
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	1d1c      	adds	r4, r3, #4
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	7add      	ldrb	r5, [r3, #11]
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	7a9b      	ldrb	r3, [r3, #10]
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	9202      	str	r2, [sp, #8]
 800e00a:	2206      	movs	r2, #6
 800e00c:	9201      	str	r2, [sp, #4]
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	462b      	mov	r3, r5
 800e012:	4622      	mov	r2, r4
 800e014:	f002 fa40 	bl	8010498 <ip4_output_if>
 800e018:	4603      	mov	r3, r0
 800e01a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e01c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3720      	adds	r7, #32
 800e024:	46bd      	mov	sp, r7
 800e026:	bdb0      	pop	{r4, r5, r7, pc}
 800e028:	080143f8 	.word	0x080143f8
 800e02c:	080149bc 	.word	0x080149bc
 800e030:	0801444c 	.word	0x0801444c
 800e034:	080149dc 	.word	0x080149dc
 800e038:	080149fc 	.word	0x080149fc
 800e03c:	20008030 	.word	0x20008030
 800e040:	08014a20 	.word	0x08014a20

0800e044 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e044:	b5b0      	push	{r4, r5, r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d106      	bne.n	800e060 <tcp_rexmit_rto_prepare+0x1c>
 800e052:	4b31      	ldr	r3, [pc, #196]	; (800e118 <tcp_rexmit_rto_prepare+0xd4>)
 800e054:	f240 6263 	movw	r2, #1635	; 0x663
 800e058:	4930      	ldr	r1, [pc, #192]	; (800e11c <tcp_rexmit_rto_prepare+0xd8>)
 800e05a:	4831      	ldr	r0, [pc, #196]	; (800e120 <tcp_rexmit_rto_prepare+0xdc>)
 800e05c:	f003 fb96 	bl	801178c <iprintf>

  if (pcb->unacked == NULL) {
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e064:	2b00      	cmp	r3, #0
 800e066:	d102      	bne.n	800e06e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e068:	f06f 0305 	mvn.w	r3, #5
 800e06c:	e050      	b.n	800e110 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e072:	60fb      	str	r3, [r7, #12]
 800e074:	e00b      	b.n	800e08e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e076:	68f8      	ldr	r0, [r7, #12]
 800e078:	f7ff fee6 	bl	800de48 <tcp_output_segment_busy>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e082:	f06f 0305 	mvn.w	r3, #5
 800e086:	e043      	b.n	800e110 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	60fb      	str	r3, [r7, #12]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1ef      	bne.n	800e076 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	f7ff fed6 	bl	800de48 <tcp_output_segment_busy>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d002      	beq.n	800e0a8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e0a2:	f06f 0305 	mvn.w	r3, #5
 800e0a6:	e033      	b.n	800e110 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	8b5b      	ldrh	r3, [r3, #26]
 800e0c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7f9 fc61 	bl	800799a <lwip_htonl>
 800e0d8:	4604      	mov	r4, r0
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	891b      	ldrh	r3, [r3, #8]
 800e0de:	461d      	mov	r5, r3
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	899b      	ldrh	r3, [r3, #12]
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7f9 fc41 	bl	8007970 <lwip_htons>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	f003 0303 	and.w	r3, r3, #3
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d001      	beq.n	800e0fe <tcp_rexmit_rto_prepare+0xba>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e000      	b.n	800e100 <tcp_rexmit_rto_prepare+0xbc>
 800e0fe:	2300      	movs	r3, #0
 800e100:	442b      	add	r3, r5
 800e102:	18e2      	adds	r2, r4, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bdb0      	pop	{r4, r5, r7, pc}
 800e118:	080143f8 	.word	0x080143f8
 800e11c:	08014a34 	.word	0x08014a34
 800e120:	0801444c 	.word	0x0801444c

0800e124 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d106      	bne.n	800e140 <tcp_rexmit_rto_commit+0x1c>
 800e132:	4b0d      	ldr	r3, [pc, #52]	; (800e168 <tcp_rexmit_rto_commit+0x44>)
 800e134:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e138:	490c      	ldr	r1, [pc, #48]	; (800e16c <tcp_rexmit_rto_commit+0x48>)
 800e13a:	480d      	ldr	r0, [pc, #52]	; (800e170 <tcp_rexmit_rto_commit+0x4c>)
 800e13c:	f003 fb26 	bl	801178c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e146:	2bff      	cmp	r3, #255	; 0xff
 800e148:	d007      	beq.n	800e15a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e150:	3301      	adds	r3, #1
 800e152:	b2da      	uxtb	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7ff fc80 	bl	800da60 <tcp_output>
}
 800e160:	bf00      	nop
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	080143f8 	.word	0x080143f8
 800e16c:	08014a58 	.word	0x08014a58
 800e170:	0801444c 	.word	0x0801444c

0800e174 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d106      	bne.n	800e190 <tcp_rexmit_rto+0x1c>
 800e182:	4b0a      	ldr	r3, [pc, #40]	; (800e1ac <tcp_rexmit_rto+0x38>)
 800e184:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e188:	4909      	ldr	r1, [pc, #36]	; (800e1b0 <tcp_rexmit_rto+0x3c>)
 800e18a:	480a      	ldr	r0, [pc, #40]	; (800e1b4 <tcp_rexmit_rto+0x40>)
 800e18c:	f003 fafe 	bl	801178c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff ff57 	bl	800e044 <tcp_rexmit_rto_prepare>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d102      	bne.n	800e1a2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7ff ffc1 	bl	800e124 <tcp_rexmit_rto_commit>
  }
}
 800e1a2:	bf00      	nop
 800e1a4:	3708      	adds	r7, #8
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	080143f8 	.word	0x080143f8
 800e1b0:	08014a7c 	.word	0x08014a7c
 800e1b4:	0801444c 	.word	0x0801444c

0800e1b8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e1b8:	b590      	push	{r4, r7, lr}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d106      	bne.n	800e1d4 <tcp_rexmit+0x1c>
 800e1c6:	4b2f      	ldr	r3, [pc, #188]	; (800e284 <tcp_rexmit+0xcc>)
 800e1c8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e1cc:	492e      	ldr	r1, [pc, #184]	; (800e288 <tcp_rexmit+0xd0>)
 800e1ce:	482f      	ldr	r0, [pc, #188]	; (800e28c <tcp_rexmit+0xd4>)
 800e1d0:	f003 fadc 	bl	801178c <iprintf>

  if (pcb->unacked == NULL) {
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d102      	bne.n	800e1e2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e1dc:	f06f 0305 	mvn.w	r3, #5
 800e1e0:	e04c      	b.n	800e27c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e1e8:	68b8      	ldr	r0, [r7, #8]
 800e1ea:	f7ff fe2d 	bl	800de48 <tcp_output_segment_busy>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e1f4:	f06f 0305 	mvn.w	r3, #5
 800e1f8:	e040      	b.n	800e27c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	336c      	adds	r3, #108	; 0x6c
 800e206:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e208:	e002      	b.n	800e210 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d011      	beq.n	800e23c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	4618      	mov	r0, r3
 800e222:	f7f9 fbba 	bl	800799a <lwip_htonl>
 800e226:	4604      	mov	r4, r0
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	4618      	mov	r0, r3
 800e230:	f7f9 fbb3 	bl	800799a <lwip_htonl>
 800e234:	4603      	mov	r3, r0
 800e236:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e238:	2b00      	cmp	r3, #0
 800e23a:	dbe6      	blt.n	800e20a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d103      	bne.n	800e25a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2200      	movs	r2, #0
 800e256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e260:	2bff      	cmp	r3, #255	; 0xff
 800e262:	d007      	beq.n	800e274 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e26a:	3301      	adds	r3, #1
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3714      	adds	r7, #20
 800e280:	46bd      	mov	sp, r7
 800e282:	bd90      	pop	{r4, r7, pc}
 800e284:	080143f8 	.word	0x080143f8
 800e288:	08014a98 	.word	0x08014a98
 800e28c:	0801444c 	.word	0x0801444c

0800e290 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d106      	bne.n	800e2ac <tcp_rexmit_fast+0x1c>
 800e29e:	4b2a      	ldr	r3, [pc, #168]	; (800e348 <tcp_rexmit_fast+0xb8>)
 800e2a0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e2a4:	4929      	ldr	r1, [pc, #164]	; (800e34c <tcp_rexmit_fast+0xbc>)
 800e2a6:	482a      	ldr	r0, [pc, #168]	; (800e350 <tcp_rexmit_fast+0xc0>)
 800e2a8:	f003 fa70 	bl	801178c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d044      	beq.n	800e33e <tcp_rexmit_fast+0xae>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	8b5b      	ldrh	r3, [r3, #26]
 800e2b8:	f003 0304 	and.w	r3, r3, #4
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d13e      	bne.n	800e33e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7ff ff79 	bl	800e1b8 <tcp_rexmit>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d138      	bne.n	800e33e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	bf28      	it	cs
 800e2dc:	4613      	movcs	r3, r2
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	0fda      	lsrs	r2, r3, #31
 800e2e2:	4413      	add	r3, r2
 800e2e4:	105b      	asrs	r3, r3, #1
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2fa:	005b      	lsls	r3, r3, #1
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d206      	bcs.n	800e30e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	b29a      	uxth	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e318:	4619      	mov	r1, r3
 800e31a:	0049      	lsls	r1, r1, #1
 800e31c:	440b      	add	r3, r1
 800e31e:	b29b      	uxth	r3, r3
 800e320:	4413      	add	r3, r2
 800e322:	b29a      	uxth	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	8b5b      	ldrh	r3, [r3, #26]
 800e32e:	f043 0304 	orr.w	r3, r3, #4
 800e332:	b29a      	uxth	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e33e:	bf00      	nop
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	080143f8 	.word	0x080143f8
 800e34c:	08014ab0 	.word	0x08014ab0
 800e350:	0801444c 	.word	0x0801444c

0800e354 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	607b      	str	r3, [r7, #4]
 800e35e:	460b      	mov	r3, r1
 800e360:	817b      	strh	r3, [r7, #10]
 800e362:	4613      	mov	r3, r2
 800e364:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e366:	897a      	ldrh	r2, [r7, #10]
 800e368:	893b      	ldrh	r3, [r7, #8]
 800e36a:	4413      	add	r3, r2
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	3314      	adds	r3, #20
 800e370:	b29b      	uxth	r3, r3
 800e372:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e376:	4619      	mov	r1, r3
 800e378:	2022      	movs	r0, #34	; 0x22
 800e37a:	f7fa fc19 	bl	8008bb0 <pbuf_alloc>
 800e37e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d04d      	beq.n	800e422 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e386:	897b      	ldrh	r3, [r7, #10]
 800e388:	3313      	adds	r3, #19
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	8952      	ldrh	r2, [r2, #10]
 800e38e:	4293      	cmp	r3, r2
 800e390:	db06      	blt.n	800e3a0 <tcp_output_alloc_header_common+0x4c>
 800e392:	4b26      	ldr	r3, [pc, #152]	; (800e42c <tcp_output_alloc_header_common+0xd8>)
 800e394:	f240 7223 	movw	r2, #1827	; 0x723
 800e398:	4925      	ldr	r1, [pc, #148]	; (800e430 <tcp_output_alloc_header_common+0xdc>)
 800e39a:	4826      	ldr	r0, [pc, #152]	; (800e434 <tcp_output_alloc_header_common+0xe0>)
 800e39c:	f003 f9f6 	bl	801178c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e3a6:	8c3b      	ldrh	r3, [r7, #32]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7f9 fae1 	bl	8007970 <lwip_htons>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7f9 fad9 	bl	8007970 <lwip_htons>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f7f9 fae4 	bl	800799a <lwip_htonl>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e3d8:	897b      	ldrh	r3, [r7, #10]
 800e3da:	089b      	lsrs	r3, r3, #2
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	3305      	adds	r3, #5
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	031b      	lsls	r3, r3, #12
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7f9 fabd 	bl	8007970 <lwip_htons>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e3fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e400:	4618      	mov	r0, r3
 800e402:	f7f9 fab5 	bl	8007970 <lwip_htons>
 800e406:	4603      	mov	r3, r0
 800e408:	461a      	mov	r2, r3
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	2200      	movs	r2, #0
 800e412:	741a      	strb	r2, [r3, #16]
 800e414:	2200      	movs	r2, #0
 800e416:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	2200      	movs	r2, #0
 800e41c:	749a      	strb	r2, [r3, #18]
 800e41e:	2200      	movs	r2, #0
 800e420:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e422:	697b      	ldr	r3, [r7, #20]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3718      	adds	r7, #24
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	080143f8 	.word	0x080143f8
 800e430:	08014ad0 	.word	0x08014ad0
 800e434:	0801444c 	.word	0x0801444c

0800e438 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e438:	b5b0      	push	{r4, r5, r7, lr}
 800e43a:	b08a      	sub	sp, #40	; 0x28
 800e43c:	af04      	add	r7, sp, #16
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	607b      	str	r3, [r7, #4]
 800e442:	460b      	mov	r3, r1
 800e444:	817b      	strh	r3, [r7, #10]
 800e446:	4613      	mov	r3, r2
 800e448:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d106      	bne.n	800e45e <tcp_output_alloc_header+0x26>
 800e450:	4b15      	ldr	r3, [pc, #84]	; (800e4a8 <tcp_output_alloc_header+0x70>)
 800e452:	f240 7242 	movw	r2, #1858	; 0x742
 800e456:	4915      	ldr	r1, [pc, #84]	; (800e4ac <tcp_output_alloc_header+0x74>)
 800e458:	4815      	ldr	r0, [pc, #84]	; (800e4b0 <tcp_output_alloc_header+0x78>)
 800e45a:	f003 f997 	bl	801178c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	8adb      	ldrh	r3, [r3, #22]
 800e466:	68fa      	ldr	r2, [r7, #12]
 800e468:	8b12      	ldrh	r2, [r2, #24]
 800e46a:	68f9      	ldr	r1, [r7, #12]
 800e46c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e46e:	893d      	ldrh	r5, [r7, #8]
 800e470:	897c      	ldrh	r4, [r7, #10]
 800e472:	9103      	str	r1, [sp, #12]
 800e474:	2110      	movs	r1, #16
 800e476:	9102      	str	r1, [sp, #8]
 800e478:	9201      	str	r2, [sp, #4]
 800e47a:	9300      	str	r3, [sp, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	462a      	mov	r2, r5
 800e480:	4621      	mov	r1, r4
 800e482:	f7ff ff67 	bl	800e354 <tcp_output_alloc_header_common>
 800e486:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d006      	beq.n	800e49c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e492:	68fa      	ldr	r2, [r7, #12]
 800e494:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e496:	441a      	add	r2, r3
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e49c:	697b      	ldr	r3, [r7, #20]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3718      	adds	r7, #24
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bdb0      	pop	{r4, r5, r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	080143f8 	.word	0x080143f8
 800e4ac:	08014b00 	.word	0x08014b00
 800e4b0:	0801444c 	.word	0x0801444c

0800e4b4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b088      	sub	sp, #32
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	4611      	mov	r1, r2
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	71fb      	strb	r3, [r7, #7]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d106      	bne.n	800e4e2 <tcp_output_fill_options+0x2e>
 800e4d4:	4b13      	ldr	r3, [pc, #76]	; (800e524 <tcp_output_fill_options+0x70>)
 800e4d6:	f240 7256 	movw	r2, #1878	; 0x756
 800e4da:	4913      	ldr	r1, [pc, #76]	; (800e528 <tcp_output_fill_options+0x74>)
 800e4dc:	4813      	ldr	r0, [pc, #76]	; (800e52c <tcp_output_fill_options+0x78>)
 800e4de:	f003 f955 	bl	801178c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	3314      	adds	r3, #20
 800e4ec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	f103 0214 	add.w	r2, r3, #20
 800e4f4:	8bfb      	ldrh	r3, [r7, #30]
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	79fb      	ldrb	r3, [r7, #7]
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	f003 0304 	and.w	r3, r3, #4
 800e502:	440b      	add	r3, r1
 800e504:	4413      	add	r3, r2
 800e506:	697a      	ldr	r2, [r7, #20]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d006      	beq.n	800e51a <tcp_output_fill_options+0x66>
 800e50c:	4b05      	ldr	r3, [pc, #20]	; (800e524 <tcp_output_fill_options+0x70>)
 800e50e:	f240 7275 	movw	r2, #1909	; 0x775
 800e512:	4907      	ldr	r1, [pc, #28]	; (800e530 <tcp_output_fill_options+0x7c>)
 800e514:	4805      	ldr	r0, [pc, #20]	; (800e52c <tcp_output_fill_options+0x78>)
 800e516:	f003 f939 	bl	801178c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e51a:	bf00      	nop
 800e51c:	3720      	adds	r7, #32
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	080143f8 	.word	0x080143f8
 800e528:	08014b28 	.word	0x08014b28
 800e52c:	0801444c 	.word	0x0801444c
 800e530:	08014a20 	.word	0x08014a20

0800e534 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b08a      	sub	sp, #40	; 0x28
 800e538:	af04      	add	r7, sp, #16
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]
 800e540:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d106      	bne.n	800e556 <tcp_output_control_segment+0x22>
 800e548:	4b1c      	ldr	r3, [pc, #112]	; (800e5bc <tcp_output_control_segment+0x88>)
 800e54a:	f240 7287 	movw	r2, #1927	; 0x787
 800e54e:	491c      	ldr	r1, [pc, #112]	; (800e5c0 <tcp_output_control_segment+0x8c>)
 800e550:	481c      	ldr	r0, [pc, #112]	; (800e5c4 <tcp_output_control_segment+0x90>)
 800e552:	f003 f91b 	bl	801178c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e556:	683a      	ldr	r2, [r7, #0]
 800e558:	6879      	ldr	r1, [r7, #4]
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f7fe ff40 	bl	800d3e0 <tcp_route>
 800e560:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d102      	bne.n	800e56e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e568:	23fc      	movs	r3, #252	; 0xfc
 800e56a:	75fb      	strb	r3, [r7, #23]
 800e56c:	e01c      	b.n	800e5a8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d006      	beq.n	800e582 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	7adb      	ldrb	r3, [r3, #11]
 800e578:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	7a9b      	ldrb	r3, [r3, #10]
 800e57e:	757b      	strb	r3, [r7, #21]
 800e580:	e003      	b.n	800e58a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e582:	23ff      	movs	r3, #255	; 0xff
 800e584:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e58a:	7dba      	ldrb	r2, [r7, #22]
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	9302      	str	r3, [sp, #8]
 800e590:	2306      	movs	r3, #6
 800e592:	9301      	str	r3, [sp, #4]
 800e594:	7d7b      	ldrb	r3, [r7, #21]
 800e596:	9300      	str	r3, [sp, #0]
 800e598:	4613      	mov	r3, r2
 800e59a:	683a      	ldr	r2, [r7, #0]
 800e59c:	6879      	ldr	r1, [r7, #4]
 800e59e:	68b8      	ldr	r0, [r7, #8]
 800e5a0:	f001 ff7a 	bl	8010498 <ip4_output_if>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e5a8:	68b8      	ldr	r0, [r7, #8]
 800e5aa:	f7fa fde5 	bl	8009178 <pbuf_free>
  return err;
 800e5ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3718      	adds	r7, #24
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	080143f8 	.word	0x080143f8
 800e5c0:	08014b50 	.word	0x08014b50
 800e5c4:	0801444c 	.word	0x0801444c

0800e5c8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e5c8:	b590      	push	{r4, r7, lr}
 800e5ca:	b08b      	sub	sp, #44	; 0x2c
 800e5cc:	af04      	add	r7, sp, #16
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
 800e5d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d106      	bne.n	800e5ea <tcp_rst+0x22>
 800e5dc:	4b1f      	ldr	r3, [pc, #124]	; (800e65c <tcp_rst+0x94>)
 800e5de:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e5e2:	491f      	ldr	r1, [pc, #124]	; (800e660 <tcp_rst+0x98>)
 800e5e4:	481f      	ldr	r0, [pc, #124]	; (800e664 <tcp_rst+0x9c>)
 800e5e6:	f003 f8d1 	bl	801178c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d106      	bne.n	800e5fe <tcp_rst+0x36>
 800e5f0:	4b1a      	ldr	r3, [pc, #104]	; (800e65c <tcp_rst+0x94>)
 800e5f2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e5f6:	491c      	ldr	r1, [pc, #112]	; (800e668 <tcp_rst+0xa0>)
 800e5f8:	481a      	ldr	r0, [pc, #104]	; (800e664 <tcp_rst+0x9c>)
 800e5fa:	f003 f8c7 	bl	801178c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e5fe:	2300      	movs	r3, #0
 800e600:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e602:	f246 0308 	movw	r3, #24584	; 0x6008
 800e606:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e608:	7dfb      	ldrb	r3, [r7, #23]
 800e60a:	b29c      	uxth	r4, r3
 800e60c:	68b8      	ldr	r0, [r7, #8]
 800e60e:	f7f9 f9c4 	bl	800799a <lwip_htonl>
 800e612:	4602      	mov	r2, r0
 800e614:	8abb      	ldrh	r3, [r7, #20]
 800e616:	9303      	str	r3, [sp, #12]
 800e618:	2314      	movs	r3, #20
 800e61a:	9302      	str	r3, [sp, #8]
 800e61c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e61e:	9301      	str	r3, [sp, #4]
 800e620:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	4613      	mov	r3, r2
 800e626:	2200      	movs	r2, #0
 800e628:	4621      	mov	r1, r4
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f7ff fe92 	bl	800e354 <tcp_output_alloc_header_common>
 800e630:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00c      	beq.n	800e652 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e638:	7dfb      	ldrb	r3, [r7, #23]
 800e63a:	2200      	movs	r2, #0
 800e63c:	6939      	ldr	r1, [r7, #16]
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f7ff ff38 	bl	800e4b4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e646:	683a      	ldr	r2, [r7, #0]
 800e648:	6939      	ldr	r1, [r7, #16]
 800e64a:	68f8      	ldr	r0, [r7, #12]
 800e64c:	f7ff ff72 	bl	800e534 <tcp_output_control_segment>
 800e650:	e000      	b.n	800e654 <tcp_rst+0x8c>
    return;
 800e652:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e654:	371c      	adds	r7, #28
 800e656:	46bd      	mov	sp, r7
 800e658:	bd90      	pop	{r4, r7, pc}
 800e65a:	bf00      	nop
 800e65c:	080143f8 	.word	0x080143f8
 800e660:	08014b7c 	.word	0x08014b7c
 800e664:	0801444c 	.word	0x0801444c
 800e668:	08014b98 	.word	0x08014b98

0800e66c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e66c:	b590      	push	{r4, r7, lr}
 800e66e:	b087      	sub	sp, #28
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e674:	2300      	movs	r3, #0
 800e676:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d106      	bne.n	800e690 <tcp_send_empty_ack+0x24>
 800e682:	4b28      	ldr	r3, [pc, #160]	; (800e724 <tcp_send_empty_ack+0xb8>)
 800e684:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e688:	4927      	ldr	r1, [pc, #156]	; (800e728 <tcp_send_empty_ack+0xbc>)
 800e68a:	4828      	ldr	r0, [pc, #160]	; (800e72c <tcp_send_empty_ack+0xc0>)
 800e68c:	f003 f87e 	bl	801178c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e690:	7dfb      	ldrb	r3, [r7, #23]
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	b2db      	uxtb	r3, r3
 800e696:	f003 0304 	and.w	r3, r3, #4
 800e69a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e69c:	7d7b      	ldrb	r3, [r7, #21]
 800e69e:	b29c      	uxth	r4, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7f9 f978 	bl	800799a <lwip_htonl>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f7ff fec1 	bl	800e438 <tcp_output_alloc_header>
 800e6b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d109      	bne.n	800e6d2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	8b5b      	ldrh	r3, [r3, #26]
 800e6c2:	f043 0303 	orr.w	r3, r3, #3
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e6cc:	f06f 0301 	mvn.w	r3, #1
 800e6d0:	e023      	b.n	800e71a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e6d2:	7dbb      	ldrb	r3, [r7, #22]
 800e6d4:	7dfa      	ldrb	r2, [r7, #23]
 800e6d6:	6939      	ldr	r1, [r7, #16]
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f7ff feeb 	bl	800e4b4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	3304      	adds	r3, #4
 800e6e4:	6939      	ldr	r1, [r7, #16]
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7ff ff24 	bl	800e534 <tcp_output_control_segment>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e6f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d007      	beq.n	800e708 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	8b5b      	ldrh	r3, [r3, #26]
 800e6fc:	f043 0303 	orr.w	r3, r3, #3
 800e700:	b29a      	uxth	r2, r3
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	835a      	strh	r2, [r3, #26]
 800e706:	e006      	b.n	800e716 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	8b5b      	ldrh	r3, [r3, #26]
 800e70c:	f023 0303 	bic.w	r3, r3, #3
 800e710:	b29a      	uxth	r2, r3
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e716:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	371c      	adds	r7, #28
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd90      	pop	{r4, r7, pc}
 800e722:	bf00      	nop
 800e724:	080143f8 	.word	0x080143f8
 800e728:	08014bb4 	.word	0x08014bb4
 800e72c:	0801444c 	.word	0x0801444c

0800e730 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e730:	b590      	push	{r4, r7, lr}
 800e732:	b087      	sub	sp, #28
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e738:	2300      	movs	r3, #0
 800e73a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d106      	bne.n	800e750 <tcp_keepalive+0x20>
 800e742:	4b18      	ldr	r3, [pc, #96]	; (800e7a4 <tcp_keepalive+0x74>)
 800e744:	f640 0224 	movw	r2, #2084	; 0x824
 800e748:	4917      	ldr	r1, [pc, #92]	; (800e7a8 <tcp_keepalive+0x78>)
 800e74a:	4818      	ldr	r0, [pc, #96]	; (800e7ac <tcp_keepalive+0x7c>)
 800e74c:	f003 f81e 	bl	801178c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e750:	7dfb      	ldrb	r3, [r7, #23]
 800e752:	b29c      	uxth	r4, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e758:	3b01      	subs	r3, #1
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7f9 f91d 	bl	800799a <lwip_htonl>
 800e760:	4603      	mov	r3, r0
 800e762:	2200      	movs	r2, #0
 800e764:	4621      	mov	r1, r4
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f7ff fe66 	bl	800e438 <tcp_output_alloc_header>
 800e76c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d102      	bne.n	800e77a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e774:	f04f 33ff 	mov.w	r3, #4294967295
 800e778:	e010      	b.n	800e79c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e77a:	7dfb      	ldrb	r3, [r7, #23]
 800e77c:	2200      	movs	r2, #0
 800e77e:	6939      	ldr	r1, [r7, #16]
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7ff fe97 	bl	800e4b4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3304      	adds	r3, #4
 800e78c:	6939      	ldr	r1, [r7, #16]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7ff fed0 	bl	800e534 <tcp_output_control_segment>
 800e794:	4603      	mov	r3, r0
 800e796:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e798:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	371c      	adds	r7, #28
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd90      	pop	{r4, r7, pc}
 800e7a4:	080143f8 	.word	0x080143f8
 800e7a8:	08014bd4 	.word	0x08014bd4
 800e7ac:	0801444c 	.word	0x0801444c

0800e7b0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e7b0:	b590      	push	{r4, r7, lr}
 800e7b2:	b08b      	sub	sp, #44	; 0x2c
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d106      	bne.n	800e7d2 <tcp_zero_window_probe+0x22>
 800e7c4:	4b4c      	ldr	r3, [pc, #304]	; (800e8f8 <tcp_zero_window_probe+0x148>)
 800e7c6:	f640 024f 	movw	r2, #2127	; 0x84f
 800e7ca:	494c      	ldr	r1, [pc, #304]	; (800e8fc <tcp_zero_window_probe+0x14c>)
 800e7cc:	484c      	ldr	r0, [pc, #304]	; (800e900 <tcp_zero_window_probe+0x150>)
 800e7ce:	f002 ffdd 	bl	801178c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7d6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e7d8:	6a3b      	ldr	r3, [r7, #32]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d101      	bne.n	800e7e2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	e086      	b.n	800e8f0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e7e8:	2bff      	cmp	r3, #255	; 0xff
 800e7ea:	d007      	beq.n	800e7fc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	b2da      	uxtb	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e7fc:	6a3b      	ldr	r3, [r7, #32]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	899b      	ldrh	r3, [r3, #12]
 800e802:	b29b      	uxth	r3, r3
 800e804:	4618      	mov	r0, r3
 800e806:	f7f9 f8b3 	bl	8007970 <lwip_htons>
 800e80a:	4603      	mov	r3, r0
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	f003 0301 	and.w	r3, r3, #1
 800e812:	2b00      	cmp	r3, #0
 800e814:	d005      	beq.n	800e822 <tcp_zero_window_probe+0x72>
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	891b      	ldrh	r3, [r3, #8]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d101      	bne.n	800e822 <tcp_zero_window_probe+0x72>
 800e81e:	2301      	movs	r3, #1
 800e820:	e000      	b.n	800e824 <tcp_zero_window_probe+0x74>
 800e822:	2300      	movs	r3, #0
 800e824:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e826:	7ffb      	ldrb	r3, [r7, #31]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	bf0c      	ite	eq
 800e82c:	2301      	moveq	r3, #1
 800e82e:	2300      	movne	r3, #0
 800e830:	b2db      	uxtb	r3, r3
 800e832:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e838:	b299      	uxth	r1, r3
 800e83a:	6a3b      	ldr	r3, [r7, #32]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	8bba      	ldrh	r2, [r7, #28]
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7ff fdf8 	bl	800e438 <tcp_output_alloc_header>
 800e848:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d102      	bne.n	800e856 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e850:	f04f 33ff 	mov.w	r3, #4294967295
 800e854:	e04c      	b.n	800e8f0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e85c:	7ffb      	ldrb	r3, [r7, #31]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d011      	beq.n	800e886 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	899b      	ldrh	r3, [r3, #12]
 800e866:	b29b      	uxth	r3, r3
 800e868:	b21b      	sxth	r3, r3
 800e86a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e86e:	b21c      	sxth	r4, r3
 800e870:	2011      	movs	r0, #17
 800e872:	f7f9 f87d 	bl	8007970 <lwip_htons>
 800e876:	4603      	mov	r3, r0
 800e878:	b21b      	sxth	r3, r3
 800e87a:	4323      	orrs	r3, r4
 800e87c:	b21b      	sxth	r3, r3
 800e87e:	b29a      	uxth	r2, r3
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	819a      	strh	r2, [r3, #12]
 800e884:	e010      	b.n	800e8a8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	3314      	adds	r3, #20
 800e88c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e88e:	6a3b      	ldr	r3, [r7, #32]
 800e890:	6858      	ldr	r0, [r3, #4]
 800e892:	6a3b      	ldr	r3, [r7, #32]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	891a      	ldrh	r2, [r3, #8]
 800e898:	6a3b      	ldr	r3, [r7, #32]
 800e89a:	891b      	ldrh	r3, [r3, #8]
 800e89c:	1ad3      	subs	r3, r2, r3
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	6939      	ldr	r1, [r7, #16]
 800e8a4:	f7fa fe52 	bl	800954c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	68db      	ldr	r3, [r3, #12]
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7f9 f873 	bl	800799a <lwip_htonl>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	da02      	bge.n	800e8cc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	69b9      	ldr	r1, [r7, #24]
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7ff fded 	bl	800e4b4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8da:	687a      	ldr	r2, [r7, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	69b9      	ldr	r1, [r7, #24]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7ff fe26 	bl	800e534 <tcp_output_control_segment>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e8ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	372c      	adds	r7, #44	; 0x2c
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd90      	pop	{r4, r7, pc}
 800e8f8:	080143f8 	.word	0x080143f8
 800e8fc:	08014bf0 	.word	0x08014bf0
 800e900:	0801444c 	.word	0x0801444c

0800e904 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e90c:	f7fa ff0c 	bl	8009728 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e910:	4b0a      	ldr	r3, [pc, #40]	; (800e93c <tcpip_tcp_timer+0x38>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d103      	bne.n	800e920 <tcpip_tcp_timer+0x1c>
 800e918:	4b09      	ldr	r3, [pc, #36]	; (800e940 <tcpip_tcp_timer+0x3c>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d005      	beq.n	800e92c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e920:	2200      	movs	r2, #0
 800e922:	4908      	ldr	r1, [pc, #32]	; (800e944 <tcpip_tcp_timer+0x40>)
 800e924:	20fa      	movs	r0, #250	; 0xfa
 800e926:	f000 f8f3 	bl	800eb10 <sys_timeout>
 800e92a:	e003      	b.n	800e934 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e92c:	4b06      	ldr	r3, [pc, #24]	; (800e948 <tcpip_tcp_timer+0x44>)
 800e92e:	2200      	movs	r2, #0
 800e930:	601a      	str	r2, [r3, #0]
  }
}
 800e932:	bf00      	nop
 800e934:	bf00      	nop
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	2000803c 	.word	0x2000803c
 800e940:	20008040 	.word	0x20008040
 800e944:	0800e905 	.word	0x0800e905
 800e948:	20008088 	.word	0x20008088

0800e94c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e950:	4b0a      	ldr	r3, [pc, #40]	; (800e97c <tcp_timer_needed+0x30>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d10f      	bne.n	800e978 <tcp_timer_needed+0x2c>
 800e958:	4b09      	ldr	r3, [pc, #36]	; (800e980 <tcp_timer_needed+0x34>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d103      	bne.n	800e968 <tcp_timer_needed+0x1c>
 800e960:	4b08      	ldr	r3, [pc, #32]	; (800e984 <tcp_timer_needed+0x38>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d007      	beq.n	800e978 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e968:	4b04      	ldr	r3, [pc, #16]	; (800e97c <tcp_timer_needed+0x30>)
 800e96a:	2201      	movs	r2, #1
 800e96c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e96e:	2200      	movs	r2, #0
 800e970:	4905      	ldr	r1, [pc, #20]	; (800e988 <tcp_timer_needed+0x3c>)
 800e972:	20fa      	movs	r0, #250	; 0xfa
 800e974:	f000 f8cc 	bl	800eb10 <sys_timeout>
  }
}
 800e978:	bf00      	nop
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	20008088 	.word	0x20008088
 800e980:	2000803c 	.word	0x2000803c
 800e984:	20008040 	.word	0x20008040
 800e988:	0800e905 	.word	0x0800e905

0800e98c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b086      	sub	sp, #24
 800e990:	af00      	add	r7, sp, #0
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	60b9      	str	r1, [r7, #8]
 800e996:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e998:	2006      	movs	r0, #6
 800e99a:	f7f9 fd07 	bl	80083ac <memp_malloc>
 800e99e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d109      	bne.n	800e9ba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d151      	bne.n	800ea50 <sys_timeout_abs+0xc4>
 800e9ac:	4b2a      	ldr	r3, [pc, #168]	; (800ea58 <sys_timeout_abs+0xcc>)
 800e9ae:	22be      	movs	r2, #190	; 0xbe
 800e9b0:	492a      	ldr	r1, [pc, #168]	; (800ea5c <sys_timeout_abs+0xd0>)
 800e9b2:	482b      	ldr	r0, [pc, #172]	; (800ea60 <sys_timeout_abs+0xd4>)
 800e9b4:	f002 feea 	bl	801178c <iprintf>
    return;
 800e9b8:	e04a      	b.n	800ea50 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	68ba      	ldr	r2, [r7, #8]
 800e9c4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e9d2:	4b24      	ldr	r3, [pc, #144]	; (800ea64 <sys_timeout_abs+0xd8>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d103      	bne.n	800e9e2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e9da:	4a22      	ldr	r2, [pc, #136]	; (800ea64 <sys_timeout_abs+0xd8>)
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	6013      	str	r3, [r2, #0]
    return;
 800e9e0:	e037      	b.n	800ea52 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	685a      	ldr	r2, [r3, #4]
 800e9e6:	4b1f      	ldr	r3, [pc, #124]	; (800ea64 <sys_timeout_abs+0xd8>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	0fdb      	lsrs	r3, r3, #31
 800e9f0:	f003 0301 	and.w	r3, r3, #1
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d007      	beq.n	800ea0a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e9fa:	4b1a      	ldr	r3, [pc, #104]	; (800ea64 <sys_timeout_abs+0xd8>)
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ea02:	4a18      	ldr	r2, [pc, #96]	; (800ea64 <sys_timeout_abs+0xd8>)
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	6013      	str	r3, [r2, #0]
 800ea08:	e023      	b.n	800ea52 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ea0a:	4b16      	ldr	r3, [pc, #88]	; (800ea64 <sys_timeout_abs+0xd8>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	617b      	str	r3, [r7, #20]
 800ea10:	e01a      	b.n	800ea48 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00b      	beq.n	800ea32 <sys_timeout_abs+0xa6>
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	685a      	ldr	r2, [r3, #4]
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	1ad3      	subs	r3, r2, r3
 800ea26:	0fdb      	lsrs	r3, r3, #31
 800ea28:	f003 0301 	and.w	r3, r3, #1
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d007      	beq.n	800ea42 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	693a      	ldr	r2, [r7, #16]
 800ea3e:	601a      	str	r2, [r3, #0]
        break;
 800ea40:	e007      	b.n	800ea52 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	617b      	str	r3, [r7, #20]
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1e1      	bne.n	800ea12 <sys_timeout_abs+0x86>
 800ea4e:	e000      	b.n	800ea52 <sys_timeout_abs+0xc6>
    return;
 800ea50:	bf00      	nop
      }
    }
  }
}
 800ea52:	3718      	adds	r7, #24
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	08014c14 	.word	0x08014c14
 800ea5c:	08014c48 	.word	0x08014c48
 800ea60:	08014c88 	.word	0x08014c88
 800ea64:	20008080 	.word	0x20008080

0800ea68 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	4798      	blx	r3

  now = sys_now();
 800ea7a:	f7f8 fd67 	bl	800754c <sys_now>
 800ea7e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	4b0f      	ldr	r3, [pc, #60]	; (800eac4 <lwip_cyclic_timer+0x5c>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4413      	add	r3, r2
 800ea8a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	0fdb      	lsrs	r3, r3, #31
 800ea94:	f003 0301 	and.w	r3, r3, #1
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d009      	beq.n	800eab2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	4907      	ldr	r1, [pc, #28]	; (800eac8 <lwip_cyclic_timer+0x60>)
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7ff ff6e 	bl	800e98c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800eab0:	e004      	b.n	800eabc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	4904      	ldr	r1, [pc, #16]	; (800eac8 <lwip_cyclic_timer+0x60>)
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f7ff ff68 	bl	800e98c <sys_timeout_abs>
}
 800eabc:	bf00      	nop
 800eabe:	3718      	adds	r7, #24
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	20008084 	.word	0x20008084
 800eac8:	0800ea69 	.word	0x0800ea69

0800eacc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ead2:	2301      	movs	r3, #1
 800ead4:	607b      	str	r3, [r7, #4]
 800ead6:	e00e      	b.n	800eaf6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ead8:	4a0b      	ldr	r2, [pc, #44]	; (800eb08 <sys_timeouts_init+0x3c>)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	00db      	lsls	r3, r3, #3
 800eae4:	4a08      	ldr	r2, [pc, #32]	; (800eb08 <sys_timeouts_init+0x3c>)
 800eae6:	4413      	add	r3, r2
 800eae8:	461a      	mov	r2, r3
 800eaea:	4908      	ldr	r1, [pc, #32]	; (800eb0c <sys_timeouts_init+0x40>)
 800eaec:	f000 f810 	bl	800eb10 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	607b      	str	r3, [r7, #4]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d9ed      	bls.n	800ead8 <sys_timeouts_init+0xc>
  }
}
 800eafc:	bf00      	nop
 800eafe:	bf00      	nop
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	08015800 	.word	0x08015800
 800eb0c:	0800ea69 	.word	0x0800ea69

0800eb10 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b086      	sub	sp, #24
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb22:	d306      	bcc.n	800eb32 <sys_timeout+0x22>
 800eb24:	4b0a      	ldr	r3, [pc, #40]	; (800eb50 <sys_timeout+0x40>)
 800eb26:	f240 1229 	movw	r2, #297	; 0x129
 800eb2a:	490a      	ldr	r1, [pc, #40]	; (800eb54 <sys_timeout+0x44>)
 800eb2c:	480a      	ldr	r0, [pc, #40]	; (800eb58 <sys_timeout+0x48>)
 800eb2e:	f002 fe2d 	bl	801178c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800eb32:	f7f8 fd0b 	bl	800754c <sys_now>
 800eb36:	4602      	mov	r2, r0
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	4413      	add	r3, r2
 800eb3c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	68b9      	ldr	r1, [r7, #8]
 800eb42:	6978      	ldr	r0, [r7, #20]
 800eb44:	f7ff ff22 	bl	800e98c <sys_timeout_abs>
#endif
}
 800eb48:	bf00      	nop
 800eb4a:	3718      	adds	r7, #24
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	08014c14 	.word	0x08014c14
 800eb54:	08014cb0 	.word	0x08014cb0
 800eb58:	08014c88 	.word	0x08014c88

0800eb5c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800eb62:	f7f8 fcf3 	bl	800754c <sys_now>
 800eb66:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800eb68:	4b1a      	ldr	r3, [pc, #104]	; (800ebd4 <sys_check_timeouts+0x78>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d001      	beq.n	800eb76 <sys_check_timeouts+0x1a>
 800eb72:	f7f9 ffc7 	bl	8008b04 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800eb76:	4b18      	ldr	r3, [pc, #96]	; (800ebd8 <sys_check_timeouts+0x7c>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d022      	beq.n	800ebc8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	0fdb      	lsrs	r3, r3, #31
 800eb8c:	f003 0301 	and.w	r3, r3, #1
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d11a      	bne.n	800ebcc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a0f      	ldr	r2, [pc, #60]	; (800ebd8 <sys_check_timeouts+0x7c>)
 800eb9c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	4a0b      	ldr	r2, [pc, #44]	; (800ebdc <sys_check_timeouts+0x80>)
 800ebb0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ebb2:	68b9      	ldr	r1, [r7, #8]
 800ebb4:	2006      	movs	r0, #6
 800ebb6:	f7f9 fc69 	bl	800848c <memp_free>
    if (handler != NULL) {
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d0d3      	beq.n	800eb68 <sys_check_timeouts+0xc>
      handler(arg);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6838      	ldr	r0, [r7, #0]
 800ebc4:	4798      	blx	r3
  do {
 800ebc6:	e7cf      	b.n	800eb68 <sys_check_timeouts+0xc>
      return;
 800ebc8:	bf00      	nop
 800ebca:	e000      	b.n	800ebce <sys_check_timeouts+0x72>
      return;
 800ebcc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	2000802d 	.word	0x2000802d
 800ebd8:	20008080 	.word	0x20008080
 800ebdc:	20008084 	.word	0x20008084

0800ebe0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ebe4:	f002 fdea 	bl	80117bc <rand>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	4b01      	ldr	r3, [pc, #4]	; (800ec00 <udp_init+0x20>)
 800ebfa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ebfc:	bf00      	nop
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	200000b8 	.word	0x200000b8

0800ec04 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d105      	bne.n	800ec24 <udp_input_local_match+0x20>
 800ec18:	4b27      	ldr	r3, [pc, #156]	; (800ecb8 <udp_input_local_match+0xb4>)
 800ec1a:	2287      	movs	r2, #135	; 0x87
 800ec1c:	4927      	ldr	r1, [pc, #156]	; (800ecbc <udp_input_local_match+0xb8>)
 800ec1e:	4828      	ldr	r0, [pc, #160]	; (800ecc0 <udp_input_local_match+0xbc>)
 800ec20:	f002 fdb4 	bl	801178c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d105      	bne.n	800ec36 <udp_input_local_match+0x32>
 800ec2a:	4b23      	ldr	r3, [pc, #140]	; (800ecb8 <udp_input_local_match+0xb4>)
 800ec2c:	2288      	movs	r2, #136	; 0x88
 800ec2e:	4925      	ldr	r1, [pc, #148]	; (800ecc4 <udp_input_local_match+0xc0>)
 800ec30:	4823      	ldr	r0, [pc, #140]	; (800ecc0 <udp_input_local_match+0xbc>)
 800ec32:	f002 fdab 	bl	801178c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	7a1b      	ldrb	r3, [r3, #8]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00b      	beq.n	800ec56 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	7a1a      	ldrb	r2, [r3, #8]
 800ec42:	4b21      	ldr	r3, [pc, #132]	; (800ecc8 <udp_input_local_match+0xc4>)
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d001      	beq.n	800ec56 <udp_input_local_match+0x52>
    return 0;
 800ec52:	2300      	movs	r3, #0
 800ec54:	e02b      	b.n	800ecae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ec56:	79fb      	ldrb	r3, [r7, #7]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d018      	beq.n	800ec8e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d013      	beq.n	800ec8a <udp_input_local_match+0x86>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00f      	beq.n	800ec8a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ec6a:	4b17      	ldr	r3, [pc, #92]	; (800ecc8 <udp_input_local_match+0xc4>)
 800ec6c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec72:	d00a      	beq.n	800ec8a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	4b13      	ldr	r3, [pc, #76]	; (800ecc8 <udp_input_local_match+0xc4>)
 800ec7a:	695b      	ldr	r3, [r3, #20]
 800ec7c:	405a      	eors	r2, r3
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	3308      	adds	r3, #8
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d110      	bne.n	800ecac <udp_input_local_match+0xa8>
          return 1;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e00f      	b.n	800ecae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d009      	beq.n	800eca8 <udp_input_local_match+0xa4>
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d005      	beq.n	800eca8 <udp_input_local_match+0xa4>
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	4b09      	ldr	r3, [pc, #36]	; (800ecc8 <udp_input_local_match+0xc4>)
 800eca2:	695b      	ldr	r3, [r3, #20]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d101      	bne.n	800ecac <udp_input_local_match+0xa8>
        return 1;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e000      	b.n	800ecae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ecac:	2300      	movs	r3, #0
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	08014cfc 	.word	0x08014cfc
 800ecbc:	08014d2c 	.word	0x08014d2c
 800ecc0:	08014d50 	.word	0x08014d50
 800ecc4:	08014d78 	.word	0x08014d78
 800ecc8:	20005114 	.word	0x20005114

0800eccc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800eccc:	b590      	push	{r4, r7, lr}
 800ecce:	b08d      	sub	sp, #52	; 0x34
 800ecd0:	af02      	add	r7, sp, #8
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d105      	bne.n	800ecec <udp_input+0x20>
 800ece0:	4b7c      	ldr	r3, [pc, #496]	; (800eed4 <udp_input+0x208>)
 800ece2:	22cf      	movs	r2, #207	; 0xcf
 800ece4:	497c      	ldr	r1, [pc, #496]	; (800eed8 <udp_input+0x20c>)
 800ece6:	487d      	ldr	r0, [pc, #500]	; (800eedc <udp_input+0x210>)
 800ece8:	f002 fd50 	bl	801178c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d105      	bne.n	800ecfe <udp_input+0x32>
 800ecf2:	4b78      	ldr	r3, [pc, #480]	; (800eed4 <udp_input+0x208>)
 800ecf4:	22d0      	movs	r2, #208	; 0xd0
 800ecf6:	497a      	ldr	r1, [pc, #488]	; (800eee0 <udp_input+0x214>)
 800ecf8:	4878      	ldr	r0, [pc, #480]	; (800eedc <udp_input+0x210>)
 800ecfa:	f002 fd47 	bl	801178c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	895b      	ldrh	r3, [r3, #10]
 800ed02:	2b07      	cmp	r3, #7
 800ed04:	d803      	bhi.n	800ed0e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f7fa fa36 	bl	8009178 <pbuf_free>
    goto end;
 800ed0c:	e0de      	b.n	800eecc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ed14:	4b73      	ldr	r3, [pc, #460]	; (800eee4 <udp_input+0x218>)
 800ed16:	695b      	ldr	r3, [r3, #20]
 800ed18:	4a72      	ldr	r2, [pc, #456]	; (800eee4 <udp_input+0x218>)
 800ed1a:	6812      	ldr	r2, [r2, #0]
 800ed1c:	4611      	mov	r1, r2
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f001 fc92 	bl	8010648 <ip4_addr_isbroadcast_u32>
 800ed24:	4603      	mov	r3, r0
 800ed26:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	881b      	ldrh	r3, [r3, #0]
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7f8 fe1e 	bl	8007970 <lwip_htons>
 800ed34:	4603      	mov	r3, r0
 800ed36:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	885b      	ldrh	r3, [r3, #2]
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7f8 fe16 	bl	8007970 <lwip_htons>
 800ed44:	4603      	mov	r3, r0
 800ed46:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ed50:	2300      	movs	r3, #0
 800ed52:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed54:	4b64      	ldr	r3, [pc, #400]	; (800eee8 <udp_input+0x21c>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	627b      	str	r3, [r7, #36]	; 0x24
 800ed5a:	e054      	b.n	800ee06 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ed5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5e:	8a5b      	ldrh	r3, [r3, #18]
 800ed60:	89fa      	ldrh	r2, [r7, #14]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d14a      	bne.n	800edfc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ed66:	7cfb      	ldrb	r3, [r7, #19]
 800ed68:	461a      	mov	r2, r3
 800ed6a:	6839      	ldr	r1, [r7, #0]
 800ed6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed6e:	f7ff ff49 	bl	800ec04 <udp_input_local_match>
 800ed72:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d041      	beq.n	800edfc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ed78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7a:	7c1b      	ldrb	r3, [r3, #16]
 800ed7c:	f003 0304 	and.w	r3, r3, #4
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d11d      	bne.n	800edc0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d102      	bne.n	800ed90 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ed8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8c:	61fb      	str	r3, [r7, #28]
 800ed8e:	e017      	b.n	800edc0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ed90:	7cfb      	ldrb	r3, [r7, #19]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d014      	beq.n	800edc0 <udp_input+0xf4>
 800ed96:	4b53      	ldr	r3, [pc, #332]	; (800eee4 <udp_input+0x218>)
 800ed98:	695b      	ldr	r3, [r3, #20]
 800ed9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9e:	d10f      	bne.n	800edc0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	3304      	adds	r3, #4
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d008      	beq.n	800edc0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800edae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	3304      	adds	r3, #4
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d101      	bne.n	800edc0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc2:	8a9b      	ldrh	r3, [r3, #20]
 800edc4:	8a3a      	ldrh	r2, [r7, #16]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d118      	bne.n	800edfc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800edca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edcc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d005      	beq.n	800edde <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800edd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd4:	685a      	ldr	r2, [r3, #4]
 800edd6:	4b43      	ldr	r3, [pc, #268]	; (800eee4 <udp_input+0x218>)
 800edd8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800edda:	429a      	cmp	r2, r3
 800eddc:	d10e      	bne.n	800edfc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800edde:	6a3b      	ldr	r3, [r7, #32]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d014      	beq.n	800ee0e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ede4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede6:	68da      	ldr	r2, [r3, #12]
 800ede8:	6a3b      	ldr	r3, [r7, #32]
 800edea:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800edec:	4b3e      	ldr	r3, [pc, #248]	; (800eee8 <udp_input+0x21c>)
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800edf4:	4a3c      	ldr	r2, [pc, #240]	; (800eee8 <udp_input+0x21c>)
 800edf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800edfa:	e008      	b.n	800ee0e <udp_input+0x142>
      }
    }

    prev = pcb;
 800edfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	627b      	str	r3, [r7, #36]	; 0x24
 800ee06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d1a7      	bne.n	800ed5c <udp_input+0x90>
 800ee0c:	e000      	b.n	800ee10 <udp_input+0x144>
        break;
 800ee0e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d101      	bne.n	800ee1a <udp_input+0x14e>
    pcb = uncon_pcb;
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d002      	beq.n	800ee26 <udp_input+0x15a>
    for_us = 1;
 800ee20:	2301      	movs	r3, #1
 800ee22:	76fb      	strb	r3, [r7, #27]
 800ee24:	e00a      	b.n	800ee3c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	3304      	adds	r3, #4
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	4b2d      	ldr	r3, [pc, #180]	; (800eee4 <udp_input+0x218>)
 800ee2e:	695b      	ldr	r3, [r3, #20]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	bf0c      	ite	eq
 800ee34:	2301      	moveq	r3, #1
 800ee36:	2300      	movne	r3, #0
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ee3c:	7efb      	ldrb	r3, [r7, #27]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d041      	beq.n	800eec6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ee42:	2108      	movs	r1, #8
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f7fa f911 	bl	800906c <pbuf_remove_header>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00a      	beq.n	800ee66 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ee50:	4b20      	ldr	r3, [pc, #128]	; (800eed4 <udp_input+0x208>)
 800ee52:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ee56:	4925      	ldr	r1, [pc, #148]	; (800eeec <udp_input+0x220>)
 800ee58:	4820      	ldr	r0, [pc, #128]	; (800eedc <udp_input+0x210>)
 800ee5a:	f002 fc97 	bl	801178c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7fa f98a 	bl	8009178 <pbuf_free>
      goto end;
 800ee64:	e032      	b.n	800eecc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ee66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d012      	beq.n	800ee92 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00a      	beq.n	800ee8a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ee74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee76:	699c      	ldr	r4, [r3, #24]
 800ee78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7a:	69d8      	ldr	r0, [r3, #28]
 800ee7c:	8a3b      	ldrh	r3, [r7, #16]
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	4b1b      	ldr	r3, [pc, #108]	; (800eef0 <udp_input+0x224>)
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee86:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ee88:	e021      	b.n	800eece <udp_input+0x202>
        pbuf_free(p);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7fa f974 	bl	8009178 <pbuf_free>
        goto end;
 800ee90:	e01c      	b.n	800eecc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ee92:	7cfb      	ldrb	r3, [r7, #19]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d112      	bne.n	800eebe <udp_input+0x1f2>
 800ee98:	4b12      	ldr	r3, [pc, #72]	; (800eee4 <udp_input+0x218>)
 800ee9a:	695b      	ldr	r3, [r3, #20]
 800ee9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eea0:	2be0      	cmp	r3, #224	; 0xe0
 800eea2:	d00c      	beq.n	800eebe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800eea4:	4b0f      	ldr	r3, [pc, #60]	; (800eee4 <udp_input+0x218>)
 800eea6:	899b      	ldrh	r3, [r3, #12]
 800eea8:	3308      	adds	r3, #8
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	b21b      	sxth	r3, r3
 800eeae:	4619      	mov	r1, r3
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7fa f94e 	bl	8009152 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800eeb6:	2103      	movs	r1, #3
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f001 f8a5 	bl	8010008 <icmp_dest_unreach>
      pbuf_free(p);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7fa f95a 	bl	8009178 <pbuf_free>
  return;
 800eec4:	e003      	b.n	800eece <udp_input+0x202>
    pbuf_free(p);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7fa f956 	bl	8009178 <pbuf_free>
  return;
 800eecc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800eece:	372c      	adds	r7, #44	; 0x2c
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd90      	pop	{r4, r7, pc}
 800eed4:	08014cfc 	.word	0x08014cfc
 800eed8:	08014da0 	.word	0x08014da0
 800eedc:	08014d50 	.word	0x08014d50
 800eee0:	08014db8 	.word	0x08014db8
 800eee4:	20005114 	.word	0x20005114
 800eee8:	2000808c 	.word	0x2000808c
 800eeec:	08014dd4 	.word	0x08014dd4
 800eef0:	20005124 	.word	0x20005124

0800eef4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d01e      	beq.n	800ef42 <udp_netif_ip_addr_changed+0x4e>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d01a      	beq.n	800ef42 <udp_netif_ip_addr_changed+0x4e>
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d017      	beq.n	800ef42 <udp_netif_ip_addr_changed+0x4e>
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d013      	beq.n	800ef42 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ef1a:	4b0d      	ldr	r3, [pc, #52]	; (800ef50 <udp_netif_ip_addr_changed+0x5c>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	60fb      	str	r3, [r7, #12]
 800ef20:	e00c      	b.n	800ef3c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d103      	bne.n	800ef36 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	60fb      	str	r3, [r7, #12]
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d1ef      	bne.n	800ef22 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ef42:	bf00      	nop
 800ef44:	3714      	adds	r7, #20
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop
 800ef50:	2000808c 	.word	0x2000808c

0800ef54 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ef5c:	4915      	ldr	r1, [pc, #84]	; (800efb4 <etharp_free_entry+0x60>)
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	4613      	mov	r3, r2
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	4413      	add	r3, r2
 800ef66:	00db      	lsls	r3, r3, #3
 800ef68:	440b      	add	r3, r1
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d013      	beq.n	800ef98 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ef70:	4910      	ldr	r1, [pc, #64]	; (800efb4 <etharp_free_entry+0x60>)
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	4613      	mov	r3, r2
 800ef76:	005b      	lsls	r3, r3, #1
 800ef78:	4413      	add	r3, r2
 800ef7a:	00db      	lsls	r3, r3, #3
 800ef7c:	440b      	add	r3, r1
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7fa f8f9 	bl	8009178 <pbuf_free>
    arp_table[i].q = NULL;
 800ef86:	490b      	ldr	r1, [pc, #44]	; (800efb4 <etharp_free_entry+0x60>)
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	4413      	add	r3, r2
 800ef90:	00db      	lsls	r3, r3, #3
 800ef92:	440b      	add	r3, r1
 800ef94:	2200      	movs	r2, #0
 800ef96:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ef98:	4906      	ldr	r1, [pc, #24]	; (800efb4 <etharp_free_entry+0x60>)
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	005b      	lsls	r3, r3, #1
 800efa0:	4413      	add	r3, r2
 800efa2:	00db      	lsls	r3, r3, #3
 800efa4:	440b      	add	r3, r1
 800efa6:	3314      	adds	r3, #20
 800efa8:	2200      	movs	r2, #0
 800efaa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800efac:	bf00      	nop
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	20008090 	.word	0x20008090

0800efb8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800efbe:	2300      	movs	r3, #0
 800efc0:	607b      	str	r3, [r7, #4]
 800efc2:	e096      	b.n	800f0f2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800efc4:	494f      	ldr	r1, [pc, #316]	; (800f104 <etharp_tmr+0x14c>)
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	4613      	mov	r3, r2
 800efca:	005b      	lsls	r3, r3, #1
 800efcc:	4413      	add	r3, r2
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	440b      	add	r3, r1
 800efd2:	3314      	adds	r3, #20
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800efd8:	78fb      	ldrb	r3, [r7, #3]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 8086 	beq.w	800f0ec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800efe0:	4948      	ldr	r1, [pc, #288]	; (800f104 <etharp_tmr+0x14c>)
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	4613      	mov	r3, r2
 800efe6:	005b      	lsls	r3, r3, #1
 800efe8:	4413      	add	r3, r2
 800efea:	00db      	lsls	r3, r3, #3
 800efec:	440b      	add	r3, r1
 800efee:	3312      	adds	r3, #18
 800eff0:	881b      	ldrh	r3, [r3, #0]
 800eff2:	3301      	adds	r3, #1
 800eff4:	b298      	uxth	r0, r3
 800eff6:	4943      	ldr	r1, [pc, #268]	; (800f104 <etharp_tmr+0x14c>)
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	4613      	mov	r3, r2
 800effc:	005b      	lsls	r3, r3, #1
 800effe:	4413      	add	r3, r2
 800f000:	00db      	lsls	r3, r3, #3
 800f002:	440b      	add	r3, r1
 800f004:	3312      	adds	r3, #18
 800f006:	4602      	mov	r2, r0
 800f008:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f00a:	493e      	ldr	r1, [pc, #248]	; (800f104 <etharp_tmr+0x14c>)
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	4613      	mov	r3, r2
 800f010:	005b      	lsls	r3, r3, #1
 800f012:	4413      	add	r3, r2
 800f014:	00db      	lsls	r3, r3, #3
 800f016:	440b      	add	r3, r1
 800f018:	3312      	adds	r3, #18
 800f01a:	881b      	ldrh	r3, [r3, #0]
 800f01c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f020:	d215      	bcs.n	800f04e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f022:	4938      	ldr	r1, [pc, #224]	; (800f104 <etharp_tmr+0x14c>)
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	4613      	mov	r3, r2
 800f028:	005b      	lsls	r3, r3, #1
 800f02a:	4413      	add	r3, r2
 800f02c:	00db      	lsls	r3, r3, #3
 800f02e:	440b      	add	r3, r1
 800f030:	3314      	adds	r3, #20
 800f032:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f034:	2b01      	cmp	r3, #1
 800f036:	d10e      	bne.n	800f056 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f038:	4932      	ldr	r1, [pc, #200]	; (800f104 <etharp_tmr+0x14c>)
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	4613      	mov	r3, r2
 800f03e:	005b      	lsls	r3, r3, #1
 800f040:	4413      	add	r3, r2
 800f042:	00db      	lsls	r3, r3, #3
 800f044:	440b      	add	r3, r1
 800f046:	3312      	adds	r3, #18
 800f048:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f04a:	2b04      	cmp	r3, #4
 800f04c:	d903      	bls.n	800f056 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f7ff ff80 	bl	800ef54 <etharp_free_entry>
 800f054:	e04a      	b.n	800f0ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f056:	492b      	ldr	r1, [pc, #172]	; (800f104 <etharp_tmr+0x14c>)
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	4613      	mov	r3, r2
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	4413      	add	r3, r2
 800f060:	00db      	lsls	r3, r3, #3
 800f062:	440b      	add	r3, r1
 800f064:	3314      	adds	r3, #20
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	2b03      	cmp	r3, #3
 800f06a:	d10a      	bne.n	800f082 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f06c:	4925      	ldr	r1, [pc, #148]	; (800f104 <etharp_tmr+0x14c>)
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	4613      	mov	r3, r2
 800f072:	005b      	lsls	r3, r3, #1
 800f074:	4413      	add	r3, r2
 800f076:	00db      	lsls	r3, r3, #3
 800f078:	440b      	add	r3, r1
 800f07a:	3314      	adds	r3, #20
 800f07c:	2204      	movs	r2, #4
 800f07e:	701a      	strb	r2, [r3, #0]
 800f080:	e034      	b.n	800f0ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f082:	4920      	ldr	r1, [pc, #128]	; (800f104 <etharp_tmr+0x14c>)
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	4613      	mov	r3, r2
 800f088:	005b      	lsls	r3, r3, #1
 800f08a:	4413      	add	r3, r2
 800f08c:	00db      	lsls	r3, r3, #3
 800f08e:	440b      	add	r3, r1
 800f090:	3314      	adds	r3, #20
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	2b04      	cmp	r3, #4
 800f096:	d10a      	bne.n	800f0ae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f098:	491a      	ldr	r1, [pc, #104]	; (800f104 <etharp_tmr+0x14c>)
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	4613      	mov	r3, r2
 800f09e:	005b      	lsls	r3, r3, #1
 800f0a0:	4413      	add	r3, r2
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	440b      	add	r3, r1
 800f0a6:	3314      	adds	r3, #20
 800f0a8:	2202      	movs	r2, #2
 800f0aa:	701a      	strb	r2, [r3, #0]
 800f0ac:	e01e      	b.n	800f0ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f0ae:	4915      	ldr	r1, [pc, #84]	; (800f104 <etharp_tmr+0x14c>)
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	4413      	add	r3, r2
 800f0b8:	00db      	lsls	r3, r3, #3
 800f0ba:	440b      	add	r3, r1
 800f0bc:	3314      	adds	r3, #20
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d113      	bne.n	800f0ec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f0c4:	490f      	ldr	r1, [pc, #60]	; (800f104 <etharp_tmr+0x14c>)
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	4613      	mov	r3, r2
 800f0ca:	005b      	lsls	r3, r3, #1
 800f0cc:	4413      	add	r3, r2
 800f0ce:	00db      	lsls	r3, r3, #3
 800f0d0:	440b      	add	r3, r1
 800f0d2:	3308      	adds	r3, #8
 800f0d4:	6818      	ldr	r0, [r3, #0]
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	4613      	mov	r3, r2
 800f0da:	005b      	lsls	r3, r3, #1
 800f0dc:	4413      	add	r3, r2
 800f0de:	00db      	lsls	r3, r3, #3
 800f0e0:	4a08      	ldr	r2, [pc, #32]	; (800f104 <etharp_tmr+0x14c>)
 800f0e2:	4413      	add	r3, r2
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	f000 fe6e 	bl	800fdc8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	607b      	str	r3, [r7, #4]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2b09      	cmp	r3, #9
 800f0f6:	f77f af65 	ble.w	800efc4 <etharp_tmr+0xc>
      }
    }
  }
}
 800f0fa:	bf00      	nop
 800f0fc:	bf00      	nop
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	20008090 	.word	0x20008090

0800f108 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b08a      	sub	sp, #40	; 0x28
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	460b      	mov	r3, r1
 800f112:	607a      	str	r2, [r7, #4]
 800f114:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f116:	230a      	movs	r3, #10
 800f118:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f11a:	230a      	movs	r3, #10
 800f11c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f11e:	230a      	movs	r3, #10
 800f120:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f122:	2300      	movs	r3, #0
 800f124:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f126:	230a      	movs	r3, #10
 800f128:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	83bb      	strh	r3, [r7, #28]
 800f12e:	2300      	movs	r3, #0
 800f130:	837b      	strh	r3, [r7, #26]
 800f132:	2300      	movs	r3, #0
 800f134:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f136:	2300      	movs	r3, #0
 800f138:	843b      	strh	r3, [r7, #32]
 800f13a:	e0ae      	b.n	800f29a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f13c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f140:	49a6      	ldr	r1, [pc, #664]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f142:	4613      	mov	r3, r2
 800f144:	005b      	lsls	r3, r3, #1
 800f146:	4413      	add	r3, r2
 800f148:	00db      	lsls	r3, r3, #3
 800f14a:	440b      	add	r3, r1
 800f14c:	3314      	adds	r3, #20
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f152:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f156:	2b0a      	cmp	r3, #10
 800f158:	d105      	bne.n	800f166 <etharp_find_entry+0x5e>
 800f15a:	7dfb      	ldrb	r3, [r7, #23]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d102      	bne.n	800f166 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f160:	8c3b      	ldrh	r3, [r7, #32]
 800f162:	847b      	strh	r3, [r7, #34]	; 0x22
 800f164:	e095      	b.n	800f292 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f166:	7dfb      	ldrb	r3, [r7, #23]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f000 8092 	beq.w	800f292 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f16e:	7dfb      	ldrb	r3, [r7, #23]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d009      	beq.n	800f188 <etharp_find_entry+0x80>
 800f174:	7dfb      	ldrb	r3, [r7, #23]
 800f176:	2b01      	cmp	r3, #1
 800f178:	d806      	bhi.n	800f188 <etharp_find_entry+0x80>
 800f17a:	4b99      	ldr	r3, [pc, #612]	; (800f3e0 <etharp_find_entry+0x2d8>)
 800f17c:	f240 1223 	movw	r2, #291	; 0x123
 800f180:	4998      	ldr	r1, [pc, #608]	; (800f3e4 <etharp_find_entry+0x2dc>)
 800f182:	4899      	ldr	r0, [pc, #612]	; (800f3e8 <etharp_find_entry+0x2e0>)
 800f184:	f002 fb02 	bl	801178c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d020      	beq.n	800f1d0 <etharp_find_entry+0xc8>
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6819      	ldr	r1, [r3, #0]
 800f192:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f196:	4891      	ldr	r0, [pc, #580]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f198:	4613      	mov	r3, r2
 800f19a:	005b      	lsls	r3, r3, #1
 800f19c:	4413      	add	r3, r2
 800f19e:	00db      	lsls	r3, r3, #3
 800f1a0:	4403      	add	r3, r0
 800f1a2:	3304      	adds	r3, #4
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4299      	cmp	r1, r3
 800f1a8:	d112      	bne.n	800f1d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d00c      	beq.n	800f1ca <etharp_find_entry+0xc2>
 800f1b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1b4:	4989      	ldr	r1, [pc, #548]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	005b      	lsls	r3, r3, #1
 800f1ba:	4413      	add	r3, r2
 800f1bc:	00db      	lsls	r3, r3, #3
 800f1be:	440b      	add	r3, r1
 800f1c0:	3308      	adds	r3, #8
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d102      	bne.n	800f1d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f1ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f1ce:	e100      	b.n	800f3d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f1d0:	7dfb      	ldrb	r3, [r7, #23]
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d140      	bne.n	800f258 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f1d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1da:	4980      	ldr	r1, [pc, #512]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f1dc:	4613      	mov	r3, r2
 800f1de:	005b      	lsls	r3, r3, #1
 800f1e0:	4413      	add	r3, r2
 800f1e2:	00db      	lsls	r3, r3, #3
 800f1e4:	440b      	add	r3, r1
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d01a      	beq.n	800f222 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f1ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1f0:	497a      	ldr	r1, [pc, #488]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	005b      	lsls	r3, r3, #1
 800f1f6:	4413      	add	r3, r2
 800f1f8:	00db      	lsls	r3, r3, #3
 800f1fa:	440b      	add	r3, r1
 800f1fc:	3312      	adds	r3, #18
 800f1fe:	881b      	ldrh	r3, [r3, #0]
 800f200:	8bba      	ldrh	r2, [r7, #28]
 800f202:	429a      	cmp	r2, r3
 800f204:	d845      	bhi.n	800f292 <etharp_find_entry+0x18a>
            old_queue = i;
 800f206:	8c3b      	ldrh	r3, [r7, #32]
 800f208:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f20a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f20e:	4973      	ldr	r1, [pc, #460]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f210:	4613      	mov	r3, r2
 800f212:	005b      	lsls	r3, r3, #1
 800f214:	4413      	add	r3, r2
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	440b      	add	r3, r1
 800f21a:	3312      	adds	r3, #18
 800f21c:	881b      	ldrh	r3, [r3, #0]
 800f21e:	83bb      	strh	r3, [r7, #28]
 800f220:	e037      	b.n	800f292 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f222:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f226:	496d      	ldr	r1, [pc, #436]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f228:	4613      	mov	r3, r2
 800f22a:	005b      	lsls	r3, r3, #1
 800f22c:	4413      	add	r3, r2
 800f22e:	00db      	lsls	r3, r3, #3
 800f230:	440b      	add	r3, r1
 800f232:	3312      	adds	r3, #18
 800f234:	881b      	ldrh	r3, [r3, #0]
 800f236:	8b7a      	ldrh	r2, [r7, #26]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d82a      	bhi.n	800f292 <etharp_find_entry+0x18a>
            old_pending = i;
 800f23c:	8c3b      	ldrh	r3, [r7, #32]
 800f23e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f240:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f244:	4965      	ldr	r1, [pc, #404]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f246:	4613      	mov	r3, r2
 800f248:	005b      	lsls	r3, r3, #1
 800f24a:	4413      	add	r3, r2
 800f24c:	00db      	lsls	r3, r3, #3
 800f24e:	440b      	add	r3, r1
 800f250:	3312      	adds	r3, #18
 800f252:	881b      	ldrh	r3, [r3, #0]
 800f254:	837b      	strh	r3, [r7, #26]
 800f256:	e01c      	b.n	800f292 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f258:	7dfb      	ldrb	r3, [r7, #23]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d919      	bls.n	800f292 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f25e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f262:	495e      	ldr	r1, [pc, #376]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f264:	4613      	mov	r3, r2
 800f266:	005b      	lsls	r3, r3, #1
 800f268:	4413      	add	r3, r2
 800f26a:	00db      	lsls	r3, r3, #3
 800f26c:	440b      	add	r3, r1
 800f26e:	3312      	adds	r3, #18
 800f270:	881b      	ldrh	r3, [r3, #0]
 800f272:	8b3a      	ldrh	r2, [r7, #24]
 800f274:	429a      	cmp	r2, r3
 800f276:	d80c      	bhi.n	800f292 <etharp_find_entry+0x18a>
            old_stable = i;
 800f278:	8c3b      	ldrh	r3, [r7, #32]
 800f27a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f27c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f280:	4956      	ldr	r1, [pc, #344]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f282:	4613      	mov	r3, r2
 800f284:	005b      	lsls	r3, r3, #1
 800f286:	4413      	add	r3, r2
 800f288:	00db      	lsls	r3, r3, #3
 800f28a:	440b      	add	r3, r1
 800f28c:	3312      	adds	r3, #18
 800f28e:	881b      	ldrh	r3, [r3, #0]
 800f290:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f292:	8c3b      	ldrh	r3, [r7, #32]
 800f294:	3301      	adds	r3, #1
 800f296:	b29b      	uxth	r3, r3
 800f298:	843b      	strh	r3, [r7, #32]
 800f29a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f29e:	2b09      	cmp	r3, #9
 800f2a0:	f77f af4c 	ble.w	800f13c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f2a4:	7afb      	ldrb	r3, [r7, #11]
 800f2a6:	f003 0302 	and.w	r3, r3, #2
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d108      	bne.n	800f2c0 <etharp_find_entry+0x1b8>
 800f2ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f2b2:	2b0a      	cmp	r3, #10
 800f2b4:	d107      	bne.n	800f2c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f2b6:	7afb      	ldrb	r3, [r7, #11]
 800f2b8:	f003 0301 	and.w	r3, r3, #1
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d102      	bne.n	800f2c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c4:	e085      	b.n	800f3d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f2c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f2ca:	2b09      	cmp	r3, #9
 800f2cc:	dc02      	bgt.n	800f2d4 <etharp_find_entry+0x1cc>
    i = empty;
 800f2ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2d0:	843b      	strh	r3, [r7, #32]
 800f2d2:	e039      	b.n	800f348 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f2d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f2d8:	2b09      	cmp	r3, #9
 800f2da:	dc14      	bgt.n	800f306 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f2dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f2e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2e4:	493d      	ldr	r1, [pc, #244]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	005b      	lsls	r3, r3, #1
 800f2ea:	4413      	add	r3, r2
 800f2ec:	00db      	lsls	r3, r3, #3
 800f2ee:	440b      	add	r3, r1
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d018      	beq.n	800f328 <etharp_find_entry+0x220>
 800f2f6:	4b3a      	ldr	r3, [pc, #232]	; (800f3e0 <etharp_find_entry+0x2d8>)
 800f2f8:	f240 126d 	movw	r2, #365	; 0x16d
 800f2fc:	493b      	ldr	r1, [pc, #236]	; (800f3ec <etharp_find_entry+0x2e4>)
 800f2fe:	483a      	ldr	r0, [pc, #232]	; (800f3e8 <etharp_find_entry+0x2e0>)
 800f300:	f002 fa44 	bl	801178c <iprintf>
 800f304:	e010      	b.n	800f328 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f306:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f30a:	2b09      	cmp	r3, #9
 800f30c:	dc02      	bgt.n	800f314 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f30e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f310:	843b      	strh	r3, [r7, #32]
 800f312:	e009      	b.n	800f328 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f314:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f318:	2b09      	cmp	r3, #9
 800f31a:	dc02      	bgt.n	800f322 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f31c:	8bfb      	ldrh	r3, [r7, #30]
 800f31e:	843b      	strh	r3, [r7, #32]
 800f320:	e002      	b.n	800f328 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f322:	f04f 33ff 	mov.w	r3, #4294967295
 800f326:	e054      	b.n	800f3d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f328:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f32c:	2b09      	cmp	r3, #9
 800f32e:	dd06      	ble.n	800f33e <etharp_find_entry+0x236>
 800f330:	4b2b      	ldr	r3, [pc, #172]	; (800f3e0 <etharp_find_entry+0x2d8>)
 800f332:	f240 127f 	movw	r2, #383	; 0x17f
 800f336:	492e      	ldr	r1, [pc, #184]	; (800f3f0 <etharp_find_entry+0x2e8>)
 800f338:	482b      	ldr	r0, [pc, #172]	; (800f3e8 <etharp_find_entry+0x2e0>)
 800f33a:	f002 fa27 	bl	801178c <iprintf>
    etharp_free_entry(i);
 800f33e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f342:	4618      	mov	r0, r3
 800f344:	f7ff fe06 	bl	800ef54 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f348:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f34c:	2b09      	cmp	r3, #9
 800f34e:	dd06      	ble.n	800f35e <etharp_find_entry+0x256>
 800f350:	4b23      	ldr	r3, [pc, #140]	; (800f3e0 <etharp_find_entry+0x2d8>)
 800f352:	f240 1283 	movw	r2, #387	; 0x183
 800f356:	4926      	ldr	r1, [pc, #152]	; (800f3f0 <etharp_find_entry+0x2e8>)
 800f358:	4823      	ldr	r0, [pc, #140]	; (800f3e8 <etharp_find_entry+0x2e0>)
 800f35a:	f002 fa17 	bl	801178c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f35e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f362:	491e      	ldr	r1, [pc, #120]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f364:	4613      	mov	r3, r2
 800f366:	005b      	lsls	r3, r3, #1
 800f368:	4413      	add	r3, r2
 800f36a:	00db      	lsls	r3, r3, #3
 800f36c:	440b      	add	r3, r1
 800f36e:	3314      	adds	r3, #20
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d006      	beq.n	800f384 <etharp_find_entry+0x27c>
 800f376:	4b1a      	ldr	r3, [pc, #104]	; (800f3e0 <etharp_find_entry+0x2d8>)
 800f378:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f37c:	491d      	ldr	r1, [pc, #116]	; (800f3f4 <etharp_find_entry+0x2ec>)
 800f37e:	481a      	ldr	r0, [pc, #104]	; (800f3e8 <etharp_find_entry+0x2e0>)
 800f380:	f002 fa04 	bl	801178c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d00b      	beq.n	800f3a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f38a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6819      	ldr	r1, [r3, #0]
 800f392:	4812      	ldr	r0, [pc, #72]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f394:	4613      	mov	r3, r2
 800f396:	005b      	lsls	r3, r3, #1
 800f398:	4413      	add	r3, r2
 800f39a:	00db      	lsls	r3, r3, #3
 800f39c:	4403      	add	r3, r0
 800f39e:	3304      	adds	r3, #4
 800f3a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f3a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3a6:	490d      	ldr	r1, [pc, #52]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	005b      	lsls	r3, r3, #1
 800f3ac:	4413      	add	r3, r2
 800f3ae:	00db      	lsls	r3, r3, #3
 800f3b0:	440b      	add	r3, r1
 800f3b2:	3312      	adds	r3, #18
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f3b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3bc:	4907      	ldr	r1, [pc, #28]	; (800f3dc <etharp_find_entry+0x2d4>)
 800f3be:	4613      	mov	r3, r2
 800f3c0:	005b      	lsls	r3, r3, #1
 800f3c2:	4413      	add	r3, r2
 800f3c4:	00db      	lsls	r3, r3, #3
 800f3c6:	440b      	add	r3, r1
 800f3c8:	3308      	adds	r3, #8
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f3ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3728      	adds	r7, #40	; 0x28
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	20008090 	.word	0x20008090
 800f3e0:	08015060 	.word	0x08015060
 800f3e4:	08015098 	.word	0x08015098
 800f3e8:	080150d8 	.word	0x080150d8
 800f3ec:	08015100 	.word	0x08015100
 800f3f0:	08015118 	.word	0x08015118
 800f3f4:	0801512c 	.word	0x0801512c

0800f3f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b088      	sub	sp, #32
 800f3fc:	af02      	add	r7, sp, #8
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]
 800f404:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f40c:	2b06      	cmp	r3, #6
 800f40e:	d006      	beq.n	800f41e <etharp_update_arp_entry+0x26>
 800f410:	4b48      	ldr	r3, [pc, #288]	; (800f534 <etharp_update_arp_entry+0x13c>)
 800f412:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f416:	4948      	ldr	r1, [pc, #288]	; (800f538 <etharp_update_arp_entry+0x140>)
 800f418:	4848      	ldr	r0, [pc, #288]	; (800f53c <etharp_update_arp_entry+0x144>)
 800f41a:	f002 f9b7 	bl	801178c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d012      	beq.n	800f44a <etharp_update_arp_entry+0x52>
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00e      	beq.n	800f44a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	68f9      	ldr	r1, [r7, #12]
 800f432:	4618      	mov	r0, r3
 800f434:	f001 f908 	bl	8010648 <ip4_addr_isbroadcast_u32>
 800f438:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d105      	bne.n	800f44a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f446:	2be0      	cmp	r3, #224	; 0xe0
 800f448:	d102      	bne.n	800f450 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f44a:	f06f 030f 	mvn.w	r3, #15
 800f44e:	e06c      	b.n	800f52a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f450:	78fb      	ldrb	r3, [r7, #3]
 800f452:	68fa      	ldr	r2, [r7, #12]
 800f454:	4619      	mov	r1, r3
 800f456:	68b8      	ldr	r0, [r7, #8]
 800f458:	f7ff fe56 	bl	800f108 <etharp_find_entry>
 800f45c:	4603      	mov	r3, r0
 800f45e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f460:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f464:	2b00      	cmp	r3, #0
 800f466:	da02      	bge.n	800f46e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f468:	8afb      	ldrh	r3, [r7, #22]
 800f46a:	b25b      	sxtb	r3, r3
 800f46c:	e05d      	b.n	800f52a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f46e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f472:	4933      	ldr	r1, [pc, #204]	; (800f540 <etharp_update_arp_entry+0x148>)
 800f474:	4613      	mov	r3, r2
 800f476:	005b      	lsls	r3, r3, #1
 800f478:	4413      	add	r3, r2
 800f47a:	00db      	lsls	r3, r3, #3
 800f47c:	440b      	add	r3, r1
 800f47e:	3314      	adds	r3, #20
 800f480:	2202      	movs	r2, #2
 800f482:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f484:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f488:	492d      	ldr	r1, [pc, #180]	; (800f540 <etharp_update_arp_entry+0x148>)
 800f48a:	4613      	mov	r3, r2
 800f48c:	005b      	lsls	r3, r3, #1
 800f48e:	4413      	add	r3, r2
 800f490:	00db      	lsls	r3, r3, #3
 800f492:	440b      	add	r3, r1
 800f494:	3308      	adds	r3, #8
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f49a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	005b      	lsls	r3, r3, #1
 800f4a2:	4413      	add	r3, r2
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	3308      	adds	r3, #8
 800f4a8:	4a25      	ldr	r2, [pc, #148]	; (800f540 <etharp_update_arp_entry+0x148>)
 800f4aa:	4413      	add	r3, r2
 800f4ac:	3304      	adds	r3, #4
 800f4ae:	2206      	movs	r2, #6
 800f4b0:	6879      	ldr	r1, [r7, #4]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f002 f85a 	bl	801156c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f4b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4bc:	4920      	ldr	r1, [pc, #128]	; (800f540 <etharp_update_arp_entry+0x148>)
 800f4be:	4613      	mov	r3, r2
 800f4c0:	005b      	lsls	r3, r3, #1
 800f4c2:	4413      	add	r3, r2
 800f4c4:	00db      	lsls	r3, r3, #3
 800f4c6:	440b      	add	r3, r1
 800f4c8:	3312      	adds	r3, #18
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f4ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4d2:	491b      	ldr	r1, [pc, #108]	; (800f540 <etharp_update_arp_entry+0x148>)
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	005b      	lsls	r3, r3, #1
 800f4d8:	4413      	add	r3, r2
 800f4da:	00db      	lsls	r3, r3, #3
 800f4dc:	440b      	add	r3, r1
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d021      	beq.n	800f528 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f4e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4e8:	4915      	ldr	r1, [pc, #84]	; (800f540 <etharp_update_arp_entry+0x148>)
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	005b      	lsls	r3, r3, #1
 800f4ee:	4413      	add	r3, r2
 800f4f0:	00db      	lsls	r3, r3, #3
 800f4f2:	440b      	add	r3, r1
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f4f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4fc:	4910      	ldr	r1, [pc, #64]	; (800f540 <etharp_update_arp_entry+0x148>)
 800f4fe:	4613      	mov	r3, r2
 800f500:	005b      	lsls	r3, r3, #1
 800f502:	4413      	add	r3, r2
 800f504:	00db      	lsls	r3, r3, #3
 800f506:	440b      	add	r3, r1
 800f508:	2200      	movs	r2, #0
 800f50a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f512:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6939      	ldr	r1, [r7, #16]
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f001 ffa1 	bl	8011464 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f522:	6938      	ldr	r0, [r7, #16]
 800f524:	f7f9 fe28 	bl	8009178 <pbuf_free>
  }
  return ERR_OK;
 800f528:	2300      	movs	r3, #0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3718      	adds	r7, #24
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	08015060 	.word	0x08015060
 800f538:	08015158 	.word	0x08015158
 800f53c:	080150d8 	.word	0x080150d8
 800f540:	20008090 	.word	0x20008090

0800f544 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f54c:	2300      	movs	r3, #0
 800f54e:	60fb      	str	r3, [r7, #12]
 800f550:	e01e      	b.n	800f590 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f552:	4913      	ldr	r1, [pc, #76]	; (800f5a0 <etharp_cleanup_netif+0x5c>)
 800f554:	68fa      	ldr	r2, [r7, #12]
 800f556:	4613      	mov	r3, r2
 800f558:	005b      	lsls	r3, r3, #1
 800f55a:	4413      	add	r3, r2
 800f55c:	00db      	lsls	r3, r3, #3
 800f55e:	440b      	add	r3, r1
 800f560:	3314      	adds	r3, #20
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f566:	7afb      	ldrb	r3, [r7, #11]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d00e      	beq.n	800f58a <etharp_cleanup_netif+0x46>
 800f56c:	490c      	ldr	r1, [pc, #48]	; (800f5a0 <etharp_cleanup_netif+0x5c>)
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	4613      	mov	r3, r2
 800f572:	005b      	lsls	r3, r3, #1
 800f574:	4413      	add	r3, r2
 800f576:	00db      	lsls	r3, r3, #3
 800f578:	440b      	add	r3, r1
 800f57a:	3308      	adds	r3, #8
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	429a      	cmp	r2, r3
 800f582:	d102      	bne.n	800f58a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f7ff fce5 	bl	800ef54 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	3301      	adds	r3, #1
 800f58e:	60fb      	str	r3, [r7, #12]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b09      	cmp	r3, #9
 800f594:	dddd      	ble.n	800f552 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f596:	bf00      	nop
 800f598:	bf00      	nop
 800f59a:	3710      	adds	r7, #16
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	20008090 	.word	0x20008090

0800f5a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f5a4:	b5b0      	push	{r4, r5, r7, lr}
 800f5a6:	b08a      	sub	sp, #40	; 0x28
 800f5a8:	af04      	add	r7, sp, #16
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d107      	bne.n	800f5c4 <etharp_input+0x20>
 800f5b4:	4b3d      	ldr	r3, [pc, #244]	; (800f6ac <etharp_input+0x108>)
 800f5b6:	f240 228a 	movw	r2, #650	; 0x28a
 800f5ba:	493d      	ldr	r1, [pc, #244]	; (800f6b0 <etharp_input+0x10c>)
 800f5bc:	483d      	ldr	r0, [pc, #244]	; (800f6b4 <etharp_input+0x110>)
 800f5be:	f002 f8e5 	bl	801178c <iprintf>
 800f5c2:	e06f      	b.n	800f6a4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	881b      	ldrh	r3, [r3, #0]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5d4:	d10c      	bne.n	800f5f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f5da:	2b06      	cmp	r3, #6
 800f5dc:	d108      	bne.n	800f5f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f5e2:	2b04      	cmp	r3, #4
 800f5e4:	d104      	bne.n	800f5f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	885b      	ldrh	r3, [r3, #2]
 800f5ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f5ec:	2b08      	cmp	r3, #8
 800f5ee:	d003      	beq.n	800f5f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7f9 fdc1 	bl	8009178 <pbuf_free>
    return;
 800f5f6:	e055      	b.n	800f6a4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	330e      	adds	r3, #14
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	3318      	adds	r3, #24
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	3304      	adds	r3, #4
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d102      	bne.n	800f618 <etharp_input+0x74>
    for_us = 0;
 800f612:	2300      	movs	r3, #0
 800f614:	75fb      	strb	r3, [r7, #23]
 800f616:	e009      	b.n	800f62c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f618:	68ba      	ldr	r2, [r7, #8]
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	3304      	adds	r3, #4
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	429a      	cmp	r2, r3
 800f622:	bf0c      	ite	eq
 800f624:	2301      	moveq	r3, #1
 800f626:	2300      	movne	r3, #0
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	f103 0208 	add.w	r2, r3, #8
 800f632:	7dfb      	ldrb	r3, [r7, #23]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d001      	beq.n	800f63c <etharp_input+0x98>
 800f638:	2301      	movs	r3, #1
 800f63a:	e000      	b.n	800f63e <etharp_input+0x9a>
 800f63c:	2302      	movs	r3, #2
 800f63e:	f107 010c 	add.w	r1, r7, #12
 800f642:	6838      	ldr	r0, [r7, #0]
 800f644:	f7ff fed8 	bl	800f3f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	88db      	ldrh	r3, [r3, #6]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f652:	d003      	beq.n	800f65c <etharp_input+0xb8>
 800f654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f658:	d01e      	beq.n	800f698 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f65a:	e020      	b.n	800f69e <etharp_input+0xfa>
      if (for_us) {
 800f65c:	7dfb      	ldrb	r3, [r7, #23]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d01c      	beq.n	800f69c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f678:	693a      	ldr	r2, [r7, #16]
 800f67a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f67c:	2102      	movs	r1, #2
 800f67e:	9103      	str	r1, [sp, #12]
 800f680:	f107 010c 	add.w	r1, r7, #12
 800f684:	9102      	str	r1, [sp, #8]
 800f686:	9201      	str	r2, [sp, #4]
 800f688:	9300      	str	r3, [sp, #0]
 800f68a:	462b      	mov	r3, r5
 800f68c:	4622      	mov	r2, r4
 800f68e:	4601      	mov	r1, r0
 800f690:	6838      	ldr	r0, [r7, #0]
 800f692:	f000 faeb 	bl	800fc6c <etharp_raw>
      break;
 800f696:	e001      	b.n	800f69c <etharp_input+0xf8>
      break;
 800f698:	bf00      	nop
 800f69a:	e000      	b.n	800f69e <etharp_input+0xfa>
      break;
 800f69c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7f9 fd6a 	bl	8009178 <pbuf_free>
}
 800f6a4:	3718      	adds	r7, #24
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bdb0      	pop	{r4, r5, r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	08015060 	.word	0x08015060
 800f6b0:	080151b0 	.word	0x080151b0
 800f6b4:	080150d8 	.word	0x080150d8

0800f6b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b086      	sub	sp, #24
 800f6bc:	af02      	add	r7, sp, #8
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f6c6:	79fa      	ldrb	r2, [r7, #7]
 800f6c8:	4944      	ldr	r1, [pc, #272]	; (800f7dc <etharp_output_to_arp_index+0x124>)
 800f6ca:	4613      	mov	r3, r2
 800f6cc:	005b      	lsls	r3, r3, #1
 800f6ce:	4413      	add	r3, r2
 800f6d0:	00db      	lsls	r3, r3, #3
 800f6d2:	440b      	add	r3, r1
 800f6d4:	3314      	adds	r3, #20
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d806      	bhi.n	800f6ea <etharp_output_to_arp_index+0x32>
 800f6dc:	4b40      	ldr	r3, [pc, #256]	; (800f7e0 <etharp_output_to_arp_index+0x128>)
 800f6de:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f6e2:	4940      	ldr	r1, [pc, #256]	; (800f7e4 <etharp_output_to_arp_index+0x12c>)
 800f6e4:	4840      	ldr	r0, [pc, #256]	; (800f7e8 <etharp_output_to_arp_index+0x130>)
 800f6e6:	f002 f851 	bl	801178c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f6ea:	79fa      	ldrb	r2, [r7, #7]
 800f6ec:	493b      	ldr	r1, [pc, #236]	; (800f7dc <etharp_output_to_arp_index+0x124>)
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	005b      	lsls	r3, r3, #1
 800f6f2:	4413      	add	r3, r2
 800f6f4:	00db      	lsls	r3, r3, #3
 800f6f6:	440b      	add	r3, r1
 800f6f8:	3314      	adds	r3, #20
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	d153      	bne.n	800f7a8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f700:	79fa      	ldrb	r2, [r7, #7]
 800f702:	4936      	ldr	r1, [pc, #216]	; (800f7dc <etharp_output_to_arp_index+0x124>)
 800f704:	4613      	mov	r3, r2
 800f706:	005b      	lsls	r3, r3, #1
 800f708:	4413      	add	r3, r2
 800f70a:	00db      	lsls	r3, r3, #3
 800f70c:	440b      	add	r3, r1
 800f70e:	3312      	adds	r3, #18
 800f710:	881b      	ldrh	r3, [r3, #0]
 800f712:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f716:	d919      	bls.n	800f74c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f718:	79fa      	ldrb	r2, [r7, #7]
 800f71a:	4613      	mov	r3, r2
 800f71c:	005b      	lsls	r3, r3, #1
 800f71e:	4413      	add	r3, r2
 800f720:	00db      	lsls	r3, r3, #3
 800f722:	4a2e      	ldr	r2, [pc, #184]	; (800f7dc <etharp_output_to_arp_index+0x124>)
 800f724:	4413      	add	r3, r2
 800f726:	3304      	adds	r3, #4
 800f728:	4619      	mov	r1, r3
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f000 fb4c 	bl	800fdc8 <etharp_request>
 800f730:	4603      	mov	r3, r0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d138      	bne.n	800f7a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f736:	79fa      	ldrb	r2, [r7, #7]
 800f738:	4928      	ldr	r1, [pc, #160]	; (800f7dc <etharp_output_to_arp_index+0x124>)
 800f73a:	4613      	mov	r3, r2
 800f73c:	005b      	lsls	r3, r3, #1
 800f73e:	4413      	add	r3, r2
 800f740:	00db      	lsls	r3, r3, #3
 800f742:	440b      	add	r3, r1
 800f744:	3314      	adds	r3, #20
 800f746:	2203      	movs	r2, #3
 800f748:	701a      	strb	r2, [r3, #0]
 800f74a:	e02d      	b.n	800f7a8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f74c:	79fa      	ldrb	r2, [r7, #7]
 800f74e:	4923      	ldr	r1, [pc, #140]	; (800f7dc <etharp_output_to_arp_index+0x124>)
 800f750:	4613      	mov	r3, r2
 800f752:	005b      	lsls	r3, r3, #1
 800f754:	4413      	add	r3, r2
 800f756:	00db      	lsls	r3, r3, #3
 800f758:	440b      	add	r3, r1
 800f75a:	3312      	adds	r3, #18
 800f75c:	881b      	ldrh	r3, [r3, #0]
 800f75e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f762:	d321      	bcc.n	800f7a8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f764:	79fa      	ldrb	r2, [r7, #7]
 800f766:	4613      	mov	r3, r2
 800f768:	005b      	lsls	r3, r3, #1
 800f76a:	4413      	add	r3, r2
 800f76c:	00db      	lsls	r3, r3, #3
 800f76e:	4a1b      	ldr	r2, [pc, #108]	; (800f7dc <etharp_output_to_arp_index+0x124>)
 800f770:	4413      	add	r3, r2
 800f772:	1d19      	adds	r1, r3, #4
 800f774:	79fa      	ldrb	r2, [r7, #7]
 800f776:	4613      	mov	r3, r2
 800f778:	005b      	lsls	r3, r3, #1
 800f77a:	4413      	add	r3, r2
 800f77c:	00db      	lsls	r3, r3, #3
 800f77e:	3308      	adds	r3, #8
 800f780:	4a16      	ldr	r2, [pc, #88]	; (800f7dc <etharp_output_to_arp_index+0x124>)
 800f782:	4413      	add	r3, r2
 800f784:	3304      	adds	r3, #4
 800f786:	461a      	mov	r2, r3
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f000 fafb 	bl	800fd84 <etharp_request_dst>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d109      	bne.n	800f7a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f794:	79fa      	ldrb	r2, [r7, #7]
 800f796:	4911      	ldr	r1, [pc, #68]	; (800f7dc <etharp_output_to_arp_index+0x124>)
 800f798:	4613      	mov	r3, r2
 800f79a:	005b      	lsls	r3, r3, #1
 800f79c:	4413      	add	r3, r2
 800f79e:	00db      	lsls	r3, r3, #3
 800f7a0:	440b      	add	r3, r1
 800f7a2:	3314      	adds	r3, #20
 800f7a4:	2203      	movs	r2, #3
 800f7a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f7ae:	79fa      	ldrb	r2, [r7, #7]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	005b      	lsls	r3, r3, #1
 800f7b4:	4413      	add	r3, r2
 800f7b6:	00db      	lsls	r3, r3, #3
 800f7b8:	3308      	adds	r3, #8
 800f7ba:	4a08      	ldr	r2, [pc, #32]	; (800f7dc <etharp_output_to_arp_index+0x124>)
 800f7bc:	4413      	add	r3, r2
 800f7be:	3304      	adds	r3, #4
 800f7c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f7c4:	9200      	str	r2, [sp, #0]
 800f7c6:	460a      	mov	r2, r1
 800f7c8:	68b9      	ldr	r1, [r7, #8]
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f001 fe4a 	bl	8011464 <ethernet_output>
 800f7d0:	4603      	mov	r3, r0
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	20008090 	.word	0x20008090
 800f7e0:	08015060 	.word	0x08015060
 800f7e4:	080151d0 	.word	0x080151d0
 800f7e8:	080150d8 	.word	0x080150d8

0800f7ec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b08a      	sub	sp, #40	; 0x28
 800f7f0:	af02      	add	r7, sp, #8
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	60b9      	str	r1, [r7, #8]
 800f7f6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d106      	bne.n	800f810 <etharp_output+0x24>
 800f802:	4b73      	ldr	r3, [pc, #460]	; (800f9d0 <etharp_output+0x1e4>)
 800f804:	f240 321e 	movw	r2, #798	; 0x31e
 800f808:	4972      	ldr	r1, [pc, #456]	; (800f9d4 <etharp_output+0x1e8>)
 800f80a:	4873      	ldr	r0, [pc, #460]	; (800f9d8 <etharp_output+0x1ec>)
 800f80c:	f001 ffbe 	bl	801178c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d106      	bne.n	800f824 <etharp_output+0x38>
 800f816:	4b6e      	ldr	r3, [pc, #440]	; (800f9d0 <etharp_output+0x1e4>)
 800f818:	f240 321f 	movw	r2, #799	; 0x31f
 800f81c:	496f      	ldr	r1, [pc, #444]	; (800f9dc <etharp_output+0x1f0>)
 800f81e:	486e      	ldr	r0, [pc, #440]	; (800f9d8 <etharp_output+0x1ec>)
 800f820:	f001 ffb4 	bl	801178c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d106      	bne.n	800f838 <etharp_output+0x4c>
 800f82a:	4b69      	ldr	r3, [pc, #420]	; (800f9d0 <etharp_output+0x1e4>)
 800f82c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f830:	496b      	ldr	r1, [pc, #428]	; (800f9e0 <etharp_output+0x1f4>)
 800f832:	4869      	ldr	r0, [pc, #420]	; (800f9d8 <etharp_output+0x1ec>)
 800f834:	f001 ffaa 	bl	801178c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	68f9      	ldr	r1, [r7, #12]
 800f83e:	4618      	mov	r0, r3
 800f840:	f000 ff02 	bl	8010648 <ip4_addr_isbroadcast_u32>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d002      	beq.n	800f850 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f84a:	4b66      	ldr	r3, [pc, #408]	; (800f9e4 <etharp_output+0x1f8>)
 800f84c:	61fb      	str	r3, [r7, #28]
 800f84e:	e0af      	b.n	800f9b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f858:	2be0      	cmp	r3, #224	; 0xe0
 800f85a:	d118      	bne.n	800f88e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f85c:	2301      	movs	r3, #1
 800f85e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f860:	2300      	movs	r3, #0
 800f862:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f864:	235e      	movs	r3, #94	; 0x5e
 800f866:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	3301      	adds	r3, #1
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f872:	b2db      	uxtb	r3, r3
 800f874:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	3302      	adds	r3, #2
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	3303      	adds	r3, #3
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f886:	f107 0310 	add.w	r3, r7, #16
 800f88a:	61fb      	str	r3, [r7, #28]
 800f88c:	e090      	b.n	800f9b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	3304      	adds	r3, #4
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	405a      	eors	r2, r3
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	3308      	adds	r3, #8
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4013      	ands	r3, r2
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d012      	beq.n	800f8cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f8ac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d00b      	beq.n	800f8cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	330c      	adds	r3, #12
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d003      	beq.n	800f8c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	330c      	adds	r3, #12
 800f8c2:	61bb      	str	r3, [r7, #24]
 800f8c4:	e002      	b.n	800f8cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f8c6:	f06f 0303 	mvn.w	r3, #3
 800f8ca:	e07d      	b.n	800f9c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f8cc:	4b46      	ldr	r3, [pc, #280]	; (800f9e8 <etharp_output+0x1fc>)
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	4a46      	ldr	r2, [pc, #280]	; (800f9ec <etharp_output+0x200>)
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	005b      	lsls	r3, r3, #1
 800f8d8:	440b      	add	r3, r1
 800f8da:	00db      	lsls	r3, r3, #3
 800f8dc:	4413      	add	r3, r2
 800f8de:	3314      	adds	r3, #20
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	d925      	bls.n	800f932 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f8e6:	4b40      	ldr	r3, [pc, #256]	; (800f9e8 <etharp_output+0x1fc>)
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	4a3f      	ldr	r2, [pc, #252]	; (800f9ec <etharp_output+0x200>)
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	005b      	lsls	r3, r3, #1
 800f8f2:	440b      	add	r3, r1
 800f8f4:	00db      	lsls	r3, r3, #3
 800f8f6:	4413      	add	r3, r2
 800f8f8:	3308      	adds	r3, #8
 800f8fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d117      	bne.n	800f932 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f902:	69bb      	ldr	r3, [r7, #24]
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	4b38      	ldr	r3, [pc, #224]	; (800f9e8 <etharp_output+0x1fc>)
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	4618      	mov	r0, r3
 800f90c:	4937      	ldr	r1, [pc, #220]	; (800f9ec <etharp_output+0x200>)
 800f90e:	4603      	mov	r3, r0
 800f910:	005b      	lsls	r3, r3, #1
 800f912:	4403      	add	r3, r0
 800f914:	00db      	lsls	r3, r3, #3
 800f916:	440b      	add	r3, r1
 800f918:	3304      	adds	r3, #4
 800f91a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d108      	bne.n	800f932 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f920:	4b31      	ldr	r3, [pc, #196]	; (800f9e8 <etharp_output+0x1fc>)
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	461a      	mov	r2, r3
 800f926:	68b9      	ldr	r1, [r7, #8]
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	f7ff fec5 	bl	800f6b8 <etharp_output_to_arp_index>
 800f92e:	4603      	mov	r3, r0
 800f930:	e04a      	b.n	800f9c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f932:	2300      	movs	r3, #0
 800f934:	75fb      	strb	r3, [r7, #23]
 800f936:	e031      	b.n	800f99c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f938:	7dfa      	ldrb	r2, [r7, #23]
 800f93a:	492c      	ldr	r1, [pc, #176]	; (800f9ec <etharp_output+0x200>)
 800f93c:	4613      	mov	r3, r2
 800f93e:	005b      	lsls	r3, r3, #1
 800f940:	4413      	add	r3, r2
 800f942:	00db      	lsls	r3, r3, #3
 800f944:	440b      	add	r3, r1
 800f946:	3314      	adds	r3, #20
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d923      	bls.n	800f996 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f94e:	7dfa      	ldrb	r2, [r7, #23]
 800f950:	4926      	ldr	r1, [pc, #152]	; (800f9ec <etharp_output+0x200>)
 800f952:	4613      	mov	r3, r2
 800f954:	005b      	lsls	r3, r3, #1
 800f956:	4413      	add	r3, r2
 800f958:	00db      	lsls	r3, r3, #3
 800f95a:	440b      	add	r3, r1
 800f95c:	3308      	adds	r3, #8
 800f95e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	429a      	cmp	r2, r3
 800f964:	d117      	bne.n	800f996 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f966:	69bb      	ldr	r3, [r7, #24]
 800f968:	6819      	ldr	r1, [r3, #0]
 800f96a:	7dfa      	ldrb	r2, [r7, #23]
 800f96c:	481f      	ldr	r0, [pc, #124]	; (800f9ec <etharp_output+0x200>)
 800f96e:	4613      	mov	r3, r2
 800f970:	005b      	lsls	r3, r3, #1
 800f972:	4413      	add	r3, r2
 800f974:	00db      	lsls	r3, r3, #3
 800f976:	4403      	add	r3, r0
 800f978:	3304      	adds	r3, #4
 800f97a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f97c:	4299      	cmp	r1, r3
 800f97e:	d10a      	bne.n	800f996 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f980:	4a19      	ldr	r2, [pc, #100]	; (800f9e8 <etharp_output+0x1fc>)
 800f982:	7dfb      	ldrb	r3, [r7, #23]
 800f984:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f986:	7dfb      	ldrb	r3, [r7, #23]
 800f988:	461a      	mov	r2, r3
 800f98a:	68b9      	ldr	r1, [r7, #8]
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f7ff fe93 	bl	800f6b8 <etharp_output_to_arp_index>
 800f992:	4603      	mov	r3, r0
 800f994:	e018      	b.n	800f9c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f996:	7dfb      	ldrb	r3, [r7, #23]
 800f998:	3301      	adds	r3, #1
 800f99a:	75fb      	strb	r3, [r7, #23]
 800f99c:	7dfb      	ldrb	r3, [r7, #23]
 800f99e:	2b09      	cmp	r3, #9
 800f9a0:	d9ca      	bls.n	800f938 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f9a2:	68ba      	ldr	r2, [r7, #8]
 800f9a4:	69b9      	ldr	r1, [r7, #24]
 800f9a6:	68f8      	ldr	r0, [r7, #12]
 800f9a8:	f000 f822 	bl	800f9f0 <etharp_query>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	e00b      	b.n	800f9c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f9b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	68b9      	ldr	r1, [r7, #8]
 800f9c0:	68f8      	ldr	r0, [r7, #12]
 800f9c2:	f001 fd4f 	bl	8011464 <ethernet_output>
 800f9c6:	4603      	mov	r3, r0
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3720      	adds	r7, #32
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	08015060 	.word	0x08015060
 800f9d4:	080151b0 	.word	0x080151b0
 800f9d8:	080150d8 	.word	0x080150d8
 800f9dc:	08015200 	.word	0x08015200
 800f9e0:	080151a0 	.word	0x080151a0
 800f9e4:	0801581c 	.word	0x0801581c
 800f9e8:	20008180 	.word	0x20008180
 800f9ec:	20008090 	.word	0x20008090

0800f9f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b08c      	sub	sp, #48	; 0x30
 800f9f4:	af02      	add	r7, sp, #8
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	3326      	adds	r3, #38	; 0x26
 800fa00:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800fa02:	23ff      	movs	r3, #255	; 0xff
 800fa04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	68f9      	ldr	r1, [r7, #12]
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 fe18 	bl	8010648 <ip4_addr_isbroadcast_u32>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d10c      	bne.n	800fa38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fa26:	2be0      	cmp	r3, #224	; 0xe0
 800fa28:	d006      	beq.n	800fa38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d003      	beq.n	800fa38 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d102      	bne.n	800fa3e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fa38:	f06f 030f 	mvn.w	r3, #15
 800fa3c:	e101      	b.n	800fc42 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fa3e:	68fa      	ldr	r2, [r7, #12]
 800fa40:	2101      	movs	r1, #1
 800fa42:	68b8      	ldr	r0, [r7, #8]
 800fa44:	f7ff fb60 	bl	800f108 <etharp_find_entry>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fa4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	da02      	bge.n	800fa5a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fa54:	8a7b      	ldrh	r3, [r7, #18]
 800fa56:	b25b      	sxtb	r3, r3
 800fa58:	e0f3      	b.n	800fc42 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fa5a:	8a7b      	ldrh	r3, [r7, #18]
 800fa5c:	2b7e      	cmp	r3, #126	; 0x7e
 800fa5e:	d906      	bls.n	800fa6e <etharp_query+0x7e>
 800fa60:	4b7a      	ldr	r3, [pc, #488]	; (800fc4c <etharp_query+0x25c>)
 800fa62:	f240 32c1 	movw	r2, #961	; 0x3c1
 800fa66:	497a      	ldr	r1, [pc, #488]	; (800fc50 <etharp_query+0x260>)
 800fa68:	487a      	ldr	r0, [pc, #488]	; (800fc54 <etharp_query+0x264>)
 800fa6a:	f001 fe8f 	bl	801178c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fa6e:	8a7b      	ldrh	r3, [r7, #18]
 800fa70:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fa72:	7c7a      	ldrb	r2, [r7, #17]
 800fa74:	4978      	ldr	r1, [pc, #480]	; (800fc58 <etharp_query+0x268>)
 800fa76:	4613      	mov	r3, r2
 800fa78:	005b      	lsls	r3, r3, #1
 800fa7a:	4413      	add	r3, r2
 800fa7c:	00db      	lsls	r3, r3, #3
 800fa7e:	440b      	add	r3, r1
 800fa80:	3314      	adds	r3, #20
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d115      	bne.n	800fab4 <etharp_query+0xc4>
    is_new_entry = 1;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fa8c:	7c7a      	ldrb	r2, [r7, #17]
 800fa8e:	4972      	ldr	r1, [pc, #456]	; (800fc58 <etharp_query+0x268>)
 800fa90:	4613      	mov	r3, r2
 800fa92:	005b      	lsls	r3, r3, #1
 800fa94:	4413      	add	r3, r2
 800fa96:	00db      	lsls	r3, r3, #3
 800fa98:	440b      	add	r3, r1
 800fa9a:	3314      	adds	r3, #20
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800faa0:	7c7a      	ldrb	r2, [r7, #17]
 800faa2:	496d      	ldr	r1, [pc, #436]	; (800fc58 <etharp_query+0x268>)
 800faa4:	4613      	mov	r3, r2
 800faa6:	005b      	lsls	r3, r3, #1
 800faa8:	4413      	add	r3, r2
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	440b      	add	r3, r1
 800faae:	3308      	adds	r3, #8
 800fab0:	68fa      	ldr	r2, [r7, #12]
 800fab2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fab4:	7c7a      	ldrb	r2, [r7, #17]
 800fab6:	4968      	ldr	r1, [pc, #416]	; (800fc58 <etharp_query+0x268>)
 800fab8:	4613      	mov	r3, r2
 800faba:	005b      	lsls	r3, r3, #1
 800fabc:	4413      	add	r3, r2
 800fabe:	00db      	lsls	r3, r3, #3
 800fac0:	440b      	add	r3, r1
 800fac2:	3314      	adds	r3, #20
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d011      	beq.n	800faee <etharp_query+0xfe>
 800faca:	7c7a      	ldrb	r2, [r7, #17]
 800facc:	4962      	ldr	r1, [pc, #392]	; (800fc58 <etharp_query+0x268>)
 800face:	4613      	mov	r3, r2
 800fad0:	005b      	lsls	r3, r3, #1
 800fad2:	4413      	add	r3, r2
 800fad4:	00db      	lsls	r3, r3, #3
 800fad6:	440b      	add	r3, r1
 800fad8:	3314      	adds	r3, #20
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d806      	bhi.n	800faee <etharp_query+0xfe>
 800fae0:	4b5a      	ldr	r3, [pc, #360]	; (800fc4c <etharp_query+0x25c>)
 800fae2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800fae6:	495d      	ldr	r1, [pc, #372]	; (800fc5c <etharp_query+0x26c>)
 800fae8:	485a      	ldr	r0, [pc, #360]	; (800fc54 <etharp_query+0x264>)
 800faea:	f001 fe4f 	bl	801178c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800faee:	6a3b      	ldr	r3, [r7, #32]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d102      	bne.n	800fafa <etharp_query+0x10a>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d10c      	bne.n	800fb14 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fafa:	68b9      	ldr	r1, [r7, #8]
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f000 f963 	bl	800fdc8 <etharp_request>
 800fb02:	4603      	mov	r3, r0
 800fb04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d102      	bne.n	800fb14 <etharp_query+0x124>
      return result;
 800fb0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fb12:	e096      	b.n	800fc42 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d106      	bne.n	800fb28 <etharp_query+0x138>
 800fb1a:	4b4c      	ldr	r3, [pc, #304]	; (800fc4c <etharp_query+0x25c>)
 800fb1c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800fb20:	494f      	ldr	r1, [pc, #316]	; (800fc60 <etharp_query+0x270>)
 800fb22:	484c      	ldr	r0, [pc, #304]	; (800fc54 <etharp_query+0x264>)
 800fb24:	f001 fe32 	bl	801178c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fb28:	7c7a      	ldrb	r2, [r7, #17]
 800fb2a:	494b      	ldr	r1, [pc, #300]	; (800fc58 <etharp_query+0x268>)
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	005b      	lsls	r3, r3, #1
 800fb30:	4413      	add	r3, r2
 800fb32:	00db      	lsls	r3, r3, #3
 800fb34:	440b      	add	r3, r1
 800fb36:	3314      	adds	r3, #20
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d917      	bls.n	800fb6e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800fb3e:	4a49      	ldr	r2, [pc, #292]	; (800fc64 <etharp_query+0x274>)
 800fb40:	7c7b      	ldrb	r3, [r7, #17]
 800fb42:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fb44:	7c7a      	ldrb	r2, [r7, #17]
 800fb46:	4613      	mov	r3, r2
 800fb48:	005b      	lsls	r3, r3, #1
 800fb4a:	4413      	add	r3, r2
 800fb4c:	00db      	lsls	r3, r3, #3
 800fb4e:	3308      	adds	r3, #8
 800fb50:	4a41      	ldr	r2, [pc, #260]	; (800fc58 <etharp_query+0x268>)
 800fb52:	4413      	add	r3, r2
 800fb54:	3304      	adds	r3, #4
 800fb56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb5a:	9200      	str	r2, [sp, #0]
 800fb5c:	697a      	ldr	r2, [r7, #20]
 800fb5e:	6879      	ldr	r1, [r7, #4]
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f001 fc7f 	bl	8011464 <ethernet_output>
 800fb66:	4603      	mov	r3, r0
 800fb68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb6c:	e067      	b.n	800fc3e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fb6e:	7c7a      	ldrb	r2, [r7, #17]
 800fb70:	4939      	ldr	r1, [pc, #228]	; (800fc58 <etharp_query+0x268>)
 800fb72:	4613      	mov	r3, r2
 800fb74:	005b      	lsls	r3, r3, #1
 800fb76:	4413      	add	r3, r2
 800fb78:	00db      	lsls	r3, r3, #3
 800fb7a:	440b      	add	r3, r1
 800fb7c:	3314      	adds	r3, #20
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d15c      	bne.n	800fc3e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fb84:	2300      	movs	r3, #0
 800fb86:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fb8c:	e01c      	b.n	800fbc8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fb8e:	69fb      	ldr	r3, [r7, #28]
 800fb90:	895a      	ldrh	r2, [r3, #10]
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	891b      	ldrh	r3, [r3, #8]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d10a      	bne.n	800fbb0 <etharp_query+0x1c0>
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d006      	beq.n	800fbb0 <etharp_query+0x1c0>
 800fba2:	4b2a      	ldr	r3, [pc, #168]	; (800fc4c <etharp_query+0x25c>)
 800fba4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800fba8:	492f      	ldr	r1, [pc, #188]	; (800fc68 <etharp_query+0x278>)
 800fbaa:	482a      	ldr	r0, [pc, #168]	; (800fc54 <etharp_query+0x264>)
 800fbac:	f001 fdee 	bl	801178c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	7b1b      	ldrb	r3, [r3, #12]
 800fbb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d002      	beq.n	800fbc2 <etharp_query+0x1d2>
        copy_needed = 1;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	61bb      	str	r3, [r7, #24]
        break;
 800fbc0:	e005      	b.n	800fbce <etharp_query+0x1de>
      }
      p = p->next;
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d1df      	bne.n	800fb8e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d007      	beq.n	800fbe4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800fbda:	200e      	movs	r0, #14
 800fbdc:	f7f9 fd28 	bl	8009630 <pbuf_clone>
 800fbe0:	61f8      	str	r0, [r7, #28]
 800fbe2:	e004      	b.n	800fbee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fbe8:	69f8      	ldr	r0, [r7, #28]
 800fbea:	f7f9 fb65 	bl	80092b8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d021      	beq.n	800fc38 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fbf4:	7c7a      	ldrb	r2, [r7, #17]
 800fbf6:	4918      	ldr	r1, [pc, #96]	; (800fc58 <etharp_query+0x268>)
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	005b      	lsls	r3, r3, #1
 800fbfc:	4413      	add	r3, r2
 800fbfe:	00db      	lsls	r3, r3, #3
 800fc00:	440b      	add	r3, r1
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00a      	beq.n	800fc1e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fc08:	7c7a      	ldrb	r2, [r7, #17]
 800fc0a:	4913      	ldr	r1, [pc, #76]	; (800fc58 <etharp_query+0x268>)
 800fc0c:	4613      	mov	r3, r2
 800fc0e:	005b      	lsls	r3, r3, #1
 800fc10:	4413      	add	r3, r2
 800fc12:	00db      	lsls	r3, r3, #3
 800fc14:	440b      	add	r3, r1
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7f9 faad 	bl	8009178 <pbuf_free>
      }
      arp_table[i].q = p;
 800fc1e:	7c7a      	ldrb	r2, [r7, #17]
 800fc20:	490d      	ldr	r1, [pc, #52]	; (800fc58 <etharp_query+0x268>)
 800fc22:	4613      	mov	r3, r2
 800fc24:	005b      	lsls	r3, r3, #1
 800fc26:	4413      	add	r3, r2
 800fc28:	00db      	lsls	r3, r3, #3
 800fc2a:	440b      	add	r3, r1
 800fc2c:	69fa      	ldr	r2, [r7, #28]
 800fc2e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fc30:	2300      	movs	r3, #0
 800fc32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc36:	e002      	b.n	800fc3e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fc38:	23ff      	movs	r3, #255	; 0xff
 800fc3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800fc3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3728      	adds	r7, #40	; 0x28
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	08015060 	.word	0x08015060
 800fc50:	0801520c 	.word	0x0801520c
 800fc54:	080150d8 	.word	0x080150d8
 800fc58:	20008090 	.word	0x20008090
 800fc5c:	0801521c 	.word	0x0801521c
 800fc60:	08015200 	.word	0x08015200
 800fc64:	20008180 	.word	0x20008180
 800fc68:	08015244 	.word	0x08015244

0800fc6c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b08a      	sub	sp, #40	; 0x28
 800fc70:	af02      	add	r7, sp, #8
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]
 800fc78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d106      	bne.n	800fc92 <etharp_raw+0x26>
 800fc84:	4b3a      	ldr	r3, [pc, #232]	; (800fd70 <etharp_raw+0x104>)
 800fc86:	f240 4257 	movw	r2, #1111	; 0x457
 800fc8a:	493a      	ldr	r1, [pc, #232]	; (800fd74 <etharp_raw+0x108>)
 800fc8c:	483a      	ldr	r0, [pc, #232]	; (800fd78 <etharp_raw+0x10c>)
 800fc8e:	f001 fd7d 	bl	801178c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fc92:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc96:	211c      	movs	r1, #28
 800fc98:	200e      	movs	r0, #14
 800fc9a:	f7f8 ff89 	bl	8008bb0 <pbuf_alloc>
 800fc9e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fca0:	69bb      	ldr	r3, [r7, #24]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d102      	bne.n	800fcac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fca6:	f04f 33ff 	mov.w	r3, #4294967295
 800fcaa:	e05d      	b.n	800fd68 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fcac:	69bb      	ldr	r3, [r7, #24]
 800fcae:	895b      	ldrh	r3, [r3, #10]
 800fcb0:	2b1b      	cmp	r3, #27
 800fcb2:	d806      	bhi.n	800fcc2 <etharp_raw+0x56>
 800fcb4:	4b2e      	ldr	r3, [pc, #184]	; (800fd70 <etharp_raw+0x104>)
 800fcb6:	f240 4262 	movw	r2, #1122	; 0x462
 800fcba:	4930      	ldr	r1, [pc, #192]	; (800fd7c <etharp_raw+0x110>)
 800fcbc:	482e      	ldr	r0, [pc, #184]	; (800fd78 <etharp_raw+0x10c>)
 800fcbe:	f001 fd65 	bl	801178c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fcc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7f7 fe50 	bl	8007970 <lwip_htons>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fcde:	2b06      	cmp	r3, #6
 800fce0:	d006      	beq.n	800fcf0 <etharp_raw+0x84>
 800fce2:	4b23      	ldr	r3, [pc, #140]	; (800fd70 <etharp_raw+0x104>)
 800fce4:	f240 4269 	movw	r2, #1129	; 0x469
 800fce8:	4925      	ldr	r1, [pc, #148]	; (800fd80 <etharp_raw+0x114>)
 800fcea:	4823      	ldr	r0, [pc, #140]	; (800fd78 <etharp_raw+0x10c>)
 800fcec:	f001 fd4e 	bl	801178c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	3308      	adds	r3, #8
 800fcf4:	2206      	movs	r2, #6
 800fcf6:	6839      	ldr	r1, [r7, #0]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f001 fc37 	bl	801156c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	3312      	adds	r3, #18
 800fd02:	2206      	movs	r2, #6
 800fd04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd06:	4618      	mov	r0, r3
 800fd08:	f001 fc30 	bl	801156c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	330e      	adds	r3, #14
 800fd10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd12:	6812      	ldr	r2, [r2, #0]
 800fd14:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	3318      	adds	r3, #24
 800fd1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd1c:	6812      	ldr	r2, [r2, #0]
 800fd1e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	2200      	movs	r2, #0
 800fd24:	701a      	strb	r2, [r3, #0]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f042 0201 	orr.w	r2, r2, #1
 800fd2c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	2200      	movs	r2, #0
 800fd32:	f042 0208 	orr.w	r2, r2, #8
 800fd36:	709a      	strb	r2, [r3, #2]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	2206      	movs	r2, #6
 800fd40:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	2204      	movs	r2, #4
 800fd46:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fd48:	f640 0306 	movw	r3, #2054	; 0x806
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	68ba      	ldr	r2, [r7, #8]
 800fd52:	69b9      	ldr	r1, [r7, #24]
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f001 fb85 	bl	8011464 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fd5a:	69b8      	ldr	r0, [r7, #24]
 800fd5c:	f7f9 fa0c 	bl	8009178 <pbuf_free>
  p = NULL;
 800fd60:	2300      	movs	r3, #0
 800fd62:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fd64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3720      	adds	r7, #32
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	08015060 	.word	0x08015060
 800fd74:	080151b0 	.word	0x080151b0
 800fd78:	080150d8 	.word	0x080150d8
 800fd7c:	08015260 	.word	0x08015260
 800fd80:	08015294 	.word	0x08015294

0800fd84 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b088      	sub	sp, #32
 800fd88:	af04      	add	r7, sp, #16
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fda0:	2201      	movs	r2, #1
 800fda2:	9203      	str	r2, [sp, #12]
 800fda4:	68ba      	ldr	r2, [r7, #8]
 800fda6:	9202      	str	r2, [sp, #8]
 800fda8:	4a06      	ldr	r2, [pc, #24]	; (800fdc4 <etharp_request_dst+0x40>)
 800fdaa:	9201      	str	r2, [sp, #4]
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	4603      	mov	r3, r0
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	68f8      	ldr	r0, [r7, #12]
 800fdb4:	f7ff ff5a 	bl	800fc6c <etharp_raw>
 800fdb8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3710      	adds	r7, #16
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	08015824 	.word	0x08015824

0800fdc8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fdd2:	4a05      	ldr	r2, [pc, #20]	; (800fde8 <etharp_request+0x20>)
 800fdd4:	6839      	ldr	r1, [r7, #0]
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f7ff ffd4 	bl	800fd84 <etharp_request_dst>
 800fddc:	4603      	mov	r3, r0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3708      	adds	r7, #8
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	0801581c 	.word	0x0801581c

0800fdec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b08e      	sub	sp, #56	; 0x38
 800fdf0:	af04      	add	r7, sp, #16
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fdf6:	4b7e      	ldr	r3, [pc, #504]	; (800fff0 <icmp_input+0x204>)
 800fdf8:	689b      	ldr	r3, [r3, #8]
 800fdfa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	f003 030f 	and.w	r3, r3, #15
 800fe04:	b2db      	uxtb	r3, r3
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fe0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe0e:	2b13      	cmp	r3, #19
 800fe10:	f240 80d7 	bls.w	800ffc2 <icmp_input+0x1d6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	895b      	ldrh	r3, [r3, #10]
 800fe18:	2b03      	cmp	r3, #3
 800fe1a:	f240 80d4 	bls.w	800ffc6 <icmp_input+0x1da>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fe28:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f000 80c1 	beq.w	800ffb4 <icmp_input+0x1c8>
 800fe32:	2b08      	cmp	r3, #8
 800fe34:	f040 80c1 	bne.w	800ffba <icmp_input+0x1ce>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fe38:	4b6e      	ldr	r3, [pc, #440]	; (800fff4 <icmp_input+0x208>)
 800fe3a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fe3c:	4b6c      	ldr	r3, [pc, #432]	; (800fff0 <icmp_input+0x204>)
 800fe3e:	695b      	ldr	r3, [r3, #20]
 800fe40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe44:	2be0      	cmp	r3, #224	; 0xe0
 800fe46:	f000 80c5 	beq.w	800ffd4 <icmp_input+0x1e8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fe4a:	4b69      	ldr	r3, [pc, #420]	; (800fff0 <icmp_input+0x204>)
 800fe4c:	695b      	ldr	r3, [r3, #20]
 800fe4e:	4a68      	ldr	r2, [pc, #416]	; (800fff0 <icmp_input+0x204>)
 800fe50:	6812      	ldr	r2, [r2, #0]
 800fe52:	4611      	mov	r1, r2
 800fe54:	4618      	mov	r0, r3
 800fe56:	f000 fbf7 	bl	8010648 <ip4_addr_isbroadcast_u32>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f040 80bb 	bne.w	800ffd8 <icmp_input+0x1ec>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	891b      	ldrh	r3, [r3, #8]
 800fe66:	2b07      	cmp	r3, #7
 800fe68:	f240 80af 	bls.w	800ffca <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7f7 fe0a 	bl	8007a86 <inet_chksum_pbuf>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d003      	beq.n	800fe80 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7f9 f97d 	bl	8009178 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800fe7e:	e0b4      	b.n	800ffea <icmp_input+0x1fe>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fe80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe82:	330e      	adds	r3, #14
 800fe84:	4619      	mov	r1, r3
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7f9 f8e0 	bl	800904c <pbuf_add_header>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d04b      	beq.n	800ff2a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	891a      	ldrh	r2, [r3, #8]
 800fe96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe98:	4413      	add	r3, r2
 800fe9a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	891b      	ldrh	r3, [r3, #8]
 800fea0:	8b7a      	ldrh	r2, [r7, #26]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	f0c0 809a 	bcc.w	800ffdc <icmp_input+0x1f0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fea8:	8b7b      	ldrh	r3, [r7, #26]
 800feaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800feae:	4619      	mov	r1, r3
 800feb0:	200e      	movs	r0, #14
 800feb2:	f7f8 fe7d 	bl	8008bb0 <pbuf_alloc>
 800feb6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	2b00      	cmp	r3, #0
 800febc:	f000 8090 	beq.w	800ffe0 <icmp_input+0x1f4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	895b      	ldrh	r3, [r3, #10]
 800fec4:	461a      	mov	r2, r3
 800fec6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fec8:	3308      	adds	r3, #8
 800feca:	429a      	cmp	r2, r3
 800fecc:	d203      	bcs.n	800fed6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fece:	6978      	ldr	r0, [r7, #20]
 800fed0:	f7f9 f952 	bl	8009178 <pbuf_free>
          goto icmperr;
 800fed4:	e085      	b.n	800ffe2 <icmp_input+0x1f6>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fedc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fede:	4618      	mov	r0, r3
 800fee0:	f001 fb44 	bl	801156c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fee4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fee6:	4619      	mov	r1, r3
 800fee8:	6978      	ldr	r0, [r7, #20]
 800feea:	f7f9 f8bf 	bl	800906c <pbuf_remove_header>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d009      	beq.n	800ff08 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fef4:	4b40      	ldr	r3, [pc, #256]	; (800fff8 <icmp_input+0x20c>)
 800fef6:	22b6      	movs	r2, #182	; 0xb6
 800fef8:	4940      	ldr	r1, [pc, #256]	; (800fffc <icmp_input+0x210>)
 800fefa:	4841      	ldr	r0, [pc, #260]	; (8010000 <icmp_input+0x214>)
 800fefc:	f001 fc46 	bl	801178c <iprintf>
          pbuf_free(r);
 800ff00:	6978      	ldr	r0, [r7, #20]
 800ff02:	f7f9 f939 	bl	8009178 <pbuf_free>
          goto icmperr;
 800ff06:	e06c      	b.n	800ffe2 <icmp_input+0x1f6>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ff08:	6879      	ldr	r1, [r7, #4]
 800ff0a:	6978      	ldr	r0, [r7, #20]
 800ff0c:	f7f9 fa4c 	bl	80093a8 <pbuf_copy>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d003      	beq.n	800ff1e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ff16:	6978      	ldr	r0, [r7, #20]
 800ff18:	f7f9 f92e 	bl	8009178 <pbuf_free>
          goto icmperr;
 800ff1c:	e061      	b.n	800ffe2 <icmp_input+0x1f6>
        }
        /* free the original p */
        pbuf_free(p);
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f7f9 f92a 	bl	8009178 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	607b      	str	r3, [r7, #4]
 800ff28:	e00f      	b.n	800ff4a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ff2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff2c:	330e      	adds	r3, #14
 800ff2e:	4619      	mov	r1, r3
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7f9 f89b 	bl	800906c <pbuf_remove_header>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d006      	beq.n	800ff4a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ff3c:	4b2e      	ldr	r3, [pc, #184]	; (800fff8 <icmp_input+0x20c>)
 800ff3e:	22c7      	movs	r2, #199	; 0xc7
 800ff40:	4930      	ldr	r1, [pc, #192]	; (8010004 <icmp_input+0x218>)
 800ff42:	482f      	ldr	r0, [pc, #188]	; (8010000 <icmp_input+0x214>)
 800ff44:	f001 fc22 	bl	801178c <iprintf>
          goto icmperr;
 800ff48:	e04b      	b.n	800ffe2 <icmp_input+0x1f6>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ff50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff52:	4619      	mov	r1, r3
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7f9 f879 	bl	800904c <pbuf_add_header>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d12b      	bne.n	800ffb8 <icmp_input+0x1cc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ff6e:	4b20      	ldr	r3, [pc, #128]	; (800fff0 <icmp_input+0x204>)
 800ff70:	691a      	ldr	r2, [r3, #16]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	709a      	strb	r2, [r3, #2]
 800ff82:	2200      	movs	r2, #0
 800ff84:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	22ff      	movs	r2, #255	; 0xff
 800ff8a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	729a      	strb	r2, [r3, #10]
 800ff92:	2200      	movs	r2, #0
 800ff94:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	9302      	str	r3, [sp, #8]
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	9301      	str	r3, [sp, #4]
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	9300      	str	r3, [sp, #0]
 800ffa2:	23ff      	movs	r3, #255	; 0xff
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	69f9      	ldr	r1, [r7, #28]
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 fa75 	bl	8010498 <ip4_output_if>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ffb2:	e001      	b.n	800ffb8 <icmp_input+0x1cc>
      break;
 800ffb4:	bf00      	nop
 800ffb6:	e000      	b.n	800ffba <icmp_input+0x1ce>
      break;
 800ffb8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f7f9 f8dc 	bl	8009178 <pbuf_free>
  return;
 800ffc0:	e013      	b.n	800ffea <icmp_input+0x1fe>
    goto lenerr;
 800ffc2:	bf00      	nop
 800ffc4:	e002      	b.n	800ffcc <icmp_input+0x1e0>
    goto lenerr;
 800ffc6:	bf00      	nop
 800ffc8:	e000      	b.n	800ffcc <icmp_input+0x1e0>
        goto lenerr;
 800ffca:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f7f9 f8d3 	bl	8009178 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ffd2:	e00a      	b.n	800ffea <icmp_input+0x1fe>
        goto icmperr;
 800ffd4:	bf00      	nop
 800ffd6:	e004      	b.n	800ffe2 <icmp_input+0x1f6>
        goto icmperr;
 800ffd8:	bf00      	nop
 800ffda:	e002      	b.n	800ffe2 <icmp_input+0x1f6>
          goto icmperr;
 800ffdc:	bf00      	nop
 800ffde:	e000      	b.n	800ffe2 <icmp_input+0x1f6>
          goto icmperr;
 800ffe0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7f9 f8c8 	bl	8009178 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ffe8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ffea:	3728      	adds	r7, #40	; 0x28
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	20005114 	.word	0x20005114
 800fff4:	20005128 	.word	0x20005128
 800fff8:	080152d8 	.word	0x080152d8
 800fffc:	08015310 	.word	0x08015310
 8010000:	08015348 	.word	0x08015348
 8010004:	08015370 	.word	0x08015370

08010008 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	460b      	mov	r3, r1
 8010012:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010014:	78fb      	ldrb	r3, [r7, #3]
 8010016:	461a      	mov	r2, r3
 8010018:	2103      	movs	r1, #3
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 f814 	bl	8010048 <icmp_send_response>
}
 8010020:	bf00      	nop
 8010022:	3708      	adds	r7, #8
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}

08010028 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	460b      	mov	r3, r1
 8010032:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010034:	78fb      	ldrb	r3, [r7, #3]
 8010036:	461a      	mov	r2, r3
 8010038:	210b      	movs	r1, #11
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f804 	bl	8010048 <icmp_send_response>
}
 8010040:	bf00      	nop
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b08c      	sub	sp, #48	; 0x30
 801004c:	af04      	add	r7, sp, #16
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	460b      	mov	r3, r1
 8010052:	70fb      	strb	r3, [r7, #3]
 8010054:	4613      	mov	r3, r2
 8010056:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010058:	f44f 7220 	mov.w	r2, #640	; 0x280
 801005c:	2124      	movs	r1, #36	; 0x24
 801005e:	2022      	movs	r0, #34	; 0x22
 8010060:	f7f8 fda6 	bl	8008bb0 <pbuf_alloc>
 8010064:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d04c      	beq.n	8010106 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	895b      	ldrh	r3, [r3, #10]
 8010070:	2b23      	cmp	r3, #35	; 0x23
 8010072:	d806      	bhi.n	8010082 <icmp_send_response+0x3a>
 8010074:	4b26      	ldr	r3, [pc, #152]	; (8010110 <icmp_send_response+0xc8>)
 8010076:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801007a:	4926      	ldr	r1, [pc, #152]	; (8010114 <icmp_send_response+0xcc>)
 801007c:	4826      	ldr	r0, [pc, #152]	; (8010118 <icmp_send_response+0xd0>)
 801007e:	f001 fb85 	bl	801178c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	78fa      	ldrb	r2, [r7, #3]
 8010092:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	78ba      	ldrb	r2, [r7, #2]
 8010098:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	2200      	movs	r2, #0
 801009e:	711a      	strb	r2, [r3, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	2200      	movs	r2, #0
 80100a8:	719a      	strb	r2, [r3, #6]
 80100aa:	2200      	movs	r2, #0
 80100ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	f103 0008 	add.w	r0, r3, #8
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	221c      	movs	r2, #28
 80100bc:	4619      	mov	r1, r3
 80100be:	f001 fa55 	bl	801156c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80100c8:	f107 030c 	add.w	r3, r7, #12
 80100cc:	4618      	mov	r0, r3
 80100ce:	f000 f825 	bl	801011c <ip4_route>
 80100d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d011      	beq.n	80100fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	2200      	movs	r2, #0
 80100de:	709a      	strb	r2, [r3, #2]
 80100e0:	2200      	movs	r2, #0
 80100e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80100e4:	f107 020c 	add.w	r2, r7, #12
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	9302      	str	r3, [sp, #8]
 80100ec:	2301      	movs	r3, #1
 80100ee:	9301      	str	r3, [sp, #4]
 80100f0:	2300      	movs	r3, #0
 80100f2:	9300      	str	r3, [sp, #0]
 80100f4:	23ff      	movs	r3, #255	; 0xff
 80100f6:	2100      	movs	r1, #0
 80100f8:	69f8      	ldr	r0, [r7, #28]
 80100fa:	f000 f9cd 	bl	8010498 <ip4_output_if>
  }
  pbuf_free(q);
 80100fe:	69f8      	ldr	r0, [r7, #28]
 8010100:	f7f9 f83a 	bl	8009178 <pbuf_free>
 8010104:	e000      	b.n	8010108 <icmp_send_response+0xc0>
    return;
 8010106:	bf00      	nop
}
 8010108:	3720      	adds	r7, #32
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	080152d8 	.word	0x080152d8
 8010114:	080153a4 	.word	0x080153a4
 8010118:	08015348 	.word	0x08015348

0801011c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010124:	4b33      	ldr	r3, [pc, #204]	; (80101f4 <ip4_route+0xd8>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	60fb      	str	r3, [r7, #12]
 801012a:	e036      	b.n	801019a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010132:	f003 0301 	and.w	r3, r3, #1
 8010136:	b2db      	uxtb	r3, r3
 8010138:	2b00      	cmp	r3, #0
 801013a:	d02b      	beq.n	8010194 <ip4_route+0x78>
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010142:	089b      	lsrs	r3, r3, #2
 8010144:	f003 0301 	and.w	r3, r3, #1
 8010148:	b2db      	uxtb	r3, r3
 801014a:	2b00      	cmp	r3, #0
 801014c:	d022      	beq.n	8010194 <ip4_route+0x78>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	3304      	adds	r3, #4
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d01d      	beq.n	8010194 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	3304      	adds	r3, #4
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	405a      	eors	r2, r3
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	3308      	adds	r3, #8
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4013      	ands	r3, r2
 801016c:	2b00      	cmp	r3, #0
 801016e:	d101      	bne.n	8010174 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	e038      	b.n	80101e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801017a:	f003 0302 	and.w	r3, r3, #2
 801017e:	2b00      	cmp	r3, #0
 8010180:	d108      	bne.n	8010194 <ip4_route+0x78>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	330c      	adds	r3, #12
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	429a      	cmp	r2, r3
 801018e:	d101      	bne.n	8010194 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	e028      	b.n	80101e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	60fb      	str	r3, [r7, #12]
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d1c5      	bne.n	801012c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80101a0:	4b15      	ldr	r3, [pc, #84]	; (80101f8 <ip4_route+0xdc>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d01a      	beq.n	80101de <ip4_route+0xc2>
 80101a8:	4b13      	ldr	r3, [pc, #76]	; (80101f8 <ip4_route+0xdc>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80101b0:	f003 0301 	and.w	r3, r3, #1
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d012      	beq.n	80101de <ip4_route+0xc2>
 80101b8:	4b0f      	ldr	r3, [pc, #60]	; (80101f8 <ip4_route+0xdc>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80101c0:	f003 0304 	and.w	r3, r3, #4
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00a      	beq.n	80101de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80101c8:	4b0b      	ldr	r3, [pc, #44]	; (80101f8 <ip4_route+0xdc>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	3304      	adds	r3, #4
 80101ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d004      	beq.n	80101de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	b2db      	uxtb	r3, r3
 80101da:	2b7f      	cmp	r3, #127	; 0x7f
 80101dc:	d101      	bne.n	80101e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80101de:	2300      	movs	r3, #0
 80101e0:	e001      	b.n	80101e6 <ip4_route+0xca>
  }

  return netif_default;
 80101e2:	4b05      	ldr	r3, [pc, #20]	; (80101f8 <ip4_route+0xdc>)
 80101e4:	681b      	ldr	r3, [r3, #0]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3714      	adds	r7, #20
 80101ea:	46bd      	mov	sp, r7
 80101ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f0:	4770      	bx	lr
 80101f2:	bf00      	nop
 80101f4:	20008024 	.word	0x20008024
 80101f8:	20008028 	.word	0x20008028

080101fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801020a:	f003 0301 	and.w	r3, r3, #1
 801020e:	b2db      	uxtb	r3, r3
 8010210:	2b00      	cmp	r3, #0
 8010212:	d016      	beq.n	8010242 <ip4_input_accept+0x46>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	3304      	adds	r3, #4
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d011      	beq.n	8010242 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801021e:	4b0b      	ldr	r3, [pc, #44]	; (801024c <ip4_input_accept+0x50>)
 8010220:	695a      	ldr	r2, [r3, #20]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	3304      	adds	r3, #4
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	429a      	cmp	r2, r3
 801022a:	d008      	beq.n	801023e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801022c:	4b07      	ldr	r3, [pc, #28]	; (801024c <ip4_input_accept+0x50>)
 801022e:	695b      	ldr	r3, [r3, #20]
 8010230:	6879      	ldr	r1, [r7, #4]
 8010232:	4618      	mov	r0, r3
 8010234:	f000 fa08 	bl	8010648 <ip4_addr_isbroadcast_u32>
 8010238:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801023a:	2b00      	cmp	r3, #0
 801023c:	d001      	beq.n	8010242 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801023e:	2301      	movs	r3, #1
 8010240:	e000      	b.n	8010244 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010242:	2300      	movs	r3, #0
}
 8010244:	4618      	mov	r0, r3
 8010246:	3708      	adds	r7, #8
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	20005114 	.word	0x20005114

08010250 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b086      	sub	sp, #24
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	091b      	lsrs	r3, r3, #4
 8010266:	b2db      	uxtb	r3, r3
 8010268:	2b04      	cmp	r3, #4
 801026a:	d004      	beq.n	8010276 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7f8 ff83 	bl	8009178 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010272:	2300      	movs	r3, #0
 8010274:	e107      	b.n	8010486 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	f003 030f 	and.w	r3, r3, #15
 801027e:	b2db      	uxtb	r3, r3
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	b2db      	uxtb	r3, r3
 8010284:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	885b      	ldrh	r3, [r3, #2]
 801028a:	b29b      	uxth	r3, r3
 801028c:	4618      	mov	r0, r3
 801028e:	f7f7 fb6f 	bl	8007970 <lwip_htons>
 8010292:	4603      	mov	r3, r0
 8010294:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	891b      	ldrh	r3, [r3, #8]
 801029a:	89ba      	ldrh	r2, [r7, #12]
 801029c:	429a      	cmp	r2, r3
 801029e:	d204      	bcs.n	80102aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80102a0:	89bb      	ldrh	r3, [r7, #12]
 80102a2:	4619      	mov	r1, r3
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f7f8 fde1 	bl	8008e6c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	895b      	ldrh	r3, [r3, #10]
 80102ae:	89fa      	ldrh	r2, [r7, #14]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d807      	bhi.n	80102c4 <ip4_input+0x74>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	891b      	ldrh	r3, [r3, #8]
 80102b8:	89ba      	ldrh	r2, [r7, #12]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d802      	bhi.n	80102c4 <ip4_input+0x74>
 80102be:	89fb      	ldrh	r3, [r7, #14]
 80102c0:	2b13      	cmp	r3, #19
 80102c2:	d804      	bhi.n	80102ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f7f8 ff57 	bl	8009178 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80102ca:	2300      	movs	r3, #0
 80102cc:	e0db      	b.n	8010486 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	691b      	ldr	r3, [r3, #16]
 80102d2:	4a6f      	ldr	r2, [pc, #444]	; (8010490 <ip4_input+0x240>)
 80102d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	4a6d      	ldr	r2, [pc, #436]	; (8010490 <ip4_input+0x240>)
 80102dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80102de:	4b6c      	ldr	r3, [pc, #432]	; (8010490 <ip4_input+0x240>)
 80102e0:	695b      	ldr	r3, [r3, #20]
 80102e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102e6:	2be0      	cmp	r3, #224	; 0xe0
 80102e8:	d112      	bne.n	8010310 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80102f0:	f003 0301 	and.w	r3, r3, #1
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d007      	beq.n	801030a <ip4_input+0xba>
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	3304      	adds	r3, #4
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d002      	beq.n	801030a <ip4_input+0xba>
      netif = inp;
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	613b      	str	r3, [r7, #16]
 8010308:	e02a      	b.n	8010360 <ip4_input+0x110>
    } else {
      netif = NULL;
 801030a:	2300      	movs	r3, #0
 801030c:	613b      	str	r3, [r7, #16]
 801030e:	e027      	b.n	8010360 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010310:	6838      	ldr	r0, [r7, #0]
 8010312:	f7ff ff73 	bl	80101fc <ip4_input_accept>
 8010316:	4603      	mov	r3, r0
 8010318:	2b00      	cmp	r3, #0
 801031a:	d002      	beq.n	8010322 <ip4_input+0xd2>
      netif = inp;
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	613b      	str	r3, [r7, #16]
 8010320:	e01e      	b.n	8010360 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010322:	2300      	movs	r3, #0
 8010324:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010326:	4b5a      	ldr	r3, [pc, #360]	; (8010490 <ip4_input+0x240>)
 8010328:	695b      	ldr	r3, [r3, #20]
 801032a:	b2db      	uxtb	r3, r3
 801032c:	2b7f      	cmp	r3, #127	; 0x7f
 801032e:	d017      	beq.n	8010360 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010330:	4b58      	ldr	r3, [pc, #352]	; (8010494 <ip4_input+0x244>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	613b      	str	r3, [r7, #16]
 8010336:	e00e      	b.n	8010356 <ip4_input+0x106>
          if (netif == inp) {
 8010338:	693a      	ldr	r2, [r7, #16]
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	429a      	cmp	r2, r3
 801033e:	d006      	beq.n	801034e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010340:	6938      	ldr	r0, [r7, #16]
 8010342:	f7ff ff5b 	bl	80101fc <ip4_input_accept>
 8010346:	4603      	mov	r3, r0
 8010348:	2b00      	cmp	r3, #0
 801034a:	d108      	bne.n	801035e <ip4_input+0x10e>
 801034c:	e000      	b.n	8010350 <ip4_input+0x100>
            continue;
 801034e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	613b      	str	r3, [r7, #16]
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1ed      	bne.n	8010338 <ip4_input+0xe8>
 801035c:	e000      	b.n	8010360 <ip4_input+0x110>
            break;
 801035e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010360:	4b4b      	ldr	r3, [pc, #300]	; (8010490 <ip4_input+0x240>)
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	6839      	ldr	r1, [r7, #0]
 8010366:	4618      	mov	r0, r3
 8010368:	f000 f96e 	bl	8010648 <ip4_addr_isbroadcast_u32>
 801036c:	4603      	mov	r3, r0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d105      	bne.n	801037e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010372:	4b47      	ldr	r3, [pc, #284]	; (8010490 <ip4_input+0x240>)
 8010374:	691b      	ldr	r3, [r3, #16]
 8010376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801037a:	2be0      	cmp	r3, #224	; 0xe0
 801037c:	d104      	bne.n	8010388 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f7f8 fefa 	bl	8009178 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010384:	2300      	movs	r3, #0
 8010386:	e07e      	b.n	8010486 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d104      	bne.n	8010398 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7f8 fef2 	bl	8009178 <pbuf_free>
    return ERR_OK;
 8010394:	2300      	movs	r3, #0
 8010396:	e076      	b.n	8010486 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	88db      	ldrh	r3, [r3, #6]
 801039c:	b29b      	uxth	r3, r3
 801039e:	461a      	mov	r2, r3
 80103a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80103a4:	4013      	ands	r3, r2
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00b      	beq.n	80103c2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 fc92 	bl	8010cd4 <ip4_reass>
 80103b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d101      	bne.n	80103bc <ip4_input+0x16c>
      return ERR_OK;
 80103b8:	2300      	movs	r3, #0
 80103ba:	e064      	b.n	8010486 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80103c2:	4a33      	ldr	r2, [pc, #204]	; (8010490 <ip4_input+0x240>)
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80103c8:	4a31      	ldr	r2, [pc, #196]	; (8010490 <ip4_input+0x240>)
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80103ce:	4a30      	ldr	r2, [pc, #192]	; (8010490 <ip4_input+0x240>)
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	f003 030f 	and.w	r3, r3, #15
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	009b      	lsls	r3, r3, #2
 80103e0:	b2db      	uxtb	r3, r3
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	4b2a      	ldr	r3, [pc, #168]	; (8010490 <ip4_input+0x240>)
 80103e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80103e8:	89fb      	ldrh	r3, [r7, #14]
 80103ea:	4619      	mov	r1, r3
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7f8 fe3d 	bl	800906c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	7a5b      	ldrb	r3, [r3, #9]
 80103f6:	2b11      	cmp	r3, #17
 80103f8:	d006      	beq.n	8010408 <ip4_input+0x1b8>
 80103fa:	2b11      	cmp	r3, #17
 80103fc:	dc13      	bgt.n	8010426 <ip4_input+0x1d6>
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d00c      	beq.n	801041c <ip4_input+0x1cc>
 8010402:	2b06      	cmp	r3, #6
 8010404:	d005      	beq.n	8010412 <ip4_input+0x1c2>
 8010406:	e00e      	b.n	8010426 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010408:	6839      	ldr	r1, [r7, #0]
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7fe fc5e 	bl	800eccc <udp_input>
        break;
 8010410:	e026      	b.n	8010460 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010412:	6839      	ldr	r1, [r7, #0]
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f7fa fcd7 	bl	800adc8 <tcp_input>
        break;
 801041a:	e021      	b.n	8010460 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801041c:	6839      	ldr	r1, [r7, #0]
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7ff fce4 	bl	800fdec <icmp_input>
        break;
 8010424:	e01c      	b.n	8010460 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010426:	4b1a      	ldr	r3, [pc, #104]	; (8010490 <ip4_input+0x240>)
 8010428:	695b      	ldr	r3, [r3, #20]
 801042a:	6939      	ldr	r1, [r7, #16]
 801042c:	4618      	mov	r0, r3
 801042e:	f000 f90b 	bl	8010648 <ip4_addr_isbroadcast_u32>
 8010432:	4603      	mov	r3, r0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d10f      	bne.n	8010458 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010438:	4b15      	ldr	r3, [pc, #84]	; (8010490 <ip4_input+0x240>)
 801043a:	695b      	ldr	r3, [r3, #20]
 801043c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010440:	2be0      	cmp	r3, #224	; 0xe0
 8010442:	d009      	beq.n	8010458 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010444:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010448:	4619      	mov	r1, r3
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f7f8 fe81 	bl	8009152 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010450:	2102      	movs	r1, #2
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f7ff fdd8 	bl	8010008 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f7f8 fe8d 	bl	8009178 <pbuf_free>
        break;
 801045e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010460:	4b0b      	ldr	r3, [pc, #44]	; (8010490 <ip4_input+0x240>)
 8010462:	2200      	movs	r2, #0
 8010464:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010466:	4b0a      	ldr	r3, [pc, #40]	; (8010490 <ip4_input+0x240>)
 8010468:	2200      	movs	r2, #0
 801046a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801046c:	4b08      	ldr	r3, [pc, #32]	; (8010490 <ip4_input+0x240>)
 801046e:	2200      	movs	r2, #0
 8010470:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010472:	4b07      	ldr	r3, [pc, #28]	; (8010490 <ip4_input+0x240>)
 8010474:	2200      	movs	r2, #0
 8010476:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010478:	4b05      	ldr	r3, [pc, #20]	; (8010490 <ip4_input+0x240>)
 801047a:	2200      	movs	r2, #0
 801047c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801047e:	4b04      	ldr	r3, [pc, #16]	; (8010490 <ip4_input+0x240>)
 8010480:	2200      	movs	r2, #0
 8010482:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	3718      	adds	r7, #24
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	20005114 	.word	0x20005114
 8010494:	20008024 	.word	0x20008024

08010498 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b08a      	sub	sp, #40	; 0x28
 801049c:	af04      	add	r7, sp, #16
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	607a      	str	r2, [r7, #4]
 80104a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d009      	beq.n	80104c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d003      	beq.n	80104be <ip4_output_if+0x26>
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d102      	bne.n	80104c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80104be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c0:	3304      	adds	r3, #4
 80104c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80104c4:	78fa      	ldrb	r2, [r7, #3]
 80104c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c8:	9302      	str	r3, [sp, #8]
 80104ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104ce:	9301      	str	r3, [sp, #4]
 80104d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104d4:	9300      	str	r3, [sp, #0]
 80104d6:	4613      	mov	r3, r2
 80104d8:	687a      	ldr	r2, [r7, #4]
 80104da:	6979      	ldr	r1, [r7, #20]
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	f000 f805 	bl	80104ec <ip4_output_if_src>
 80104e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3718      	adds	r7, #24
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b088      	sub	sp, #32
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	607a      	str	r2, [r7, #4]
 80104f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	7b9b      	ldrb	r3, [r3, #14]
 80104fe:	2b01      	cmp	r3, #1
 8010500:	d006      	beq.n	8010510 <ip4_output_if_src+0x24>
 8010502:	4b4b      	ldr	r3, [pc, #300]	; (8010630 <ip4_output_if_src+0x144>)
 8010504:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010508:	494a      	ldr	r1, [pc, #296]	; (8010634 <ip4_output_if_src+0x148>)
 801050a:	484b      	ldr	r0, [pc, #300]	; (8010638 <ip4_output_if_src+0x14c>)
 801050c:	f001 f93e 	bl	801178c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d060      	beq.n	80105d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010516:	2314      	movs	r3, #20
 8010518:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801051a:	2114      	movs	r1, #20
 801051c:	68f8      	ldr	r0, [r7, #12]
 801051e:	f7f8 fd95 	bl	800904c <pbuf_add_header>
 8010522:	4603      	mov	r3, r0
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010528:	f06f 0301 	mvn.w	r3, #1
 801052c:	e07c      	b.n	8010628 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	895b      	ldrh	r3, [r3, #10]
 8010538:	2b13      	cmp	r3, #19
 801053a:	d806      	bhi.n	801054a <ip4_output_if_src+0x5e>
 801053c:	4b3c      	ldr	r3, [pc, #240]	; (8010630 <ip4_output_if_src+0x144>)
 801053e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010542:	493e      	ldr	r1, [pc, #248]	; (801063c <ip4_output_if_src+0x150>)
 8010544:	483c      	ldr	r0, [pc, #240]	; (8010638 <ip4_output_if_src+0x14c>)
 8010546:	f001 f921 	bl	801178c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	78fa      	ldrb	r2, [r7, #3]
 801054e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010556:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010560:	8b7b      	ldrh	r3, [r7, #26]
 8010562:	089b      	lsrs	r3, r3, #2
 8010564:	b29b      	uxth	r3, r3
 8010566:	b2db      	uxtb	r3, r3
 8010568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801056c:	b2da      	uxtb	r2, r3
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010572:	69fb      	ldr	r3, [r7, #28]
 8010574:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010578:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	891b      	ldrh	r3, [r3, #8]
 801057e:	4618      	mov	r0, r3
 8010580:	f7f7 f9f6 	bl	8007970 <lwip_htons>
 8010584:	4603      	mov	r3, r0
 8010586:	461a      	mov	r2, r3
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801058c:	69fb      	ldr	r3, [r7, #28]
 801058e:	2200      	movs	r2, #0
 8010590:	719a      	strb	r2, [r3, #6]
 8010592:	2200      	movs	r2, #0
 8010594:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010596:	4b2a      	ldr	r3, [pc, #168]	; (8010640 <ip4_output_if_src+0x154>)
 8010598:	881b      	ldrh	r3, [r3, #0]
 801059a:	4618      	mov	r0, r3
 801059c:	f7f7 f9e8 	bl	8007970 <lwip_htons>
 80105a0:	4603      	mov	r3, r0
 80105a2:	461a      	mov	r2, r3
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80105a8:	4b25      	ldr	r3, [pc, #148]	; (8010640 <ip4_output_if_src+0x154>)
 80105aa:	881b      	ldrh	r3, [r3, #0]
 80105ac:	3301      	adds	r3, #1
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	4b23      	ldr	r3, [pc, #140]	; (8010640 <ip4_output_if_src+0x154>)
 80105b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d104      	bne.n	80105c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80105ba:	4b22      	ldr	r3, [pc, #136]	; (8010644 <ip4_output_if_src+0x158>)
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	69fb      	ldr	r3, [r7, #28]
 80105c0:	60da      	str	r2, [r3, #12]
 80105c2:	e003      	b.n	80105cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	2200      	movs	r2, #0
 80105d0:	729a      	strb	r2, [r3, #10]
 80105d2:	2200      	movs	r2, #0
 80105d4:	72da      	strb	r2, [r3, #11]
 80105d6:	e00f      	b.n	80105f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	895b      	ldrh	r3, [r3, #10]
 80105dc:	2b13      	cmp	r3, #19
 80105de:	d802      	bhi.n	80105e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80105e0:	f06f 0301 	mvn.w	r3, #1
 80105e4:	e020      	b.n	8010628 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	691b      	ldr	r3, [r3, #16]
 80105f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80105f2:	f107 0314 	add.w	r3, r7, #20
 80105f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80105f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00c      	beq.n	801061a <ip4_output_if_src+0x12e>
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	891a      	ldrh	r2, [r3, #8]
 8010604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010606:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010608:	429a      	cmp	r2, r3
 801060a:	d906      	bls.n	801061a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801060c:	687a      	ldr	r2, [r7, #4]
 801060e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f000 fd53 	bl	80110bc <ip4_frag>
 8010616:	4603      	mov	r3, r0
 8010618:	e006      	b.n	8010628 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801061a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061c:	695b      	ldr	r3, [r3, #20]
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	68f9      	ldr	r1, [r7, #12]
 8010622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010624:	4798      	blx	r3
 8010626:	4603      	mov	r3, r0
}
 8010628:	4618      	mov	r0, r3
 801062a:	3720      	adds	r7, #32
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}
 8010630:	080153d0 	.word	0x080153d0
 8010634:	08015404 	.word	0x08015404
 8010638:	08015410 	.word	0x08015410
 801063c:	08015438 	.word	0x08015438
 8010640:	20008182 	.word	0x20008182
 8010644:	08015818 	.word	0x08015818

08010648 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010648:	b480      	push	{r7}
 801064a:	b085      	sub	sp, #20
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801065c:	d002      	beq.n	8010664 <ip4_addr_isbroadcast_u32+0x1c>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d101      	bne.n	8010668 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010664:	2301      	movs	r3, #1
 8010666:	e02a      	b.n	80106be <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801066e:	f003 0302 	and.w	r3, r3, #2
 8010672:	2b00      	cmp	r3, #0
 8010674:	d101      	bne.n	801067a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010676:	2300      	movs	r3, #0
 8010678:	e021      	b.n	80106be <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	3304      	adds	r3, #4
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	429a      	cmp	r2, r3
 8010684:	d101      	bne.n	801068a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010686:	2300      	movs	r3, #0
 8010688:	e019      	b.n	80106be <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801068a:	68fa      	ldr	r2, [r7, #12]
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	3304      	adds	r3, #4
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	405a      	eors	r2, r3
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	3308      	adds	r3, #8
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	4013      	ands	r3, r2
 801069c:	2b00      	cmp	r3, #0
 801069e:	d10d      	bne.n	80106bc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	3308      	adds	r3, #8
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	43da      	mvns	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	3308      	adds	r3, #8
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d101      	bne.n	80106bc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80106b8:	2301      	movs	r3, #1
 80106ba:	e000      	b.n	80106be <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80106bc:	2300      	movs	r3, #0
  }
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3714      	adds	r7, #20
 80106c2:	46bd      	mov	sp, r7
 80106c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c8:	4770      	bx	lr
	...

080106cc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80106d2:	2300      	movs	r3, #0
 80106d4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80106d6:	4b12      	ldr	r3, [pc, #72]	; (8010720 <ip_reass_tmr+0x54>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80106dc:	e018      	b.n	8010710 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	7fdb      	ldrb	r3, [r3, #31]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00b      	beq.n	80106fe <ip_reass_tmr+0x32>
      r->timer--;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	7fdb      	ldrb	r3, [r3, #31]
 80106ea:	3b01      	subs	r3, #1
 80106ec:	b2da      	uxtb	r2, r3
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	60fb      	str	r3, [r7, #12]
 80106fc:	e008      	b.n	8010710 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010708:	68b9      	ldr	r1, [r7, #8]
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f000 f80a 	bl	8010724 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d1e3      	bne.n	80106de <ip_reass_tmr+0x12>
    }
  }
}
 8010716:	bf00      	nop
 8010718:	bf00      	nop
 801071a:	3710      	adds	r7, #16
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}
 8010720:	20008184 	.word	0x20008184

08010724 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b088      	sub	sp, #32
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801072e:	2300      	movs	r3, #0
 8010730:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010732:	683a      	ldr	r2, [r7, #0]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	429a      	cmp	r2, r3
 8010738:	d105      	bne.n	8010746 <ip_reass_free_complete_datagram+0x22>
 801073a:	4b45      	ldr	r3, [pc, #276]	; (8010850 <ip_reass_free_complete_datagram+0x12c>)
 801073c:	22ab      	movs	r2, #171	; 0xab
 801073e:	4945      	ldr	r1, [pc, #276]	; (8010854 <ip_reass_free_complete_datagram+0x130>)
 8010740:	4845      	ldr	r0, [pc, #276]	; (8010858 <ip_reass_free_complete_datagram+0x134>)
 8010742:	f001 f823 	bl	801178c <iprintf>
  if (prev != NULL) {
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d00a      	beq.n	8010762 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	687a      	ldr	r2, [r7, #4]
 8010752:	429a      	cmp	r2, r3
 8010754:	d005      	beq.n	8010762 <ip_reass_free_complete_datagram+0x3e>
 8010756:	4b3e      	ldr	r3, [pc, #248]	; (8010850 <ip_reass_free_complete_datagram+0x12c>)
 8010758:	22ad      	movs	r2, #173	; 0xad
 801075a:	4940      	ldr	r1, [pc, #256]	; (801085c <ip_reass_free_complete_datagram+0x138>)
 801075c:	483e      	ldr	r0, [pc, #248]	; (8010858 <ip_reass_free_complete_datagram+0x134>)
 801075e:	f001 f815 	bl	801178c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	889b      	ldrh	r3, [r3, #4]
 801076e:	b29b      	uxth	r3, r3
 8010770:	2b00      	cmp	r3, #0
 8010772:	d12a      	bne.n	80107ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010782:	69bb      	ldr	r3, [r7, #24]
 8010784:	6858      	ldr	r0, [r3, #4]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	3308      	adds	r3, #8
 801078a:	2214      	movs	r2, #20
 801078c:	4619      	mov	r1, r3
 801078e:	f000 feed 	bl	801156c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010792:	2101      	movs	r1, #1
 8010794:	69b8      	ldr	r0, [r7, #24]
 8010796:	f7ff fc47 	bl	8010028 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801079a:	69b8      	ldr	r0, [r7, #24]
 801079c:	f7f8 fd74 	bl	8009288 <pbuf_clen>
 80107a0:	4603      	mov	r3, r0
 80107a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80107a4:	8bfa      	ldrh	r2, [r7, #30]
 80107a6:	8a7b      	ldrh	r3, [r7, #18]
 80107a8:	4413      	add	r3, r2
 80107aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107ae:	db05      	blt.n	80107bc <ip_reass_free_complete_datagram+0x98>
 80107b0:	4b27      	ldr	r3, [pc, #156]	; (8010850 <ip_reass_free_complete_datagram+0x12c>)
 80107b2:	22bc      	movs	r2, #188	; 0xbc
 80107b4:	492a      	ldr	r1, [pc, #168]	; (8010860 <ip_reass_free_complete_datagram+0x13c>)
 80107b6:	4828      	ldr	r0, [pc, #160]	; (8010858 <ip_reass_free_complete_datagram+0x134>)
 80107b8:	f000 ffe8 	bl	801178c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80107bc:	8bfa      	ldrh	r2, [r7, #30]
 80107be:	8a7b      	ldrh	r3, [r7, #18]
 80107c0:	4413      	add	r3, r2
 80107c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80107c4:	69b8      	ldr	r0, [r7, #24]
 80107c6:	f7f8 fcd7 	bl	8009178 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80107d0:	e01f      	b.n	8010812 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80107d8:	69bb      	ldr	r3, [r7, #24]
 80107da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80107e2:	68f8      	ldr	r0, [r7, #12]
 80107e4:	f7f8 fd50 	bl	8009288 <pbuf_clen>
 80107e8:	4603      	mov	r3, r0
 80107ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80107ec:	8bfa      	ldrh	r2, [r7, #30]
 80107ee:	8a7b      	ldrh	r3, [r7, #18]
 80107f0:	4413      	add	r3, r2
 80107f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107f6:	db05      	blt.n	8010804 <ip_reass_free_complete_datagram+0xe0>
 80107f8:	4b15      	ldr	r3, [pc, #84]	; (8010850 <ip_reass_free_complete_datagram+0x12c>)
 80107fa:	22cc      	movs	r2, #204	; 0xcc
 80107fc:	4918      	ldr	r1, [pc, #96]	; (8010860 <ip_reass_free_complete_datagram+0x13c>)
 80107fe:	4816      	ldr	r0, [pc, #88]	; (8010858 <ip_reass_free_complete_datagram+0x134>)
 8010800:	f000 ffc4 	bl	801178c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010804:	8bfa      	ldrh	r2, [r7, #30]
 8010806:	8a7b      	ldrh	r3, [r7, #18]
 8010808:	4413      	add	r3, r2
 801080a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801080c:	68f8      	ldr	r0, [r7, #12]
 801080e:	f7f8 fcb3 	bl	8009178 <pbuf_free>
  while (p != NULL) {
 8010812:	69bb      	ldr	r3, [r7, #24]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1dc      	bne.n	80107d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010818:	6839      	ldr	r1, [r7, #0]
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 f8c2 	bl	80109a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010820:	4b10      	ldr	r3, [pc, #64]	; (8010864 <ip_reass_free_complete_datagram+0x140>)
 8010822:	881b      	ldrh	r3, [r3, #0]
 8010824:	8bfa      	ldrh	r2, [r7, #30]
 8010826:	429a      	cmp	r2, r3
 8010828:	d905      	bls.n	8010836 <ip_reass_free_complete_datagram+0x112>
 801082a:	4b09      	ldr	r3, [pc, #36]	; (8010850 <ip_reass_free_complete_datagram+0x12c>)
 801082c:	22d2      	movs	r2, #210	; 0xd2
 801082e:	490e      	ldr	r1, [pc, #56]	; (8010868 <ip_reass_free_complete_datagram+0x144>)
 8010830:	4809      	ldr	r0, [pc, #36]	; (8010858 <ip_reass_free_complete_datagram+0x134>)
 8010832:	f000 ffab 	bl	801178c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010836:	4b0b      	ldr	r3, [pc, #44]	; (8010864 <ip_reass_free_complete_datagram+0x140>)
 8010838:	881a      	ldrh	r2, [r3, #0]
 801083a:	8bfb      	ldrh	r3, [r7, #30]
 801083c:	1ad3      	subs	r3, r2, r3
 801083e:	b29a      	uxth	r2, r3
 8010840:	4b08      	ldr	r3, [pc, #32]	; (8010864 <ip_reass_free_complete_datagram+0x140>)
 8010842:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010844:	8bfb      	ldrh	r3, [r7, #30]
}
 8010846:	4618      	mov	r0, r3
 8010848:	3720      	adds	r7, #32
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop
 8010850:	08015468 	.word	0x08015468
 8010854:	080154a4 	.word	0x080154a4
 8010858:	080154b0 	.word	0x080154b0
 801085c:	080154d8 	.word	0x080154d8
 8010860:	080154ec 	.word	0x080154ec
 8010864:	20008188 	.word	0x20008188
 8010868:	0801550c 	.word	0x0801550c

0801086c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b08a      	sub	sp, #40	; 0x28
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010876:	2300      	movs	r3, #0
 8010878:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801087a:	2300      	movs	r3, #0
 801087c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801087e:	2300      	movs	r3, #0
 8010880:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010882:	2300      	movs	r3, #0
 8010884:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010886:	2300      	movs	r3, #0
 8010888:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801088a:	4b28      	ldr	r3, [pc, #160]	; (801092c <ip_reass_remove_oldest_datagram+0xc0>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010890:	e030      	b.n	80108f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010894:	695a      	ldr	r2, [r3, #20]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	429a      	cmp	r2, r3
 801089c:	d10c      	bne.n	80108b8 <ip_reass_remove_oldest_datagram+0x4c>
 801089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a0:	699a      	ldr	r2, [r3, #24]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	691b      	ldr	r3, [r3, #16]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d106      	bne.n	80108b8 <ip_reass_remove_oldest_datagram+0x4c>
 80108aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ac:	899a      	ldrh	r2, [r3, #12]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	889b      	ldrh	r3, [r3, #4]
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d014      	beq.n	80108e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	3301      	adds	r3, #1
 80108bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80108be:	6a3b      	ldr	r3, [r7, #32]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d104      	bne.n	80108ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80108c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	61bb      	str	r3, [r7, #24]
 80108cc:	e009      	b.n	80108e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80108ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d0:	7fda      	ldrb	r2, [r3, #31]
 80108d2:	6a3b      	ldr	r3, [r7, #32]
 80108d4:	7fdb      	ldrb	r3, [r3, #31]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d803      	bhi.n	80108e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80108da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80108e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d001      	beq.n	80108ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80108ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80108ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d1cb      	bne.n	8010892 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80108fa:	6a3b      	ldr	r3, [r7, #32]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d008      	beq.n	8010912 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010900:	69b9      	ldr	r1, [r7, #24]
 8010902:	6a38      	ldr	r0, [r7, #32]
 8010904:	f7ff ff0e 	bl	8010724 <ip_reass_free_complete_datagram>
 8010908:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801090a:	697a      	ldr	r2, [r7, #20]
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	4413      	add	r3, r2
 8010910:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010912:	697a      	ldr	r2, [r7, #20]
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	429a      	cmp	r2, r3
 8010918:	da02      	bge.n	8010920 <ip_reass_remove_oldest_datagram+0xb4>
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	2b01      	cmp	r3, #1
 801091e:	dcac      	bgt.n	801087a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010920:	697b      	ldr	r3, [r7, #20]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3728      	adds	r7, #40	; 0x28
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	20008184 	.word	0x20008184

08010930 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801093a:	2004      	movs	r0, #4
 801093c:	f7f7 fd36 	bl	80083ac <memp_malloc>
 8010940:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d110      	bne.n	801096a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010948:	6839      	ldr	r1, [r7, #0]
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7ff ff8e 	bl	801086c <ip_reass_remove_oldest_datagram>
 8010950:	4602      	mov	r2, r0
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	4293      	cmp	r3, r2
 8010956:	dc03      	bgt.n	8010960 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010958:	2004      	movs	r0, #4
 801095a:	f7f7 fd27 	bl	80083ac <memp_malloc>
 801095e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d101      	bne.n	801096a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010966:	2300      	movs	r3, #0
 8010968:	e016      	b.n	8010998 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801096a:	2220      	movs	r2, #32
 801096c:	2100      	movs	r1, #0
 801096e:	68f8      	ldr	r0, [r7, #12]
 8010970:	f000 fe24 	bl	80115bc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	220f      	movs	r2, #15
 8010978:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801097a:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <ip_reass_enqueue_new_datagram+0x70>)
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010982:	4a07      	ldr	r2, [pc, #28]	; (80109a0 <ip_reass_enqueue_new_datagram+0x70>)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	3308      	adds	r3, #8
 801098c:	2214      	movs	r2, #20
 801098e:	6879      	ldr	r1, [r7, #4]
 8010990:	4618      	mov	r0, r3
 8010992:	f000 fdeb 	bl	801156c <memcpy>
  return ipr;
 8010996:	68fb      	ldr	r3, [r7, #12]
}
 8010998:	4618      	mov	r0, r3
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	20008184 	.word	0x20008184

080109a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80109ae:	4b10      	ldr	r3, [pc, #64]	; (80109f0 <ip_reass_dequeue_datagram+0x4c>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d104      	bne.n	80109c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a0c      	ldr	r2, [pc, #48]	; (80109f0 <ip_reass_dequeue_datagram+0x4c>)
 80109be:	6013      	str	r3, [r2, #0]
 80109c0:	e00d      	b.n	80109de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d106      	bne.n	80109d6 <ip_reass_dequeue_datagram+0x32>
 80109c8:	4b0a      	ldr	r3, [pc, #40]	; (80109f4 <ip_reass_dequeue_datagram+0x50>)
 80109ca:	f240 1245 	movw	r2, #325	; 0x145
 80109ce:	490a      	ldr	r1, [pc, #40]	; (80109f8 <ip_reass_dequeue_datagram+0x54>)
 80109d0:	480a      	ldr	r0, [pc, #40]	; (80109fc <ip_reass_dequeue_datagram+0x58>)
 80109d2:	f000 fedb 	bl	801178c <iprintf>
    prev->next = ipr->next;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681a      	ldr	r2, [r3, #0]
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80109de:	6879      	ldr	r1, [r7, #4]
 80109e0:	2004      	movs	r0, #4
 80109e2:	f7f7 fd53 	bl	800848c <memp_free>
}
 80109e6:	bf00      	nop
 80109e8:	3708      	adds	r7, #8
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	20008184 	.word	0x20008184
 80109f4:	08015468 	.word	0x08015468
 80109f8:	08015530 	.word	0x08015530
 80109fc:	080154b0 	.word	0x080154b0

08010a00 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b08c      	sub	sp, #48	; 0x30
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	60f8      	str	r0, [r7, #12]
 8010a08:	60b9      	str	r1, [r7, #8]
 8010a0a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010a10:	2301      	movs	r3, #1
 8010a12:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	885b      	ldrh	r3, [r3, #2]
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7f6 ffa5 	bl	8007970 <lwip_htons>
 8010a26:	4603      	mov	r3, r0
 8010a28:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	f003 030f 	and.w	r3, r3, #15
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	009b      	lsls	r3, r3, #2
 8010a36:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010a38:	7e7b      	ldrb	r3, [r7, #25]
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	8b7a      	ldrh	r2, [r7, #26]
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d202      	bcs.n	8010a48 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a42:	f04f 33ff 	mov.w	r3, #4294967295
 8010a46:	e135      	b.n	8010cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010a48:	7e7b      	ldrb	r3, [r7, #25]
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	8b7a      	ldrh	r2, [r7, #26]
 8010a4e:	1ad3      	subs	r3, r2, r3
 8010a50:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	88db      	ldrh	r3, [r3, #6]
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7f6 ff89 	bl	8007970 <lwip_htons>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a64:	b29b      	uxth	r3, r3
 8010a66:	00db      	lsls	r3, r3, #3
 8010a68:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a72:	2200      	movs	r2, #0
 8010a74:	701a      	strb	r2, [r3, #0]
 8010a76:	2200      	movs	r2, #0
 8010a78:	705a      	strb	r2, [r3, #1]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	709a      	strb	r2, [r3, #2]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a84:	8afa      	ldrh	r2, [r7, #22]
 8010a86:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010a88:	8afa      	ldrh	r2, [r7, #22]
 8010a8a:	8b7b      	ldrh	r3, [r7, #26]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	b29a      	uxth	r2, r3
 8010a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a92:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a96:	88db      	ldrh	r3, [r3, #6]
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	8afa      	ldrh	r2, [r7, #22]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d902      	bls.n	8010aa6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa4:	e106      	b.n	8010cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8010aac:	e068      	b.n	8010b80 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab6:	889b      	ldrh	r3, [r3, #4]
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	889b      	ldrh	r3, [r3, #4]
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d235      	bcs.n	8010b30 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ac8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d020      	beq.n	8010b12 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad2:	889b      	ldrh	r3, [r3, #4]
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad8:	88db      	ldrh	r3, [r3, #6]
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d307      	bcc.n	8010af0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae2:	88db      	ldrh	r3, [r3, #6]
 8010ae4:	b29a      	uxth	r2, r3
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	889b      	ldrh	r3, [r3, #4]
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d902      	bls.n	8010af6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010af0:	f04f 33ff 	mov.w	r3, #4294967295
 8010af4:	e0de      	b.n	8010cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af8:	68ba      	ldr	r2, [r7, #8]
 8010afa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010afe:	88db      	ldrh	r3, [r3, #6]
 8010b00:	b29a      	uxth	r2, r3
 8010b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b04:	889b      	ldrh	r3, [r3, #4]
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d03d      	beq.n	8010b88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010b10:	e03a      	b.n	8010b88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b14:	88db      	ldrh	r3, [r3, #6]
 8010b16:	b29a      	uxth	r2, r3
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	889b      	ldrh	r3, [r3, #4]
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d902      	bls.n	8010b28 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b22:	f04f 33ff 	mov.w	r3, #4294967295
 8010b26:	e0c5      	b.n	8010cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	68ba      	ldr	r2, [r7, #8]
 8010b2c:	605a      	str	r2, [r3, #4]
      break;
 8010b2e:	e02b      	b.n	8010b88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b32:	889b      	ldrh	r3, [r3, #4]
 8010b34:	b29a      	uxth	r2, r3
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	889b      	ldrh	r3, [r3, #4]
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d102      	bne.n	8010b46 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b40:	f04f 33ff 	mov.w	r3, #4294967295
 8010b44:	e0b6      	b.n	8010cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b48:	889b      	ldrh	r3, [r3, #4]
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	88db      	ldrh	r3, [r3, #6]
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d202      	bcs.n	8010b5c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b56:	f04f 33ff 	mov.w	r3, #4294967295
 8010b5a:	e0ab      	b.n	8010cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d009      	beq.n	8010b76 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b64:	88db      	ldrh	r3, [r3, #6]
 8010b66:	b29a      	uxth	r2, r3
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	889b      	ldrh	r3, [r3, #4]
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d001      	beq.n	8010b76 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010b72:	2300      	movs	r3, #0
 8010b74:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d193      	bne.n	8010aae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010b86:	e000      	b.n	8010b8a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010b88:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d12d      	bne.n	8010bec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d01c      	beq.n	8010bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b98:	88db      	ldrh	r3, [r3, #6]
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9e:	889b      	ldrh	r3, [r3, #4]
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d906      	bls.n	8010bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010ba6:	4b45      	ldr	r3, [pc, #276]	; (8010cbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010ba8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010bac:	4944      	ldr	r1, [pc, #272]	; (8010cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010bae:	4845      	ldr	r0, [pc, #276]	; (8010cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010bb0:	f000 fdec 	bl	801178c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb6:	68ba      	ldr	r2, [r7, #8]
 8010bb8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbc:	88db      	ldrh	r3, [r3, #6]
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc2:	889b      	ldrh	r3, [r3, #4]
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d010      	beq.n	8010bec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	623b      	str	r3, [r7, #32]
 8010bce:	e00d      	b.n	8010bec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d006      	beq.n	8010be6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010bd8:	4b38      	ldr	r3, [pc, #224]	; (8010cbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010bda:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010bde:	493a      	ldr	r1, [pc, #232]	; (8010cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010be0:	4838      	ldr	r0, [pc, #224]	; (8010cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010be2:	f000 fdd3 	bl	801178c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d105      	bne.n	8010bfe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	7f9b      	ldrb	r3, [r3, #30]
 8010bf6:	f003 0301 	and.w	r3, r3, #1
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d059      	beq.n	8010cb2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010bfe:	6a3b      	ldr	r3, [r7, #32]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d04f      	beq.n	8010ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d006      	beq.n	8010c1a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	889b      	ldrh	r3, [r3, #4]
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d002      	beq.n	8010c20 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	623b      	str	r3, [r7, #32]
 8010c1e:	e041      	b.n	8010ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c22:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010c2a:	e012      	b.n	8010c52 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c34:	88db      	ldrh	r3, [r3, #6]
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3a:	889b      	ldrh	r3, [r3, #4]
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d002      	beq.n	8010c48 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010c42:	2300      	movs	r3, #0
 8010c44:	623b      	str	r3, [r7, #32]
            break;
 8010c46:	e007      	b.n	8010c58 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d1e9      	bne.n	8010c2c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010c58:	6a3b      	ldr	r3, [r7, #32]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d022      	beq.n	8010ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d106      	bne.n	8010c74 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010c66:	4b15      	ldr	r3, [pc, #84]	; (8010cbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c68:	f240 12df 	movw	r2, #479	; 0x1df
 8010c6c:	4917      	ldr	r1, [pc, #92]	; (8010ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010c6e:	4815      	ldr	r0, [pc, #84]	; (8010cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c70:	f000 fd8c 	bl	801178c <iprintf>
          LWIP_ASSERT("sanity check",
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d106      	bne.n	8010c8e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010c80:	4b0e      	ldr	r3, [pc, #56]	; (8010cbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010c86:	4911      	ldr	r1, [pc, #68]	; (8010ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010c88:	480e      	ldr	r0, [pc, #56]	; (8010cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c8a:	f000 fd7f 	bl	801178c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d006      	beq.n	8010ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010c96:	4b09      	ldr	r3, [pc, #36]	; (8010cbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c98:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010c9c:	490c      	ldr	r1, [pc, #48]	; (8010cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010c9e:	4809      	ldr	r0, [pc, #36]	; (8010cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010ca0:	f000 fd74 	bl	801178c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	bf14      	ite	ne
 8010caa:	2301      	movne	r3, #1
 8010cac:	2300      	moveq	r3, #0
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	e000      	b.n	8010cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010cb2:	2300      	movs	r3, #0
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3730      	adds	r7, #48	; 0x30
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	08015468 	.word	0x08015468
 8010cc0:	0801554c 	.word	0x0801554c
 8010cc4:	080154b0 	.word	0x080154b0
 8010cc8:	0801556c 	.word	0x0801556c
 8010ccc:	080155a4 	.word	0x080155a4
 8010cd0:	080155b4 	.word	0x080155b4

08010cd4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b08e      	sub	sp, #56	; 0x38
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	f003 030f 	and.w	r3, r3, #15
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	2b14      	cmp	r3, #20
 8010cf2:	f040 8171 	bne.w	8010fd8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf8:	88db      	ldrh	r3, [r3, #6]
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7f6 fe37 	bl	8007970 <lwip_htons>
 8010d02:	4603      	mov	r3, r0
 8010d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	00db      	lsls	r3, r3, #3
 8010d0c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d10:	885b      	ldrh	r3, [r3, #2]
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7f6 fe2b 	bl	8007970 <lwip_htons>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	f003 030f 	and.w	r3, r3, #15
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010d36:	429a      	cmp	r2, r3
 8010d38:	f0c0 8150 	bcc.w	8010fdc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010d44:	1ad3      	subs	r3, r2, r3
 8010d46:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f7f8 fa9d 	bl	8009288 <pbuf_clen>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010d52:	4b8c      	ldr	r3, [pc, #560]	; (8010f84 <ip4_reass+0x2b0>)
 8010d54:	881b      	ldrh	r3, [r3, #0]
 8010d56:	461a      	mov	r2, r3
 8010d58:	8c3b      	ldrh	r3, [r7, #32]
 8010d5a:	4413      	add	r3, r2
 8010d5c:	2b0a      	cmp	r3, #10
 8010d5e:	dd10      	ble.n	8010d82 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010d60:	8c3b      	ldrh	r3, [r7, #32]
 8010d62:	4619      	mov	r1, r3
 8010d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d66:	f7ff fd81 	bl	801086c <ip_reass_remove_oldest_datagram>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f000 8137 	beq.w	8010fe0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010d72:	4b84      	ldr	r3, [pc, #528]	; (8010f84 <ip4_reass+0x2b0>)
 8010d74:	881b      	ldrh	r3, [r3, #0]
 8010d76:	461a      	mov	r2, r3
 8010d78:	8c3b      	ldrh	r3, [r7, #32]
 8010d7a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010d7c:	2b0a      	cmp	r3, #10
 8010d7e:	f300 812f 	bgt.w	8010fe0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010d82:	4b81      	ldr	r3, [pc, #516]	; (8010f88 <ip4_reass+0x2b4>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	633b      	str	r3, [r7, #48]	; 0x30
 8010d88:	e015      	b.n	8010db6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8c:	695a      	ldr	r2, [r3, #20]
 8010d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d90:	68db      	ldr	r3, [r3, #12]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d10c      	bne.n	8010db0 <ip4_reass+0xdc>
 8010d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d98:	699a      	ldr	r2, [r3, #24]
 8010d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9c:	691b      	ldr	r3, [r3, #16]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d106      	bne.n	8010db0 <ip4_reass+0xdc>
 8010da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da4:	899a      	ldrh	r2, [r3, #12]
 8010da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da8:	889b      	ldrh	r3, [r3, #4]
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d006      	beq.n	8010dbe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	633b      	str	r3, [r7, #48]	; 0x30
 8010db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d1e6      	bne.n	8010d8a <ip4_reass+0xb6>
 8010dbc:	e000      	b.n	8010dc0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010dbe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d109      	bne.n	8010dda <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010dc6:	8c3b      	ldrh	r3, [r7, #32]
 8010dc8:	4619      	mov	r1, r3
 8010dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dcc:	f7ff fdb0 	bl	8010930 <ip_reass_enqueue_new_datagram>
 8010dd0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d11c      	bne.n	8010e12 <ip4_reass+0x13e>
      goto nullreturn;
 8010dd8:	e105      	b.n	8010fe6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ddc:	88db      	ldrh	r3, [r3, #6]
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f6 fdc5 	bl	8007970 <lwip_htons>
 8010de6:	4603      	mov	r3, r0
 8010de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d110      	bne.n	8010e12 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df2:	89db      	ldrh	r3, [r3, #14]
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7f6 fdbb 	bl	8007970 <lwip_htons>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d006      	beq.n	8010e12 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e06:	3308      	adds	r3, #8
 8010e08:	2214      	movs	r2, #20
 8010e0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f000 fbad 	bl	801156c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e14:	88db      	ldrh	r3, [r3, #6]
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	f003 0320 	and.w	r3, r3, #32
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	bf0c      	ite	eq
 8010e20:	2301      	moveq	r3, #1
 8010e22:	2300      	movne	r3, #0
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010e28:	69fb      	ldr	r3, [r7, #28]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d00e      	beq.n	8010e4c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010e2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e32:	4413      	add	r3, r2
 8010e34:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010e36:	8b7a      	ldrh	r2, [r7, #26]
 8010e38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	f0c0 80a0 	bcc.w	8010f80 <ip4_reass+0x2ac>
 8010e40:	8b7b      	ldrh	r3, [r7, #26]
 8010e42:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010e46:	4293      	cmp	r3, r2
 8010e48:	f200 809a 	bhi.w	8010f80 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010e4c:	69fa      	ldr	r2, [r7, #28]
 8010e4e:	6879      	ldr	r1, [r7, #4]
 8010e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e52:	f7ff fdd5 	bl	8010a00 <ip_reass_chain_frag_into_datagram_and_validate>
 8010e56:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e5e:	f000 809b 	beq.w	8010f98 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010e62:	4b48      	ldr	r3, [pc, #288]	; (8010f84 <ip4_reass+0x2b0>)
 8010e64:	881a      	ldrh	r2, [r3, #0]
 8010e66:	8c3b      	ldrh	r3, [r7, #32]
 8010e68:	4413      	add	r3, r2
 8010e6a:	b29a      	uxth	r2, r3
 8010e6c:	4b45      	ldr	r3, [pc, #276]	; (8010f84 <ip4_reass+0x2b0>)
 8010e6e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010e70:	69fb      	ldr	r3, [r7, #28]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d00d      	beq.n	8010e92 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010e76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e7a:	4413      	add	r3, r2
 8010e7c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e80:	8a7a      	ldrh	r2, [r7, #18]
 8010e82:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e86:	7f9b      	ldrb	r3, [r3, #30]
 8010e88:	f043 0301 	orr.w	r3, r3, #1
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e90:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d171      	bne.n	8010f7c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9a:	8b9b      	ldrh	r3, [r3, #28]
 8010e9c:	3314      	adds	r3, #20
 8010e9e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb4:	3308      	adds	r3, #8
 8010eb6:	2214      	movs	r2, #20
 8010eb8:	4619      	mov	r1, r3
 8010eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ebc:	f000 fb56 	bl	801156c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010ec0:	8a3b      	ldrh	r3, [r7, #16]
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7f6 fd54 	bl	8007970 <lwip_htons>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	461a      	mov	r2, r3
 8010ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ece:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	719a      	strb	r2, [r3, #6]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010edc:	2200      	movs	r2, #0
 8010ede:	729a      	strb	r2, [r3, #10]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010eea:	e00d      	b.n	8010f08 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010ef2:	2114      	movs	r1, #20
 8010ef4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ef6:	f7f8 f8b9 	bl	800906c <pbuf_remove_header>
      pbuf_cat(p, r);
 8010efa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f7f8 f9fd 	bl	80092fc <pbuf_cat>
      r = iprh->next_pbuf;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d1ee      	bne.n	8010eec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010f0e:	4b1e      	ldr	r3, [pc, #120]	; (8010f88 <ip4_reass+0x2b4>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d102      	bne.n	8010f1e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f1c:	e010      	b.n	8010f40 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010f1e:	4b1a      	ldr	r3, [pc, #104]	; (8010f88 <ip4_reass+0x2b4>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f24:	e007      	b.n	8010f36 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d006      	beq.n	8010f3e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d1f4      	bne.n	8010f26 <ip4_reass+0x252>
 8010f3c:	e000      	b.n	8010f40 <ip4_reass+0x26c>
          break;
 8010f3e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010f40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f44:	f7ff fd2e 	bl	80109a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f7f8 f99d 	bl	8009288 <pbuf_clen>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010f52:	4b0c      	ldr	r3, [pc, #48]	; (8010f84 <ip4_reass+0x2b0>)
 8010f54:	881b      	ldrh	r3, [r3, #0]
 8010f56:	8c3a      	ldrh	r2, [r7, #32]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d906      	bls.n	8010f6a <ip4_reass+0x296>
 8010f5c:	4b0b      	ldr	r3, [pc, #44]	; (8010f8c <ip4_reass+0x2b8>)
 8010f5e:	f240 229b 	movw	r2, #667	; 0x29b
 8010f62:	490b      	ldr	r1, [pc, #44]	; (8010f90 <ip4_reass+0x2bc>)
 8010f64:	480b      	ldr	r0, [pc, #44]	; (8010f94 <ip4_reass+0x2c0>)
 8010f66:	f000 fc11 	bl	801178c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010f6a:	4b06      	ldr	r3, [pc, #24]	; (8010f84 <ip4_reass+0x2b0>)
 8010f6c:	881a      	ldrh	r2, [r3, #0]
 8010f6e:	8c3b      	ldrh	r3, [r7, #32]
 8010f70:	1ad3      	subs	r3, r2, r3
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	4b03      	ldr	r3, [pc, #12]	; (8010f84 <ip4_reass+0x2b0>)
 8010f76:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	e038      	b.n	8010fee <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	e036      	b.n	8010fee <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010f80:	bf00      	nop
 8010f82:	e00a      	b.n	8010f9a <ip4_reass+0x2c6>
 8010f84:	20008188 	.word	0x20008188
 8010f88:	20008184 	.word	0x20008184
 8010f8c:	08015468 	.word	0x08015468
 8010f90:	080155d8 	.word	0x080155d8
 8010f94:	080154b0 	.word	0x080154b0
    goto nullreturn_ipr;
 8010f98:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d106      	bne.n	8010fae <ip4_reass+0x2da>
 8010fa0:	4b15      	ldr	r3, [pc, #84]	; (8010ff8 <ip4_reass+0x324>)
 8010fa2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010fa6:	4915      	ldr	r1, [pc, #84]	; (8010ffc <ip4_reass+0x328>)
 8010fa8:	4815      	ldr	r0, [pc, #84]	; (8011000 <ip4_reass+0x32c>)
 8010faa:	f000 fbef 	bl	801178c <iprintf>
  if (ipr->p == NULL) {
 8010fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d116      	bne.n	8010fe4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010fb6:	4b13      	ldr	r3, [pc, #76]	; (8011004 <ip4_reass+0x330>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d006      	beq.n	8010fce <ip4_reass+0x2fa>
 8010fc0:	4b0d      	ldr	r3, [pc, #52]	; (8010ff8 <ip4_reass+0x324>)
 8010fc2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010fc6:	4910      	ldr	r1, [pc, #64]	; (8011008 <ip4_reass+0x334>)
 8010fc8:	480d      	ldr	r0, [pc, #52]	; (8011000 <ip4_reass+0x32c>)
 8010fca:	f000 fbdf 	bl	801178c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010fce:	2100      	movs	r1, #0
 8010fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fd2:	f7ff fce7 	bl	80109a4 <ip_reass_dequeue_datagram>
 8010fd6:	e006      	b.n	8010fe6 <ip4_reass+0x312>
    goto nullreturn;
 8010fd8:	bf00      	nop
 8010fda:	e004      	b.n	8010fe6 <ip4_reass+0x312>
    goto nullreturn;
 8010fdc:	bf00      	nop
 8010fde:	e002      	b.n	8010fe6 <ip4_reass+0x312>
      goto nullreturn;
 8010fe0:	bf00      	nop
 8010fe2:	e000      	b.n	8010fe6 <ip4_reass+0x312>
  }

nullreturn:
 8010fe4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f7f8 f8c6 	bl	8009178 <pbuf_free>
  return NULL;
 8010fec:	2300      	movs	r3, #0
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3738      	adds	r7, #56	; 0x38
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	08015468 	.word	0x08015468
 8010ffc:	080155f4 	.word	0x080155f4
 8011000:	080154b0 	.word	0x080154b0
 8011004:	20008184 	.word	0x20008184
 8011008:	08015600 	.word	0x08015600

0801100c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011010:	2005      	movs	r0, #5
 8011012:	f7f7 f9cb 	bl	80083ac <memp_malloc>
 8011016:	4603      	mov	r3, r0
}
 8011018:	4618      	mov	r0, r3
 801101a:	bd80      	pop	{r7, pc}

0801101c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d106      	bne.n	8011038 <ip_frag_free_pbuf_custom_ref+0x1c>
 801102a:	4b07      	ldr	r3, [pc, #28]	; (8011048 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801102c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011030:	4906      	ldr	r1, [pc, #24]	; (801104c <ip_frag_free_pbuf_custom_ref+0x30>)
 8011032:	4807      	ldr	r0, [pc, #28]	; (8011050 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011034:	f000 fbaa 	bl	801178c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011038:	6879      	ldr	r1, [r7, #4]
 801103a:	2005      	movs	r0, #5
 801103c:	f7f7 fa26 	bl	800848c <memp_free>
}
 8011040:	bf00      	nop
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	08015468 	.word	0x08015468
 801104c:	08015620 	.word	0x08015620
 8011050:	080154b0 	.word	0x080154b0

08011054 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d106      	bne.n	8011074 <ipfrag_free_pbuf_custom+0x20>
 8011066:	4b11      	ldr	r3, [pc, #68]	; (80110ac <ipfrag_free_pbuf_custom+0x58>)
 8011068:	f240 22ce 	movw	r2, #718	; 0x2ce
 801106c:	4910      	ldr	r1, [pc, #64]	; (80110b0 <ipfrag_free_pbuf_custom+0x5c>)
 801106e:	4811      	ldr	r0, [pc, #68]	; (80110b4 <ipfrag_free_pbuf_custom+0x60>)
 8011070:	f000 fb8c 	bl	801178c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	429a      	cmp	r2, r3
 801107a:	d006      	beq.n	801108a <ipfrag_free_pbuf_custom+0x36>
 801107c:	4b0b      	ldr	r3, [pc, #44]	; (80110ac <ipfrag_free_pbuf_custom+0x58>)
 801107e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011082:	490d      	ldr	r1, [pc, #52]	; (80110b8 <ipfrag_free_pbuf_custom+0x64>)
 8011084:	480b      	ldr	r0, [pc, #44]	; (80110b4 <ipfrag_free_pbuf_custom+0x60>)
 8011086:	f000 fb81 	bl	801178c <iprintf>
  if (pcr->original != NULL) {
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	695b      	ldr	r3, [r3, #20]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d004      	beq.n	801109c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	695b      	ldr	r3, [r3, #20]
 8011096:	4618      	mov	r0, r3
 8011098:	f7f8 f86e 	bl	8009178 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801109c:	68f8      	ldr	r0, [r7, #12]
 801109e:	f7ff ffbd 	bl	801101c <ip_frag_free_pbuf_custom_ref>
}
 80110a2:	bf00      	nop
 80110a4:	3710      	adds	r7, #16
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	08015468 	.word	0x08015468
 80110b0:	0801562c 	.word	0x0801562c
 80110b4:	080154b0 	.word	0x080154b0
 80110b8:	08015638 	.word	0x08015638

080110bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b094      	sub	sp, #80	; 0x50
 80110c0:	af02      	add	r7, sp, #8
 80110c2:	60f8      	str	r0, [r7, #12]
 80110c4:	60b9      	str	r1, [r7, #8]
 80110c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80110c8:	2300      	movs	r3, #0
 80110ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80110d2:	3b14      	subs	r3, #20
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	da00      	bge.n	80110da <ip4_frag+0x1e>
 80110d8:	3307      	adds	r3, #7
 80110da:	10db      	asrs	r3, r3, #3
 80110dc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80110de:	2314      	movs	r3, #20
 80110e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80110e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80110ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	f003 030f 	and.w	r3, r3, #15
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	009b      	lsls	r3, r3, #2
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	2b14      	cmp	r3, #20
 80110fc:	d002      	beq.n	8011104 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80110fe:	f06f 0305 	mvn.w	r3, #5
 8011102:	e110      	b.n	8011326 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	895b      	ldrh	r3, [r3, #10]
 8011108:	2b13      	cmp	r3, #19
 801110a:	d809      	bhi.n	8011120 <ip4_frag+0x64>
 801110c:	4b88      	ldr	r3, [pc, #544]	; (8011330 <ip4_frag+0x274>)
 801110e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011112:	4988      	ldr	r1, [pc, #544]	; (8011334 <ip4_frag+0x278>)
 8011114:	4888      	ldr	r0, [pc, #544]	; (8011338 <ip4_frag+0x27c>)
 8011116:	f000 fb39 	bl	801178c <iprintf>
 801111a:	f06f 0305 	mvn.w	r3, #5
 801111e:	e102      	b.n	8011326 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011122:	88db      	ldrh	r3, [r3, #6]
 8011124:	b29b      	uxth	r3, r3
 8011126:	4618      	mov	r0, r3
 8011128:	f7f6 fc22 	bl	8007970 <lwip_htons>
 801112c:	4603      	mov	r3, r0
 801112e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011130:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011132:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011136:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801113a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801113c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011140:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	891b      	ldrh	r3, [r3, #8]
 8011146:	3b14      	subs	r3, #20
 8011148:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801114c:	e0e1      	b.n	8011312 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801114e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011150:	00db      	lsls	r3, r3, #3
 8011152:	b29b      	uxth	r3, r3
 8011154:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011158:	4293      	cmp	r3, r2
 801115a:	bf28      	it	cs
 801115c:	4613      	movcs	r3, r2
 801115e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011160:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011164:	2114      	movs	r1, #20
 8011166:	200e      	movs	r0, #14
 8011168:	f7f7 fd22 	bl	8008bb0 <pbuf_alloc>
 801116c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011170:	2b00      	cmp	r3, #0
 8011172:	f000 80d5 	beq.w	8011320 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011178:	895b      	ldrh	r3, [r3, #10]
 801117a:	2b13      	cmp	r3, #19
 801117c:	d806      	bhi.n	801118c <ip4_frag+0xd0>
 801117e:	4b6c      	ldr	r3, [pc, #432]	; (8011330 <ip4_frag+0x274>)
 8011180:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011184:	496d      	ldr	r1, [pc, #436]	; (801133c <ip4_frag+0x280>)
 8011186:	486c      	ldr	r0, [pc, #432]	; (8011338 <ip4_frag+0x27c>)
 8011188:	f000 fb00 	bl	801178c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	2214      	movs	r2, #20
 8011192:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011194:	4618      	mov	r0, r3
 8011196:	f000 f9e9 	bl	801156c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80111a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80111a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80111a6:	e064      	b.n	8011272 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	895a      	ldrh	r2, [r3, #10]
 80111ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	895b      	ldrh	r3, [r3, #10]
 80111b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d906      	bls.n	80111ca <ip4_frag+0x10e>
 80111bc:	4b5c      	ldr	r3, [pc, #368]	; (8011330 <ip4_frag+0x274>)
 80111be:	f240 322d 	movw	r2, #813	; 0x32d
 80111c2:	495f      	ldr	r1, [pc, #380]	; (8011340 <ip4_frag+0x284>)
 80111c4:	485c      	ldr	r0, [pc, #368]	; (8011338 <ip4_frag+0x27c>)
 80111c6:	f000 fae1 	bl	801178c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80111ca:	8bfa      	ldrh	r2, [r7, #30]
 80111cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80111d0:	4293      	cmp	r3, r2
 80111d2:	bf28      	it	cs
 80111d4:	4613      	movcs	r3, r2
 80111d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80111da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d105      	bne.n	80111ee <ip4_frag+0x132>
        poff = 0;
 80111e2:	2300      	movs	r3, #0
 80111e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	60fb      	str	r3, [r7, #12]
        continue;
 80111ec:	e041      	b.n	8011272 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80111ee:	f7ff ff0d 	bl	801100c <ip_frag_alloc_pbuf_custom_ref>
 80111f2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80111f4:	69bb      	ldr	r3, [r7, #24]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d103      	bne.n	8011202 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80111fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111fc:	f7f7 ffbc 	bl	8009178 <pbuf_free>
        goto memerr;
 8011200:	e08f      	b.n	8011322 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011202:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011208:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801120a:	4413      	add	r3, r2
 801120c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011210:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011214:	9201      	str	r2, [sp, #4]
 8011216:	9300      	str	r3, [sp, #0]
 8011218:	4603      	mov	r3, r0
 801121a:	2241      	movs	r2, #65	; 0x41
 801121c:	2000      	movs	r0, #0
 801121e:	f7f7 fdf1 	bl	8008e04 <pbuf_alloced_custom>
 8011222:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d106      	bne.n	8011238 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801122a:	69b8      	ldr	r0, [r7, #24]
 801122c:	f7ff fef6 	bl	801101c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011232:	f7f7 ffa1 	bl	8009178 <pbuf_free>
        goto memerr;
 8011236:	e074      	b.n	8011322 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011238:	68f8      	ldr	r0, [r7, #12]
 801123a:	f7f8 f83d 	bl	80092b8 <pbuf_ref>
      pcr->original = p;
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	68fa      	ldr	r2, [r7, #12]
 8011242:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011244:	69bb      	ldr	r3, [r7, #24]
 8011246:	4a3f      	ldr	r2, [pc, #252]	; (8011344 <ip4_frag+0x288>)
 8011248:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801124a:	6979      	ldr	r1, [r7, #20]
 801124c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801124e:	f7f8 f855 	bl	80092fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011252:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011256:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011260:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011264:	2b00      	cmp	r3, #0
 8011266:	d004      	beq.n	8011272 <ip4_frag+0x1b6>
        poff = 0;
 8011268:	2300      	movs	r3, #0
 801126a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011272:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011276:	2b00      	cmp	r3, #0
 8011278:	d196      	bne.n	80111a8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801127a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801127c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011280:	4413      	add	r3, r2
 8011282:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011288:	f1a3 0213 	sub.w	r2, r3, #19
 801128c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011290:	429a      	cmp	r2, r3
 8011292:	bfcc      	ite	gt
 8011294:	2301      	movgt	r3, #1
 8011296:	2300      	movle	r3, #0
 8011298:	b2db      	uxtb	r3, r3
 801129a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801129c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80112a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80112a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80112a6:	6a3b      	ldr	r3, [r7, #32]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d002      	beq.n	80112b2 <ip4_frag+0x1f6>
 80112ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d003      	beq.n	80112ba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80112b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80112b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80112ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112bc:	4618      	mov	r0, r3
 80112be:	f7f6 fb57 	bl	8007970 <lwip_htons>
 80112c2:	4603      	mov	r3, r0
 80112c4:	461a      	mov	r2, r3
 80112c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80112ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80112cc:	3314      	adds	r3, #20
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7f6 fb4d 	bl	8007970 <lwip_htons>
 80112d6:	4603      	mov	r3, r0
 80112d8:	461a      	mov	r2, r3
 80112da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112dc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80112de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e0:	2200      	movs	r2, #0
 80112e2:	729a      	strb	r2, [r3, #10]
 80112e4:	2200      	movs	r2, #0
 80112e6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	695b      	ldr	r3, [r3, #20]
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112f0:	68b8      	ldr	r0, [r7, #8]
 80112f2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80112f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112f6:	f7f7 ff3f 	bl	8009178 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80112fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011300:	1ad3      	subs	r3, r2, r3
 8011302:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011306:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801130a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801130c:	4413      	add	r3, r2
 801130e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011312:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011316:	2b00      	cmp	r3, #0
 8011318:	f47f af19 	bne.w	801114e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801131c:	2300      	movs	r3, #0
 801131e:	e002      	b.n	8011326 <ip4_frag+0x26a>
      goto memerr;
 8011320:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011326:	4618      	mov	r0, r3
 8011328:	3748      	adds	r7, #72	; 0x48
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	08015468 	.word	0x08015468
 8011334:	08015644 	.word	0x08015644
 8011338:	080154b0 	.word	0x080154b0
 801133c:	08015660 	.word	0x08015660
 8011340:	08015680 	.word	0x08015680
 8011344:	08011055 	.word	0x08011055

08011348 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b086      	sub	sp, #24
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011352:	230e      	movs	r3, #14
 8011354:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	895b      	ldrh	r3, [r3, #10]
 801135a:	2b0e      	cmp	r3, #14
 801135c:	d96e      	bls.n	801143c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	7bdb      	ldrb	r3, [r3, #15]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d106      	bne.n	8011374 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801136c:	3301      	adds	r3, #1
 801136e:	b2da      	uxtb	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	685b      	ldr	r3, [r3, #4]
 8011378:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	7b1a      	ldrb	r2, [r3, #12]
 801137e:	7b5b      	ldrb	r3, [r3, #13]
 8011380:	021b      	lsls	r3, r3, #8
 8011382:	4313      	orrs	r3, r2
 8011384:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	f003 0301 	and.w	r3, r3, #1
 801138e:	2b00      	cmp	r3, #0
 8011390:	d023      	beq.n	80113da <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	2b01      	cmp	r3, #1
 8011398:	d10f      	bne.n	80113ba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	785b      	ldrb	r3, [r3, #1]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d11b      	bne.n	80113da <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80113a6:	2b5e      	cmp	r3, #94	; 0x5e
 80113a8:	d117      	bne.n	80113da <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	7b5b      	ldrb	r3, [r3, #13]
 80113ae:	f043 0310 	orr.w	r3, r3, #16
 80113b2:	b2da      	uxtb	r2, r3
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	735a      	strb	r2, [r3, #13]
 80113b8:	e00f      	b.n	80113da <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	2206      	movs	r2, #6
 80113be:	4928      	ldr	r1, [pc, #160]	; (8011460 <ethernet_input+0x118>)
 80113c0:	4618      	mov	r0, r3
 80113c2:	f000 f8c3 	bl	801154c <memcmp>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d106      	bne.n	80113da <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	7b5b      	ldrb	r3, [r3, #13]
 80113d0:	f043 0308 	orr.w	r3, r3, #8
 80113d4:	b2da      	uxtb	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80113da:	89fb      	ldrh	r3, [r7, #14]
 80113dc:	2b08      	cmp	r3, #8
 80113de:	d003      	beq.n	80113e8 <ethernet_input+0xa0>
 80113e0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80113e4:	d014      	beq.n	8011410 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80113e6:	e032      	b.n	801144e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113ee:	f003 0308 	and.w	r3, r3, #8
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d024      	beq.n	8011440 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80113f6:	8afb      	ldrh	r3, [r7, #22]
 80113f8:	4619      	mov	r1, r3
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f7f7 fe36 	bl	800906c <pbuf_remove_header>
 8011400:	4603      	mov	r3, r0
 8011402:	2b00      	cmp	r3, #0
 8011404:	d11e      	bne.n	8011444 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011406:	6839      	ldr	r1, [r7, #0]
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f7fe ff21 	bl	8010250 <ip4_input>
      break;
 801140e:	e013      	b.n	8011438 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011416:	f003 0308 	and.w	r3, r3, #8
 801141a:	2b00      	cmp	r3, #0
 801141c:	d014      	beq.n	8011448 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801141e:	8afb      	ldrh	r3, [r7, #22]
 8011420:	4619      	mov	r1, r3
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f7f7 fe22 	bl	800906c <pbuf_remove_header>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d10e      	bne.n	801144c <ethernet_input+0x104>
        etharp_input(p, netif);
 801142e:	6839      	ldr	r1, [r7, #0]
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f7fe f8b7 	bl	800f5a4 <etharp_input>
      break;
 8011436:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011438:	2300      	movs	r3, #0
 801143a:	e00c      	b.n	8011456 <ethernet_input+0x10e>
    goto free_and_return;
 801143c:	bf00      	nop
 801143e:	e006      	b.n	801144e <ethernet_input+0x106>
        goto free_and_return;
 8011440:	bf00      	nop
 8011442:	e004      	b.n	801144e <ethernet_input+0x106>
        goto free_and_return;
 8011444:	bf00      	nop
 8011446:	e002      	b.n	801144e <ethernet_input+0x106>
        goto free_and_return;
 8011448:	bf00      	nop
 801144a:	e000      	b.n	801144e <ethernet_input+0x106>
        goto free_and_return;
 801144c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f7f7 fe92 	bl	8009178 <pbuf_free>
  return ERR_OK;
 8011454:	2300      	movs	r3, #0
}
 8011456:	4618      	mov	r0, r3
 8011458:	3718      	adds	r7, #24
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	0801581c 	.word	0x0801581c

08011464 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011464:	b580      	push	{r7, lr}
 8011466:	b086      	sub	sp, #24
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
 8011470:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011472:	8c3b      	ldrh	r3, [r7, #32]
 8011474:	4618      	mov	r0, r3
 8011476:	f7f6 fa7b 	bl	8007970 <lwip_htons>
 801147a:	4603      	mov	r3, r0
 801147c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801147e:	210e      	movs	r1, #14
 8011480:	68b8      	ldr	r0, [r7, #8]
 8011482:	f7f7 fde3 	bl	800904c <pbuf_add_header>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d125      	bne.n	80114d8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	8afa      	ldrh	r2, [r7, #22]
 8011496:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	2206      	movs	r2, #6
 801149c:	6839      	ldr	r1, [r7, #0]
 801149e:	4618      	mov	r0, r3
 80114a0:	f000 f864 	bl	801156c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	3306      	adds	r3, #6
 80114a8:	2206      	movs	r2, #6
 80114aa:	6879      	ldr	r1, [r7, #4]
 80114ac:	4618      	mov	r0, r3
 80114ae:	f000 f85d 	bl	801156c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80114b8:	2b06      	cmp	r3, #6
 80114ba:	d006      	beq.n	80114ca <ethernet_output+0x66>
 80114bc:	4b0a      	ldr	r3, [pc, #40]	; (80114e8 <ethernet_output+0x84>)
 80114be:	f44f 7299 	mov.w	r2, #306	; 0x132
 80114c2:	490a      	ldr	r1, [pc, #40]	; (80114ec <ethernet_output+0x88>)
 80114c4:	480a      	ldr	r0, [pc, #40]	; (80114f0 <ethernet_output+0x8c>)
 80114c6:	f000 f961 	bl	801178c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	699b      	ldr	r3, [r3, #24]
 80114ce:	68b9      	ldr	r1, [r7, #8]
 80114d0:	68f8      	ldr	r0, [r7, #12]
 80114d2:	4798      	blx	r3
 80114d4:	4603      	mov	r3, r0
 80114d6:	e002      	b.n	80114de <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80114d8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80114da:	f06f 0301 	mvn.w	r3, #1
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3718      	adds	r7, #24
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	08015690 	.word	0x08015690
 80114ec:	080156c8 	.word	0x080156c8
 80114f0:	080156fc 	.word	0x080156fc

080114f4 <__libc_init_array>:
 80114f4:	b570      	push	{r4, r5, r6, lr}
 80114f6:	4d0d      	ldr	r5, [pc, #52]	; (801152c <__libc_init_array+0x38>)
 80114f8:	4c0d      	ldr	r4, [pc, #52]	; (8011530 <__libc_init_array+0x3c>)
 80114fa:	1b64      	subs	r4, r4, r5
 80114fc:	10a4      	asrs	r4, r4, #2
 80114fe:	2600      	movs	r6, #0
 8011500:	42a6      	cmp	r6, r4
 8011502:	d109      	bne.n	8011518 <__libc_init_array+0x24>
 8011504:	4d0b      	ldr	r5, [pc, #44]	; (8011534 <__libc_init_array+0x40>)
 8011506:	4c0c      	ldr	r4, [pc, #48]	; (8011538 <__libc_init_array+0x44>)
 8011508:	f001 fae0 	bl	8012acc <_init>
 801150c:	1b64      	subs	r4, r4, r5
 801150e:	10a4      	asrs	r4, r4, #2
 8011510:	2600      	movs	r6, #0
 8011512:	42a6      	cmp	r6, r4
 8011514:	d105      	bne.n	8011522 <__libc_init_array+0x2e>
 8011516:	bd70      	pop	{r4, r5, r6, pc}
 8011518:	f855 3b04 	ldr.w	r3, [r5], #4
 801151c:	4798      	blx	r3
 801151e:	3601      	adds	r6, #1
 8011520:	e7ee      	b.n	8011500 <__libc_init_array+0xc>
 8011522:	f855 3b04 	ldr.w	r3, [r5], #4
 8011526:	4798      	blx	r3
 8011528:	3601      	adds	r6, #1
 801152a:	e7f2      	b.n	8011512 <__libc_init_array+0x1e>
 801152c:	08015a7c 	.word	0x08015a7c
 8011530:	08015a7c 	.word	0x08015a7c
 8011534:	08015a7c 	.word	0x08015a7c
 8011538:	08015a80 	.word	0x08015a80

0801153c <malloc>:
 801153c:	4b02      	ldr	r3, [pc, #8]	; (8011548 <malloc+0xc>)
 801153e:	4601      	mov	r1, r0
 8011540:	6818      	ldr	r0, [r3, #0]
 8011542:	f000 b8af 	b.w	80116a4 <_malloc_r>
 8011546:	bf00      	nop
 8011548:	200000bc 	.word	0x200000bc

0801154c <memcmp>:
 801154c:	b510      	push	{r4, lr}
 801154e:	3901      	subs	r1, #1
 8011550:	4402      	add	r2, r0
 8011552:	4290      	cmp	r0, r2
 8011554:	d101      	bne.n	801155a <memcmp+0xe>
 8011556:	2000      	movs	r0, #0
 8011558:	e005      	b.n	8011566 <memcmp+0x1a>
 801155a:	7803      	ldrb	r3, [r0, #0]
 801155c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011560:	42a3      	cmp	r3, r4
 8011562:	d001      	beq.n	8011568 <memcmp+0x1c>
 8011564:	1b18      	subs	r0, r3, r4
 8011566:	bd10      	pop	{r4, pc}
 8011568:	3001      	adds	r0, #1
 801156a:	e7f2      	b.n	8011552 <memcmp+0x6>

0801156c <memcpy>:
 801156c:	440a      	add	r2, r1
 801156e:	4291      	cmp	r1, r2
 8011570:	f100 33ff 	add.w	r3, r0, #4294967295
 8011574:	d100      	bne.n	8011578 <memcpy+0xc>
 8011576:	4770      	bx	lr
 8011578:	b510      	push	{r4, lr}
 801157a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801157e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011582:	4291      	cmp	r1, r2
 8011584:	d1f9      	bne.n	801157a <memcpy+0xe>
 8011586:	bd10      	pop	{r4, pc}

08011588 <memmove>:
 8011588:	4288      	cmp	r0, r1
 801158a:	b510      	push	{r4, lr}
 801158c:	eb01 0402 	add.w	r4, r1, r2
 8011590:	d902      	bls.n	8011598 <memmove+0x10>
 8011592:	4284      	cmp	r4, r0
 8011594:	4623      	mov	r3, r4
 8011596:	d807      	bhi.n	80115a8 <memmove+0x20>
 8011598:	1e43      	subs	r3, r0, #1
 801159a:	42a1      	cmp	r1, r4
 801159c:	d008      	beq.n	80115b0 <memmove+0x28>
 801159e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80115a6:	e7f8      	b.n	801159a <memmove+0x12>
 80115a8:	4402      	add	r2, r0
 80115aa:	4601      	mov	r1, r0
 80115ac:	428a      	cmp	r2, r1
 80115ae:	d100      	bne.n	80115b2 <memmove+0x2a>
 80115b0:	bd10      	pop	{r4, pc}
 80115b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80115b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80115ba:	e7f7      	b.n	80115ac <memmove+0x24>

080115bc <memset>:
 80115bc:	4402      	add	r2, r0
 80115be:	4603      	mov	r3, r0
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d100      	bne.n	80115c6 <memset+0xa>
 80115c4:	4770      	bx	lr
 80115c6:	f803 1b01 	strb.w	r1, [r3], #1
 80115ca:	e7f9      	b.n	80115c0 <memset+0x4>

080115cc <_free_r>:
 80115cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115ce:	2900      	cmp	r1, #0
 80115d0:	d044      	beq.n	801165c <_free_r+0x90>
 80115d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115d6:	9001      	str	r0, [sp, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f1a1 0404 	sub.w	r4, r1, #4
 80115de:	bfb8      	it	lt
 80115e0:	18e4      	addlt	r4, r4, r3
 80115e2:	f000 fb05 	bl	8011bf0 <__malloc_lock>
 80115e6:	4a1e      	ldr	r2, [pc, #120]	; (8011660 <_free_r+0x94>)
 80115e8:	9801      	ldr	r0, [sp, #4]
 80115ea:	6813      	ldr	r3, [r2, #0]
 80115ec:	b933      	cbnz	r3, 80115fc <_free_r+0x30>
 80115ee:	6063      	str	r3, [r4, #4]
 80115f0:	6014      	str	r4, [r2, #0]
 80115f2:	b003      	add	sp, #12
 80115f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80115f8:	f000 bb00 	b.w	8011bfc <__malloc_unlock>
 80115fc:	42a3      	cmp	r3, r4
 80115fe:	d908      	bls.n	8011612 <_free_r+0x46>
 8011600:	6825      	ldr	r5, [r4, #0]
 8011602:	1961      	adds	r1, r4, r5
 8011604:	428b      	cmp	r3, r1
 8011606:	bf01      	itttt	eq
 8011608:	6819      	ldreq	r1, [r3, #0]
 801160a:	685b      	ldreq	r3, [r3, #4]
 801160c:	1949      	addeq	r1, r1, r5
 801160e:	6021      	streq	r1, [r4, #0]
 8011610:	e7ed      	b.n	80115ee <_free_r+0x22>
 8011612:	461a      	mov	r2, r3
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	b10b      	cbz	r3, 801161c <_free_r+0x50>
 8011618:	42a3      	cmp	r3, r4
 801161a:	d9fa      	bls.n	8011612 <_free_r+0x46>
 801161c:	6811      	ldr	r1, [r2, #0]
 801161e:	1855      	adds	r5, r2, r1
 8011620:	42a5      	cmp	r5, r4
 8011622:	d10b      	bne.n	801163c <_free_r+0x70>
 8011624:	6824      	ldr	r4, [r4, #0]
 8011626:	4421      	add	r1, r4
 8011628:	1854      	adds	r4, r2, r1
 801162a:	42a3      	cmp	r3, r4
 801162c:	6011      	str	r1, [r2, #0]
 801162e:	d1e0      	bne.n	80115f2 <_free_r+0x26>
 8011630:	681c      	ldr	r4, [r3, #0]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	6053      	str	r3, [r2, #4]
 8011636:	4421      	add	r1, r4
 8011638:	6011      	str	r1, [r2, #0]
 801163a:	e7da      	b.n	80115f2 <_free_r+0x26>
 801163c:	d902      	bls.n	8011644 <_free_r+0x78>
 801163e:	230c      	movs	r3, #12
 8011640:	6003      	str	r3, [r0, #0]
 8011642:	e7d6      	b.n	80115f2 <_free_r+0x26>
 8011644:	6825      	ldr	r5, [r4, #0]
 8011646:	1961      	adds	r1, r4, r5
 8011648:	428b      	cmp	r3, r1
 801164a:	bf04      	itt	eq
 801164c:	6819      	ldreq	r1, [r3, #0]
 801164e:	685b      	ldreq	r3, [r3, #4]
 8011650:	6063      	str	r3, [r4, #4]
 8011652:	bf04      	itt	eq
 8011654:	1949      	addeq	r1, r1, r5
 8011656:	6021      	streq	r1, [r4, #0]
 8011658:	6054      	str	r4, [r2, #4]
 801165a:	e7ca      	b.n	80115f2 <_free_r+0x26>
 801165c:	b003      	add	sp, #12
 801165e:	bd30      	pop	{r4, r5, pc}
 8011660:	2000818c 	.word	0x2000818c

08011664 <sbrk_aligned>:
 8011664:	b570      	push	{r4, r5, r6, lr}
 8011666:	4e0e      	ldr	r6, [pc, #56]	; (80116a0 <sbrk_aligned+0x3c>)
 8011668:	460c      	mov	r4, r1
 801166a:	6831      	ldr	r1, [r6, #0]
 801166c:	4605      	mov	r5, r0
 801166e:	b911      	cbnz	r1, 8011676 <sbrk_aligned+0x12>
 8011670:	f000 f8e2 	bl	8011838 <_sbrk_r>
 8011674:	6030      	str	r0, [r6, #0]
 8011676:	4621      	mov	r1, r4
 8011678:	4628      	mov	r0, r5
 801167a:	f000 f8dd 	bl	8011838 <_sbrk_r>
 801167e:	1c43      	adds	r3, r0, #1
 8011680:	d00a      	beq.n	8011698 <sbrk_aligned+0x34>
 8011682:	1cc4      	adds	r4, r0, #3
 8011684:	f024 0403 	bic.w	r4, r4, #3
 8011688:	42a0      	cmp	r0, r4
 801168a:	d007      	beq.n	801169c <sbrk_aligned+0x38>
 801168c:	1a21      	subs	r1, r4, r0
 801168e:	4628      	mov	r0, r5
 8011690:	f000 f8d2 	bl	8011838 <_sbrk_r>
 8011694:	3001      	adds	r0, #1
 8011696:	d101      	bne.n	801169c <sbrk_aligned+0x38>
 8011698:	f04f 34ff 	mov.w	r4, #4294967295
 801169c:	4620      	mov	r0, r4
 801169e:	bd70      	pop	{r4, r5, r6, pc}
 80116a0:	20008190 	.word	0x20008190

080116a4 <_malloc_r>:
 80116a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116a8:	1ccd      	adds	r5, r1, #3
 80116aa:	f025 0503 	bic.w	r5, r5, #3
 80116ae:	3508      	adds	r5, #8
 80116b0:	2d0c      	cmp	r5, #12
 80116b2:	bf38      	it	cc
 80116b4:	250c      	movcc	r5, #12
 80116b6:	2d00      	cmp	r5, #0
 80116b8:	4607      	mov	r7, r0
 80116ba:	db01      	blt.n	80116c0 <_malloc_r+0x1c>
 80116bc:	42a9      	cmp	r1, r5
 80116be:	d905      	bls.n	80116cc <_malloc_r+0x28>
 80116c0:	230c      	movs	r3, #12
 80116c2:	603b      	str	r3, [r7, #0]
 80116c4:	2600      	movs	r6, #0
 80116c6:	4630      	mov	r0, r6
 80116c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116cc:	4e2e      	ldr	r6, [pc, #184]	; (8011788 <_malloc_r+0xe4>)
 80116ce:	f000 fa8f 	bl	8011bf0 <__malloc_lock>
 80116d2:	6833      	ldr	r3, [r6, #0]
 80116d4:	461c      	mov	r4, r3
 80116d6:	bb34      	cbnz	r4, 8011726 <_malloc_r+0x82>
 80116d8:	4629      	mov	r1, r5
 80116da:	4638      	mov	r0, r7
 80116dc:	f7ff ffc2 	bl	8011664 <sbrk_aligned>
 80116e0:	1c43      	adds	r3, r0, #1
 80116e2:	4604      	mov	r4, r0
 80116e4:	d14d      	bne.n	8011782 <_malloc_r+0xde>
 80116e6:	6834      	ldr	r4, [r6, #0]
 80116e8:	4626      	mov	r6, r4
 80116ea:	2e00      	cmp	r6, #0
 80116ec:	d140      	bne.n	8011770 <_malloc_r+0xcc>
 80116ee:	6823      	ldr	r3, [r4, #0]
 80116f0:	4631      	mov	r1, r6
 80116f2:	4638      	mov	r0, r7
 80116f4:	eb04 0803 	add.w	r8, r4, r3
 80116f8:	f000 f89e 	bl	8011838 <_sbrk_r>
 80116fc:	4580      	cmp	r8, r0
 80116fe:	d13a      	bne.n	8011776 <_malloc_r+0xd2>
 8011700:	6821      	ldr	r1, [r4, #0]
 8011702:	3503      	adds	r5, #3
 8011704:	1a6d      	subs	r5, r5, r1
 8011706:	f025 0503 	bic.w	r5, r5, #3
 801170a:	3508      	adds	r5, #8
 801170c:	2d0c      	cmp	r5, #12
 801170e:	bf38      	it	cc
 8011710:	250c      	movcc	r5, #12
 8011712:	4629      	mov	r1, r5
 8011714:	4638      	mov	r0, r7
 8011716:	f7ff ffa5 	bl	8011664 <sbrk_aligned>
 801171a:	3001      	adds	r0, #1
 801171c:	d02b      	beq.n	8011776 <_malloc_r+0xd2>
 801171e:	6823      	ldr	r3, [r4, #0]
 8011720:	442b      	add	r3, r5
 8011722:	6023      	str	r3, [r4, #0]
 8011724:	e00e      	b.n	8011744 <_malloc_r+0xa0>
 8011726:	6822      	ldr	r2, [r4, #0]
 8011728:	1b52      	subs	r2, r2, r5
 801172a:	d41e      	bmi.n	801176a <_malloc_r+0xc6>
 801172c:	2a0b      	cmp	r2, #11
 801172e:	d916      	bls.n	801175e <_malloc_r+0xba>
 8011730:	1961      	adds	r1, r4, r5
 8011732:	42a3      	cmp	r3, r4
 8011734:	6025      	str	r5, [r4, #0]
 8011736:	bf18      	it	ne
 8011738:	6059      	strne	r1, [r3, #4]
 801173a:	6863      	ldr	r3, [r4, #4]
 801173c:	bf08      	it	eq
 801173e:	6031      	streq	r1, [r6, #0]
 8011740:	5162      	str	r2, [r4, r5]
 8011742:	604b      	str	r3, [r1, #4]
 8011744:	4638      	mov	r0, r7
 8011746:	f104 060b 	add.w	r6, r4, #11
 801174a:	f000 fa57 	bl	8011bfc <__malloc_unlock>
 801174e:	f026 0607 	bic.w	r6, r6, #7
 8011752:	1d23      	adds	r3, r4, #4
 8011754:	1af2      	subs	r2, r6, r3
 8011756:	d0b6      	beq.n	80116c6 <_malloc_r+0x22>
 8011758:	1b9b      	subs	r3, r3, r6
 801175a:	50a3      	str	r3, [r4, r2]
 801175c:	e7b3      	b.n	80116c6 <_malloc_r+0x22>
 801175e:	6862      	ldr	r2, [r4, #4]
 8011760:	42a3      	cmp	r3, r4
 8011762:	bf0c      	ite	eq
 8011764:	6032      	streq	r2, [r6, #0]
 8011766:	605a      	strne	r2, [r3, #4]
 8011768:	e7ec      	b.n	8011744 <_malloc_r+0xa0>
 801176a:	4623      	mov	r3, r4
 801176c:	6864      	ldr	r4, [r4, #4]
 801176e:	e7b2      	b.n	80116d6 <_malloc_r+0x32>
 8011770:	4634      	mov	r4, r6
 8011772:	6876      	ldr	r6, [r6, #4]
 8011774:	e7b9      	b.n	80116ea <_malloc_r+0x46>
 8011776:	230c      	movs	r3, #12
 8011778:	603b      	str	r3, [r7, #0]
 801177a:	4638      	mov	r0, r7
 801177c:	f000 fa3e 	bl	8011bfc <__malloc_unlock>
 8011780:	e7a1      	b.n	80116c6 <_malloc_r+0x22>
 8011782:	6025      	str	r5, [r4, #0]
 8011784:	e7de      	b.n	8011744 <_malloc_r+0xa0>
 8011786:	bf00      	nop
 8011788:	2000818c 	.word	0x2000818c

0801178c <iprintf>:
 801178c:	b40f      	push	{r0, r1, r2, r3}
 801178e:	4b0a      	ldr	r3, [pc, #40]	; (80117b8 <iprintf+0x2c>)
 8011790:	b513      	push	{r0, r1, r4, lr}
 8011792:	681c      	ldr	r4, [r3, #0]
 8011794:	b124      	cbz	r4, 80117a0 <iprintf+0x14>
 8011796:	69a3      	ldr	r3, [r4, #24]
 8011798:	b913      	cbnz	r3, 80117a0 <iprintf+0x14>
 801179a:	4620      	mov	r0, r4
 801179c:	f000 f976 	bl	8011a8c <__sinit>
 80117a0:	ab05      	add	r3, sp, #20
 80117a2:	9a04      	ldr	r2, [sp, #16]
 80117a4:	68a1      	ldr	r1, [r4, #8]
 80117a6:	9301      	str	r3, [sp, #4]
 80117a8:	4620      	mov	r0, r4
 80117aa:	f000 fbb3 	bl	8011f14 <_vfiprintf_r>
 80117ae:	b002      	add	sp, #8
 80117b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117b4:	b004      	add	sp, #16
 80117b6:	4770      	bx	lr
 80117b8:	200000bc 	.word	0x200000bc

080117bc <rand>:
 80117bc:	4b16      	ldr	r3, [pc, #88]	; (8011818 <rand+0x5c>)
 80117be:	b510      	push	{r4, lr}
 80117c0:	681c      	ldr	r4, [r3, #0]
 80117c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80117c4:	b9b3      	cbnz	r3, 80117f4 <rand+0x38>
 80117c6:	2018      	movs	r0, #24
 80117c8:	f7ff feb8 	bl	801153c <malloc>
 80117cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80117ce:	b928      	cbnz	r0, 80117dc <rand+0x20>
 80117d0:	4602      	mov	r2, r0
 80117d2:	4b12      	ldr	r3, [pc, #72]	; (801181c <rand+0x60>)
 80117d4:	4812      	ldr	r0, [pc, #72]	; (8011820 <rand+0x64>)
 80117d6:	214e      	movs	r1, #78	; 0x4e
 80117d8:	f000 f8e2 	bl	80119a0 <__assert_func>
 80117dc:	4a11      	ldr	r2, [pc, #68]	; (8011824 <rand+0x68>)
 80117de:	4b12      	ldr	r3, [pc, #72]	; (8011828 <rand+0x6c>)
 80117e0:	e9c0 2300 	strd	r2, r3, [r0]
 80117e4:	4b11      	ldr	r3, [pc, #68]	; (801182c <rand+0x70>)
 80117e6:	6083      	str	r3, [r0, #8]
 80117e8:	230b      	movs	r3, #11
 80117ea:	8183      	strh	r3, [r0, #12]
 80117ec:	2201      	movs	r2, #1
 80117ee:	2300      	movs	r3, #0
 80117f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80117f4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80117f6:	4a0e      	ldr	r2, [pc, #56]	; (8011830 <rand+0x74>)
 80117f8:	6920      	ldr	r0, [r4, #16]
 80117fa:	6963      	ldr	r3, [r4, #20]
 80117fc:	490d      	ldr	r1, [pc, #52]	; (8011834 <rand+0x78>)
 80117fe:	4342      	muls	r2, r0
 8011800:	fb01 2203 	mla	r2, r1, r3, r2
 8011804:	fba0 0101 	umull	r0, r1, r0, r1
 8011808:	1c43      	adds	r3, r0, #1
 801180a:	eb42 0001 	adc.w	r0, r2, r1
 801180e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8011812:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011816:	bd10      	pop	{r4, pc}
 8011818:	200000bc 	.word	0x200000bc
 801181c:	08015930 	.word	0x08015930
 8011820:	08015947 	.word	0x08015947
 8011824:	abcd330e 	.word	0xabcd330e
 8011828:	e66d1234 	.word	0xe66d1234
 801182c:	0005deec 	.word	0x0005deec
 8011830:	5851f42d 	.word	0x5851f42d
 8011834:	4c957f2d 	.word	0x4c957f2d

08011838 <_sbrk_r>:
 8011838:	b538      	push	{r3, r4, r5, lr}
 801183a:	4d06      	ldr	r5, [pc, #24]	; (8011854 <_sbrk_r+0x1c>)
 801183c:	2300      	movs	r3, #0
 801183e:	4604      	mov	r4, r0
 8011840:	4608      	mov	r0, r1
 8011842:	602b      	str	r3, [r5, #0]
 8011844:	f7f0 f978 	bl	8001b38 <_sbrk>
 8011848:	1c43      	adds	r3, r0, #1
 801184a:	d102      	bne.n	8011852 <_sbrk_r+0x1a>
 801184c:	682b      	ldr	r3, [r5, #0]
 801184e:	b103      	cbz	r3, 8011852 <_sbrk_r+0x1a>
 8011850:	6023      	str	r3, [r4, #0]
 8011852:	bd38      	pop	{r3, r4, r5, pc}
 8011854:	20008194 	.word	0x20008194

08011858 <siprintf>:
 8011858:	b40e      	push	{r1, r2, r3}
 801185a:	b500      	push	{lr}
 801185c:	b09c      	sub	sp, #112	; 0x70
 801185e:	ab1d      	add	r3, sp, #116	; 0x74
 8011860:	9002      	str	r0, [sp, #8]
 8011862:	9006      	str	r0, [sp, #24]
 8011864:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011868:	4809      	ldr	r0, [pc, #36]	; (8011890 <siprintf+0x38>)
 801186a:	9107      	str	r1, [sp, #28]
 801186c:	9104      	str	r1, [sp, #16]
 801186e:	4909      	ldr	r1, [pc, #36]	; (8011894 <siprintf+0x3c>)
 8011870:	f853 2b04 	ldr.w	r2, [r3], #4
 8011874:	9105      	str	r1, [sp, #20]
 8011876:	6800      	ldr	r0, [r0, #0]
 8011878:	9301      	str	r3, [sp, #4]
 801187a:	a902      	add	r1, sp, #8
 801187c:	f000 fa20 	bl	8011cc0 <_svfiprintf_r>
 8011880:	9b02      	ldr	r3, [sp, #8]
 8011882:	2200      	movs	r2, #0
 8011884:	701a      	strb	r2, [r3, #0]
 8011886:	b01c      	add	sp, #112	; 0x70
 8011888:	f85d eb04 	ldr.w	lr, [sp], #4
 801188c:	b003      	add	sp, #12
 801188e:	4770      	bx	lr
 8011890:	200000bc 	.word	0x200000bc
 8011894:	ffff0208 	.word	0xffff0208

08011898 <strcpy>:
 8011898:	4603      	mov	r3, r0
 801189a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801189e:	f803 2b01 	strb.w	r2, [r3], #1
 80118a2:	2a00      	cmp	r2, #0
 80118a4:	d1f9      	bne.n	801189a <strcpy+0x2>
 80118a6:	4770      	bx	lr

080118a8 <_strtoul_l.constprop.0>:
 80118a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118ac:	4f36      	ldr	r7, [pc, #216]	; (8011988 <_strtoul_l.constprop.0+0xe0>)
 80118ae:	4686      	mov	lr, r0
 80118b0:	460d      	mov	r5, r1
 80118b2:	4628      	mov	r0, r5
 80118b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118b8:	5de6      	ldrb	r6, [r4, r7]
 80118ba:	f016 0608 	ands.w	r6, r6, #8
 80118be:	d1f8      	bne.n	80118b2 <_strtoul_l.constprop.0+0xa>
 80118c0:	2c2d      	cmp	r4, #45	; 0x2d
 80118c2:	d12f      	bne.n	8011924 <_strtoul_l.constprop.0+0x7c>
 80118c4:	782c      	ldrb	r4, [r5, #0]
 80118c6:	2601      	movs	r6, #1
 80118c8:	1c85      	adds	r5, r0, #2
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d057      	beq.n	801197e <_strtoul_l.constprop.0+0xd6>
 80118ce:	2b10      	cmp	r3, #16
 80118d0:	d109      	bne.n	80118e6 <_strtoul_l.constprop.0+0x3e>
 80118d2:	2c30      	cmp	r4, #48	; 0x30
 80118d4:	d107      	bne.n	80118e6 <_strtoul_l.constprop.0+0x3e>
 80118d6:	7828      	ldrb	r0, [r5, #0]
 80118d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80118dc:	2858      	cmp	r0, #88	; 0x58
 80118de:	d149      	bne.n	8011974 <_strtoul_l.constprop.0+0xcc>
 80118e0:	786c      	ldrb	r4, [r5, #1]
 80118e2:	2310      	movs	r3, #16
 80118e4:	3502      	adds	r5, #2
 80118e6:	f04f 38ff 	mov.w	r8, #4294967295
 80118ea:	2700      	movs	r7, #0
 80118ec:	fbb8 f8f3 	udiv	r8, r8, r3
 80118f0:	fb03 f908 	mul.w	r9, r3, r8
 80118f4:	ea6f 0909 	mvn.w	r9, r9
 80118f8:	4638      	mov	r0, r7
 80118fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80118fe:	f1bc 0f09 	cmp.w	ip, #9
 8011902:	d814      	bhi.n	801192e <_strtoul_l.constprop.0+0x86>
 8011904:	4664      	mov	r4, ip
 8011906:	42a3      	cmp	r3, r4
 8011908:	dd22      	ble.n	8011950 <_strtoul_l.constprop.0+0xa8>
 801190a:	2f00      	cmp	r7, #0
 801190c:	db1d      	blt.n	801194a <_strtoul_l.constprop.0+0xa2>
 801190e:	4580      	cmp	r8, r0
 8011910:	d31b      	bcc.n	801194a <_strtoul_l.constprop.0+0xa2>
 8011912:	d101      	bne.n	8011918 <_strtoul_l.constprop.0+0x70>
 8011914:	45a1      	cmp	r9, r4
 8011916:	db18      	blt.n	801194a <_strtoul_l.constprop.0+0xa2>
 8011918:	fb00 4003 	mla	r0, r0, r3, r4
 801191c:	2701      	movs	r7, #1
 801191e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011922:	e7ea      	b.n	80118fa <_strtoul_l.constprop.0+0x52>
 8011924:	2c2b      	cmp	r4, #43	; 0x2b
 8011926:	bf04      	itt	eq
 8011928:	782c      	ldrbeq	r4, [r5, #0]
 801192a:	1c85      	addeq	r5, r0, #2
 801192c:	e7cd      	b.n	80118ca <_strtoul_l.constprop.0+0x22>
 801192e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011932:	f1bc 0f19 	cmp.w	ip, #25
 8011936:	d801      	bhi.n	801193c <_strtoul_l.constprop.0+0x94>
 8011938:	3c37      	subs	r4, #55	; 0x37
 801193a:	e7e4      	b.n	8011906 <_strtoul_l.constprop.0+0x5e>
 801193c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011940:	f1bc 0f19 	cmp.w	ip, #25
 8011944:	d804      	bhi.n	8011950 <_strtoul_l.constprop.0+0xa8>
 8011946:	3c57      	subs	r4, #87	; 0x57
 8011948:	e7dd      	b.n	8011906 <_strtoul_l.constprop.0+0x5e>
 801194a:	f04f 37ff 	mov.w	r7, #4294967295
 801194e:	e7e6      	b.n	801191e <_strtoul_l.constprop.0+0x76>
 8011950:	2f00      	cmp	r7, #0
 8011952:	da07      	bge.n	8011964 <_strtoul_l.constprop.0+0xbc>
 8011954:	2322      	movs	r3, #34	; 0x22
 8011956:	f8ce 3000 	str.w	r3, [lr]
 801195a:	f04f 30ff 	mov.w	r0, #4294967295
 801195e:	b932      	cbnz	r2, 801196e <_strtoul_l.constprop.0+0xc6>
 8011960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011964:	b106      	cbz	r6, 8011968 <_strtoul_l.constprop.0+0xc0>
 8011966:	4240      	negs	r0, r0
 8011968:	2a00      	cmp	r2, #0
 801196a:	d0f9      	beq.n	8011960 <_strtoul_l.constprop.0+0xb8>
 801196c:	b107      	cbz	r7, 8011970 <_strtoul_l.constprop.0+0xc8>
 801196e:	1e69      	subs	r1, r5, #1
 8011970:	6011      	str	r1, [r2, #0]
 8011972:	e7f5      	b.n	8011960 <_strtoul_l.constprop.0+0xb8>
 8011974:	2430      	movs	r4, #48	; 0x30
 8011976:	2b00      	cmp	r3, #0
 8011978:	d1b5      	bne.n	80118e6 <_strtoul_l.constprop.0+0x3e>
 801197a:	2308      	movs	r3, #8
 801197c:	e7b3      	b.n	80118e6 <_strtoul_l.constprop.0+0x3e>
 801197e:	2c30      	cmp	r4, #48	; 0x30
 8011980:	d0a9      	beq.n	80118d6 <_strtoul_l.constprop.0+0x2e>
 8011982:	230a      	movs	r3, #10
 8011984:	e7af      	b.n	80118e6 <_strtoul_l.constprop.0+0x3e>
 8011986:	bf00      	nop
 8011988:	0801582b 	.word	0x0801582b

0801198c <strtoul>:
 801198c:	4613      	mov	r3, r2
 801198e:	460a      	mov	r2, r1
 8011990:	4601      	mov	r1, r0
 8011992:	4802      	ldr	r0, [pc, #8]	; (801199c <strtoul+0x10>)
 8011994:	6800      	ldr	r0, [r0, #0]
 8011996:	f7ff bf87 	b.w	80118a8 <_strtoul_l.constprop.0>
 801199a:	bf00      	nop
 801199c:	200000bc 	.word	0x200000bc

080119a0 <__assert_func>:
 80119a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119a2:	4614      	mov	r4, r2
 80119a4:	461a      	mov	r2, r3
 80119a6:	4b09      	ldr	r3, [pc, #36]	; (80119cc <__assert_func+0x2c>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4605      	mov	r5, r0
 80119ac:	68d8      	ldr	r0, [r3, #12]
 80119ae:	b14c      	cbz	r4, 80119c4 <__assert_func+0x24>
 80119b0:	4b07      	ldr	r3, [pc, #28]	; (80119d0 <__assert_func+0x30>)
 80119b2:	9100      	str	r1, [sp, #0]
 80119b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80119b8:	4906      	ldr	r1, [pc, #24]	; (80119d4 <__assert_func+0x34>)
 80119ba:	462b      	mov	r3, r5
 80119bc:	f000 f8e4 	bl	8011b88 <fiprintf>
 80119c0:	f000 fe82 	bl	80126c8 <abort>
 80119c4:	4b04      	ldr	r3, [pc, #16]	; (80119d8 <__assert_func+0x38>)
 80119c6:	461c      	mov	r4, r3
 80119c8:	e7f3      	b.n	80119b2 <__assert_func+0x12>
 80119ca:	bf00      	nop
 80119cc:	200000bc 	.word	0x200000bc
 80119d0:	080159a2 	.word	0x080159a2
 80119d4:	080159af 	.word	0x080159af
 80119d8:	080159dd 	.word	0x080159dd

080119dc <std>:
 80119dc:	2300      	movs	r3, #0
 80119de:	b510      	push	{r4, lr}
 80119e0:	4604      	mov	r4, r0
 80119e2:	e9c0 3300 	strd	r3, r3, [r0]
 80119e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119ea:	6083      	str	r3, [r0, #8]
 80119ec:	8181      	strh	r1, [r0, #12]
 80119ee:	6643      	str	r3, [r0, #100]	; 0x64
 80119f0:	81c2      	strh	r2, [r0, #14]
 80119f2:	6183      	str	r3, [r0, #24]
 80119f4:	4619      	mov	r1, r3
 80119f6:	2208      	movs	r2, #8
 80119f8:	305c      	adds	r0, #92	; 0x5c
 80119fa:	f7ff fddf 	bl	80115bc <memset>
 80119fe:	4b05      	ldr	r3, [pc, #20]	; (8011a14 <std+0x38>)
 8011a00:	6263      	str	r3, [r4, #36]	; 0x24
 8011a02:	4b05      	ldr	r3, [pc, #20]	; (8011a18 <std+0x3c>)
 8011a04:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a06:	4b05      	ldr	r3, [pc, #20]	; (8011a1c <std+0x40>)
 8011a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a0a:	4b05      	ldr	r3, [pc, #20]	; (8011a20 <std+0x44>)
 8011a0c:	6224      	str	r4, [r4, #32]
 8011a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8011a10:	bd10      	pop	{r4, pc}
 8011a12:	bf00      	nop
 8011a14:	0801249d 	.word	0x0801249d
 8011a18:	080124bf 	.word	0x080124bf
 8011a1c:	080124f7 	.word	0x080124f7
 8011a20:	0801251b 	.word	0x0801251b

08011a24 <_cleanup_r>:
 8011a24:	4901      	ldr	r1, [pc, #4]	; (8011a2c <_cleanup_r+0x8>)
 8011a26:	f000 b8c1 	b.w	8011bac <_fwalk_reent>
 8011a2a:	bf00      	nop
 8011a2c:	08012805 	.word	0x08012805

08011a30 <__sfmoreglue>:
 8011a30:	b570      	push	{r4, r5, r6, lr}
 8011a32:	2268      	movs	r2, #104	; 0x68
 8011a34:	1e4d      	subs	r5, r1, #1
 8011a36:	4355      	muls	r5, r2
 8011a38:	460e      	mov	r6, r1
 8011a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011a3e:	f7ff fe31 	bl	80116a4 <_malloc_r>
 8011a42:	4604      	mov	r4, r0
 8011a44:	b140      	cbz	r0, 8011a58 <__sfmoreglue+0x28>
 8011a46:	2100      	movs	r1, #0
 8011a48:	e9c0 1600 	strd	r1, r6, [r0]
 8011a4c:	300c      	adds	r0, #12
 8011a4e:	60a0      	str	r0, [r4, #8]
 8011a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011a54:	f7ff fdb2 	bl	80115bc <memset>
 8011a58:	4620      	mov	r0, r4
 8011a5a:	bd70      	pop	{r4, r5, r6, pc}

08011a5c <__sfp_lock_acquire>:
 8011a5c:	4801      	ldr	r0, [pc, #4]	; (8011a64 <__sfp_lock_acquire+0x8>)
 8011a5e:	f000 b8c5 	b.w	8011bec <__retarget_lock_acquire_recursive>
 8011a62:	bf00      	nop
 8011a64:	20008199 	.word	0x20008199

08011a68 <__sfp_lock_release>:
 8011a68:	4801      	ldr	r0, [pc, #4]	; (8011a70 <__sfp_lock_release+0x8>)
 8011a6a:	f000 b8c0 	b.w	8011bee <__retarget_lock_release_recursive>
 8011a6e:	bf00      	nop
 8011a70:	20008199 	.word	0x20008199

08011a74 <__sinit_lock_acquire>:
 8011a74:	4801      	ldr	r0, [pc, #4]	; (8011a7c <__sinit_lock_acquire+0x8>)
 8011a76:	f000 b8b9 	b.w	8011bec <__retarget_lock_acquire_recursive>
 8011a7a:	bf00      	nop
 8011a7c:	2000819a 	.word	0x2000819a

08011a80 <__sinit_lock_release>:
 8011a80:	4801      	ldr	r0, [pc, #4]	; (8011a88 <__sinit_lock_release+0x8>)
 8011a82:	f000 b8b4 	b.w	8011bee <__retarget_lock_release_recursive>
 8011a86:	bf00      	nop
 8011a88:	2000819a 	.word	0x2000819a

08011a8c <__sinit>:
 8011a8c:	b510      	push	{r4, lr}
 8011a8e:	4604      	mov	r4, r0
 8011a90:	f7ff fff0 	bl	8011a74 <__sinit_lock_acquire>
 8011a94:	69a3      	ldr	r3, [r4, #24]
 8011a96:	b11b      	cbz	r3, 8011aa0 <__sinit+0x14>
 8011a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a9c:	f7ff bff0 	b.w	8011a80 <__sinit_lock_release>
 8011aa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011aa4:	6523      	str	r3, [r4, #80]	; 0x50
 8011aa6:	4b13      	ldr	r3, [pc, #76]	; (8011af4 <__sinit+0x68>)
 8011aa8:	4a13      	ldr	r2, [pc, #76]	; (8011af8 <__sinit+0x6c>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	62a2      	str	r2, [r4, #40]	; 0x28
 8011aae:	42a3      	cmp	r3, r4
 8011ab0:	bf04      	itt	eq
 8011ab2:	2301      	moveq	r3, #1
 8011ab4:	61a3      	streq	r3, [r4, #24]
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f000 f820 	bl	8011afc <__sfp>
 8011abc:	6060      	str	r0, [r4, #4]
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f000 f81c 	bl	8011afc <__sfp>
 8011ac4:	60a0      	str	r0, [r4, #8]
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	f000 f818 	bl	8011afc <__sfp>
 8011acc:	2200      	movs	r2, #0
 8011ace:	60e0      	str	r0, [r4, #12]
 8011ad0:	2104      	movs	r1, #4
 8011ad2:	6860      	ldr	r0, [r4, #4]
 8011ad4:	f7ff ff82 	bl	80119dc <std>
 8011ad8:	68a0      	ldr	r0, [r4, #8]
 8011ada:	2201      	movs	r2, #1
 8011adc:	2109      	movs	r1, #9
 8011ade:	f7ff ff7d 	bl	80119dc <std>
 8011ae2:	68e0      	ldr	r0, [r4, #12]
 8011ae4:	2202      	movs	r2, #2
 8011ae6:	2112      	movs	r1, #18
 8011ae8:	f7ff ff78 	bl	80119dc <std>
 8011aec:	2301      	movs	r3, #1
 8011aee:	61a3      	str	r3, [r4, #24]
 8011af0:	e7d2      	b.n	8011a98 <__sinit+0xc>
 8011af2:	bf00      	nop
 8011af4:	0801592c 	.word	0x0801592c
 8011af8:	08011a25 	.word	0x08011a25

08011afc <__sfp>:
 8011afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011afe:	4607      	mov	r7, r0
 8011b00:	f7ff ffac 	bl	8011a5c <__sfp_lock_acquire>
 8011b04:	4b1e      	ldr	r3, [pc, #120]	; (8011b80 <__sfp+0x84>)
 8011b06:	681e      	ldr	r6, [r3, #0]
 8011b08:	69b3      	ldr	r3, [r6, #24]
 8011b0a:	b913      	cbnz	r3, 8011b12 <__sfp+0x16>
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	f7ff ffbd 	bl	8011a8c <__sinit>
 8011b12:	3648      	adds	r6, #72	; 0x48
 8011b14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	d503      	bpl.n	8011b24 <__sfp+0x28>
 8011b1c:	6833      	ldr	r3, [r6, #0]
 8011b1e:	b30b      	cbz	r3, 8011b64 <__sfp+0x68>
 8011b20:	6836      	ldr	r6, [r6, #0]
 8011b22:	e7f7      	b.n	8011b14 <__sfp+0x18>
 8011b24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011b28:	b9d5      	cbnz	r5, 8011b60 <__sfp+0x64>
 8011b2a:	4b16      	ldr	r3, [pc, #88]	; (8011b84 <__sfp+0x88>)
 8011b2c:	60e3      	str	r3, [r4, #12]
 8011b2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011b32:	6665      	str	r5, [r4, #100]	; 0x64
 8011b34:	f000 f859 	bl	8011bea <__retarget_lock_init_recursive>
 8011b38:	f7ff ff96 	bl	8011a68 <__sfp_lock_release>
 8011b3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011b40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011b44:	6025      	str	r5, [r4, #0]
 8011b46:	61a5      	str	r5, [r4, #24]
 8011b48:	2208      	movs	r2, #8
 8011b4a:	4629      	mov	r1, r5
 8011b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011b50:	f7ff fd34 	bl	80115bc <memset>
 8011b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b60:	3468      	adds	r4, #104	; 0x68
 8011b62:	e7d9      	b.n	8011b18 <__sfp+0x1c>
 8011b64:	2104      	movs	r1, #4
 8011b66:	4638      	mov	r0, r7
 8011b68:	f7ff ff62 	bl	8011a30 <__sfmoreglue>
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	6030      	str	r0, [r6, #0]
 8011b70:	2800      	cmp	r0, #0
 8011b72:	d1d5      	bne.n	8011b20 <__sfp+0x24>
 8011b74:	f7ff ff78 	bl	8011a68 <__sfp_lock_release>
 8011b78:	230c      	movs	r3, #12
 8011b7a:	603b      	str	r3, [r7, #0]
 8011b7c:	e7ee      	b.n	8011b5c <__sfp+0x60>
 8011b7e:	bf00      	nop
 8011b80:	0801592c 	.word	0x0801592c
 8011b84:	ffff0001 	.word	0xffff0001

08011b88 <fiprintf>:
 8011b88:	b40e      	push	{r1, r2, r3}
 8011b8a:	b503      	push	{r0, r1, lr}
 8011b8c:	4601      	mov	r1, r0
 8011b8e:	ab03      	add	r3, sp, #12
 8011b90:	4805      	ldr	r0, [pc, #20]	; (8011ba8 <fiprintf+0x20>)
 8011b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b96:	6800      	ldr	r0, [r0, #0]
 8011b98:	9301      	str	r3, [sp, #4]
 8011b9a:	f000 f9bb 	bl	8011f14 <_vfiprintf_r>
 8011b9e:	b002      	add	sp, #8
 8011ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ba4:	b003      	add	sp, #12
 8011ba6:	4770      	bx	lr
 8011ba8:	200000bc 	.word	0x200000bc

08011bac <_fwalk_reent>:
 8011bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bb0:	4606      	mov	r6, r0
 8011bb2:	4688      	mov	r8, r1
 8011bb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011bb8:	2700      	movs	r7, #0
 8011bba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011bbe:	f1b9 0901 	subs.w	r9, r9, #1
 8011bc2:	d505      	bpl.n	8011bd0 <_fwalk_reent+0x24>
 8011bc4:	6824      	ldr	r4, [r4, #0]
 8011bc6:	2c00      	cmp	r4, #0
 8011bc8:	d1f7      	bne.n	8011bba <_fwalk_reent+0xe>
 8011bca:	4638      	mov	r0, r7
 8011bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bd0:	89ab      	ldrh	r3, [r5, #12]
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d907      	bls.n	8011be6 <_fwalk_reent+0x3a>
 8011bd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011bda:	3301      	adds	r3, #1
 8011bdc:	d003      	beq.n	8011be6 <_fwalk_reent+0x3a>
 8011bde:	4629      	mov	r1, r5
 8011be0:	4630      	mov	r0, r6
 8011be2:	47c0      	blx	r8
 8011be4:	4307      	orrs	r7, r0
 8011be6:	3568      	adds	r5, #104	; 0x68
 8011be8:	e7e9      	b.n	8011bbe <_fwalk_reent+0x12>

08011bea <__retarget_lock_init_recursive>:
 8011bea:	4770      	bx	lr

08011bec <__retarget_lock_acquire_recursive>:
 8011bec:	4770      	bx	lr

08011bee <__retarget_lock_release_recursive>:
 8011bee:	4770      	bx	lr

08011bf0 <__malloc_lock>:
 8011bf0:	4801      	ldr	r0, [pc, #4]	; (8011bf8 <__malloc_lock+0x8>)
 8011bf2:	f7ff bffb 	b.w	8011bec <__retarget_lock_acquire_recursive>
 8011bf6:	bf00      	nop
 8011bf8:	20008198 	.word	0x20008198

08011bfc <__malloc_unlock>:
 8011bfc:	4801      	ldr	r0, [pc, #4]	; (8011c04 <__malloc_unlock+0x8>)
 8011bfe:	f7ff bff6 	b.w	8011bee <__retarget_lock_release_recursive>
 8011c02:	bf00      	nop
 8011c04:	20008198 	.word	0x20008198

08011c08 <__ssputs_r>:
 8011c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c0c:	688e      	ldr	r6, [r1, #8]
 8011c0e:	429e      	cmp	r6, r3
 8011c10:	4682      	mov	sl, r0
 8011c12:	460c      	mov	r4, r1
 8011c14:	4690      	mov	r8, r2
 8011c16:	461f      	mov	r7, r3
 8011c18:	d838      	bhi.n	8011c8c <__ssputs_r+0x84>
 8011c1a:	898a      	ldrh	r2, [r1, #12]
 8011c1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011c20:	d032      	beq.n	8011c88 <__ssputs_r+0x80>
 8011c22:	6825      	ldr	r5, [r4, #0]
 8011c24:	6909      	ldr	r1, [r1, #16]
 8011c26:	eba5 0901 	sub.w	r9, r5, r1
 8011c2a:	6965      	ldr	r5, [r4, #20]
 8011c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c34:	3301      	adds	r3, #1
 8011c36:	444b      	add	r3, r9
 8011c38:	106d      	asrs	r5, r5, #1
 8011c3a:	429d      	cmp	r5, r3
 8011c3c:	bf38      	it	cc
 8011c3e:	461d      	movcc	r5, r3
 8011c40:	0553      	lsls	r3, r2, #21
 8011c42:	d531      	bpl.n	8011ca8 <__ssputs_r+0xa0>
 8011c44:	4629      	mov	r1, r5
 8011c46:	f7ff fd2d 	bl	80116a4 <_malloc_r>
 8011c4a:	4606      	mov	r6, r0
 8011c4c:	b950      	cbnz	r0, 8011c64 <__ssputs_r+0x5c>
 8011c4e:	230c      	movs	r3, #12
 8011c50:	f8ca 3000 	str.w	r3, [sl]
 8011c54:	89a3      	ldrh	r3, [r4, #12]
 8011c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c5a:	81a3      	strh	r3, [r4, #12]
 8011c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c64:	6921      	ldr	r1, [r4, #16]
 8011c66:	464a      	mov	r2, r9
 8011c68:	f7ff fc80 	bl	801156c <memcpy>
 8011c6c:	89a3      	ldrh	r3, [r4, #12]
 8011c6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c76:	81a3      	strh	r3, [r4, #12]
 8011c78:	6126      	str	r6, [r4, #16]
 8011c7a:	6165      	str	r5, [r4, #20]
 8011c7c:	444e      	add	r6, r9
 8011c7e:	eba5 0509 	sub.w	r5, r5, r9
 8011c82:	6026      	str	r6, [r4, #0]
 8011c84:	60a5      	str	r5, [r4, #8]
 8011c86:	463e      	mov	r6, r7
 8011c88:	42be      	cmp	r6, r7
 8011c8a:	d900      	bls.n	8011c8e <__ssputs_r+0x86>
 8011c8c:	463e      	mov	r6, r7
 8011c8e:	6820      	ldr	r0, [r4, #0]
 8011c90:	4632      	mov	r2, r6
 8011c92:	4641      	mov	r1, r8
 8011c94:	f7ff fc78 	bl	8011588 <memmove>
 8011c98:	68a3      	ldr	r3, [r4, #8]
 8011c9a:	1b9b      	subs	r3, r3, r6
 8011c9c:	60a3      	str	r3, [r4, #8]
 8011c9e:	6823      	ldr	r3, [r4, #0]
 8011ca0:	4433      	add	r3, r6
 8011ca2:	6023      	str	r3, [r4, #0]
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	e7db      	b.n	8011c60 <__ssputs_r+0x58>
 8011ca8:	462a      	mov	r2, r5
 8011caa:	f000 fe5f 	bl	801296c <_realloc_r>
 8011cae:	4606      	mov	r6, r0
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	d1e1      	bne.n	8011c78 <__ssputs_r+0x70>
 8011cb4:	6921      	ldr	r1, [r4, #16]
 8011cb6:	4650      	mov	r0, sl
 8011cb8:	f7ff fc88 	bl	80115cc <_free_r>
 8011cbc:	e7c7      	b.n	8011c4e <__ssputs_r+0x46>
	...

08011cc0 <_svfiprintf_r>:
 8011cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc4:	4698      	mov	r8, r3
 8011cc6:	898b      	ldrh	r3, [r1, #12]
 8011cc8:	061b      	lsls	r3, r3, #24
 8011cca:	b09d      	sub	sp, #116	; 0x74
 8011ccc:	4607      	mov	r7, r0
 8011cce:	460d      	mov	r5, r1
 8011cd0:	4614      	mov	r4, r2
 8011cd2:	d50e      	bpl.n	8011cf2 <_svfiprintf_r+0x32>
 8011cd4:	690b      	ldr	r3, [r1, #16]
 8011cd6:	b963      	cbnz	r3, 8011cf2 <_svfiprintf_r+0x32>
 8011cd8:	2140      	movs	r1, #64	; 0x40
 8011cda:	f7ff fce3 	bl	80116a4 <_malloc_r>
 8011cde:	6028      	str	r0, [r5, #0]
 8011ce0:	6128      	str	r0, [r5, #16]
 8011ce2:	b920      	cbnz	r0, 8011cee <_svfiprintf_r+0x2e>
 8011ce4:	230c      	movs	r3, #12
 8011ce6:	603b      	str	r3, [r7, #0]
 8011ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cec:	e0d1      	b.n	8011e92 <_svfiprintf_r+0x1d2>
 8011cee:	2340      	movs	r3, #64	; 0x40
 8011cf0:	616b      	str	r3, [r5, #20]
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8011cf6:	2320      	movs	r3, #32
 8011cf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d00:	2330      	movs	r3, #48	; 0x30
 8011d02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011eac <_svfiprintf_r+0x1ec>
 8011d06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d0a:	f04f 0901 	mov.w	r9, #1
 8011d0e:	4623      	mov	r3, r4
 8011d10:	469a      	mov	sl, r3
 8011d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d16:	b10a      	cbz	r2, 8011d1c <_svfiprintf_r+0x5c>
 8011d18:	2a25      	cmp	r2, #37	; 0x25
 8011d1a:	d1f9      	bne.n	8011d10 <_svfiprintf_r+0x50>
 8011d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8011d20:	d00b      	beq.n	8011d3a <_svfiprintf_r+0x7a>
 8011d22:	465b      	mov	r3, fp
 8011d24:	4622      	mov	r2, r4
 8011d26:	4629      	mov	r1, r5
 8011d28:	4638      	mov	r0, r7
 8011d2a:	f7ff ff6d 	bl	8011c08 <__ssputs_r>
 8011d2e:	3001      	adds	r0, #1
 8011d30:	f000 80aa 	beq.w	8011e88 <_svfiprintf_r+0x1c8>
 8011d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d36:	445a      	add	r2, fp
 8011d38:	9209      	str	r2, [sp, #36]	; 0x24
 8011d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f000 80a2 	beq.w	8011e88 <_svfiprintf_r+0x1c8>
 8011d44:	2300      	movs	r3, #0
 8011d46:	f04f 32ff 	mov.w	r2, #4294967295
 8011d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d4e:	f10a 0a01 	add.w	sl, sl, #1
 8011d52:	9304      	str	r3, [sp, #16]
 8011d54:	9307      	str	r3, [sp, #28]
 8011d56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d5a:	931a      	str	r3, [sp, #104]	; 0x68
 8011d5c:	4654      	mov	r4, sl
 8011d5e:	2205      	movs	r2, #5
 8011d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d64:	4851      	ldr	r0, [pc, #324]	; (8011eac <_svfiprintf_r+0x1ec>)
 8011d66:	f7ee fa5b 	bl	8000220 <memchr>
 8011d6a:	9a04      	ldr	r2, [sp, #16]
 8011d6c:	b9d8      	cbnz	r0, 8011da6 <_svfiprintf_r+0xe6>
 8011d6e:	06d0      	lsls	r0, r2, #27
 8011d70:	bf44      	itt	mi
 8011d72:	2320      	movmi	r3, #32
 8011d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d78:	0711      	lsls	r1, r2, #28
 8011d7a:	bf44      	itt	mi
 8011d7c:	232b      	movmi	r3, #43	; 0x2b
 8011d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d82:	f89a 3000 	ldrb.w	r3, [sl]
 8011d86:	2b2a      	cmp	r3, #42	; 0x2a
 8011d88:	d015      	beq.n	8011db6 <_svfiprintf_r+0xf6>
 8011d8a:	9a07      	ldr	r2, [sp, #28]
 8011d8c:	4654      	mov	r4, sl
 8011d8e:	2000      	movs	r0, #0
 8011d90:	f04f 0c0a 	mov.w	ip, #10
 8011d94:	4621      	mov	r1, r4
 8011d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d9a:	3b30      	subs	r3, #48	; 0x30
 8011d9c:	2b09      	cmp	r3, #9
 8011d9e:	d94e      	bls.n	8011e3e <_svfiprintf_r+0x17e>
 8011da0:	b1b0      	cbz	r0, 8011dd0 <_svfiprintf_r+0x110>
 8011da2:	9207      	str	r2, [sp, #28]
 8011da4:	e014      	b.n	8011dd0 <_svfiprintf_r+0x110>
 8011da6:	eba0 0308 	sub.w	r3, r0, r8
 8011daa:	fa09 f303 	lsl.w	r3, r9, r3
 8011dae:	4313      	orrs	r3, r2
 8011db0:	9304      	str	r3, [sp, #16]
 8011db2:	46a2      	mov	sl, r4
 8011db4:	e7d2      	b.n	8011d5c <_svfiprintf_r+0x9c>
 8011db6:	9b03      	ldr	r3, [sp, #12]
 8011db8:	1d19      	adds	r1, r3, #4
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	9103      	str	r1, [sp, #12]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	bfbb      	ittet	lt
 8011dc2:	425b      	neglt	r3, r3
 8011dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8011dc8:	9307      	strge	r3, [sp, #28]
 8011dca:	9307      	strlt	r3, [sp, #28]
 8011dcc:	bfb8      	it	lt
 8011dce:	9204      	strlt	r2, [sp, #16]
 8011dd0:	7823      	ldrb	r3, [r4, #0]
 8011dd2:	2b2e      	cmp	r3, #46	; 0x2e
 8011dd4:	d10c      	bne.n	8011df0 <_svfiprintf_r+0x130>
 8011dd6:	7863      	ldrb	r3, [r4, #1]
 8011dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8011dda:	d135      	bne.n	8011e48 <_svfiprintf_r+0x188>
 8011ddc:	9b03      	ldr	r3, [sp, #12]
 8011dde:	1d1a      	adds	r2, r3, #4
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	9203      	str	r2, [sp, #12]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	bfb8      	it	lt
 8011de8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011dec:	3402      	adds	r4, #2
 8011dee:	9305      	str	r3, [sp, #20]
 8011df0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011ebc <_svfiprintf_r+0x1fc>
 8011df4:	7821      	ldrb	r1, [r4, #0]
 8011df6:	2203      	movs	r2, #3
 8011df8:	4650      	mov	r0, sl
 8011dfa:	f7ee fa11 	bl	8000220 <memchr>
 8011dfe:	b140      	cbz	r0, 8011e12 <_svfiprintf_r+0x152>
 8011e00:	2340      	movs	r3, #64	; 0x40
 8011e02:	eba0 000a 	sub.w	r0, r0, sl
 8011e06:	fa03 f000 	lsl.w	r0, r3, r0
 8011e0a:	9b04      	ldr	r3, [sp, #16]
 8011e0c:	4303      	orrs	r3, r0
 8011e0e:	3401      	adds	r4, #1
 8011e10:	9304      	str	r3, [sp, #16]
 8011e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e16:	4826      	ldr	r0, [pc, #152]	; (8011eb0 <_svfiprintf_r+0x1f0>)
 8011e18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e1c:	2206      	movs	r2, #6
 8011e1e:	f7ee f9ff 	bl	8000220 <memchr>
 8011e22:	2800      	cmp	r0, #0
 8011e24:	d038      	beq.n	8011e98 <_svfiprintf_r+0x1d8>
 8011e26:	4b23      	ldr	r3, [pc, #140]	; (8011eb4 <_svfiprintf_r+0x1f4>)
 8011e28:	bb1b      	cbnz	r3, 8011e72 <_svfiprintf_r+0x1b2>
 8011e2a:	9b03      	ldr	r3, [sp, #12]
 8011e2c:	3307      	adds	r3, #7
 8011e2e:	f023 0307 	bic.w	r3, r3, #7
 8011e32:	3308      	adds	r3, #8
 8011e34:	9303      	str	r3, [sp, #12]
 8011e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e38:	4433      	add	r3, r6
 8011e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8011e3c:	e767      	b.n	8011d0e <_svfiprintf_r+0x4e>
 8011e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e42:	460c      	mov	r4, r1
 8011e44:	2001      	movs	r0, #1
 8011e46:	e7a5      	b.n	8011d94 <_svfiprintf_r+0xd4>
 8011e48:	2300      	movs	r3, #0
 8011e4a:	3401      	adds	r4, #1
 8011e4c:	9305      	str	r3, [sp, #20]
 8011e4e:	4619      	mov	r1, r3
 8011e50:	f04f 0c0a 	mov.w	ip, #10
 8011e54:	4620      	mov	r0, r4
 8011e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e5a:	3a30      	subs	r2, #48	; 0x30
 8011e5c:	2a09      	cmp	r2, #9
 8011e5e:	d903      	bls.n	8011e68 <_svfiprintf_r+0x1a8>
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d0c5      	beq.n	8011df0 <_svfiprintf_r+0x130>
 8011e64:	9105      	str	r1, [sp, #20]
 8011e66:	e7c3      	b.n	8011df0 <_svfiprintf_r+0x130>
 8011e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e6c:	4604      	mov	r4, r0
 8011e6e:	2301      	movs	r3, #1
 8011e70:	e7f0      	b.n	8011e54 <_svfiprintf_r+0x194>
 8011e72:	ab03      	add	r3, sp, #12
 8011e74:	9300      	str	r3, [sp, #0]
 8011e76:	462a      	mov	r2, r5
 8011e78:	4b0f      	ldr	r3, [pc, #60]	; (8011eb8 <_svfiprintf_r+0x1f8>)
 8011e7a:	a904      	add	r1, sp, #16
 8011e7c:	4638      	mov	r0, r7
 8011e7e:	f3af 8000 	nop.w
 8011e82:	1c42      	adds	r2, r0, #1
 8011e84:	4606      	mov	r6, r0
 8011e86:	d1d6      	bne.n	8011e36 <_svfiprintf_r+0x176>
 8011e88:	89ab      	ldrh	r3, [r5, #12]
 8011e8a:	065b      	lsls	r3, r3, #25
 8011e8c:	f53f af2c 	bmi.w	8011ce8 <_svfiprintf_r+0x28>
 8011e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e92:	b01d      	add	sp, #116	; 0x74
 8011e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e98:	ab03      	add	r3, sp, #12
 8011e9a:	9300      	str	r3, [sp, #0]
 8011e9c:	462a      	mov	r2, r5
 8011e9e:	4b06      	ldr	r3, [pc, #24]	; (8011eb8 <_svfiprintf_r+0x1f8>)
 8011ea0:	a904      	add	r1, sp, #16
 8011ea2:	4638      	mov	r0, r7
 8011ea4:	f000 f9d4 	bl	8012250 <_printf_i>
 8011ea8:	e7eb      	b.n	8011e82 <_svfiprintf_r+0x1c2>
 8011eaa:	bf00      	nop
 8011eac:	08015a40 	.word	0x08015a40
 8011eb0:	08015a4a 	.word	0x08015a4a
 8011eb4:	00000000 	.word	0x00000000
 8011eb8:	08011c09 	.word	0x08011c09
 8011ebc:	08015a46 	.word	0x08015a46

08011ec0 <__sfputc_r>:
 8011ec0:	6893      	ldr	r3, [r2, #8]
 8011ec2:	3b01      	subs	r3, #1
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	b410      	push	{r4}
 8011ec8:	6093      	str	r3, [r2, #8]
 8011eca:	da08      	bge.n	8011ede <__sfputc_r+0x1e>
 8011ecc:	6994      	ldr	r4, [r2, #24]
 8011ece:	42a3      	cmp	r3, r4
 8011ed0:	db01      	blt.n	8011ed6 <__sfputc_r+0x16>
 8011ed2:	290a      	cmp	r1, #10
 8011ed4:	d103      	bne.n	8011ede <__sfputc_r+0x1e>
 8011ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011eda:	f000 bb23 	b.w	8012524 <__swbuf_r>
 8011ede:	6813      	ldr	r3, [r2, #0]
 8011ee0:	1c58      	adds	r0, r3, #1
 8011ee2:	6010      	str	r0, [r2, #0]
 8011ee4:	7019      	strb	r1, [r3, #0]
 8011ee6:	4608      	mov	r0, r1
 8011ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011eec:	4770      	bx	lr

08011eee <__sfputs_r>:
 8011eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ef0:	4606      	mov	r6, r0
 8011ef2:	460f      	mov	r7, r1
 8011ef4:	4614      	mov	r4, r2
 8011ef6:	18d5      	adds	r5, r2, r3
 8011ef8:	42ac      	cmp	r4, r5
 8011efa:	d101      	bne.n	8011f00 <__sfputs_r+0x12>
 8011efc:	2000      	movs	r0, #0
 8011efe:	e007      	b.n	8011f10 <__sfputs_r+0x22>
 8011f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f04:	463a      	mov	r2, r7
 8011f06:	4630      	mov	r0, r6
 8011f08:	f7ff ffda 	bl	8011ec0 <__sfputc_r>
 8011f0c:	1c43      	adds	r3, r0, #1
 8011f0e:	d1f3      	bne.n	8011ef8 <__sfputs_r+0xa>
 8011f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f14 <_vfiprintf_r>:
 8011f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f18:	460d      	mov	r5, r1
 8011f1a:	b09d      	sub	sp, #116	; 0x74
 8011f1c:	4614      	mov	r4, r2
 8011f1e:	4698      	mov	r8, r3
 8011f20:	4606      	mov	r6, r0
 8011f22:	b118      	cbz	r0, 8011f2c <_vfiprintf_r+0x18>
 8011f24:	6983      	ldr	r3, [r0, #24]
 8011f26:	b90b      	cbnz	r3, 8011f2c <_vfiprintf_r+0x18>
 8011f28:	f7ff fdb0 	bl	8011a8c <__sinit>
 8011f2c:	4b89      	ldr	r3, [pc, #548]	; (8012154 <_vfiprintf_r+0x240>)
 8011f2e:	429d      	cmp	r5, r3
 8011f30:	d11b      	bne.n	8011f6a <_vfiprintf_r+0x56>
 8011f32:	6875      	ldr	r5, [r6, #4]
 8011f34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f36:	07d9      	lsls	r1, r3, #31
 8011f38:	d405      	bmi.n	8011f46 <_vfiprintf_r+0x32>
 8011f3a:	89ab      	ldrh	r3, [r5, #12]
 8011f3c:	059a      	lsls	r2, r3, #22
 8011f3e:	d402      	bmi.n	8011f46 <_vfiprintf_r+0x32>
 8011f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f42:	f7ff fe53 	bl	8011bec <__retarget_lock_acquire_recursive>
 8011f46:	89ab      	ldrh	r3, [r5, #12]
 8011f48:	071b      	lsls	r3, r3, #28
 8011f4a:	d501      	bpl.n	8011f50 <_vfiprintf_r+0x3c>
 8011f4c:	692b      	ldr	r3, [r5, #16]
 8011f4e:	b9eb      	cbnz	r3, 8011f8c <_vfiprintf_r+0x78>
 8011f50:	4629      	mov	r1, r5
 8011f52:	4630      	mov	r0, r6
 8011f54:	f000 fb4a 	bl	80125ec <__swsetup_r>
 8011f58:	b1c0      	cbz	r0, 8011f8c <_vfiprintf_r+0x78>
 8011f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f5c:	07dc      	lsls	r4, r3, #31
 8011f5e:	d50e      	bpl.n	8011f7e <_vfiprintf_r+0x6a>
 8011f60:	f04f 30ff 	mov.w	r0, #4294967295
 8011f64:	b01d      	add	sp, #116	; 0x74
 8011f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f6a:	4b7b      	ldr	r3, [pc, #492]	; (8012158 <_vfiprintf_r+0x244>)
 8011f6c:	429d      	cmp	r5, r3
 8011f6e:	d101      	bne.n	8011f74 <_vfiprintf_r+0x60>
 8011f70:	68b5      	ldr	r5, [r6, #8]
 8011f72:	e7df      	b.n	8011f34 <_vfiprintf_r+0x20>
 8011f74:	4b79      	ldr	r3, [pc, #484]	; (801215c <_vfiprintf_r+0x248>)
 8011f76:	429d      	cmp	r5, r3
 8011f78:	bf08      	it	eq
 8011f7a:	68f5      	ldreq	r5, [r6, #12]
 8011f7c:	e7da      	b.n	8011f34 <_vfiprintf_r+0x20>
 8011f7e:	89ab      	ldrh	r3, [r5, #12]
 8011f80:	0598      	lsls	r0, r3, #22
 8011f82:	d4ed      	bmi.n	8011f60 <_vfiprintf_r+0x4c>
 8011f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f86:	f7ff fe32 	bl	8011bee <__retarget_lock_release_recursive>
 8011f8a:	e7e9      	b.n	8011f60 <_vfiprintf_r+0x4c>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8011f90:	2320      	movs	r3, #32
 8011f92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f9a:	2330      	movs	r3, #48	; 0x30
 8011f9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012160 <_vfiprintf_r+0x24c>
 8011fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fa4:	f04f 0901 	mov.w	r9, #1
 8011fa8:	4623      	mov	r3, r4
 8011faa:	469a      	mov	sl, r3
 8011fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fb0:	b10a      	cbz	r2, 8011fb6 <_vfiprintf_r+0xa2>
 8011fb2:	2a25      	cmp	r2, #37	; 0x25
 8011fb4:	d1f9      	bne.n	8011faa <_vfiprintf_r+0x96>
 8011fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8011fba:	d00b      	beq.n	8011fd4 <_vfiprintf_r+0xc0>
 8011fbc:	465b      	mov	r3, fp
 8011fbe:	4622      	mov	r2, r4
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	f7ff ff93 	bl	8011eee <__sfputs_r>
 8011fc8:	3001      	adds	r0, #1
 8011fca:	f000 80aa 	beq.w	8012122 <_vfiprintf_r+0x20e>
 8011fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fd0:	445a      	add	r2, fp
 8011fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8011fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f000 80a2 	beq.w	8012122 <_vfiprintf_r+0x20e>
 8011fde:	2300      	movs	r3, #0
 8011fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8011fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fe8:	f10a 0a01 	add.w	sl, sl, #1
 8011fec:	9304      	str	r3, [sp, #16]
 8011fee:	9307      	str	r3, [sp, #28]
 8011ff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ff4:	931a      	str	r3, [sp, #104]	; 0x68
 8011ff6:	4654      	mov	r4, sl
 8011ff8:	2205      	movs	r2, #5
 8011ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ffe:	4858      	ldr	r0, [pc, #352]	; (8012160 <_vfiprintf_r+0x24c>)
 8012000:	f7ee f90e 	bl	8000220 <memchr>
 8012004:	9a04      	ldr	r2, [sp, #16]
 8012006:	b9d8      	cbnz	r0, 8012040 <_vfiprintf_r+0x12c>
 8012008:	06d1      	lsls	r1, r2, #27
 801200a:	bf44      	itt	mi
 801200c:	2320      	movmi	r3, #32
 801200e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012012:	0713      	lsls	r3, r2, #28
 8012014:	bf44      	itt	mi
 8012016:	232b      	movmi	r3, #43	; 0x2b
 8012018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801201c:	f89a 3000 	ldrb.w	r3, [sl]
 8012020:	2b2a      	cmp	r3, #42	; 0x2a
 8012022:	d015      	beq.n	8012050 <_vfiprintf_r+0x13c>
 8012024:	9a07      	ldr	r2, [sp, #28]
 8012026:	4654      	mov	r4, sl
 8012028:	2000      	movs	r0, #0
 801202a:	f04f 0c0a 	mov.w	ip, #10
 801202e:	4621      	mov	r1, r4
 8012030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012034:	3b30      	subs	r3, #48	; 0x30
 8012036:	2b09      	cmp	r3, #9
 8012038:	d94e      	bls.n	80120d8 <_vfiprintf_r+0x1c4>
 801203a:	b1b0      	cbz	r0, 801206a <_vfiprintf_r+0x156>
 801203c:	9207      	str	r2, [sp, #28]
 801203e:	e014      	b.n	801206a <_vfiprintf_r+0x156>
 8012040:	eba0 0308 	sub.w	r3, r0, r8
 8012044:	fa09 f303 	lsl.w	r3, r9, r3
 8012048:	4313      	orrs	r3, r2
 801204a:	9304      	str	r3, [sp, #16]
 801204c:	46a2      	mov	sl, r4
 801204e:	e7d2      	b.n	8011ff6 <_vfiprintf_r+0xe2>
 8012050:	9b03      	ldr	r3, [sp, #12]
 8012052:	1d19      	adds	r1, r3, #4
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	9103      	str	r1, [sp, #12]
 8012058:	2b00      	cmp	r3, #0
 801205a:	bfbb      	ittet	lt
 801205c:	425b      	neglt	r3, r3
 801205e:	f042 0202 	orrlt.w	r2, r2, #2
 8012062:	9307      	strge	r3, [sp, #28]
 8012064:	9307      	strlt	r3, [sp, #28]
 8012066:	bfb8      	it	lt
 8012068:	9204      	strlt	r2, [sp, #16]
 801206a:	7823      	ldrb	r3, [r4, #0]
 801206c:	2b2e      	cmp	r3, #46	; 0x2e
 801206e:	d10c      	bne.n	801208a <_vfiprintf_r+0x176>
 8012070:	7863      	ldrb	r3, [r4, #1]
 8012072:	2b2a      	cmp	r3, #42	; 0x2a
 8012074:	d135      	bne.n	80120e2 <_vfiprintf_r+0x1ce>
 8012076:	9b03      	ldr	r3, [sp, #12]
 8012078:	1d1a      	adds	r2, r3, #4
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	9203      	str	r2, [sp, #12]
 801207e:	2b00      	cmp	r3, #0
 8012080:	bfb8      	it	lt
 8012082:	f04f 33ff 	movlt.w	r3, #4294967295
 8012086:	3402      	adds	r4, #2
 8012088:	9305      	str	r3, [sp, #20]
 801208a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012170 <_vfiprintf_r+0x25c>
 801208e:	7821      	ldrb	r1, [r4, #0]
 8012090:	2203      	movs	r2, #3
 8012092:	4650      	mov	r0, sl
 8012094:	f7ee f8c4 	bl	8000220 <memchr>
 8012098:	b140      	cbz	r0, 80120ac <_vfiprintf_r+0x198>
 801209a:	2340      	movs	r3, #64	; 0x40
 801209c:	eba0 000a 	sub.w	r0, r0, sl
 80120a0:	fa03 f000 	lsl.w	r0, r3, r0
 80120a4:	9b04      	ldr	r3, [sp, #16]
 80120a6:	4303      	orrs	r3, r0
 80120a8:	3401      	adds	r4, #1
 80120aa:	9304      	str	r3, [sp, #16]
 80120ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120b0:	482c      	ldr	r0, [pc, #176]	; (8012164 <_vfiprintf_r+0x250>)
 80120b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120b6:	2206      	movs	r2, #6
 80120b8:	f7ee f8b2 	bl	8000220 <memchr>
 80120bc:	2800      	cmp	r0, #0
 80120be:	d03f      	beq.n	8012140 <_vfiprintf_r+0x22c>
 80120c0:	4b29      	ldr	r3, [pc, #164]	; (8012168 <_vfiprintf_r+0x254>)
 80120c2:	bb1b      	cbnz	r3, 801210c <_vfiprintf_r+0x1f8>
 80120c4:	9b03      	ldr	r3, [sp, #12]
 80120c6:	3307      	adds	r3, #7
 80120c8:	f023 0307 	bic.w	r3, r3, #7
 80120cc:	3308      	adds	r3, #8
 80120ce:	9303      	str	r3, [sp, #12]
 80120d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120d2:	443b      	add	r3, r7
 80120d4:	9309      	str	r3, [sp, #36]	; 0x24
 80120d6:	e767      	b.n	8011fa8 <_vfiprintf_r+0x94>
 80120d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80120dc:	460c      	mov	r4, r1
 80120de:	2001      	movs	r0, #1
 80120e0:	e7a5      	b.n	801202e <_vfiprintf_r+0x11a>
 80120e2:	2300      	movs	r3, #0
 80120e4:	3401      	adds	r4, #1
 80120e6:	9305      	str	r3, [sp, #20]
 80120e8:	4619      	mov	r1, r3
 80120ea:	f04f 0c0a 	mov.w	ip, #10
 80120ee:	4620      	mov	r0, r4
 80120f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120f4:	3a30      	subs	r2, #48	; 0x30
 80120f6:	2a09      	cmp	r2, #9
 80120f8:	d903      	bls.n	8012102 <_vfiprintf_r+0x1ee>
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d0c5      	beq.n	801208a <_vfiprintf_r+0x176>
 80120fe:	9105      	str	r1, [sp, #20]
 8012100:	e7c3      	b.n	801208a <_vfiprintf_r+0x176>
 8012102:	fb0c 2101 	mla	r1, ip, r1, r2
 8012106:	4604      	mov	r4, r0
 8012108:	2301      	movs	r3, #1
 801210a:	e7f0      	b.n	80120ee <_vfiprintf_r+0x1da>
 801210c:	ab03      	add	r3, sp, #12
 801210e:	9300      	str	r3, [sp, #0]
 8012110:	462a      	mov	r2, r5
 8012112:	4b16      	ldr	r3, [pc, #88]	; (801216c <_vfiprintf_r+0x258>)
 8012114:	a904      	add	r1, sp, #16
 8012116:	4630      	mov	r0, r6
 8012118:	f3af 8000 	nop.w
 801211c:	4607      	mov	r7, r0
 801211e:	1c78      	adds	r0, r7, #1
 8012120:	d1d6      	bne.n	80120d0 <_vfiprintf_r+0x1bc>
 8012122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012124:	07d9      	lsls	r1, r3, #31
 8012126:	d405      	bmi.n	8012134 <_vfiprintf_r+0x220>
 8012128:	89ab      	ldrh	r3, [r5, #12]
 801212a:	059a      	lsls	r2, r3, #22
 801212c:	d402      	bmi.n	8012134 <_vfiprintf_r+0x220>
 801212e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012130:	f7ff fd5d 	bl	8011bee <__retarget_lock_release_recursive>
 8012134:	89ab      	ldrh	r3, [r5, #12]
 8012136:	065b      	lsls	r3, r3, #25
 8012138:	f53f af12 	bmi.w	8011f60 <_vfiprintf_r+0x4c>
 801213c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801213e:	e711      	b.n	8011f64 <_vfiprintf_r+0x50>
 8012140:	ab03      	add	r3, sp, #12
 8012142:	9300      	str	r3, [sp, #0]
 8012144:	462a      	mov	r2, r5
 8012146:	4b09      	ldr	r3, [pc, #36]	; (801216c <_vfiprintf_r+0x258>)
 8012148:	a904      	add	r1, sp, #16
 801214a:	4630      	mov	r0, r6
 801214c:	f000 f880 	bl	8012250 <_printf_i>
 8012150:	e7e4      	b.n	801211c <_vfiprintf_r+0x208>
 8012152:	bf00      	nop
 8012154:	08015a00 	.word	0x08015a00
 8012158:	08015a20 	.word	0x08015a20
 801215c:	080159e0 	.word	0x080159e0
 8012160:	08015a40 	.word	0x08015a40
 8012164:	08015a4a 	.word	0x08015a4a
 8012168:	00000000 	.word	0x00000000
 801216c:	08011eef 	.word	0x08011eef
 8012170:	08015a46 	.word	0x08015a46

08012174 <_printf_common>:
 8012174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012178:	4616      	mov	r6, r2
 801217a:	4699      	mov	r9, r3
 801217c:	688a      	ldr	r2, [r1, #8]
 801217e:	690b      	ldr	r3, [r1, #16]
 8012180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012184:	4293      	cmp	r3, r2
 8012186:	bfb8      	it	lt
 8012188:	4613      	movlt	r3, r2
 801218a:	6033      	str	r3, [r6, #0]
 801218c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012190:	4607      	mov	r7, r0
 8012192:	460c      	mov	r4, r1
 8012194:	b10a      	cbz	r2, 801219a <_printf_common+0x26>
 8012196:	3301      	adds	r3, #1
 8012198:	6033      	str	r3, [r6, #0]
 801219a:	6823      	ldr	r3, [r4, #0]
 801219c:	0699      	lsls	r1, r3, #26
 801219e:	bf42      	ittt	mi
 80121a0:	6833      	ldrmi	r3, [r6, #0]
 80121a2:	3302      	addmi	r3, #2
 80121a4:	6033      	strmi	r3, [r6, #0]
 80121a6:	6825      	ldr	r5, [r4, #0]
 80121a8:	f015 0506 	ands.w	r5, r5, #6
 80121ac:	d106      	bne.n	80121bc <_printf_common+0x48>
 80121ae:	f104 0a19 	add.w	sl, r4, #25
 80121b2:	68e3      	ldr	r3, [r4, #12]
 80121b4:	6832      	ldr	r2, [r6, #0]
 80121b6:	1a9b      	subs	r3, r3, r2
 80121b8:	42ab      	cmp	r3, r5
 80121ba:	dc26      	bgt.n	801220a <_printf_common+0x96>
 80121bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80121c0:	1e13      	subs	r3, r2, #0
 80121c2:	6822      	ldr	r2, [r4, #0]
 80121c4:	bf18      	it	ne
 80121c6:	2301      	movne	r3, #1
 80121c8:	0692      	lsls	r2, r2, #26
 80121ca:	d42b      	bmi.n	8012224 <_printf_common+0xb0>
 80121cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80121d0:	4649      	mov	r1, r9
 80121d2:	4638      	mov	r0, r7
 80121d4:	47c0      	blx	r8
 80121d6:	3001      	adds	r0, #1
 80121d8:	d01e      	beq.n	8012218 <_printf_common+0xa4>
 80121da:	6823      	ldr	r3, [r4, #0]
 80121dc:	68e5      	ldr	r5, [r4, #12]
 80121de:	6832      	ldr	r2, [r6, #0]
 80121e0:	f003 0306 	and.w	r3, r3, #6
 80121e4:	2b04      	cmp	r3, #4
 80121e6:	bf08      	it	eq
 80121e8:	1aad      	subeq	r5, r5, r2
 80121ea:	68a3      	ldr	r3, [r4, #8]
 80121ec:	6922      	ldr	r2, [r4, #16]
 80121ee:	bf0c      	ite	eq
 80121f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80121f4:	2500      	movne	r5, #0
 80121f6:	4293      	cmp	r3, r2
 80121f8:	bfc4      	itt	gt
 80121fa:	1a9b      	subgt	r3, r3, r2
 80121fc:	18ed      	addgt	r5, r5, r3
 80121fe:	2600      	movs	r6, #0
 8012200:	341a      	adds	r4, #26
 8012202:	42b5      	cmp	r5, r6
 8012204:	d11a      	bne.n	801223c <_printf_common+0xc8>
 8012206:	2000      	movs	r0, #0
 8012208:	e008      	b.n	801221c <_printf_common+0xa8>
 801220a:	2301      	movs	r3, #1
 801220c:	4652      	mov	r2, sl
 801220e:	4649      	mov	r1, r9
 8012210:	4638      	mov	r0, r7
 8012212:	47c0      	blx	r8
 8012214:	3001      	adds	r0, #1
 8012216:	d103      	bne.n	8012220 <_printf_common+0xac>
 8012218:	f04f 30ff 	mov.w	r0, #4294967295
 801221c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012220:	3501      	adds	r5, #1
 8012222:	e7c6      	b.n	80121b2 <_printf_common+0x3e>
 8012224:	18e1      	adds	r1, r4, r3
 8012226:	1c5a      	adds	r2, r3, #1
 8012228:	2030      	movs	r0, #48	; 0x30
 801222a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801222e:	4422      	add	r2, r4
 8012230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012238:	3302      	adds	r3, #2
 801223a:	e7c7      	b.n	80121cc <_printf_common+0x58>
 801223c:	2301      	movs	r3, #1
 801223e:	4622      	mov	r2, r4
 8012240:	4649      	mov	r1, r9
 8012242:	4638      	mov	r0, r7
 8012244:	47c0      	blx	r8
 8012246:	3001      	adds	r0, #1
 8012248:	d0e6      	beq.n	8012218 <_printf_common+0xa4>
 801224a:	3601      	adds	r6, #1
 801224c:	e7d9      	b.n	8012202 <_printf_common+0x8e>
	...

08012250 <_printf_i>:
 8012250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012254:	7e0f      	ldrb	r7, [r1, #24]
 8012256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012258:	2f78      	cmp	r7, #120	; 0x78
 801225a:	4691      	mov	r9, r2
 801225c:	4680      	mov	r8, r0
 801225e:	460c      	mov	r4, r1
 8012260:	469a      	mov	sl, r3
 8012262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012266:	d807      	bhi.n	8012278 <_printf_i+0x28>
 8012268:	2f62      	cmp	r7, #98	; 0x62
 801226a:	d80a      	bhi.n	8012282 <_printf_i+0x32>
 801226c:	2f00      	cmp	r7, #0
 801226e:	f000 80d8 	beq.w	8012422 <_printf_i+0x1d2>
 8012272:	2f58      	cmp	r7, #88	; 0x58
 8012274:	f000 80a3 	beq.w	80123be <_printf_i+0x16e>
 8012278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801227c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012280:	e03a      	b.n	80122f8 <_printf_i+0xa8>
 8012282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012286:	2b15      	cmp	r3, #21
 8012288:	d8f6      	bhi.n	8012278 <_printf_i+0x28>
 801228a:	a101      	add	r1, pc, #4	; (adr r1, 8012290 <_printf_i+0x40>)
 801228c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012290:	080122e9 	.word	0x080122e9
 8012294:	080122fd 	.word	0x080122fd
 8012298:	08012279 	.word	0x08012279
 801229c:	08012279 	.word	0x08012279
 80122a0:	08012279 	.word	0x08012279
 80122a4:	08012279 	.word	0x08012279
 80122a8:	080122fd 	.word	0x080122fd
 80122ac:	08012279 	.word	0x08012279
 80122b0:	08012279 	.word	0x08012279
 80122b4:	08012279 	.word	0x08012279
 80122b8:	08012279 	.word	0x08012279
 80122bc:	08012409 	.word	0x08012409
 80122c0:	0801232d 	.word	0x0801232d
 80122c4:	080123eb 	.word	0x080123eb
 80122c8:	08012279 	.word	0x08012279
 80122cc:	08012279 	.word	0x08012279
 80122d0:	0801242b 	.word	0x0801242b
 80122d4:	08012279 	.word	0x08012279
 80122d8:	0801232d 	.word	0x0801232d
 80122dc:	08012279 	.word	0x08012279
 80122e0:	08012279 	.word	0x08012279
 80122e4:	080123f3 	.word	0x080123f3
 80122e8:	682b      	ldr	r3, [r5, #0]
 80122ea:	1d1a      	adds	r2, r3, #4
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	602a      	str	r2, [r5, #0]
 80122f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80122f8:	2301      	movs	r3, #1
 80122fa:	e0a3      	b.n	8012444 <_printf_i+0x1f4>
 80122fc:	6820      	ldr	r0, [r4, #0]
 80122fe:	6829      	ldr	r1, [r5, #0]
 8012300:	0606      	lsls	r6, r0, #24
 8012302:	f101 0304 	add.w	r3, r1, #4
 8012306:	d50a      	bpl.n	801231e <_printf_i+0xce>
 8012308:	680e      	ldr	r6, [r1, #0]
 801230a:	602b      	str	r3, [r5, #0]
 801230c:	2e00      	cmp	r6, #0
 801230e:	da03      	bge.n	8012318 <_printf_i+0xc8>
 8012310:	232d      	movs	r3, #45	; 0x2d
 8012312:	4276      	negs	r6, r6
 8012314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012318:	485e      	ldr	r0, [pc, #376]	; (8012494 <_printf_i+0x244>)
 801231a:	230a      	movs	r3, #10
 801231c:	e019      	b.n	8012352 <_printf_i+0x102>
 801231e:	680e      	ldr	r6, [r1, #0]
 8012320:	602b      	str	r3, [r5, #0]
 8012322:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012326:	bf18      	it	ne
 8012328:	b236      	sxthne	r6, r6
 801232a:	e7ef      	b.n	801230c <_printf_i+0xbc>
 801232c:	682b      	ldr	r3, [r5, #0]
 801232e:	6820      	ldr	r0, [r4, #0]
 8012330:	1d19      	adds	r1, r3, #4
 8012332:	6029      	str	r1, [r5, #0]
 8012334:	0601      	lsls	r1, r0, #24
 8012336:	d501      	bpl.n	801233c <_printf_i+0xec>
 8012338:	681e      	ldr	r6, [r3, #0]
 801233a:	e002      	b.n	8012342 <_printf_i+0xf2>
 801233c:	0646      	lsls	r6, r0, #25
 801233e:	d5fb      	bpl.n	8012338 <_printf_i+0xe8>
 8012340:	881e      	ldrh	r6, [r3, #0]
 8012342:	4854      	ldr	r0, [pc, #336]	; (8012494 <_printf_i+0x244>)
 8012344:	2f6f      	cmp	r7, #111	; 0x6f
 8012346:	bf0c      	ite	eq
 8012348:	2308      	moveq	r3, #8
 801234a:	230a      	movne	r3, #10
 801234c:	2100      	movs	r1, #0
 801234e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012352:	6865      	ldr	r5, [r4, #4]
 8012354:	60a5      	str	r5, [r4, #8]
 8012356:	2d00      	cmp	r5, #0
 8012358:	bfa2      	ittt	ge
 801235a:	6821      	ldrge	r1, [r4, #0]
 801235c:	f021 0104 	bicge.w	r1, r1, #4
 8012360:	6021      	strge	r1, [r4, #0]
 8012362:	b90e      	cbnz	r6, 8012368 <_printf_i+0x118>
 8012364:	2d00      	cmp	r5, #0
 8012366:	d04d      	beq.n	8012404 <_printf_i+0x1b4>
 8012368:	4615      	mov	r5, r2
 801236a:	fbb6 f1f3 	udiv	r1, r6, r3
 801236e:	fb03 6711 	mls	r7, r3, r1, r6
 8012372:	5dc7      	ldrb	r7, [r0, r7]
 8012374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012378:	4637      	mov	r7, r6
 801237a:	42bb      	cmp	r3, r7
 801237c:	460e      	mov	r6, r1
 801237e:	d9f4      	bls.n	801236a <_printf_i+0x11a>
 8012380:	2b08      	cmp	r3, #8
 8012382:	d10b      	bne.n	801239c <_printf_i+0x14c>
 8012384:	6823      	ldr	r3, [r4, #0]
 8012386:	07de      	lsls	r6, r3, #31
 8012388:	d508      	bpl.n	801239c <_printf_i+0x14c>
 801238a:	6923      	ldr	r3, [r4, #16]
 801238c:	6861      	ldr	r1, [r4, #4]
 801238e:	4299      	cmp	r1, r3
 8012390:	bfde      	ittt	le
 8012392:	2330      	movle	r3, #48	; 0x30
 8012394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012398:	f105 35ff 	addle.w	r5, r5, #4294967295
 801239c:	1b52      	subs	r2, r2, r5
 801239e:	6122      	str	r2, [r4, #16]
 80123a0:	f8cd a000 	str.w	sl, [sp]
 80123a4:	464b      	mov	r3, r9
 80123a6:	aa03      	add	r2, sp, #12
 80123a8:	4621      	mov	r1, r4
 80123aa:	4640      	mov	r0, r8
 80123ac:	f7ff fee2 	bl	8012174 <_printf_common>
 80123b0:	3001      	adds	r0, #1
 80123b2:	d14c      	bne.n	801244e <_printf_i+0x1fe>
 80123b4:	f04f 30ff 	mov.w	r0, #4294967295
 80123b8:	b004      	add	sp, #16
 80123ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123be:	4835      	ldr	r0, [pc, #212]	; (8012494 <_printf_i+0x244>)
 80123c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80123c4:	6829      	ldr	r1, [r5, #0]
 80123c6:	6823      	ldr	r3, [r4, #0]
 80123c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80123cc:	6029      	str	r1, [r5, #0]
 80123ce:	061d      	lsls	r5, r3, #24
 80123d0:	d514      	bpl.n	80123fc <_printf_i+0x1ac>
 80123d2:	07df      	lsls	r7, r3, #31
 80123d4:	bf44      	itt	mi
 80123d6:	f043 0320 	orrmi.w	r3, r3, #32
 80123da:	6023      	strmi	r3, [r4, #0]
 80123dc:	b91e      	cbnz	r6, 80123e6 <_printf_i+0x196>
 80123de:	6823      	ldr	r3, [r4, #0]
 80123e0:	f023 0320 	bic.w	r3, r3, #32
 80123e4:	6023      	str	r3, [r4, #0]
 80123e6:	2310      	movs	r3, #16
 80123e8:	e7b0      	b.n	801234c <_printf_i+0xfc>
 80123ea:	6823      	ldr	r3, [r4, #0]
 80123ec:	f043 0320 	orr.w	r3, r3, #32
 80123f0:	6023      	str	r3, [r4, #0]
 80123f2:	2378      	movs	r3, #120	; 0x78
 80123f4:	4828      	ldr	r0, [pc, #160]	; (8012498 <_printf_i+0x248>)
 80123f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80123fa:	e7e3      	b.n	80123c4 <_printf_i+0x174>
 80123fc:	0659      	lsls	r1, r3, #25
 80123fe:	bf48      	it	mi
 8012400:	b2b6      	uxthmi	r6, r6
 8012402:	e7e6      	b.n	80123d2 <_printf_i+0x182>
 8012404:	4615      	mov	r5, r2
 8012406:	e7bb      	b.n	8012380 <_printf_i+0x130>
 8012408:	682b      	ldr	r3, [r5, #0]
 801240a:	6826      	ldr	r6, [r4, #0]
 801240c:	6961      	ldr	r1, [r4, #20]
 801240e:	1d18      	adds	r0, r3, #4
 8012410:	6028      	str	r0, [r5, #0]
 8012412:	0635      	lsls	r5, r6, #24
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	d501      	bpl.n	801241c <_printf_i+0x1cc>
 8012418:	6019      	str	r1, [r3, #0]
 801241a:	e002      	b.n	8012422 <_printf_i+0x1d2>
 801241c:	0670      	lsls	r0, r6, #25
 801241e:	d5fb      	bpl.n	8012418 <_printf_i+0x1c8>
 8012420:	8019      	strh	r1, [r3, #0]
 8012422:	2300      	movs	r3, #0
 8012424:	6123      	str	r3, [r4, #16]
 8012426:	4615      	mov	r5, r2
 8012428:	e7ba      	b.n	80123a0 <_printf_i+0x150>
 801242a:	682b      	ldr	r3, [r5, #0]
 801242c:	1d1a      	adds	r2, r3, #4
 801242e:	602a      	str	r2, [r5, #0]
 8012430:	681d      	ldr	r5, [r3, #0]
 8012432:	6862      	ldr	r2, [r4, #4]
 8012434:	2100      	movs	r1, #0
 8012436:	4628      	mov	r0, r5
 8012438:	f7ed fef2 	bl	8000220 <memchr>
 801243c:	b108      	cbz	r0, 8012442 <_printf_i+0x1f2>
 801243e:	1b40      	subs	r0, r0, r5
 8012440:	6060      	str	r0, [r4, #4]
 8012442:	6863      	ldr	r3, [r4, #4]
 8012444:	6123      	str	r3, [r4, #16]
 8012446:	2300      	movs	r3, #0
 8012448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801244c:	e7a8      	b.n	80123a0 <_printf_i+0x150>
 801244e:	6923      	ldr	r3, [r4, #16]
 8012450:	462a      	mov	r2, r5
 8012452:	4649      	mov	r1, r9
 8012454:	4640      	mov	r0, r8
 8012456:	47d0      	blx	sl
 8012458:	3001      	adds	r0, #1
 801245a:	d0ab      	beq.n	80123b4 <_printf_i+0x164>
 801245c:	6823      	ldr	r3, [r4, #0]
 801245e:	079b      	lsls	r3, r3, #30
 8012460:	d413      	bmi.n	801248a <_printf_i+0x23a>
 8012462:	68e0      	ldr	r0, [r4, #12]
 8012464:	9b03      	ldr	r3, [sp, #12]
 8012466:	4298      	cmp	r0, r3
 8012468:	bfb8      	it	lt
 801246a:	4618      	movlt	r0, r3
 801246c:	e7a4      	b.n	80123b8 <_printf_i+0x168>
 801246e:	2301      	movs	r3, #1
 8012470:	4632      	mov	r2, r6
 8012472:	4649      	mov	r1, r9
 8012474:	4640      	mov	r0, r8
 8012476:	47d0      	blx	sl
 8012478:	3001      	adds	r0, #1
 801247a:	d09b      	beq.n	80123b4 <_printf_i+0x164>
 801247c:	3501      	adds	r5, #1
 801247e:	68e3      	ldr	r3, [r4, #12]
 8012480:	9903      	ldr	r1, [sp, #12]
 8012482:	1a5b      	subs	r3, r3, r1
 8012484:	42ab      	cmp	r3, r5
 8012486:	dcf2      	bgt.n	801246e <_printf_i+0x21e>
 8012488:	e7eb      	b.n	8012462 <_printf_i+0x212>
 801248a:	2500      	movs	r5, #0
 801248c:	f104 0619 	add.w	r6, r4, #25
 8012490:	e7f5      	b.n	801247e <_printf_i+0x22e>
 8012492:	bf00      	nop
 8012494:	08015a51 	.word	0x08015a51
 8012498:	08015a62 	.word	0x08015a62

0801249c <__sread>:
 801249c:	b510      	push	{r4, lr}
 801249e:	460c      	mov	r4, r1
 80124a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124a4:	f000 fa92 	bl	80129cc <_read_r>
 80124a8:	2800      	cmp	r0, #0
 80124aa:	bfab      	itete	ge
 80124ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80124ae:	89a3      	ldrhlt	r3, [r4, #12]
 80124b0:	181b      	addge	r3, r3, r0
 80124b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80124b6:	bfac      	ite	ge
 80124b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80124ba:	81a3      	strhlt	r3, [r4, #12]
 80124bc:	bd10      	pop	{r4, pc}

080124be <__swrite>:
 80124be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124c2:	461f      	mov	r7, r3
 80124c4:	898b      	ldrh	r3, [r1, #12]
 80124c6:	05db      	lsls	r3, r3, #23
 80124c8:	4605      	mov	r5, r0
 80124ca:	460c      	mov	r4, r1
 80124cc:	4616      	mov	r6, r2
 80124ce:	d505      	bpl.n	80124dc <__swrite+0x1e>
 80124d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124d4:	2302      	movs	r3, #2
 80124d6:	2200      	movs	r2, #0
 80124d8:	f000 f9d0 	bl	801287c <_lseek_r>
 80124dc:	89a3      	ldrh	r3, [r4, #12]
 80124de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80124e6:	81a3      	strh	r3, [r4, #12]
 80124e8:	4632      	mov	r2, r6
 80124ea:	463b      	mov	r3, r7
 80124ec:	4628      	mov	r0, r5
 80124ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124f2:	f000 b869 	b.w	80125c8 <_write_r>

080124f6 <__sseek>:
 80124f6:	b510      	push	{r4, lr}
 80124f8:	460c      	mov	r4, r1
 80124fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124fe:	f000 f9bd 	bl	801287c <_lseek_r>
 8012502:	1c43      	adds	r3, r0, #1
 8012504:	89a3      	ldrh	r3, [r4, #12]
 8012506:	bf15      	itete	ne
 8012508:	6560      	strne	r0, [r4, #84]	; 0x54
 801250a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801250e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012512:	81a3      	strheq	r3, [r4, #12]
 8012514:	bf18      	it	ne
 8012516:	81a3      	strhne	r3, [r4, #12]
 8012518:	bd10      	pop	{r4, pc}

0801251a <__sclose>:
 801251a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801251e:	f000 b8db 	b.w	80126d8 <_close_r>
	...

08012524 <__swbuf_r>:
 8012524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012526:	460e      	mov	r6, r1
 8012528:	4614      	mov	r4, r2
 801252a:	4605      	mov	r5, r0
 801252c:	b118      	cbz	r0, 8012536 <__swbuf_r+0x12>
 801252e:	6983      	ldr	r3, [r0, #24]
 8012530:	b90b      	cbnz	r3, 8012536 <__swbuf_r+0x12>
 8012532:	f7ff faab 	bl	8011a8c <__sinit>
 8012536:	4b21      	ldr	r3, [pc, #132]	; (80125bc <__swbuf_r+0x98>)
 8012538:	429c      	cmp	r4, r3
 801253a:	d12b      	bne.n	8012594 <__swbuf_r+0x70>
 801253c:	686c      	ldr	r4, [r5, #4]
 801253e:	69a3      	ldr	r3, [r4, #24]
 8012540:	60a3      	str	r3, [r4, #8]
 8012542:	89a3      	ldrh	r3, [r4, #12]
 8012544:	071a      	lsls	r2, r3, #28
 8012546:	d52f      	bpl.n	80125a8 <__swbuf_r+0x84>
 8012548:	6923      	ldr	r3, [r4, #16]
 801254a:	b36b      	cbz	r3, 80125a8 <__swbuf_r+0x84>
 801254c:	6923      	ldr	r3, [r4, #16]
 801254e:	6820      	ldr	r0, [r4, #0]
 8012550:	1ac0      	subs	r0, r0, r3
 8012552:	6963      	ldr	r3, [r4, #20]
 8012554:	b2f6      	uxtb	r6, r6
 8012556:	4283      	cmp	r3, r0
 8012558:	4637      	mov	r7, r6
 801255a:	dc04      	bgt.n	8012566 <__swbuf_r+0x42>
 801255c:	4621      	mov	r1, r4
 801255e:	4628      	mov	r0, r5
 8012560:	f000 f950 	bl	8012804 <_fflush_r>
 8012564:	bb30      	cbnz	r0, 80125b4 <__swbuf_r+0x90>
 8012566:	68a3      	ldr	r3, [r4, #8]
 8012568:	3b01      	subs	r3, #1
 801256a:	60a3      	str	r3, [r4, #8]
 801256c:	6823      	ldr	r3, [r4, #0]
 801256e:	1c5a      	adds	r2, r3, #1
 8012570:	6022      	str	r2, [r4, #0]
 8012572:	701e      	strb	r6, [r3, #0]
 8012574:	6963      	ldr	r3, [r4, #20]
 8012576:	3001      	adds	r0, #1
 8012578:	4283      	cmp	r3, r0
 801257a:	d004      	beq.n	8012586 <__swbuf_r+0x62>
 801257c:	89a3      	ldrh	r3, [r4, #12]
 801257e:	07db      	lsls	r3, r3, #31
 8012580:	d506      	bpl.n	8012590 <__swbuf_r+0x6c>
 8012582:	2e0a      	cmp	r6, #10
 8012584:	d104      	bne.n	8012590 <__swbuf_r+0x6c>
 8012586:	4621      	mov	r1, r4
 8012588:	4628      	mov	r0, r5
 801258a:	f000 f93b 	bl	8012804 <_fflush_r>
 801258e:	b988      	cbnz	r0, 80125b4 <__swbuf_r+0x90>
 8012590:	4638      	mov	r0, r7
 8012592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012594:	4b0a      	ldr	r3, [pc, #40]	; (80125c0 <__swbuf_r+0x9c>)
 8012596:	429c      	cmp	r4, r3
 8012598:	d101      	bne.n	801259e <__swbuf_r+0x7a>
 801259a:	68ac      	ldr	r4, [r5, #8]
 801259c:	e7cf      	b.n	801253e <__swbuf_r+0x1a>
 801259e:	4b09      	ldr	r3, [pc, #36]	; (80125c4 <__swbuf_r+0xa0>)
 80125a0:	429c      	cmp	r4, r3
 80125a2:	bf08      	it	eq
 80125a4:	68ec      	ldreq	r4, [r5, #12]
 80125a6:	e7ca      	b.n	801253e <__swbuf_r+0x1a>
 80125a8:	4621      	mov	r1, r4
 80125aa:	4628      	mov	r0, r5
 80125ac:	f000 f81e 	bl	80125ec <__swsetup_r>
 80125b0:	2800      	cmp	r0, #0
 80125b2:	d0cb      	beq.n	801254c <__swbuf_r+0x28>
 80125b4:	f04f 37ff 	mov.w	r7, #4294967295
 80125b8:	e7ea      	b.n	8012590 <__swbuf_r+0x6c>
 80125ba:	bf00      	nop
 80125bc:	08015a00 	.word	0x08015a00
 80125c0:	08015a20 	.word	0x08015a20
 80125c4:	080159e0 	.word	0x080159e0

080125c8 <_write_r>:
 80125c8:	b538      	push	{r3, r4, r5, lr}
 80125ca:	4d07      	ldr	r5, [pc, #28]	; (80125e8 <_write_r+0x20>)
 80125cc:	4604      	mov	r4, r0
 80125ce:	4608      	mov	r0, r1
 80125d0:	4611      	mov	r1, r2
 80125d2:	2200      	movs	r2, #0
 80125d4:	602a      	str	r2, [r5, #0]
 80125d6:	461a      	mov	r2, r3
 80125d8:	f7ef fa5d 	bl	8001a96 <_write>
 80125dc:	1c43      	adds	r3, r0, #1
 80125de:	d102      	bne.n	80125e6 <_write_r+0x1e>
 80125e0:	682b      	ldr	r3, [r5, #0]
 80125e2:	b103      	cbz	r3, 80125e6 <_write_r+0x1e>
 80125e4:	6023      	str	r3, [r4, #0]
 80125e6:	bd38      	pop	{r3, r4, r5, pc}
 80125e8:	20008194 	.word	0x20008194

080125ec <__swsetup_r>:
 80125ec:	4b32      	ldr	r3, [pc, #200]	; (80126b8 <__swsetup_r+0xcc>)
 80125ee:	b570      	push	{r4, r5, r6, lr}
 80125f0:	681d      	ldr	r5, [r3, #0]
 80125f2:	4606      	mov	r6, r0
 80125f4:	460c      	mov	r4, r1
 80125f6:	b125      	cbz	r5, 8012602 <__swsetup_r+0x16>
 80125f8:	69ab      	ldr	r3, [r5, #24]
 80125fa:	b913      	cbnz	r3, 8012602 <__swsetup_r+0x16>
 80125fc:	4628      	mov	r0, r5
 80125fe:	f7ff fa45 	bl	8011a8c <__sinit>
 8012602:	4b2e      	ldr	r3, [pc, #184]	; (80126bc <__swsetup_r+0xd0>)
 8012604:	429c      	cmp	r4, r3
 8012606:	d10f      	bne.n	8012628 <__swsetup_r+0x3c>
 8012608:	686c      	ldr	r4, [r5, #4]
 801260a:	89a3      	ldrh	r3, [r4, #12]
 801260c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012610:	0719      	lsls	r1, r3, #28
 8012612:	d42c      	bmi.n	801266e <__swsetup_r+0x82>
 8012614:	06dd      	lsls	r5, r3, #27
 8012616:	d411      	bmi.n	801263c <__swsetup_r+0x50>
 8012618:	2309      	movs	r3, #9
 801261a:	6033      	str	r3, [r6, #0]
 801261c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012620:	81a3      	strh	r3, [r4, #12]
 8012622:	f04f 30ff 	mov.w	r0, #4294967295
 8012626:	e03e      	b.n	80126a6 <__swsetup_r+0xba>
 8012628:	4b25      	ldr	r3, [pc, #148]	; (80126c0 <__swsetup_r+0xd4>)
 801262a:	429c      	cmp	r4, r3
 801262c:	d101      	bne.n	8012632 <__swsetup_r+0x46>
 801262e:	68ac      	ldr	r4, [r5, #8]
 8012630:	e7eb      	b.n	801260a <__swsetup_r+0x1e>
 8012632:	4b24      	ldr	r3, [pc, #144]	; (80126c4 <__swsetup_r+0xd8>)
 8012634:	429c      	cmp	r4, r3
 8012636:	bf08      	it	eq
 8012638:	68ec      	ldreq	r4, [r5, #12]
 801263a:	e7e6      	b.n	801260a <__swsetup_r+0x1e>
 801263c:	0758      	lsls	r0, r3, #29
 801263e:	d512      	bpl.n	8012666 <__swsetup_r+0x7a>
 8012640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012642:	b141      	cbz	r1, 8012656 <__swsetup_r+0x6a>
 8012644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012648:	4299      	cmp	r1, r3
 801264a:	d002      	beq.n	8012652 <__swsetup_r+0x66>
 801264c:	4630      	mov	r0, r6
 801264e:	f7fe ffbd 	bl	80115cc <_free_r>
 8012652:	2300      	movs	r3, #0
 8012654:	6363      	str	r3, [r4, #52]	; 0x34
 8012656:	89a3      	ldrh	r3, [r4, #12]
 8012658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801265c:	81a3      	strh	r3, [r4, #12]
 801265e:	2300      	movs	r3, #0
 8012660:	6063      	str	r3, [r4, #4]
 8012662:	6923      	ldr	r3, [r4, #16]
 8012664:	6023      	str	r3, [r4, #0]
 8012666:	89a3      	ldrh	r3, [r4, #12]
 8012668:	f043 0308 	orr.w	r3, r3, #8
 801266c:	81a3      	strh	r3, [r4, #12]
 801266e:	6923      	ldr	r3, [r4, #16]
 8012670:	b94b      	cbnz	r3, 8012686 <__swsetup_r+0x9a>
 8012672:	89a3      	ldrh	r3, [r4, #12]
 8012674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801267c:	d003      	beq.n	8012686 <__swsetup_r+0x9a>
 801267e:	4621      	mov	r1, r4
 8012680:	4630      	mov	r0, r6
 8012682:	f000 f933 	bl	80128ec <__smakebuf_r>
 8012686:	89a0      	ldrh	r0, [r4, #12]
 8012688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801268c:	f010 0301 	ands.w	r3, r0, #1
 8012690:	d00a      	beq.n	80126a8 <__swsetup_r+0xbc>
 8012692:	2300      	movs	r3, #0
 8012694:	60a3      	str	r3, [r4, #8]
 8012696:	6963      	ldr	r3, [r4, #20]
 8012698:	425b      	negs	r3, r3
 801269a:	61a3      	str	r3, [r4, #24]
 801269c:	6923      	ldr	r3, [r4, #16]
 801269e:	b943      	cbnz	r3, 80126b2 <__swsetup_r+0xc6>
 80126a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80126a4:	d1ba      	bne.n	801261c <__swsetup_r+0x30>
 80126a6:	bd70      	pop	{r4, r5, r6, pc}
 80126a8:	0781      	lsls	r1, r0, #30
 80126aa:	bf58      	it	pl
 80126ac:	6963      	ldrpl	r3, [r4, #20]
 80126ae:	60a3      	str	r3, [r4, #8]
 80126b0:	e7f4      	b.n	801269c <__swsetup_r+0xb0>
 80126b2:	2000      	movs	r0, #0
 80126b4:	e7f7      	b.n	80126a6 <__swsetup_r+0xba>
 80126b6:	bf00      	nop
 80126b8:	200000bc 	.word	0x200000bc
 80126bc:	08015a00 	.word	0x08015a00
 80126c0:	08015a20 	.word	0x08015a20
 80126c4:	080159e0 	.word	0x080159e0

080126c8 <abort>:
 80126c8:	b508      	push	{r3, lr}
 80126ca:	2006      	movs	r0, #6
 80126cc:	f000 f9b8 	bl	8012a40 <raise>
 80126d0:	2001      	movs	r0, #1
 80126d2:	f7ef f9b9 	bl	8001a48 <_exit>
	...

080126d8 <_close_r>:
 80126d8:	b538      	push	{r3, r4, r5, lr}
 80126da:	4d06      	ldr	r5, [pc, #24]	; (80126f4 <_close_r+0x1c>)
 80126dc:	2300      	movs	r3, #0
 80126de:	4604      	mov	r4, r0
 80126e0:	4608      	mov	r0, r1
 80126e2:	602b      	str	r3, [r5, #0]
 80126e4:	f7ef f9f3 	bl	8001ace <_close>
 80126e8:	1c43      	adds	r3, r0, #1
 80126ea:	d102      	bne.n	80126f2 <_close_r+0x1a>
 80126ec:	682b      	ldr	r3, [r5, #0]
 80126ee:	b103      	cbz	r3, 80126f2 <_close_r+0x1a>
 80126f0:	6023      	str	r3, [r4, #0]
 80126f2:	bd38      	pop	{r3, r4, r5, pc}
 80126f4:	20008194 	.word	0x20008194

080126f8 <__sflush_r>:
 80126f8:	898a      	ldrh	r2, [r1, #12]
 80126fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126fe:	4605      	mov	r5, r0
 8012700:	0710      	lsls	r0, r2, #28
 8012702:	460c      	mov	r4, r1
 8012704:	d458      	bmi.n	80127b8 <__sflush_r+0xc0>
 8012706:	684b      	ldr	r3, [r1, #4]
 8012708:	2b00      	cmp	r3, #0
 801270a:	dc05      	bgt.n	8012718 <__sflush_r+0x20>
 801270c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801270e:	2b00      	cmp	r3, #0
 8012710:	dc02      	bgt.n	8012718 <__sflush_r+0x20>
 8012712:	2000      	movs	r0, #0
 8012714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801271a:	2e00      	cmp	r6, #0
 801271c:	d0f9      	beq.n	8012712 <__sflush_r+0x1a>
 801271e:	2300      	movs	r3, #0
 8012720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012724:	682f      	ldr	r7, [r5, #0]
 8012726:	602b      	str	r3, [r5, #0]
 8012728:	d032      	beq.n	8012790 <__sflush_r+0x98>
 801272a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801272c:	89a3      	ldrh	r3, [r4, #12]
 801272e:	075a      	lsls	r2, r3, #29
 8012730:	d505      	bpl.n	801273e <__sflush_r+0x46>
 8012732:	6863      	ldr	r3, [r4, #4]
 8012734:	1ac0      	subs	r0, r0, r3
 8012736:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012738:	b10b      	cbz	r3, 801273e <__sflush_r+0x46>
 801273a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801273c:	1ac0      	subs	r0, r0, r3
 801273e:	2300      	movs	r3, #0
 8012740:	4602      	mov	r2, r0
 8012742:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012744:	6a21      	ldr	r1, [r4, #32]
 8012746:	4628      	mov	r0, r5
 8012748:	47b0      	blx	r6
 801274a:	1c43      	adds	r3, r0, #1
 801274c:	89a3      	ldrh	r3, [r4, #12]
 801274e:	d106      	bne.n	801275e <__sflush_r+0x66>
 8012750:	6829      	ldr	r1, [r5, #0]
 8012752:	291d      	cmp	r1, #29
 8012754:	d82c      	bhi.n	80127b0 <__sflush_r+0xb8>
 8012756:	4a2a      	ldr	r2, [pc, #168]	; (8012800 <__sflush_r+0x108>)
 8012758:	40ca      	lsrs	r2, r1
 801275a:	07d6      	lsls	r6, r2, #31
 801275c:	d528      	bpl.n	80127b0 <__sflush_r+0xb8>
 801275e:	2200      	movs	r2, #0
 8012760:	6062      	str	r2, [r4, #4]
 8012762:	04d9      	lsls	r1, r3, #19
 8012764:	6922      	ldr	r2, [r4, #16]
 8012766:	6022      	str	r2, [r4, #0]
 8012768:	d504      	bpl.n	8012774 <__sflush_r+0x7c>
 801276a:	1c42      	adds	r2, r0, #1
 801276c:	d101      	bne.n	8012772 <__sflush_r+0x7a>
 801276e:	682b      	ldr	r3, [r5, #0]
 8012770:	b903      	cbnz	r3, 8012774 <__sflush_r+0x7c>
 8012772:	6560      	str	r0, [r4, #84]	; 0x54
 8012774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012776:	602f      	str	r7, [r5, #0]
 8012778:	2900      	cmp	r1, #0
 801277a:	d0ca      	beq.n	8012712 <__sflush_r+0x1a>
 801277c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012780:	4299      	cmp	r1, r3
 8012782:	d002      	beq.n	801278a <__sflush_r+0x92>
 8012784:	4628      	mov	r0, r5
 8012786:	f7fe ff21 	bl	80115cc <_free_r>
 801278a:	2000      	movs	r0, #0
 801278c:	6360      	str	r0, [r4, #52]	; 0x34
 801278e:	e7c1      	b.n	8012714 <__sflush_r+0x1c>
 8012790:	6a21      	ldr	r1, [r4, #32]
 8012792:	2301      	movs	r3, #1
 8012794:	4628      	mov	r0, r5
 8012796:	47b0      	blx	r6
 8012798:	1c41      	adds	r1, r0, #1
 801279a:	d1c7      	bne.n	801272c <__sflush_r+0x34>
 801279c:	682b      	ldr	r3, [r5, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d0c4      	beq.n	801272c <__sflush_r+0x34>
 80127a2:	2b1d      	cmp	r3, #29
 80127a4:	d001      	beq.n	80127aa <__sflush_r+0xb2>
 80127a6:	2b16      	cmp	r3, #22
 80127a8:	d101      	bne.n	80127ae <__sflush_r+0xb6>
 80127aa:	602f      	str	r7, [r5, #0]
 80127ac:	e7b1      	b.n	8012712 <__sflush_r+0x1a>
 80127ae:	89a3      	ldrh	r3, [r4, #12]
 80127b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127b4:	81a3      	strh	r3, [r4, #12]
 80127b6:	e7ad      	b.n	8012714 <__sflush_r+0x1c>
 80127b8:	690f      	ldr	r7, [r1, #16]
 80127ba:	2f00      	cmp	r7, #0
 80127bc:	d0a9      	beq.n	8012712 <__sflush_r+0x1a>
 80127be:	0793      	lsls	r3, r2, #30
 80127c0:	680e      	ldr	r6, [r1, #0]
 80127c2:	bf08      	it	eq
 80127c4:	694b      	ldreq	r3, [r1, #20]
 80127c6:	600f      	str	r7, [r1, #0]
 80127c8:	bf18      	it	ne
 80127ca:	2300      	movne	r3, #0
 80127cc:	eba6 0807 	sub.w	r8, r6, r7
 80127d0:	608b      	str	r3, [r1, #8]
 80127d2:	f1b8 0f00 	cmp.w	r8, #0
 80127d6:	dd9c      	ble.n	8012712 <__sflush_r+0x1a>
 80127d8:	6a21      	ldr	r1, [r4, #32]
 80127da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80127dc:	4643      	mov	r3, r8
 80127de:	463a      	mov	r2, r7
 80127e0:	4628      	mov	r0, r5
 80127e2:	47b0      	blx	r6
 80127e4:	2800      	cmp	r0, #0
 80127e6:	dc06      	bgt.n	80127f6 <__sflush_r+0xfe>
 80127e8:	89a3      	ldrh	r3, [r4, #12]
 80127ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127ee:	81a3      	strh	r3, [r4, #12]
 80127f0:	f04f 30ff 	mov.w	r0, #4294967295
 80127f4:	e78e      	b.n	8012714 <__sflush_r+0x1c>
 80127f6:	4407      	add	r7, r0
 80127f8:	eba8 0800 	sub.w	r8, r8, r0
 80127fc:	e7e9      	b.n	80127d2 <__sflush_r+0xda>
 80127fe:	bf00      	nop
 8012800:	20400001 	.word	0x20400001

08012804 <_fflush_r>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	690b      	ldr	r3, [r1, #16]
 8012808:	4605      	mov	r5, r0
 801280a:	460c      	mov	r4, r1
 801280c:	b913      	cbnz	r3, 8012814 <_fflush_r+0x10>
 801280e:	2500      	movs	r5, #0
 8012810:	4628      	mov	r0, r5
 8012812:	bd38      	pop	{r3, r4, r5, pc}
 8012814:	b118      	cbz	r0, 801281e <_fflush_r+0x1a>
 8012816:	6983      	ldr	r3, [r0, #24]
 8012818:	b90b      	cbnz	r3, 801281e <_fflush_r+0x1a>
 801281a:	f7ff f937 	bl	8011a8c <__sinit>
 801281e:	4b14      	ldr	r3, [pc, #80]	; (8012870 <_fflush_r+0x6c>)
 8012820:	429c      	cmp	r4, r3
 8012822:	d11b      	bne.n	801285c <_fflush_r+0x58>
 8012824:	686c      	ldr	r4, [r5, #4]
 8012826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d0ef      	beq.n	801280e <_fflush_r+0xa>
 801282e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012830:	07d0      	lsls	r0, r2, #31
 8012832:	d404      	bmi.n	801283e <_fflush_r+0x3a>
 8012834:	0599      	lsls	r1, r3, #22
 8012836:	d402      	bmi.n	801283e <_fflush_r+0x3a>
 8012838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801283a:	f7ff f9d7 	bl	8011bec <__retarget_lock_acquire_recursive>
 801283e:	4628      	mov	r0, r5
 8012840:	4621      	mov	r1, r4
 8012842:	f7ff ff59 	bl	80126f8 <__sflush_r>
 8012846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012848:	07da      	lsls	r2, r3, #31
 801284a:	4605      	mov	r5, r0
 801284c:	d4e0      	bmi.n	8012810 <_fflush_r+0xc>
 801284e:	89a3      	ldrh	r3, [r4, #12]
 8012850:	059b      	lsls	r3, r3, #22
 8012852:	d4dd      	bmi.n	8012810 <_fflush_r+0xc>
 8012854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012856:	f7ff f9ca 	bl	8011bee <__retarget_lock_release_recursive>
 801285a:	e7d9      	b.n	8012810 <_fflush_r+0xc>
 801285c:	4b05      	ldr	r3, [pc, #20]	; (8012874 <_fflush_r+0x70>)
 801285e:	429c      	cmp	r4, r3
 8012860:	d101      	bne.n	8012866 <_fflush_r+0x62>
 8012862:	68ac      	ldr	r4, [r5, #8]
 8012864:	e7df      	b.n	8012826 <_fflush_r+0x22>
 8012866:	4b04      	ldr	r3, [pc, #16]	; (8012878 <_fflush_r+0x74>)
 8012868:	429c      	cmp	r4, r3
 801286a:	bf08      	it	eq
 801286c:	68ec      	ldreq	r4, [r5, #12]
 801286e:	e7da      	b.n	8012826 <_fflush_r+0x22>
 8012870:	08015a00 	.word	0x08015a00
 8012874:	08015a20 	.word	0x08015a20
 8012878:	080159e0 	.word	0x080159e0

0801287c <_lseek_r>:
 801287c:	b538      	push	{r3, r4, r5, lr}
 801287e:	4d07      	ldr	r5, [pc, #28]	; (801289c <_lseek_r+0x20>)
 8012880:	4604      	mov	r4, r0
 8012882:	4608      	mov	r0, r1
 8012884:	4611      	mov	r1, r2
 8012886:	2200      	movs	r2, #0
 8012888:	602a      	str	r2, [r5, #0]
 801288a:	461a      	mov	r2, r3
 801288c:	f7ef f946 	bl	8001b1c <_lseek>
 8012890:	1c43      	adds	r3, r0, #1
 8012892:	d102      	bne.n	801289a <_lseek_r+0x1e>
 8012894:	682b      	ldr	r3, [r5, #0]
 8012896:	b103      	cbz	r3, 801289a <_lseek_r+0x1e>
 8012898:	6023      	str	r3, [r4, #0]
 801289a:	bd38      	pop	{r3, r4, r5, pc}
 801289c:	20008194 	.word	0x20008194

080128a0 <__swhatbuf_r>:
 80128a0:	b570      	push	{r4, r5, r6, lr}
 80128a2:	460e      	mov	r6, r1
 80128a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128a8:	2900      	cmp	r1, #0
 80128aa:	b096      	sub	sp, #88	; 0x58
 80128ac:	4614      	mov	r4, r2
 80128ae:	461d      	mov	r5, r3
 80128b0:	da08      	bge.n	80128c4 <__swhatbuf_r+0x24>
 80128b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80128b6:	2200      	movs	r2, #0
 80128b8:	602a      	str	r2, [r5, #0]
 80128ba:	061a      	lsls	r2, r3, #24
 80128bc:	d410      	bmi.n	80128e0 <__swhatbuf_r+0x40>
 80128be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128c2:	e00e      	b.n	80128e2 <__swhatbuf_r+0x42>
 80128c4:	466a      	mov	r2, sp
 80128c6:	f000 f8d7 	bl	8012a78 <_fstat_r>
 80128ca:	2800      	cmp	r0, #0
 80128cc:	dbf1      	blt.n	80128b2 <__swhatbuf_r+0x12>
 80128ce:	9a01      	ldr	r2, [sp, #4]
 80128d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80128d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80128d8:	425a      	negs	r2, r3
 80128da:	415a      	adcs	r2, r3
 80128dc:	602a      	str	r2, [r5, #0]
 80128de:	e7ee      	b.n	80128be <__swhatbuf_r+0x1e>
 80128e0:	2340      	movs	r3, #64	; 0x40
 80128e2:	2000      	movs	r0, #0
 80128e4:	6023      	str	r3, [r4, #0]
 80128e6:	b016      	add	sp, #88	; 0x58
 80128e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080128ec <__smakebuf_r>:
 80128ec:	898b      	ldrh	r3, [r1, #12]
 80128ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128f0:	079d      	lsls	r5, r3, #30
 80128f2:	4606      	mov	r6, r0
 80128f4:	460c      	mov	r4, r1
 80128f6:	d507      	bpl.n	8012908 <__smakebuf_r+0x1c>
 80128f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80128fc:	6023      	str	r3, [r4, #0]
 80128fe:	6123      	str	r3, [r4, #16]
 8012900:	2301      	movs	r3, #1
 8012902:	6163      	str	r3, [r4, #20]
 8012904:	b002      	add	sp, #8
 8012906:	bd70      	pop	{r4, r5, r6, pc}
 8012908:	ab01      	add	r3, sp, #4
 801290a:	466a      	mov	r2, sp
 801290c:	f7ff ffc8 	bl	80128a0 <__swhatbuf_r>
 8012910:	9900      	ldr	r1, [sp, #0]
 8012912:	4605      	mov	r5, r0
 8012914:	4630      	mov	r0, r6
 8012916:	f7fe fec5 	bl	80116a4 <_malloc_r>
 801291a:	b948      	cbnz	r0, 8012930 <__smakebuf_r+0x44>
 801291c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012920:	059a      	lsls	r2, r3, #22
 8012922:	d4ef      	bmi.n	8012904 <__smakebuf_r+0x18>
 8012924:	f023 0303 	bic.w	r3, r3, #3
 8012928:	f043 0302 	orr.w	r3, r3, #2
 801292c:	81a3      	strh	r3, [r4, #12]
 801292e:	e7e3      	b.n	80128f8 <__smakebuf_r+0xc>
 8012930:	4b0d      	ldr	r3, [pc, #52]	; (8012968 <__smakebuf_r+0x7c>)
 8012932:	62b3      	str	r3, [r6, #40]	; 0x28
 8012934:	89a3      	ldrh	r3, [r4, #12]
 8012936:	6020      	str	r0, [r4, #0]
 8012938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801293c:	81a3      	strh	r3, [r4, #12]
 801293e:	9b00      	ldr	r3, [sp, #0]
 8012940:	6163      	str	r3, [r4, #20]
 8012942:	9b01      	ldr	r3, [sp, #4]
 8012944:	6120      	str	r0, [r4, #16]
 8012946:	b15b      	cbz	r3, 8012960 <__smakebuf_r+0x74>
 8012948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801294c:	4630      	mov	r0, r6
 801294e:	f000 f8a5 	bl	8012a9c <_isatty_r>
 8012952:	b128      	cbz	r0, 8012960 <__smakebuf_r+0x74>
 8012954:	89a3      	ldrh	r3, [r4, #12]
 8012956:	f023 0303 	bic.w	r3, r3, #3
 801295a:	f043 0301 	orr.w	r3, r3, #1
 801295e:	81a3      	strh	r3, [r4, #12]
 8012960:	89a0      	ldrh	r0, [r4, #12]
 8012962:	4305      	orrs	r5, r0
 8012964:	81a5      	strh	r5, [r4, #12]
 8012966:	e7cd      	b.n	8012904 <__smakebuf_r+0x18>
 8012968:	08011a25 	.word	0x08011a25

0801296c <_realloc_r>:
 801296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012970:	4680      	mov	r8, r0
 8012972:	4614      	mov	r4, r2
 8012974:	460e      	mov	r6, r1
 8012976:	b921      	cbnz	r1, 8012982 <_realloc_r+0x16>
 8012978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801297c:	4611      	mov	r1, r2
 801297e:	f7fe be91 	b.w	80116a4 <_malloc_r>
 8012982:	b92a      	cbnz	r2, 8012990 <_realloc_r+0x24>
 8012984:	f7fe fe22 	bl	80115cc <_free_r>
 8012988:	4625      	mov	r5, r4
 801298a:	4628      	mov	r0, r5
 801298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012990:	f000 f894 	bl	8012abc <_malloc_usable_size_r>
 8012994:	4284      	cmp	r4, r0
 8012996:	4607      	mov	r7, r0
 8012998:	d802      	bhi.n	80129a0 <_realloc_r+0x34>
 801299a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801299e:	d812      	bhi.n	80129c6 <_realloc_r+0x5a>
 80129a0:	4621      	mov	r1, r4
 80129a2:	4640      	mov	r0, r8
 80129a4:	f7fe fe7e 	bl	80116a4 <_malloc_r>
 80129a8:	4605      	mov	r5, r0
 80129aa:	2800      	cmp	r0, #0
 80129ac:	d0ed      	beq.n	801298a <_realloc_r+0x1e>
 80129ae:	42bc      	cmp	r4, r7
 80129b0:	4622      	mov	r2, r4
 80129b2:	4631      	mov	r1, r6
 80129b4:	bf28      	it	cs
 80129b6:	463a      	movcs	r2, r7
 80129b8:	f7fe fdd8 	bl	801156c <memcpy>
 80129bc:	4631      	mov	r1, r6
 80129be:	4640      	mov	r0, r8
 80129c0:	f7fe fe04 	bl	80115cc <_free_r>
 80129c4:	e7e1      	b.n	801298a <_realloc_r+0x1e>
 80129c6:	4635      	mov	r5, r6
 80129c8:	e7df      	b.n	801298a <_realloc_r+0x1e>
	...

080129cc <_read_r>:
 80129cc:	b538      	push	{r3, r4, r5, lr}
 80129ce:	4d07      	ldr	r5, [pc, #28]	; (80129ec <_read_r+0x20>)
 80129d0:	4604      	mov	r4, r0
 80129d2:	4608      	mov	r0, r1
 80129d4:	4611      	mov	r1, r2
 80129d6:	2200      	movs	r2, #0
 80129d8:	602a      	str	r2, [r5, #0]
 80129da:	461a      	mov	r2, r3
 80129dc:	f7ef f83e 	bl	8001a5c <_read>
 80129e0:	1c43      	adds	r3, r0, #1
 80129e2:	d102      	bne.n	80129ea <_read_r+0x1e>
 80129e4:	682b      	ldr	r3, [r5, #0]
 80129e6:	b103      	cbz	r3, 80129ea <_read_r+0x1e>
 80129e8:	6023      	str	r3, [r4, #0]
 80129ea:	bd38      	pop	{r3, r4, r5, pc}
 80129ec:	20008194 	.word	0x20008194

080129f0 <_raise_r>:
 80129f0:	291f      	cmp	r1, #31
 80129f2:	b538      	push	{r3, r4, r5, lr}
 80129f4:	4604      	mov	r4, r0
 80129f6:	460d      	mov	r5, r1
 80129f8:	d904      	bls.n	8012a04 <_raise_r+0x14>
 80129fa:	2316      	movs	r3, #22
 80129fc:	6003      	str	r3, [r0, #0]
 80129fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012a02:	bd38      	pop	{r3, r4, r5, pc}
 8012a04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012a06:	b112      	cbz	r2, 8012a0e <_raise_r+0x1e>
 8012a08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a0c:	b94b      	cbnz	r3, 8012a22 <_raise_r+0x32>
 8012a0e:	4620      	mov	r0, r4
 8012a10:	f000 f830 	bl	8012a74 <_getpid_r>
 8012a14:	462a      	mov	r2, r5
 8012a16:	4601      	mov	r1, r0
 8012a18:	4620      	mov	r0, r4
 8012a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a1e:	f000 b817 	b.w	8012a50 <_kill_r>
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	d00a      	beq.n	8012a3c <_raise_r+0x4c>
 8012a26:	1c59      	adds	r1, r3, #1
 8012a28:	d103      	bne.n	8012a32 <_raise_r+0x42>
 8012a2a:	2316      	movs	r3, #22
 8012a2c:	6003      	str	r3, [r0, #0]
 8012a2e:	2001      	movs	r0, #1
 8012a30:	e7e7      	b.n	8012a02 <_raise_r+0x12>
 8012a32:	2400      	movs	r4, #0
 8012a34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a38:	4628      	mov	r0, r5
 8012a3a:	4798      	blx	r3
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	e7e0      	b.n	8012a02 <_raise_r+0x12>

08012a40 <raise>:
 8012a40:	4b02      	ldr	r3, [pc, #8]	; (8012a4c <raise+0xc>)
 8012a42:	4601      	mov	r1, r0
 8012a44:	6818      	ldr	r0, [r3, #0]
 8012a46:	f7ff bfd3 	b.w	80129f0 <_raise_r>
 8012a4a:	bf00      	nop
 8012a4c:	200000bc 	.word	0x200000bc

08012a50 <_kill_r>:
 8012a50:	b538      	push	{r3, r4, r5, lr}
 8012a52:	4d07      	ldr	r5, [pc, #28]	; (8012a70 <_kill_r+0x20>)
 8012a54:	2300      	movs	r3, #0
 8012a56:	4604      	mov	r4, r0
 8012a58:	4608      	mov	r0, r1
 8012a5a:	4611      	mov	r1, r2
 8012a5c:	602b      	str	r3, [r5, #0]
 8012a5e:	f7ee ffe1 	bl	8001a24 <_kill>
 8012a62:	1c43      	adds	r3, r0, #1
 8012a64:	d102      	bne.n	8012a6c <_kill_r+0x1c>
 8012a66:	682b      	ldr	r3, [r5, #0]
 8012a68:	b103      	cbz	r3, 8012a6c <_kill_r+0x1c>
 8012a6a:	6023      	str	r3, [r4, #0]
 8012a6c:	bd38      	pop	{r3, r4, r5, pc}
 8012a6e:	bf00      	nop
 8012a70:	20008194 	.word	0x20008194

08012a74 <_getpid_r>:
 8012a74:	f7ee bfce 	b.w	8001a14 <_getpid>

08012a78 <_fstat_r>:
 8012a78:	b538      	push	{r3, r4, r5, lr}
 8012a7a:	4d07      	ldr	r5, [pc, #28]	; (8012a98 <_fstat_r+0x20>)
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	4604      	mov	r4, r0
 8012a80:	4608      	mov	r0, r1
 8012a82:	4611      	mov	r1, r2
 8012a84:	602b      	str	r3, [r5, #0]
 8012a86:	f7ef f82e 	bl	8001ae6 <_fstat>
 8012a8a:	1c43      	adds	r3, r0, #1
 8012a8c:	d102      	bne.n	8012a94 <_fstat_r+0x1c>
 8012a8e:	682b      	ldr	r3, [r5, #0]
 8012a90:	b103      	cbz	r3, 8012a94 <_fstat_r+0x1c>
 8012a92:	6023      	str	r3, [r4, #0]
 8012a94:	bd38      	pop	{r3, r4, r5, pc}
 8012a96:	bf00      	nop
 8012a98:	20008194 	.word	0x20008194

08012a9c <_isatty_r>:
 8012a9c:	b538      	push	{r3, r4, r5, lr}
 8012a9e:	4d06      	ldr	r5, [pc, #24]	; (8012ab8 <_isatty_r+0x1c>)
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	4604      	mov	r4, r0
 8012aa4:	4608      	mov	r0, r1
 8012aa6:	602b      	str	r3, [r5, #0]
 8012aa8:	f7ef f82d 	bl	8001b06 <_isatty>
 8012aac:	1c43      	adds	r3, r0, #1
 8012aae:	d102      	bne.n	8012ab6 <_isatty_r+0x1a>
 8012ab0:	682b      	ldr	r3, [r5, #0]
 8012ab2:	b103      	cbz	r3, 8012ab6 <_isatty_r+0x1a>
 8012ab4:	6023      	str	r3, [r4, #0]
 8012ab6:	bd38      	pop	{r3, r4, r5, pc}
 8012ab8:	20008194 	.word	0x20008194

08012abc <_malloc_usable_size_r>:
 8012abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ac0:	1f18      	subs	r0, r3, #4
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	bfbc      	itt	lt
 8012ac6:	580b      	ldrlt	r3, [r1, r0]
 8012ac8:	18c0      	addlt	r0, r0, r3
 8012aca:	4770      	bx	lr

08012acc <_init>:
 8012acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ace:	bf00      	nop
 8012ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ad2:	bc08      	pop	{r3}
 8012ad4:	469e      	mov	lr, r3
 8012ad6:	4770      	bx	lr

08012ad8 <_fini>:
 8012ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ada:	bf00      	nop
 8012adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ade:	bc08      	pop	{r3}
 8012ae0:	469e      	mov	lr, r3
 8012ae2:	4770      	bx	lr
