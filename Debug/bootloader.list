
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08005f20  08005f20  00015f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062d4  080062d4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080062d4  080062d4  000162d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062dc  080062dc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080062e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000003d4  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000468  20000468  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001311c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037f6  00000000  00000000  000331e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  000369d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001038  00000000  00000000  00037bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fad  00000000  00000000  00038bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a1a  00000000  00000000  0005eb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dad7a  00000000  00000000  000755b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150331  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bd8  00000000  00000000  00150384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005f08 	.word	0x08005f08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08005f08 	.word	0x08005f08

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <getVersions>:
uint32_t firstBootFlagAddress2 = CONFIG_2_ADDRESS + 4;
uint32_t notValidFlagAddress2 = CONFIG_2_ADDRESS + 8;
uint32_t versionAddress2 = CONFIG_2_ADDRESS + 12;

static char versionBuf[128];
char* getVersions() { //TODO
 80005c4:	b598      	push	{r3, r4, r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	if (FlashReadWord(versionAddress1) == (uint32_t) 0xFFFF &&
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <getVersions+0xb4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fc25 	bl	8000e1c <FlashReadWord>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005d8:	4293      	cmp	r3, r2
 80005da:	d10b      	bne.n	80005f4 <getVersions+0x30>
			FlashReadWord(versionAddress2) == (uint32_t) 0xFFFF) {
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <getVersions+0xb8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fc1b 	bl	8000e1c <FlashReadWord>
 80005e6:	4603      	mov	r3, r0
	if (FlashReadWord(versionAddress1) == (uint32_t) 0xFFFF &&
 80005e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d101      	bne.n	80005f4 <getVersions+0x30>
		return "No applications in flash\n";
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <getVersions+0xbc>)
 80005f2:	e03f      	b.n	8000674 <getVersions+0xb0>
	} else if (FlashReadWord(versionAddress1) == (uint32_t) 0xFFFF) {
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <getVersions+0xb4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fc0f 	bl	8000e1c <FlashReadWord>
 80005fe:	4603      	mov	r3, r0
 8000600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000604:	4293      	cmp	r3, r2
 8000606:	d10c      	bne.n	8000622 <getVersions+0x5e>
		sprintf(versionBuf, "App 1 version: none\nApp 2 version: %"PRIu32"\n", FlashReadWord(versionAddress2));
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <getVersions+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fc05 	bl	8000e1c <FlashReadWord>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	491b      	ldr	r1, [pc, #108]	; (8000684 <getVersions+0xc0>)
 8000618:	481b      	ldr	r0, [pc, #108]	; (8000688 <getVersions+0xc4>)
 800061a:	f005 f873 	bl	8005704 <siprintf>
		return versionBuf;
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <getVersions+0xc4>)
 8000620:	e028      	b.n	8000674 <getVersions+0xb0>
	} else if (FlashReadWord(versionAddress2) == (uint32_t) 0xFFFF) {
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <getVersions+0xb8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fbf8 	bl	8000e1c <FlashReadWord>
 800062c:	4603      	mov	r3, r0
 800062e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000632:	4293      	cmp	r3, r2
 8000634:	d10c      	bne.n	8000650 <getVersions+0x8c>
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: none\n", FlashReadWord(versionAddress1));
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <getVersions+0xb4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fbee 	bl	8000e1c <FlashReadWord>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4911      	ldr	r1, [pc, #68]	; (800068c <getVersions+0xc8>)
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <getVersions+0xc4>)
 8000648:	f005 f85c 	bl	8005704 <siprintf>
		return versionBuf;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <getVersions+0xc4>)
 800064e:	e011      	b.n	8000674 <getVersions+0xb0>
	} else {
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: %"PRIu32"\n",
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <getVersions+0xb4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fbe1 	bl	8000e1c <FlashReadWord>
 800065a:	4604      	mov	r4, r0
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <getVersions+0xb8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fbdb 	bl	8000e1c <FlashReadWord>
 8000666:	4603      	mov	r3, r0
 8000668:	4622      	mov	r2, r4
 800066a:	4909      	ldr	r1, [pc, #36]	; (8000690 <getVersions+0xcc>)
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <getVersions+0xc4>)
 800066e:	f005 f849 	bl	8005704 <siprintf>
				FlashReadWord(versionAddress1), FlashReadWord(versionAddress2));
		return versionBuf;
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <getVersions+0xc4>)
	}
}
 8000674:	4618      	mov	r0, r3
 8000676:	bd98      	pop	{r3, r4, r7, pc}
 8000678:	2000000c 	.word	0x2000000c
 800067c:	2000001c 	.word	0x2000001c
 8000680:	08005f20 	.word	0x08005f20
 8000684:	08005f3c 	.word	0x08005f3c
 8000688:	200000b0 	.word	0x200000b0
 800068c:	08005f64 	.word	0x08005f64
 8000690:	08005f8c 	.word	0x08005f8c

08000694 <getLatestApplicationAddress>:

uint32_t getLatestApplicationAddress() {
 8000694:	b598      	push	{r3, r4, r7, lr}
 8000696:	af00      	add	r7, sp, #0
	if (FlashReadWord(seqAddress1) < FlashReadWord(seqAddress2)) {
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <getLatestApplicationAddress+0x4c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fbbd 	bl	8000e1c <FlashReadWord>
 80006a2:	4604      	mov	r4, r0
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <getLatestApplicationAddress+0x50>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fbb7 	bl	8000e1c <FlashReadWord>
 80006ae:	4603      	mov	r3, r0
 80006b0:	429c      	cmp	r4, r3
 80006b2:	d201      	bcs.n	80006b8 <getLatestApplicationAddress+0x24>
		return APP_1_ADDRESS;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <getLatestApplicationAddress+0x54>)
 80006b6:	e010      	b.n	80006da <getLatestApplicationAddress+0x46>
	} else if (FlashReadWord(seqAddress2) < FlashReadWord(seqAddress1)) {
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <getLatestApplicationAddress+0x50>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fbad 	bl	8000e1c <FlashReadWord>
 80006c2:	4604      	mov	r4, r0
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <getLatestApplicationAddress+0x4c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fba7 	bl	8000e1c <FlashReadWord>
 80006ce:	4603      	mov	r3, r0
 80006d0:	429c      	cmp	r4, r3
 80006d2:	d201      	bcs.n	80006d8 <getLatestApplicationAddress+0x44>
		return APP_2_ADDRESS;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <getLatestApplicationAddress+0x58>)
 80006d6:	e000      	b.n	80006da <getLatestApplicationAddress+0x46>
	} else {
		return 0;
 80006d8:	2300      	movs	r3, #0
	}
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd98      	pop	{r3, r4, r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000010 	.word	0x20000010
 80006e8:	0800c000 	.word	0x0800c000
 80006ec:	08104000 	.word	0x08104000

080006f0 <updateConfig>:

void updateConfig() {
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 80006f6:	f7ff ffcd 	bl	8000694 <getLatestApplicationAddress>
 80006fa:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_1_ADDRESS) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a21      	ldr	r2, [pc, #132]	; (8000784 <updateConfig+0x94>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d11d      	bne.n	8000740 <updateConfig+0x50>
		EraseSector(CONFIG_2_SECTOR);
 8000704:	200c      	movs	r0, #12
 8000706:	f000 fb95 	bl	8000e34 <EraseSector>
		FlashWriteWord(seqAddress2, FlashReadWord(seqAddress1) - 1);
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <updateConfig+0x98>)
 800070c:	681c      	ldr	r4, [r3, #0]
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <updateConfig+0x9c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fb82 	bl	8000e1c <FlashReadWord>
 8000718:	4603      	mov	r3, r0
 800071a:	3b01      	subs	r3, #1
 800071c:	4619      	mov	r1, r3
 800071e:	4620      	mov	r0, r4
 8000720:	f000 fb65 	bl	8000dee <FlashWriteWord>
		//FlashWriteWord(firstBootFlagAddress2, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress2, 0xFFFF); // FFFF - not valid (default)
		FlashWriteWord(versionAddress2, FlashReadWord(versionAddress1) + 1);
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <updateConfig+0xa0>)
 8000726:	681c      	ldr	r4, [r3, #0]
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <updateConfig+0xa4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fb75 	bl	8000e1c <FlashReadWord>
 8000732:	4603      	mov	r3, r0
 8000734:	3301      	adds	r3, #1
 8000736:	4619      	mov	r1, r3
 8000738:	4620      	mov	r0, r4
 800073a:	f000 fb58 	bl	8000dee <FlashWriteWord>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
		//FlashWriteWord(firstBootFlagAddress1, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress1, 0xFFFF); // FFFF - not valid (default)
		FlashWriteWord(versionAddress1, FlashReadWord(versionAddress2) + 1);
	}
}
 800073e:	e01c      	b.n	800077a <updateConfig+0x8a>
		EraseSector(CONFIG_1_SECTOR);
 8000740:	2002      	movs	r0, #2
 8000742:	f000 fb77 	bl	8000e34 <EraseSector>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <updateConfig+0x9c>)
 8000748:	681c      	ldr	r4, [r3, #0]
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <updateConfig+0x98>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fb64 	bl	8000e1c <FlashReadWord>
 8000754:	4603      	mov	r3, r0
 8000756:	3b01      	subs	r3, #1
 8000758:	4619      	mov	r1, r3
 800075a:	4620      	mov	r0, r4
 800075c:	f000 fb47 	bl	8000dee <FlashWriteWord>
		FlashWriteWord(versionAddress1, FlashReadWord(versionAddress2) + 1);
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <updateConfig+0xa4>)
 8000762:	681c      	ldr	r4, [r3, #0]
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <updateConfig+0xa0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fb57 	bl	8000e1c <FlashReadWord>
 800076e:	4603      	mov	r3, r0
 8000770:	3301      	adds	r3, #1
 8000772:	4619      	mov	r1, r3
 8000774:	4620      	mov	r0, r4
 8000776:	f000 fb3a 	bl	8000dee <FlashWriteWord>
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	bf00      	nop
 8000784:	0800c000 	.word	0x0800c000
 8000788:	20000010 	.word	0x20000010
 800078c:	20000000 	.word	0x20000000
 8000790:	2000001c 	.word	0x2000001c
 8000794:	2000000c 	.word	0x2000000c

08000798 <rollbackConfig>:

void rollbackConfig() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 800079e:	f7ff ff79 	bl	8000694 <getLatestApplicationAddress>
 80007a2:	6078      	str	r0, [r7, #4]
		if (latestAppAddress == APP_1_ADDRESS) EraseSector(CONFIG_1_SECTOR);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a09      	ldr	r2, [pc, #36]	; (80007cc <rollbackConfig+0x34>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d103      	bne.n	80007b4 <rollbackConfig+0x1c>
 80007ac:	2002      	movs	r0, #2
 80007ae:	f000 fb41 	bl	8000e34 <EraseSector>
		else if (latestAppAddress == APP_2_ADDRESS)	EraseSector(CONFIG_2_SECTOR);
}
 80007b2:	e006      	b.n	80007c2 <rollbackConfig+0x2a>
		else if (latestAppAddress == APP_2_ADDRESS)	EraseSector(CONFIG_2_SECTOR);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <rollbackConfig+0x38>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d102      	bne.n	80007c2 <rollbackConfig+0x2a>
 80007bc:	200c      	movs	r0, #12
 80007be:	f000 fb39 	bl	8000e34 <EraseSector>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	0800c000 	.word	0x0800c000
 80007d0:	08104000 	.word	0x08104000

080007d4 <validateApplications>:

void validateApplications() {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	if (FlashReadWord(notValidFlagAddress1) == (uint32_t) 0xFFFF &&
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <validateApplications+0x5c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fb1d 	bl	8000e1c <FlashReadWord>
 80007e2:	4603      	mov	r3, r0
 80007e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d10a      	bne.n	8000802 <validateApplications+0x2e>
			FlashReadWord(firstBootFlagAddress1) == 0) EraseSector(CONFIG_1_SECTOR);
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <validateApplications+0x60>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fb13 	bl	8000e1c <FlashReadWord>
 80007f6:	4603      	mov	r3, r0
	if (FlashReadWord(notValidFlagAddress1) == (uint32_t) 0xFFFF &&
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <validateApplications+0x2e>
			FlashReadWord(firstBootFlagAddress1) == 0) EraseSector(CONFIG_1_SECTOR);
 80007fc:	2002      	movs	r0, #2
 80007fe:	f000 fb19 	bl	8000e34 <EraseSector>
	if (FlashReadWord(notValidFlagAddress2) == (uint32_t) 0xFFFF &&
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <validateApplications+0x64>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fb08 	bl	8000e1c <FlashReadWord>
 800080c:	4603      	mov	r3, r0
 800080e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000812:	4293      	cmp	r3, r2
 8000814:	d10a      	bne.n	800082c <validateApplications+0x58>
			FlashReadWord(firstBootFlagAddress2) == 0) EraseSector(CONFIG_2_SECTOR);
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <validateApplications+0x68>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fafe 	bl	8000e1c <FlashReadWord>
 8000820:	4603      	mov	r3, r0
	if (FlashReadWord(notValidFlagAddress2) == (uint32_t) 0xFFFF &&
 8000822:	2b00      	cmp	r3, #0
 8000824:	d102      	bne.n	800082c <validateApplications+0x58>
			FlashReadWord(firstBootFlagAddress2) == 0) EraseSector(CONFIG_2_SECTOR);
 8000826:	200c      	movs	r0, #12
 8000828:	f000 fb04 	bl	8000e34 <EraseSector>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000008 	.word	0x20000008
 8000834:	20000004 	.word	0x20000004
 8000838:	20000018 	.word	0x20000018
 800083c:	20000014 	.word	0x20000014

08000840 <jumpToApp>:

void jumpToApp() {
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
	  uint32_t address = getLatestApplicationAddress();
 8000846:	f7ff ff25 	bl	8000694 <getLatestApplicationAddress>
 800084a:	6178      	str	r0, [r7, #20]
	  if (address == APP_1_ADDRESS) FlashWriteWord(firstBootFlagAddress1, 0);
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	4a30      	ldr	r2, [pc, #192]	; (8000910 <jumpToApp+0xd0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d106      	bne.n	8000862 <jumpToApp+0x22>
 8000854:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <jumpToApp+0xd4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fac7 	bl	8000dee <FlashWriteWord>
 8000860:	e009      	b.n	8000876 <jumpToApp+0x36>
	  else if (address == APP_2_ADDRESS) FlashWriteWord(firstBootFlagAddress2, 0);
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	4a2c      	ldr	r2, [pc, #176]	; (8000918 <jumpToApp+0xd8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d14e      	bne.n	8000908 <jumpToApp+0xc8>
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <jumpToApp+0xdc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fabc 	bl	8000dee <FlashWriteWord>
	  else return;

	  void(*app_reset_handler)();

	  //shut down any tasks remaining
	  HAL_TIM_Base_Stop_IT(&htim6);
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <jumpToApp+0xe0>)
 8000878:	f003 faec 	bl	8003e54 <HAL_TIM_Base_Stop_IT>
	  uartDisableInterruption();
 800087c:	f001 fa54 	bl	8001d28 <uartDisableInterruption>

	  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <jumpToApp+0xe4>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <jumpToApp+0xe4>)
 8000886:	f023 0304 	bic.w	r3, r3, #4
 800088a:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <jumpToApp+0xe4>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4a24      	ldr	r2, [pc, #144]	; (8000924 <jumpToApp+0xe4>)
 8000892:	f023 0308 	bic.w	r3, r3, #8
 8000896:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <jumpToApp+0xe4>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <jumpToApp+0xe4>)
 800089e:	f023 0302 	bic.w	r3, r3, #2
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <jumpToApp+0xe4>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <jumpToApp+0xe4>)
 80008aa:	f023 0301 	bic.w	r3, r3, #1
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 80008b0:	f003 f918 	bl	8003ae4 <HAL_RCC_DeInit>
	  HAL_DeInit();// to disable all the peripherals
 80008b4:	f001 fd30 	bl	8002318 <HAL_DeInit>

	  SysTick->CTRL = 0;//to turn off the systick
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <jumpToApp+0xe8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <jumpToApp+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <jumpToApp+0xe8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	2301      	movs	r3, #1
 80008cc:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	f383 8810 	msr	PRIMASK, r3
}
 80008d4:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80008d6:	b672      	cpsid	i
}
 80008d8:	bf00      	nop
	  //disable interrupts
	  __set_PRIMASK(1);
	  __disable_irq();

	  //__DMB(); // Data Memory Barrier to ensure write to memory is completed
	  SCB->VTOR = address;//change this
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <jumpToApp+0xec>)
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	6093      	str	r3, [r2, #8]
      //__DSB(); // Data Synchronization Barrier to ensure all subsequence instructions use the new configuation

	  //configure the MSP by reading the value from the base address
	  uint32_t msp_value = *(__IO uint32_t*) address;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f383 8808 	msr	MSP, r3
}
 80008f0:	bf00      	nop

	  __set_MSP(msp_value);

	  uint32_t resethandler_address = *(__IO uint32_t*) (address + 4);
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3304      	adds	r3, #4
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]

	  //app_reset_handler = (void*)resethandler_address;
	  app_reset_handler = (void (*)(void)) (resethandler_address);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80008fe:	b662      	cpsie	i
}
 8000900:	bf00      	nop

	  //jump to reset handler of the user app.
	  //NVIC_SystemReset(); //?????
	  __enable_irq();
	  app_reset_handler();
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	4798      	blx	r3
 8000906:	e000      	b.n	800090a <jumpToApp+0xca>
	  else return;
 8000908:	bf00      	nop
}
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	0800c000 	.word	0x0800c000
 8000914:	20000004 	.word	0x20000004
 8000918:	08104000 	.word	0x08104000
 800091c:	20000014 	.word	0x20000014
 8000920:	20000210 	.word	0x20000210
 8000924:	40023800 	.word	0x40023800
 8000928:	e000e010 	.word	0xe000e010
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <eraseLogicalBank1>:

void eraseLogicalBank1() {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	EraseSector(FLASH_SECTOR_3);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 fa7d 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_4);
 800093a:	2004      	movs	r0, #4
 800093c:	f000 fa7a 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_5);
 8000940:	2005      	movs	r0, #5
 8000942:	f000 fa77 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_6);
 8000946:	2006      	movs	r0, #6
 8000948:	f000 fa74 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_7);
 800094c:	2007      	movs	r0, #7
 800094e:	f000 fa71 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_8);
 8000952:	2008      	movs	r0, #8
 8000954:	f000 fa6e 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_9);
 8000958:	2009      	movs	r0, #9
 800095a:	f000 fa6b 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_10);
 800095e:	200a      	movs	r0, #10
 8000960:	f000 fa68 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_11);
 8000964:	200b      	movs	r0, #11
 8000966:	f000 fa65 	bl	8000e34 <EraseSector>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}

0800096e <eraseLogicalBank2>:

void eraseLogicalBank2() {
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
	EraseSector(FLASH_SECTOR_13);
 8000972:	200d      	movs	r0, #13
 8000974:	f000 fa5e 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_14);
 8000978:	200e      	movs	r0, #14
 800097a:	f000 fa5b 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_15);
 800097e:	200f      	movs	r0, #15
 8000980:	f000 fa58 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_16);
 8000984:	2010      	movs	r0, #16
 8000986:	f000 fa55 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_17);
 800098a:	2011      	movs	r0, #17
 800098c:	f000 fa52 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_18);
 8000990:	2012      	movs	r0, #18
 8000992:	f000 fa4f 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_19);
 8000996:	2013      	movs	r0, #19
 8000998:	f000 fa4c 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_20);
 800099c:	2014      	movs	r0, #20
 800099e:	f000 fa49 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_21);
 80009a2:	2015      	movs	r0, #21
 80009a4:	f000 fa46 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_22);
 80009a8:	2016      	movs	r0, #22
 80009aa:	f000 fa43 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_23);
 80009ae:	2017      	movs	r0, #23
 80009b0:	f000 fa40 	bl	8000e34 <EraseSector>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <eraseLogicalBank>:

void eraseLogicalBank() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 80009be:	f7ff fe69 	bl	8000694 <getLatestApplicationAddress>
 80009c2:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_2_ADDRESS) eraseLogicalBank2();
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <eraseLogicalBank+0x28>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d102      	bne.n	80009d2 <eraseLogicalBank+0x1a>
 80009cc:	f7ff ffcf 	bl	800096e <eraseLogicalBank2>
	else eraseLogicalBank1();
}
 80009d0:	e001      	b.n	80009d6 <eraseLogicalBank+0x1e>
	else eraseLogicalBank1();
 80009d2:	f7ff ffad 	bl	8000930 <eraseLogicalBank1>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	08104000 	.word	0x08104000

080009e4 <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 80009ee:	200c      	movs	r0, #12
 80009f0:	f004 fd88 	bl	8005504 <malloc>
 80009f4:	4603      	mov	r3, r0
 80009f6:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 fd82 	bl	8005504 <malloc>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	88fa      	ldrh	r2, [r7, #6]
 8000a0c:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f886 	bl	8000b20 <bufferClear>
    return buffer;
 8000a14:	68fb      	ldr	r3, [r7, #12]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	460b      	mov	r3, r1
 8000a28:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	889a      	ldrh	r2, [r3, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	88db      	ldrh	r3, [r3, #6]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d21f      	bcs.n	8000a76 <bufferPush+0x58>
        disableInt();
 8000a36:	f000 f8e7 	bl	8000c08 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	8812      	ldrh	r2, [r2, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	78fa      	ldrb	r2, [r7, #3]
 8000a46:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	88d2      	ldrh	r2, [r2, #6]
 8000a52:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a56:	fb01 f202 	mul.w	r2, r1, r2
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	3301      	adds	r3, #1
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	809a      	strh	r2, [r3, #4]

        enableInt();
 8000a6e:	f000 f8df 	bl	8000c30 <enableInt>
        return 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <bufferPush+0x5a>
    } else
        return 0;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	82fb      	strh	r3, [r7, #22]
 8000a92:	e00f      	b.n	8000ab4 <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 8000a94:	8afb      	ldrh	r3, [r7, #22]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff ffbd 	bl	8000a1e <bufferPush>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <bufferPushValues+0x2e>
            return pushed;
 8000aaa:	8afb      	ldrh	r3, [r7, #22]
 8000aac:	e007      	b.n	8000abe <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8000aae:	8afb      	ldrh	r3, [r7, #22]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	82fb      	strh	r3, [r7, #22]
 8000ab4:	8afa      	ldrh	r2, [r7, #22]
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d3eb      	bcc.n	8000a94 <bufferPushValues+0x14>
    }
    return pushed;
 8000abc:	8afb      	ldrh	r3, [r7, #22]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	889b      	ldrh	r3, [r3, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <bufferPop+0x14>
        return 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e01e      	b.n	8000b18 <bufferPop+0x52>

    disableInt();
 8000ada:	f000 f895 	bl	8000c08 <disableInt>

    buffer->size--;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	889b      	ldrh	r3, [r3, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	8852      	ldrh	r2, [r2, #2]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	885b      	ldrh	r3, [r3, #2]
 8000afc:	3301      	adds	r3, #1
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	88d2      	ldrh	r2, [r2, #6]
 8000b02:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b06:	fb01 f202 	mul.w	r2, r1, r2
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	805a      	strh	r2, [r3, #2]

    enableInt();
 8000b12:	f000 f88d 	bl	8000c30 <enableInt>

    return value;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <bufferClear>:

uint8_t bufferPeek(const Buffer * const buffer) {
    return buffer->data[buffer->ptrOut];
}

void bufferClear(Buffer * const buffer) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    disableInt();
 8000b28:	f000 f86e 	bl	8000c08 <disableInt>
    buffer->size = 0;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	805a      	strh	r2, [r3, #2]
    enableInt();
 8000b3e:	f000 f877 	bl	8000c30 <enableInt>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	889b      	ldrh	r3, [r3, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	4613      	mov	r3, r2
 8000b78:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff ffe5 	bl	8000b4a <bufferHasValues>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <bufferPopValues+0x1e>
        return 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e01d      	b.n	8000bc6 <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f000 f81f 	bl	8000bce <bufferGetSize>
 8000b90:	4603      	mov	r3, r0
 8000b92:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 8000b94:	8afa      	ldrh	r2, [r7, #22]
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d901      	bls.n	8000ba0 <bufferPopValues+0x34>
        popSize = bufSize;
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	82bb      	strh	r3, [r7, #20]
 8000ba4:	e00a      	b.n	8000bbc <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 8000ba6:	8abb      	ldrh	r3, [r7, #20]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	18d4      	adds	r4, r2, r3
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f7ff ff8a 	bl	8000ac6 <bufferPop>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 8000bb6:	8abb      	ldrh	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	82bb      	strh	r3, [r7, #20]
 8000bbc:	8aba      	ldrh	r2, [r7, #20]
 8000bbe:	8afb      	ldrh	r3, [r7, #22]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d3f0      	bcc.n	8000ba6 <bufferPopValues+0x3a>
    return popSize;
 8000bc4:	8afb      	ldrh	r3, [r7, #22]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}

08000bce <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
    return buffer->size;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	889b      	ldrh	r3, [r3, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	88da      	ldrh	r2, [r3, #6]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	889b      	ldrh	r3, [r3, #4]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	b29b      	uxth	r3, r3
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <disableInt>:
		bufferPush(destination, var);
	}
	return 1;
}

static void disableInt() {
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8000c12:	607b      	str	r3, [r7, #4]
  return(result);
 8000c14:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <disableInt+0x24>)
 8000c18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1a:	b672      	cpsid	i
}
 8000c1c:	bf00      	nop
    __disable_irq();
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000130 	.word	0x20000130

08000c30 <enableInt>:

static void enableInt() {
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <enableInt+0x20>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f383 8810 	msr	PRIMASK, r3
}
 8000c42:	bf00      	nop
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	20000130 	.word	0x20000130

08000c54 <commandCreate>:
};

static uint8_t parseInt(const char *str, uint32_t *result);
static uint8_t parseOnOffStatus(const char *str, OnOffStatus *result);

Command * commandCreate(const char * const name, const CommandAction action, const CommandArgument argType) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	71fb      	strb	r3, [r7, #7]
    size_t nameLen = strlen(name);
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f7ff face 	bl	8000204 <strlen>
 8000c68:	61f8      	str	r0, [r7, #28]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 fc48 	bl	8005504 <malloc>
 8000c74:	4603      	mov	r3, r0
 8000c76:	61bb      	str	r3, [r7, #24]
    strcpy(nameCopy, name);
 8000c78:	68f9      	ldr	r1, [r7, #12]
 8000c7a:	69b8      	ldr	r0, [r7, #24]
 8000c7c:	f004 fd62 	bl	8005744 <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 8000c80:	200c      	movs	r0, #12
 8000c82:	f004 fc3f 	bl	8005504 <malloc>
 8000c86:	4603      	mov	r3, r0
 8000c88:	617b      	str	r3, [r7, #20]
    command->name = nameCopy;
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	601a      	str	r2, [r3, #0]
    command->action = action;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	605a      	str	r2, [r3, #4]
    command->argType = argType;
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	721a      	strb	r2, [r3, #8]
    return command;
 8000c9c:	697b      	ldr	r3, [r7, #20]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <commandExecute>:

const char * commandExecute(const Command * const command, const char * const argument) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
    if (command == NULL || command->action == NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <commandExecute+0x18>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <commandExecute+0x1c>
        return NULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e037      	b.n	8000d34 <commandExecute+0x8c>
    switch (command->argType) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7a1b      	ldrb	r3, [r3, #8]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d02c      	beq.n	8000d26 <commandExecute+0x7e>
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	dc30      	bgt.n	8000d32 <commandExecute+0x8a>
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <commandExecute+0x32>
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d013      	beq.n	8000d00 <commandExecute+0x58>
 8000cd8:	e02b      	b.n	8000d32 <commandExecute+0x8a>
        case INT:
        {
            uint32_t intArg;
            if (!parseInt(argument, &intArg))
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	6838      	ldr	r0, [r7, #0]
 8000ce2:	f000 f831 	bl	8000d48 <parseInt>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <commandExecute+0x48>
                return "The argument must be integer\n";
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <commandExecute+0x94>)
 8000cee:	e021      	b.n	8000d34 <commandExecute+0x8c>
            return (*command->action)(&intArg);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f107 020c 	add.w	r2, r7, #12
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4798      	blx	r3
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	e019      	b.n	8000d34 <commandExecute+0x8c>
        }
        case ON_OFF:
        {
            OnOffStatus statusArg;
            if (!parseOnOffStatus(argument, &statusArg))
 8000d00:	f107 030b 	add.w	r3, r7, #11
 8000d04:	4619      	mov	r1, r3
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f000 f83a 	bl	8000d80 <parseOnOffStatus>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <commandExecute+0x6e>
                return "The argument must be 'on' or 'off'\n";
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <commandExecute+0x98>)
 8000d14:	e00e      	b.n	8000d34 <commandExecute+0x8c>
            return (*command->action)(&statusArg);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f107 020b 	add.w	r2, r7, #11
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4798      	blx	r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	e006      	b.n	8000d34 <commandExecute+0x8c>
        }
        case NONE:
            return (*command->action)(NULL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	4798      	blx	r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	e000      	b.n	8000d34 <commandExecute+0x8c>
        default:
            return "Unknown argument type\n";
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <commandExecute+0x9c>)
    }
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	08005fb4 	.word	0x08005fb4
 8000d40:	08005fd4 	.word	0x08005fd4
 8000d44:	08005ff8 	.word	0x08005ff8

08000d48 <parseInt>:

static uint8_t parseInt(const char * const str, uint32_t * const result) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
    char *endPtr = NULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
    *result = strtoul(str, &(endPtr), 10);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	220a      	movs	r2, #10
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f004 fd6a 	bl	8005838 <strtoul>
 8000d64:	4602      	mov	r2, r0
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	601a      	str	r2, [r3, #0]
    if (endPtr == str) {
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d101      	bne.n	8000d76 <parseInt+0x2e>
        return 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <parseInt+0x30>
    }
    return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <parseOnOffStatus>:

static uint8_t parseOnOffStatus(const char *str, OnOffStatus * const result) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
    if (strcmp(str, "on") == 0) {
 8000d8a:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <parseOnOffStatus+0x44>)
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fa2f 	bl	80001f0 <strcmp>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d104      	bne.n	8000da2 <parseOnOffStatus+0x22>
        *result = ON;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
        return 1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00c      	b.n	8000dbc <parseOnOffStatus+0x3c>
    } else if (strcmp(str, "off") == 0) {
 8000da2:	4909      	ldr	r1, [pc, #36]	; (8000dc8 <parseOnOffStatus+0x48>)
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fa23 	bl	80001f0 <strcmp>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d104      	bne.n	8000dba <parseOnOffStatus+0x3a>
        *result = OFF;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
        return 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <parseOnOffStatus+0x3c>
    }
    return 0;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	08006010 	.word	0x08006010
 8000dc8:	08006014 	.word	0x08006014

08000dcc <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <commandGetName+0x12>
        return NULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e001      	b.n	8000de2 <commandGetName+0x16>
    return command->name;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <FlashWriteWord>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
	HAL_FLASH_Lock();
}

void FlashWriteWord(uint32_t Address, uint32_t Data) {
 8000dee:	b5b0      	push	{r4, r5, r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8000df8:	f001 fd6c 	bl	80028d4 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	461c      	mov	r4, r3
 8000e02:	4615      	mov	r5, r2
 8000e04:	4622      	mov	r2, r4
 8000e06:	462b      	mov	r3, r5
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f001 fd0e 	bl	800282c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000e10:	f001 fd82 	bl	8002918 <HAL_FLASH_Lock>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}

08000e1c <FlashReadWord>:

uint8_t FlashReadByte(uint32_t Address) {
    return (*(__IO uint8_t*)Address);
}

uint32_t FlashReadWord(uint32_t Address) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    return (*(__IO uint32_t*)Address);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <EraseSector>:

void EraseSector(uint32_t Sector) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000e3c:	f001 fd4a 	bl	80028d4 <HAL_FLASH_Unlock>
	uint32_t SectorError;
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <EraseSector+0x3c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Sector = Sector;
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <EraseSector+0x3c>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = 1 ;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <EraseSector+0x3c>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	60da      	str	r2, [r3, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <EraseSector+0x3c>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <EraseSector+0x3c>)
 8000e60:	f001 feaa 	bl	8002bb8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000e64:	f001 fd58 	bl	8002918 <HAL_FLASH_Lock>
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000134 	.word	0x20000134

08000e74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_GPIO_Init+0x68>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <MX_GPIO_Init+0x68>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_GPIO_Init+0x68>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_GPIO_Init+0x68>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <MX_GPIO_Init+0x68>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_GPIO_Init+0x68>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_GPIO_Init+0x68>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <MX_GPIO_Init+0x68>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_GPIO_Init+0x68>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800

08000ee0 <asciiToHex>:
uint16_t address_data;//младшие 16 бит адреса
uint32_t program_data;//слово которое пишется во флеш
uint8_t calculation_check_sum = 0;//чек-сумма
uint8_t tempBuf[8];

void asciiToHex(uint8_t* buff, uint8_t count) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i=0; i<count;i++) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e023      	b.n	8000f3a <asciiToHex+0x5a>
		if(buff[i] <= '9' && buff[i] >= '0' ) {
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b39      	cmp	r3, #57	; 0x39
 8000efc:	d810      	bhi.n	8000f20 <asciiToHex+0x40>
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b2f      	cmp	r3, #47	; 0x2f
 8000f08:	d90a      	bls.n	8000f20 <asciiToHex+0x40>
			buff[i] -= 0x30;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	440b      	add	r3, r1
 8000f18:	3a30      	subs	r2, #48	; 0x30
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e009      	b.n	8000f34 <asciiToHex+0x54>
		}
		else {
			buff[i] = buff[i] - 0x41 + 10;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	440b      	add	r3, r1
 8000f2e:	3a37      	subs	r2, #55	; 0x37
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
	for(i=0; i<count;i++) {
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3301      	adds	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3d7      	bcc.n	8000ef2 <asciiToHex+0x12>
		}
	}
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <fillBuffer>:

void fillBuffer(uint8_t* destination, uint8_t* source, uint16_t* startPtr, uint16_t count) {
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	807b      	strh	r3, [r7, #2]
	for (int16_t i = 0; i < count; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	82fb      	strh	r3, [r7, #22]
 8000f62:	e014      	b.n	8000f8e <fillBuffer+0x3e>
		destination[i] = source[*startPtr + i];
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f6e:	4413      	add	r3, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	441a      	add	r2, r3
 8000f76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f7a:	68f9      	ldr	r1, [r7, #12]
 8000f7c:	440b      	add	r3, r1
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	701a      	strb	r2, [r3, #0]
	for (int16_t i = 0; i < count; i++) {
 8000f82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	82fb      	strh	r3, [r7, #22]
 8000f8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbe5      	blt.n	8000f64 <fillBuffer+0x14>
	}
	*startPtr += count;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	881a      	ldrh	r2, [r3, #0]
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	801a      	strh	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <flashHex>:

uint8_t flashHex(uint8_t* flashBuf, uint16_t size) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
	uint16_t ptr = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	81bb      	strh	r3, [r7, #12]
	while (ptr < size) {
 8000fc4:	e17b      	b.n	80012be <flashHex+0x30a>
		if(flashBuf[ptr] == ':') {
 8000fc6:	89bb      	ldrh	r3, [r7, #12]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b3a      	cmp	r3, #58	; 0x3a
 8000fd2:	f040 8170 	bne.w	80012b6 <flashHex+0x302>
			ptr++;
 8000fd6:	89bb      	ldrh	r3, [r7, #12]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	81bb      	strh	r3, [r7, #12]
			fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	488b      	ldr	r0, [pc, #556]	; (8001214 <flashHex+0x260>)
 8000fe8:	f7ff ffb2 	bl	8000f50 <fillBuffer>
			asciiToHex(tempBuf, 8);
 8000fec:	2108      	movs	r1, #8
 8000fee:	4889      	ldr	r0, [pc, #548]	; (8001214 <flashHex+0x260>)
 8000ff0:	f7ff ff76 	bl	8000ee0 <asciiToHex>

			size_data = 2*(tempBuf[1] + 16*tempBuf[0]);//находим размер данных
 8000ff4:	4b87      	ldr	r3, [pc, #540]	; (8001214 <flashHex+0x260>)
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b86      	ldr	r3, [pc, #536]	; (8001214 <flashHex+0x260>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	4413      	add	r3, r2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b83      	ldr	r3, [pc, #524]	; (8001218 <flashHex+0x264>)
 800100a:	701a      	strb	r2, [r3, #0]
			address_data = tempBuf[5] + 16*tempBuf[4] + 256*tempBuf[3] + 4096*tempBuf[2];//адрес
 800100c:	4b81      	ldr	r3, [pc, #516]	; (8001214 <flashHex+0x260>)
 800100e:	795b      	ldrb	r3, [r3, #5]
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b80      	ldr	r3, [pc, #512]	; (8001214 <flashHex+0x260>)
 8001014:	78db      	ldrb	r3, [r3, #3]
 8001016:	b299      	uxth	r1, r3
 8001018:	4b7e      	ldr	r3, [pc, #504]	; (8001214 <flashHex+0x260>)
 800101a:	789b      	ldrb	r3, [r3, #2]
 800101c:	b29b      	uxth	r3, r3
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	b29b      	uxth	r3, r3
 8001022:	440b      	add	r3, r1
 8001024:	b29b      	uxth	r3, r3
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	b299      	uxth	r1, r3
 800102a:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <flashHex+0x260>)
 800102c:	791b      	ldrb	r3, [r3, #4]
 800102e:	b29b      	uxth	r3, r3
 8001030:	440b      	add	r3, r1
 8001032:	b29b      	uxth	r3, r3
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	b29b      	uxth	r3, r3
 8001038:	4413      	add	r3, r2
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b77      	ldr	r3, [pc, #476]	; (800121c <flashHex+0x268>)
 800103e:	801a      	strh	r2, [r3, #0]
			type_data = tempBuf[7] + 16*tempBuf[6];//и тип
 8001040:	4b74      	ldr	r3, [pc, #464]	; (8001214 <flashHex+0x260>)
 8001042:	79da      	ldrb	r2, [r3, #7]
 8001044:	4b73      	ldr	r3, [pc, #460]	; (8001214 <flashHex+0x260>)
 8001046:	799b      	ldrb	r3, [r3, #6]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4413      	add	r3, r2
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b73      	ldr	r3, [pc, #460]	; (8001220 <flashHex+0x26c>)
 8001052:	701a      	strb	r2, [r3, #0]

			calculation_check_sum = size_data/2 + (uint8_t)address_data + (uint8_t)(address_data>>8) + type_data;//считаем чек сумму
 8001054:	4b70      	ldr	r3, [pc, #448]	; (8001218 <flashHex+0x264>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b6f      	ldr	r3, [pc, #444]	; (800121c <flashHex+0x268>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4413      	add	r3, r2
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b6d      	ldr	r3, [pc, #436]	; (800121c <flashHex+0x268>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	b29b      	uxth	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b6a      	ldr	r3, [pc, #424]	; (8001220 <flashHex+0x26c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4413      	add	r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b69      	ldr	r3, [pc, #420]	; (8001224 <flashHex+0x270>)
 800107e:	701a      	strb	r2, [r3, #0]

			if(type_data == 0x00) {
 8001080:	4b67      	ldr	r3, [pc, #412]	; (8001220 <flashHex+0x26c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	f040 8098 	bne.w	80011ba <flashHex+0x206>
				while(size_data > 0) {
 800108a:	e06b      	b.n	8001164 <flashHex+0x1b0>
					fillBuffer(tempBuf, flashBuf, &ptr, 8);
 800108c:	f107 020c 	add.w	r2, r7, #12
 8001090:	2308      	movs	r3, #8
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	485f      	ldr	r0, [pc, #380]	; (8001214 <flashHex+0x260>)
 8001096:	f7ff ff5b 	bl	8000f50 <fillBuffer>
					asciiToHex(tempBuf, 8);
 800109a:	2108      	movs	r1, #8
 800109c:	485d      	ldr	r0, [pc, #372]	; (8001214 <flashHex+0x260>)
 800109e:	f7ff ff1f 	bl	8000ee0 <asciiToHex>


					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e024      	b.n	80010f2 <flashHex+0x13e>
						tempBuf[i] <<= 4;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4a5a      	ldr	r2, [pc, #360]	; (8001214 <flashHex+0x260>)
 80010ac:	5cd2      	ldrb	r2, [r2, r3]
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d1      	uxtb	r1, r2
 80010b4:	4a57      	ldr	r2, [pc, #348]	; (8001214 <flashHex+0x260>)
 80010b6:	54d1      	strb	r1, [r2, r3]
						tempBuf[i] = tempBuf[i] | tempBuf[i+1];
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4a56      	ldr	r2, [pc, #344]	; (8001214 <flashHex+0x260>)
 80010bc:	5cd1      	ldrb	r1, [r2, r3]
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a54      	ldr	r2, [pc, #336]	; (8001214 <flashHex+0x260>)
 80010c4:	5cd2      	ldrb	r2, [r2, r3]
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	b2d1      	uxtb	r1, r2
 80010cc:	4a51      	ldr	r2, [pc, #324]	; (8001214 <flashHex+0x260>)
 80010ce:	54d1      	strb	r1, [r2, r3]
						program_data |= tempBuf[i] <<(i*4);
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	4a50      	ldr	r2, [pc, #320]	; (8001214 <flashHex+0x260>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	461a      	mov	r2, r3
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <flashHex+0x274>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <flashHex+0x274>)
 80010ea:	6013      	str	r3, [r2, #0]
					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	3302      	adds	r3, #2
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	d9d7      	bls.n	80010a8 <flashHex+0xf4>
					}

					FlashWriteWord(extented_linear_adress + address_data, program_data);
 80010f8:	4b48      	ldr	r3, [pc, #288]	; (800121c <flashHex+0x268>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b4b      	ldr	r3, [pc, #300]	; (800122c <flashHex+0x278>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a48      	ldr	r2, [pc, #288]	; (8001228 <flashHex+0x274>)
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe6f 	bl	8000dee <FlashWriteWord>
					calculation_check_sum += (uint8_t)program_data + (uint8_t)(program_data>>8) + (uint8_t)(program_data>>16) + (uint8_t)(program_data>>24);
 8001110:	4b45      	ldr	r3, [pc, #276]	; (8001228 <flashHex+0x274>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b44      	ldr	r3, [pc, #272]	; (8001228 <flashHex+0x274>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <flashHex+0x274>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	0c1b      	lsrs	r3, r3, #16
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4413      	add	r3, r2
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <flashHex+0x274>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	0e1b      	lsrs	r3, r3, #24
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <flashHex+0x270>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <flashHex+0x270>)
 8001144:	701a      	strb	r2, [r3, #0]
					size_data -= 8;
 8001146:	4b34      	ldr	r3, [pc, #208]	; (8001218 <flashHex+0x264>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	3b08      	subs	r3, #8
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <flashHex+0x264>)
 8001150:	701a      	strb	r2, [r3, #0]
					address_data += 4;
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <flashHex+0x268>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	3304      	adds	r3, #4
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b30      	ldr	r3, [pc, #192]	; (800121c <flashHex+0x268>)
 800115c:	801a      	strh	r2, [r3, #0]
					program_data = 0;
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <flashHex+0x274>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
				while(size_data > 0) {
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <flashHex+0x264>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d18f      	bne.n	800108c <flashHex+0xd8>
				}
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <flashHex+0x270>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	425b      	negs	r3, r3
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <flashHex+0x270>)
 8001176:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 8001178:	f107 020c 	add.w	r2, r7, #12
 800117c:	2302      	movs	r3, #2
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4824      	ldr	r0, [pc, #144]	; (8001214 <flashHex+0x260>)
 8001182:	f7ff fee5 	bl	8000f50 <fillBuffer>
				asciiToHex(tempBuf, 2);
 8001186:	2102      	movs	r1, #2
 8001188:	4822      	ldr	r0, [pc, #136]	; (8001214 <flashHex+0x260>)
 800118a:	f7ff fea9 	bl	8000ee0 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <flashHex+0x260>)
 8001190:	785a      	ldrb	r2, [r3, #1]
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <flashHex+0x260>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4413      	add	r3, r2
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <flashHex+0x27c>)
 80011a0:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <flashHex+0x270>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <flashHex+0x27c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d001      	beq.n	80011b2 <flashHex+0x1fe>
					return 0;//uartTransmit("\n\rchecksum error 1\n\r", 20);
 80011ae:	2300      	movs	r3, #0
 80011b0:	e08d      	b.n	80012ce <flashHex+0x31a>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <flashHex+0x270>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	e07d      	b.n	80012b6 <flashHex+0x302>

			} else if(type_data == 0x04) {//дополнительный адрес
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <flashHex+0x26c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d175      	bne.n	80012ae <flashHex+0x2fa>
				fillBuffer(tempBuf, flashBuf, &ptr, 4);
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	2304      	movs	r3, #4
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4812      	ldr	r0, [pc, #72]	; (8001214 <flashHex+0x260>)
 80011cc:	f7ff fec0 	bl	8000f50 <fillBuffer>
				asciiToHex(tempBuf, 4);
 80011d0:	2104      	movs	r1, #4
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <flashHex+0x260>)
 80011d4:	f7ff fe84 	bl	8000ee0 <asciiToHex>

				extented_linear_adress = (uint32_t)(tempBuf[0]<<28 | tempBuf[1]<<24 | tempBuf[2]<<20 | tempBuf[3]<<16 );//считаем адрес
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <flashHex+0x260>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	071a      	lsls	r2, r3, #28
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <flashHex+0x260>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	061b      	lsls	r3, r3, #24
 80011e4:	431a      	orrs	r2, r3
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <flashHex+0x260>)
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	051b      	lsls	r3, r3, #20
 80011ec:	431a      	orrs	r2, r3
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <flashHex+0x260>)
 80011f0:	78db      	ldrb	r3, [r3, #3]
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	4313      	orrs	r3, r2
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <flashHex+0x278>)
 80011fa:	601a      	str	r2, [r3, #0]
				if ((getLatestApplicationAddress() & 0xFFFF0000) != extented_linear_adress) return 2;//TODO
 80011fc:	f7ff fa4a 	bl	8000694 <getLatestApplicationAddress>
 8001200:	4603      	mov	r3, r0
 8001202:	0c1b      	lsrs	r3, r3, #16
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <flashHex+0x278>)
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	4293      	cmp	r3, r2
 800120c:	d012      	beq.n	8001234 <flashHex+0x280>
 800120e:	2302      	movs	r3, #2
 8001210:	e05d      	b.n	80012ce <flashHex+0x31a>
 8001212:	bf00      	nop
 8001214:	2000015c 	.word	0x2000015c
 8001218:	2000014c 	.word	0x2000014c
 800121c:	20000150 	.word	0x20000150
 8001220:	2000014d 	.word	0x2000014d
 8001224:	20000158 	.word	0x20000158
 8001228:	20000154 	.word	0x20000154
 800122c:	20000148 	.word	0x20000148
 8001230:	2000014e 	.word	0x2000014e

				calculation_check_sum +=  16*tempBuf[0] + tempBuf[1]+ 16*tempBuf[2] + tempBuf[3];
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <flashHex+0x324>)
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <flashHex+0x324>)
 800123a:	789b      	ldrb	r3, [r3, #2]
 800123c:	4413      	add	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <flashHex+0x324>)
 8001246:	785b      	ldrb	r3, [r3, #1]
 8001248:	4413      	add	r3, r2
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <flashHex+0x324>)
 800124e:	78db      	ldrb	r3, [r3, #3]
 8001250:	4413      	add	r3, r2
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <flashHex+0x328>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4413      	add	r3, r2
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <flashHex+0x328>)
 800125e:	701a      	strb	r2, [r3, #0]
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <flashHex+0x328>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	425b      	negs	r3, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <flashHex+0x328>)
 800126a:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 800126c:	f107 020c 	add.w	r2, r7, #12
 8001270:	2302      	movs	r3, #2
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4818      	ldr	r0, [pc, #96]	; (80012d8 <flashHex+0x324>)
 8001276:	f7ff fe6b 	bl	8000f50 <fillBuffer>
				asciiToHex(tempBuf, 2);
 800127a:	2102      	movs	r1, #2
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <flashHex+0x324>)
 800127e:	f7ff fe2f 	bl	8000ee0 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <flashHex+0x324>)
 8001284:	785a      	ldrb	r2, [r3, #1]
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <flashHex+0x324>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <flashHex+0x32c>)
 8001294:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <flashHex+0x328>)
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <flashHex+0x32c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d001      	beq.n	80012a6 <flashHex+0x2f2>
					return 0;//uartTransmit("\n\rchecksum error 2\n\r", 20);
 80012a2:	2300      	movs	r3, #0
 80012a4:	e013      	b.n	80012ce <flashHex+0x31a>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <flashHex+0x328>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e003      	b.n	80012b6 <flashHex+0x302>
			} else if(type_data == 0x01) {//конец файла
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <flashHex+0x330>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d009      	beq.n	80012ca <flashHex+0x316>
				break;
			}
		}
		ptr++;
 80012b6:	89bb      	ldrh	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	81bb      	strh	r3, [r7, #12]
	while (ptr < size) {
 80012be:	89bb      	ldrh	r3, [r7, #12]
 80012c0:	887a      	ldrh	r2, [r7, #2]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	f63f ae7f 	bhi.w	8000fc6 <flashHex+0x12>
 80012c8:	e000      	b.n	80012cc <flashHex+0x318>
				break;
 80012ca:	bf00      	nop
	}
	return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000015c 	.word	0x2000015c
 80012dc:	20000158 	.word	0x20000158
 80012e0:	2000014e 	.word	0x2000014e
 80012e4:	2000014d 	.word	0x2000014d

080012e8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_IWDG_Init+0x2c>)
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <MX_IWDG_Init+0x30>)
 80012f0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_IWDG_Init+0x2c>)
 80012f4:	2206      	movs	r2, #6
 80012f6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 640;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_IWDG_Init+0x2c>)
 80012fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80012fe:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_IWDG_Init+0x2c>)
 8001302:	f001 ff45 	bl	8003190 <HAL_IWDG_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800130c:	f000 f98f 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000164 	.word	0x20000164
 8001318:	40003000 	.word	0x40003000

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  commands[0] = commandCreate("jump", (CommandAction) jumpToUserApp, NONE);
 8001322:	2202      	movs	r2, #2
 8001324:	4928      	ldr	r1, [pc, #160]	; (80013c8 <main+0xac>)
 8001326:	4829      	ldr	r0, [pc, #164]	; (80013cc <main+0xb0>)
 8001328:	f7ff fc94 	bl	8000c54 <commandCreate>
 800132c:	4603      	mov	r3, r0
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <main+0xb4>)
 8001330:	6013      	str	r3, [r2, #0]
  commands[1] = commandCreate("update", (CommandAction) downloadFirmware, NONE);
 8001332:	2202      	movs	r2, #2
 8001334:	4927      	ldr	r1, [pc, #156]	; (80013d4 <main+0xb8>)
 8001336:	4828      	ldr	r0, [pc, #160]	; (80013d8 <main+0xbc>)
 8001338:	f7ff fc8c 	bl	8000c54 <commandCreate>
 800133c:	4603      	mov	r3, r0
 800133e:	4a24      	ldr	r2, [pc, #144]	; (80013d0 <main+0xb4>)
 8001340:	6053      	str	r3, [r2, #4]
  commands[2] = commandCreate("version", (CommandAction) getAppVersions, NONE);//TODO
 8001342:	2202      	movs	r2, #2
 8001344:	4925      	ldr	r1, [pc, #148]	; (80013dc <main+0xc0>)
 8001346:	4826      	ldr	r0, [pc, #152]	; (80013e0 <main+0xc4>)
 8001348:	f7ff fc84 	bl	8000c54 <commandCreate>
 800134c:	4603      	mov	r3, r0
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <main+0xb4>)
 8001350:	6093      	str	r3, [r2, #8]
  commands[3] = commandCreate("help", (CommandAction) getHelpInfo, NONE);
 8001352:	2202      	movs	r2, #2
 8001354:	4923      	ldr	r1, [pc, #140]	; (80013e4 <main+0xc8>)
 8001356:	4824      	ldr	r0, [pc, #144]	; (80013e8 <main+0xcc>)
 8001358:	f7ff fc7c 	bl	8000c54 <commandCreate>
 800135c:	4603      	mov	r3, r0
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <main+0xb4>)
 8001360:	60d3      	str	r3, [r2, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001362:	f000 ffb7 	bl	80022d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  uartInit();
 8001366:	f000 fc97 	bl	8001c98 <uartInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136a:	f000 f849 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136e:	f7ff fd81 	bl	8000e74 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001372:	f000 fbc3 	bl	8001afc <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8001376:	f000 faf7 	bl	8001968 <MX_TIM6_Init>
  MX_IWDG_Init();
 800137a:	f7ff ffb5 	bl	80012e8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  uartEnableInterruption();
 800137e:	f000 fcc1 	bl	8001d04 <uartEnableInterruption>
  menuInit(commands, 4);
 8001382:	2104      	movs	r1, #4
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <main+0xb4>)
 8001386:	f000 f957 	bl	8001638 <menuInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_IWDG_Refresh(&hiwdg);
 800138a:	4818      	ldr	r0, [pc, #96]	; (80013ec <main+0xd0>)
 800138c:	f001 ff42 	bl	8003214 <HAL_IWDG_Refresh>

	  if (uartHasNext()) {
 8001390:	f000 fc76 	bl	8001c80 <uartHasNext>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <main+0x82>
		  receiveAndSendChar();
 800139a:	f000 f8eb 	bl	8001574 <receiveAndSendChar>
	  }

	  if (hasLine) {
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <main+0xd4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f1      	beq.n	800138a <main+0x6e>
		  uartBuf[uartBufLast] = '\0';
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <main+0xd8>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <main+0xdc>)
 80013ae:	2100      	movs	r1, #0
 80013b0:	5499      	strb	r1, [r3, r2]
		  const char* commandResult = menuExecuteCommand((char*) uartBuf);
 80013b2:	4811      	ldr	r0, [pc, #68]	; (80013f8 <main+0xdc>)
 80013b4:	f000 f974 	bl	80016a0 <menuExecuteCommand>
 80013b8:	6078      	str	r0, [r7, #4]
		  sendMessage("\n");
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <main+0xe0>)
 80013bc:	f000 f926 	bl	800160c <sendMessage>
		  sendCommandResult(commandResult);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f907 	bl	80015d4 <sendCommandResult>
	  HAL_IWDG_Refresh(&hiwdg);
 80013c6:	e7e0      	b.n	800138a <main+0x6e>
 80013c8:	080014d9 	.word	0x080014d9
 80013cc:	08006018 	.word	0x08006018
 80013d0:	200001f4 	.word	0x200001f4
 80013d4:	08001515 	.word	0x08001515
 80013d8:	08006020 	.word	0x08006020
 80013dc:	08001561 	.word	0x08001561
 80013e0:	08006028 	.word	0x08006028
 80013e4:	08001501 	.word	0x08001501
 80013e8:	08006030 	.word	0x08006030
 80013ec:	20000164 	.word	0x20000164
 80013f0:	200001f1 	.word	0x200001f1
 80013f4:	200001f0 	.word	0x200001f0
 80013f8:	20000170 	.word	0x20000170
 80013fc:	08006038 	.word	0x08006038

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	; 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	2230      	movs	r2, #48	; 0x30
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f004 f880 	bl	8005514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <SystemClock_Config+0xd0>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <SystemClock_Config+0xd0>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <SystemClock_Config+0xd0>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <SystemClock_Config+0xd4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <SystemClock_Config+0xd4>)
 800144e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <SystemClock_Config+0xd4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001460:	230a      	movs	r3, #10
 8001462:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001468:	2310      	movs	r3, #16
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001470:	2302      	movs	r3, #2
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001474:	2300      	movs	r3, #0
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001478:	2308      	movs	r3, #8
 800147a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800147c:	2340      	movs	r3, #64	; 0x40
 800147e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001480:	2302      	movs	r3, #2
 8001482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001484:	2304      	movs	r3, #4
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4618      	mov	r0, r3
 800148e:	f001 fed1 	bl	8003234 <HAL_RCC_OscConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001498:	f000 f8c9 	bl	800162e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149c:	230f      	movs	r3, #15
 800149e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a0:	2302      	movs	r3, #2
 80014a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80014a4:	2390      	movs	r3, #144	; 0x90
 80014a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 f934 	bl	8003724 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014c2:	f000 f8b4 	bl	800162e <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3750      	adds	r7, #80	; 0x50
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000

080014d8 <jumpToUserApp>:

/* USER CODE BEGIN 4 */
static char* jumpToUserApp() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	validateApplications();
 80014dc:	f7ff f97a 	bl	80007d4 <validateApplications>
	if (getLatestApplicationAddress() == 0) {
 80014e0:	f7ff f8d8 	bl	8000694 <getLatestApplicationAddress>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <jumpToUserApp+0x16>
		return "No valid application in flash\n";
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <jumpToUserApp+0x20>)
 80014ec:	e002      	b.n	80014f4 <jumpToUserApp+0x1c>
	} else {
		jumpToApp();
 80014ee:	f7ff f9a7 	bl	8000840 <jumpToApp>
		return "Done";
 80014f2:	4b02      	ldr	r3, [pc, #8]	; (80014fc <jumpToUserApp+0x24>)
	}
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	0800603c 	.word	0x0800603c
 80014fc:	0800605c 	.word	0x0800605c

08001500 <getHelpInfo>:

static char* getHelpInfo() {
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
    return "jump: jump to application\n 				\
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <getHelpInfo+0x10>)
    update: download firmware and jump to it\n			\
    version: get current version of application\n		\
    help: get information about commands\n";
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	08006064 	.word	0x08006064

08001514 <downloadFirmware>:

static char* downloadFirmware() {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	validateApplications();
 800151a:	f7ff f95b 	bl	80007d4 <validateApplications>
	updateConfig();
 800151e:	f7ff f8e7 	bl	80006f0 <updateConfig>
	eraseLogicalBank();
 8001522:	f7ff fa49 	bl	80009b8 <eraseLogicalBank>
	uint8_t xmodemStatus = xmodemReceive();
 8001526:	f000 fc85 	bl	8001e34 <xmodemReceive>
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	if (xmodemStatus == 1) {
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d103      	bne.n	800153c <downloadFirmware+0x28>
		return jumpToUserApp();
 8001534:	f7ff ffd0 	bl	80014d8 <jumpToUserApp>
 8001538:	4603      	mov	r3, r0
 800153a:	e009      	b.n	8001550 <downloadFirmware+0x3c>
	} else if (xmodemStatus == 2) {
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d103      	bne.n	800154a <downloadFirmware+0x36>
		rollbackConfig();
 8001542:	f7ff f929 	bl	8000798 <rollbackConfig>
		return "Error. Choose firmware for another bank.\n";
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <downloadFirmware+0x44>)
 8001548:	e002      	b.n	8001550 <downloadFirmware+0x3c>
	} else {
		rollbackConfig();
 800154a:	f7ff f925 	bl	8000798 <rollbackConfig>
		return "Error. Update aborted.\n";
 800154e:	4b03      	ldr	r3, [pc, #12]	; (800155c <downloadFirmware+0x48>)
	};
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	08006110 	.word	0x08006110
 800155c:	0800613c 	.word	0x0800613c

08001560 <getAppVersions>:

static char* getAppVersions() {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	validateApplications();
 8001564:	f7ff f936 	bl	80007d4 <validateApplications>
	return getVersions();
 8001568:	f7ff f82c 	bl	80005c4 <getVersions>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <receiveAndSendChar>:

static void receiveAndSendChar() {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
    if (uartReceive(uartBuf + uartBufLast, 1)) {
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <receiveAndSendChar+0x54>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <receiveAndSendChar+0x58>)
 8001582:	4413      	add	r3, r2
 8001584:	2101      	movs	r1, #1
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fb9c 	bl	8001cc4 <uartReceive>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d016      	beq.n	80015c0 <receiveAndSendChar+0x4c>
        uint8_t received = uartBuf[uartBufLast];
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <receiveAndSendChar+0x54>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <receiveAndSendChar+0x58>)
 800159a:	5c9b      	ldrb	r3, [r3, r2]
 800159c:	71fb      	strb	r3, [r7, #7]
        uartBufLast++;
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <receiveAndSendChar+0x54>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <receiveAndSendChar+0x54>)
 80015a8:	701a      	strb	r2, [r3, #0]
        uartTransmit(&received, 1);
 80015aa:	1dfb      	adds	r3, r7, #7
 80015ac:	2101      	movs	r1, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fb1e 	bl	8001bf0 <uartTransmit>

        if (received == '\r')
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b0d      	cmp	r3, #13
 80015b8:	d102      	bne.n	80015c0 <receiveAndSendChar+0x4c>
            hasLine = 1;
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <receiveAndSendChar+0x5c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
    }
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200001f0 	.word	0x200001f0
 80015cc:	20000170 	.word	0x20000170
 80015d0:	200001f1 	.word	0x200001f1

080015d4 <sendCommandResult>:

static void sendCommandResult(const char* commandResult) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7fe fe11 	bl	8000204 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fb01 	bl	8001bf0 <uartTransmit>
    uartBufLast = 0;
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <sendCommandResult+0x30>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
    hasLine = 0;
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <sendCommandResult+0x34>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200001f0 	.word	0x200001f0
 8001608:	200001f1 	.word	0x200001f1

0800160c <sendMessage>:

static void sendMessage(const char* msg) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7fe fdf5 	bl	8000204 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	b29b      	uxth	r3, r3
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fae5 	bl	8001bf0 <uartTransmit>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001632:	b672      	cpsid	i
}
 8001634:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001636:	e7fe      	b.n	8001636 <Error_Handler+0x8>

08001638 <menuInit>:
uint16_t menuSize;

static int32_t commandSepNameFromArg(const char *commandNameWithArg);
static void strTrim(char *str);

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <menuInit+0x60>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d121      	bne.n	8001690 <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4618      	mov	r0, r3
 8001652:	f003 ff57 	bl	8005504 <malloc>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <menuInit+0x60>)
 800165c:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 800165e:	2300      	movs	r3, #0
 8001660:	81fb      	strh	r3, [r7, #14]
 8001662:	e00d      	b.n	8001680 <menuInit+0x48>
        menuCommands[i] = commands[i];
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	441a      	add	r2, r3
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <menuInit+0x60>)
 800166e:	6819      	ldr	r1, [r3, #0]
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 800167a:	89fb      	ldrh	r3, [r7, #14]
 800167c:	3301      	adds	r3, #1
 800167e:	81fb      	strh	r3, [r7, #14]
 8001680:	89fa      	ldrh	r2, [r7, #14]
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	429a      	cmp	r2, r3
 8001686:	d3ed      	bcc.n	8001664 <menuInit+0x2c>
    }
    menuSize = commandsSize;
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <menuInit+0x64>)
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	8013      	strh	r3, [r2, #0]
 800168e:	e000      	b.n	8001692 <menuInit+0x5a>
        return;
 8001690:	bf00      	nop
}
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000204 	.word	0x20000204
 800169c:	20000208 	.word	0x20000208

080016a0 <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandNameWithArg) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
    strTrim(commandNameWithArg);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f866 	bl	800177a <strTrim>
    const int32_t sep = commandSepNameFromArg(commandNameWithArg);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f88a 	bl	80017c8 <commandSepNameFromArg>
 80016b4:	6178      	str	r0, [r7, #20]
    const char *commandArg = NULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    if (sep != -1) {
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d009      	beq.n	80016d6 <menuExecuteCommand+0x36>
        commandNameWithArg[sep] = '\0';
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
        commandArg = commandNameWithArg + sep + 1;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	61fb      	str	r3, [r7, #28]
    }
    const char * const commandName = commandNameWithArg;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < menuSize; i++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	837b      	strh	r3, [r7, #26]
 80016de:	e020      	b.n	8001722 <menuExecuteCommand+0x82>
        const Command * const command = menuCommands[i];
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <menuExecuteCommand+0x98>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	8b7b      	ldrh	r3, [r7, #26]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <menuExecuteCommand+0x98>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	8b7b      	ldrh	r3, [r7, #26]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fb66 	bl	8000dcc <commandGetName>
 8001700:	4603      	mov	r3, r0
 8001702:	6939      	ldr	r1, [r7, #16]
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fd73 	bl	80001f0 <strcmp>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d105      	bne.n	800171c <menuExecuteCommand+0x7c>
            return commandExecute(command, commandArg);
 8001710:	69f9      	ldr	r1, [r7, #28]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7ff fac8 	bl	8000ca8 <commandExecute>
 8001718:	4603      	mov	r3, r0
 800171a:	e008      	b.n	800172e <menuExecuteCommand+0x8e>
    for (uint16_t i = 0; i < menuSize; i++) {
 800171c:	8b7b      	ldrh	r3, [r7, #26]
 800171e:	3301      	adds	r3, #1
 8001720:	837b      	strh	r3, [r7, #26]
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <menuExecuteCommand+0x9c>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	8b7a      	ldrh	r2, [r7, #26]
 8001728:	429a      	cmp	r2, r3
 800172a:	d3d9      	bcc.n	80016e0 <menuExecuteCommand+0x40>
        }
    }
    return "Command not found, print \"help\" for getting info\n";
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <menuExecuteCommand+0xa0>)
}
 800172e:	4618      	mov	r0, r3
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000204 	.word	0x20000204
 800173c:	20000208 	.word	0x20000208
 8001740:	08006154 	.word	0x08006154

08001744 <isSpaceChar>:

static uint8_t isSpaceChar(char ch) {
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
    return ch == '\n' || ch == ' ' || ch == '\t' || ch == '\r';
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b0a      	cmp	r3, #10
 8001752:	d008      	beq.n	8001766 <isSpaceChar+0x22>
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b20      	cmp	r3, #32
 8001758:	d005      	beq.n	8001766 <isSpaceChar+0x22>
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b09      	cmp	r3, #9
 800175e:	d002      	beq.n	8001766 <isSpaceChar+0x22>
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2b0d      	cmp	r3, #13
 8001764:	d101      	bne.n	800176a <isSpaceChar+0x26>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <isSpaceChar+0x28>
 800176a:	2300      	movs	r3, #0
 800176c:	b2db      	uxtb	r3, r3
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <strTrim>:

static void strTrim(char * const str) {
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(str);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe fd3e 	bl	8000204 <strlen>
 8001788:	4603      	mov	r3, r0
 800178a:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	3b01      	subs	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e011      	b.n	80017b8 <strTrim+0x3e>
        if (isSpaceChar(str[i])) {
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ffd1 	bl	8001744 <isSpaceChar>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00b      	beq.n	80017c0 <strTrim+0x46>
            str[i] = '\0';
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
    for (int32_t i = len - 1; i >= 0; i--) {
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	daea      	bge.n	8001794 <strTrim+0x1a>
 80017be:	e000      	b.n	80017c2 <strTrim+0x48>
        } else {
            return;
 80017c0:	bf00      	nop
        }
    }
}
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <commandSepNameFromArg>:

static int32_t commandSepNameFromArg(const char * const commandNameWithArg) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(commandNameWithArg);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7fe fd17 	bl	8000204 <strlen>
 80017d6:	4603      	mov	r3, r0
 80017d8:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3b01      	subs	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e00a      	b.n	80017f8 <commandSepNameFromArg+0x30>
        if (commandNameWithArg[i] == ' ') {
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	d101      	bne.n	80017f2 <commandSepNameFromArg+0x2a>
            return i;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	e007      	b.n	8001802 <commandSepNameFromArg+0x3a>
    for (int32_t i = len - 1; i >= 0; i--) {
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	daf1      	bge.n	80017e2 <commandSepNameFromArg+0x1a>
        }
    }
    return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_MspInit+0x4c>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_MspInit+0x4c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <NMI_Handler+0x4>

08001862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <HardFault_Handler+0x4>

08001868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <MemManage_Handler+0x4>

0800186e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <BusFault_Handler+0x4>

08001874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <UsageFault_Handler+0x4>

0800187a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a8:	f000 fd9a 	bl	80023e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM6_DAC_IRQHandler+0x10>)
 80018b6:	f002 fafc 	bl	8003eb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000210 	.word	0x20000210

080018c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <USART6_IRQHandler+0x10>)
 80018ca:	f002 ff01 	bl	80046d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000268 	.word	0x20000268

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f003 fdd2 	bl	80054b0 <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20030000 	.word	0x20030000
 8001938:	00000400 	.word	0x00000400
 800193c:	2000020c 	.word	0x2000020c
 8001940:	20000468 	.word	0x20000468

08001944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196e:	463b      	mov	r3, r7
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_TIM6_Init+0x64>)
 8001978:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <MX_TIM6_Init+0x68>)
 800197a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_TIM6_Init+0x64>)
 800197e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001982:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_TIM6_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <MX_TIM6_Init+0x64>)
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_TIM6_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001998:	480c      	ldr	r0, [pc, #48]	; (80019cc <MX_TIM6_Init+0x64>)
 800199a:	f002 f99b 	bl	8003cd4 <HAL_TIM_Base_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019a4:	f7ff fe43 	bl	800162e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_TIM6_Init+0x64>)
 80019b6:	f002 fc4d 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019c0:	f7ff fe35 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000210 	.word	0x20000210
 80019d0:	40001000 	.word	0x40001000

080019d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_TIM_Base_MspInit+0x48>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d115      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_TIM_Base_MspInit+0x4c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <HAL_TIM_Base_MspInit+0x4c>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_TIM_Base_MspInit+0x4c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2036      	movs	r0, #54	; 0x36
 8001a08:	f000 fe2d 	bl	8002666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a0c:	2036      	movs	r0, #54	; 0x36
 8001a0e:	f000 fe46 	bl	800269e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40001000 	.word	0x40001000
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d102      	bne.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x18>
		uartTransmitChar(X_C);
 8001a36:	2043      	movs	r0, #67	; 0x43
 8001a38:	f000 f8fe 	bl	8001c38 <uartTransmitChar>
	}
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40001000 	.word	0x40001000

08001a48 <uartHardwareTransmitInterrupt>:

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
}

void uartHardwareTransmitInterrupt(uint8_t buffer) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
	usartHardwareTransmitBuffer = buffer;
 8001a52:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <uartHardwareTransmitInterrupt+0x28>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a58:	2047      	movs	r0, #71	; 0x47
 8001a5a:	f000 fe20 	bl	800269e <HAL_NVIC_EnableIRQ>
	HAL_UART_Transmit_IT(&huart6, &usartHardwareTransmitBuffer, 1);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4903      	ldr	r1, [pc, #12]	; (8001a70 <uartHardwareTransmitInterrupt+0x28>)
 8001a62:	4804      	ldr	r0, [pc, #16]	; (8001a74 <uartHardwareTransmitInterrupt+0x2c>)
 8001a64:	f002 fcd3 	bl	800440e <HAL_UART_Transmit_IT>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000258 	.word	0x20000258
 8001a74:	20000268 	.word	0x20000268

08001a78 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_UART_TxCpltCallback+0x1c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d101      	bne.n	8001a8c <HAL_UART_TxCpltCallback+0x14>
		uartTransmitIntCallback();
 8001a88:	f000 f9b6 	bl	8001df8 <uartTransmitIntCallback>
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000268 	.word	0x20000268

08001a98 <uartHardwareReceiveInterrupt>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
}

void uartHardwareReceiveInterrupt() {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a9c:	2047      	movs	r0, #71	; 0x47
 8001a9e:	f000 fdfe 	bl	800269e <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart6, &usartHardwareReceiveBuffer, 1);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4902      	ldr	r1, [pc, #8]	; (8001ab0 <uartHardwareReceiveInterrupt+0x18>)
 8001aa6:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <uartHardwareReceiveInterrupt+0x1c>)
 8001aa8:	f002 fcf6 	bl	8004498 <HAL_UART_Receive_IT>
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000259 	.word	0x20000259
 8001ab4:	20000268 	.word	0x20000268

08001ab8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_UART_RxCpltCallback+0x24>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d104      	bne.n	8001ad2 <HAL_UART_RxCpltCallback+0x1a>
    	uartReceiveIntCallback(usartHardwareReceiveBuffer);
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_UART_RxCpltCallback+0x28>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 f965 	bl	8001d9c <uartReceiveIntCallback>
    }
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000268 	.word	0x20000268
 8001ae0:	20000259 	.word	0x20000259

08001ae4 <uartHardwareDisableInterrupts>:

void uartHardwareDisableInterrupts() {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart6);
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <uartHardwareDisableInterrupts+0x14>)
 8001aea:	f002 fd05 	bl	80044f8 <HAL_UART_Abort>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8001aee:	2047      	movs	r0, #71	; 0x47
 8001af0:	f000 fde3 	bl	80026ba <HAL_NVIC_DisableIRQ>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000268 	.word	0x20000268

08001afc <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_USART6_UART_Init+0x50>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b34:	f002 fc1e 	bl	8004374 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b3e:	f7ff fd76 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000268 	.word	0x20000268
 8001b4c:	40011400 	.word	0x40011400

08001b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_UART_MspInit+0x94>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d133      	bne.n	8001bda <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <HAL_UART_MspInit+0x98>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_UART_MspInit+0x98>)
 8001b7c:	f043 0320 	orr.w	r3, r3, #32
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_UART_MspInit+0x98>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_UART_MspInit+0x98>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <HAL_UART_MspInit+0x98>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_UART_MspInit+0x98>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001baa:	23c0      	movs	r3, #192	; 0xc0
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bba:	2308      	movs	r3, #8
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4809      	ldr	r0, [pc, #36]	; (8001bec <HAL_UART_MspInit+0x9c>)
 8001bc6:	f001 f937 	bl	8002e38 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2047      	movs	r0, #71	; 0x47
 8001bd0:	f000 fd49 	bl	8002666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bd4:	2047      	movs	r0, #71	; 0x47
 8001bd6:	f000 fd62 	bl	800269e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40011400 	.word	0x40011400
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020800 	.word	0x40020800

08001bf0 <uartTransmit>:
  }
}

/* USER CODE BEGIN 1 */

uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <uartTransmit+0x16>
        return 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e010      	b.n	8001c28 <uartTransmit+0x38>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <uartTransmit+0x40>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe ff36 	bl	8000a80 <bufferPushValues>
 8001c14:	4603      	mov	r3, r0
 8001c16:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <uartTransmit+0x44>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <uartTransmit+0x36>
        hardwareTransmitIT();
 8001c22:	f000 f893 	bl	8001d4c <hardwareTransmitIT>
    }
    return transmitted;
 8001c26:	89fb      	ldrh	r3, [r7, #14]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	2000025c 	.word	0x2000025c
 8001c34:	20000264 	.word	0x20000264

08001c38 <uartTransmitChar>:

uint8_t uartTransmitChar(const uint8_t msg) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
    if (msg == NULL)
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <uartTransmitChar+0x14>
        return 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e010      	b.n	8001c6e <uartTransmitChar+0x36>
    const uint8_t transmitted = bufferPush(txBuffer, msg);
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <uartTransmitChar+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	79fa      	ldrb	r2, [r7, #7]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fee2 	bl	8000a1e <bufferPush>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]
    if (interruptionsEnabled) {
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <uartTransmitChar+0x44>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <uartTransmitChar+0x34>
        hardwareTransmitIT();
 8001c68:	f000 f870 	bl	8001d4c <hardwareTransmitIT>
    }
    return transmitted;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000025c 	.word	0x2000025c
 8001c7c:	20000264 	.word	0x20000264

08001c80 <uartHasNext>:

uint8_t uartHasNext() {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
    return bufferHasValues(rxBuffer);
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <uartHasNext+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe ff5e 	bl	8000b4a <bufferHasValues>
 8001c8e:	4603      	mov	r3, r0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000260 	.word	0x20000260

08001c98 <uartInit>:

void uartInit() {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001c9c:	2040      	movs	r0, #64	; 0x40
 8001c9e:	f7fe fea1 	bl	80009e4 <bufferCreate>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <uartInit+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001ca8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cac:	f7fe fe9a 	bl	80009e4 <bufferCreate>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <uartInit+0x28>)
 8001cb4:	6013      	str	r3, [r2, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000025c 	.word	0x2000025c
 8001cc0:	20000260 	.word	0x20000260

08001cc4 <uartReceive>:
        hardwareTransmit();
        hardwareReceive();
    }
}

uint16_t uartReceive(uint8_t * const buffer, const uint16_t size) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
    const uint16_t received = bufferPopValues(rxBuffer, buffer, size);
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <uartReceive+0x38>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	887a      	ldrh	r2, [r7, #2]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe ff47 	bl	8000b6c <bufferPopValues>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <uartReceive+0x3c>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <uartReceive+0x2c>
        hardwareReceiveIT();
 8001cec:	f000 f828 	bl	8001d40 <hardwareReceiveIT>
    }
    return received;
 8001cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000260 	.word	0x20000260
 8001d00:	20000264 	.word	0x20000264

08001d04 <uartEnableInterruption>:

void uartEnableInterruption() {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
    interruptionsEnabled = 1;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <uartEnableInterruption+0x1c>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
    transmitIntEnd = 1;
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <uartEnableInterruption+0x20>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
    hardwareTransmitIT();
 8001d14:	f000 f81a 	bl	8001d4c <hardwareTransmitIT>
    hardwareReceiveIT();
 8001d18:	f000 f812 	bl	8001d40 <hardwareReceiveIT>
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000264 	.word	0x20000264
 8001d24:	20000024 	.word	0x20000024

08001d28 <uartDisableInterruption>:

void uartDisableInterruption() {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
    interruptionsEnabled = 0;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <uartDisableInterruption+0x14>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
    uartHardwareDisableInterrupts();
 8001d32:	f7ff fed7 	bl	8001ae4 <uartHardwareDisableInterrupts>
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000264 	.word	0x20000264

08001d40 <hardwareReceiveIT>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareReceiveIT() {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
    uartHardwareReceiveInterrupt();
 8001d44:	f7ff fea8 	bl	8001a98 <uartHardwareReceiveInterrupt>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <hardwareTransmitIT>:

static void hardwareTransmitIT() {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
    if (!transmitIntEnd)
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <hardwareTransmitIT+0x48>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d016      	beq.n	8001d8a <hardwareTransmitIT+0x3e>
        return;

    if (bufferHasValues(txBuffer)) {
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <hardwareTransmitIT+0x4c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fef2 	bl	8000b4a <bufferHasValues>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00f      	beq.n	8001d8c <hardwareTransmitIT+0x40>
        transmitIntEnd = 0;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <hardwareTransmitIT+0x48>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
        uint8_t data = bufferPop(txBuffer);
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <hardwareTransmitIT+0x4c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fea5 	bl	8000ac6 <bufferPop>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
        uartHardwareTransmitInterrupt(data);
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fe60 	bl	8001a48 <uartHardwareTransmitInterrupt>
 8001d88:	e000      	b.n	8001d8c <hardwareTransmitIT+0x40>
        return;
 8001d8a:	bf00      	nop
    }
}
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000024 	.word	0x20000024
 8001d98:	2000025c 	.word	0x2000025c

08001d9c <uartReceiveIntCallback>:
        if (uartHardwareTransmitPolling(byte, 5))
            bufferPop(txBuffer);
    }
}

extern void uartReceiveIntCallback(uint8_t data) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
    if (bufferGetFreeSize(rxBuffer) > 0) {
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <uartReceiveIntCallback+0x50>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe ff1b 	bl	8000be6 <bufferGetFreeSize>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <uartReceiveIntCallback+0x28>
        bufferPush(rxBuffer, data);
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <uartReceiveIntCallback+0x50>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fe2d 	bl	8000a1e <bufferPush>
    }
    if (!isRxStarted()) rxStarted = 1;
 8001dc4:	f000 f82a 	bl	8001e1c <isRxStarted>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <uartReceiveIntCallback+0x38>
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <uartReceiveIntCallback+0x54>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <uartReceiveIntCallback+0x58>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <uartReceiveIntCallback+0x46>
        hardwareReceiveIT();
 8001dde:	f7ff ffaf 	bl	8001d40 <hardwareReceiveIT>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000260 	.word	0x20000260
 8001df0:	20000265 	.word	0x20000265
 8001df4:	20000264 	.word	0x20000264

08001df8 <uartTransmitIntCallback>:

extern void uartTransmitIntCallback() {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
    transmitIntEnd = 1;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <uartTransmitIntCallback+0x1c>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <uartTransmitIntCallback+0x20>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <uartTransmitIntCallback+0x18>
        hardwareTransmitIT();
 8001e0c:	f7ff ff9e 	bl	8001d4c <hardwareTransmitIT>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000024 	.word	0x20000024
 8001e18:	20000264 	.word	0x20000264

08001e1c <isRxStarted>:

uint16_t rxBufToProgBuf(uint8_t* buf) {
	return bufferPopValues(rxBuffer, buf, bufferGetSize(rxBuffer));
}

uint8_t isRxStarted() {
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
	return rxStarted;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <isRxStarted+0x14>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000265 	.word	0x20000265

08001e34 <xmodemReceive>:
 * @brief   This function is the base of the Xmodem protocol.
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  uint8_t
 */
uint8_t xmodemReceive() {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	717b      	strb	r3, [r7, #5]
    uint8_t error_number = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	713b      	strb	r3, [r7, #4]
    uint8_t header = 0x00u;
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]
    xmodemPacketNumber = 1u;
 8001e46:	4b3e      	ldr	r3, [pc, #248]	; (8001f40 <xmodemReceive+0x10c>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6); //send "C" every 10 sec
 8001e4c:	483d      	ldr	r0, [pc, #244]	; (8001f44 <xmodemReceive+0x110>)
 8001e4e:	f001 ff91 	bl	8003d74 <HAL_TIM_Base_Start_IT>
    timerWorking = 1;
 8001e52:	4b3d      	ldr	r3, [pc, #244]	; (8001f48 <xmodemReceive+0x114>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
    /* Loop until there isn't any error or done. */
    while (status == X_OK) {
 8001e58:	e05d      	b.n	8001f16 <xmodemReceive+0xe2>
  	    WRITE_REG(IWDG->KR, 0x0000AAAAU);
 8001e5a:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <xmodemReceive+0x118>)
 8001e5c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001e60:	601a      	str	r2, [r3, #0]
	    xmodemBufSize = uartReceive(xmodemBuf, 1);
 8001e62:	2101      	movs	r1, #1
 8001e64:	483a      	ldr	r0, [pc, #232]	; (8001f50 <xmodemReceive+0x11c>)
 8001e66:	f7ff ff2d 	bl	8001cc4 <uartReceive>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <xmodemReceive+0x120>)
 8001e70:	801a      	strh	r2, [r3, #0]
	    if (xmodemBufSize != 1) continue;
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <xmodemReceive+0x120>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d000      	beq.n	8001e7c <xmodemReceive+0x48>
 8001e7a:	e04c      	b.n	8001f16 <xmodemReceive+0xe2>
	    if (timerWorking) {
 8001e7c:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <xmodemReceive+0x114>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <xmodemReceive+0x5c>
	    	HAL_TIM_Base_Stop_IT(&htim6); //stop sending "C"
 8001e84:	482f      	ldr	r0, [pc, #188]	; (8001f44 <xmodemReceive+0x110>)
 8001e86:	f001 ffe5 	bl	8003e54 <HAL_TIM_Base_Stop_IT>
	    	timerWorking = 0;
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <xmodemReceive+0x114>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
	    }
    	HAL_Delay(100);
 8001e90:	2064      	movs	r0, #100	; 0x64
 8001e92:	f000 fac5 	bl	8002420 <HAL_Delay>
        header = xmodemBuf[0];
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <xmodemReceive+0x11c>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]

        xmodem_status packet_status = X_ERROR;
 8001e9c:	23ff      	movs	r3, #255	; 0xff
 8001e9e:	71bb      	strb	r3, [r7, #6]
        /* The header can be: SOH, STX, EOT and CAN. */
        switch (header) {
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b18      	cmp	r3, #24
 8001ea4:	d02c      	beq.n	8001f00 <xmodemReceive+0xcc>
 8001ea6:	2b18      	cmp	r3, #24
 8001ea8:	dc2d      	bgt.n	8001f06 <xmodemReceive+0xd2>
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d002      	beq.n	8001eb4 <xmodemReceive+0x80>
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d020      	beq.n	8001ef4 <xmodemReceive+0xc0>
 8001eb2:	e028      	b.n	8001f06 <xmodemReceive+0xd2>
            case X_SOH:
                packet_status = xmodem_handle_packet(header); //If the handling was successful, then send an ACK
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f888 	bl	8001fcc <xmodem_handle_packet>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71bb      	strb	r3, [r7, #6]
                if (packet_status == X_OK) {
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d103      	bne.n	8001ece <xmodemReceive+0x9a>
                	uartTransmitChar(X_ACK);
 8001ec6:	2006      	movs	r0, #6
 8001ec8:	f7ff feb6 	bl	8001c38 <uartTransmitChar>
 8001ecc:	e023      	b.n	8001f16 <xmodemReceive+0xe2>
                } else if (packet_status == X_WRONG_FIRMWARE) {
 8001ece:	79bb      	ldrb	r3, [r7, #6]
 8001ed0:	2b78      	cmp	r3, #120	; 0x78
 8001ed2:	d107      	bne.n	8001ee4 <xmodemReceive+0xb0>
                	xmodem_error_handler(&error_number, 0);
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f903 	bl	80020e4 <xmodem_error_handler>
                	status = X_WRONG_FIRMWARE;
 8001ede:	2378      	movs	r3, #120	; 0x78
 8001ee0:	717b      	strb	r3, [r7, #5]
 8001ee2:	e018      	b.n	8001f16 <xmodemReceive+0xe2>
                } else {
                	status = xmodem_error_handler(&error_number, X_MAX_ERRORS); //Error while processing the packet, either send a NAK or do graceful abort
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 f8fb 	bl	80020e4 <xmodem_error_handler>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	717b      	strb	r3, [r7, #5]
                }
                break;
 8001ef2:	e010      	b.n	8001f16 <xmodemReceive+0xe2>
            /* End of Transmission. */
            case X_EOT:
            	uartTransmitChar(X_ACK);
 8001ef4:	2006      	movs	r0, #6
 8001ef6:	f7ff fe9f 	bl	8001c38 <uartTransmitChar>
            	status = X_DONE;
 8001efa:	23aa      	movs	r3, #170	; 0xaa
 8001efc:	717b      	strb	r3, [r7, #5]
            	break;
 8001efe:	e00a      	b.n	8001f16 <xmodemReceive+0xe2>
            /* Abort from host. */
            case X_CAN:
           		status = X_ERROR;
 8001f00:	23ff      	movs	r3, #255	; 0xff
 8001f02:	717b      	strb	r3, [r7, #5]
           		break;
 8001f04:	e007      	b.n	8001f16 <xmodemReceive+0xe2>
            default:
            /* Wrong header. */
            	status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2103      	movs	r1, #3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f8ea 	bl	80020e4 <xmodem_error_handler>
 8001f10:	4603      	mov	r3, r0
 8001f12:	717b      	strb	r3, [r7, #5]
            	break;
 8001f14:	bf00      	nop
    while (status == X_OK) {
 8001f16:	797b      	ldrb	r3, [r7, #5]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d09d      	beq.n	8001e5a <xmodemReceive+0x26>
        }
    }
    if (status == X_DONE) return 1;
 8001f1e:	797b      	ldrb	r3, [r7, #5]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2baa      	cmp	r3, #170	; 0xaa
 8001f24:	d101      	bne.n	8001f2a <xmodemReceive+0xf6>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e006      	b.n	8001f38 <xmodemReceive+0x104>
    else if (status == X_WRONG_FIRMWARE) return 2;
 8001f2a:	797b      	ldrb	r3, [r7, #5]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b78      	cmp	r3, #120	; 0x78
 8001f30:	d101      	bne.n	8001f36 <xmodemReceive+0x102>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e000      	b.n	8001f38 <xmodemReceive+0x104>
    else return 0;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000025 	.word	0x20000025
 8001f44:	20000210 	.word	0x20000210
 8001f48:	20000432 	.word	0x20000432
 8001f4c:	40003000 	.word	0x40003000
 8001f50:	200002ac 	.word	0x200002ac
 8001f54:	200003ac 	.word	0x200003ac

08001f58 <xmodemCalcCrc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodemCalcCrc(uint8_t *data, uint16_t length)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8001f64:	2300      	movs	r3, #0
 8001f66:	81fb      	strh	r3, [r7, #14]
    while (length)
 8001f68:	e026      	b.n	8001fb8 <xmodemCalcCrc+0x60>
    {
        length--;
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f80:	4053      	eors	r3, r2
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	737b      	strb	r3, [r7, #13]
 8001f8a:	e012      	b.n	8001fb2 <xmodemCalcCrc+0x5a>
        {
            if (crc & 0x8000u)
 8001f8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da08      	bge.n	8001fa6 <xmodemCalcCrc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 8001f94:	89fb      	ldrh	r3, [r7, #14]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001f9e:	f083 0301 	eor.w	r3, r3, #1
 8001fa2:	81fb      	strh	r3, [r7, #14]
 8001fa4:	e002      	b.n	8001fac <xmodemCalcCrc+0x54>
            }
            else
            {
                crc = crc << 1u;
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8001fac:	7b7b      	ldrb	r3, [r7, #13]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	737b      	strb	r3, [r7, #13]
 8001fb2:	7b7b      	ldrb	r3, [r7, #13]
 8001fb4:	2b07      	cmp	r3, #7
 8001fb6:	d9e9      	bls.n	8001f8c <xmodemCalcCrc+0x34>
    while (length)
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1d5      	bne.n	8001f6a <xmodemCalcCrc+0x12>
            }
        }
    }
    return crc;
 8001fbe:	89fb      	ldrh	r3, [r7, #14]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <xmodem_handle_packet>:
/**
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0a6      	sub	sp, #152	; 0x98
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
	uint8_t dataTempBuf[128];
	uint8_t crcBuf[2];
    uint16_t size = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

    /* Receive packet number */
    size = uartReceive(xmodemBuf, 2);
 8001fdc:	2102      	movs	r1, #2
 8001fde:	483e      	ldr	r0, [pc, #248]	; (80020d8 <xmodem_handle_packet+0x10c>)
 8001fe0:	f7ff fe70 	bl	8001cc4 <uartReceive>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2) return X_ERROR_UART;
 8001fea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d001      	beq.n	8001ff6 <xmodem_handle_packet+0x2a>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e06c      	b.n	80020d0 <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] != xmodemPacketNumber) return X_ERROR_NUMBER;
 8001ff6:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <xmodem_handle_packet+0x10c>)
 8001ff8:	781a      	ldrb	r2, [r3, #0]
 8001ffa:	4b38      	ldr	r3, [pc, #224]	; (80020dc <xmodem_handle_packet+0x110>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <xmodem_handle_packet+0x3a>
 8002002:	2302      	movs	r3, #2
 8002004:	e064      	b.n	80020d0 <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] + xmodemBuf[1] != 255) return X_ERROR_NUMBER;
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <xmodem_handle_packet+0x10c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <xmodem_handle_packet+0x10c>)
 800200e:	785b      	ldrb	r3, [r3, #1]
 8002010:	4413      	add	r3, r2
 8002012:	2bff      	cmp	r3, #255	; 0xff
 8002014:	d001      	beq.n	800201a <xmodem_handle_packet+0x4e>
 8002016:	2302      	movs	r3, #2
 8002018:	e05a      	b.n	80020d0 <xmodem_handle_packet+0x104>

    /* Receive packet data */
    size = uartReceive(dataTempBuf, X_PACKET_128_SIZE);
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fe4f 	bl	8001cc4 <uartReceive>
 8002026:	4603      	mov	r3, r0
 8002028:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != X_PACKET_128_SIZE) return X_ERROR_UART;
 800202c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d001      	beq.n	8002038 <xmodem_handle_packet+0x6c>
 8002034:	2304      	movs	r3, #4
 8002036:	e04b      	b.n	80020d0 <xmodem_handle_packet+0x104>

    /* Receive CRC */
    size = uartReceive(crcBuf, 2);
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2102      	movs	r1, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fe40 	bl	8001cc4 <uartReceive>
 8002044:	4603      	mov	r3, r0
 8002046:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2) return X_ERROR_UART;
 800204a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800204e:	2b02      	cmp	r3, #2
 8002050:	d001      	beq.n	8002056 <xmodem_handle_packet+0x8a>
 8002052:	2304      	movs	r3, #4
 8002054:	e03c      	b.n	80020d0 <xmodem_handle_packet+0x104>

    /* Check CRC */
    uint16_t crcMerged = ((uint16_t) crcBuf[0] << 8) | ((uint16_t) crcBuf[1]); //Merge the two bytes of CRC
 8002056:	7b3b      	ldrb	r3, [r7, #12]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b21a      	sxth	r2, r3
 800205c:	7b7b      	ldrb	r3, [r7, #13]
 800205e:	b21b      	sxth	r3, r3
 8002060:	4313      	orrs	r3, r2
 8002062:	b21b      	sxth	r3, r3
 8002064:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    uint16_t crcCalculated = xmodemCalcCrc(dataTempBuf, X_PACKET_128_SIZE);
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff72 	bl	8001f58 <xmodemCalcCrc>
 8002074:	4603      	mov	r3, r0
 8002076:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    if (crcMerged != crcCalculated) return X_ERROR_CRC;
 800207a:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800207e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <xmodem_handle_packet+0xbe>
 8002086:	2301      	movs	r3, #1
 8002088:	e022      	b.n	80020d0 <xmodem_handle_packet+0x104>

    /* Add remaining data from previous packet to current data */
    addRemainingDataToCurrentBuf(dataTempBuf);
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f85e 	bl	8002150 <addRemainingDataToCurrentBuf>

    /* Remove unfinished line from xmodemBuf and place it to remaining data */
    cutBuf();
 8002094:	f000 f8a6 	bl	80021e4 <cutBuf>

    /* Move data to flash */
    uint8_t flashHexCode = flashHex(xmodemBuf, xmodemBufSize);
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <xmodem_handle_packet+0x114>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	480e      	ldr	r0, [pc, #56]	; (80020d8 <xmodem_handle_packet+0x10c>)
 80020a0:	f7fe ff88 	bl	8000fb4 <flashHex>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
    if (flashHexCode == 0) return X_ERROR_FLASH;
 80020aa:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <xmodem_handle_packet+0xea>
 80020b2:	2308      	movs	r3, #8
 80020b4:	e00c      	b.n	80020d0 <xmodem_handle_packet+0x104>
    if (flashHexCode == 2) return X_WRONG_FIRMWARE;
 80020b6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d101      	bne.n	80020c2 <xmodem_handle_packet+0xf6>
 80020be:	2378      	movs	r3, #120	; 0x78
 80020c0:	e006      	b.n	80020d0 <xmodem_handle_packet+0x104>

    xmodemPacketNumber++;
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <xmodem_handle_packet+0x110>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <xmodem_handle_packet+0x110>)
 80020cc:	701a      	strb	r2, [r3, #0]
    return X_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3798      	adds	r7, #152	; 0x98
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200002ac 	.word	0x200002ac
 80020dc:	20000025 	.word	0x20000025
 80020e0:	200003ac 	.word	0x200003ac

080020e4 <xmodem_error_handler>:
 *          Raises the error counter, then if the number of the errors reached critical, do a graceful abort, otherwise send a NAK.
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
	xmodem_status status = X_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
	/* Raise the error counter. */
	(*error_number)++;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	701a      	strb	r2, [r3, #0]
	/* If the counter reached the max value, then abort. */
	if ((*error_number) >= max_error_number) {
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	429a      	cmp	r2, r3
 8002108:	d808      	bhi.n	800211c <xmodem_error_handler+0x38>
		/* Graceful abort. */
		uartTransmitChar(X_CAN);
 800210a:	2018      	movs	r0, #24
 800210c:	f7ff fd94 	bl	8001c38 <uartTransmitChar>
		uartTransmitChar(X_CAN);
 8002110:	2018      	movs	r0, #24
 8002112:	f7ff fd91 	bl	8001c38 <uartTransmitChar>
		status = X_ERROR;
 8002116:	23ff      	movs	r3, #255	; 0xff
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	e004      	b.n	8002126 <xmodem_error_handler+0x42>
	} else { // Otherwise send a NAK for a repeat.
		uartTransmitChar(X_NAK);
 800211c:	2015      	movs	r0, #21
 800211e:	f7ff fd8b 	bl	8001c38 <uartTransmitChar>
		status = X_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
	}
	if (xmodemPacketNumber == 1) {
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <xmodem_error_handler+0x60>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <xmodem_error_handler+0x56>
		HAL_TIM_Base_Start_IT(&htim6);
 800212e:	4806      	ldr	r0, [pc, #24]	; (8002148 <xmodem_error_handler+0x64>)
 8002130:	f001 fe20 	bl	8003d74 <HAL_TIM_Base_Start_IT>
		timerWorking = 1;
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <xmodem_error_handler+0x68>)
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000025 	.word	0x20000025
 8002148:	20000210 	.word	0x20000210
 800214c:	20000432 	.word	0x20000432

08002150 <addRemainingDataToCurrentBuf>:


void addRemainingDataToCurrentBuf(uint8_t* receivedData) {
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (remainingDataSize != 0) {
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <addRemainingDataToCurrentBuf+0x84>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d011      	beq.n	8002184 <addRemainingDataToCurrentBuf+0x34>
		for (i = 0; i < remainingDataSize; i++) {
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	e008      	b.n	8002178 <addRemainingDataToCurrentBuf+0x28>
			xmodemBuf[i] = remainingDataBuf[i];
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	491b      	ldr	r1, [pc, #108]	; (80021d8 <addRemainingDataToCurrentBuf+0x88>)
 800216c:	5c89      	ldrb	r1, [r1, r2]
 800216e:	4a1b      	ldr	r2, [pc, #108]	; (80021dc <addRemainingDataToCurrentBuf+0x8c>)
 8002170:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < remainingDataSize; i++) {
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	3301      	adds	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	b29a      	uxth	r2, r3
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <addRemainingDataToCurrentBuf+0x84>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d3f0      	bcc.n	8002166 <addRemainingDataToCurrentBuf+0x16>
		}
	}
	xmodemBufSize = remainingDataSize;
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <addRemainingDataToCurrentBuf+0x84>)
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <addRemainingDataToCurrentBuf+0x90>)
 800218a:	801a      	strh	r2, [r3, #0]
	remainingDataSize = 0;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <addRemainingDataToCurrentBuf+0x84>)
 800218e:	2200      	movs	r2, #0
 8002190:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	e00d      	b.n	80021b4 <addRemainingDataToCurrentBuf+0x64>
		xmodemBuf[xmodemBufSize + i] = receivedData[i];
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	441a      	add	r2, r3
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <addRemainingDataToCurrentBuf+0x90>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	440b      	add	r3, r1
 80021a8:	7811      	ldrb	r1, [r2, #0]
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <addRemainingDataToCurrentBuf+0x8c>)
 80021ac:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	3301      	adds	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	daed      	bge.n	8002198 <addRemainingDataToCurrentBuf+0x48>
	}
	xmodemBufSize += X_PACKET_128_SIZE;
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <addRemainingDataToCurrentBuf+0x90>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	3380      	adds	r3, #128	; 0x80
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <addRemainingDataToCurrentBuf+0x90>)
 80021c6:	801a      	strh	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	20000430 	.word	0x20000430
 80021d8:	200003b0 	.word	0x200003b0
 80021dc:	200002ac 	.word	0x200002ac
 80021e0:	200003ac 	.word	0x200003ac

080021e4 <cutBuf>:

void cutBuf() {
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t linePtr;

	for (i = xmodemBufSize - 1; i >= 0; i--) {
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <cutBuf+0x8c>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <cutBuf+0x90>)
 80021f8:	5cd3      	ldrb	r3, [r2, r3]
 80021fa:	2b0a      	cmp	r3, #10
 80021fc:	d111      	bne.n	8002222 <cutBuf+0x3e>
			linePtr = i;
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	71bb      	strb	r3, [r7, #6]
			break;
 8002202:	bf00      	nop
		}
	}
	remainingDataSize = xmodemBufSize - linePtr - 1;
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <cutBuf+0x8c>)
 8002206:	881a      	ldrh	r2, [r3, #0]
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	b29b      	uxth	r3, r3
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	4b18      	ldr	r3, [pc, #96]	; (8002278 <cutBuf+0x94>)
 8002216:	801a      	strh	r2, [r3, #0]
	if (remainingDataSize == 0) return;
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <cutBuf+0x94>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d104      	bne.n	800222a <cutBuf+0x46>
 8002220:	e020      	b.n	8002264 <cutBuf+0x80>
	for (i = xmodemBufSize - 1; i >= 0; i--) {
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	3b01      	subs	r3, #1
 8002226:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002228:	e7e4      	b.n	80021f4 <cutBuf+0x10>
	xmodemBufSize -= remainingDataSize;
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <cutBuf+0x8c>)
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <cutBuf+0x94>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	b29a      	uxth	r2, r3
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <cutBuf+0x8c>)
 8002238:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < remainingDataSize; i++) {
 800223a:	2300      	movs	r3, #0
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	e00b      	b.n	8002258 <cutBuf+0x74>
		remainingDataBuf[i] = xmodemBuf[(linePtr + 1) + i];
 8002240:	79bb      	ldrb	r3, [r7, #6]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	441a      	add	r2, r3
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	490a      	ldr	r1, [pc, #40]	; (8002274 <cutBuf+0x90>)
 800224c:	5c89      	ldrb	r1, [r1, r2]
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <cutBuf+0x98>)
 8002250:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < remainingDataSize; i++) {
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	3301      	adds	r3, #1
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	b29a      	uxth	r2, r3
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <cutBuf+0x94>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d3ed      	bcc.n	8002240 <cutBuf+0x5c>
	}
}
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	200003ac 	.word	0x200003ac
 8002274:	200002ac 	.word	0x200002ac
 8002278:	20000430 	.word	0x20000430
 800227c:	200003b0 	.word	0x200003b0

08002280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002284:	480d      	ldr	r0, [pc, #52]	; (80022bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002286:	490e      	ldr	r1, [pc, #56]	; (80022c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800229c:	4c0b      	ldr	r4, [pc, #44]	; (80022cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022aa:	f7ff fb4b 	bl	8001944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ae:	f003 f905 	bl	80054bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022b2:	f7ff f833 	bl	800131c <main>
  bx  lr    
 80022b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80022c4:	080062e4 	.word	0x080062e4
  ldr r2, =_sbss
 80022c8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80022cc:	20000468 	.word	0x20000468

080022d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d0:	e7fe      	b.n	80022d0 <ADC_IRQHandler>
	...

080022d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <HAL_Init+0x40>)
 80022de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_Init+0x40>)
 80022ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_Init+0x40>)
 80022f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 f9a7 	bl	8002650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002302:	200f      	movs	r0, #15
 8002304:	f000 f83c 	bl	8002380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002308:	f7ff fa80 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023c00 	.word	0x40023c00

08002318 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_DeInit+0x54>)
 800231e:	f04f 32ff 	mov.w	r2, #4294967295
 8002322:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_DeInit+0x54>)
 8002326:	2200      	movs	r2, #0
 8002328:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_DeInit+0x54>)
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_DeInit+0x54>)
 8002334:	2200      	movs	r2, #0
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_DeInit+0x54>)
 800233a:	f04f 32ff 	mov.w	r2, #4294967295
 800233e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_DeInit+0x54>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_DeInit+0x54>)
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_DeInit+0x54>)
 8002350:	2200      	movs	r2, #0
 8002352:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_DeInit+0x54>)
 8002356:	f04f 32ff 	mov.w	r2, #4294967295
 800235a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_DeInit+0x54>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002362:	f000 f805 	bl	8002370 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x54>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_InitTick+0x58>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002396:	fbb3 f3f1 	udiv	r3, r3, r1
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f999 	bl	80026d6 <HAL_SYSTICK_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00e      	b.n	80023cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b0f      	cmp	r3, #15
 80023b2:	d80a      	bhi.n	80023ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b4:	2200      	movs	r2, #0
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f000 f953 	bl	8002666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c0:	4a06      	ldr	r2, [pc, #24]	; (80023dc <HAL_InitTick+0x5c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000020 	.word	0x20000020
 80023d8:	2000002c 	.word	0x2000002c
 80023dc:	20000028 	.word	0x20000028

080023e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x20>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_IncTick+0x24>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	2000002c 	.word	0x2000002c
 8002404:	20000434 	.word	0x20000434

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_GetTick+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000434 	.word	0x20000434

08002420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff ffee 	bl	8002408 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d005      	beq.n	8002446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_Delay+0x44>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002446:	bf00      	nop
 8002448:	f7ff ffde 	bl	8002408 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d8f7      	bhi.n	8002448 <HAL_Delay+0x28>
  {
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000002c 	.word	0x2000002c

08002468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db12      	blt.n	8002540 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	490a      	ldr	r1, [pc, #40]	; (800254c <__NVIC_DisableIRQ+0x44>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	3320      	adds	r3, #32
 8002530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002534:	f3bf 8f4f 	dsb	sy
}
 8002538:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800253a:	f3bf 8f6f 	isb	sy
}
 800253e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db0a      	blt.n	800257a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	490c      	ldr	r1, [pc, #48]	; (800259c <__NVIC_SetPriority+0x4c>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	440b      	add	r3, r1
 8002574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002578:	e00a      	b.n	8002590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4908      	ldr	r1, [pc, #32]	; (80025a0 <__NVIC_SetPriority+0x50>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	3b04      	subs	r3, #4
 8002588:	0112      	lsls	r2, r2, #4
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	440b      	add	r3, r1
 800258e:	761a      	strb	r2, [r3, #24]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f1c3 0307 	rsb	r3, r3, #7
 80025be:	2b04      	cmp	r3, #4
 80025c0:	bf28      	it	cs
 80025c2:	2304      	movcs	r3, #4
 80025c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d902      	bls.n	80025d4 <NVIC_EncodePriority+0x30>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3b03      	subs	r3, #3
 80025d2:	e000      	b.n	80025d6 <NVIC_EncodePriority+0x32>
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	401a      	ands	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43d9      	mvns	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	4313      	orrs	r3, r2
         );
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800261c:	d301      	bcc.n	8002622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261e:	2301      	movs	r3, #1
 8002620:	e00f      	b.n	8002642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <SysTick_Config+0x40>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262a:	210f      	movs	r1, #15
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	f7ff ff8e 	bl	8002550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <SysTick_Config+0x40>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <SysTick_Config+0x40>)
 800263c:	2207      	movs	r2, #7
 800263e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	e000e010 	.word	0xe000e010

08002650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff05 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002678:	f7ff ff1a 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 800267c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	6978      	ldr	r0, [r7, #20]
 8002684:	f7ff ff8e 	bl	80025a4 <NVIC_EncodePriority>
 8002688:	4602      	mov	r2, r0
 800268a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff5d 	bl	8002550 <__NVIC_SetPriority>
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff0d 	bl	80024cc <__NVIC_EnableIRQ>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff1d 	bl	8002508 <__NVIC_DisableIRQ>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ff94 	bl	800260c <SysTick_Config>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff fe84 	bl	8002408 <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d008      	beq.n	8002720 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e052      	b.n	80027c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0216 	bic.w	r2, r2, #22
 800272e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d103      	bne.n	8002750 <HAL_DMA_Abort+0x62>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0208 	bic.w	r2, r2, #8
 800275e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002770:	e013      	b.n	800279a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002772:	f7ff fe49 	bl	8002408 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b05      	cmp	r3, #5
 800277e:	d90c      	bls.n	800279a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2203      	movs	r2, #3
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e015      	b.n	80027c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e4      	bne.n	8002772 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	223f      	movs	r2, #63	; 0x3f
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d004      	beq.n	80027ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e00c      	b.n	8002806 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2205      	movs	r2, #5
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_FLASH_Program+0xa0>)
 8002840:	7e1b      	ldrb	r3, [r3, #24]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_FLASH_Program+0x1e>
 8002846:	2302      	movs	r3, #2
 8002848:	e03b      	b.n	80028c2 <HAL_FLASH_Program+0x96>
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_FLASH_Program+0xa0>)
 800284c:	2201      	movs	r2, #1
 800284e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002850:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002854:	f000 f870 	bl	8002938 <FLASH_WaitForLastOperation>
 8002858:	4603      	mov	r3, r0
 800285a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d12b      	bne.n	80028ba <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002868:	783b      	ldrb	r3, [r7, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	68b8      	ldr	r0, [r7, #8]
 800286e:	f000 f91b 	bl	8002aa8 <FLASH_Program_Byte>
 8002872:	e016      	b.n	80028a2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d105      	bne.n	8002886 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800287a:	883b      	ldrh	r3, [r7, #0]
 800287c:	4619      	mov	r1, r3
 800287e:	68b8      	ldr	r0, [r7, #8]
 8002880:	f000 f8ee 	bl	8002a60 <FLASH_Program_HalfWord>
 8002884:	e00d      	b.n	80028a2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d105      	bne.n	8002898 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	68b8      	ldr	r0, [r7, #8]
 8002892:	f000 f8c3 	bl	8002a1c <FLASH_Program_Word>
 8002896:	e004      	b.n	80028a2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800289c:	68b8      	ldr	r0, [r7, #8]
 800289e:	f000 f88b 	bl	80029b8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028a6:	f000 f847 	bl	8002938 <FLASH_WaitForLastOperation>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_FLASH_Program+0xa4>)
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <HAL_FLASH_Program+0xa4>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_FLASH_Program+0xa0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	761a      	strb	r2, [r3, #24]
  
  return status;
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000438 	.word	0x20000438
 80028d0:	40023c00 	.word	0x40023c00

080028d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_FLASH_Unlock+0x38>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	da0b      	bge.n	80028fe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_FLASH_Unlock+0x38>)
 80028e8:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_FLASH_Unlock+0x3c>)
 80028ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <HAL_FLASH_Unlock+0x38>)
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_FLASH_Unlock+0x40>)
 80028f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_FLASH_Unlock+0x38>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	da01      	bge.n	80028fe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80028fe:	79fb      	ldrb	r3, [r7, #7]
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	40023c00 	.word	0x40023c00
 8002910:	45670123 	.word	0x45670123
 8002914:	cdef89ab 	.word	0xcdef89ab

08002918 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_FLASH_Lock+0x1c>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_FLASH_Lock+0x1c>)
 8002922:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002926:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40023c00 	.word	0x40023c00

08002938 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <FLASH_WaitForLastOperation+0x78>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800294a:	f7ff fd5d 	bl	8002408 <HAL_GetTick>
 800294e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002950:	e010      	b.n	8002974 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d00c      	beq.n	8002974 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <FLASH_WaitForLastOperation+0x38>
 8002960:	f7ff fd52 	bl	8002408 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d201      	bcs.n	8002974 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e019      	b.n	80029a8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <FLASH_WaitForLastOperation+0x7c>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e8      	bne.n	8002952 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <FLASH_WaitForLastOperation+0x7c>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <FLASH_WaitForLastOperation+0x7c>)
 800298e:	2201      	movs	r2, #1
 8002990:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <FLASH_WaitForLastOperation+0x7c>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800299e:	f000 f8a5 	bl	8002aec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
  
}  
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000438 	.word	0x20000438
 80029b4:	40023c00 	.word	0x40023c00

080029b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <FLASH_Program_DoubleWord+0x60>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <FLASH_Program_DoubleWord+0x60>)
 80029ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <FLASH_Program_DoubleWord+0x60>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <FLASH_Program_DoubleWord+0x60>)
 80029d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <FLASH_Program_DoubleWord+0x60>)
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <FLASH_Program_DoubleWord+0x60>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80029ee:	f3bf 8f6f 	isb	sy
}
 80029f2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80029f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	000a      	movs	r2, r1
 8002a02:	2300      	movs	r3, #0
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	3104      	adds	r1, #4
 8002a08:	4613      	mov	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40023c00 	.word	0x40023c00

08002a1c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <FLASH_Program_Word+0x40>)
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	4a0c      	ldr	r2, [pc, #48]	; (8002a5c <FLASH_Program_Word+0x40>)
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <FLASH_Program_Word+0x40>)
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <FLASH_Program_Word+0x40>)
 8002a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <FLASH_Program_Word+0x40>)
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <FLASH_Program_Word+0x40>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	601a      	str	r2, [r3, #0]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40023c00 	.word	0x40023c00

08002a60 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <FLASH_Program_HalfWord+0x44>)
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <FLASH_Program_HalfWord+0x44>)
 8002a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <FLASH_Program_HalfWord+0x44>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	4a09      	ldr	r2, [pc, #36]	; (8002aa4 <FLASH_Program_HalfWord+0x44>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <FLASH_Program_HalfWord+0x44>)
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	4a06      	ldr	r2, [pc, #24]	; (8002aa4 <FLASH_Program_HalfWord+0x44>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	801a      	strh	r2, [r3, #0]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <FLASH_Program_Byte+0x40>)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <FLASH_Program_Byte+0x40>)
 8002aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <FLASH_Program_Byte+0x40>)
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <FLASH_Program_Byte+0x40>)
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <FLASH_Program_Byte+0x40>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <FLASH_Program_Byte+0x40>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	701a      	strb	r2, [r3, #0]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00

08002aec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002af0:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f043 0310 	orr.w	r3, r3, #16
 8002b04:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b06:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002b08:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f043 0308 	orr.w	r3, r3, #8
 8002b22:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b24:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002b28:	2220      	movs	r2, #32
 8002b2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002b46:	2240      	movs	r2, #64	; 0x40
 8002b48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002b4a:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b60:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b86:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f043 0320 	orr.w	r3, r3, #32
 8002b9c:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <FLASH_SetErrorCode+0xc8>)
 8002b9e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <FLASH_SetErrorCode+0xc4>)
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	60da      	str	r2, [r3, #12]
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40023c00 	.word	0x40023c00
 8002bb4:	20000438 	.word	0x20000438

08002bb8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bca:	4b32      	ldr	r3, [pc, #200]	; (8002c94 <HAL_FLASHEx_Erase+0xdc>)
 8002bcc:	7e1b      	ldrb	r3, [r3, #24]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_FLASHEx_Erase+0x1e>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e05a      	b.n	8002c8c <HAL_FLASHEx_Erase+0xd4>
 8002bd6:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <HAL_FLASHEx_Erase+0xdc>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002be0:	f7ff feaa 	bl	8002938 <FLASH_WaitForLastOperation>
 8002be4:	4603      	mov	r3, r0
 8002be6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d14a      	bne.n	8002c84 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d117      	bne.n	8002c2e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f000 f846 	bl	8002c9c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c14:	f7ff fe90 	bl	8002938 <FLASH_WaitForLastOperation>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002c1c:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_FLASHEx_Erase+0xe0>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <HAL_FLASHEx_Erase+0xe0>)
 8002c22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6113      	str	r3, [r2, #16]
 8002c2c:	e028      	b.n	8002c80 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	e01c      	b.n	8002c70 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	f000 f866 	bl	8002d10 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c48:	f7ff fe76 	bl	8002938 <FLASH_WaitForLastOperation>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_FLASHEx_Erase+0xe0>)
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_FLASHEx_Erase+0xe0>)
 8002c56:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002c5a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	601a      	str	r2, [r3, #0]
          break;
 8002c68:	e00a      	b.n	8002c80 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4413      	add	r3, r2
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d3da      	bcc.n	8002c36 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002c80:	f000 f894 	bl	8002dac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_FLASHEx_Erase+0xdc>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	761a      	strb	r2, [r3, #24]

  return status;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000438 	.word	0x20000438
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <FLASH_MassErase+0x70>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <FLASH_MassErase+0x70>)
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d108      	bne.n	8002ccc <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <FLASH_MassErase+0x70>)
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <FLASH_MassErase+0x70>)
 8002cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	6113      	str	r3, [r2, #16]
 8002cca:	e00f      	b.n	8002cec <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d106      	bne.n	8002ce0 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <FLASH_MassErase+0x70>)
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <FLASH_MassErase+0x70>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	6113      	str	r3, [r2, #16]
 8002cde:	e005      	b.n	8002cec <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <FLASH_MassErase+0x70>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <FLASH_MassErase+0x70>)
 8002ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cea:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002cec:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <FLASH_MassErase+0x70>)
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <FLASH_MassErase+0x70>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6113      	str	r3, [r2, #16]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40023c00 	.word	0x40023c00

08002d10 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e010      	b.n	8002d4e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d103      	bne.n	8002d3a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e009      	b.n	8002d4e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d103      	bne.n	8002d48 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e002      	b.n	8002d4e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002d48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b0b      	cmp	r3, #11
 8002d52:	d902      	bls.n	8002d5a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3304      	adds	r3, #4
 8002d58:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <FLASH_Erase_Sector+0x98>)
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <FLASH_Erase_Sector+0x98>)
 8002d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <FLASH_Erase_Sector+0x98>)
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	490f      	ldr	r1, [pc, #60]	; (8002da8 <FLASH_Erase_Sector+0x98>)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <FLASH_Erase_Sector+0x98>)
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <FLASH_Erase_Sector+0x98>)
 8002d78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <FLASH_Erase_Sector+0x98>)
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4313      	orrs	r3, r2
 8002d88:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <FLASH_Erase_Sector+0x98>)
 8002d8a:	f043 0302 	orr.w	r3, r3, #2
 8002d8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <FLASH_Erase_Sector+0x98>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <FLASH_Erase_Sector+0x98>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9a:	6113      	str	r3, [r2, #16]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40023c00 	.word	0x40023c00

08002dac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002db0:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d017      	beq.n	8002dec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002dc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dc6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002dce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002dda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dde:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d017      	beq.n	8002e28 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e02:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002e0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e1a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <FLASH_FlushCaches+0x88>)
 8002e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e26:	6013      	str	r3, [r2, #0]
  }
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40023c00 	.word	0x40023c00

08002e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	e177      	b.n	8003144 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e54:	2201      	movs	r2, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	f040 8166 	bne.w	800313e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d005      	beq.n	8002e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d130      	bne.n	8002eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	2203      	movs	r2, #3
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 0201 	and.w	r2, r3, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d017      	beq.n	8002f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d123      	bne.n	8002f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	08da      	lsrs	r2, r3, #3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3208      	adds	r2, #8
 8002f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	220f      	movs	r2, #15
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	08da      	lsrs	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3208      	adds	r2, #8
 8002f76:	69b9      	ldr	r1, [r7, #24]
 8002f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0203 	and.w	r2, r3, #3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80c0 	beq.w	800313e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	4b66      	ldr	r3, [pc, #408]	; (800315c <HAL_GPIO_Init+0x324>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a65      	ldr	r2, [pc, #404]	; (800315c <HAL_GPIO_Init+0x324>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b63      	ldr	r3, [pc, #396]	; (800315c <HAL_GPIO_Init+0x324>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fda:	4a61      	ldr	r2, [pc, #388]	; (8003160 <HAL_GPIO_Init+0x328>)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a58      	ldr	r2, [pc, #352]	; (8003164 <HAL_GPIO_Init+0x32c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d037      	beq.n	8003076 <HAL_GPIO_Init+0x23e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a57      	ldr	r2, [pc, #348]	; (8003168 <HAL_GPIO_Init+0x330>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d031      	beq.n	8003072 <HAL_GPIO_Init+0x23a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a56      	ldr	r2, [pc, #344]	; (800316c <HAL_GPIO_Init+0x334>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02b      	beq.n	800306e <HAL_GPIO_Init+0x236>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a55      	ldr	r2, [pc, #340]	; (8003170 <HAL_GPIO_Init+0x338>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d025      	beq.n	800306a <HAL_GPIO_Init+0x232>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a54      	ldr	r2, [pc, #336]	; (8003174 <HAL_GPIO_Init+0x33c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01f      	beq.n	8003066 <HAL_GPIO_Init+0x22e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a53      	ldr	r2, [pc, #332]	; (8003178 <HAL_GPIO_Init+0x340>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d019      	beq.n	8003062 <HAL_GPIO_Init+0x22a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a52      	ldr	r2, [pc, #328]	; (800317c <HAL_GPIO_Init+0x344>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_GPIO_Init+0x226>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a51      	ldr	r2, [pc, #324]	; (8003180 <HAL_GPIO_Init+0x348>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00d      	beq.n	800305a <HAL_GPIO_Init+0x222>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a50      	ldr	r2, [pc, #320]	; (8003184 <HAL_GPIO_Init+0x34c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <HAL_GPIO_Init+0x21e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4f      	ldr	r2, [pc, #316]	; (8003188 <HAL_GPIO_Init+0x350>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <HAL_GPIO_Init+0x21a>
 800304e:	2309      	movs	r3, #9
 8003050:	e012      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003052:	230a      	movs	r3, #10
 8003054:	e010      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003056:	2308      	movs	r3, #8
 8003058:	e00e      	b.n	8003078 <HAL_GPIO_Init+0x240>
 800305a:	2307      	movs	r3, #7
 800305c:	e00c      	b.n	8003078 <HAL_GPIO_Init+0x240>
 800305e:	2306      	movs	r3, #6
 8003060:	e00a      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003062:	2305      	movs	r3, #5
 8003064:	e008      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003066:	2304      	movs	r3, #4
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x240>
 800306a:	2303      	movs	r3, #3
 800306c:	e004      	b.n	8003078 <HAL_GPIO_Init+0x240>
 800306e:	2302      	movs	r3, #2
 8003070:	e002      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003076:	2300      	movs	r3, #0
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f002 0203 	and.w	r2, r2, #3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4093      	lsls	r3, r2
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003088:	4935      	ldr	r1, [pc, #212]	; (8003160 <HAL_GPIO_Init+0x328>)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003096:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_GPIO_Init+0x354>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ba:	4a34      	ldr	r2, [pc, #208]	; (800318c <HAL_GPIO_Init+0x354>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c0:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_GPIO_Init+0x354>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e4:	4a29      	ldr	r2, [pc, #164]	; (800318c <HAL_GPIO_Init+0x354>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ea:	4b28      	ldr	r3, [pc, #160]	; (800318c <HAL_GPIO_Init+0x354>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800310e:	4a1f      	ldr	r2, [pc, #124]	; (800318c <HAL_GPIO_Init+0x354>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_GPIO_Init+0x354>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003138:	4a14      	ldr	r2, [pc, #80]	; (800318c <HAL_GPIO_Init+0x354>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b0f      	cmp	r3, #15
 8003148:	f67f ae84 	bls.w	8002e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3724      	adds	r7, #36	; 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	40013800 	.word	0x40013800
 8003164:	40020000 	.word	0x40020000
 8003168:	40020400 	.word	0x40020400
 800316c:	40020800 	.word	0x40020800
 8003170:	40020c00 	.word	0x40020c00
 8003174:	40021000 	.word	0x40021000
 8003178:	40021400 	.word	0x40021400
 800317c:	40021800 	.word	0x40021800
 8003180:	40021c00 	.word	0x40021c00
 8003184:	40022000 	.word	0x40022000
 8003188:	40022400 	.word	0x40022400
 800318c:	40013c00 	.word	0x40013c00

08003190 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e034      	b.n	800320c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80031aa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f245 5255 	movw	r2, #21845	; 0x5555
 80031b4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6852      	ldr	r2, [r2, #4]
 80031be:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6892      	ldr	r2, [r2, #8]
 80031c8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80031ca:	f7ff f91d 	bl	8002408 <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031d0:	e00f      	b.n	80031f2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80031d2:	f7ff f919 	bl	8002408 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b31      	cmp	r3, #49	; 0x31
 80031de:	d908      	bls.n	80031f2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e00c      	b.n	800320c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e8      	bne.n	80031d2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003208:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003224:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e267      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d075      	beq.n	800333e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003252:	4b88      	ldr	r3, [pc, #544]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d00c      	beq.n	8003278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325e:	4b85      	ldr	r3, [pc, #532]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003266:	2b08      	cmp	r3, #8
 8003268:	d112      	bne.n	8003290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326a:	4b82      	ldr	r3, [pc, #520]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003276:	d10b      	bne.n	8003290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	4b7e      	ldr	r3, [pc, #504]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d05b      	beq.n	800333c <HAL_RCC_OscConfig+0x108>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d157      	bne.n	800333c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e242      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003298:	d106      	bne.n	80032a8 <HAL_RCC_OscConfig+0x74>
 800329a:	4b76      	ldr	r3, [pc, #472]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a75      	ldr	r2, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xb0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x98>
 80032b2:	4b70      	ldr	r3, [pc, #448]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6f      	ldr	r2, [pc, #444]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6c      	ldr	r2, [pc, #432]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xb0>
 80032cc:	4b69      	ldr	r3, [pc, #420]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a68      	ldr	r2, [pc, #416]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b66      	ldr	r3, [pc, #408]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a65      	ldr	r2, [pc, #404]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7ff f88c 	bl	8002408 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f4:	f7ff f888 	bl	8002408 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e207      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xc0>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7ff f878 	bl	8002408 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff f874 	bl	8002408 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1f3      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b51      	ldr	r3, [pc, #324]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0xe8>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800334a:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003356:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003362:	4b44      	ldr	r3, [pc, #272]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b41      	ldr	r3, [pc, #260]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x152>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1c7      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4937      	ldr	r1, [pc, #220]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_OscConfig+0x244>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7ff f82d 	bl	8002408 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b2:	f7ff f829 	bl	8002408 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1a8      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4925      	ldr	r1, [pc, #148]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCC_OscConfig+0x244>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7ff f80c 	bl	8002408 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f4:	f7ff f808 	bl	8002408 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e187      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d036      	beq.n	800348c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d016      	beq.n	8003454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <HAL_RCC_OscConfig+0x248>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe ffec 	bl	8002408 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003434:	f7fe ffe8 	bl	8002408 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e167      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x200>
 8003452:	e01b      	b.n	800348c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_OscConfig+0x248>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345a:	f7fe ffd5 	bl	8002408 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	e00e      	b.n	8003480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003462:	f7fe ffd1 	bl	8002408 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d907      	bls.n	8003480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e150      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
 8003474:	40023800 	.word	0x40023800
 8003478:	42470000 	.word	0x42470000
 800347c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ea      	bne.n	8003462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8097 	beq.w	80035c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349e:	4b81      	ldr	r3, [pc, #516]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10f      	bne.n	80034ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	4b7d      	ldr	r3, [pc, #500]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a7c      	ldr	r2, [pc, #496]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ba:	4b7a      	ldr	r3, [pc, #488]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ca:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d118      	bne.n	8003508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d6:	4b74      	ldr	r3, [pc, #464]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a73      	ldr	r2, [pc, #460]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e2:	f7fe ff91 	bl	8002408 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ea:	f7fe ff8d 	bl	8002408 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e10c      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x2ea>
 8003510:	4b64      	ldr	r3, [pc, #400]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a63      	ldr	r2, [pc, #396]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
 800351c:	e01c      	b.n	8003558 <HAL_RCC_OscConfig+0x324>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b05      	cmp	r3, #5
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0x30c>
 8003526:	4b5f      	ldr	r3, [pc, #380]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a5e      	ldr	r2, [pc, #376]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800352c:	f043 0304 	orr.w	r3, r3, #4
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
 8003532:	4b5c      	ldr	r3, [pc, #368]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a5b      	ldr	r2, [pc, #364]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0x324>
 8003540:	4b58      	ldr	r3, [pc, #352]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a57      	ldr	r2, [pc, #348]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	4b55      	ldr	r3, [pc, #340]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a54      	ldr	r2, [pc, #336]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003552:	f023 0304 	bic.w	r3, r3, #4
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d015      	beq.n	800358c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe ff52 	bl	8002408 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	e00a      	b.n	800357e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fe ff4e 	bl	8002408 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e0cb      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357e:	4b49      	ldr	r3, [pc, #292]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0ee      	beq.n	8003568 <HAL_RCC_OscConfig+0x334>
 800358a:	e014      	b.n	80035b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358c:	f7fe ff3c 	bl	8002408 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003592:	e00a      	b.n	80035aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003594:	f7fe ff38 	bl	8002408 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e0b5      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035aa:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ee      	bne.n	8003594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d105      	bne.n	80035c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035bc:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	4a38      	ldr	r2, [pc, #224]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a1 	beq.w	8003714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035d2:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d05c      	beq.n	8003698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d141      	bne.n	800366a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HAL_RCC_OscConfig+0x478>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe ff0c 	bl	8002408 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fe ff08 	bl	8002408 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e087      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	019b      	lsls	r3, r3, #6
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	3b01      	subs	r3, #1
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	491b      	ldr	r1, [pc, #108]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_RCC_OscConfig+0x478>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fe fee1 	bl	8002408 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364a:	f7fe fedd 	bl	8002408 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e05c      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x416>
 8003668:	e054      	b.n	8003714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_RCC_OscConfig+0x478>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe feca 	bl	8002408 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe fec6 	bl	8002408 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e045      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x444>
 8003696:	e03d      	b.n	8003714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e038      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
 80036ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x4ec>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d028      	beq.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d121      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d11a      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d111      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	3b01      	subs	r3, #1
 80036fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0cc      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b68      	ldr	r3, [pc, #416]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d90c      	bls.n	8003760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0b8      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d020      	beq.n	80037ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003778:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a58      	ldr	r2, [pc, #352]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003790:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a52      	ldr	r2, [pc, #328]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800379a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800379c:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	494d      	ldr	r1, [pc, #308]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d044      	beq.n	8003844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d119      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e07f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e067      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003802:	4b37      	ldr	r3, [pc, #220]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4934      	ldr	r1, [pc, #208]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003814:	f7fe fdf8 	bl	8002408 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fe fdf4 	bl	8002408 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e04f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	429a      	cmp	r2, r3
 8003842:	d1eb      	bne.n	800381c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d20c      	bcs.n	800386c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e032      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4916      	ldr	r1, [pc, #88]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038aa:	f000 f821 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	490a      	ldr	r1, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	fa22 f303 	lsr.w	r3, r2, r3
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fd58 	bl	8002380 <HAL_InitTick>

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023c00 	.word	0x40023c00
 80038e0:	40023800 	.word	0x40023800
 80038e4:	08006188 	.word	0x08006188
 80038e8:	20000020 	.word	0x20000020
 80038ec:	20000028 	.word	0x20000028

080038f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b090      	sub	sp, #64	; 0x40
 80038f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
 80038fc:	2300      	movs	r3, #0
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003900:	2300      	movs	r3, #0
 8003902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003908:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b08      	cmp	r3, #8
 8003912:	d00d      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x40>
 8003914:	2b08      	cmp	r3, #8
 8003916:	f200 80a1 	bhi.w	8003a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x34>
 800391e:	2b04      	cmp	r3, #4
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x3a>
 8003922:	e09b      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003924:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003928:	e09b      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800392a:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800392e:	e098      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003930:	4b4f      	ldr	r3, [pc, #316]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800393a:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d028      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003946:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	099b      	lsrs	r3, r3, #6
 800394c:	2200      	movs	r2, #0
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	627a      	str	r2, [r7, #36]	; 0x24
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003958:	2100      	movs	r1, #0
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800395c:	fb03 f201 	mul.w	r2, r3, r1
 8003960:	2300      	movs	r3, #0
 8003962:	fb00 f303 	mul.w	r3, r0, r3
 8003966:	4413      	add	r3, r2
 8003968:	4a43      	ldr	r2, [pc, #268]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800396a:	fba0 1202 	umull	r1, r2, r0, r2
 800396e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003970:	460a      	mov	r2, r1
 8003972:	62ba      	str	r2, [r7, #40]	; 0x28
 8003974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003976:	4413      	add	r3, r2
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397c:	2200      	movs	r2, #0
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	61fa      	str	r2, [r7, #28]
 8003982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800398a:	f7fc fc99 	bl	80002c0 <__aeabi_uldivmod>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4613      	mov	r3, r2
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003996:	e053      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003998:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	2200      	movs	r2, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	617a      	str	r2, [r7, #20]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039aa:	f04f 0b00 	mov.w	fp, #0
 80039ae:	4652      	mov	r2, sl
 80039b0:	465b      	mov	r3, fp
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f04f 0100 	mov.w	r1, #0
 80039ba:	0159      	lsls	r1, r3, #5
 80039bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039c0:	0150      	lsls	r0, r2, #5
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	ebb2 080a 	subs.w	r8, r2, sl
 80039ca:	eb63 090b 	sbc.w	r9, r3, fp
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039e2:	ebb2 0408 	subs.w	r4, r2, r8
 80039e6:	eb63 0509 	sbc.w	r5, r3, r9
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	00eb      	lsls	r3, r5, #3
 80039f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f8:	00e2      	lsls	r2, r4, #3
 80039fa:	4614      	mov	r4, r2
 80039fc:	461d      	mov	r5, r3
 80039fe:	eb14 030a 	adds.w	r3, r4, sl
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	eb45 030b 	adc.w	r3, r5, fp
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a16:	4629      	mov	r1, r5
 8003a18:	028b      	lsls	r3, r1, #10
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a20:	4621      	mov	r1, r4
 8003a22:	028a      	lsls	r2, r1, #10
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	60fa      	str	r2, [r7, #12]
 8003a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a34:	f7fc fc44 	bl	80002c0 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a5a:	e002      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3740      	adds	r7, #64	; 0x40
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	017d7840 	.word	0x017d7840

08003a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000020 	.word	0x20000020

08003a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a98:	f7ff fff0 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0a9b      	lsrs	r3, r3, #10
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4903      	ldr	r1, [pc, #12]	; (8003ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	08006198 	.word	0x08006198

08003abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ac0:	f7ff ffdc 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0b5b      	lsrs	r3, r3, #13
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	08006198 	.word	0x08006198

08003ae4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003aea:	f7fe fc8d 	bl	8002408 <HAL_GetTick>
 8003aee:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003af0:	4b72      	ldr	r3, [pc, #456]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a71      	ldr	r2, [pc, #452]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afe:	f7fe fc83 	bl	8002408 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0d0      	b.n	8003cb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b10:	4b6a      	ldr	r3, [pc, #424]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003b1c:	4b67      	ldr	r3, [pc, #412]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a66      	ldr	r2, [pc, #408]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b28:	f7fe fc6e 	bl	8002408 <HAL_GetTick>
 8003b2c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003b2e:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b36:	f7fe fc67 	bl	8002408 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e0b2      	b.n	8003cb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b4c:	4b5b      	ldr	r3, [pc, #364]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ee      	bne.n	8003b36 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b58:	f7fe fc56 	bl	8002408 <HAL_GetTick>
 8003b5c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003b5e:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a56      	ldr	r2, [pc, #344]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003b64:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003b68:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fe fc4c 	bl	8002408 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e099      	b.n	8003cb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b7e:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b8a:	f7fe fc3d 	bl	8002408 <HAL_GetTick>
 8003b8e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b90:	4b4a      	ldr	r3, [pc, #296]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a49      	ldr	r2, [pc, #292]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9e:	f7fe fc33 	bl	8002408 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e080      	b.n	8003cb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003bb0:	4b42      	ldr	r3, [pc, #264]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f0      	bne.n	8003b9e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bbc:	f7fe fc24 	bl	8002408 <HAL_GetTick>
 8003bc0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003bc2:	4b3e      	ldr	r3, [pc, #248]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3d      	ldr	r2, [pc, #244]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003bc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bcc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bd0:	f7fe fc1a 	bl	8002408 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e067      	b.n	8003cb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003be2:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bee:	f7fe fc0b 	bl	8002408 <HAL_GetTick>
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003bf4:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a30      	ldr	r2, [pc, #192]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c02:	f7fe fc01 	bl	8002408 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e04e      	b.n	8003cb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003c14:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003c20:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c22:	4a27      	ldr	r2, [pc, #156]	; (8003cc0 <HAL_RCC_DeInit+0x1dc>)
 8003c24:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003c26:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_RCC_DeInit+0x1e0>)
 8003c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8003c2e:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c30:	4a24      	ldr	r2, [pc, #144]	; (8003cc4 <HAL_RCC_DeInit+0x1e0>)
 8003c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003c36:	4b21      	ldr	r3, [pc, #132]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c3c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c40:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c4c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003c5a:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4a17      	ldr	r2, [pc, #92]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c60:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003c64:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003c66:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4a11      	ldr	r2, [pc, #68]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8e:	4a0b      	ldr	r2, [pc, #44]	; (8003cbc <HAL_RCC_DeInit+0x1d8>)
 8003c90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c94:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCC_DeInit+0x1e4>)
 8003c98:	4a0c      	ldr	r2, [pc, #48]	; (8003ccc <HAL_RCC_DeInit+0x1e8>)
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <HAL_RCC_DeInit+0x1ec>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe fb6d 	bl	8002380 <HAL_InitTick>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	04003010 	.word	0x04003010
 8003cc4:	24003000 	.word	0x24003000
 8003cc8:	20000020 	.word	0x20000020
 8003ccc:	00f42400 	.word	0x00f42400
 8003cd0:	20000028 	.word	0x20000028

08003cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e041      	b.n	8003d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd fe6a 	bl	80019d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f000 f9fe 	bl	8004114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d001      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e04e      	b.n	8003e2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a23      	ldr	r2, [pc, #140]	; (8003e38 <HAL_TIM_Base_Start_IT+0xc4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d022      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db6:	d01d      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_TIM_Base_Start_IT+0xc8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d018      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00e      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d111      	bne.n	8003e18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b06      	cmp	r3, #6
 8003e04:	d010      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e16:	e007      	b.n	8003e28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800
 8003e44:	40000c00 	.word	0x40000c00
 8003e48:	40010400 	.word	0x40010400
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40001800 	.word	0x40001800

08003e54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a1a      	ldr	r2, [r3, #32]
 8003e72:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10f      	bne.n	8003e9c <HAL_TIM_Base_Stop_IT+0x48>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	f240 4344 	movw	r3, #1092	; 0x444
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d107      	bne.n	8003e9c <HAL_TIM_Base_Stop_IT+0x48>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d122      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d11b      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f06f 0202 	mvn.w	r2, #2
 8003ede:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f8ee 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003efa:	e005      	b.n	8003f08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f8e0 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8f1 	bl	80040ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d122      	bne.n	8003f62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d11b      	bne.n	8003f62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f06f 0204 	mvn.w	r2, #4
 8003f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8c4 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003f4e:	e005      	b.n	8003f5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8b6 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f8c7 	bl	80040ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d122      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d11b      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f06f 0208 	mvn.w	r2, #8
 8003f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f89a 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003fa2:	e005      	b.n	8003fb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f88c 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f89d 	bl	80040ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d122      	bne.n	800400a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b10      	cmp	r3, #16
 8003fd0:	d11b      	bne.n	800400a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f06f 0210 	mvn.w	r2, #16
 8003fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2208      	movs	r2, #8
 8003fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f870 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003ff6:	e005      	b.n	8004004 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f862 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f873 	bl	80040ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d10e      	bne.n	8004036 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f06f 0201 	mvn.w	r2, #1
 800402e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7fd fcf7 	bl	8001a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004040:	2b80      	cmp	r3, #128	; 0x80
 8004042:	d10e      	bne.n	8004062 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b80      	cmp	r3, #128	; 0x80
 8004050:	d107      	bne.n	8004062 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800405a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f97f 	bl	8004360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d10e      	bne.n	800408e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d107      	bne.n	800408e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f838 	bl	80040fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b20      	cmp	r3, #32
 800409a:	d10e      	bne.n	80040ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d107      	bne.n	80040ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f06f 0220 	mvn.w	r2, #32
 80040b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f949 	bl	800434c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a40      	ldr	r2, [pc, #256]	; (8004228 <TIM_Base_SetConfig+0x114>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d013      	beq.n	8004154 <TIM_Base_SetConfig+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004132:	d00f      	beq.n	8004154 <TIM_Base_SetConfig+0x40>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a3d      	ldr	r2, [pc, #244]	; (800422c <TIM_Base_SetConfig+0x118>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00b      	beq.n	8004154 <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a3c      	ldr	r2, [pc, #240]	; (8004230 <TIM_Base_SetConfig+0x11c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d007      	beq.n	8004154 <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a3b      	ldr	r2, [pc, #236]	; (8004234 <TIM_Base_SetConfig+0x120>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a3a      	ldr	r2, [pc, #232]	; (8004238 <TIM_Base_SetConfig+0x124>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d108      	bne.n	8004166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2f      	ldr	r2, [pc, #188]	; (8004228 <TIM_Base_SetConfig+0x114>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d02b      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004174:	d027      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2c      	ldr	r2, [pc, #176]	; (800422c <TIM_Base_SetConfig+0x118>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d023      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2b      	ldr	r2, [pc, #172]	; (8004230 <TIM_Base_SetConfig+0x11c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01f      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <TIM_Base_SetConfig+0x120>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01b      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a29      	ldr	r2, [pc, #164]	; (8004238 <TIM_Base_SetConfig+0x124>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d017      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a28      	ldr	r2, [pc, #160]	; (800423c <TIM_Base_SetConfig+0x128>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a27      	ldr	r2, [pc, #156]	; (8004240 <TIM_Base_SetConfig+0x12c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00f      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a26      	ldr	r2, [pc, #152]	; (8004244 <TIM_Base_SetConfig+0x130>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a25      	ldr	r2, [pc, #148]	; (8004248 <TIM_Base_SetConfig+0x134>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a24      	ldr	r2, [pc, #144]	; (800424c <TIM_Base_SetConfig+0x138>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a23      	ldr	r2, [pc, #140]	; (8004250 <TIM_Base_SetConfig+0x13c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <TIM_Base_SetConfig+0x114>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_Base_SetConfig+0xf8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <TIM_Base_SetConfig+0x124>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d103      	bne.n	8004214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	615a      	str	r2, [r3, #20]
}
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40010000 	.word	0x40010000
 800422c:	40000400 	.word	0x40000400
 8004230:	40000800 	.word	0x40000800
 8004234:	40000c00 	.word	0x40000c00
 8004238:	40010400 	.word	0x40010400
 800423c:	40014000 	.word	0x40014000
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800
 8004248:	40001800 	.word	0x40001800
 800424c:	40001c00 	.word	0x40001c00
 8004250:	40002000 	.word	0x40002000

08004254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004268:	2302      	movs	r3, #2
 800426a:	e05a      	b.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a21      	ldr	r2, [pc, #132]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d022      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b8:	d01d      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d018      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1a      	ldr	r2, [pc, #104]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00e      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a18      	ldr	r2, [pc, #96]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d009      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a17      	ldr	r2, [pc, #92]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a15      	ldr	r2, [pc, #84]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10c      	bne.n	8004310 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	4313      	orrs	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40010400 	.word	0x40010400
 8004344:	40014000 	.word	0x40014000
 8004348:	40001800 	.word	0x40001800

0800434c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e03f      	b.n	8004406 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd fbd8 	bl	8001b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	; 0x24
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fe05 	bl	8004fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	4613      	mov	r3, r2
 800441a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b20      	cmp	r3, #32
 8004426:	d130      	bne.n	800448a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_UART_Transmit_IT+0x26>
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e029      	b.n	800448c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_UART_Transmit_IT+0x38>
 8004442:	2302      	movs	r3, #2
 8004444:	e022      	b.n	800448c <HAL_UART_Transmit_IT+0x7e>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	88fa      	ldrh	r2, [r7, #6]
 800445e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2221      	movs	r2, #33	; 0x21
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004484:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	e000      	b.n	800448c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800448a:	2302      	movs	r3, #2
  }
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d11d      	bne.n	80044ee <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_UART_Receive_IT+0x26>
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e016      	b.n	80044f0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Receive_IT+0x38>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e00f      	b.n	80044f0 <HAL_UART_Receive_IT+0x58>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	461a      	mov	r2, r3
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fb97 	bl	8004c18 <UART_Start_Receive_IT>
 80044ea:	4603      	mov	r3, r0
 80044ec:	e000      	b.n	80044f0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044ee:	2302      	movs	r3, #2
  }
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0a0      	sub	sp, #128	; 0x80
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004512:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8004516:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004520:	66ba      	str	r2, [r7, #104]	; 0x68
 8004522:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004526:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800452e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	67bb      	str	r3, [r7, #120]	; 0x78
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004554:	657a      	str	r2, [r7, #84]	; 0x54
 8004556:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800455a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	2b01      	cmp	r3, #1
 800456e:	d119      	bne.n	80045a4 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	f023 0310 	bic.w	r3, r3, #16
 8004586:	677b      	str	r3, [r7, #116]	; 0x74
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004590:	643a      	str	r2, [r7, #64]	; 0x40
 8004592:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	2b80      	cmp	r3, #128	; 0x80
 80045b0:	d136      	bne.n	8004620 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3314      	adds	r3, #20
 80045b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c8:	673b      	str	r3, [r7, #112]	; 0x70
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3314      	adds	r3, #20
 80045d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80045d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e5      	bne.n	80045b2 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d018      	beq.n	8004620 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	2200      	movs	r2, #0
 80045f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe f877 	bl	80026ee <HAL_DMA_Abort>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00c      	beq.n	8004620 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe f901 	bl	8002812 <HAL_DMA_GetError>
 8004610:	4603      	mov	r3, r0
 8004612:	2b20      	cmp	r3, #32
 8004614:	d104      	bne.n	8004620 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2210      	movs	r2, #16
 800461a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e052      	b.n	80046c6 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d136      	bne.n	800469c <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3314      	adds	r3, #20
 8004634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	60bb      	str	r3, [r7, #8]
   return(result);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004644:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3314      	adds	r3, #20
 800464c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800464e:	61ba      	str	r2, [r7, #24]
 8004650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6979      	ldr	r1, [r7, #20]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	613b      	str	r3, [r7, #16]
   return(result);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e5      	bne.n	800462e <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	2b00      	cmp	r3, #0
 8004668:	d018      	beq.n	800469c <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	2200      	movs	r2, #0
 8004670:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe f839 	bl	80026ee <HAL_DMA_Abort>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe f8c3 	bl	8002812 <HAL_DMA_GetError>
 800468c:	4603      	mov	r3, r0
 800468e:	2b20      	cmp	r3, #32
 8004690:	d104      	bne.n	800469c <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2210      	movs	r2, #16
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e014      	b.n	80046c6 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3780      	adds	r7, #128	; 0x80
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b0ba      	sub	sp, #232	; 0xe8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800470e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <HAL_UART_IRQHandler+0x66>
 8004722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fb8f 	bl	8004e52 <UART_Receive_IT>
      return;
 8004734:	e256      	b.n	8004be4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80de 	beq.w	80048fc <HAL_UART_IRQHandler+0x22c>
 8004740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004750:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80d1 	beq.w	80048fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_UART_IRQHandler+0xae>
 8004766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f043 0201 	orr.w	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <HAL_UART_IRQHandler+0xd2>
 800478a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_UART_IRQHandler+0xf6>
 80047ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f043 0204 	orr.w	r2, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d011      	beq.n	80047f6 <HAL_UART_IRQHandler+0x126>
 80047d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f043 0208 	orr.w	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 81ed 	beq.w	8004bda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_UART_IRQHandler+0x14e>
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb1a 	bl	8004e52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d103      	bne.n	800484a <HAL_UART_IRQHandler+0x17a>
 8004842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04f      	beq.n	80048ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa22 	bl	8004c94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b40      	cmp	r3, #64	; 0x40
 800485c:	d141      	bne.n	80048e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3314      	adds	r3, #20
 8004864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800487c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3314      	adds	r3, #20
 8004886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800488a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800488e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1d9      	bne.n	800485e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d013      	beq.n	80048da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	4a7d      	ldr	r2, [pc, #500]	; (8004aac <HAL_UART_IRQHandler+0x3dc>)
 80048b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fd ff85 	bl	80027ce <HAL_DMA_Abort_IT>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048d4:	4610      	mov	r0, r2
 80048d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e00e      	b.n	80048f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f986 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	e00a      	b.n	80048f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f982 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	e006      	b.n	80048f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f97e 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048f6:	e170      	b.n	8004bda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	bf00      	nop
    return;
 80048fa:	e16e      	b.n	8004bda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	2b01      	cmp	r3, #1
 8004902:	f040 814a 	bne.w	8004b9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8143 	beq.w	8004b9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 813c 	beq.w	8004b9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	f040 80b4 	bne.w	8004ab0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8140 	beq.w	8004bde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004966:	429a      	cmp	r2, r3
 8004968:	f080 8139 	bcs.w	8004bde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004972:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	f000 8088 	beq.w	8004a92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800499c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1d9      	bne.n	8004982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e1      	bne.n	80049ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3314      	adds	r3, #20
 8004a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e3      	bne.n	8004a0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a62:	f023 0310 	bic.w	r3, r3, #16
 8004a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a74:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e3      	bne.n	8004a50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fd fe2e 	bl	80026ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f8ac 	bl	8004c00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aa8:	e099      	b.n	8004bde <HAL_UART_IRQHandler+0x50e>
 8004aaa:	bf00      	nop
 8004aac:	08004d5b 	.word	0x08004d5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 808b 	beq.w	8004be2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8086 	beq.w	8004be2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004afa:	647a      	str	r2, [r7, #68]	; 0x44
 8004afc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e3      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3314      	adds	r3, #20
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3314      	adds	r3, #20
 8004b2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b32:	633a      	str	r2, [r7, #48]	; 0x30
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e3      	bne.n	8004b0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0310 	bic.w	r3, r3, #16
 8004b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b78:	61fa      	str	r2, [r7, #28]
 8004b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	69b9      	ldr	r1, [r7, #24]
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	617b      	str	r3, [r7, #20]
   return(result);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e3      	bne.n	8004b54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f834 	bl	8004c00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b98:	e023      	b.n	8004be2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_UART_IRQHandler+0x4ea>
 8004ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f8e5 	bl	8004d82 <UART_Transmit_IT>
    return;
 8004bb8:	e014      	b.n	8004be4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00e      	beq.n	8004be4 <HAL_UART_IRQHandler+0x514>
 8004bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f925 	bl	8004e22 <UART_EndTransmit_IT>
    return;
 8004bd8:	e004      	b.n	8004be4 <HAL_UART_IRQHandler+0x514>
    return;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <HAL_UART_IRQHandler+0x514>
      return;
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <HAL_UART_IRQHandler+0x514>
      return;
 8004be2:	bf00      	nop
  }
}
 8004be4:	37e8      	adds	r7, #232	; 0xe8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop

08004bec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	4613      	mov	r3, r2
 8004c24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	88fa      	ldrh	r2, [r7, #6]
 8004c30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	88fa      	ldrh	r2, [r7, #6]
 8004c36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2222      	movs	r2, #34	; 0x22
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0201 	orr.w	r2, r2, #1
 8004c74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0220 	orr.w	r2, r2, #32
 8004c84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b095      	sub	sp, #84	; 0x54
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	330c      	adds	r3, #12
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cbc:	643a      	str	r2, [r7, #64]	; 0x40
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e5      	bne.n	8004c9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3314      	adds	r3, #20
 8004cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3314      	adds	r3, #20
 8004cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e5      	bne.n	8004cd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d119      	bne.n	8004d40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330c      	adds	r3, #12
 8004d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f023 0310 	bic.w	r3, r3, #16
 8004d22:	647b      	str	r3, [r7, #68]	; 0x44
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2c:	61ba      	str	r2, [r7, #24]
 8004d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6979      	ldr	r1, [r7, #20]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e5      	bne.n	8004d0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d4e:	bf00      	nop
 8004d50:	3754      	adds	r7, #84	; 0x54
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff ff39 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b21      	cmp	r3, #33	; 0x21
 8004d94:	d13e      	bne.n	8004e14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9e:	d114      	bne.n	8004dca <UART_Transmit_IT+0x48>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d110      	bne.n	8004dca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	1c9a      	adds	r2, r3, #2
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	621a      	str	r2, [r3, #32]
 8004dc8:	e008      	b.n	8004ddc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6211      	str	r1, [r2, #32]
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	4619      	mov	r1, r3
 8004dea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10f      	bne.n	8004e10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	e000      	b.n	8004e16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e14:	2302      	movs	r3, #2
  }
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc fe18 	bl	8001a78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b08c      	sub	sp, #48	; 0x30
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b22      	cmp	r3, #34	; 0x22
 8004e64:	f040 80ab 	bne.w	8004fbe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e70:	d117      	bne.n	8004ea2 <UART_Receive_IT+0x50>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d113      	bne.n	8004ea2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	1c9a      	adds	r2, r3, #2
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004ea0:	e026      	b.n	8004ef0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb4:	d007      	beq.n	8004ec6 <UART_Receive_IT+0x74>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <UART_Receive_IT+0x82>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e008      	b.n	8004ee6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4619      	mov	r1, r3
 8004efe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d15a      	bne.n	8004fba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0220 	bic.w	r2, r2, #32
 8004f12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d135      	bne.n	8004fb0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	613b      	str	r3, [r7, #16]
   return(result);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f023 0310 	bic.w	r3, r3, #16
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	623a      	str	r2, [r7, #32]
 8004f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	69f9      	ldr	r1, [r7, #28]
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e5      	bne.n	8004f4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d10a      	bne.n	8004fa2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff fe29 	bl	8004c00 <HAL_UARTEx_RxEventCallback>
 8004fae:	e002      	b.n	8004fb6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fc fd81 	bl	8001ab8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e002      	b.n	8004fc0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e000      	b.n	8004fc0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fbe:	2302      	movs	r3, #2
  }
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3730      	adds	r7, #48	; 0x30
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fcc:	b0c0      	sub	sp, #256	; 0x100
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe4:	68d9      	ldr	r1, [r3, #12]
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	ea40 0301 	orr.w	r3, r0, r1
 8004ff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	431a      	orrs	r2, r3
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005020:	f021 010c 	bic.w	r1, r1, #12
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800502e:	430b      	orrs	r3, r1
 8005030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	6999      	ldr	r1, [r3, #24]
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	ea40 0301 	orr.w	r3, r0, r1
 800504e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4b8f      	ldr	r3, [pc, #572]	; (8005294 <UART_SetConfig+0x2cc>)
 8005058:	429a      	cmp	r2, r3
 800505a:	d005      	beq.n	8005068 <UART_SetConfig+0xa0>
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b8d      	ldr	r3, [pc, #564]	; (8005298 <UART_SetConfig+0x2d0>)
 8005064:	429a      	cmp	r2, r3
 8005066:	d104      	bne.n	8005072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005068:	f7fe fd28 	bl	8003abc <HAL_RCC_GetPCLK2Freq>
 800506c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005070:	e003      	b.n	800507a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005072:	f7fe fd0f 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8005076:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005084:	f040 810c 	bne.w	80052a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800508c:	2200      	movs	r2, #0
 800508e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005092:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800509a:	4622      	mov	r2, r4
 800509c:	462b      	mov	r3, r5
 800509e:	1891      	adds	r1, r2, r2
 80050a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80050a2:	415b      	adcs	r3, r3
 80050a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050aa:	4621      	mov	r1, r4
 80050ac:	eb12 0801 	adds.w	r8, r2, r1
 80050b0:	4629      	mov	r1, r5
 80050b2:	eb43 0901 	adc.w	r9, r3, r1
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ca:	4690      	mov	r8, r2
 80050cc:	4699      	mov	r9, r3
 80050ce:	4623      	mov	r3, r4
 80050d0:	eb18 0303 	adds.w	r3, r8, r3
 80050d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050d8:	462b      	mov	r3, r5
 80050da:	eb49 0303 	adc.w	r3, r9, r3
 80050de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050f6:	460b      	mov	r3, r1
 80050f8:	18db      	adds	r3, r3, r3
 80050fa:	653b      	str	r3, [r7, #80]	; 0x50
 80050fc:	4613      	mov	r3, r2
 80050fe:	eb42 0303 	adc.w	r3, r2, r3
 8005102:	657b      	str	r3, [r7, #84]	; 0x54
 8005104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800510c:	f7fb f8d8 	bl	80002c0 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4b61      	ldr	r3, [pc, #388]	; (800529c <UART_SetConfig+0x2d4>)
 8005116:	fba3 2302 	umull	r2, r3, r3, r2
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	011c      	lsls	r4, r3, #4
 800511e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005122:	2200      	movs	r2, #0
 8005124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005128:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800512c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005130:	4642      	mov	r2, r8
 8005132:	464b      	mov	r3, r9
 8005134:	1891      	adds	r1, r2, r2
 8005136:	64b9      	str	r1, [r7, #72]	; 0x48
 8005138:	415b      	adcs	r3, r3
 800513a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800513c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005140:	4641      	mov	r1, r8
 8005142:	eb12 0a01 	adds.w	sl, r2, r1
 8005146:	4649      	mov	r1, r9
 8005148:	eb43 0b01 	adc.w	fp, r3, r1
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800515c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005160:	4692      	mov	sl, r2
 8005162:	469b      	mov	fp, r3
 8005164:	4643      	mov	r3, r8
 8005166:	eb1a 0303 	adds.w	r3, sl, r3
 800516a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800516e:	464b      	mov	r3, r9
 8005170:	eb4b 0303 	adc.w	r3, fp, r3
 8005174:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005184:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800518c:	460b      	mov	r3, r1
 800518e:	18db      	adds	r3, r3, r3
 8005190:	643b      	str	r3, [r7, #64]	; 0x40
 8005192:	4613      	mov	r3, r2
 8005194:	eb42 0303 	adc.w	r3, r2, r3
 8005198:	647b      	str	r3, [r7, #68]	; 0x44
 800519a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800519e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051a2:	f7fb f88d 	bl	80002c0 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	4b3b      	ldr	r3, [pc, #236]	; (800529c <UART_SetConfig+0x2d4>)
 80051ae:	fba3 2301 	umull	r2, r3, r3, r1
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2264      	movs	r2, #100	; 0x64
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	1acb      	subs	r3, r1, r3
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051c2:	4b36      	ldr	r3, [pc, #216]	; (800529c <UART_SetConfig+0x2d4>)
 80051c4:	fba3 2302 	umull	r2, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051d0:	441c      	add	r4, r3
 80051d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	1891      	adds	r1, r2, r2
 80051ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80051ec:	415b      	adcs	r3, r3
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051f4:	4641      	mov	r1, r8
 80051f6:	1851      	adds	r1, r2, r1
 80051f8:	6339      	str	r1, [r7, #48]	; 0x30
 80051fa:	4649      	mov	r1, r9
 80051fc:	414b      	adcs	r3, r1
 80051fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800520c:	4659      	mov	r1, fp
 800520e:	00cb      	lsls	r3, r1, #3
 8005210:	4651      	mov	r1, sl
 8005212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005216:	4651      	mov	r1, sl
 8005218:	00ca      	lsls	r2, r1, #3
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	4603      	mov	r3, r0
 8005220:	4642      	mov	r2, r8
 8005222:	189b      	adds	r3, r3, r2
 8005224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005228:	464b      	mov	r3, r9
 800522a:	460a      	mov	r2, r1
 800522c:	eb42 0303 	adc.w	r3, r2, r3
 8005230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005240:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005248:	460b      	mov	r3, r1
 800524a:	18db      	adds	r3, r3, r3
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28
 800524e:	4613      	mov	r3, r2
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800525a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800525e:	f7fb f82f 	bl	80002c0 <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4b0d      	ldr	r3, [pc, #52]	; (800529c <UART_SetConfig+0x2d4>)
 8005268:	fba3 1302 	umull	r1, r3, r3, r2
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	2164      	movs	r1, #100	; 0x64
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	3332      	adds	r3, #50	; 0x32
 800527a:	4a08      	ldr	r2, [pc, #32]	; (800529c <UART_SetConfig+0x2d4>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	f003 0207 	and.w	r2, r3, #7
 8005286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4422      	add	r2, r4
 800528e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005290:	e105      	b.n	800549e <UART_SetConfig+0x4d6>
 8005292:	bf00      	nop
 8005294:	40011000 	.word	0x40011000
 8005298:	40011400 	.word	0x40011400
 800529c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052b2:	4642      	mov	r2, r8
 80052b4:	464b      	mov	r3, r9
 80052b6:	1891      	adds	r1, r2, r2
 80052b8:	6239      	str	r1, [r7, #32]
 80052ba:	415b      	adcs	r3, r3
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
 80052be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052c2:	4641      	mov	r1, r8
 80052c4:	1854      	adds	r4, r2, r1
 80052c6:	4649      	mov	r1, r9
 80052c8:	eb43 0501 	adc.w	r5, r3, r1
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	00eb      	lsls	r3, r5, #3
 80052d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052da:	00e2      	lsls	r2, r4, #3
 80052dc:	4614      	mov	r4, r2
 80052de:	461d      	mov	r5, r3
 80052e0:	4643      	mov	r3, r8
 80052e2:	18e3      	adds	r3, r4, r3
 80052e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052e8:	464b      	mov	r3, r9
 80052ea:	eb45 0303 	adc.w	r3, r5, r3
 80052ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800530e:	4629      	mov	r1, r5
 8005310:	008b      	lsls	r3, r1, #2
 8005312:	4621      	mov	r1, r4
 8005314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005318:	4621      	mov	r1, r4
 800531a:	008a      	lsls	r2, r1, #2
 800531c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005320:	f7fa ffce 	bl	80002c0 <__aeabi_uldivmod>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4b60      	ldr	r3, [pc, #384]	; (80054ac <UART_SetConfig+0x4e4>)
 800532a:	fba3 2302 	umull	r2, r3, r3, r2
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	011c      	lsls	r4, r3, #4
 8005332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005336:	2200      	movs	r2, #0
 8005338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800533c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005344:	4642      	mov	r2, r8
 8005346:	464b      	mov	r3, r9
 8005348:	1891      	adds	r1, r2, r2
 800534a:	61b9      	str	r1, [r7, #24]
 800534c:	415b      	adcs	r3, r3
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005354:	4641      	mov	r1, r8
 8005356:	1851      	adds	r1, r2, r1
 8005358:	6139      	str	r1, [r7, #16]
 800535a:	4649      	mov	r1, r9
 800535c:	414b      	adcs	r3, r1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800536c:	4659      	mov	r1, fp
 800536e:	00cb      	lsls	r3, r1, #3
 8005370:	4651      	mov	r1, sl
 8005372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005376:	4651      	mov	r1, sl
 8005378:	00ca      	lsls	r2, r1, #3
 800537a:	4610      	mov	r0, r2
 800537c:	4619      	mov	r1, r3
 800537e:	4603      	mov	r3, r0
 8005380:	4642      	mov	r2, r8
 8005382:	189b      	adds	r3, r3, r2
 8005384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005388:	464b      	mov	r3, r9
 800538a:	460a      	mov	r2, r1
 800538c:	eb42 0303 	adc.w	r3, r2, r3
 8005390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	67bb      	str	r3, [r7, #120]	; 0x78
 800539e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053ac:	4649      	mov	r1, r9
 80053ae:	008b      	lsls	r3, r1, #2
 80053b0:	4641      	mov	r1, r8
 80053b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b6:	4641      	mov	r1, r8
 80053b8:	008a      	lsls	r2, r1, #2
 80053ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053be:	f7fa ff7f 	bl	80002c0 <__aeabi_uldivmod>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4b39      	ldr	r3, [pc, #228]	; (80054ac <UART_SetConfig+0x4e4>)
 80053c8:	fba3 1302 	umull	r1, r3, r3, r2
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	2164      	movs	r1, #100	; 0x64
 80053d0:	fb01 f303 	mul.w	r3, r1, r3
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	3332      	adds	r3, #50	; 0x32
 80053da:	4a34      	ldr	r2, [pc, #208]	; (80054ac <UART_SetConfig+0x4e4>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e6:	441c      	add	r4, r3
 80053e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ec:	2200      	movs	r2, #0
 80053ee:	673b      	str	r3, [r7, #112]	; 0x70
 80053f0:	677a      	str	r2, [r7, #116]	; 0x74
 80053f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053f6:	4642      	mov	r2, r8
 80053f8:	464b      	mov	r3, r9
 80053fa:	1891      	adds	r1, r2, r2
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	415b      	adcs	r3, r3
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005406:	4641      	mov	r1, r8
 8005408:	1851      	adds	r1, r2, r1
 800540a:	6039      	str	r1, [r7, #0]
 800540c:	4649      	mov	r1, r9
 800540e:	414b      	adcs	r3, r1
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800541e:	4659      	mov	r1, fp
 8005420:	00cb      	lsls	r3, r1, #3
 8005422:	4651      	mov	r1, sl
 8005424:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005428:	4651      	mov	r1, sl
 800542a:	00ca      	lsls	r2, r1, #3
 800542c:	4610      	mov	r0, r2
 800542e:	4619      	mov	r1, r3
 8005430:	4603      	mov	r3, r0
 8005432:	4642      	mov	r2, r8
 8005434:	189b      	adds	r3, r3, r2
 8005436:	66bb      	str	r3, [r7, #104]	; 0x68
 8005438:	464b      	mov	r3, r9
 800543a:	460a      	mov	r2, r1
 800543c:	eb42 0303 	adc.w	r3, r2, r3
 8005440:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	663b      	str	r3, [r7, #96]	; 0x60
 800544c:	667a      	str	r2, [r7, #100]	; 0x64
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800545a:	4649      	mov	r1, r9
 800545c:	008b      	lsls	r3, r1, #2
 800545e:	4641      	mov	r1, r8
 8005460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005464:	4641      	mov	r1, r8
 8005466:	008a      	lsls	r2, r1, #2
 8005468:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800546c:	f7fa ff28 	bl	80002c0 <__aeabi_uldivmod>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <UART_SetConfig+0x4e4>)
 8005476:	fba3 1302 	umull	r1, r3, r3, r2
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	2164      	movs	r1, #100	; 0x64
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	3332      	adds	r3, #50	; 0x32
 8005488:	4a08      	ldr	r2, [pc, #32]	; (80054ac <UART_SetConfig+0x4e4>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	f003 020f 	and.w	r2, r3, #15
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4422      	add	r2, r4
 800549c:	609a      	str	r2, [r3, #8]
}
 800549e:	bf00      	nop
 80054a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054a4:	46bd      	mov	sp, r7
 80054a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054aa:	bf00      	nop
 80054ac:	51eb851f 	.word	0x51eb851f

080054b0 <__errno>:
 80054b0:	4b01      	ldr	r3, [pc, #4]	; (80054b8 <__errno+0x8>)
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20000030 	.word	0x20000030

080054bc <__libc_init_array>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	4d0d      	ldr	r5, [pc, #52]	; (80054f4 <__libc_init_array+0x38>)
 80054c0:	4c0d      	ldr	r4, [pc, #52]	; (80054f8 <__libc_init_array+0x3c>)
 80054c2:	1b64      	subs	r4, r4, r5
 80054c4:	10a4      	asrs	r4, r4, #2
 80054c6:	2600      	movs	r6, #0
 80054c8:	42a6      	cmp	r6, r4
 80054ca:	d109      	bne.n	80054e0 <__libc_init_array+0x24>
 80054cc:	4d0b      	ldr	r5, [pc, #44]	; (80054fc <__libc_init_array+0x40>)
 80054ce:	4c0c      	ldr	r4, [pc, #48]	; (8005500 <__libc_init_array+0x44>)
 80054d0:	f000 fd1a 	bl	8005f08 <_init>
 80054d4:	1b64      	subs	r4, r4, r5
 80054d6:	10a4      	asrs	r4, r4, #2
 80054d8:	2600      	movs	r6, #0
 80054da:	42a6      	cmp	r6, r4
 80054dc:	d105      	bne.n	80054ea <__libc_init_array+0x2e>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e4:	4798      	blx	r3
 80054e6:	3601      	adds	r6, #1
 80054e8:	e7ee      	b.n	80054c8 <__libc_init_array+0xc>
 80054ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ee:	4798      	blx	r3
 80054f0:	3601      	adds	r6, #1
 80054f2:	e7f2      	b.n	80054da <__libc_init_array+0x1e>
 80054f4:	080062dc 	.word	0x080062dc
 80054f8:	080062dc 	.word	0x080062dc
 80054fc:	080062dc 	.word	0x080062dc
 8005500:	080062e0 	.word	0x080062e0

08005504 <malloc>:
 8005504:	4b02      	ldr	r3, [pc, #8]	; (8005510 <malloc+0xc>)
 8005506:	4601      	mov	r1, r0
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	f000 b877 	b.w	80055fc <_malloc_r>
 800550e:	bf00      	nop
 8005510:	20000030 	.word	0x20000030

08005514 <memset>:
 8005514:	4402      	add	r2, r0
 8005516:	4603      	mov	r3, r0
 8005518:	4293      	cmp	r3, r2
 800551a:	d100      	bne.n	800551e <memset+0xa>
 800551c:	4770      	bx	lr
 800551e:	f803 1b01 	strb.w	r1, [r3], #1
 8005522:	e7f9      	b.n	8005518 <memset+0x4>

08005524 <_free_r>:
 8005524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005526:	2900      	cmp	r1, #0
 8005528:	d044      	beq.n	80055b4 <_free_r+0x90>
 800552a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800552e:	9001      	str	r0, [sp, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f1a1 0404 	sub.w	r4, r1, #4
 8005536:	bfb8      	it	lt
 8005538:	18e4      	addlt	r4, r4, r3
 800553a:	f000 f987 	bl	800584c <__malloc_lock>
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <_free_r+0x94>)
 8005540:	9801      	ldr	r0, [sp, #4]
 8005542:	6813      	ldr	r3, [r2, #0]
 8005544:	b933      	cbnz	r3, 8005554 <_free_r+0x30>
 8005546:	6063      	str	r3, [r4, #4]
 8005548:	6014      	str	r4, [r2, #0]
 800554a:	b003      	add	sp, #12
 800554c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005550:	f000 b982 	b.w	8005858 <__malloc_unlock>
 8005554:	42a3      	cmp	r3, r4
 8005556:	d908      	bls.n	800556a <_free_r+0x46>
 8005558:	6825      	ldr	r5, [r4, #0]
 800555a:	1961      	adds	r1, r4, r5
 800555c:	428b      	cmp	r3, r1
 800555e:	bf01      	itttt	eq
 8005560:	6819      	ldreq	r1, [r3, #0]
 8005562:	685b      	ldreq	r3, [r3, #4]
 8005564:	1949      	addeq	r1, r1, r5
 8005566:	6021      	streq	r1, [r4, #0]
 8005568:	e7ed      	b.n	8005546 <_free_r+0x22>
 800556a:	461a      	mov	r2, r3
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	b10b      	cbz	r3, 8005574 <_free_r+0x50>
 8005570:	42a3      	cmp	r3, r4
 8005572:	d9fa      	bls.n	800556a <_free_r+0x46>
 8005574:	6811      	ldr	r1, [r2, #0]
 8005576:	1855      	adds	r5, r2, r1
 8005578:	42a5      	cmp	r5, r4
 800557a:	d10b      	bne.n	8005594 <_free_r+0x70>
 800557c:	6824      	ldr	r4, [r4, #0]
 800557e:	4421      	add	r1, r4
 8005580:	1854      	adds	r4, r2, r1
 8005582:	42a3      	cmp	r3, r4
 8005584:	6011      	str	r1, [r2, #0]
 8005586:	d1e0      	bne.n	800554a <_free_r+0x26>
 8005588:	681c      	ldr	r4, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	6053      	str	r3, [r2, #4]
 800558e:	4421      	add	r1, r4
 8005590:	6011      	str	r1, [r2, #0]
 8005592:	e7da      	b.n	800554a <_free_r+0x26>
 8005594:	d902      	bls.n	800559c <_free_r+0x78>
 8005596:	230c      	movs	r3, #12
 8005598:	6003      	str	r3, [r0, #0]
 800559a:	e7d6      	b.n	800554a <_free_r+0x26>
 800559c:	6825      	ldr	r5, [r4, #0]
 800559e:	1961      	adds	r1, r4, r5
 80055a0:	428b      	cmp	r3, r1
 80055a2:	bf04      	itt	eq
 80055a4:	6819      	ldreq	r1, [r3, #0]
 80055a6:	685b      	ldreq	r3, [r3, #4]
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	bf04      	itt	eq
 80055ac:	1949      	addeq	r1, r1, r5
 80055ae:	6021      	streq	r1, [r4, #0]
 80055b0:	6054      	str	r4, [r2, #4]
 80055b2:	e7ca      	b.n	800554a <_free_r+0x26>
 80055b4:	b003      	add	sp, #12
 80055b6:	bd30      	pop	{r4, r5, pc}
 80055b8:	20000458 	.word	0x20000458

080055bc <sbrk_aligned>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	4e0e      	ldr	r6, [pc, #56]	; (80055f8 <sbrk_aligned+0x3c>)
 80055c0:	460c      	mov	r4, r1
 80055c2:	6831      	ldr	r1, [r6, #0]
 80055c4:	4605      	mov	r5, r0
 80055c6:	b911      	cbnz	r1, 80055ce <sbrk_aligned+0x12>
 80055c8:	f000 f88c 	bl	80056e4 <_sbrk_r>
 80055cc:	6030      	str	r0, [r6, #0]
 80055ce:	4621      	mov	r1, r4
 80055d0:	4628      	mov	r0, r5
 80055d2:	f000 f887 	bl	80056e4 <_sbrk_r>
 80055d6:	1c43      	adds	r3, r0, #1
 80055d8:	d00a      	beq.n	80055f0 <sbrk_aligned+0x34>
 80055da:	1cc4      	adds	r4, r0, #3
 80055dc:	f024 0403 	bic.w	r4, r4, #3
 80055e0:	42a0      	cmp	r0, r4
 80055e2:	d007      	beq.n	80055f4 <sbrk_aligned+0x38>
 80055e4:	1a21      	subs	r1, r4, r0
 80055e6:	4628      	mov	r0, r5
 80055e8:	f000 f87c 	bl	80056e4 <_sbrk_r>
 80055ec:	3001      	adds	r0, #1
 80055ee:	d101      	bne.n	80055f4 <sbrk_aligned+0x38>
 80055f0:	f04f 34ff 	mov.w	r4, #4294967295
 80055f4:	4620      	mov	r0, r4
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	2000045c 	.word	0x2000045c

080055fc <_malloc_r>:
 80055fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005600:	1ccd      	adds	r5, r1, #3
 8005602:	f025 0503 	bic.w	r5, r5, #3
 8005606:	3508      	adds	r5, #8
 8005608:	2d0c      	cmp	r5, #12
 800560a:	bf38      	it	cc
 800560c:	250c      	movcc	r5, #12
 800560e:	2d00      	cmp	r5, #0
 8005610:	4607      	mov	r7, r0
 8005612:	db01      	blt.n	8005618 <_malloc_r+0x1c>
 8005614:	42a9      	cmp	r1, r5
 8005616:	d905      	bls.n	8005624 <_malloc_r+0x28>
 8005618:	230c      	movs	r3, #12
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	2600      	movs	r6, #0
 800561e:	4630      	mov	r0, r6
 8005620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005624:	4e2e      	ldr	r6, [pc, #184]	; (80056e0 <_malloc_r+0xe4>)
 8005626:	f000 f911 	bl	800584c <__malloc_lock>
 800562a:	6833      	ldr	r3, [r6, #0]
 800562c:	461c      	mov	r4, r3
 800562e:	bb34      	cbnz	r4, 800567e <_malloc_r+0x82>
 8005630:	4629      	mov	r1, r5
 8005632:	4638      	mov	r0, r7
 8005634:	f7ff ffc2 	bl	80055bc <sbrk_aligned>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	4604      	mov	r4, r0
 800563c:	d14d      	bne.n	80056da <_malloc_r+0xde>
 800563e:	6834      	ldr	r4, [r6, #0]
 8005640:	4626      	mov	r6, r4
 8005642:	2e00      	cmp	r6, #0
 8005644:	d140      	bne.n	80056c8 <_malloc_r+0xcc>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	4631      	mov	r1, r6
 800564a:	4638      	mov	r0, r7
 800564c:	eb04 0803 	add.w	r8, r4, r3
 8005650:	f000 f848 	bl	80056e4 <_sbrk_r>
 8005654:	4580      	cmp	r8, r0
 8005656:	d13a      	bne.n	80056ce <_malloc_r+0xd2>
 8005658:	6821      	ldr	r1, [r4, #0]
 800565a:	3503      	adds	r5, #3
 800565c:	1a6d      	subs	r5, r5, r1
 800565e:	f025 0503 	bic.w	r5, r5, #3
 8005662:	3508      	adds	r5, #8
 8005664:	2d0c      	cmp	r5, #12
 8005666:	bf38      	it	cc
 8005668:	250c      	movcc	r5, #12
 800566a:	4629      	mov	r1, r5
 800566c:	4638      	mov	r0, r7
 800566e:	f7ff ffa5 	bl	80055bc <sbrk_aligned>
 8005672:	3001      	adds	r0, #1
 8005674:	d02b      	beq.n	80056ce <_malloc_r+0xd2>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	442b      	add	r3, r5
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	e00e      	b.n	800569c <_malloc_r+0xa0>
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	1b52      	subs	r2, r2, r5
 8005682:	d41e      	bmi.n	80056c2 <_malloc_r+0xc6>
 8005684:	2a0b      	cmp	r2, #11
 8005686:	d916      	bls.n	80056b6 <_malloc_r+0xba>
 8005688:	1961      	adds	r1, r4, r5
 800568a:	42a3      	cmp	r3, r4
 800568c:	6025      	str	r5, [r4, #0]
 800568e:	bf18      	it	ne
 8005690:	6059      	strne	r1, [r3, #4]
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	bf08      	it	eq
 8005696:	6031      	streq	r1, [r6, #0]
 8005698:	5162      	str	r2, [r4, r5]
 800569a:	604b      	str	r3, [r1, #4]
 800569c:	4638      	mov	r0, r7
 800569e:	f104 060b 	add.w	r6, r4, #11
 80056a2:	f000 f8d9 	bl	8005858 <__malloc_unlock>
 80056a6:	f026 0607 	bic.w	r6, r6, #7
 80056aa:	1d23      	adds	r3, r4, #4
 80056ac:	1af2      	subs	r2, r6, r3
 80056ae:	d0b6      	beq.n	800561e <_malloc_r+0x22>
 80056b0:	1b9b      	subs	r3, r3, r6
 80056b2:	50a3      	str	r3, [r4, r2]
 80056b4:	e7b3      	b.n	800561e <_malloc_r+0x22>
 80056b6:	6862      	ldr	r2, [r4, #4]
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	bf0c      	ite	eq
 80056bc:	6032      	streq	r2, [r6, #0]
 80056be:	605a      	strne	r2, [r3, #4]
 80056c0:	e7ec      	b.n	800569c <_malloc_r+0xa0>
 80056c2:	4623      	mov	r3, r4
 80056c4:	6864      	ldr	r4, [r4, #4]
 80056c6:	e7b2      	b.n	800562e <_malloc_r+0x32>
 80056c8:	4634      	mov	r4, r6
 80056ca:	6876      	ldr	r6, [r6, #4]
 80056cc:	e7b9      	b.n	8005642 <_malloc_r+0x46>
 80056ce:	230c      	movs	r3, #12
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	4638      	mov	r0, r7
 80056d4:	f000 f8c0 	bl	8005858 <__malloc_unlock>
 80056d8:	e7a1      	b.n	800561e <_malloc_r+0x22>
 80056da:	6025      	str	r5, [r4, #0]
 80056dc:	e7de      	b.n	800569c <_malloc_r+0xa0>
 80056de:	bf00      	nop
 80056e0:	20000458 	.word	0x20000458

080056e4 <_sbrk_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d06      	ldr	r5, [pc, #24]	; (8005700 <_sbrk_r+0x1c>)
 80056e8:	2300      	movs	r3, #0
 80056ea:	4604      	mov	r4, r0
 80056ec:	4608      	mov	r0, r1
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	f7fc f8f2 	bl	80018d8 <_sbrk>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_sbrk_r+0x1a>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_sbrk_r+0x1a>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	20000460 	.word	0x20000460

08005704 <siprintf>:
 8005704:	b40e      	push	{r1, r2, r3}
 8005706:	b500      	push	{lr}
 8005708:	b09c      	sub	sp, #112	; 0x70
 800570a:	ab1d      	add	r3, sp, #116	; 0x74
 800570c:	9002      	str	r0, [sp, #8]
 800570e:	9006      	str	r0, [sp, #24]
 8005710:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005714:	4809      	ldr	r0, [pc, #36]	; (800573c <siprintf+0x38>)
 8005716:	9107      	str	r1, [sp, #28]
 8005718:	9104      	str	r1, [sp, #16]
 800571a:	4909      	ldr	r1, [pc, #36]	; (8005740 <siprintf+0x3c>)
 800571c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005720:	9105      	str	r1, [sp, #20]
 8005722:	6800      	ldr	r0, [r0, #0]
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	a902      	add	r1, sp, #8
 8005728:	f000 f8f8 	bl	800591c <_svfiprintf_r>
 800572c:	9b02      	ldr	r3, [sp, #8]
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	b01c      	add	sp, #112	; 0x70
 8005734:	f85d eb04 	ldr.w	lr, [sp], #4
 8005738:	b003      	add	sp, #12
 800573a:	4770      	bx	lr
 800573c:	20000030 	.word	0x20000030
 8005740:	ffff0208 	.word	0xffff0208

08005744 <strcpy>:
 8005744:	4603      	mov	r3, r0
 8005746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800574a:	f803 2b01 	strb.w	r2, [r3], #1
 800574e:	2a00      	cmp	r2, #0
 8005750:	d1f9      	bne.n	8005746 <strcpy+0x2>
 8005752:	4770      	bx	lr

08005754 <_strtoul_l.constprop.0>:
 8005754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005758:	4f36      	ldr	r7, [pc, #216]	; (8005834 <_strtoul_l.constprop.0+0xe0>)
 800575a:	4686      	mov	lr, r0
 800575c:	460d      	mov	r5, r1
 800575e:	4628      	mov	r0, r5
 8005760:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005764:	5de6      	ldrb	r6, [r4, r7]
 8005766:	f016 0608 	ands.w	r6, r6, #8
 800576a:	d1f8      	bne.n	800575e <_strtoul_l.constprop.0+0xa>
 800576c:	2c2d      	cmp	r4, #45	; 0x2d
 800576e:	d12f      	bne.n	80057d0 <_strtoul_l.constprop.0+0x7c>
 8005770:	782c      	ldrb	r4, [r5, #0]
 8005772:	2601      	movs	r6, #1
 8005774:	1c85      	adds	r5, r0, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d057      	beq.n	800582a <_strtoul_l.constprop.0+0xd6>
 800577a:	2b10      	cmp	r3, #16
 800577c:	d109      	bne.n	8005792 <_strtoul_l.constprop.0+0x3e>
 800577e:	2c30      	cmp	r4, #48	; 0x30
 8005780:	d107      	bne.n	8005792 <_strtoul_l.constprop.0+0x3e>
 8005782:	7828      	ldrb	r0, [r5, #0]
 8005784:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005788:	2858      	cmp	r0, #88	; 0x58
 800578a:	d149      	bne.n	8005820 <_strtoul_l.constprop.0+0xcc>
 800578c:	786c      	ldrb	r4, [r5, #1]
 800578e:	2310      	movs	r3, #16
 8005790:	3502      	adds	r5, #2
 8005792:	f04f 38ff 	mov.w	r8, #4294967295
 8005796:	2700      	movs	r7, #0
 8005798:	fbb8 f8f3 	udiv	r8, r8, r3
 800579c:	fb03 f908 	mul.w	r9, r3, r8
 80057a0:	ea6f 0909 	mvn.w	r9, r9
 80057a4:	4638      	mov	r0, r7
 80057a6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80057aa:	f1bc 0f09 	cmp.w	ip, #9
 80057ae:	d814      	bhi.n	80057da <_strtoul_l.constprop.0+0x86>
 80057b0:	4664      	mov	r4, ip
 80057b2:	42a3      	cmp	r3, r4
 80057b4:	dd22      	ble.n	80057fc <_strtoul_l.constprop.0+0xa8>
 80057b6:	2f00      	cmp	r7, #0
 80057b8:	db1d      	blt.n	80057f6 <_strtoul_l.constprop.0+0xa2>
 80057ba:	4580      	cmp	r8, r0
 80057bc:	d31b      	bcc.n	80057f6 <_strtoul_l.constprop.0+0xa2>
 80057be:	d101      	bne.n	80057c4 <_strtoul_l.constprop.0+0x70>
 80057c0:	45a1      	cmp	r9, r4
 80057c2:	db18      	blt.n	80057f6 <_strtoul_l.constprop.0+0xa2>
 80057c4:	fb00 4003 	mla	r0, r0, r3, r4
 80057c8:	2701      	movs	r7, #1
 80057ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057ce:	e7ea      	b.n	80057a6 <_strtoul_l.constprop.0+0x52>
 80057d0:	2c2b      	cmp	r4, #43	; 0x2b
 80057d2:	bf04      	itt	eq
 80057d4:	782c      	ldrbeq	r4, [r5, #0]
 80057d6:	1c85      	addeq	r5, r0, #2
 80057d8:	e7cd      	b.n	8005776 <_strtoul_l.constprop.0+0x22>
 80057da:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80057de:	f1bc 0f19 	cmp.w	ip, #25
 80057e2:	d801      	bhi.n	80057e8 <_strtoul_l.constprop.0+0x94>
 80057e4:	3c37      	subs	r4, #55	; 0x37
 80057e6:	e7e4      	b.n	80057b2 <_strtoul_l.constprop.0+0x5e>
 80057e8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80057ec:	f1bc 0f19 	cmp.w	ip, #25
 80057f0:	d804      	bhi.n	80057fc <_strtoul_l.constprop.0+0xa8>
 80057f2:	3c57      	subs	r4, #87	; 0x57
 80057f4:	e7dd      	b.n	80057b2 <_strtoul_l.constprop.0+0x5e>
 80057f6:	f04f 37ff 	mov.w	r7, #4294967295
 80057fa:	e7e6      	b.n	80057ca <_strtoul_l.constprop.0+0x76>
 80057fc:	2f00      	cmp	r7, #0
 80057fe:	da07      	bge.n	8005810 <_strtoul_l.constprop.0+0xbc>
 8005800:	2322      	movs	r3, #34	; 0x22
 8005802:	f8ce 3000 	str.w	r3, [lr]
 8005806:	f04f 30ff 	mov.w	r0, #4294967295
 800580a:	b932      	cbnz	r2, 800581a <_strtoul_l.constprop.0+0xc6>
 800580c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005810:	b106      	cbz	r6, 8005814 <_strtoul_l.constprop.0+0xc0>
 8005812:	4240      	negs	r0, r0
 8005814:	2a00      	cmp	r2, #0
 8005816:	d0f9      	beq.n	800580c <_strtoul_l.constprop.0+0xb8>
 8005818:	b107      	cbz	r7, 800581c <_strtoul_l.constprop.0+0xc8>
 800581a:	1e69      	subs	r1, r5, #1
 800581c:	6011      	str	r1, [r2, #0]
 800581e:	e7f5      	b.n	800580c <_strtoul_l.constprop.0+0xb8>
 8005820:	2430      	movs	r4, #48	; 0x30
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1b5      	bne.n	8005792 <_strtoul_l.constprop.0+0x3e>
 8005826:	2308      	movs	r3, #8
 8005828:	e7b3      	b.n	8005792 <_strtoul_l.constprop.0+0x3e>
 800582a:	2c30      	cmp	r4, #48	; 0x30
 800582c:	d0a9      	beq.n	8005782 <_strtoul_l.constprop.0+0x2e>
 800582e:	230a      	movs	r3, #10
 8005830:	e7af      	b.n	8005792 <_strtoul_l.constprop.0+0x3e>
 8005832:	bf00      	nop
 8005834:	080061a1 	.word	0x080061a1

08005838 <strtoul>:
 8005838:	4613      	mov	r3, r2
 800583a:	460a      	mov	r2, r1
 800583c:	4601      	mov	r1, r0
 800583e:	4802      	ldr	r0, [pc, #8]	; (8005848 <strtoul+0x10>)
 8005840:	6800      	ldr	r0, [r0, #0]
 8005842:	f7ff bf87 	b.w	8005754 <_strtoul_l.constprop.0>
 8005846:	bf00      	nop
 8005848:	20000030 	.word	0x20000030

0800584c <__malloc_lock>:
 800584c:	4801      	ldr	r0, [pc, #4]	; (8005854 <__malloc_lock+0x8>)
 800584e:	f000 baf9 	b.w	8005e44 <__retarget_lock_acquire_recursive>
 8005852:	bf00      	nop
 8005854:	20000464 	.word	0x20000464

08005858 <__malloc_unlock>:
 8005858:	4801      	ldr	r0, [pc, #4]	; (8005860 <__malloc_unlock+0x8>)
 800585a:	f000 baf4 	b.w	8005e46 <__retarget_lock_release_recursive>
 800585e:	bf00      	nop
 8005860:	20000464 	.word	0x20000464

08005864 <__ssputs_r>:
 8005864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	688e      	ldr	r6, [r1, #8]
 800586a:	429e      	cmp	r6, r3
 800586c:	4682      	mov	sl, r0
 800586e:	460c      	mov	r4, r1
 8005870:	4690      	mov	r8, r2
 8005872:	461f      	mov	r7, r3
 8005874:	d838      	bhi.n	80058e8 <__ssputs_r+0x84>
 8005876:	898a      	ldrh	r2, [r1, #12]
 8005878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800587c:	d032      	beq.n	80058e4 <__ssputs_r+0x80>
 800587e:	6825      	ldr	r5, [r4, #0]
 8005880:	6909      	ldr	r1, [r1, #16]
 8005882:	eba5 0901 	sub.w	r9, r5, r1
 8005886:	6965      	ldr	r5, [r4, #20]
 8005888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800588c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005890:	3301      	adds	r3, #1
 8005892:	444b      	add	r3, r9
 8005894:	106d      	asrs	r5, r5, #1
 8005896:	429d      	cmp	r5, r3
 8005898:	bf38      	it	cc
 800589a:	461d      	movcc	r5, r3
 800589c:	0553      	lsls	r3, r2, #21
 800589e:	d531      	bpl.n	8005904 <__ssputs_r+0xa0>
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7ff feab 	bl	80055fc <_malloc_r>
 80058a6:	4606      	mov	r6, r0
 80058a8:	b950      	cbnz	r0, 80058c0 <__ssputs_r+0x5c>
 80058aa:	230c      	movs	r3, #12
 80058ac:	f8ca 3000 	str.w	r3, [sl]
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b6:	81a3      	strh	r3, [r4, #12]
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295
 80058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c0:	6921      	ldr	r1, [r4, #16]
 80058c2:	464a      	mov	r2, r9
 80058c4:	f000 fac0 	bl	8005e48 <memcpy>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	6126      	str	r6, [r4, #16]
 80058d6:	6165      	str	r5, [r4, #20]
 80058d8:	444e      	add	r6, r9
 80058da:	eba5 0509 	sub.w	r5, r5, r9
 80058de:	6026      	str	r6, [r4, #0]
 80058e0:	60a5      	str	r5, [r4, #8]
 80058e2:	463e      	mov	r6, r7
 80058e4:	42be      	cmp	r6, r7
 80058e6:	d900      	bls.n	80058ea <__ssputs_r+0x86>
 80058e8:	463e      	mov	r6, r7
 80058ea:	6820      	ldr	r0, [r4, #0]
 80058ec:	4632      	mov	r2, r6
 80058ee:	4641      	mov	r1, r8
 80058f0:	f000 fab8 	bl	8005e64 <memmove>
 80058f4:	68a3      	ldr	r3, [r4, #8]
 80058f6:	1b9b      	subs	r3, r3, r6
 80058f8:	60a3      	str	r3, [r4, #8]
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	4433      	add	r3, r6
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	2000      	movs	r0, #0
 8005902:	e7db      	b.n	80058bc <__ssputs_r+0x58>
 8005904:	462a      	mov	r2, r5
 8005906:	f000 fac7 	bl	8005e98 <_realloc_r>
 800590a:	4606      	mov	r6, r0
 800590c:	2800      	cmp	r0, #0
 800590e:	d1e1      	bne.n	80058d4 <__ssputs_r+0x70>
 8005910:	6921      	ldr	r1, [r4, #16]
 8005912:	4650      	mov	r0, sl
 8005914:	f7ff fe06 	bl	8005524 <_free_r>
 8005918:	e7c7      	b.n	80058aa <__ssputs_r+0x46>
	...

0800591c <_svfiprintf_r>:
 800591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005920:	4698      	mov	r8, r3
 8005922:	898b      	ldrh	r3, [r1, #12]
 8005924:	061b      	lsls	r3, r3, #24
 8005926:	b09d      	sub	sp, #116	; 0x74
 8005928:	4607      	mov	r7, r0
 800592a:	460d      	mov	r5, r1
 800592c:	4614      	mov	r4, r2
 800592e:	d50e      	bpl.n	800594e <_svfiprintf_r+0x32>
 8005930:	690b      	ldr	r3, [r1, #16]
 8005932:	b963      	cbnz	r3, 800594e <_svfiprintf_r+0x32>
 8005934:	2140      	movs	r1, #64	; 0x40
 8005936:	f7ff fe61 	bl	80055fc <_malloc_r>
 800593a:	6028      	str	r0, [r5, #0]
 800593c:	6128      	str	r0, [r5, #16]
 800593e:	b920      	cbnz	r0, 800594a <_svfiprintf_r+0x2e>
 8005940:	230c      	movs	r3, #12
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	e0d1      	b.n	8005aee <_svfiprintf_r+0x1d2>
 800594a:	2340      	movs	r3, #64	; 0x40
 800594c:	616b      	str	r3, [r5, #20]
 800594e:	2300      	movs	r3, #0
 8005950:	9309      	str	r3, [sp, #36]	; 0x24
 8005952:	2320      	movs	r3, #32
 8005954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005958:	f8cd 800c 	str.w	r8, [sp, #12]
 800595c:	2330      	movs	r3, #48	; 0x30
 800595e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b08 <_svfiprintf_r+0x1ec>
 8005962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005966:	f04f 0901 	mov.w	r9, #1
 800596a:	4623      	mov	r3, r4
 800596c:	469a      	mov	sl, r3
 800596e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005972:	b10a      	cbz	r2, 8005978 <_svfiprintf_r+0x5c>
 8005974:	2a25      	cmp	r2, #37	; 0x25
 8005976:	d1f9      	bne.n	800596c <_svfiprintf_r+0x50>
 8005978:	ebba 0b04 	subs.w	fp, sl, r4
 800597c:	d00b      	beq.n	8005996 <_svfiprintf_r+0x7a>
 800597e:	465b      	mov	r3, fp
 8005980:	4622      	mov	r2, r4
 8005982:	4629      	mov	r1, r5
 8005984:	4638      	mov	r0, r7
 8005986:	f7ff ff6d 	bl	8005864 <__ssputs_r>
 800598a:	3001      	adds	r0, #1
 800598c:	f000 80aa 	beq.w	8005ae4 <_svfiprintf_r+0x1c8>
 8005990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005992:	445a      	add	r2, fp
 8005994:	9209      	str	r2, [sp, #36]	; 0x24
 8005996:	f89a 3000 	ldrb.w	r3, [sl]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 80a2 	beq.w	8005ae4 <_svfiprintf_r+0x1c8>
 80059a0:	2300      	movs	r3, #0
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295
 80059a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059aa:	f10a 0a01 	add.w	sl, sl, #1
 80059ae:	9304      	str	r3, [sp, #16]
 80059b0:	9307      	str	r3, [sp, #28]
 80059b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059b6:	931a      	str	r3, [sp, #104]	; 0x68
 80059b8:	4654      	mov	r4, sl
 80059ba:	2205      	movs	r2, #5
 80059bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c0:	4851      	ldr	r0, [pc, #324]	; (8005b08 <_svfiprintf_r+0x1ec>)
 80059c2:	f7fa fc2d 	bl	8000220 <memchr>
 80059c6:	9a04      	ldr	r2, [sp, #16]
 80059c8:	b9d8      	cbnz	r0, 8005a02 <_svfiprintf_r+0xe6>
 80059ca:	06d0      	lsls	r0, r2, #27
 80059cc:	bf44      	itt	mi
 80059ce:	2320      	movmi	r3, #32
 80059d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d4:	0711      	lsls	r1, r2, #28
 80059d6:	bf44      	itt	mi
 80059d8:	232b      	movmi	r3, #43	; 0x2b
 80059da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059de:	f89a 3000 	ldrb.w	r3, [sl]
 80059e2:	2b2a      	cmp	r3, #42	; 0x2a
 80059e4:	d015      	beq.n	8005a12 <_svfiprintf_r+0xf6>
 80059e6:	9a07      	ldr	r2, [sp, #28]
 80059e8:	4654      	mov	r4, sl
 80059ea:	2000      	movs	r0, #0
 80059ec:	f04f 0c0a 	mov.w	ip, #10
 80059f0:	4621      	mov	r1, r4
 80059f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f6:	3b30      	subs	r3, #48	; 0x30
 80059f8:	2b09      	cmp	r3, #9
 80059fa:	d94e      	bls.n	8005a9a <_svfiprintf_r+0x17e>
 80059fc:	b1b0      	cbz	r0, 8005a2c <_svfiprintf_r+0x110>
 80059fe:	9207      	str	r2, [sp, #28]
 8005a00:	e014      	b.n	8005a2c <_svfiprintf_r+0x110>
 8005a02:	eba0 0308 	sub.w	r3, r0, r8
 8005a06:	fa09 f303 	lsl.w	r3, r9, r3
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	46a2      	mov	sl, r4
 8005a10:	e7d2      	b.n	80059b8 <_svfiprintf_r+0x9c>
 8005a12:	9b03      	ldr	r3, [sp, #12]
 8005a14:	1d19      	adds	r1, r3, #4
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	9103      	str	r1, [sp, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bfbb      	ittet	lt
 8005a1e:	425b      	neglt	r3, r3
 8005a20:	f042 0202 	orrlt.w	r2, r2, #2
 8005a24:	9307      	strge	r3, [sp, #28]
 8005a26:	9307      	strlt	r3, [sp, #28]
 8005a28:	bfb8      	it	lt
 8005a2a:	9204      	strlt	r2, [sp, #16]
 8005a2c:	7823      	ldrb	r3, [r4, #0]
 8005a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a30:	d10c      	bne.n	8005a4c <_svfiprintf_r+0x130>
 8005a32:	7863      	ldrb	r3, [r4, #1]
 8005a34:	2b2a      	cmp	r3, #42	; 0x2a
 8005a36:	d135      	bne.n	8005aa4 <_svfiprintf_r+0x188>
 8005a38:	9b03      	ldr	r3, [sp, #12]
 8005a3a:	1d1a      	adds	r2, r3, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	9203      	str	r2, [sp, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bfb8      	it	lt
 8005a44:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a48:	3402      	adds	r4, #2
 8005a4a:	9305      	str	r3, [sp, #20]
 8005a4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b18 <_svfiprintf_r+0x1fc>
 8005a50:	7821      	ldrb	r1, [r4, #0]
 8005a52:	2203      	movs	r2, #3
 8005a54:	4650      	mov	r0, sl
 8005a56:	f7fa fbe3 	bl	8000220 <memchr>
 8005a5a:	b140      	cbz	r0, 8005a6e <_svfiprintf_r+0x152>
 8005a5c:	2340      	movs	r3, #64	; 0x40
 8005a5e:	eba0 000a 	sub.w	r0, r0, sl
 8005a62:	fa03 f000 	lsl.w	r0, r3, r0
 8005a66:	9b04      	ldr	r3, [sp, #16]
 8005a68:	4303      	orrs	r3, r0
 8005a6a:	3401      	adds	r4, #1
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a72:	4826      	ldr	r0, [pc, #152]	; (8005b0c <_svfiprintf_r+0x1f0>)
 8005a74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a78:	2206      	movs	r2, #6
 8005a7a:	f7fa fbd1 	bl	8000220 <memchr>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d038      	beq.n	8005af4 <_svfiprintf_r+0x1d8>
 8005a82:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <_svfiprintf_r+0x1f4>)
 8005a84:	bb1b      	cbnz	r3, 8005ace <_svfiprintf_r+0x1b2>
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	3307      	adds	r3, #7
 8005a8a:	f023 0307 	bic.w	r3, r3, #7
 8005a8e:	3308      	adds	r3, #8
 8005a90:	9303      	str	r3, [sp, #12]
 8005a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a94:	4433      	add	r3, r6
 8005a96:	9309      	str	r3, [sp, #36]	; 0x24
 8005a98:	e767      	b.n	800596a <_svfiprintf_r+0x4e>
 8005a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	e7a5      	b.n	80059f0 <_svfiprintf_r+0xd4>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	3401      	adds	r4, #1
 8005aa8:	9305      	str	r3, [sp, #20]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f04f 0c0a 	mov.w	ip, #10
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ab6:	3a30      	subs	r2, #48	; 0x30
 8005ab8:	2a09      	cmp	r2, #9
 8005aba:	d903      	bls.n	8005ac4 <_svfiprintf_r+0x1a8>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0c5      	beq.n	8005a4c <_svfiprintf_r+0x130>
 8005ac0:	9105      	str	r1, [sp, #20]
 8005ac2:	e7c3      	b.n	8005a4c <_svfiprintf_r+0x130>
 8005ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ac8:	4604      	mov	r4, r0
 8005aca:	2301      	movs	r3, #1
 8005acc:	e7f0      	b.n	8005ab0 <_svfiprintf_r+0x194>
 8005ace:	ab03      	add	r3, sp, #12
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <_svfiprintf_r+0x1f8>)
 8005ad6:	a904      	add	r1, sp, #16
 8005ad8:	4638      	mov	r0, r7
 8005ada:	f3af 8000 	nop.w
 8005ade:	1c42      	adds	r2, r0, #1
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	d1d6      	bne.n	8005a92 <_svfiprintf_r+0x176>
 8005ae4:	89ab      	ldrh	r3, [r5, #12]
 8005ae6:	065b      	lsls	r3, r3, #25
 8005ae8:	f53f af2c 	bmi.w	8005944 <_svfiprintf_r+0x28>
 8005aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aee:	b01d      	add	sp, #116	; 0x74
 8005af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	ab03      	add	r3, sp, #12
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	462a      	mov	r2, r5
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <_svfiprintf_r+0x1f8>)
 8005afc:	a904      	add	r1, sp, #16
 8005afe:	4638      	mov	r0, r7
 8005b00:	f000 f87a 	bl	8005bf8 <_printf_i>
 8005b04:	e7eb      	b.n	8005ade <_svfiprintf_r+0x1c2>
 8005b06:	bf00      	nop
 8005b08:	080062a1 	.word	0x080062a1
 8005b0c:	080062ab 	.word	0x080062ab
 8005b10:	00000000 	.word	0x00000000
 8005b14:	08005865 	.word	0x08005865
 8005b18:	080062a7 	.word	0x080062a7

08005b1c <_printf_common>:
 8005b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	4616      	mov	r6, r2
 8005b22:	4699      	mov	r9, r3
 8005b24:	688a      	ldr	r2, [r1, #8]
 8005b26:	690b      	ldr	r3, [r1, #16]
 8005b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	bfb8      	it	lt
 8005b30:	4613      	movlt	r3, r2
 8005b32:	6033      	str	r3, [r6, #0]
 8005b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b38:	4607      	mov	r7, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	b10a      	cbz	r2, 8005b42 <_printf_common+0x26>
 8005b3e:	3301      	adds	r3, #1
 8005b40:	6033      	str	r3, [r6, #0]
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	0699      	lsls	r1, r3, #26
 8005b46:	bf42      	ittt	mi
 8005b48:	6833      	ldrmi	r3, [r6, #0]
 8005b4a:	3302      	addmi	r3, #2
 8005b4c:	6033      	strmi	r3, [r6, #0]
 8005b4e:	6825      	ldr	r5, [r4, #0]
 8005b50:	f015 0506 	ands.w	r5, r5, #6
 8005b54:	d106      	bne.n	8005b64 <_printf_common+0x48>
 8005b56:	f104 0a19 	add.w	sl, r4, #25
 8005b5a:	68e3      	ldr	r3, [r4, #12]
 8005b5c:	6832      	ldr	r2, [r6, #0]
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	42ab      	cmp	r3, r5
 8005b62:	dc26      	bgt.n	8005bb2 <_printf_common+0x96>
 8005b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b68:	1e13      	subs	r3, r2, #0
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	bf18      	it	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	0692      	lsls	r2, r2, #26
 8005b72:	d42b      	bmi.n	8005bcc <_printf_common+0xb0>
 8005b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b78:	4649      	mov	r1, r9
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	47c0      	blx	r8
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d01e      	beq.n	8005bc0 <_printf_common+0xa4>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	68e5      	ldr	r5, [r4, #12]
 8005b86:	6832      	ldr	r2, [r6, #0]
 8005b88:	f003 0306 	and.w	r3, r3, #6
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	bf08      	it	eq
 8005b90:	1aad      	subeq	r5, r5, r2
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	6922      	ldr	r2, [r4, #16]
 8005b96:	bf0c      	ite	eq
 8005b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b9c:	2500      	movne	r5, #0
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	bfc4      	itt	gt
 8005ba2:	1a9b      	subgt	r3, r3, r2
 8005ba4:	18ed      	addgt	r5, r5, r3
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	341a      	adds	r4, #26
 8005baa:	42b5      	cmp	r5, r6
 8005bac:	d11a      	bne.n	8005be4 <_printf_common+0xc8>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e008      	b.n	8005bc4 <_printf_common+0xa8>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4652      	mov	r2, sl
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	4638      	mov	r0, r7
 8005bba:	47c0      	blx	r8
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d103      	bne.n	8005bc8 <_printf_common+0xac>
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc8:	3501      	adds	r5, #1
 8005bca:	e7c6      	b.n	8005b5a <_printf_common+0x3e>
 8005bcc:	18e1      	adds	r1, r4, r3
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	2030      	movs	r0, #48	; 0x30
 8005bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bd6:	4422      	add	r2, r4
 8005bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005be0:	3302      	adds	r3, #2
 8005be2:	e7c7      	b.n	8005b74 <_printf_common+0x58>
 8005be4:	2301      	movs	r3, #1
 8005be6:	4622      	mov	r2, r4
 8005be8:	4649      	mov	r1, r9
 8005bea:	4638      	mov	r0, r7
 8005bec:	47c0      	blx	r8
 8005bee:	3001      	adds	r0, #1
 8005bf0:	d0e6      	beq.n	8005bc0 <_printf_common+0xa4>
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7d9      	b.n	8005baa <_printf_common+0x8e>
	...

08005bf8 <_printf_i>:
 8005bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	7e0f      	ldrb	r7, [r1, #24]
 8005bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c00:	2f78      	cmp	r7, #120	; 0x78
 8005c02:	4691      	mov	r9, r2
 8005c04:	4680      	mov	r8, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	469a      	mov	sl, r3
 8005c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c0e:	d807      	bhi.n	8005c20 <_printf_i+0x28>
 8005c10:	2f62      	cmp	r7, #98	; 0x62
 8005c12:	d80a      	bhi.n	8005c2a <_printf_i+0x32>
 8005c14:	2f00      	cmp	r7, #0
 8005c16:	f000 80d8 	beq.w	8005dca <_printf_i+0x1d2>
 8005c1a:	2f58      	cmp	r7, #88	; 0x58
 8005c1c:	f000 80a3 	beq.w	8005d66 <_printf_i+0x16e>
 8005c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c28:	e03a      	b.n	8005ca0 <_printf_i+0xa8>
 8005c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c2e:	2b15      	cmp	r3, #21
 8005c30:	d8f6      	bhi.n	8005c20 <_printf_i+0x28>
 8005c32:	a101      	add	r1, pc, #4	; (adr r1, 8005c38 <_printf_i+0x40>)
 8005c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c38:	08005c91 	.word	0x08005c91
 8005c3c:	08005ca5 	.word	0x08005ca5
 8005c40:	08005c21 	.word	0x08005c21
 8005c44:	08005c21 	.word	0x08005c21
 8005c48:	08005c21 	.word	0x08005c21
 8005c4c:	08005c21 	.word	0x08005c21
 8005c50:	08005ca5 	.word	0x08005ca5
 8005c54:	08005c21 	.word	0x08005c21
 8005c58:	08005c21 	.word	0x08005c21
 8005c5c:	08005c21 	.word	0x08005c21
 8005c60:	08005c21 	.word	0x08005c21
 8005c64:	08005db1 	.word	0x08005db1
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005d93 	.word	0x08005d93
 8005c70:	08005c21 	.word	0x08005c21
 8005c74:	08005c21 	.word	0x08005c21
 8005c78:	08005dd3 	.word	0x08005dd3
 8005c7c:	08005c21 	.word	0x08005c21
 8005c80:	08005cd5 	.word	0x08005cd5
 8005c84:	08005c21 	.word	0x08005c21
 8005c88:	08005c21 	.word	0x08005c21
 8005c8c:	08005d9b 	.word	0x08005d9b
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	1d1a      	adds	r2, r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	602a      	str	r2, [r5, #0]
 8005c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0a3      	b.n	8005dec <_printf_i+0x1f4>
 8005ca4:	6820      	ldr	r0, [r4, #0]
 8005ca6:	6829      	ldr	r1, [r5, #0]
 8005ca8:	0606      	lsls	r6, r0, #24
 8005caa:	f101 0304 	add.w	r3, r1, #4
 8005cae:	d50a      	bpl.n	8005cc6 <_printf_i+0xce>
 8005cb0:	680e      	ldr	r6, [r1, #0]
 8005cb2:	602b      	str	r3, [r5, #0]
 8005cb4:	2e00      	cmp	r6, #0
 8005cb6:	da03      	bge.n	8005cc0 <_printf_i+0xc8>
 8005cb8:	232d      	movs	r3, #45	; 0x2d
 8005cba:	4276      	negs	r6, r6
 8005cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc0:	485e      	ldr	r0, [pc, #376]	; (8005e3c <_printf_i+0x244>)
 8005cc2:	230a      	movs	r3, #10
 8005cc4:	e019      	b.n	8005cfa <_printf_i+0x102>
 8005cc6:	680e      	ldr	r6, [r1, #0]
 8005cc8:	602b      	str	r3, [r5, #0]
 8005cca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cce:	bf18      	it	ne
 8005cd0:	b236      	sxthne	r6, r6
 8005cd2:	e7ef      	b.n	8005cb4 <_printf_i+0xbc>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	6820      	ldr	r0, [r4, #0]
 8005cd8:	1d19      	adds	r1, r3, #4
 8005cda:	6029      	str	r1, [r5, #0]
 8005cdc:	0601      	lsls	r1, r0, #24
 8005cde:	d501      	bpl.n	8005ce4 <_printf_i+0xec>
 8005ce0:	681e      	ldr	r6, [r3, #0]
 8005ce2:	e002      	b.n	8005cea <_printf_i+0xf2>
 8005ce4:	0646      	lsls	r6, r0, #25
 8005ce6:	d5fb      	bpl.n	8005ce0 <_printf_i+0xe8>
 8005ce8:	881e      	ldrh	r6, [r3, #0]
 8005cea:	4854      	ldr	r0, [pc, #336]	; (8005e3c <_printf_i+0x244>)
 8005cec:	2f6f      	cmp	r7, #111	; 0x6f
 8005cee:	bf0c      	ite	eq
 8005cf0:	2308      	moveq	r3, #8
 8005cf2:	230a      	movne	r3, #10
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cfa:	6865      	ldr	r5, [r4, #4]
 8005cfc:	60a5      	str	r5, [r4, #8]
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	bfa2      	ittt	ge
 8005d02:	6821      	ldrge	r1, [r4, #0]
 8005d04:	f021 0104 	bicge.w	r1, r1, #4
 8005d08:	6021      	strge	r1, [r4, #0]
 8005d0a:	b90e      	cbnz	r6, 8005d10 <_printf_i+0x118>
 8005d0c:	2d00      	cmp	r5, #0
 8005d0e:	d04d      	beq.n	8005dac <_printf_i+0x1b4>
 8005d10:	4615      	mov	r5, r2
 8005d12:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d16:	fb03 6711 	mls	r7, r3, r1, r6
 8005d1a:	5dc7      	ldrb	r7, [r0, r7]
 8005d1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d20:	4637      	mov	r7, r6
 8005d22:	42bb      	cmp	r3, r7
 8005d24:	460e      	mov	r6, r1
 8005d26:	d9f4      	bls.n	8005d12 <_printf_i+0x11a>
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d10b      	bne.n	8005d44 <_printf_i+0x14c>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	07de      	lsls	r6, r3, #31
 8005d30:	d508      	bpl.n	8005d44 <_printf_i+0x14c>
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	6861      	ldr	r1, [r4, #4]
 8005d36:	4299      	cmp	r1, r3
 8005d38:	bfde      	ittt	le
 8005d3a:	2330      	movle	r3, #48	; 0x30
 8005d3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d44:	1b52      	subs	r2, r2, r5
 8005d46:	6122      	str	r2, [r4, #16]
 8005d48:	f8cd a000 	str.w	sl, [sp]
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	aa03      	add	r2, sp, #12
 8005d50:	4621      	mov	r1, r4
 8005d52:	4640      	mov	r0, r8
 8005d54:	f7ff fee2 	bl	8005b1c <_printf_common>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d14c      	bne.n	8005df6 <_printf_i+0x1fe>
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d60:	b004      	add	sp, #16
 8005d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d66:	4835      	ldr	r0, [pc, #212]	; (8005e3c <_printf_i+0x244>)
 8005d68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d6c:	6829      	ldr	r1, [r5, #0]
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d74:	6029      	str	r1, [r5, #0]
 8005d76:	061d      	lsls	r5, r3, #24
 8005d78:	d514      	bpl.n	8005da4 <_printf_i+0x1ac>
 8005d7a:	07df      	lsls	r7, r3, #31
 8005d7c:	bf44      	itt	mi
 8005d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d82:	6023      	strmi	r3, [r4, #0]
 8005d84:	b91e      	cbnz	r6, 8005d8e <_printf_i+0x196>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	f023 0320 	bic.w	r3, r3, #32
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	2310      	movs	r3, #16
 8005d90:	e7b0      	b.n	8005cf4 <_printf_i+0xfc>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	f043 0320 	orr.w	r3, r3, #32
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	2378      	movs	r3, #120	; 0x78
 8005d9c:	4828      	ldr	r0, [pc, #160]	; (8005e40 <_printf_i+0x248>)
 8005d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005da2:	e7e3      	b.n	8005d6c <_printf_i+0x174>
 8005da4:	0659      	lsls	r1, r3, #25
 8005da6:	bf48      	it	mi
 8005da8:	b2b6      	uxthmi	r6, r6
 8005daa:	e7e6      	b.n	8005d7a <_printf_i+0x182>
 8005dac:	4615      	mov	r5, r2
 8005dae:	e7bb      	b.n	8005d28 <_printf_i+0x130>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	6826      	ldr	r6, [r4, #0]
 8005db4:	6961      	ldr	r1, [r4, #20]
 8005db6:	1d18      	adds	r0, r3, #4
 8005db8:	6028      	str	r0, [r5, #0]
 8005dba:	0635      	lsls	r5, r6, #24
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	d501      	bpl.n	8005dc4 <_printf_i+0x1cc>
 8005dc0:	6019      	str	r1, [r3, #0]
 8005dc2:	e002      	b.n	8005dca <_printf_i+0x1d2>
 8005dc4:	0670      	lsls	r0, r6, #25
 8005dc6:	d5fb      	bpl.n	8005dc0 <_printf_i+0x1c8>
 8005dc8:	8019      	strh	r1, [r3, #0]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	4615      	mov	r5, r2
 8005dd0:	e7ba      	b.n	8005d48 <_printf_i+0x150>
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	1d1a      	adds	r2, r3, #4
 8005dd6:	602a      	str	r2, [r5, #0]
 8005dd8:	681d      	ldr	r5, [r3, #0]
 8005dda:	6862      	ldr	r2, [r4, #4]
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4628      	mov	r0, r5
 8005de0:	f7fa fa1e 	bl	8000220 <memchr>
 8005de4:	b108      	cbz	r0, 8005dea <_printf_i+0x1f2>
 8005de6:	1b40      	subs	r0, r0, r5
 8005de8:	6060      	str	r0, [r4, #4]
 8005dea:	6863      	ldr	r3, [r4, #4]
 8005dec:	6123      	str	r3, [r4, #16]
 8005dee:	2300      	movs	r3, #0
 8005df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df4:	e7a8      	b.n	8005d48 <_printf_i+0x150>
 8005df6:	6923      	ldr	r3, [r4, #16]
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	47d0      	blx	sl
 8005e00:	3001      	adds	r0, #1
 8005e02:	d0ab      	beq.n	8005d5c <_printf_i+0x164>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	079b      	lsls	r3, r3, #30
 8005e08:	d413      	bmi.n	8005e32 <_printf_i+0x23a>
 8005e0a:	68e0      	ldr	r0, [r4, #12]
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	4298      	cmp	r0, r3
 8005e10:	bfb8      	it	lt
 8005e12:	4618      	movlt	r0, r3
 8005e14:	e7a4      	b.n	8005d60 <_printf_i+0x168>
 8005e16:	2301      	movs	r3, #1
 8005e18:	4632      	mov	r2, r6
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	47d0      	blx	sl
 8005e20:	3001      	adds	r0, #1
 8005e22:	d09b      	beq.n	8005d5c <_printf_i+0x164>
 8005e24:	3501      	adds	r5, #1
 8005e26:	68e3      	ldr	r3, [r4, #12]
 8005e28:	9903      	ldr	r1, [sp, #12]
 8005e2a:	1a5b      	subs	r3, r3, r1
 8005e2c:	42ab      	cmp	r3, r5
 8005e2e:	dcf2      	bgt.n	8005e16 <_printf_i+0x21e>
 8005e30:	e7eb      	b.n	8005e0a <_printf_i+0x212>
 8005e32:	2500      	movs	r5, #0
 8005e34:	f104 0619 	add.w	r6, r4, #25
 8005e38:	e7f5      	b.n	8005e26 <_printf_i+0x22e>
 8005e3a:	bf00      	nop
 8005e3c:	080062b2 	.word	0x080062b2
 8005e40:	080062c3 	.word	0x080062c3

08005e44 <__retarget_lock_acquire_recursive>:
 8005e44:	4770      	bx	lr

08005e46 <__retarget_lock_release_recursive>:
 8005e46:	4770      	bx	lr

08005e48 <memcpy>:
 8005e48:	440a      	add	r2, r1
 8005e4a:	4291      	cmp	r1, r2
 8005e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e50:	d100      	bne.n	8005e54 <memcpy+0xc>
 8005e52:	4770      	bx	lr
 8005e54:	b510      	push	{r4, lr}
 8005e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e5e:	4291      	cmp	r1, r2
 8005e60:	d1f9      	bne.n	8005e56 <memcpy+0xe>
 8005e62:	bd10      	pop	{r4, pc}

08005e64 <memmove>:
 8005e64:	4288      	cmp	r0, r1
 8005e66:	b510      	push	{r4, lr}
 8005e68:	eb01 0402 	add.w	r4, r1, r2
 8005e6c:	d902      	bls.n	8005e74 <memmove+0x10>
 8005e6e:	4284      	cmp	r4, r0
 8005e70:	4623      	mov	r3, r4
 8005e72:	d807      	bhi.n	8005e84 <memmove+0x20>
 8005e74:	1e43      	subs	r3, r0, #1
 8005e76:	42a1      	cmp	r1, r4
 8005e78:	d008      	beq.n	8005e8c <memmove+0x28>
 8005e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e82:	e7f8      	b.n	8005e76 <memmove+0x12>
 8005e84:	4402      	add	r2, r0
 8005e86:	4601      	mov	r1, r0
 8005e88:	428a      	cmp	r2, r1
 8005e8a:	d100      	bne.n	8005e8e <memmove+0x2a>
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e96:	e7f7      	b.n	8005e88 <memmove+0x24>

08005e98 <_realloc_r>:
 8005e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	4614      	mov	r4, r2
 8005ea0:	460e      	mov	r6, r1
 8005ea2:	b921      	cbnz	r1, 8005eae <_realloc_r+0x16>
 8005ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	f7ff bba7 	b.w	80055fc <_malloc_r>
 8005eae:	b92a      	cbnz	r2, 8005ebc <_realloc_r+0x24>
 8005eb0:	f7ff fb38 	bl	8005524 <_free_r>
 8005eb4:	4625      	mov	r5, r4
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ebc:	f000 f81b 	bl	8005ef6 <_malloc_usable_size_r>
 8005ec0:	4284      	cmp	r4, r0
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	d802      	bhi.n	8005ecc <_realloc_r+0x34>
 8005ec6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005eca:	d812      	bhi.n	8005ef2 <_realloc_r+0x5a>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4640      	mov	r0, r8
 8005ed0:	f7ff fb94 	bl	80055fc <_malloc_r>
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d0ed      	beq.n	8005eb6 <_realloc_r+0x1e>
 8005eda:	42bc      	cmp	r4, r7
 8005edc:	4622      	mov	r2, r4
 8005ede:	4631      	mov	r1, r6
 8005ee0:	bf28      	it	cs
 8005ee2:	463a      	movcs	r2, r7
 8005ee4:	f7ff ffb0 	bl	8005e48 <memcpy>
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4640      	mov	r0, r8
 8005eec:	f7ff fb1a 	bl	8005524 <_free_r>
 8005ef0:	e7e1      	b.n	8005eb6 <_realloc_r+0x1e>
 8005ef2:	4635      	mov	r5, r6
 8005ef4:	e7df      	b.n	8005eb6 <_realloc_r+0x1e>

08005ef6 <_malloc_usable_size_r>:
 8005ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005efa:	1f18      	subs	r0, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bfbc      	itt	lt
 8005f00:	580b      	ldrlt	r3, [r1, r0]
 8005f02:	18c0      	addlt	r0, r0, r3
 8005f04:	4770      	bx	lr
	...

08005f08 <_init>:
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	bf00      	nop
 8005f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0e:	bc08      	pop	{r3}
 8005f10:	469e      	mov	lr, r3
 8005f12:	4770      	bx	lr

08005f14 <_fini>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	bf00      	nop
 8005f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1a:	bc08      	pop	{r3}
 8005f1c:	469e      	mov	lr, r3
 8005f1e:	4770      	bx	lr
