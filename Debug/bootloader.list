
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002390  08011fb8  08011fb8  00021fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014348  08014348  00030108  2**0
                  CONTENTS
  4 .ARM          00000008  08014348  08014348  00024348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014350  08014350  00030108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014350  08014350  00024350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014354  08014354  00024354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08014358  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030108  2**0
                  CONTENTS
 10 .bss          00007050  20000108  20000108  00030108  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20007158  20007158  00030108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025f35  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000712c  00000000  00000000  0005606d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d60  00000000  00000000  0005d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b10  00000000  00000000  0005ef00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032047  00000000  00000000  00060a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031fbc  00000000  00000000  00092a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0aa2  00000000  00000000  000c4a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b54b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d38  00000000  00000000  001b5508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000108 	.word	0x20000108
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011fa0 	.word	0x08011fa0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	08011fa0 	.word	0x08011fa0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <isBootRequired>:
uint32_t firstBootFlagAddress2 = CONFIG_2_ADDRESS + 4;
uint32_t notValidFlagAddress2 = CONFIG_2_ADDRESS + 8;
uint32_t versionAddress2 = CONFIG_2_ADDRESS + 12;
uint32_t notCorrectUpdateFlagAddress2 = CONFIG_2_ADDRESS + 16;

uint8_t isBootRequired() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	if (FlashReadWord(bootFlagAddress) == 0) return 1;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <isBootRequired+0x20>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f9fc 	bl	80009ca <FlashReadWord>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d101      	bne.n	80005dc <isBootRequired+0x18>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <isBootRequired+0x1a>
	else return 0;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000060 	.word	0x20000060

080005e8 <getVersions>:

static char versionBuf[128];
char* getVersions() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint32_t ver1 = FlashReadWord(versionAddress1);
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <getVersions+0x74>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f9e9 	bl	80009ca <FlashReadWord>
 80005f8:	6078      	str	r0, [r7, #4]
	uint32_t ver2 = FlashReadWord(versionAddress2);
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <getVersions+0x78>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f9e3 	bl	80009ca <FlashReadWord>
 8000604:	6038      	str	r0, [r7, #0]
	if (ver1 == EMPTY && ver2 == EMPTY) {
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060c:	d105      	bne.n	800061a <getVersions+0x32>
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000614:	d101      	bne.n	800061a <getVersions+0x32>
		return "No applications in flash\n";
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <getVersions+0x7c>)
 8000618:	e01c      	b.n	8000654 <getVersions+0x6c>
	} else if (ver1 == EMPTY) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000620:	d106      	bne.n	8000630 <getVersions+0x48>
		sprintf(versionBuf, "App 1 version: none\nApp 2 version: %"PRIu32"\n", ver2);
 8000622:	683a      	ldr	r2, [r7, #0]
 8000624:	4910      	ldr	r1, [pc, #64]	; (8000668 <getVersions+0x80>)
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <getVersions+0x84>)
 8000628:	f010 fbe2 	bl	8010df0 <siprintf>
		return versionBuf;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <getVersions+0x84>)
 800062e:	e011      	b.n	8000654 <getVersions+0x6c>
	} else if (ver2 == EMPTY) {
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000636:	d106      	bne.n	8000646 <getVersions+0x5e>
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: none\n", ver1);
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <getVersions+0x88>)
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <getVersions+0x84>)
 800063e:	f010 fbd7 	bl	8010df0 <siprintf>
		return versionBuf;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <getVersions+0x84>)
 8000644:	e006      	b.n	8000654 <getVersions+0x6c>
	} else {
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: %"PRIu32"\n", ver1, ver2);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	490a      	ldr	r1, [pc, #40]	; (8000674 <getVersions+0x8c>)
 800064c:	4807      	ldr	r0, [pc, #28]	; (800066c <getVersions+0x84>)
 800064e:	f010 fbcf 	bl	8010df0 <siprintf>
		return versionBuf;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <getVersions+0x84>)
	}
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000070 	.word	0x20000070
 8000660:	20000084 	.word	0x20000084
 8000664:	08011fb8 	.word	0x08011fb8
 8000668:	08011fd4 	.word	0x08011fd4
 800066c:	20000124 	.word	0x20000124
 8000670:	08011ffc 	.word	0x08011ffc
 8000674:	08012024 	.word	0x08012024

08000678 <getLatestApplicationAddress>:

uint32_t getLatestApplicationAddress() {
 8000678:	b598      	push	{r3, r4, r7, lr}
 800067a:	af00      	add	r7, sp, #0
	if (FlashReadWord(seqAddress1) < FlashReadWord(seqAddress2)) {
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <getLatestApplicationAddress+0x4c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f9a2 	bl	80009ca <FlashReadWord>
 8000686:	4604      	mov	r4, r0
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <getLatestApplicationAddress+0x50>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f99c 	bl	80009ca <FlashReadWord>
 8000692:	4603      	mov	r3, r0
 8000694:	429c      	cmp	r4, r3
 8000696:	d201      	bcs.n	800069c <getLatestApplicationAddress+0x24>
		return APP_1_ADDRESS;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <getLatestApplicationAddress+0x54>)
 800069a:	e010      	b.n	80006be <getLatestApplicationAddress+0x46>
	} else if (FlashReadWord(seqAddress2) < FlashReadWord(seqAddress1)) {
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <getLatestApplicationAddress+0x50>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f992 	bl	80009ca <FlashReadWord>
 80006a6:	4604      	mov	r4, r0
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <getLatestApplicationAddress+0x4c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f98c 	bl	80009ca <FlashReadWord>
 80006b2:	4603      	mov	r3, r0
 80006b4:	429c      	cmp	r4, r3
 80006b6:	d201      	bcs.n	80006bc <getLatestApplicationAddress+0x44>
		return APP_2_ADDRESS;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <getLatestApplicationAddress+0x58>)
 80006ba:	e000      	b.n	80006be <getLatestApplicationAddress+0x46>
	} else {
		return 0;
 80006bc:	2300      	movs	r3, #0
	}
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd98      	pop	{r3, r4, r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000064 	.word	0x20000064
 80006c8:	20000078 	.word	0x20000078
 80006cc:	08020000 	.word	0x08020000
 80006d0:	08110000 	.word	0x08110000

080006d4 <updateConfig>:

void updateConfig() {
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 80006da:	f7ff ffcd 	bl	8000678 <getLatestApplicationAddress>
 80006de:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_1_ADDRESS) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a14      	ldr	r2, [pc, #80]	; (8000734 <updateConfig+0x60>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d110      	bne.n	800070a <updateConfig+0x36>
		EraseSector(CONFIG_2_SECTOR);
 80006e8:	200f      	movs	r0, #15
 80006ea:	f000 f97b 	bl	80009e4 <EraseSector>
		FlashWriteWord(seqAddress2, FlashReadWord(seqAddress1) - 1);
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <updateConfig+0x64>)
 80006f0:	681c      	ldr	r4, [r3, #0]
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <updateConfig+0x68>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f967 	bl	80009ca <FlashReadWord>
 80006fc:	4603      	mov	r3, r0
 80006fe:	3b01      	subs	r3, #1
 8000700:	4619      	mov	r1, r3
 8000702:	4620      	mov	r0, r4
 8000704:	f000 f942 	bl	800098c <FlashWriteWord>
		EraseSector(CONFIG_1_SECTOR);
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
		//FlashWriteWord(firstBootFlagAddress1, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress1, 0xFFFF); // FFFF - not valid (default)
	}
}
 8000708:	e00f      	b.n	800072a <updateConfig+0x56>
		EraseSector(CONFIG_1_SECTOR);
 800070a:	200e      	movs	r0, #14
 800070c:	f000 f96a 	bl	80009e4 <EraseSector>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <updateConfig+0x68>)
 8000712:	681c      	ldr	r4, [r3, #0]
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <updateConfig+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f956 	bl	80009ca <FlashReadWord>
 800071e:	4603      	mov	r3, r0
 8000720:	3b01      	subs	r3, #1
 8000722:	4619      	mov	r1, r3
 8000724:	4620      	mov	r0, r4
 8000726:	f000 f931 	bl	800098c <FlashWriteWord>
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bd90      	pop	{r4, r7, pc}
 8000732:	bf00      	nop
 8000734:	08020000 	.word	0x08020000
 8000738:	20000078 	.word	0x20000078
 800073c:	20000064 	.word	0x20000064

08000740 <setAppVersion>:

void setAppVersion(uint32_t version) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	uint32_t latestAppAddress = getLatestApplicationAddress();
 8000748:	f7ff ff96 	bl	8000678 <getLatestApplicationAddress>
 800074c:	60f8      	str	r0, [r7, #12]
		if (latestAppAddress == APP_1_ADDRESS) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <setAppVersion+0x38>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d106      	bne.n	8000764 <setAppVersion+0x24>
			FlashWriteWord(versionAddress1, version);
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <setAppVersion+0x3c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f915 	bl	800098c <FlashWriteWord>
		} else {
			FlashWriteWord(versionAddress2, version);
		}
}
 8000762:	e005      	b.n	8000770 <setAppVersion+0x30>
			FlashWriteWord(versionAddress2, version);
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <setAppVersion+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f90e 	bl	800098c <FlashWriteWord>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08020000 	.word	0x08020000
 800077c:	20000070 	.word	0x20000070
 8000780:	20000084 	.word	0x20000084

08000784 <setCorrectUpdateFlag>:

void setCorrectUpdateFlag() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 800078a:	f7ff ff75 	bl	8000678 <getLatestApplicationAddress>
 800078e:	6078      	str	r0, [r7, #4]
		if (latestAppAddress == APP_1_ADDRESS) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <setCorrectUpdateFlag+0x38>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d106      	bne.n	80007a6 <setCorrectUpdateFlag+0x22>
			FlashWriteWord(notCorrectUpdateFlagAddress1, 0);
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <setCorrectUpdateFlag+0x3c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f8f4 	bl	800098c <FlashWriteWord>
		} else {
			FlashWriteWord(notCorrectUpdateFlagAddress2, 0);
		}
}
 80007a4:	e005      	b.n	80007b2 <setCorrectUpdateFlag+0x2e>
			FlashWriteWord(notCorrectUpdateFlagAddress2, 0);
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <setCorrectUpdateFlag+0x40>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f8ed 	bl	800098c <FlashWriteWord>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	08020000 	.word	0x08020000
 80007c0:	20000074 	.word	0x20000074
 80007c4:	20000088 	.word	0x20000088

080007c8 <validateApplications>:

void validateApplications() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
	uint32_t nValid1 = FlashReadWord(notValidFlagAddress1);
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <validateApplications+0x8c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f8f9 	bl	80009ca <FlashReadWord>
 80007d8:	6178      	str	r0, [r7, #20]
	uint32_t firstBoot1 = FlashReadWord(firstBootFlagAddress1);
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <validateApplications+0x90>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f8f3 	bl	80009ca <FlashReadWord>
 80007e4:	6138      	str	r0, [r7, #16]
	uint32_t nCorrect1 = FlashReadWord(notCorrectUpdateFlagAddress1);
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <validateApplications+0x94>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f8ed 	bl	80009ca <FlashReadWord>
 80007f0:	60f8      	str	r0, [r7, #12]
	uint32_t nValid2 = FlashReadWord(notValidFlagAddress2);
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <validateApplications+0x98>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f8e7 	bl	80009ca <FlashReadWord>
 80007fc:	60b8      	str	r0, [r7, #8]
	uint32_t firstBoot2 = FlashReadWord(firstBootFlagAddress2);
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <validateApplications+0x9c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f8e1 	bl	80009ca <FlashReadWord>
 8000808:	6078      	str	r0, [r7, #4]
	uint32_t nCorrect2 = FlashReadWord(notCorrectUpdateFlagAddress2);
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <validateApplications+0xa0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f8db 	bl	80009ca <FlashReadWord>
 8000814:	6038      	str	r0, [r7, #0]
	if ((nValid1 == EMPTY && firstBoot1 == 0) || nCorrect1 != 0)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800081c:	d102      	bne.n	8000824 <validateApplications+0x5c>
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <validateApplications+0x62>
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <validateApplications+0x68>
		EraseSector(CONFIG_1_SECTOR);
 800082a:	200e      	movs	r0, #14
 800082c:	f000 f8da 	bl	80009e4 <EraseSector>
	if ((nValid2 == EMPTY && firstBoot2 == 0) || nCorrect2 != 0)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000836:	d102      	bne.n	800083e <validateApplications+0x76>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <validateApplications+0x7c>
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <validateApplications+0x82>
		EraseSector(CONFIG_2_SECTOR);
 8000844:	200f      	movs	r0, #15
 8000846:	f000 f8cd 	bl	80009e4 <EraseSector>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000006c 	.word	0x2000006c
 8000858:	20000068 	.word	0x20000068
 800085c:	20000074 	.word	0x20000074
 8000860:	20000080 	.word	0x20000080
 8000864:	2000007c 	.word	0x2000007c
 8000868:	20000088 	.word	0x20000088

0800086c <EraseNecessarySectors>:


void EraseNecessarySectors(uint32_t address, uint8_t* sector) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	if (address == sectorAddresses[*sector]) {
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <EraseNecessarySectors+0x3c>)
 800087e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	d10a      	bne.n	800089e <EraseNecessarySectors+0x32>
		EraseSector(*sector);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f8a9 	bl	80009e4 <EraseSector>
		(*sector)++;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3301      	adds	r3, #1
 8000898:	b2da      	uxtb	r2, r3
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	701a      	strb	r2, [r3, #0]
	}
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000000 	.word	0x20000000

080008ac <jumpToApp>:

void jumpToApp() {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
	  uint32_t address = getLatestApplicationAddress();
 80008b2:	f7ff fee1 	bl	8000678 <getLatestApplicationAddress>
 80008b6:	6178      	str	r0, [r7, #20]
	  if (address == APP_1_ADDRESS)
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	4a2d      	ldr	r2, [pc, #180]	; (8000970 <jumpToApp+0xc4>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d106      	bne.n	80008ce <jumpToApp+0x22>
		  FlashWriteWord(firstBootFlagAddress1, 0);
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <jumpToApp+0xc8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f860 	bl	800098c <FlashWriteWord>
 80008cc:	e009      	b.n	80008e2 <jumpToApp+0x36>
	  else if (address == APP_2_ADDRESS)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	4a29      	ldr	r2, [pc, #164]	; (8000978 <jumpToApp+0xcc>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d105      	bne.n	80008e2 <jumpToApp+0x36>
		  FlashWriteWord(firstBootFlagAddress2, 0);
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <jumpToApp+0xd0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f855 	bl	800098c <FlashWriteWord>

	  void(*app_reset_handler)();

	  //shut down any tasks remaining
	  __HAL_RCC_GPIOC_CLK_DISABLE();
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <jumpToApp+0xd4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a26      	ldr	r2, [pc, #152]	; (8000980 <jumpToApp+0xd4>)
 80008e8:	f023 0304 	bic.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <jumpToApp+0xd4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a23      	ldr	r2, [pc, #140]	; (8000980 <jumpToApp+0xd4>)
 80008f4:	f023 0308 	bic.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <jumpToApp+0xd4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a20      	ldr	r2, [pc, #128]	; (8000980 <jumpToApp+0xd4>)
 8000900:	f023 0302 	bic.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000906:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <jumpToApp+0xd4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <jumpToApp+0xd4>)
 800090c:	f023 0301 	bic.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 8000912:	f004 fea3 	bl	800565c <HAL_RCC_DeInit>
	  HAL_DeInit();// to disable all the peripherals
 8000916:	f002 fa3b 	bl	8002d90 <HAL_DeInit>

	  SysTick->CTRL = 0;//to turn off the systick
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <jumpToApp+0xd8>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <jumpToApp+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <jumpToApp+0xd8>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	2301      	movs	r3, #1
 800092e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f383 8810 	msr	PRIMASK, r3
}
 8000936:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
	  //disable interrupts
	  __set_PRIMASK(1);
	  __disable_irq();

	  //__DMB(); // Data Memory Barrier to ensure write to memory is completed
	  SCB->VTOR = address;//change this
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <jumpToApp+0xdc>)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	6093      	str	r3, [r2, #8]
      //__DSB(); // Data Synchronization Barrier to ensure all subsequence instructions use the new configuation

	  //configure the MSP by reading the value from the base address
	  uint32_t msp_value = *(__IO uint32_t*) address;
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f383 8808 	msr	MSP, r3
}
 8000952:	bf00      	nop

	  __set_MSP(msp_value);

	  uint32_t resethandler_address = *(__IO uint32_t*) (address + 4);
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	3304      	adds	r3, #4
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	60fb      	str	r3, [r7, #12]

	  app_reset_handler = (void (*)(void)) (resethandler_address);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000960:	b662      	cpsie	i
}
 8000962:	bf00      	nop

	  //jump to reset handler of the user app.
	  __enable_irq();
	  app_reset_handler();
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4798      	blx	r3
}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	08020000 	.word	0x08020000
 8000974:	20000068 	.word	0x20000068
 8000978:	08110000 	.word	0x08110000
 800097c:	2000007c 	.word	0x2000007c
 8000980:	40023800 	.word	0x40023800
 8000984:	e000e010 	.word	0xe000e010
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <FlashWriteWord>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
	HAL_FLASH_Lock();
}

void FlashWriteWord(uint32_t Address, uint32_t Data) {
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 800099a:	f003 fc9f 	bl	80042dc <HAL_FLASH_Unlock>
	while (status != HAL_OK)
 800099e:	e00b      	b.n	80009b8 <FlashWriteWord+0x2c>
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2200      	movs	r2, #0
 80009a4:	461c      	mov	r4, r3
 80009a6:	4615      	mov	r5, r2
 80009a8:	4622      	mov	r2, r4
 80009aa:	462b      	mov	r3, r5
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	2002      	movs	r0, #2
 80009b0:	f003 fc40 	bl	8004234 <HAL_FLASH_Program>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1f0      	bne.n	80009a0 <FlashWriteWord+0x14>
	HAL_FLASH_Lock();
 80009be:	f003 fcaf 	bl	8004320 <HAL_FLASH_Lock>
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bdb0      	pop	{r4, r5, r7, pc}

080009ca <FlashReadWord>:

uint8_t FlashReadByte(uint32_t Address) {
    return (*(__IO uint8_t*)Address);
}

uint32_t FlashReadWord(uint32_t Address) {
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
    return (*(__IO uint32_t*)Address);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <EraseSector>:

void EraseSector(uint32_t Sector) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 80009f0:	f003 fc74 	bl	80042dc <HAL_FLASH_Unlock>
	uint32_t SectorError;
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <EraseSector+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Sector = Sector;
 80009fa:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <EraseSector+0x4c>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = 1 ;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <EraseSector+0x4c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	60da      	str	r2, [r3, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <EraseSector+0x4c>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	611a      	str	r2, [r3, #16]
	while (status != HAL_OK)
 8000a0c:	e007      	b.n	8000a1e <EraseSector+0x3a>
		status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <EraseSector+0x4c>)
 8000a16:	f003 fdd3 	bl	80045c0 <HAL_FLASHEx_Erase>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1f4      	bne.n	8000a0e <EraseSector+0x2a>
	HAL_FLASH_Lock();
 8000a24:	f003 fc7c 	bl	8004320 <HAL_FLASH_Lock>
}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200001a4 	.word	0x200001a4

08000a34 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a24      	ldr	r2, [pc, #144]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_GPIO_Init+0xb0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_GPIO_Init+0xb4>)
 8000ad8:	f003 feb2 	bl	8004840 <HAL_GPIO_Init>

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000

08000aec <asciiToHex>:
uint8_t tempBuf[8];

uint8_t firstFirmwarePlaceCheck = 1;
uint8_t current_sector = 0;

void asciiToHex(uint8_t* buff, uint8_t count) {
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i=0; i<count;i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e023      	b.n	8000b46 <asciiToHex+0x5a>
		if(buff[i] <= '9' && buff[i] >= '0' ) {
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b39      	cmp	r3, #57	; 0x39
 8000b08:	d810      	bhi.n	8000b2c <asciiToHex+0x40>
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b2f      	cmp	r3, #47	; 0x2f
 8000b14:	d90a      	bls.n	8000b2c <asciiToHex+0x40>
			buff[i] -= 0x30;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	440b      	add	r3, r1
 8000b24:	3a30      	subs	r2, #48	; 0x30
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	e009      	b.n	8000b40 <asciiToHex+0x54>
		}
		else {
			buff[i] = buff[i] - 0x41 + 10;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	440b      	add	r3, r1
 8000b3a:	3a37      	subs	r2, #55	; 0x37
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<count;i++) {
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	3301      	adds	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	7bfa      	ldrb	r2, [r7, #15]
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d3d7      	bcc.n	8000afe <asciiToHex+0x12>
		}
	}
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <fillBuffer>:

void fillBuffer(uint8_t* destination, uint8_t* source, uint16_t* startPtr, uint16_t count) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	807b      	strh	r3, [r7, #2]
	for (int16_t i = 0; i < count; i++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	82fb      	strh	r3, [r7, #22]
 8000b6e:	e014      	b.n	8000b9a <fillBuffer+0x3e>
		destination[i] = source[*startPtr + i];
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	441a      	add	r2, r3
 8000b82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	440b      	add	r3, r1
 8000b8a:	7812      	ldrb	r2, [r2, #0]
 8000b8c:	701a      	strb	r2, [r3, #0]
	for (int16_t i = 0; i < count; i++) {
 8000b8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	3301      	adds	r3, #1
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	82fb      	strh	r3, [r7, #22]
 8000b9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbe5      	blt.n	8000b70 <fillBuffer+0x14>
	}
	*startPtr += count;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	881a      	ldrh	r2, [r3, #0]
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	4413      	add	r3, r2
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	801a      	strh	r2, [r3, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <flashHex>:

uint8_t flashHex(uint8_t* flashBuf, uint16_t size) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]
	uint16_t ptr = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	81fb      	strh	r3, [r7, #14]
	while (ptr < size) {
 8000bd0:	e19f      	b.n	8000f12 <flashHex+0x352>
		if(flashBuf[ptr] == ':') {
 8000bd2:	89fb      	ldrh	r3, [r7, #14]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b3a      	cmp	r3, #58	; 0x3a
 8000bde:	f040 8194 	bne.w	8000f0a <flashHex+0x34a>
			ptr++;
 8000be2:	89fb      	ldrh	r3, [r7, #14]
 8000be4:	3301      	adds	r3, #1
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	81fb      	strh	r3, [r7, #14]
			fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000bea:	f107 020e 	add.w	r2, r7, #14
 8000bee:	2308      	movs	r3, #8
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	4897      	ldr	r0, [pc, #604]	; (8000e50 <flashHex+0x290>)
 8000bf4:	f7ff ffb2 	bl	8000b5c <fillBuffer>
			asciiToHex(tempBuf, 8);
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	4895      	ldr	r0, [pc, #596]	; (8000e50 <flashHex+0x290>)
 8000bfc:	f7ff ff76 	bl	8000aec <asciiToHex>

			size_data = 2*(tempBuf[1] + 16*tempBuf[0]);//находим размер данных
 8000c00:	4b93      	ldr	r3, [pc, #588]	; (8000e50 <flashHex+0x290>)
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b92      	ldr	r3, [pc, #584]	; (8000e50 <flashHex+0x290>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	011b      	lsls	r3, r3, #4
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b8f      	ldr	r3, [pc, #572]	; (8000e54 <flashHex+0x294>)
 8000c16:	701a      	strb	r2, [r3, #0]
			address_data = tempBuf[5] + 16*tempBuf[4] + 256*tempBuf[3] + 4096*tempBuf[2];//адрес
 8000c18:	4b8d      	ldr	r3, [pc, #564]	; (8000e50 <flashHex+0x290>)
 8000c1a:	795b      	ldrb	r3, [r3, #5]
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4b8c      	ldr	r3, [pc, #560]	; (8000e50 <flashHex+0x290>)
 8000c20:	78db      	ldrb	r3, [r3, #3]
 8000c22:	b299      	uxth	r1, r3
 8000c24:	4b8a      	ldr	r3, [pc, #552]	; (8000e50 <flashHex+0x290>)
 8000c26:	789b      	ldrb	r3, [r3, #2]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	440b      	add	r3, r1
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	b299      	uxth	r1, r3
 8000c36:	4b86      	ldr	r3, [pc, #536]	; (8000e50 <flashHex+0x290>)
 8000c38:	791b      	ldrb	r3, [r3, #4]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	440b      	add	r3, r1
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	4413      	add	r3, r2
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b83      	ldr	r3, [pc, #524]	; (8000e58 <flashHex+0x298>)
 8000c4a:	801a      	strh	r2, [r3, #0]
			type_data = tempBuf[7] + 16*tempBuf[6];//и тип
 8000c4c:	4b80      	ldr	r3, [pc, #512]	; (8000e50 <flashHex+0x290>)
 8000c4e:	79da      	ldrb	r2, [r3, #7]
 8000c50:	4b7f      	ldr	r3, [pc, #508]	; (8000e50 <flashHex+0x290>)
 8000c52:	799b      	ldrb	r3, [r3, #6]
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b7f      	ldr	r3, [pc, #508]	; (8000e5c <flashHex+0x29c>)
 8000c5e:	701a      	strb	r2, [r3, #0]

			calculation_check_sum = size_data/2 + (uint8_t)address_data + (uint8_t)(address_data>>8) + type_data;//считаем чек сумму
 8000c60:	4b7c      	ldr	r3, [pc, #496]	; (8000e54 <flashHex+0x294>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	085b      	lsrs	r3, r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b7b      	ldr	r3, [pc, #492]	; (8000e58 <flashHex+0x298>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b79      	ldr	r3, [pc, #484]	; (8000e58 <flashHex+0x298>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b76      	ldr	r3, [pc, #472]	; (8000e5c <flashHex+0x29c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b75      	ldr	r3, [pc, #468]	; (8000e60 <flashHex+0x2a0>)
 8000c8a:	701a      	strb	r2, [r3, #0]

			if(type_data == 0x00) {
 8000c8c:	4b73      	ldr	r3, [pc, #460]	; (8000e5c <flashHex+0x29c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f040 80a2 	bne.w	8000dda <flashHex+0x21a>
				while(size_data > 0) {
 8000c96:	e075      	b.n	8000d84 <flashHex+0x1c4>
					fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000c98:	f107 020e 	add.w	r2, r7, #14
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	486b      	ldr	r0, [pc, #428]	; (8000e50 <flashHex+0x290>)
 8000ca2:	f7ff ff5b 	bl	8000b5c <fillBuffer>
					asciiToHex(tempBuf, 8);
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	4869      	ldr	r0, [pc, #420]	; (8000e50 <flashHex+0x290>)
 8000caa:	f7ff ff1f 	bl	8000aec <asciiToHex>


					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 8000cae:	2300      	movs	r3, #0
 8000cb0:	75fb      	strb	r3, [r7, #23]
 8000cb2:	e024      	b.n	8000cfe <flashHex+0x13e>
						tempBuf[i] <<= 4;
 8000cb4:	7dfb      	ldrb	r3, [r7, #23]
 8000cb6:	4a66      	ldr	r2, [pc, #408]	; (8000e50 <flashHex+0x290>)
 8000cb8:	5cd2      	ldrb	r2, [r2, r3]
 8000cba:	7dfb      	ldrb	r3, [r7, #23]
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d1      	uxtb	r1, r2
 8000cc0:	4a63      	ldr	r2, [pc, #396]	; (8000e50 <flashHex+0x290>)
 8000cc2:	54d1      	strb	r1, [r2, r3]
						tempBuf[i] = tempBuf[i] | tempBuf[i+1];
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	4a62      	ldr	r2, [pc, #392]	; (8000e50 <flashHex+0x290>)
 8000cc8:	5cd1      	ldrb	r1, [r2, r3]
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	4a60      	ldr	r2, [pc, #384]	; (8000e50 <flashHex+0x290>)
 8000cd0:	5cd2      	ldrb	r2, [r2, r3]
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	b2d1      	uxtb	r1, r2
 8000cd8:	4a5d      	ldr	r2, [pc, #372]	; (8000e50 <flashHex+0x290>)
 8000cda:	54d1      	strb	r1, [r2, r3]
						program_data |= tempBuf[i] <<(i*4);
 8000cdc:	7dfb      	ldrb	r3, [r7, #23]
 8000cde:	4a5c      	ldr	r2, [pc, #368]	; (8000e50 <flashHex+0x290>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <flashHex+0x2a4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	4a5b      	ldr	r2, [pc, #364]	; (8000e64 <flashHex+0x2a4>)
 8000cf6:	6013      	str	r3, [r2, #0]
					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	75fb      	strb	r3, [r7, #23]
 8000cfe:	7dfb      	ldrb	r3, [r7, #23]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9d7      	bls.n	8000cb4 <flashHex+0xf4>
					}

					EraseNecessarySectors(extented_linear_adress + address_data, &current_sector);
 8000d04:	4b54      	ldr	r3, [pc, #336]	; (8000e58 <flashHex+0x298>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b57      	ldr	r3, [pc, #348]	; (8000e68 <flashHex+0x2a8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4956      	ldr	r1, [pc, #344]	; (8000e6c <flashHex+0x2ac>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fdaa 	bl	800086c <EraseNecessarySectors>
					FlashWriteWord(extented_linear_adress + address_data, program_data);
 8000d18:	4b4f      	ldr	r3, [pc, #316]	; (8000e58 <flashHex+0x298>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <flashHex+0x2a8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a4f      	ldr	r2, [pc, #316]	; (8000e64 <flashHex+0x2a4>)
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fe2e 	bl	800098c <FlashWriteWord>
					calculation_check_sum += (uint8_t)program_data + (uint8_t)(program_data>>8) + (uint8_t)(program_data>>16) + (uint8_t)(program_data>>24);
 8000d30:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <flashHex+0x2a4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b4b      	ldr	r3, [pc, #300]	; (8000e64 <flashHex+0x2a4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4413      	add	r3, r2
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <flashHex+0x2a4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	0c1b      	lsrs	r3, r3, #16
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b45      	ldr	r3, [pc, #276]	; (8000e64 <flashHex+0x2a4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	0e1b      	lsrs	r3, r3, #24
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4413      	add	r3, r2
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <flashHex+0x2a0>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b3f      	ldr	r3, [pc, #252]	; (8000e60 <flashHex+0x2a0>)
 8000d64:	701a      	strb	r2, [r3, #0]
					size_data -= 8;
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <flashHex+0x294>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	3b08      	subs	r3, #8
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <flashHex+0x294>)
 8000d70:	701a      	strb	r2, [r3, #0]
					address_data += 4;
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <flashHex+0x298>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	3304      	adds	r3, #4
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <flashHex+0x298>)
 8000d7c:	801a      	strh	r2, [r3, #0]
					program_data = 0;
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <flashHex+0x2a4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
				while(size_data > 0) {
 8000d84:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <flashHex+0x294>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d185      	bne.n	8000c98 <flashHex+0xd8>
				}
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8000d8c:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <flashHex+0x2a0>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	425b      	negs	r3, r3
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <flashHex+0x2a0>)
 8000d96:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 8000d98:	f107 020e 	add.w	r2, r7, #14
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	482b      	ldr	r0, [pc, #172]	; (8000e50 <flashHex+0x290>)
 8000da2:	f7ff fedb 	bl	8000b5c <fillBuffer>
				asciiToHex(tempBuf, 2);
 8000da6:	2102      	movs	r1, #2
 8000da8:	4829      	ldr	r0, [pc, #164]	; (8000e50 <flashHex+0x290>)
 8000daa:	f7ff fe9f 	bl	8000aec <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <flashHex+0x290>)
 8000db0:	785a      	ldrb	r2, [r3, #1]
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <flashHex+0x290>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <flashHex+0x2b0>)
 8000dc0:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <flashHex+0x2a0>)
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <flashHex+0x2b0>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d001      	beq.n	8000dd2 <flashHex+0x212>
					return 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e0a7      	b.n	8000f22 <flashHex+0x362>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <flashHex+0x2a0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	e097      	b.n	8000f0a <flashHex+0x34a>

			} else if(type_data == 0x04) {//дополнительный адрес
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <flashHex+0x29c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	f040 808f 	bne.w	8000f02 <flashHex+0x342>
				fillBuffer(tempBuf, flashBuf, &ptr, 4);
 8000de4:	f107 020e 	add.w	r2, r7, #14
 8000de8:	2304      	movs	r3, #4
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	4818      	ldr	r0, [pc, #96]	; (8000e50 <flashHex+0x290>)
 8000dee:	f7ff feb5 	bl	8000b5c <fillBuffer>
				asciiToHex(tempBuf, 4);
 8000df2:	2104      	movs	r1, #4
 8000df4:	4816      	ldr	r0, [pc, #88]	; (8000e50 <flashHex+0x290>)
 8000df6:	f7ff fe79 	bl	8000aec <asciiToHex>

				extented_linear_adress = (uint32_t)(tempBuf[0]<<28 | tempBuf[1]<<24 | tempBuf[2]<<20 | tempBuf[3]<<16 );//считаем адрес
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <flashHex+0x290>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	071a      	lsls	r2, r3, #28
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <flashHex+0x290>)
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	061b      	lsls	r3, r3, #24
 8000e06:	431a      	orrs	r2, r3
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <flashHex+0x290>)
 8000e0a:	789b      	ldrb	r3, [r3, #2]
 8000e0c:	051b      	lsls	r3, r3, #20
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <flashHex+0x290>)
 8000e12:	78db      	ldrb	r3, [r3, #3]
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4313      	orrs	r3, r2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <flashHex+0x2a8>)
 8000e1c:	601a      	str	r2, [r3, #0]

				if (firstFirmwarePlaceCheck) {
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <flashHex+0x2b4>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d030      	beq.n	8000e88 <flashHex+0x2c8>
					uint32_t latest_app_address = getLatestApplicationAddress();
 8000e26:	f7ff fc27 	bl	8000678 <getLatestApplicationAddress>
 8000e2a:	6138      	str	r0, [r7, #16]
					if ((latest_app_address & 0xFFFF0000) != extented_linear_adress)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	0c1b      	lsrs	r3, r3, #16
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <flashHex+0x2a8>)
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d001      	beq.n	8000e3e <flashHex+0x27e>
						return 2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e071      	b.n	8000f22 <flashHex+0x362>

					if (latest_app_address == APP_1_ADDRESS) current_sector = APP_1_SECTOR;
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <flashHex+0x2b8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d11a      	bne.n	8000e7c <flashHex+0x2bc>
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <flashHex+0x2ac>)
 8000e48:	2205      	movs	r2, #5
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e019      	b.n	8000e82 <flashHex+0x2c2>
 8000e4e:	bf00      	nop
 8000e50:	200001cc 	.word	0x200001cc
 8000e54:	200001bc 	.word	0x200001bc
 8000e58:	200001c0 	.word	0x200001c0
 8000e5c:	200001bd 	.word	0x200001bd
 8000e60:	200001c8 	.word	0x200001c8
 8000e64:	200001c4 	.word	0x200001c4
 8000e68:	200001b8 	.word	0x200001b8
 8000e6c:	200001d4 	.word	0x200001d4
 8000e70:	200001be 	.word	0x200001be
 8000e74:	2000008c 	.word	0x2000008c
 8000e78:	08020000 	.word	0x08020000
					else current_sector = APP_2_SECTOR;
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <flashHex+0x36c>)
 8000e7e:	2210      	movs	r2, #16
 8000e80:	701a      	strb	r2, [r3, #0]

					firstFirmwarePlaceCheck = 0;
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <flashHex+0x370>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
				}

				calculation_check_sum +=  16*tempBuf[0] + tempBuf[1] + 16*tempBuf[2] + tempBuf[3];
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <flashHex+0x374>)
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <flashHex+0x374>)
 8000e8e:	789b      	ldrb	r3, [r3, #2]
 8000e90:	4413      	add	r3, r2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <flashHex+0x374>)
 8000e9a:	785b      	ldrb	r3, [r3, #1]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <flashHex+0x374>)
 8000ea2:	78db      	ldrb	r3, [r3, #3]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <flashHex+0x378>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <flashHex+0x378>)
 8000eb2:	701a      	strb	r2, [r3, #0]
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <flashHex+0x378>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	425b      	negs	r3, r3
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <flashHex+0x378>)
 8000ebe:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 8000ec0:	f107 020e 	add.w	r2, r7, #14
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	481a      	ldr	r0, [pc, #104]	; (8000f34 <flashHex+0x374>)
 8000eca:	f7ff fe47 	bl	8000b5c <fillBuffer>
				asciiToHex(tempBuf, 2);
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4818      	ldr	r0, [pc, #96]	; (8000f34 <flashHex+0x374>)
 8000ed2:	f7ff fe0b 	bl	8000aec <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <flashHex+0x374>)
 8000ed8:	785a      	ldrb	r2, [r3, #1]
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <flashHex+0x374>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <flashHex+0x37c>)
 8000ee8:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <flashHex+0x378>)
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <flashHex+0x37c>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d001      	beq.n	8000efa <flashHex+0x33a>
					return 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e013      	b.n	8000f22 <flashHex+0x362>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <flashHex+0x378>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e003      	b.n	8000f0a <flashHex+0x34a>
			} else if(type_data == 0x01) {//конец файла
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <flashHex+0x380>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d009      	beq.n	8000f1e <flashHex+0x35e>
				break;
			}
		}
		ptr++;
 8000f0a:	89fb      	ldrh	r3, [r7, #14]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	81fb      	strh	r3, [r7, #14]
	while (ptr < size) {
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	887a      	ldrh	r2, [r7, #2]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	f63f ae5b 	bhi.w	8000bd2 <flashHex+0x12>
 8000f1c:	e000      	b.n	8000f20 <flashHex+0x360>
				break;
 8000f1e:	bf00      	nop
	}
	return 1;
 8000f20:	2301      	movs	r3, #1
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001d4 	.word	0x200001d4
 8000f30:	2000008c 	.word	0x2000008c
 8000f34:	200001cc 	.word	0x200001cc
 8000f38:	200001c8 	.word	0x200001c8
 8000f3c:	200001be 	.word	0x200001be
 8000f40:	200001bd 	.word	0x200001bd

08000f44 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_IWDG_Init+0x2c>)
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <MX_IWDG_Init+0x30>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_IWDG_Init+0x2c>)
 8000f50:	2206      	movs	r2, #6
 8000f52:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_IWDG_Init+0x2c>)
 8000f56:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f5a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_IWDG_Init+0x2c>)
 8000f5e:	f003 fe1b 	bl	8004b98 <HAL_IWDG_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000f68:	f000 fa5c 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200001d8 	.word	0x200001d8
 8000f74:	40003000 	.word	0x40003000

08000f78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f7c:	f3bf 8f4f 	dsb	sy
}
 8000f80:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <__NVIC_SystemReset+0x24>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f8a:	4904      	ldr	r1, [pc, #16]	; (8000f9c <__NVIC_SystemReset+0x24>)
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_SystemReset+0x28>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f92:	f3bf 8f4f 	dsb	sy
}
 8000f96:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <__NVIC_SystemReset+0x20>
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	05fa0004 	.word	0x05fa0004

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  commands[0] = commandCreate("jump", (CommandAction) jumpToUserApp, NONE);
 8000faa:	2202      	movs	r2, #2
 8000fac:	4935      	ldr	r1, [pc, #212]	; (8001084 <main+0xe0>)
 8000fae:	4836      	ldr	r0, [pc, #216]	; (8001088 <main+0xe4>)
 8000fb0:	f001 fa72 	bl	8002498 <commandCreate>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a35      	ldr	r2, [pc, #212]	; (800108c <main+0xe8>)
 8000fb8:	6013      	str	r3, [r2, #0]
	  commands[1] = commandCreate("update", (CommandAction) downloadFirmware, INT);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4934      	ldr	r1, [pc, #208]	; (8001090 <main+0xec>)
 8000fbe:	4835      	ldr	r0, [pc, #212]	; (8001094 <main+0xf0>)
 8000fc0:	f001 fa6a 	bl	8002498 <commandCreate>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a31      	ldr	r2, [pc, #196]	; (800108c <main+0xe8>)
 8000fc8:	6053      	str	r3, [r2, #4]
	  commands[2] = commandCreate("version", (CommandAction) getAppVersions, NONE);//TODO
 8000fca:	2202      	movs	r2, #2
 8000fcc:	4932      	ldr	r1, [pc, #200]	; (8001098 <main+0xf4>)
 8000fce:	4833      	ldr	r0, [pc, #204]	; (800109c <main+0xf8>)
 8000fd0:	f001 fa62 	bl	8002498 <commandCreate>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	; (800108c <main+0xe8>)
 8000fd8:	6093      	str	r3, [r2, #8]
	  commands[3] = commandCreate("help", (CommandAction) getHelpInfo, NONE);
 8000fda:	2202      	movs	r2, #2
 8000fdc:	4930      	ldr	r1, [pc, #192]	; (80010a0 <main+0xfc>)
 8000fde:	4831      	ldr	r0, [pc, #196]	; (80010a4 <main+0x100>)
 8000fe0:	f001 fa5a 	bl	8002498 <commandCreate>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a29      	ldr	r2, [pc, #164]	; (800108c <main+0xe8>)
 8000fe8:	60d3      	str	r3, [r2, #12]
	  commands[4] = commandCreate("clear", (CommandAction) eraseConfigs, NONE);
 8000fea:	2202      	movs	r2, #2
 8000fec:	492e      	ldr	r1, [pc, #184]	; (80010a8 <main+0x104>)
 8000fee:	482f      	ldr	r0, [pc, #188]	; (80010ac <main+0x108>)
 8000ff0:	f001 fa52 	bl	8002498 <commandCreate>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a25      	ldr	r2, [pc, #148]	; (800108c <main+0xe8>)
 8000ff8:	6113      	str	r3, [r2, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffa:	f001 fea7 	bl	8002d4c <HAL_Init>

  /* USER CODE BEGIN Init */
  uartInit();
 8000ffe:	f000 fc7f 	bl	8001900 <uartInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f85f 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f7ff fd15 	bl	8000a34 <MX_GPIO_Init>
  MX_LWIP_Init();
 800100a:	f005 ff21 	bl	8006e50 <MX_LWIP_Init>
  MX_TIM6_Init();
 800100e:	f000 fb39 	bl	8001684 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8001012:	f000 fba7 	bl	8001764 <MX_USART6_UART_Init>
  MX_IWDG_Init();
 8001016:	f7ff ff95 	bl	8000f44 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  lwip_tcp_init();
 800101a:	f000 fd33 	bl	8001a84 <lwip_tcp_init>
  menuInit(commands, 5);
 800101e:	2105      	movs	r1, #5
 8001020:	481a      	ldr	r0, [pc, #104]	; (800108c <main+0xe8>)
 8001022:	f001 fb07 	bl	8002634 <menuInit>
  uartEnableInterruption();
 8001026:	f000 fca1 	bl	800196c <uartEnableInterruption>

  if (!isBootRequired()) {
 800102a:	f7ff facb 	bl	80005c4 <isBootRequired>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <main+0x96>
	  jumpToUserApp();
 8001034:	f000 f8be 	bl	80011b4 <jumpToUserApp>
 8001038:	e002      	b.n	8001040 <main+0x9c>
  } else {
	  EraseSector(CONFIG_BOOT_SECTOR);
 800103a:	200d      	movs	r0, #13
 800103c:	f7ff fcd2 	bl	80009e4 <EraseSector>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 8001040:	481b      	ldr	r0, [pc, #108]	; (80010b0 <main+0x10c>)
 8001042:	f003 fdeb 	bl	8004c1c <HAL_IWDG_Refresh>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (uartHasNext()) {
 8001046:	f000 fc4f 	bl	80018e8 <uartHasNext>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <main+0xb0>
		  	receiveAndSendChar();
 8001050:	f000 f966 	bl	8001320 <receiveAndSendChar>
	  }

	  if (hasLine) {
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <main+0x110>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00f      	beq.n	800107c <main+0xd8>
		  	uartBuf[uartBufLast] = '\0';
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <main+0x114>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <main+0x118>)
 8001064:	2100      	movs	r1, #0
 8001066:	5499      	strb	r1, [r3, r2]
		  	const char* commandResult = menuExecuteCommand((char*) uartBuf);
 8001068:	4814      	ldr	r0, [pc, #80]	; (80010bc <main+0x118>)
 800106a:	f001 fb17 	bl	800269c <menuExecuteCommand>
 800106e:	6078      	str	r0, [r7, #4]
		  	sendMessage("\n");
 8001070:	4813      	ldr	r0, [pc, #76]	; (80010c0 <main+0x11c>)
 8001072:	f000 f9a1 	bl	80013b8 <sendMessage>
		  	sendCommandResult(commandResult);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f982 	bl	8001380 <sendCommandResult>
	  }

	  MX_LWIP_Process();
 800107c:	f006 f814 	bl	80070a8 <MX_LWIP_Process>
	  HAL_IWDG_Refresh(&hiwdg);
 8001080:	e7de      	b.n	8001040 <main+0x9c>
 8001082:	bf00      	nop
 8001084:	080011b5 	.word	0x080011b5
 8001088:	0801204c 	.word	0x0801204c
 800108c:	20000268 	.word	0x20000268
 8001090:	08001211 	.word	0x08001211
 8001094:	08012054 	.word	0x08012054
 8001098:	080012c1 	.word	0x080012c1
 800109c:	0801205c 	.word	0x0801205c
 80010a0:	080011fd 	.word	0x080011fd
 80010a4:	08012064 	.word	0x08012064
 80010a8:	080012ed 	.word	0x080012ed
 80010ac:	0801206c 	.word	0x0801206c
 80010b0:	200001d8 	.word	0x200001d8
 80010b4:	20000265 	.word	0x20000265
 80010b8:	20000264 	.word	0x20000264
 80010bc:	200001e4 	.word	0x200001e4
 80010c0:	08012074 	.word	0x08012074

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	; 0x50
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2230      	movs	r2, #48	; 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f00f fd7c 	bl	8010bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <SystemClock_Config+0xe8>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <SystemClock_Config+0xe8>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	; 0x40
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <SystemClock_Config+0xe8>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <SystemClock_Config+0xec>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <SystemClock_Config+0xec>)
 800110e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <SystemClock_Config+0xec>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001120:	2309      	movs	r3, #9
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800112a:	2301      	movs	r3, #1
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112e:	2302      	movs	r3, #2
 8001130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001138:	230f      	movs	r3, #15
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800113c:	23d8      	movs	r3, #216	; 0xd8
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001140:	2302      	movs	r3, #2
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001144:	2304      	movs	r3, #4
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f003 fdc5 	bl	8004cdc <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001158:	f000 f964 	bl	8001424 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800115c:	f003 fd6e 	bl	8004c3c <HAL_PWREx_EnableOverDrive>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001166:	f000 f95d 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	230f      	movs	r3, #15
 800116c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116e:	2302      	movs	r3, #2
 8001170:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001176:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800117a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001180:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2105      	movs	r1, #5
 8001188:	4618      	mov	r0, r3
 800118a:	f004 f81f 	bl	80051cc <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001194:	f000 f946 	bl	8001424 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800119e:	2000      	movs	r0, #0
 80011a0:	f004 f8fa 	bl	8005398 <HAL_RCC_MCOConfig>
}
 80011a4:	bf00      	nop
 80011a6:	3750      	adds	r7, #80	; 0x50
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40007000 	.word	0x40007000

080011b4 <jumpToUserApp>:

/* USER CODE BEGIN 4 */
static char* jumpToUserApp() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	if (isInputBlocked()) return "";
 80011b8:	f000 f928 	bl	800140c <isInputBlocked>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <jumpToUserApp+0x12>
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <jumpToUserApp+0x3c>)
 80011c4:	e011      	b.n	80011ea <jumpToUserApp+0x36>
	blockInput();
 80011c6:	f000 f909 	bl	80013dc <blockInput>
	validateApplications();
 80011ca:	f7ff fafd 	bl	80007c8 <validateApplications>
	if (getLatestApplicationAddress() == 0) {
 80011ce:	f7ff fa53 	bl	8000678 <getLatestApplicationAddress>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d103      	bne.n	80011e0 <jumpToUserApp+0x2c>
		unblockInput();
 80011d8:	f000 f90c 	bl	80013f4 <unblockInput>
		return "No valid application in flash\n";
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <jumpToUserApp+0x40>)
 80011de:	e004      	b.n	80011ea <jumpToUserApp+0x36>
	} else {
		unblockInput();
 80011e0:	f000 f908 	bl	80013f4 <unblockInput>
		jumpToApp();
 80011e4:	f7ff fb62 	bl	80008ac <jumpToApp>
		return "Done";
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <jumpToUserApp+0x44>)
	}
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	08012078 	.word	0x08012078
 80011f4:	0801207c 	.word	0x0801207c
 80011f8:	0801209c 	.word	0x0801209c

080011fc <getHelpInfo>:

static char* getHelpInfo() {
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
    return "jump: jump to application\n\
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <getHelpInfo+0x10>)
update <version>: download firmware and jump to it\n\
version: get current version of application\n\
help: get information about commands\n\
clear: erase configs\n";
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	080120a4 	.word	0x080120a4

08001210 <downloadFirmware>:

static char* downloadFirmware(uint32_t* version) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if (isInputBlocked()) return "";
 8001218:	f000 f8f8 	bl	800140c <isInputBlocked>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <downloadFirmware+0x16>
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <downloadFirmware+0xa4>)
 8001224:	e042      	b.n	80012ac <downloadFirmware+0x9c>
	blockInput();
 8001226:	f000 f8d9 	bl	80013dc <blockInput>
	validateApplications();
 800122a:	f7ff facd 	bl	80007c8 <validateApplications>
	updateConfig();
 800122e:	f7ff fa51 	bl	80006d4 <updateConfig>
	setAppVersion(*version);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fa82 	bl	8000740 <setAppVersion>
	sendMessage("Send hex file via XMODEM\n");
 800123c:	481e      	ldr	r0, [pc, #120]	; (80012b8 <downloadFirmware+0xa8>)
 800123e:	f000 f8bb 	bl	80013b8 <sendMessage>
	HAL_Delay(100);
 8001242:	2064      	movs	r0, #100	; 0x64
 8001244:	f001 fe28 	bl	8002e98 <HAL_Delay>
	uint8_t xmodemStatus = xmodemReceive();
 8001248:	f001 fb2c 	bl	80028a4 <xmodemReceive>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
	if (xmodemStatus == 1) {
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d107      	bne.n	8001266 <downloadFirmware+0x56>
		setCorrectUpdateFlag();
 8001256:	f7ff fa95 	bl	8000784 <setCorrectUpdateFlag>
		unblockInput();
 800125a:	f000 f8cb 	bl	80013f4 <unblockInput>
		return jumpToUserApp();
 800125e:	f7ff ffa9 	bl	80011b4 <jumpToUserApp>
 8001262:	4603      	mov	r3, r0
 8001264:	e022      	b.n	80012ac <downloadFirmware+0x9c>
	} else if (xmodemStatus == 2) {
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d10f      	bne.n	800128c <downloadFirmware+0x7c>
		unblockInput();
 800126c:	f000 f8c2 	bl	80013f4 <unblockInput>
		HAL_FLASH_Unlock();
 8001270:	f003 f834 	bl	80042dc <HAL_FLASH_Unlock>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)0x08104000, 0);
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	490f      	ldr	r1, [pc, #60]	; (80012bc <downloadFirmware+0xac>)
 800127e:	2002      	movs	r0, #2
 8001280:	f002 ffd8 	bl	8004234 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8001284:	f003 f84c 	bl	8004320 <HAL_FLASH_Lock>
		NVIC_SystemReset(); //TODO
 8001288:	f7ff fe76 	bl	8000f78 <__NVIC_SystemReset>
		return "Error. Choose firmware for another bank.\n";
	} else {
		unblockInput();
 800128c:	f000 f8b2 	bl	80013f4 <unblockInput>
		HAL_FLASH_Unlock();
 8001290:	f003 f824 	bl	80042dc <HAL_FLASH_Unlock>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)0x08104000, 0);
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <downloadFirmware+0xac>)
 800129e:	2002      	movs	r0, #2
 80012a0:	f002 ffc8 	bl	8004234 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80012a4:	f003 f83c 	bl	8004320 <HAL_FLASH_Lock>
		NVIC_SystemReset(); //TODO
 80012a8:	f7ff fe66 	bl	8000f78 <__NVIC_SystemReset>
		return "Error. Update aborted.\n";
	};
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	08012078 	.word	0x08012078
 80012b8:	08012158 	.word	0x08012158
 80012bc:	08104000 	.word	0x08104000

080012c0 <getAppVersions>:

static char* getAppVersions() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	if (isInputBlocked()) return "";
 80012c4:	f000 f8a2 	bl	800140c <isInputBlocked>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <getAppVersions+0x12>
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <getAppVersions+0x28>)
 80012d0:	e008      	b.n	80012e4 <getAppVersions+0x24>
	blockInput();
 80012d2:	f000 f883 	bl	80013dc <blockInput>
	validateApplications();
 80012d6:	f7ff fa77 	bl	80007c8 <validateApplications>
	unblockInput();
 80012da:	f000 f88b 	bl	80013f4 <unblockInput>
	return getVersions();
 80012de:	f7ff f983 	bl	80005e8 <getVersions>
 80012e2:	4603      	mov	r3, r0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08012078 	.word	0x08012078

080012ec <eraseConfigs>:

static char* eraseConfigs() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	if (isInputBlocked()) return "";
 80012f0:	f000 f88c 	bl	800140c <isInputBlocked>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <eraseConfigs+0x12>
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <eraseConfigs+0x2c>)
 80012fc:	e00a      	b.n	8001314 <eraseConfigs+0x28>
	blockInput();
 80012fe:	f000 f86d 	bl	80013dc <blockInput>
	EraseSector(CONFIG_1_SECTOR);
 8001302:	200e      	movs	r0, #14
 8001304:	f7ff fb6e 	bl	80009e4 <EraseSector>
	EraseSector(CONFIG_2_SECTOR);
 8001308:	200f      	movs	r0, #15
 800130a:	f7ff fb6b 	bl	80009e4 <EraseSector>
	unblockInput();
 800130e:	f000 f871 	bl	80013f4 <unblockInput>
	return "Configs erased\n";
 8001312:	4b02      	ldr	r3, [pc, #8]	; (800131c <eraseConfigs+0x30>)
}
 8001314:	4618      	mov	r0, r3
 8001316:	bd80      	pop	{r7, pc}
 8001318:	08012078 	.word	0x08012078
 800131c:	08012174 	.word	0x08012174

08001320 <receiveAndSendChar>:

static void receiveAndSendChar() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
    if (uartReceive(uartBuf + uartBufLast, 1)) {
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <receiveAndSendChar+0x54>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <receiveAndSendChar+0x58>)
 800132e:	4413      	add	r3, r2
 8001330:	2101      	movs	r1, #1
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fafa 	bl	800192c <uartReceive>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d016      	beq.n	800136c <receiveAndSendChar+0x4c>
        uint8_t received = uartBuf[uartBufLast];
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <receiveAndSendChar+0x54>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <receiveAndSendChar+0x58>)
 8001346:	5c9b      	ldrb	r3, [r3, r2]
 8001348:	71fb      	strb	r3, [r7, #7]
        uartBufLast++;
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <receiveAndSendChar+0x54>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <receiveAndSendChar+0x54>)
 8001354:	701a      	strb	r2, [r3, #0]
        uartTransmit(&received, 1);
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	2101      	movs	r1, #1
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fa7c 	bl	8001858 <uartTransmit>

        if (received == '\r')
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b0d      	cmp	r3, #13
 8001364:	d102      	bne.n	800136c <receiveAndSendChar+0x4c>
            hasLine = 1;
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <receiveAndSendChar+0x5c>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
    }
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000264 	.word	0x20000264
 8001378:	200001e4 	.word	0x200001e4
 800137c:	20000265 	.word	0x20000265

08001380 <sendCommandResult>:

static void sendCommandResult(const char* commandResult) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7fe ff3b 	bl	8000204 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	b29b      	uxth	r3, r3
 8001392:	4619      	mov	r1, r3
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fa5f 	bl	8001858 <uartTransmit>
    uartBufLast = 0;
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <sendCommandResult+0x30>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
    hasLine = 0;
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <sendCommandResult+0x34>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000264 	.word	0x20000264
 80013b4:	20000265 	.word	0x20000265

080013b8 <sendMessage>:

static void sendMessage(const char* msg) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7fe ff1f 	bl	8000204 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4619      	mov	r1, r3
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fa43 	bl	8001858 <uartTransmit>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <blockInput>:

void blockInput() {
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	blockInputFlag = 1;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <blockInput+0x14>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	2000027c 	.word	0x2000027c

080013f4 <unblockInput>:

void unblockInput() {
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	blockInputFlag = 0;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <unblockInput+0x14>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	2000027c 	.word	0x2000027c

0800140c <isInputBlocked>:

uint8_t isInputBlocked() {
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	return blockInputFlag;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <isInputBlocked+0x14>)
 8001412:	781b      	ldrb	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000027c 	.word	0x2000027c

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_MspInit+0x4c>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_MspInit+0x4c>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f001 fcc2 	bl	8002e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM6_DAC_IRQHandler+0x10>)
 80014de:	f004 faa4 	bl	8005a2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000284 	.word	0x20000284

080014ec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <ETH_IRQHandler+0x10>)
 80014f2:	f002 fa75 	bl	80039e0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20003a48 	.word	0x20003a48

08001500 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <USART6_IRQHandler+0x10>)
 8001506:	f004 fdb3 	bl	8006070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002d8 	.word	0x200002d8

08001514 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e00a      	b.n	800153c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001526:	f3af 8000 	nop.w
 800152a:	4601      	mov	r1, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	b2ca      	uxtb	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf0      	blt.n	8001526 <_read+0x12>
	}

return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e009      	b.n	8001574 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf1      	blt.n	8001560 <_write+0x12>
	}
	return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_close>:

int _close(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	return -1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ae:	605a      	str	r2, [r3, #4]
	return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_isatty>:

int _isatty(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
	return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d205      	bcs.n	800162c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <_sbrk+0x6c>)
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a06      	ldr	r2, [pc, #24]	; (8001654 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	20030000 	.word	0x20030000
 8001650:	00004000 	.word	0x00004000
 8001654:	20000280 	.word	0x20000280
 8001658:	20007158 	.word	0x20007158
 800165c:	20007150 	.word	0x20007150

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <MX_TIM6_Init+0x64>)
 8001694:	4a15      	ldr	r2, [pc, #84]	; (80016ec <MX_TIM6_Init+0x68>)
 8001696:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44999;
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_TIM6_Init+0x64>)
 800169a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800169e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_TIM6_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <MX_TIM6_Init+0x64>)
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_TIM6_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <MX_TIM6_Init+0x64>)
 80016b6:	f004 f8c9 	bl	800584c <HAL_TIM_Base_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80016c0:	f7ff feb0 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_TIM6_Init+0x64>)
 80016d2:	f004 fb7b 	bl	8005dcc <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80016dc:	f7ff fea2 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000284 	.word	0x20000284
 80016ec:	40001000 	.word	0x40001000

080016f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_TIM_Base_MspInit+0x48>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d115      	bne.n	800172e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_TIM_Base_MspInit+0x4c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_TIM_Base_MspInit+0x4c>)
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_TIM_Base_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2036      	movs	r0, #54	; 0x36
 8001724:	f001 fcb7 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001728:	2036      	movs	r0, #54	; 0x36
 800172a:	f001 fcd0 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40001000 	.word	0x40001000
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d102      	bne.n	8001758 <HAL_TIM_PeriodElapsedCallback+0x18>
		uartTransmitChar(X_C);
 8001752:	2043      	movs	r0, #67	; 0x43
 8001754:	f000 f8a4 	bl	80018a0 <uartTransmitChar>
	}
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40001000 	.word	0x40001000

08001764 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <MX_USART6_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 8001770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001774:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART6_UART_Init+0x4c>)
 800179c:	f004 fba6 	bl	8005eec <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f7ff fe3d 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200002d8 	.word	0x200002d8
 80017b4:	40011400 	.word	0x40011400

080017b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1d      	ldr	r2, [pc, #116]	; (800184c <HAL_UART_MspInit+0x94>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d133      	bne.n	8001842 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_UART_MspInit+0x98>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <HAL_UART_MspInit+0x98>)
 80017e4:	f043 0320 	orr.w	r3, r3, #32
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_UART_MspInit+0x98>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_UART_MspInit+0x98>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_UART_MspInit+0x98>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_UART_MspInit+0x98>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001812:	23c0      	movs	r3, #192	; 0xc0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001822:	2308      	movs	r3, #8
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4809      	ldr	r0, [pc, #36]	; (8001854 <HAL_UART_MspInit+0x9c>)
 800182e:	f003 f807 	bl	8004840 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2047      	movs	r0, #71	; 0x47
 8001838:	f001 fc2d 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800183c:	2047      	movs	r0, #71	; 0x47
 800183e:	f001 fc46 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40011400 	.word	0x40011400
 8001850:	40023800 	.word	0x40023800
 8001854:	40020800 	.word	0x40020800

08001858 <uartTransmit>:
  }
}

/* USER CODE BEGIN 1 */

uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <uartTransmit+0x16>
        return 0;
 800186a:	2300      	movs	r3, #0
 800186c:	e010      	b.n	8001890 <uartTransmit+0x38>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <uartTransmit+0x40>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fd24 	bl	80022c4 <bufferPushValues>
 800187c:	4603      	mov	r3, r0
 800187e:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <uartTransmit+0x44>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <uartTransmit+0x36>
        hardwareTransmitIT();
 800188a:	f000 f887 	bl	800199c <hardwareTransmitIT>
    }
    return transmitted;
 800188e:	89fb      	ldrh	r3, [r7, #14]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200002cc 	.word	0x200002cc
 800189c:	200002d4 	.word	0x200002d4

080018a0 <uartTransmitChar>:

uint8_t uartTransmitChar(const uint8_t msg) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
    if (msg == NULL)
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <uartTransmitChar+0x14>
        return 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e010      	b.n	80018d6 <uartTransmitChar+0x36>
    const uint8_t transmitted = bufferPush(txBuffer, msg);
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <uartTransmitChar+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	79fa      	ldrb	r2, [r7, #7]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fcd0 	bl	8002262 <bufferPush>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]
    if (interruptionsEnabled) {
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <uartTransmitChar+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <uartTransmitChar+0x34>
        hardwareTransmitIT();
 80018d0:	f000 f864 	bl	800199c <hardwareTransmitIT>
    }
    return transmitted;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200002cc 	.word	0x200002cc
 80018e4:	200002d4 	.word	0x200002d4

080018e8 <uartHasNext>:

uint8_t uartHasNext() {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
    return bufferHasValues(rxBuffer);
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <uartHasNext+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fd4c 	bl	800238e <bufferHasValues>
 80018f6:	4603      	mov	r3, r0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200002d0 	.word	0x200002d0

08001900 <uartInit>:

void uartInit() {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001904:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001908:	f000 fc8e 	bl	8002228 <bufferCreate>
 800190c:	4603      	mov	r3, r0
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <uartInit+0x24>)
 8001910:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001912:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001916:	f000 fc87 	bl	8002228 <bufferCreate>
 800191a:	4603      	mov	r3, r0
 800191c:	4a02      	ldr	r2, [pc, #8]	; (8001928 <uartInit+0x28>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200002cc 	.word	0x200002cc
 8001928:	200002d0 	.word	0x200002d0

0800192c <uartReceive>:
        hardwareTransmit();
        hardwareReceive();
    }
}

uint16_t uartReceive(uint8_t * const buffer, const uint16_t size) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
    const uint16_t received = bufferPopValues(rxBuffer, buffer, size);
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <uartReceive+0x38>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	887a      	ldrh	r2, [r7, #2]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fd35 	bl	80023b0 <bufferPopValues>
 8001946:	4603      	mov	r3, r0
 8001948:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <uartReceive+0x3c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <uartReceive+0x2c>
        hardwareReceiveIT();
 8001954:	f000 f81c 	bl	8001990 <hardwareReceiveIT>
    }
    return received;
 8001958:	89fb      	ldrh	r3, [r7, #14]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200002d0 	.word	0x200002d0
 8001968:	200002d4 	.word	0x200002d4

0800196c <uartEnableInterruption>:

void uartEnableInterruption() {
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
    interruptionsEnabled = 1;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <uartEnableInterruption+0x1c>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
    transmitIntEnd = 1;
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <uartEnableInterruption+0x20>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
    hardwareTransmitIT();
 800197c:	f000 f80e 	bl	800199c <hardwareTransmitIT>
    hardwareReceiveIT();
 8001980:	f000 f806 	bl	8001990 <hardwareReceiveIT>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200002d4 	.word	0x200002d4
 800198c:	20000094 	.word	0x20000094

08001990 <hardwareReceiveIT>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareReceiveIT() {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
    uartHardwareReceiveInterrupt();
 8001994:	f000 ff60 	bl	8002858 <uartHardwareReceiveInterrupt>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <hardwareTransmitIT>:

static void hardwareTransmitIT() {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
    if (!transmitIntEnd)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <hardwareTransmitIT+0x48>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d016      	beq.n	80019da <hardwareTransmitIT+0x3e>
        return;

    if (bufferHasValues(txBuffer)) {
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <hardwareTransmitIT+0x4c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fcec 	bl	800238e <bufferHasValues>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00f      	beq.n	80019dc <hardwareTransmitIT+0x40>
        transmitIntEnd = 0;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <hardwareTransmitIT+0x48>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
        uint8_t data = bufferPop(txBuffer);
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <hardwareTransmitIT+0x4c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fc9f 	bl	800230a <bufferPop>
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
        uartHardwareTransmitInterrupt(data);
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 ff18 	bl	8002808 <uartHardwareTransmitInterrupt>
 80019d8:	e000      	b.n	80019dc <hardwareTransmitIT+0x40>
        return;
 80019da:	bf00      	nop
    }
}
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000094 	.word	0x20000094
 80019e8:	200002cc 	.word	0x200002cc

080019ec <uartReceiveIntCallback>:
        if (uartHardwareTransmitPolling(byte, 5))
            bufferPop(txBuffer);
    }
}

extern void uartReceiveIntCallback(uint8_t data) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
    if (bufferGetFreeSize(rxBuffer) > 0) {
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <uartReceiveIntCallback+0x50>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fd15 	bl	800242a <bufferGetFreeSize>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <uartReceiveIntCallback+0x28>
        bufferPush(rxBuffer, data);
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <uartReceiveIntCallback+0x50>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fc27 	bl	8002262 <bufferPush>
    }
    if (!isRxStarted()) rxStarted = 1;
 8001a14:	f000 f82a 	bl	8001a6c <isRxStarted>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <uartReceiveIntCallback+0x38>
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <uartReceiveIntCallback+0x54>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <uartReceiveIntCallback+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <uartReceiveIntCallback+0x46>
        hardwareReceiveIT();
 8001a2e:	f7ff ffaf 	bl	8001990 <hardwareReceiveIT>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002d0 	.word	0x200002d0
 8001a40:	200002d5 	.word	0x200002d5
 8001a44:	200002d4 	.word	0x200002d4

08001a48 <uartTransmitIntCallback>:

extern void uartTransmitIntCallback() {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    transmitIntEnd = 1;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <uartTransmitIntCallback+0x1c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <uartTransmitIntCallback+0x20>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <uartTransmitIntCallback+0x18>
        hardwareTransmitIT();
 8001a5c:	f7ff ff9e 	bl	800199c <hardwareTransmitIT>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000094 	.word	0x20000094
 8001a68:	200002d4 	.word	0x200002d4

08001a6c <isRxStarted>:

uint16_t rxBufToProgBuf(uint8_t* buf) {
	return bufferPopValues(rxBuffer, buf, bufferGetSize(rxBuffer));
}

uint8_t isRxStarted() {
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
	return rxStarted;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <isRxStarted+0x14>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	200002d5 	.word	0x200002d5

08001a84 <lwip_tcp_init>:
err_t poll_callback(void *arg, struct tcp_pcb *tpcb);
err_t sent_callback(void *arg, struct tcp_pcb *tpcb, u16_t len);
void send(struct tcp_pcb *tpcb, struct conn_state *es);
void conn_close(struct tcp_pcb *tpcb, struct conn_state *es);

void lwip_tcp_init(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
  tpcb = tcp_new();
 8001a8a:	f008 fbcb 	bl	800a224 <tcp_new>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <lwip_tcp_init+0x5c>)
 8001a92:	6013      	str	r3, [r2, #0]
  if (tpcb != NULL) {
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <lwip_tcp_init+0x5c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01d      	beq.n	8001ad8 <lwip_tcp_init+0x54>
    err_t err;
	ip4_addr_t ip_addr;
	IP4_ADDR(&ip_addr, 169, 254, 8, 45);
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <lwip_tcp_init+0x60>)
 8001a9e:	603b      	str	r3, [r7, #0]
    err = tcp_bind(tpcb, &ip_addr, 80);
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <lwip_tcp_init+0x5c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4639      	mov	r1, r7
 8001aa6:	2250      	movs	r2, #80	; 0x50
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f007 fc3b 	bl	8009324 <tcp_bind>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK) {
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10e      	bne.n	8001ad8 <lwip_tcp_init+0x54>
      tpcb = tcp_listen(tpcb);
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <lwip_tcp_init+0x5c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	21ff      	movs	r1, #255	; 0xff
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f007 fcd1 	bl	8009468 <tcp_listen_with_backlog>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <lwip_tcp_init+0x5c>)
 8001aca:	6013      	str	r3, [r2, #0]
      tcp_accept(tpcb, accept_callback);
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <lwip_tcp_init+0x5c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4905      	ldr	r1, [pc, #20]	; (8001ae8 <lwip_tcp_init+0x64>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f008 fc24 	bl	800a320 <tcp_accept>
      /* abort? output diagnostic? */
    }
  } else {
    /* abort? output diagnostic? */
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000031c 	.word	0x2000031c
 8001ae4:	2d08fea9 	.word	0x2d08fea9
 8001ae8:	08001aed 	.word	0x08001aed

08001aec <accept_callback>:


err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001afa:	2101      	movs	r1, #1
 8001afc:	68b8      	ldr	r0, [r7, #8]
 8001afe:	f008 fa05 	bl	8009f0c <tcp_setprio>

  es = (struct conn_state *)mem_malloc(sizeof(struct conn_state));
 8001b02:	200c      	movs	r0, #12
 8001b04:	f006 f81e 	bl	8007b44 <mem_malloc>
 8001b08:	6138      	str	r0, [r7, #16]
  if (es != NULL) {
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01f      	beq.n	8001b50 <accept_callback+0x64>
    es->state = CONN_ACCEPTED;
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 8001b28:	6939      	ldr	r1, [r7, #16]
 8001b2a:	68b8      	ldr	r0, [r7, #8]
 8001b2c:	f008 fb82 	bl	800a234 <tcp_arg>
    tcp_recv(newpcb, recv_callback);
 8001b30:	490b      	ldr	r1, [pc, #44]	; (8001b60 <accept_callback+0x74>)
 8001b32:	68b8      	ldr	r0, [r7, #8]
 8001b34:	f008 fb90 	bl	800a258 <tcp_recv>
    tcp_err(newpcb, error_callback);
 8001b38:	490a      	ldr	r1, [pc, #40]	; (8001b64 <accept_callback+0x78>)
 8001b3a:	68b8      	ldr	r0, [r7, #8]
 8001b3c:	f008 fbce 	bl	800a2dc <tcp_err>
    tcp_poll(newpcb, poll_callback, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	4909      	ldr	r1, [pc, #36]	; (8001b68 <accept_callback+0x7c>)
 8001b44:	68b8      	ldr	r0, [r7, #8]
 8001b46:	f008 fc03 	bl	800a350 <tcp_poll>
    ret_err = ERR_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
 8001b4e:	e001      	b.n	8001b54 <accept_callback+0x68>
  } else {
    ret_err = ERR_MEM;
 8001b50:	23ff      	movs	r3, #255	; 0xff
 8001b52:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001b54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	08001b6d 	.word	0x08001b6d
 8001b64:	08001ca9 	.word	0x08001ca9
 8001b68:	08001ccd 	.word	0x08001ccd

08001b6c <recv_callback>:

err_t recv_callback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	70fb      	strb	r3, [r7, #3]
  struct conn_state *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <recv_callback+0x20>
 8001b80:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <recv_callback+0x12c>)
 8001b82:	2253      	movs	r2, #83	; 0x53
 8001b84:	4945      	ldr	r1, [pc, #276]	; (8001c9c <recv_callback+0x130>)
 8001b86:	4846      	ldr	r0, [pc, #280]	; (8001ca0 <recv_callback+0x134>)
 8001b88:	f00f f90a 	bl	8010da0 <iprintf>
  es = (struct conn_state *)arg;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	61bb      	str	r3, [r7, #24]
  if (p == NULL) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <recv_callback+0x58>
    /* remote host closed connection */
    es->state = CONN_CLOSING;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL) {
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d104      	bne.n	8001bae <recv_callback+0x42>
       /* we're done sending, close it */
       conn_close(tpcb, es);
 8001ba4:	69b9      	ldr	r1, [r7, #24]
 8001ba6:	68b8      	ldr	r0, [r7, #8]
 8001ba8:	f000 f936 	bl	8001e18 <conn_close>
 8001bac:	e007      	b.n	8001bbe <recv_callback+0x52>
    } else {
      /* we're not done yet */
      tcp_sent(tpcb, sent_callback);
 8001bae:	493d      	ldr	r1, [pc, #244]	; (8001ca4 <recv_callback+0x138>)
 8001bb0:	68b8      	ldr	r0, [r7, #8]
 8001bb2:	f008 fb73 	bl	800a29c <tcp_sent>
      send(tpcb, es);
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	68b8      	ldr	r0, [r7, #8]
 8001bba:	f000 f8df 	bl	8001d7c <send>
    }
    ret_err = ERR_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	77fb      	strb	r3, [r7, #31]
 8001bc2:	e063      	b.n	8001c8c <recv_callback+0x120>
  } else if(err != ERR_OK) {
 8001bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <recv_callback+0x78>
    /* cleanup, for unknown reason */
    if (p != NULL) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <recv_callback+0x72>
      es->p = NULL;
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f006 fe8b 	bl	80088f4 <pbuf_free>
    }
    ret_err = err;
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	77fb      	strb	r3, [r7, #31]
 8001be2:	e053      	b.n	8001c8c <recv_callback+0x120>
  } else if(es->state == CONN_ACCEPTED) {
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d110      	bne.n	8001c0e <recv_callback+0xa2>
    /* first data chunk in p->payload */
    es->state = CONN_RECEIVED;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	701a      	strb	r2, [r3, #0]
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
    /* install send completion notifier */
    tcp_sent(tpcb, sent_callback);
 8001bf8:	492a      	ldr	r1, [pc, #168]	; (8001ca4 <recv_callback+0x138>)
 8001bfa:	68b8      	ldr	r0, [r7, #8]
 8001bfc:	f008 fb4e 	bl	800a29c <tcp_sent>
    send(tpcb, es);
 8001c00:	69b9      	ldr	r1, [r7, #24]
 8001c02:	68b8      	ldr	r0, [r7, #8]
 8001c04:	f000 f8ba 	bl	8001d7c <send>
    ret_err = ERR_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	77fb      	strb	r3, [r7, #31]
 8001c0c:	e03e      	b.n	8001c8c <recv_callback+0x120>
  } else if (es->state == CONN_RECEIVED) {
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d119      	bne.n	8001c4a <recv_callback+0xde>
    /* read some more data */
    if(es->p == NULL) {
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10b      	bne.n	8001c36 <recv_callback+0xca>
      es->p = p;
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
      tcp_sent(tpcb, sent_callback);
 8001c24:	491f      	ldr	r1, [pc, #124]	; (8001ca4 <recv_callback+0x138>)
 8001c26:	68b8      	ldr	r0, [r7, #8]
 8001c28:	f008 fb38 	bl	800a29c <tcp_sent>
      send(tpcb, es);
 8001c2c:	69b9      	ldr	r1, [r7, #24]
 8001c2e:	68b8      	ldr	r0, [r7, #8]
 8001c30:	f000 f8a4 	bl	8001d7c <send>
 8001c34:	e006      	b.n	8001c44 <recv_callback+0xd8>
    } else {
      struct pbuf *ptr;
      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f006 ff7c 	bl	8008b3c <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	77fb      	strb	r3, [r7, #31]
 8001c48:	e020      	b.n	8001c8c <recv_callback+0x120>
  } else if(es->state == CONN_CLOSING) {
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d10e      	bne.n	8001c70 <recv_callback+0x104>
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	891b      	ldrh	r3, [r3, #8]
 8001c56:	4619      	mov	r1, r3
 8001c58:	68b8      	ldr	r0, [r7, #8]
 8001c5a:	f007 fcfd 	bl	8009658 <tcp_recved>
    es->p = NULL;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f006 fe45 	bl	80088f4 <pbuf_free>
    ret_err = ERR_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	77fb      	strb	r3, [r7, #31]
 8001c6e:	e00d      	b.n	8001c8c <recv_callback+0x120>
  } else {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	891b      	ldrh	r3, [r3, #8]
 8001c74:	4619      	mov	r1, r3
 8001c76:	68b8      	ldr	r0, [r7, #8]
 8001c78:	f007 fcee 	bl	8009658 <tcp_recved>
    es->p = NULL;
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f006 fe36 	bl	80088f4 <pbuf_free>
    ret_err = ERR_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001c8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	08012184 	.word	0x08012184
 8001c9c:	080121a0 	.word	0x080121a0
 8001ca0:	080121ac 	.word	0x080121ac
 8001ca4:	08001d2d 	.word	0x08001d2d

08001ca8 <error_callback>:

void error_callback(void *arg, err_t err) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  struct conn_state *es;

  LWIP_UNUSED_ARG(err);

  es = (struct conn_state *)arg;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	60fb      	str	r3, [r7, #12]
  if (es != NULL) {
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <error_callback+0x1c>
    mem_free(es);
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f005 fe02 	bl	80078c8 <mem_free>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <poll_callback>:

err_t poll_callback(void *arg, struct tcp_pcb *tpcb) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct conn_state *es;

  es = (struct conn_state *)arg;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60bb      	str	r3, [r7, #8]
  if (es != NULL) {
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d017      	beq.n	8001d10 <poll_callback+0x44>
    if (es->p != NULL) {
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <poll_callback+0x2e>
      /* there is a remaining pbuf (chain)  */
      tcp_sent(tpcb, sent_callback);
 8001ce8:	490f      	ldr	r1, [pc, #60]	; (8001d28 <poll_callback+0x5c>)
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f008 fad6 	bl	800a29c <tcp_sent>
      send(tpcb, es);
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6838      	ldr	r0, [r7, #0]
 8001cf4:	f000 f842 	bl	8001d7c <send>
 8001cf8:	e007      	b.n	8001d0a <poll_callback+0x3e>
    } else {
      /* no remaining pbuf (chain)  */
      if(es->state == CONN_CLOSING) {
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d103      	bne.n	8001d0a <poll_callback+0x3e>
        conn_close(tpcb, es);
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	6838      	ldr	r0, [r7, #0]
 8001d06:	f000 f887 	bl	8001e18 <conn_close>
      }
    }
    ret_err = ERR_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e004      	b.n	8001d1a <poll_callback+0x4e>
  } else {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001d10:	6838      	ldr	r0, [r7, #0]
 8001d12:	f007 fafb 	bl	800930c <tcp_abort>
    ret_err = ERR_ABRT;
 8001d16:	23f3      	movs	r3, #243	; 0xf3
 8001d18:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	08001d2d 	.word	0x08001d2d

08001d2c <sent_callback>:

err_t sent_callback(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80fb      	strh	r3, [r7, #6]
  struct conn_state *es;

  LWIP_UNUSED_ARG(len);

  es = (struct conn_state *)arg;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2200      	movs	r2, #0
 8001d42:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL) {
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <sent_callback+0x32>
    /* still got pbufs to send */
    tcp_sent(tpcb, sent_callback);
 8001d4c:	490a      	ldr	r1, [pc, #40]	; (8001d78 <sent_callback+0x4c>)
 8001d4e:	68b8      	ldr	r0, [r7, #8]
 8001d50:	f008 faa4 	bl	800a29c <tcp_sent>
    send(tpcb, es);
 8001d54:	6979      	ldr	r1, [r7, #20]
 8001d56:	68b8      	ldr	r0, [r7, #8]
 8001d58:	f000 f810 	bl	8001d7c <send>
 8001d5c:	e007      	b.n	8001d6e <sent_callback+0x42>
  } else {
    /* no more pbufs to send */
    if(es->state == CONN_CLOSING) {
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d103      	bne.n	8001d6e <sent_callback+0x42>
      conn_close(tpcb, es);
 8001d66:	6979      	ldr	r1, [r7, #20]
 8001d68:	68b8      	ldr	r0, [r7, #8]
 8001d6a:	f000 f855 	bl	8001e18 <conn_close>
    }
  }
  return ERR_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	08001d2d 	.word	0x08001d2d

08001d7c <send>:

void send(struct tcp_pcb *tpcb, struct conn_state *es) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8001d8a:	e031      	b.n	8001df0 <send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb))) {
  ptr = es->p;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]

  /* enqueue data for transmission */
  char* answer = handle_packet(tpcb, ptr);
 8001d92:	6939      	ldr	r1, [r7, #16]
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f867 	bl	8001e68 <handle_packet>
 8001d9a:	60f8      	str	r0, [r7, #12]
  if (answer != NULL) {
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <send+0x3a>
	  tcp_write(tpcb, answer, strlen(answer), TCP_WRITE_FLAG_COPY);
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7fe fa2e 	bl	8000204 <strlen>
 8001da8:	4603      	mov	r3, r0
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	2301      	movs	r3, #1
 8001dae:	68f9      	ldr	r1, [r7, #12]
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f00b f87f 	bl	800ceb4 <tcp_write>
  }

  u16_t plen;
  u8_t freed;

  plen = ptr->len;
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	895b      	ldrh	r3, [r3, #10]
 8001dba:	817b      	strh	r3, [r7, #10]
  /* continue with next pbuf in chain (if any) */
  es->p = ptr->next;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	609a      	str	r2, [r3, #8]
  if(es->p != NULL) {
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <send+0x5a>
     /* new reference! */
     pbuf_ref(es->p);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 fe3b 	bl	8008a4c <pbuf_ref>
  } do { // chop first pbuf from chain
     /* try hard to free pbuf */
     freed = pbuf_free(ptr);
 8001dd6:	6938      	ldr	r0, [r7, #16]
 8001dd8:	f006 fd8c 	bl	80088f4 <pbuf_free>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	727b      	strb	r3, [r7, #9]
  } while(freed == 0);
 8001de0:	7a7b      	ldrb	r3, [r7, #9]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f7      	beq.n	8001dd6 <send+0x5a>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	4619      	mov	r1, r3
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f007 fc34 	bl	8009658 <tcp_recved>
  while ((wr_err == ERR_OK) &&
 8001df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <send+0x94>
         (es->p != NULL) &&
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb))) {
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	895a      	ldrh	r2, [r3, #10]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d9bd      	bls.n	8001d8c <send+0x10>
  }
}
 8001e10:	bf00      	nop
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <conn_close>:

void conn_close(struct tcp_pcb *tpcb, struct conn_state *es) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  tcp_arg(tpcb, NULL);
 8001e22:	2100      	movs	r1, #0
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f008 fa05 	bl	800a234 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f008 fa35 	bl	800a29c <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001e32:	2100      	movs	r1, #0
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f008 fa0f 	bl	800a258 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f008 fa4d 	bl	800a2dc <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f008 fa82 	bl	800a350 <tcp_poll>

  if (es != NULL) {
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <conn_close+0x40>
    mem_free(es);
 8001e52:	6838      	ldr	r0, [r7, #0]
 8001e54:	f005 fd38 	bl	80078c8 <mem_free>
  }
  tcp_close(tpcb);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f007 f98d 	bl	8009178 <tcp_close>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <handle_packet>:

/* Local functions. */
void addRemainingDataToCurrentBuf(uint8_t* receivedData, uint16_t length);
void cutBuf();

char* handle_packet(struct tcp_pcb* tpcb, struct pbuf* p) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
	if (isInputBlocked()) return "busy";
 8001e72:	f7ff facb 	bl	800140c <isInputBlocked>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <handle_packet+0x18>
 8001e7c:	4b8e      	ldr	r3, [pc, #568]	; (80020b8 <handle_packet+0x250>)
 8001e7e:	e117      	b.n	80020b0 <handle_packet+0x248>
	blockInput();
 8001e80:	f7ff faac 	bl	80013dc <blockInput>
	WRITE_REG(IWDG->KR, 0x0000AAAAU);
 8001e84:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <handle_packet+0x254>)
 8001e86:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001e8a:	601a      	str	r2, [r3, #0]
	if (p == NULL || p->len <= 0 || p->payload == NULL) return "handle error";
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <handle_packet+0x3a>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	895b      	ldrh	r3, [r3, #10]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <handle_packet+0x3a>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <handle_packet+0x3e>
 8001ea2:	4b87      	ldr	r3, [pc, #540]	; (80020c0 <handle_packet+0x258>)
 8001ea4:	e104      	b.n	80020b0 <handle_packet+0x248>
	uint8_t header;
	uint8_t* data = NULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
	uint16_t length = p->len - 1;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	895b      	ldrh	r3, [r3, #10]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	827b      	strh	r3, [r7, #18]
	memcpy(&header, p->payload, 1);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	743b      	strb	r3, [r7, #16]
	if (length > 0) {
 8001eba:	8a7b      	ldrh	r3, [r7, #18]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <handle_packet+0x74>
		data = malloc(sizeof(uint8_t) * length);
 8001ec0:	8a7b      	ldrh	r3, [r7, #18]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f00e fe56 	bl	8010b74 <malloc>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	617b      	str	r3, [r7, #20]
		memcpy(data, p->payload + 1, length);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	8a7a      	ldrh	r2, [r7, #18]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f00e fe6c 	bl	8010bb4 <memcpy>
	}
	if (tr_status == CODE) {
 8001edc:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <handle_packet+0x25c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d16d      	bne.n	8001fc0 <handle_packet+0x158>
		switch (header) {
 8001ee4:	7c3b      	ldrb	r3, [r7, #16]
 8001ee6:	2b63      	cmp	r3, #99	; 0x63
 8001ee8:	d025      	beq.n	8001f36 <handle_packet+0xce>
 8001eea:	2b63      	cmp	r3, #99	; 0x63
 8001eec:	dc5e      	bgt.n	8001fac <handle_packet+0x144>
 8001eee:	2b43      	cmp	r3, #67	; 0x43
 8001ef0:	d04c      	beq.n	8001f8c <handle_packet+0x124>
 8001ef2:	2b43      	cmp	r3, #67	; 0x43
 8001ef4:	dc5a      	bgt.n	8001fac <handle_packet+0x144>
 8001ef6:	2b21      	cmp	r3, #33	; 0x21
 8001ef8:	d006      	beq.n	8001f08 <handle_packet+0xa0>
 8001efa:	2b21      	cmp	r3, #33	; 0x21
 8001efc:	dc56      	bgt.n	8001fac <handle_packet+0x144>
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d02c      	beq.n	8001f5c <handle_packet+0xf4>
 8001f02:	2b10      	cmp	r3, #16
 8001f04:	d038      	beq.n	8001f78 <handle_packet+0x110>
 8001f06:	e051      	b.n	8001fac <handle_packet+0x144>
			case JUMP:
				if(!data) free(data);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <handle_packet+0xac>
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f00e fe38 	bl	8010b84 <free>
				validateApplications();
 8001f14:	f7fe fc58 	bl	80007c8 <validateApplications>
				if (getLatestApplicationAddress() == 0) {
 8001f18:	f7fe fbae 	bl	8000678 <getLatestApplicationAddress>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <handle_packet+0xc2>
					unblockInput();
 8001f22:	f7ff fa67 	bl	80013f4 <unblockInput>
					return "No valid application in flash\n";
 8001f26:	4b68      	ldr	r3, [pc, #416]	; (80020c8 <handle_packet+0x260>)
 8001f28:	e0c2      	b.n	80020b0 <handle_packet+0x248>
				} else {
					unblockInput();
 8001f2a:	f7ff fa63 	bl	80013f4 <unblockInput>
					jumpToApp();
 8001f2e:	f7fe fcbd 	bl	80008ac <jumpToApp>
					return "Done";
 8001f32:	4b66      	ldr	r3, [pc, #408]	; (80020cc <handle_packet+0x264>)
 8001f34:	e0bc      	b.n	80020b0 <handle_packet+0x248>
				}
			case UPDATE:
				validateApplications();
 8001f36:	f7fe fc47 	bl	80007c8 <validateApplications>
				updateConfig();
 8001f3a:	f7fe fbcb 	bl	80006d4 <updateConfig>
				setAppVersion((uint32_t) data[0]);//TODO
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fbfc 	bl	8000740 <setAppVersion>
				free(data);
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f00e fe1b 	bl	8010b84 <free>
				tr_status = DATA;
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <handle_packet+0x25c>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
				unblockInput();
 8001f54:	f7ff fa4e 	bl	80013f4 <unblockInput>
				return "Send hex file: \n";
 8001f58:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <handle_packet+0x268>)
 8001f5a:	e0a9      	b.n	80020b0 <handle_packet+0x248>
			case VER:
				if(!data) free(data);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <handle_packet+0x100>
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f00e fe0e 	bl	8010b84 <free>
				validateApplications();
 8001f68:	f7fe fc2e 	bl	80007c8 <validateApplications>
				unblockInput();
 8001f6c:	f7ff fa42 	bl	80013f4 <unblockInput>
				return getVersions();
 8001f70:	f7fe fb3a 	bl	80005e8 <getVersions>
 8001f74:	4603      	mov	r3, r0
 8001f76:	e09b      	b.n	80020b0 <handle_packet+0x248>
			case HELP:
				if(!data) free(data);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <handle_packet+0x11c>
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f00e fe00 	bl	8010b84 <free>
				unblockInput();
 8001f84:	f7ff fa36 	bl	80013f4 <unblockInput>
				return "jump: jump to application\
 8001f88:	4b52      	ldr	r3, [pc, #328]	; (80020d4 <handle_packet+0x26c>)
 8001f8a:	e091      	b.n	80020b0 <handle_packet+0x248>
				\nupdate <version>: download firmware and jump to it\
				\nversion: get current version of application\
				\nhelp: get information about commands\
				\nclear: erase configs";
			case CLR:
				if(!data) free(data);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d102      	bne.n	8001f98 <handle_packet+0x130>
 8001f92:	6978      	ldr	r0, [r7, #20]
 8001f94:	f00e fdf6 	bl	8010b84 <free>
				EraseSector(CONFIG_1_SECTOR);
 8001f98:	200e      	movs	r0, #14
 8001f9a:	f7fe fd23 	bl	80009e4 <EraseSector>
				EraseSector(CONFIG_2_SECTOR);
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f7fe fd20 	bl	80009e4 <EraseSector>
				unblockInput();
 8001fa4:	f7ff fa26 	bl	80013f4 <unblockInput>
				return "Configs erased\n";
 8001fa8:	4b4b      	ldr	r3, [pc, #300]	; (80020d8 <handle_packet+0x270>)
 8001faa:	e081      	b.n	80020b0 <handle_packet+0x248>
			default:
				if(!data) free(data);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <handle_packet+0x150>
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f00e fde6 	bl	8010b84 <free>
				unblockInput();
 8001fb8:	f7ff fa1c 	bl	80013f4 <unblockInput>
				return "No such command\n";
 8001fbc:	4b47      	ldr	r3, [pc, #284]	; (80020dc <handle_packet+0x274>)
 8001fbe:	e077      	b.n	80020b0 <handle_packet+0x248>
		}
	} else if (tr_status == DATA) {
 8001fc0:	4b40      	ldr	r3, [pc, #256]	; (80020c4 <handle_packet+0x25c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d170      	bne.n	80020aa <handle_packet+0x242>
		if (header == EOT) {
 8001fc8:	7c3b      	ldrb	r3, [r7, #16]
 8001fca:	2bf5      	cmp	r3, #245	; 0xf5
 8001fcc:	d10a      	bne.n	8001fe4 <handle_packet+0x17c>
			tr_status = CODE;
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <handle_packet+0x25c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
			setCorrectUpdateFlag();
 8001fd4:	f7fe fbd6 	bl	8000784 <setCorrectUpdateFlag>
			jumpToApp();
 8001fd8:	f7fe fc68 	bl	80008ac <jumpToApp>
			unblockInput();
 8001fdc:	f7ff fa0a 	bl	80013f4 <unblockInput>
			return "Done";
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <handle_packet+0x264>)
 8001fe2:	e065      	b.n	80020b0 <handle_packet+0x248>
		}
	    /* Add remaining data from previous packet to current data */
		if (length <= 0) {
 8001fe4:	8a7b      	ldrh	r3, [r7, #18]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <handle_packet+0x190>
			tr_status = CODE;
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <handle_packet+0x25c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
			unblockInput();
 8001ff0:	f7ff fa00 	bl	80013f4 <unblockInput>
			return "data empty error";
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <handle_packet+0x278>)
 8001ff6:	e05b      	b.n	80020b0 <handle_packet+0x248>
		}
		addRemainingDataToCurrentBuf(data, length);
 8001ff8:	8a7b      	ldrh	r3, [r7, #18]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6978      	ldr	r0, [r7, #20]
 8001ffe:	f000 f87d 	bl	80020fc <addRemainingDataToCurrentBuf>

	    /* Remove unfinished line from flashBuf and place it to remaining data */
	    cutBuf();
 8002002:	f000 f8c7 	bl	8002194 <cutBuf>

	    /* Move data to flash */
	    uint8_t flashHexCode = flashHex(flashBuf, flashBufSize);
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <handle_packet+0x27c>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	4619      	mov	r1, r3
 800200c:	4836      	ldr	r0, [pc, #216]	; (80020e8 <handle_packet+0x280>)
 800200e:	f7fe fdd7 	bl	8000bc0 <flashHex>
 8002012:	4603      	mov	r3, r0
 8002014:	747b      	strb	r3, [r7, #17]
	    uint8_t answer;
	    if (flashHexCode == 0) { //Flash write error   TODO
 8002016:	7c7b      	ldrb	r3, [r7, #17]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d126      	bne.n	800206a <handle_packet+0x202>
	    	err_count++;
 800201c:	4b33      	ldr	r3, [pc, #204]	; (80020ec <handle_packet+0x284>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <handle_packet+0x284>)
 8002026:	701a      	strb	r2, [r3, #0]
	    	if (err_count > 3) {
 8002028:	4b30      	ldr	r3, [pc, #192]	; (80020ec <handle_packet+0x284>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d90c      	bls.n	800204a <handle_packet+0x1e2>
	    		err_count = 0;
 8002030:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <handle_packet+0x284>)
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
	    		free(data);
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f00e fda4 	bl	8010b84 <free>
	    		tr_status = CODE;
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <handle_packet+0x25c>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
	    		unblockInput();
 8002042:	f7ff f9d7 	bl	80013f4 <unblockInput>
	    		return "Flash write error";
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <handle_packet+0x288>)
 8002048:	e032      	b.n	80020b0 <handle_packet+0x248>
	    	}
	    	answer = NACK;
 800204a:	231f      	movs	r3, #31
 800204c:	73fb      	strb	r3, [r7, #15]
	    	tcp_write(tpcb, &answer, 1, 1);
 800204e:	f107 010f 	add.w	r1, r7, #15
 8002052:	2301      	movs	r3, #1
 8002054:	2201      	movs	r2, #1
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f00a ff2c 	bl	800ceb4 <tcp_write>
	    	tcp_output(tpcb);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f00b fbdb 	bl	800d818 <tcp_output>
	    	unblockInput();
 8002062:	f7ff f9c7 	bl	80013f4 <unblockInput>
	    	return NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	e022      	b.n	80020b0 <handle_packet+0x248>
	    }
	    if (flashHexCode == 2) { //Wrong bank firmware error
 800206a:	7c7b      	ldrb	r3, [r7, #17]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d109      	bne.n	8002084 <handle_packet+0x21c>
	    	free(data);
 8002070:	6978      	ldr	r0, [r7, #20]
 8002072:	f00e fd87 	bl	8010b84 <free>
	    	tr_status = CODE;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <handle_packet+0x25c>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
	    	unblockInput();
 800207c:	f7ff f9ba 	bl	80013f4 <unblockInput>
	    	return "wrong bank firmware";
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <handle_packet+0x28c>)
 8002082:	e015      	b.n	80020b0 <handle_packet+0x248>
	    }

	    answer = ACK;
 8002084:	2379      	movs	r3, #121	; 0x79
 8002086:	73fb      	strb	r3, [r7, #15]
		tcp_write(tpcb, &answer, 1, 1);
 8002088:	f107 010f 	add.w	r1, r7, #15
 800208c:	2301      	movs	r3, #1
 800208e:	2201      	movs	r2, #1
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f00a ff0f 	bl	800ceb4 <tcp_write>
		tcp_output(tpcb); //TODO
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f00b fbbe 	bl	800d818 <tcp_output>
		free(data);
 800209c:	6978      	ldr	r0, [r7, #20]
 800209e:	f00e fd71 	bl	8010b84 <free>
		unblockInput();
 80020a2:	f7ff f9a7 	bl	80013f4 <unblockInput>
		return NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e002      	b.n	80020b0 <handle_packet+0x248>
	}
	unblockInput();
 80020aa:	f7ff f9a3 	bl	80013f4 <unblockInput>
	return "unknown error";
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <handle_packet+0x290>)
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	080121d8 	.word	0x080121d8
 80020bc:	40003000 	.word	0x40003000
 80020c0:	080121e0 	.word	0x080121e0
 80020c4:	200007a6 	.word	0x200007a6
 80020c8:	080121f0 	.word	0x080121f0
 80020cc:	08012210 	.word	0x08012210
 80020d0:	08012218 	.word	0x08012218
 80020d4:	0801222c 	.word	0x0801222c
 80020d8:	080122f0 	.word	0x080122f0
 80020dc:	08012300 	.word	0x08012300
 80020e0:	08012314 	.word	0x08012314
 80020e4:	20000720 	.word	0x20000720
 80020e8:	20000320 	.word	0x20000320
 80020ec:	200007a7 	.word	0x200007a7
 80020f0:	08012328 	.word	0x08012328
 80020f4:	0801233c 	.word	0x0801233c
 80020f8:	08012350 	.word	0x08012350

080020fc <addRemainingDataToCurrentBuf>:

void addRemainingDataToCurrentBuf(uint8_t* receivedData, uint16_t length) {
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	if (remainingDataSize != 0) {
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <addRemainingDataToCurrentBuf+0x88>)
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d010      	beq.n	8002132 <addRemainingDataToCurrentBuf+0x36>
		for (i = 0; i < remainingDataSize; i++) {
 8002110:	2300      	movs	r3, #0
 8002112:	81fb      	strh	r3, [r7, #14]
 8002114:	e008      	b.n	8002128 <addRemainingDataToCurrentBuf+0x2c>
			flashBuf[i] = remainingDataBuf[i];
 8002116:	89fa      	ldrh	r2, [r7, #14]
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	491b      	ldr	r1, [pc, #108]	; (8002188 <addRemainingDataToCurrentBuf+0x8c>)
 800211c:	5c89      	ldrb	r1, [r1, r2]
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <addRemainingDataToCurrentBuf+0x90>)
 8002120:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < remainingDataSize; i++) {
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	3301      	adds	r3, #1
 8002126:	81fb      	strh	r3, [r7, #14]
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <addRemainingDataToCurrentBuf+0x88>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	89fa      	ldrh	r2, [r7, #14]
 800212e:	429a      	cmp	r2, r3
 8002130:	d3f1      	bcc.n	8002116 <addRemainingDataToCurrentBuf+0x1a>
		}
	}
	flashBufSize = remainingDataSize;
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <addRemainingDataToCurrentBuf+0x88>)
 8002134:	881a      	ldrh	r2, [r3, #0]
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <addRemainingDataToCurrentBuf+0x94>)
 8002138:	801a      	strh	r2, [r3, #0]
	remainingDataSize = 0;
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <addRemainingDataToCurrentBuf+0x88>)
 800213c:	2200      	movs	r2, #0
 800213e:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < length; i++) {
 8002140:	2300      	movs	r3, #0
 8002142:	81fb      	strh	r3, [r7, #14]
 8002144:	e00d      	b.n	8002162 <addRemainingDataToCurrentBuf+0x66>
		flashBuf[flashBufSize + i] = receivedData[i];
 8002146:	89fb      	ldrh	r3, [r7, #14]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	441a      	add	r2, r3
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <addRemainingDataToCurrentBuf+0x94>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	440b      	add	r3, r1
 8002156:	7811      	ldrb	r1, [r2, #0]
 8002158:	4a0c      	ldr	r2, [pc, #48]	; (800218c <addRemainingDataToCurrentBuf+0x90>)
 800215a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < length; i++) {
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	3301      	adds	r3, #1
 8002160:	81fb      	strh	r3, [r7, #14]
 8002162:	89fa      	ldrh	r2, [r7, #14]
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	429a      	cmp	r2, r3
 8002168:	d3ed      	bcc.n	8002146 <addRemainingDataToCurrentBuf+0x4a>
	}
	flashBufSize += length;
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <addRemainingDataToCurrentBuf+0x94>)
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	4413      	add	r3, r2
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <addRemainingDataToCurrentBuf+0x94>)
 8002176:	801a      	strh	r2, [r3, #0]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	200007a4 	.word	0x200007a4
 8002188:	20000724 	.word	0x20000724
 800218c:	20000320 	.word	0x20000320
 8002190:	20000720 	.word	0x20000720

08002194 <cutBuf>:

void cutBuf() {
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t linePtr;

	for (i = flashBufSize - 1; i >= 0; i--) {
 800219a:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <cutBuf+0x84>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	80fb      	strh	r3, [r7, #6]
		if (flashBuf[i] == '\n') {
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	4a1d      	ldr	r2, [pc, #116]	; (800221c <cutBuf+0x88>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	2b0a      	cmp	r3, #10
 80021aa:	d110      	bne.n	80021ce <cutBuf+0x3a>
			linePtr = i;
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	80bb      	strh	r3, [r7, #4]
			break;
 80021b0:	bf00      	nop
		}
	}
	remainingDataSize = flashBufSize - linePtr - 1;
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <cutBuf+0x84>)
 80021b4:	881a      	ldrh	r2, [r3, #0]
 80021b6:	88bb      	ldrh	r3, [r7, #4]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <cutBuf+0x8c>)
 80021c2:	801a      	strh	r2, [r3, #0]
	if (remainingDataSize == 0) return;
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <cutBuf+0x8c>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d104      	bne.n	80021d6 <cutBuf+0x42>
 80021cc:	e01f      	b.n	800220e <cutBuf+0x7a>
	for (i = flashBufSize - 1; i >= 0; i--) {
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	80fb      	strh	r3, [r7, #6]
		if (flashBuf[i] == '\n') {
 80021d4:	e7e5      	b.n	80021a2 <cutBuf+0xe>
	flashBufSize -= remainingDataSize;
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <cutBuf+0x84>)
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <cutBuf+0x8c>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <cutBuf+0x84>)
 80021e4:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < remainingDataSize; i++) {
 80021e6:	2300      	movs	r3, #0
 80021e8:	80fb      	strh	r3, [r7, #6]
 80021ea:	e00b      	b.n	8002204 <cutBuf+0x70>
		remainingDataBuf[i] = flashBuf[(linePtr + 1) + i];
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	441a      	add	r2, r3
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	4909      	ldr	r1, [pc, #36]	; (800221c <cutBuf+0x88>)
 80021f8:	5c89      	ldrb	r1, [r1, r2]
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <cutBuf+0x90>)
 80021fc:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < remainingDataSize; i++) {
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	3301      	adds	r3, #1
 8002202:	80fb      	strh	r3, [r7, #6]
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <cutBuf+0x8c>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	88fa      	ldrh	r2, [r7, #6]
 800220a:	429a      	cmp	r2, r3
 800220c:	d3ee      	bcc.n	80021ec <cutBuf+0x58>
	}
}
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	20000720 	.word	0x20000720
 800221c:	20000320 	.word	0x20000320
 8002220:	200007a4 	.word	0x200007a4
 8002224:	20000724 	.word	0x20000724

08002228 <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 8002232:	200c      	movs	r0, #12
 8002234:	f00e fc9e 	bl	8010b74 <malloc>
 8002238:	4603      	mov	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	4618      	mov	r0, r3
 8002240:	f00e fc98 	bl	8010b74 <malloc>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f886 	bl	8002364 <bufferClear>
    return buffer;
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	889a      	ldrh	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	88db      	ldrh	r3, [r3, #6]
 8002276:	429a      	cmp	r2, r3
 8002278:	d21f      	bcs.n	80022ba <bufferPush+0x58>
        disableInt();
 800227a:	f000 f8e7 	bl	800244c <disableInt>

        buffer->data[buffer->ptrIn] = value;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	8812      	ldrh	r2, [r2, #0]
 8002286:	4413      	add	r3, r2
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	88d2      	ldrh	r2, [r2, #6]
 8002296:	fb93 f1f2 	sdiv	r1, r3, r2
 800229a:	fb01 f202 	mul.w	r2, r1, r2
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	889b      	ldrh	r3, [r3, #4]
 80022aa:	3301      	adds	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	809a      	strh	r2, [r3, #4]

        enableInt();
 80022b2:	f000 f8df 	bl	8002474 <enableInt>
        return 1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <bufferPush+0x5a>
    } else
        return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 80022d2:	2300      	movs	r3, #0
 80022d4:	82fb      	strh	r3, [r7, #22]
 80022d6:	e00f      	b.n	80022f8 <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 80022d8:	8afb      	ldrh	r3, [r7, #22]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff ffbd 	bl	8002262 <bufferPush>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <bufferPushValues+0x2e>
            return pushed;
 80022ee:	8afb      	ldrh	r3, [r7, #22]
 80022f0:	e007      	b.n	8002302 <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 80022f2:	8afb      	ldrh	r3, [r7, #22]
 80022f4:	3301      	adds	r3, #1
 80022f6:	82fb      	strh	r3, [r7, #22]
 80022f8:	8afa      	ldrh	r2, [r7, #22]
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d3eb      	bcc.n	80022d8 <bufferPushValues+0x14>
    }
    return pushed;
 8002300:	8afb      	ldrh	r3, [r7, #22]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	889b      	ldrh	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <bufferPop+0x14>
        return 0;
 800231a:	2300      	movs	r3, #0
 800231c:	e01e      	b.n	800235c <bufferPop+0x52>

    disableInt();
 800231e:	f000 f895 	bl	800244c <disableInt>

    buffer->size--;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	889b      	ldrh	r3, [r3, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	8852      	ldrh	r2, [r2, #2]
 8002336:	4413      	add	r3, r2
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	885b      	ldrh	r3, [r3, #2]
 8002340:	3301      	adds	r3, #1
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	88d2      	ldrh	r2, [r2, #6]
 8002346:	fb93 f1f2 	sdiv	r1, r3, r2
 800234a:	fb01 f202 	mul.w	r2, r1, r2
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	805a      	strh	r2, [r3, #2]

    enableInt();
 8002356:	f000 f88d 	bl	8002474 <enableInt>

    return value;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <bufferClear>:

uint8_t bufferPeek(const Buffer * const buffer) {
    return buffer->data[buffer->ptrOut];
}

void bufferClear(Buffer * const buffer) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    disableInt();
 800236c:	f000 f86e 	bl	800244c <disableInt>
    buffer->size = 0;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	805a      	strh	r2, [r3, #2]
    enableInt();
 8002382:	f000 f877 	bl	8002474 <enableInt>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	889b      	ldrh	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	4613      	mov	r3, r2
 80023bc:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff ffe5 	bl	800238e <bufferHasValues>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <bufferPopValues+0x1e>
        return 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e01d      	b.n	800240a <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f81f 	bl	8002412 <bufferGetSize>
 80023d4:	4603      	mov	r3, r0
 80023d6:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 80023d8:	8afa      	ldrh	r2, [r7, #22]
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d901      	bls.n	80023e4 <bufferPopValues+0x34>
        popSize = bufSize;
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	82bb      	strh	r3, [r7, #20]
 80023e8:	e00a      	b.n	8002400 <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 80023ea:	8abb      	ldrh	r3, [r7, #20]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	18d4      	adds	r4, r2, r3
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7ff ff8a 	bl	800230a <bufferPop>
 80023f6:	4603      	mov	r3, r0
 80023f8:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 80023fa:	8abb      	ldrh	r3, [r7, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	82bb      	strh	r3, [r7, #20]
 8002400:	8aba      	ldrh	r2, [r7, #20]
 8002402:	8afb      	ldrh	r3, [r7, #22]
 8002404:	429a      	cmp	r2, r3
 8002406:	d3f0      	bcc.n	80023ea <bufferPopValues+0x3a>
    return popSize;
 8002408:	8afb      	ldrh	r3, [r7, #22]
}
 800240a:	4618      	mov	r0, r3
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}

08002412 <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
    return buffer->size;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	889b      	ldrh	r3, [r3, #4]
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	88da      	ldrh	r2, [r3, #6]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	889b      	ldrh	r3, [r3, #4]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	b29b      	uxth	r3, r3
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <disableInt>:
		bufferPush(destination, var);
	}
	return 1;
}

static void disableInt() {
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002452:	f3ef 8310 	mrs	r3, PRIMASK
 8002456:	607b      	str	r3, [r7, #4]
  return(result);
 8002458:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <disableInt+0x24>)
 800245c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800245e:	b672      	cpsid	i
}
 8002460:	bf00      	nop
    __disable_irq();
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	200007a8 	.word	0x200007a8

08002474 <enableInt>:

static void enableInt() {
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <enableInt+0x20>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f383 8810 	msr	PRIMASK, r3
}
 8002486:	bf00      	nop
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	200007a8 	.word	0x200007a8

08002498 <commandCreate>:
};

static uint8_t parseInt(const char *str, uint32_t *result);
static uint8_t parseOnOffStatus(const char *str, OnOffStatus *result);

Command * commandCreate(const char * const name, const CommandAction action, const CommandArgument argType) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	71fb      	strb	r3, [r7, #7]
    size_t nameLen = strlen(name);
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7fd feac 	bl	8000204 <strlen>
 80024ac:	61f8      	str	r0, [r7, #28]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4618      	mov	r0, r3
 80024b4:	f00e fb5e 	bl	8010b74 <malloc>
 80024b8:	4603      	mov	r3, r0
 80024ba:	61bb      	str	r3, [r7, #24]
    strcpy(nameCopy, name);
 80024bc:	68f9      	ldr	r1, [r7, #12]
 80024be:	69b8      	ldr	r0, [r7, #24]
 80024c0:	f00e fcb6 	bl	8010e30 <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 80024c4:	200c      	movs	r0, #12
 80024c6:	f00e fb55 	bl	8010b74 <malloc>
 80024ca:	4603      	mov	r3, r0
 80024cc:	617b      	str	r3, [r7, #20]
    command->name = nameCopy;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	601a      	str	r2, [r3, #0]
    command->action = action;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	605a      	str	r2, [r3, #4]
    command->argType = argType;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	79fa      	ldrb	r2, [r7, #7]
 80024de:	721a      	strb	r2, [r3, #8]
    return command;
 80024e0:	697b      	ldr	r3, [r7, #20]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <commandExecute>:

const char * commandExecute(const Command * const command, const char * const argument) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
    if (command == NULL || command->action == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <commandExecute+0x18>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <commandExecute+0x1c>
        return NULL;
 8002504:	2300      	movs	r3, #0
 8002506:	e037      	b.n	8002578 <commandExecute+0x8c>
    switch (command->argType) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7a1b      	ldrb	r3, [r3, #8]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d02c      	beq.n	800256a <commandExecute+0x7e>
 8002510:	2b02      	cmp	r3, #2
 8002512:	dc30      	bgt.n	8002576 <commandExecute+0x8a>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <commandExecute+0x32>
 8002518:	2b01      	cmp	r3, #1
 800251a:	d013      	beq.n	8002544 <commandExecute+0x58>
 800251c:	e02b      	b.n	8002576 <commandExecute+0x8a>
        case INT:
        {
            uint32_t intArg;
            if (!parseInt(argument, &intArg))
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	4619      	mov	r1, r3
 8002524:	6838      	ldr	r0, [r7, #0]
 8002526:	f000 f831 	bl	800258c <parseInt>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <commandExecute+0x48>
                return "The argument must be integer\n";
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <commandExecute+0x94>)
 8002532:	e021      	b.n	8002578 <commandExecute+0x8c>
            return (*command->action)(&intArg);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f107 020c 	add.w	r2, r7, #12
 800253c:	4610      	mov	r0, r2
 800253e:	4798      	blx	r3
 8002540:	4603      	mov	r3, r0
 8002542:	e019      	b.n	8002578 <commandExecute+0x8c>
        }
        case ON_OFF:
        {
            OnOffStatus statusArg;
            if (!parseOnOffStatus(argument, &statusArg))
 8002544:	f107 030b 	add.w	r3, r7, #11
 8002548:	4619      	mov	r1, r3
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	f000 f83a 	bl	80025c4 <parseOnOffStatus>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <commandExecute+0x6e>
                return "The argument must be 'on' or 'off'\n";
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <commandExecute+0x98>)
 8002558:	e00e      	b.n	8002578 <commandExecute+0x8c>
            return (*command->action)(&statusArg);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f107 020b 	add.w	r2, r7, #11
 8002562:	4610      	mov	r0, r2
 8002564:	4798      	blx	r3
 8002566:	4603      	mov	r3, r0
 8002568:	e006      	b.n	8002578 <commandExecute+0x8c>
        }
        case NONE:
            return (*command->action)(NULL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2000      	movs	r0, #0
 8002570:	4798      	blx	r3
 8002572:	4603      	mov	r3, r0
 8002574:	e000      	b.n	8002578 <commandExecute+0x8c>
        default:
            return "Unknown argument type\n";
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <commandExecute+0x9c>)
    }
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	08012360 	.word	0x08012360
 8002584:	08012380 	.word	0x08012380
 8002588:	080123a4 	.word	0x080123a4

0800258c <parseInt>:

static uint8_t parseInt(const char * const str, uint32_t * const result) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
    char *endPtr = NULL;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
    *result = strtoul(str, &(endPtr), 10);
 800259a:	f107 030c 	add.w	r3, r7, #12
 800259e:	220a      	movs	r2, #10
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f00e fcbe 	bl	8010f24 <strtoul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	601a      	str	r2, [r3, #0]
    if (endPtr == str) {
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d101      	bne.n	80025ba <parseInt+0x2e>
        return 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <parseInt+0x30>
    }
    return 1;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <parseOnOffStatus>:

static uint8_t parseOnOffStatus(const char *str, OnOffStatus * const result) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
    if (strcmp(str, "on") == 0) {
 80025ce:	490e      	ldr	r1, [pc, #56]	; (8002608 <parseOnOffStatus+0x44>)
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7fd fe0d 	bl	80001f0 <strcmp>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d104      	bne.n	80025e6 <parseOnOffStatus+0x22>
        *result = ON;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
        return 1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00c      	b.n	8002600 <parseOnOffStatus+0x3c>
    } else if (strcmp(str, "off") == 0) {
 80025e6:	4909      	ldr	r1, [pc, #36]	; (800260c <parseOnOffStatus+0x48>)
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7fd fe01 	bl	80001f0 <strcmp>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d104      	bne.n	80025fe <parseOnOffStatus+0x3a>
        *result = OFF;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
        return 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <parseOnOffStatus+0x3c>
    }
    return 0;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	080123bc 	.word	0x080123bc
 800260c:	080123c0 	.word	0x080123c0

08002610 <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <commandGetName+0x12>
        return NULL;
 800261e:	2300      	movs	r3, #0
 8002620:	e001      	b.n	8002626 <commandGetName+0x16>
    return command->name;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <menuInit>:
uint16_t menuSize;

static int32_t commandSepNameFromArg(const char *commandNameWithArg);
static void strTrim(char *str);

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <menuInit+0x60>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d121      	bne.n	800268c <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4618      	mov	r0, r3
 800264e:	f00e fa91 	bl	8010b74 <malloc>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <menuInit+0x60>)
 8002658:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 800265a:	2300      	movs	r3, #0
 800265c:	81fb      	strh	r3, [r7, #14]
 800265e:	e00d      	b.n	800267c <menuInit+0x48>
        menuCommands[i] = commands[i];
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	441a      	add	r2, r3
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <menuInit+0x60>)
 800266a:	6819      	ldr	r1, [r3, #0]
 800266c:	89fb      	ldrh	r3, [r7, #14]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 8002676:	89fb      	ldrh	r3, [r7, #14]
 8002678:	3301      	adds	r3, #1
 800267a:	81fb      	strh	r3, [r7, #14]
 800267c:	89fa      	ldrh	r2, [r7, #14]
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	429a      	cmp	r2, r3
 8002682:	d3ed      	bcc.n	8002660 <menuInit+0x2c>
    }
    menuSize = commandsSize;
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <menuInit+0x64>)
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	8013      	strh	r3, [r2, #0]
 800268a:	e000      	b.n	800268e <menuInit+0x5a>
        return;
 800268c:	bf00      	nop
}
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	200007ac 	.word	0x200007ac
 8002698:	200007b0 	.word	0x200007b0

0800269c <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandNameWithArg) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
    strTrim(commandNameWithArg);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f866 	bl	8002776 <strTrim>
    const int32_t sep = commandSepNameFromArg(commandNameWithArg);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f88a 	bl	80027c4 <commandSepNameFromArg>
 80026b0:	6178      	str	r0, [r7, #20]
    const char *commandArg = NULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    if (sep != -1) {
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d009      	beq.n	80026d2 <menuExecuteCommand+0x36>
        commandNameWithArg[sep] = '\0';
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
        commandArg = commandNameWithArg + sep + 1;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	4413      	add	r3, r2
 80026d0:	61fb      	str	r3, [r7, #28]
    }
    const char * const commandName = commandNameWithArg;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < menuSize; i++) {
 80026d6:	2300      	movs	r3, #0
 80026d8:	837b      	strh	r3, [r7, #26]
 80026da:	e020      	b.n	800271e <menuExecuteCommand+0x82>
        const Command * const command = menuCommands[i];
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <menuExecuteCommand+0x98>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	8b7b      	ldrh	r3, [r7, #26]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <menuExecuteCommand+0x98>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	8b7b      	ldrh	r3, [r7, #26]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff8a 	bl	8002610 <commandGetName>
 80026fc:	4603      	mov	r3, r0
 80026fe:	6939      	ldr	r1, [r7, #16]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd fd75 	bl	80001f0 <strcmp>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <menuExecuteCommand+0x7c>
            return commandExecute(command, commandArg);
 800270c:	69f9      	ldr	r1, [r7, #28]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff feec 	bl	80024ec <commandExecute>
 8002714:	4603      	mov	r3, r0
 8002716:	e008      	b.n	800272a <menuExecuteCommand+0x8e>
    for (uint16_t i = 0; i < menuSize; i++) {
 8002718:	8b7b      	ldrh	r3, [r7, #26]
 800271a:	3301      	adds	r3, #1
 800271c:	837b      	strh	r3, [r7, #26]
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <menuExecuteCommand+0x9c>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	8b7a      	ldrh	r2, [r7, #26]
 8002724:	429a      	cmp	r2, r3
 8002726:	d3d9      	bcc.n	80026dc <menuExecuteCommand+0x40>
        }
    }
    return "Command not found, print \"help\" for getting info\n";
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <menuExecuteCommand+0xa0>)
}
 800272a:	4618      	mov	r0, r3
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200007ac 	.word	0x200007ac
 8002738:	200007b0 	.word	0x200007b0
 800273c:	080123c4 	.word	0x080123c4

08002740 <isSpaceChar>:

static uint8_t isSpaceChar(char ch) {
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
    return ch == '\n' || ch == ' ' || ch == '\t' || ch == '\r';
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	2b0a      	cmp	r3, #10
 800274e:	d008      	beq.n	8002762 <isSpaceChar+0x22>
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2b20      	cmp	r3, #32
 8002754:	d005      	beq.n	8002762 <isSpaceChar+0x22>
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	2b09      	cmp	r3, #9
 800275a:	d002      	beq.n	8002762 <isSpaceChar+0x22>
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b0d      	cmp	r3, #13
 8002760:	d101      	bne.n	8002766 <isSpaceChar+0x26>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <isSpaceChar+0x28>
 8002766:	2300      	movs	r3, #0
 8002768:	b2db      	uxtb	r3, r3
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <strTrim>:

static void strTrim(char * const str) {
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(str);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fd fd40 	bl	8000204 <strlen>
 8002784:	4603      	mov	r3, r0
 8002786:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e011      	b.n	80027b4 <strTrim+0x3e>
        if (isSpaceChar(str[i])) {
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ffd1 	bl	8002740 <isSpaceChar>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <strTrim+0x46>
            str[i] = '\0';
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
    for (int32_t i = len - 1; i >= 0; i--) {
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	daea      	bge.n	8002790 <strTrim+0x1a>
 80027ba:	e000      	b.n	80027be <strTrim+0x48>
        } else {
            return;
 80027bc:	bf00      	nop
        }
    }
}
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <commandSepNameFromArg>:

static int32_t commandSepNameFromArg(const char * const commandNameWithArg) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(commandNameWithArg);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7fd fd19 	bl	8000204 <strlen>
 80027d2:	4603      	mov	r3, r0
 80027d4:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3b01      	subs	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e00a      	b.n	80027f4 <commandSepNameFromArg+0x30>
        if (commandNameWithArg[i] == ' ') {
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d101      	bne.n	80027ee <commandSepNameFromArg+0x2a>
            return i;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	e007      	b.n	80027fe <commandSepNameFromArg+0x3a>
    for (int32_t i = len - 1; i >= 0; i--) {
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	daf1      	bge.n	80027de <commandSepNameFromArg+0x1a>
        }
    }
    return -1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <uartHardwareTransmitInterrupt>:

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
}

void uartHardwareTransmitInterrupt(uint8_t buffer) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
	usartHardwareTransmitBuffer = buffer;
 8002812:	4a07      	ldr	r2, [pc, #28]	; (8002830 <uartHardwareTransmitInterrupt+0x28>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002818:	2047      	movs	r0, #71	; 0x47
 800281a:	f000 fc58 	bl	80030ce <HAL_NVIC_EnableIRQ>
	HAL_UART_Transmit_IT(&huart6, &usartHardwareTransmitBuffer, 1);
 800281e:	2201      	movs	r2, #1
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <uartHardwareTransmitInterrupt+0x28>)
 8002822:	4804      	ldr	r0, [pc, #16]	; (8002834 <uartHardwareTransmitInterrupt+0x2c>)
 8002824:	f003 fbaf 	bl	8005f86 <HAL_UART_Transmit_IT>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200007b2 	.word	0x200007b2
 8002834:	200002d8 	.word	0x200002d8

08002838 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_UART_TxCpltCallback+0x1c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d101      	bne.n	800284c <HAL_UART_TxCpltCallback+0x14>
		uartTransmitIntCallback();
 8002848:	f7ff f8fe 	bl	8001a48 <uartTransmitIntCallback>
	}
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200002d8 	.word	0x200002d8

08002858 <uartHardwareReceiveInterrupt>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
}

void uartHardwareReceiveInterrupt() {
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 800285c:	2047      	movs	r0, #71	; 0x47
 800285e:	f000 fc36 	bl	80030ce <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart6, &usartHardwareReceiveBuffer, 1);
 8002862:	2201      	movs	r2, #1
 8002864:	4902      	ldr	r1, [pc, #8]	; (8002870 <uartHardwareReceiveInterrupt+0x18>)
 8002866:	4803      	ldr	r0, [pc, #12]	; (8002874 <uartHardwareReceiveInterrupt+0x1c>)
 8002868:	f003 fbd2 	bl	8006010 <HAL_UART_Receive_IT>
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200007b3 	.word	0x200007b3
 8002874:	200002d8 	.word	0x200002d8

08002878 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_UART_RxCpltCallback+0x24>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d104      	bne.n	8002892 <HAL_UART_RxCpltCallback+0x1a>
    	uartReceiveIntCallback(usartHardwareReceiveBuffer);
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_UART_RxCpltCallback+0x28>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff f8ad 	bl	80019ec <uartReceiveIntCallback>
    }
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200002d8 	.word	0x200002d8
 80028a0:	200007b3 	.word	0x200007b3

080028a4 <xmodemReceive>:
 * @brief   This function is the base of the Xmodem protocol.
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  uint8_t
 */
uint8_t xmodemReceive() {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	717b      	strb	r3, [r7, #5]
    uint8_t error_number = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	713b      	strb	r3, [r7, #4]
    uint8_t header = 0x00u;
 80028b2:	2300      	movs	r3, #0
 80028b4:	71fb      	strb	r3, [r7, #7]
    xmodemPacketNumber = 1u;
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <xmodemReceive+0x10c>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6); //send "C" every 10 sec
 80028bc:	483d      	ldr	r0, [pc, #244]	; (80029b4 <xmodemReceive+0x110>)
 80028be:	f003 f815 	bl	80058ec <HAL_TIM_Base_Start_IT>
    timerWorking = 1;
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <xmodemReceive+0x114>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
    /* Loop until there isn't any error or done. */
    while (status == X_OK) {
 80028c8:	e05d      	b.n	8002986 <xmodemReceive+0xe2>
  	    WRITE_REG(IWDG->KR, 0x0000AAAAU);
 80028ca:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <xmodemReceive+0x118>)
 80028cc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80028d0:	601a      	str	r2, [r3, #0]
	    xmodemBufSize = uartReceive(xmodemBuf, 1);
 80028d2:	2101      	movs	r1, #1
 80028d4:	483a      	ldr	r0, [pc, #232]	; (80029c0 <xmodemReceive+0x11c>)
 80028d6:	f7ff f829 	bl	800192c <uartReceive>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <xmodemReceive+0x120>)
 80028e0:	801a      	strh	r2, [r3, #0]
	    if (xmodemBufSize != 1) continue;
 80028e2:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <xmodemReceive+0x120>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d000      	beq.n	80028ec <xmodemReceive+0x48>
 80028ea:	e04c      	b.n	8002986 <xmodemReceive+0xe2>
	    if (timerWorking) {
 80028ec:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <xmodemReceive+0x114>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <xmodemReceive+0x5c>
	    	HAL_TIM_Base_Stop_IT(&htim6); //stop sending "C"
 80028f4:	482f      	ldr	r0, [pc, #188]	; (80029b4 <xmodemReceive+0x110>)
 80028f6:	f003 f869 	bl	80059cc <HAL_TIM_Base_Stop_IT>
	    	timerWorking = 0;
 80028fa:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <xmodemReceive+0x114>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
	    }
    	HAL_Delay(100);
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	f000 fac9 	bl	8002e98 <HAL_Delay>
        header = xmodemBuf[0];
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <xmodemReceive+0x11c>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	71fb      	strb	r3, [r7, #7]

        xmodem_status packet_status = X_ERROR;
 800290c:	23ff      	movs	r3, #255	; 0xff
 800290e:	71bb      	strb	r3, [r7, #6]
        /* The header can be: SOH, STX, EOT and CAN. */
        switch (header) {
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	2b18      	cmp	r3, #24
 8002914:	d02c      	beq.n	8002970 <xmodemReceive+0xcc>
 8002916:	2b18      	cmp	r3, #24
 8002918:	dc2d      	bgt.n	8002976 <xmodemReceive+0xd2>
 800291a:	2b01      	cmp	r3, #1
 800291c:	d002      	beq.n	8002924 <xmodemReceive+0x80>
 800291e:	2b04      	cmp	r3, #4
 8002920:	d020      	beq.n	8002964 <xmodemReceive+0xc0>
 8002922:	e028      	b.n	8002976 <xmodemReceive+0xd2>
            case X_SOH:
                packet_status = xmodem_handle_packet(header); //If the handling was successful, then send an ACK
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f888 	bl	8002a3c <xmodem_handle_packet>
 800292c:	4603      	mov	r3, r0
 800292e:	71bb      	strb	r3, [r7, #6]
                if (packet_status == X_OK) {
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <xmodemReceive+0x9a>
                	uartTransmitChar(X_ACK);
 8002936:	2006      	movs	r0, #6
 8002938:	f7fe ffb2 	bl	80018a0 <uartTransmitChar>
 800293c:	e023      	b.n	8002986 <xmodemReceive+0xe2>
                } else if (packet_status == X_WRONG_FIRMWARE) {
 800293e:	79bb      	ldrb	r3, [r7, #6]
 8002940:	2b78      	cmp	r3, #120	; 0x78
 8002942:	d107      	bne.n	8002954 <xmodemReceive+0xb0>
                	xmodem_error_handler(&error_number, 0);
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f903 	bl	8002b54 <xmodem_error_handler>
                	status = X_WRONG_FIRMWARE;
 800294e:	2378      	movs	r3, #120	; 0x78
 8002950:	717b      	strb	r3, [r7, #5]
 8002952:	e018      	b.n	8002986 <xmodemReceive+0xe2>
                } else {
                	status = xmodem_error_handler(&error_number, X_MAX_ERRORS); //Error while processing the packet, either send a NAK or do graceful abort
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	2103      	movs	r1, #3
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f8fb 	bl	8002b54 <xmodem_error_handler>
 800295e:	4603      	mov	r3, r0
 8002960:	717b      	strb	r3, [r7, #5]
                }
                break;
 8002962:	e010      	b.n	8002986 <xmodemReceive+0xe2>
            /* End of Transmission. */
            case X_EOT:
            	uartTransmitChar(X_ACK);
 8002964:	2006      	movs	r0, #6
 8002966:	f7fe ff9b 	bl	80018a0 <uartTransmitChar>
            	status = X_DONE;
 800296a:	23aa      	movs	r3, #170	; 0xaa
 800296c:	717b      	strb	r3, [r7, #5]
            	break;
 800296e:	e00a      	b.n	8002986 <xmodemReceive+0xe2>
            /* Abort from host. */
            case X_CAN:
           		status = X_ERROR;
 8002970:	23ff      	movs	r3, #255	; 0xff
 8002972:	717b      	strb	r3, [r7, #5]
           		break;
 8002974:	e007      	b.n	8002986 <xmodemReceive+0xe2>
            default:
            /* Wrong header. */
            	status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	2103      	movs	r1, #3
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f8ea 	bl	8002b54 <xmodem_error_handler>
 8002980:	4603      	mov	r3, r0
 8002982:	717b      	strb	r3, [r7, #5]
            	break;
 8002984:	bf00      	nop
    while (status == X_OK) {
 8002986:	797b      	ldrb	r3, [r7, #5]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d09d      	beq.n	80028ca <xmodemReceive+0x26>
        }
    }
    if (status == X_DONE) return 1;
 800298e:	797b      	ldrb	r3, [r7, #5]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2baa      	cmp	r3, #170	; 0xaa
 8002994:	d101      	bne.n	800299a <xmodemReceive+0xf6>
 8002996:	2301      	movs	r3, #1
 8002998:	e006      	b.n	80029a8 <xmodemReceive+0x104>
    else if (status == X_WRONG_FIRMWARE) return 2;
 800299a:	797b      	ldrb	r3, [r7, #5]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b78      	cmp	r3, #120	; 0x78
 80029a0:	d101      	bne.n	80029a6 <xmodemReceive+0x102>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e000      	b.n	80029a8 <xmodemReceive+0x104>
    else return 0;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000095 	.word	0x20000095
 80029b4:	20000284 	.word	0x20000284
 80029b8:	2000093a 	.word	0x2000093a
 80029bc:	40003000 	.word	0x40003000
 80029c0:	200007b4 	.word	0x200007b4
 80029c4:	200008b4 	.word	0x200008b4

080029c8 <xmodemCalcCrc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodemCalcCrc(uint8_t *data, uint16_t length)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 80029d4:	2300      	movs	r3, #0
 80029d6:	81fb      	strh	r3, [r7, #14]
    while (length)
 80029d8:	e026      	b.n	8002a28 <xmodemCalcCrc+0x60>
    {
        length--;
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	3b01      	subs	r3, #1
 80029de:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029f0:	4053      	eors	r3, r2
 80029f2:	b21b      	sxth	r3, r3
 80029f4:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	737b      	strb	r3, [r7, #13]
 80029fa:	e012      	b.n	8002a22 <xmodemCalcCrc+0x5a>
        {
            if (crc & 0x8000u)
 80029fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da08      	bge.n	8002a16 <xmodemCalcCrc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 8002a04:	89fb      	ldrh	r3, [r7, #14]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002a0e:	f083 0301 	eor.w	r3, r3, #1
 8002a12:	81fb      	strh	r3, [r7, #14]
 8002a14:	e002      	b.n	8002a1c <xmodemCalcCrc+0x54>
            }
            else
            {
                crc = crc << 1u;
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8002a1c:	7b7b      	ldrb	r3, [r7, #13]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	737b      	strb	r3, [r7, #13]
 8002a22:	7b7b      	ldrb	r3, [r7, #13]
 8002a24:	2b07      	cmp	r3, #7
 8002a26:	d9e9      	bls.n	80029fc <xmodemCalcCrc+0x34>
    while (length)
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1d5      	bne.n	80029da <xmodemCalcCrc+0x12>
            }
        }
    }
    return crc;
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <xmodem_handle_packet>:
/**
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b0a6      	sub	sp, #152	; 0x98
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
	uint8_t dataTempBuf[128];
	uint8_t crcBuf[2];
    uint16_t size = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

    /* Receive packet number */
    size = uartReceive(xmodemBuf, 2);
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	483e      	ldr	r0, [pc, #248]	; (8002b48 <xmodem_handle_packet+0x10c>)
 8002a50:	f7fe ff6c 	bl	800192c <uartReceive>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2)
 8002a5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d001      	beq.n	8002a66 <xmodem_handle_packet+0x2a>
    	return X_ERROR_UART;
 8002a62:	2304      	movs	r3, #4
 8002a64:	e06c      	b.n	8002b40 <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] != xmodemPacketNumber)
 8002a66:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <xmodem_handle_packet+0x10c>)
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <xmodem_handle_packet+0x110>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <xmodem_handle_packet+0x3a>
    	return X_ERROR_NUMBER;
 8002a72:	2302      	movs	r3, #2
 8002a74:	e064      	b.n	8002b40 <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] + xmodemBuf[1] != 255)
 8002a76:	4b34      	ldr	r3, [pc, #208]	; (8002b48 <xmodem_handle_packet+0x10c>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4b32      	ldr	r3, [pc, #200]	; (8002b48 <xmodem_handle_packet+0x10c>)
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	4413      	add	r3, r2
 8002a82:	2bff      	cmp	r3, #255	; 0xff
 8002a84:	d001      	beq.n	8002a8a <xmodem_handle_packet+0x4e>
    	return X_ERROR_NUMBER;
 8002a86:	2302      	movs	r3, #2
 8002a88:	e05a      	b.n	8002b40 <xmodem_handle_packet+0x104>

    /* Receive packet data */
    size = uartReceive(dataTempBuf, X_PACKET_128_SIZE);
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe ff4b 	bl	800192c <uartReceive>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != X_PACKET_128_SIZE)
 8002a9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002aa0:	2b80      	cmp	r3, #128	; 0x80
 8002aa2:	d001      	beq.n	8002aa8 <xmodem_handle_packet+0x6c>
    	return X_ERROR_UART;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	e04b      	b.n	8002b40 <xmodem_handle_packet+0x104>

    /* Receive CRC */
    size = uartReceive(crcBuf, 2);
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ff3c 	bl	800192c <uartReceive>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2)
 8002aba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d001      	beq.n	8002ac6 <xmodem_handle_packet+0x8a>
    	return X_ERROR_UART;
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	e03c      	b.n	8002b40 <xmodem_handle_packet+0x104>

    /* Check CRC */
    uint16_t crcMerged = ((uint16_t) crcBuf[0] << 8) | ((uint16_t) crcBuf[1]); //Merge the two bytes of CRC
 8002ac6:	7b3b      	ldrb	r3, [r7, #12]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	7b7b      	ldrb	r3, [r7, #13]
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b21b      	sxth	r3, r3
 8002ad4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    uint16_t crcCalculated = xmodemCalcCrc(dataTempBuf, X_PACKET_128_SIZE);
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff72 	bl	80029c8 <xmodemCalcCrc>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    if (crcMerged != crcCalculated)
 8002aea:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8002aee:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d001      	beq.n	8002afa <xmodem_handle_packet+0xbe>
    	return X_ERROR_CRC;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e022      	b.n	8002b40 <xmodem_handle_packet+0x104>

    /* Add remaining data from previous packet to current data */
    add_remaining_data_to_current_buf(dataTempBuf);
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f862 	bl	8002bc8 <add_remaining_data_to_current_buf>

    /* Remove unfinished line from xmodemBuf and place it to remaining data */
    cut_buf();
 8002b04:	f000 f8aa 	bl	8002c5c <cut_buf>

    /* Move data to flash */
    uint8_t flashHexCode = flashHex(xmodemBuf, xmodemBufSize);
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <xmodem_handle_packet+0x114>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	480e      	ldr	r0, [pc, #56]	; (8002b48 <xmodem_handle_packet+0x10c>)
 8002b10:	f7fe f856 	bl	8000bc0 <flashHex>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
    if (flashHexCode == 0)
 8002b1a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <xmodem_handle_packet+0xea>
    	return X_ERROR_FLASH;
 8002b22:	2308      	movs	r3, #8
 8002b24:	e00c      	b.n	8002b40 <xmodem_handle_packet+0x104>
    if (flashHexCode == 2)
 8002b26:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d101      	bne.n	8002b32 <xmodem_handle_packet+0xf6>
    	return X_WRONG_FIRMWARE;
 8002b2e:	2378      	movs	r3, #120	; 0x78
 8002b30:	e006      	b.n	8002b40 <xmodem_handle_packet+0x104>

    xmodemPacketNumber++;
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <xmodem_handle_packet+0x110>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <xmodem_handle_packet+0x110>)
 8002b3c:	701a      	strb	r2, [r3, #0]
    return X_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3798      	adds	r7, #152	; 0x98
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200007b4 	.word	0x200007b4
 8002b4c:	20000095 	.word	0x20000095
 8002b50:	200008b4 	.word	0x200008b4

08002b54 <xmodem_error_handler>:
 *          Raises the error counter, then if the number of the errors reached critical, do a graceful abort, otherwise send a NAK.
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	70fb      	strb	r3, [r7, #3]
	xmodem_status status = X_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
	/* Raise the error counter. */
	(*error_number)++;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	701a      	strb	r2, [r3, #0]
	/* If the counter reached the max value, then abort. */
	if ((*error_number) >= max_error_number) {
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d808      	bhi.n	8002b8c <xmodem_error_handler+0x38>
		/* Graceful abort. */
		uartTransmitChar(X_CAN);
 8002b7a:	2018      	movs	r0, #24
 8002b7c:	f7fe fe90 	bl	80018a0 <uartTransmitChar>
		uartTransmitChar(X_CAN);
 8002b80:	2018      	movs	r0, #24
 8002b82:	f7fe fe8d 	bl	80018a0 <uartTransmitChar>
		status = X_ERROR;
 8002b86:	23ff      	movs	r3, #255	; 0xff
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	e004      	b.n	8002b96 <xmodem_error_handler+0x42>
	} else { // Otherwise send a NAK for a repeat.
		uartTransmitChar(X_NAK);
 8002b8c:	2015      	movs	r0, #21
 8002b8e:	f7fe fe87 	bl	80018a0 <uartTransmitChar>
		status = X_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
	}
	if (xmodemPacketNumber == 1 && status == X_OK) {
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <xmodem_error_handler+0x68>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <xmodem_error_handler+0x5c>
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <xmodem_error_handler+0x5c>
		HAL_TIM_Base_Start_IT(&htim6);
 8002ba4:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <xmodem_error_handler+0x6c>)
 8002ba6:	f002 fea1 	bl	80058ec <HAL_TIM_Base_Start_IT>
		timerWorking = 1;
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <xmodem_error_handler+0x70>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000095 	.word	0x20000095
 8002bc0:	20000284 	.word	0x20000284
 8002bc4:	2000093a 	.word	0x2000093a

08002bc8 <add_remaining_data_to_current_buf>:


void add_remaining_data_to_current_buf(uint8_t* receivedData) {
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (remainingSize != 0) {
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <add_remaining_data_to_current_buf+0x84>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d011      	beq.n	8002bfc <add_remaining_data_to_current_buf+0x34>
		for (i = 0; i < remainingSize; i++) {
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	e008      	b.n	8002bf0 <add_remaining_data_to_current_buf+0x28>
			xmodemBuf[i] = remainingBuf[i];
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	491b      	ldr	r1, [pc, #108]	; (8002c50 <add_remaining_data_to_current_buf+0x88>)
 8002be4:	5c89      	ldrb	r1, [r1, r2]
 8002be6:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <add_remaining_data_to_current_buf+0x8c>)
 8002be8:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < remainingSize; i++) {
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	3301      	adds	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <add_remaining_data_to_current_buf+0x84>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d3f0      	bcc.n	8002bde <add_remaining_data_to_current_buf+0x16>
		}
	}
	xmodemBufSize = remainingSize;
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <add_remaining_data_to_current_buf+0x84>)
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <add_remaining_data_to_current_buf+0x90>)
 8002c02:	801a      	strh	r2, [r3, #0]
	remainingSize = 0;
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <add_remaining_data_to_current_buf+0x84>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	e00d      	b.n	8002c2c <add_remaining_data_to_current_buf+0x64>
		xmodemBuf[xmodemBufSize + i] = receivedData[i];
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	441a      	add	r2, r3
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <add_remaining_data_to_current_buf+0x90>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	440b      	add	r3, r1
 8002c20:	7811      	ldrb	r1, [r2, #0]
 8002c22:	4a0c      	ldr	r2, [pc, #48]	; (8002c54 <add_remaining_data_to_current_buf+0x8c>)
 8002c24:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	daed      	bge.n	8002c10 <add_remaining_data_to_current_buf+0x48>
	}
	xmodemBufSize += X_PACKET_128_SIZE;
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <add_remaining_data_to_current_buf+0x90>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	3380      	adds	r3, #128	; 0x80
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <add_remaining_data_to_current_buf+0x90>)
 8002c3e:	801a      	strh	r2, [r3, #0]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	20000938 	.word	0x20000938
 8002c50:	200008b8 	.word	0x200008b8
 8002c54:	200007b4 	.word	0x200007b4
 8002c58:	200008b4 	.word	0x200008b4

08002c5c <cut_buf>:

void cut_buf() {
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t linePtr;

	for (i = xmodemBufSize - 1; i >= 0; i--) {
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <cut_buf+0x8c>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <cut_buf+0x90>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	2b0a      	cmp	r3, #10
 8002c74:	d111      	bne.n	8002c9a <cut_buf+0x3e>
			linePtr = i;
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	71bb      	strb	r3, [r7, #6]
			break;
 8002c7a:	bf00      	nop
		}
	}
	remainingSize = xmodemBufSize - linePtr - 1;
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <cut_buf+0x8c>)
 8002c7e:	881a      	ldrh	r2, [r3, #0]
 8002c80:	79bb      	ldrb	r3, [r7, #6]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <cut_buf+0x94>)
 8002c8e:	801a      	strh	r2, [r3, #0]
	if (remainingSize == 0) return;
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <cut_buf+0x94>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <cut_buf+0x46>
 8002c98:	e020      	b.n	8002cdc <cut_buf+0x80>
	for (i = xmodemBufSize - 1; i >= 0; i--) {
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002ca0:	e7e4      	b.n	8002c6c <cut_buf+0x10>
	xmodemBufSize -= remainingSize;
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <cut_buf+0x8c>)
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <cut_buf+0x94>)
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <cut_buf+0x8c>)
 8002cb0:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < remainingSize; i++) {
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	71fb      	strb	r3, [r7, #7]
 8002cb6:	e00b      	b.n	8002cd0 <cut_buf+0x74>
		remainingBuf[i] = xmodemBuf[(linePtr + 1) + i];
 8002cb8:	79bb      	ldrb	r3, [r7, #6]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	441a      	add	r2, r3
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	490a      	ldr	r1, [pc, #40]	; (8002cec <cut_buf+0x90>)
 8002cc4:	5c89      	ldrb	r1, [r1, r2]
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <cut_buf+0x98>)
 8002cc8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < remainingSize; i++) {
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	71fb      	strb	r3, [r7, #7]
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <cut_buf+0x94>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d3ed      	bcc.n	8002cb8 <cut_buf+0x5c>
	}
}
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	200008b4 	.word	0x200008b4
 8002cec:	200007b4 	.word	0x200007b4
 8002cf0:	20000938 	.word	0x20000938
 8002cf4:	200008b8 	.word	0x200008b8

08002cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cfc:	480d      	ldr	r0, [pc, #52]	; (8002d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cfe:	490e      	ldr	r1, [pc, #56]	; (8002d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d04:	e002      	b.n	8002d0c <LoopCopyDataInit>

08002d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0a:	3304      	adds	r3, #4

08002d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d10:	d3f9      	bcc.n	8002d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d12:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d14:	4c0b      	ldr	r4, [pc, #44]	; (8002d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d18:	e001      	b.n	8002d1e <LoopFillZerobss>

08002d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d1c:	3204      	adds	r2, #4

08002d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d20:	d3fb      	bcc.n	8002d1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d22:	f7fe fc9d 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d26:	f00d ff01 	bl	8010b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d2a:	f7fe f93b 	bl	8000fa4 <main>
  bx  lr    
 8002d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d38:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8002d3c:	08014358 	.word	0x08014358
  ldr r2, =_sbss
 8002d40:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8002d44:	20007158 	.word	0x20007158

08002d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d48:	e7fe      	b.n	8002d48 <ADC_IRQHandler>
	...

08002d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_Init+0x40>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <HAL_Init+0x40>)
 8002d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_Init+0x40>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_Init+0x40>)
 8002d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_Init+0x40>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <HAL_Init+0x40>)
 8002d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d74:	2003      	movs	r0, #3
 8002d76:	f000 f983 	bl	8003080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d7a:	200f      	movs	r0, #15
 8002d7c:	f000 f83c 	bl	8002df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d80:	f7fe fb58 	bl	8001434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023c00 	.word	0x40023c00

08002d90 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_DeInit+0x54>)
 8002d96:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_DeInit+0x54>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_DeInit+0x54>)
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_DeInit+0x54>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_DeInit+0x54>)
 8002db2:	f04f 32ff 	mov.w	r2, #4294967295
 8002db6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_DeInit+0x54>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_DeInit+0x54>)
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_DeInit+0x54>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_DeInit+0x54>)
 8002dce:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_DeInit+0x54>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002dda:	f000 f805 	bl	8002de8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800

08002de8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_InitTick+0x54>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_InitTick+0x58>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f967 	bl	80030ea <HAL_SYSTICK_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00e      	b.n	8002e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d80a      	bhi.n	8002e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f000 f92f 	bl	8003096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e38:	4a06      	ldr	r2, [pc, #24]	; (8002e54 <HAL_InitTick+0x5c>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000090 	.word	0x20000090
 8002e50:	2000009c 	.word	0x2000009c
 8002e54:	20000098 	.word	0x20000098

08002e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_IncTick+0x20>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_IncTick+0x24>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <HAL_IncTick+0x24>)
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	2000009c 	.word	0x2000009c
 8002e7c:	2000093c 	.word	0x2000093c

08002e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return uwTick;
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_GetTick+0x14>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	2000093c 	.word	0x2000093c

08002e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff ffee 	bl	8002e80 <HAL_GetTick>
 8002ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d005      	beq.n	8002ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_Delay+0x44>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ebe:	bf00      	nop
 8002ec0:	f7ff ffde 	bl	8002e80 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d8f7      	bhi.n	8002ec0 <HAL_Delay+0x28>
  {
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000009c 	.word	0x2000009c

08002ee0 <__NVIC_SetPriorityGrouping>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_GetPriorityGrouping>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4907      	ldr	r1, [pc, #28]	; (8002f7c <__NVIC_EnableIRQ+0x38>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	; (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	; (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	; 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304c:	d301      	bcc.n	8003052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304e:	2301      	movs	r3, #1
 8003050:	e00f      	b.n	8003072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <SysTick_Config+0x40>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305a:	210f      	movs	r1, #15
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	f7ff ff8e 	bl	8002f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <SysTick_Config+0x40>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306a:	4b04      	ldr	r3, [pc, #16]	; (800307c <SysTick_Config+0x40>)
 800306c:	2207      	movs	r2, #7
 800306e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	e000e010 	.word	0xe000e010

08003080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff29 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a8:	f7ff ff3e 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 80030ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7ff ff8e 	bl	8002fd4 <NVIC_EncodePriority>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff5d 	bl	8002f80 <__NVIC_SetPriority>
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff31 	bl	8002f44 <__NVIC_EnableIRQ>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ffa2 	bl	800303c <SysTick_Config>
 80030f8:	4603      	mov	r3, r0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff feb6 	bl	8002e80 <HAL_GetTick>
 8003114:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d008      	beq.n	8003134 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2280      	movs	r2, #128	; 0x80
 8003126:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e052      	b.n	80031da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0216 	bic.w	r2, r2, #22
 8003142:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003152:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d103      	bne.n	8003164 <HAL_DMA_Abort+0x62>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0208 	bic.w	r2, r2, #8
 8003172:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003184:	e013      	b.n	80031ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003186:	f7ff fe7b 	bl	8002e80 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b05      	cmp	r3, #5
 8003192:	d90c      	bls.n	80031ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2203      	movs	r2, #3
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e015      	b.n	80031da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e4      	bne.n	8003186 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	223f      	movs	r2, #63	; 0x3f
 80031c2:	409a      	lsls	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d004      	beq.n	8003200 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e00c      	b.n	800321a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2205      	movs	r2, #5
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003238:	4ba1      	ldr	r3, [pc, #644]	; (80034c0 <HAL_ETH_Init+0x298>)
 800323a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e182      	b.n	8003554 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f003 ff2c 	bl	80070c0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	4b95      	ldr	r3, [pc, #596]	; (80034c4 <HAL_ETH_Init+0x29c>)
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	4a94      	ldr	r2, [pc, #592]	; (80034c4 <HAL_ETH_Init+0x29c>)
 8003272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003276:	6453      	str	r3, [r2, #68]	; 0x44
 8003278:	4b92      	ldr	r3, [pc, #584]	; (80034c4 <HAL_ETH_Init+0x29c>)
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003284:	4b90      	ldr	r3, [pc, #576]	; (80034c8 <HAL_ETH_Init+0x2a0>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a8f      	ldr	r2, [pc, #572]	; (80034c8 <HAL_ETH_Init+0x2a0>)
 800328a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800328e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003290:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <HAL_ETH_Init+0x2a0>)
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	498b      	ldr	r1, [pc, #556]	; (80034c8 <HAL_ETH_Init+0x2a0>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032b4:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80032b6:	f7ff fde3 	bl	8002e80 <HAL_GetTick>
 80032ba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80032bc:	e011      	b.n	80032e2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80032be:	f7ff fddf 	bl	8002e80 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032cc:	d909      	bls.n	80032e2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2203      	movs	r2, #3
 80032d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e138      	b.n	8003554 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e4      	bne.n	80032be <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f023 031c 	bic.w	r3, r3, #28
 8003302:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003304:	f002 f976 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8003308:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4a6f      	ldr	r2, [pc, #444]	; (80034cc <HAL_ETH_Init+0x2a4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d908      	bls.n	8003324 <HAL_ETH_Init+0xfc>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4a6e      	ldr	r2, [pc, #440]	; (80034d0 <HAL_ETH_Init+0x2a8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d804      	bhi.n	8003324 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f043 0308 	orr.w	r3, r3, #8
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	e027      	b.n	8003374 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4a6a      	ldr	r2, [pc, #424]	; (80034d0 <HAL_ETH_Init+0x2a8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d908      	bls.n	800333e <HAL_ETH_Init+0x116>
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4a64      	ldr	r2, [pc, #400]	; (80034c0 <HAL_ETH_Init+0x298>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d204      	bcs.n	800333e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f043 030c 	orr.w	r3, r3, #12
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	e01a      	b.n	8003374 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	4a5f      	ldr	r2, [pc, #380]	; (80034c0 <HAL_ETH_Init+0x298>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d303      	bcc.n	800334e <HAL_ETH_Init+0x126>
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	4a62      	ldr	r2, [pc, #392]	; (80034d4 <HAL_ETH_Init+0x2ac>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d911      	bls.n	8003372 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4a60      	ldr	r2, [pc, #384]	; (80034d4 <HAL_ETH_Init+0x2ac>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d908      	bls.n	8003368 <HAL_ETH_Init+0x140>
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4a5f      	ldr	r2, [pc, #380]	; (80034d8 <HAL_ETH_Init+0x2b0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d804      	bhi.n	8003368 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e005      	b.n	8003374 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f043 0310 	orr.w	r3, r3, #16
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	e000      	b.n	8003374 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003372:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800337c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003380:	2100      	movs	r1, #0
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fc16 	bl	8003bb4 <HAL_ETH_WritePHYRegister>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003392:	6939      	ldr	r1, [r7, #16]
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fca3 	bl	8003ce0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0d6      	b.n	8003554 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80033a6:	20ff      	movs	r0, #255	; 0xff
 80033a8:	f7ff fd76 	bl	8002e98 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a4 	beq.w	80034fe <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80033b6:	f7ff fd63 	bl	8002e80 <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80033bc:	f107 030c 	add.w	r3, r7, #12
 80033c0:	461a      	mov	r2, r3
 80033c2:	2101      	movs	r1, #1
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fb8d 	bl	8003ae4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80033ca:	f7ff fd59 	bl	8002e80 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d8:	4293      	cmp	r3, r2
 80033da:	d90f      	bls.n	80033fc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80033e0:	6939      	ldr	r1, [r7, #16]
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fc7c 	bl	8003ce0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e0ab      	b.n	8003554 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0da      	beq.n	80033bc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003406:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800340a:	2100      	movs	r1, #0
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fbd1 	bl	8003bb4 <HAL_ETH_WritePHYRegister>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800341c:	6939      	ldr	r1, [r7, #16]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fc5e 	bl	8003ce0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800342c:	2301      	movs	r3, #1
 800342e:	e091      	b.n	8003554 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003430:	f7ff fd26 	bl	8002e80 <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003436:	f107 030c 	add.w	r3, r7, #12
 800343a:	461a      	mov	r2, r3
 800343c:	2101      	movs	r1, #1
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fb50 	bl	8003ae4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003444:	f7ff fd1c 	bl	8002e80 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d90f      	bls.n	8003476 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800345a:	6939      	ldr	r1, [r7, #16]
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fc3f 	bl	8003ce0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e06e      	b.n	8003554 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0da      	beq.n	8003436 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	461a      	mov	r2, r3
 8003486:	211f      	movs	r1, #31
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fb2b 	bl	8003ae4 <HAL_ETH_ReadPHYRegister>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00b      	beq.n	80034ac <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003498:	6939      	ldr	r1, [r7, #16]
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fc20 	bl	8003ce0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80034a8:	2301      	movs	r3, #1
 80034aa:	e053      	b.n	8003554 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d012      	beq.n	80034dc <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	e010      	b.n	80034e2 <HAL_ETH_Init+0x2ba>
 80034c0:	03938700 	.word	0x03938700
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40013800 	.word	0x40013800
 80034cc:	01312cff 	.word	0x01312cff
 80034d0:	02160ebf 	.word	0x02160ebf
 80034d4:	05f5e0ff 	.word	0x05f5e0ff
 80034d8:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
 80034f2:	e026      	b.n	8003542 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	e021      	b.n	8003542 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	08db      	lsrs	r3, r3, #3
 8003504:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800350e:	4313      	orrs	r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	2100      	movs	r1, #0
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fb4c 	bl	8003bb4 <HAL_ETH_WritePHYRegister>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003526:	6939      	ldr	r1, [r7, #16]
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fbd9 	bl	8003ce0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e00c      	b.n	8003554 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800353a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800353e:	f7ff fcab 	bl	8002e98 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003542:	6939      	ldr	r1, [r7, #16]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fbcb 	bl	8003ce0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_ETH_DMATxDescListInit+0x20>
 8003578:	2302      	movs	r3, #2
 800357a:	e051      	b.n	8003620 <HAL_ETH_DMATxDescListInit+0xc4>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e030      	b.n	80035fa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	015b      	lsls	r3, r3, #5
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	4413      	add	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035a8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d105      	bne.n	80035d2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d208      	bcs.n	80035ee <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3301      	adds	r3, #1
 80035e0:	015b      	lsls	r3, r3, #5
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4413      	add	r3, r2
 80035e6:	461a      	mov	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	e002      	b.n	80035f4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3301      	adds	r3, #1
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d3ca      	bcc.n	8003598 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800360c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_ETH_DMARxDescListInit+0x20>
 8003648:	2302      	movs	r3, #2
 800364a:	e055      	b.n	80036f8 <HAL_ETH_DMARxDescListInit+0xcc>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e034      	b.n	80036d2 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	015b      	lsls	r3, r3, #5
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	4413      	add	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003678:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003680:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	461a      	mov	r2, r3
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d105      	bne.n	80036aa <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d208      	bcs.n	80036c6 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3301      	adds	r3, #1
 80036b8:	015b      	lsls	r3, r3, #5
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4413      	add	r3, r2
 80036be:	461a      	mov	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	60da      	str	r2, [r3, #12]
 80036c4:	e002      	b.n	80036cc <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3301      	adds	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d3c6      	bcc.n	8003668 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036e4:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_ETH_TransmitFrame+0x24>
 8003724:	2302      	movs	r3, #2
 8003726:	e0cc      	b.n	80038c2 <HAL_ETH_TransmitFrame+0x1be>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800374e:	2301      	movs	r3, #1
 8003750:	e0b7      	b.n	80038c2 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	da09      	bge.n	8003770 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2212      	movs	r2, #18
 8003760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0a8      	b.n	80038c2 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003776:	4293      	cmp	r3, r2
 8003778:	d915      	bls.n	80037a6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	4a54      	ldr	r2, [pc, #336]	; (80038d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	0a9b      	lsrs	r3, r3, #10
 8003784:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4b51      	ldr	r3, [pc, #324]	; (80038d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800378a:	fba3 1302 	umull	r1, r3, r3, r2
 800378e:	0a9b      	lsrs	r3, r3, #10
 8003790:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3301      	adds	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e001      	b.n	80037aa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80037a6:	2301      	movs	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d11c      	bne.n	80037ea <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80037be:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80037ca:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037da:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	461a      	mov	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80037e8:	e04b      	b.n	8003882 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e044      	b.n	800387a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037fe:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d107      	bne.n	8003816 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003814:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800381e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	3b01      	subs	r3, #1
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	429a      	cmp	r2, r3
 8003828:	d116      	bne.n	8003858 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003838:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	4a25      	ldr	r2, [pc, #148]	; (80038d4 <HAL_ETH_TransmitFrame+0x1d0>)
 800383e:	fb03 f202 	mul.w	r2, r3, r2
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	4413      	add	r3, r2
 8003846:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800384a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003856:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003866:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	461a      	mov	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	3301      	adds	r3, #1
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	429a      	cmp	r2, r3
 8003880:	d3b6      	bcc.n	80037f0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00d      	beq.n	80038b0 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389c:	461a      	mov	r2, r3
 800389e:	2304      	movs	r3, #4
 80038a0:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038aa:	461a      	mov	r2, r3
 80038ac:	2300      	movs	r3, #0
 80038ae:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	ac02b00b 	.word	0xac02b00b
 80038d4:	fffffa0c 	.word	0xfffffa0c

080038d8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_ETH_GetReceivedFrame+0x1a>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e070      	b.n	80039d4 <HAL_ETH_GetReceivedFrame+0xfc>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db5a      	blt.n	80039c2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d030      	beq.n	800397c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	2b01      	cmp	r3, #1
 800392a:	d103      	bne.n	8003934 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	0c1b      	lsrs	r3, r3, #16
 8003944:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003948:	3b04      	subs	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	461a      	mov	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e02b      	b.n	80039d4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003986:	2b00      	cmp	r3, #0
 8003988:	d010      	beq.n	80039ac <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	461a      	mov	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28
 80039aa:	e00a      	b.n	80039c2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	461a      	mov	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d112      	bne.n	8003a20 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f85e 	bl	8003abc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2340      	movs	r3, #64	; 0x40
 8003a0c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a1e:	e01a      	b.n	8003a56 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d111      	bne.n	8003a56 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f838 	bl	8003aa8 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a40:	461a      	mov	r2, r3
 8003a42:	2301      	movs	r3, #1
 8003a44:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a64:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a78:	d112      	bne.n	8003aa0 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f828 	bl	8003ad0 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8e:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	460b      	mov	r3, r1
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b82      	cmp	r3, #130	; 0x82
 8003b04:	d101      	bne.n	8003b0a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
 8003b08:	e050      	b.n	8003bac <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2282      	movs	r2, #130	; 0x82
 8003b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 031c 	and.w	r3, r3, #28
 8003b20:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8a1b      	ldrh	r3, [r3, #16]
 8003b26:	02db      	lsls	r3, r3, #11
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003b30:	897b      	ldrh	r3, [r7, #10]
 8003b32:	019b      	lsls	r3, r3, #6
 8003b34:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f023 0302 	bic.w	r3, r3, #2
 8003b44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b56:	f7ff f993 	bl	8002e80 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b5c:	e015      	b.n	8003b8a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003b5e:	f7ff f98f 	bl	8002e80 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6c:	d309      	bcc.n	8003b82 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e014      	b.n	8003bac <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e4      	bne.n	8003b5e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b42      	cmp	r3, #66	; 0x42
 8003bd4:	d101      	bne.n	8003bda <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e04e      	b.n	8003c78 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2242      	movs	r2, #66	; 0x42
 8003bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f003 031c 	and.w	r3, r3, #28
 8003bf0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8a1b      	ldrh	r3, [r3, #16]
 8003bf6:	02db      	lsls	r3, r3, #11
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003c00:	897b      	ldrh	r3, [r7, #10]
 8003c02:	019b      	lsls	r3, r3, #6
 8003c04:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003c30:	f7ff f926 	bl	8002e80 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c36:	e015      	b.n	8003c64 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003c38:	f7ff f922 	bl	8002e80 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c46:	d309      	bcc.n	8003c5c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e00d      	b.n	8003c78 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e4      	bne.n	8003c38 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_ETH_Start+0x16>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e01f      	b.n	8003cd6 <HAL_ETH_Start+0x56>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa18 	bl	80040dc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fa32 	bl	8004116 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fa78 	bl	80041a8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fa49 	bl	8004150 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa5c 	bl	800417c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b0b0      	sub	sp, #192	; 0xc0
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cfc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d04:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d2c:	e001      	b.n	8003d32 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d36:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003d4c:	2340      	movs	r3, #64	; 0x40
 8003d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003db4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003db8:	4baa      	ldr	r3, [pc, #680]	; (8004064 <ETH_MACDMAConfig+0x384>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003dc4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003dc8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003dcc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003dd2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003dd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003dd6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003dda:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003de0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003de4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003de8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003dec:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003df0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003df4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003df6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e08:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e14:	2001      	movs	r0, #1
 8003e16:	f7ff f83f 	bl	8002e98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e22:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e28:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003e2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003e2c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003e32:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003e38:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003e3e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003e44:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003e48:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003e50:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e52:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f7ff f81a 	bl	8002e98 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e6c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e76:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003e80:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003e8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e90:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003e94:	4013      	ands	r3, r2
 8003e96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003e9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e9e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003ea0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003ea4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003ea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003eaa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003eac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003eb0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003eb6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003eb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003ebc:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003ebe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ed0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003edc:	2001      	movs	r0, #1
 8003ede:	f7fe ffdb 	bl	8002e98 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003eea:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003eec:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003ef0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f06:	2001      	movs	r0, #1
 8003f08:	f7fe ffc6 	bl	8002e98 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f14:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f1e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003f24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f28:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f36:	2300      	movs	r3, #0
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003f70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f74:	4b3c      	ldr	r3, [pc, #240]	; (8004068 <ETH_MACDMAConfig+0x388>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f7c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003f7e:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f80:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003f82:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003f84:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003f86:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003f88:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003f8a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003f8c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003f8e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003f90:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003f92:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003f94:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003f98:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003f9c:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fb6:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f7fe ff66 	bl	8002e98 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fda:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003fe0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003fe4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003fe8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003fec:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003ff2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003ff6:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004000:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004004:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004014:	2001      	movs	r0, #1
 8004016:	f7fe ff3f 	bl	8002e98 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004022:	461a      	mov	r2, r3
 8004024:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004028:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d10d      	bne.n	800404e <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004048:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800404c:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	461a      	mov	r2, r3
 8004054:	2100      	movs	r1, #0
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f808 	bl	800406c <ETH_MACAddressConfig>
}
 800405c:	bf00      	nop
 800405e:	37c0      	adds	r7, #192	; 0xc0
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	ff20810f 	.word	0xff20810f
 8004068:	f8de3f23 	.word	0xf8de3f23

0800406c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3305      	adds	r3, #5
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	3204      	adds	r2, #4
 8004084:	7812      	ldrb	r2, [r2, #0]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <ETH_MACAddressConfig+0x68>)
 800408e:	4413      	add	r3, r2
 8004090:	461a      	mov	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3303      	adds	r3, #3
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	061a      	lsls	r2, r3, #24
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3302      	adds	r3, #2
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	041b      	lsls	r3, r3, #16
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3301      	adds	r3, #1
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	4313      	orrs	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <ETH_MACAddressConfig+0x6c>)
 80040be:	4413      	add	r3, r2
 80040c0:	461a      	mov	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6013      	str	r3, [r2, #0]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40028040 	.word	0x40028040
 80040d8:	40028044 	.word	0x40028044

080040dc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0208 	orr.w	r2, r2, #8
 80040f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004100:	2001      	movs	r0, #1
 8004102:	f000 f877 	bl	80041f4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0204 	orr.w	r2, r2, #4
 8004130:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800413a:	2001      	movs	r0, #1
 800413c:	f000 f85a 	bl	80041f4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	601a      	str	r2, [r3, #0]
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800416a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800416e:	6193      	str	r3, [r2, #24]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	f043 0302 	orr.w	r3, r3, #2
 8004196:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800419a:	6193      	str	r3, [r2, #24]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041ca:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80041d8:	2001      	movs	r0, #1
 80041da:	f000 f80b 	bl	80041f4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041e8:	6193      	str	r3, [r2, #24]
}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <ETH_Delay+0x38>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0b      	ldr	r2, [pc, #44]	; (8004230 <ETH_Delay+0x3c>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	0a5b      	lsrs	r3, r3, #9
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004210:	bf00      	nop
  } 
  while (Delay --);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1e5a      	subs	r2, r3, #1
 8004216:	60fa      	str	r2, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f9      	bne.n	8004210 <ETH_Delay+0x1c>
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000090 	.word	0x20000090
 8004230:	10624dd3 	.word	0x10624dd3

08004234 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004246:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <HAL_FLASH_Program+0xa0>)
 8004248:	7e1b      	ldrb	r3, [r3, #24]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_FLASH_Program+0x1e>
 800424e:	2302      	movs	r3, #2
 8004250:	e03b      	b.n	80042ca <HAL_FLASH_Program+0x96>
 8004252:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_FLASH_Program+0xa0>)
 8004254:	2201      	movs	r2, #1
 8004256:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004258:	f24c 3050 	movw	r0, #50000	; 0xc350
 800425c:	f000 f870 	bl	8004340 <FLASH_WaitForLastOperation>
 8004260:	4603      	mov	r3, r0
 8004262:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d12b      	bne.n	80042c2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004270:	783b      	ldrb	r3, [r7, #0]
 8004272:	4619      	mov	r1, r3
 8004274:	68b8      	ldr	r0, [r7, #8]
 8004276:	f000 f91b 	bl	80044b0 <FLASH_Program_Byte>
 800427a:	e016      	b.n	80042aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004282:	883b      	ldrh	r3, [r7, #0]
 8004284:	4619      	mov	r1, r3
 8004286:	68b8      	ldr	r0, [r7, #8]
 8004288:	f000 f8ee 	bl	8004468 <FLASH_Program_HalfWord>
 800428c:	e00d      	b.n	80042aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d105      	bne.n	80042a0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	4619      	mov	r1, r3
 8004298:	68b8      	ldr	r0, [r7, #8]
 800429a:	f000 f8c3 	bl	8004424 <FLASH_Program_Word>
 800429e:	e004      	b.n	80042aa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80042a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a4:	68b8      	ldr	r0, [r7, #8]
 80042a6:	f000 f88b 	bl	80043c0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042ae:	f000 f847 	bl	8004340 <FLASH_WaitForLastOperation>
 80042b2:	4603      	mov	r3, r0
 80042b4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80042b6:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <HAL_FLASH_Program+0xa4>)
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <HAL_FLASH_Program+0xa4>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <HAL_FLASH_Program+0xa0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000940 	.word	0x20000940
 80042d8:	40023c00 	.word	0x40023c00

080042dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042e6:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_FLASH_Unlock+0x38>)
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	da0b      	bge.n	8004306 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_FLASH_Unlock+0x38>)
 80042f0:	4a09      	ldr	r2, [pc, #36]	; (8004318 <HAL_FLASH_Unlock+0x3c>)
 80042f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_FLASH_Unlock+0x38>)
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <HAL_FLASH_Unlock+0x40>)
 80042f8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_FLASH_Unlock+0x38>)
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	da01      	bge.n	8004306 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004306:	79fb      	ldrb	r3, [r7, #7]
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40023c00 	.word	0x40023c00
 8004318:	45670123 	.word	0x45670123
 800431c:	cdef89ab 	.word	0xcdef89ab

08004320 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_FLASH_Lock+0x1c>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <HAL_FLASH_Lock+0x1c>)
 800432a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800432e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40023c00 	.word	0x40023c00

08004340 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <FLASH_WaitForLastOperation+0x78>)
 800434e:	2200      	movs	r2, #0
 8004350:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004352:	f7fe fd95 	bl	8002e80 <HAL_GetTick>
 8004356:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004358:	e010      	b.n	800437c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d00c      	beq.n	800437c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d007      	beq.n	8004378 <FLASH_WaitForLastOperation+0x38>
 8004368:	f7fe fd8a 	bl	8002e80 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d201      	bcs.n	800437c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e019      	b.n	80043b0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <FLASH_WaitForLastOperation+0x7c>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e8      	bne.n	800435a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <FLASH_WaitForLastOperation+0x7c>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <FLASH_WaitForLastOperation+0x7c>)
 8004396:	2201      	movs	r2, #1
 8004398:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <FLASH_WaitForLastOperation+0x7c>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80043a6:	f000 f8a5 	bl	80044f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
  
}  
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20000940 	.word	0x20000940
 80043bc:	40023c00 	.word	0x40023c00

080043c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <FLASH_Program_DoubleWord+0x60>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	4a13      	ldr	r2, [pc, #76]	; (8004420 <FLASH_Program_DoubleWord+0x60>)
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <FLASH_Program_DoubleWord+0x60>)
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	4a10      	ldr	r2, [pc, #64]	; (8004420 <FLASH_Program_DoubleWord+0x60>)
 80043de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80043e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <FLASH_Program_DoubleWord+0x60>)
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	4a0d      	ldr	r2, [pc, #52]	; (8004420 <FLASH_Program_DoubleWord+0x60>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80043f6:	f3bf 8f6f 	isb	sy
}
 80043fa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80043fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	000a      	movs	r2, r1
 800440a:	2300      	movs	r3, #0
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	3104      	adds	r1, #4
 8004410:	4613      	mov	r3, r2
 8004412:	600b      	str	r3, [r1, #0]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40023c00 	.word	0x40023c00

08004424 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800442e:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <FLASH_Program_Word+0x40>)
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <FLASH_Program_Word+0x40>)
 8004434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004438:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <FLASH_Program_Word+0x40>)
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <FLASH_Program_Word+0x40>)
 8004440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004444:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <FLASH_Program_Word+0x40>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4a06      	ldr	r2, [pc, #24]	; (8004464 <FLASH_Program_Word+0x40>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	601a      	str	r2, [r3, #0]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40023c00 	.word	0x40023c00

08004468 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004474:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <FLASH_Program_HalfWord+0x44>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	4a0c      	ldr	r2, [pc, #48]	; (80044ac <FLASH_Program_HalfWord+0x44>)
 800447a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004480:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <FLASH_Program_HalfWord+0x44>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	4a09      	ldr	r2, [pc, #36]	; (80044ac <FLASH_Program_HalfWord+0x44>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <FLASH_Program_HalfWord+0x44>)
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	4a06      	ldr	r2, [pc, #24]	; (80044ac <FLASH_Program_HalfWord+0x44>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	801a      	strh	r2, [r3, #0]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00

080044b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <FLASH_Program_Byte+0x40>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	4a0b      	ldr	r2, [pc, #44]	; (80044f0 <FLASH_Program_Byte+0x40>)
 80044c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <FLASH_Program_Byte+0x40>)
 80044ca:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <FLASH_Program_Byte+0x40>)
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <FLASH_Program_Byte+0x40>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	4a06      	ldr	r2, [pc, #24]	; (80044f0 <FLASH_Program_Byte+0x40>)
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	701a      	strb	r2, [r3, #0]
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40023c00 	.word	0x40023c00

080044f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80044f8:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004504:	4b2d      	ldr	r3, [pc, #180]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f043 0310 	orr.w	r3, r3, #16
 800450c:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 800450e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004510:	4b29      	ldr	r3, [pc, #164]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 8004512:	2210      	movs	r2, #16
 8004514:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004516:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f043 0308 	orr.w	r3, r3, #8
 800452a:	4a24      	ldr	r2, [pc, #144]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 800452c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800452e:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 8004530:	2220      	movs	r2, #32
 8004532:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004534:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f043 0304 	orr.w	r3, r3, #4
 8004548:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 800454a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800454c:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 800454e:	2240      	movs	r2, #64	; 0x40
 8004550:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004552:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800455e:	4b17      	ldr	r3, [pc, #92]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f043 0302 	orr.w	r3, r3, #2
 8004566:	4a15      	ldr	r2, [pc, #84]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 8004568:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 800456c:	2280      	movs	r2, #128	; 0x80
 800456e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800457c:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 8004586:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 800458a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800458e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004590:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800459c:	4b07      	ldr	r3, [pc, #28]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f043 0320 	orr.w	r3, r3, #32
 80045a4:	4a05      	ldr	r2, [pc, #20]	; (80045bc <FLASH_SetErrorCode+0xc8>)
 80045a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <FLASH_SetErrorCode+0xc4>)
 80045aa:	2202      	movs	r2, #2
 80045ac:	60da      	str	r2, [r3, #12]
  }
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	40023c00 	.word	0x40023c00
 80045bc:	20000940 	.word	0x20000940

080045c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80045d2:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_FLASHEx_Erase+0xdc>)
 80045d4:	7e1b      	ldrb	r3, [r3, #24]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_FLASHEx_Erase+0x1e>
 80045da:	2302      	movs	r3, #2
 80045dc:	e05a      	b.n	8004694 <HAL_FLASHEx_Erase+0xd4>
 80045de:	4b2f      	ldr	r3, [pc, #188]	; (800469c <HAL_FLASHEx_Erase+0xdc>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045e8:	f7ff feaa 	bl	8004340 <FLASH_WaitForLastOperation>
 80045ec:	4603      	mov	r3, r0
 80045ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d14a      	bne.n	800468c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f04f 32ff 	mov.w	r2, #4294967295
 80045fc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d117      	bne.n	8004636 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f000 f846 	bl	80046a4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004618:	f24c 3050 	movw	r0, #50000	; 0xc350
 800461c:	f7ff fe90 	bl	8004340 <FLASH_WaitForLastOperation>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_FLASHEx_Erase+0xe0>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_FLASHEx_Erase+0xe0>)
 800462a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800462e:	f023 0304 	bic.w	r3, r3, #4
 8004632:	6113      	str	r3, [r2, #16]
 8004634:	e028      	b.n	8004688 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	e01c      	b.n	8004678 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4619      	mov	r1, r3
 8004646:	68b8      	ldr	r0, [r7, #8]
 8004648:	f000 f866 	bl	8004718 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800464c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004650:	f7ff fe76 	bl	8004340 <FLASH_WaitForLastOperation>
 8004654:	4603      	mov	r3, r0
 8004656:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <HAL_FLASHEx_Erase+0xe0>)
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	4a10      	ldr	r2, [pc, #64]	; (80046a0 <HAL_FLASHEx_Erase+0xe0>)
 800465e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004662:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	601a      	str	r2, [r3, #0]
          break;
 8004670:	e00a      	b.n	8004688 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	3301      	adds	r3, #1
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4413      	add	r3, r2
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	429a      	cmp	r2, r3
 8004686:	d3da      	bcc.n	800463e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004688:	f000 f894 	bl	80047b4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <HAL_FLASHEx_Erase+0xdc>)
 800468e:	2200      	movs	r2, #0
 8004690:	761a      	strb	r2, [r3, #24]

  return status;
 8004692:	7bfb      	ldrb	r3, [r7, #15]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000940 	.word	0x20000940
 80046a0:	40023c00 	.word	0x40023c00

080046a4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	6039      	str	r1, [r7, #0]
 80046ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80046b0:	4b18      	ldr	r3, [pc, #96]	; (8004714 <FLASH_MassErase+0x70>)
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	4a17      	ldr	r2, [pc, #92]	; (8004714 <FLASH_MassErase+0x70>)
 80046b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ba:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d108      	bne.n	80046d4 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <FLASH_MassErase+0x70>)
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	4a13      	ldr	r2, [pc, #76]	; (8004714 <FLASH_MassErase+0x70>)
 80046c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	6113      	str	r3, [r2, #16]
 80046d2:	e00f      	b.n	80046f4 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d106      	bne.n	80046e8 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <FLASH_MassErase+0x70>)
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	4a0d      	ldr	r2, [pc, #52]	; (8004714 <FLASH_MassErase+0x70>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	6113      	str	r3, [r2, #16]
 80046e6:	e005      	b.n	80046f4 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <FLASH_MassErase+0x70>)
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	4a09      	ldr	r2, [pc, #36]	; (8004714 <FLASH_MassErase+0x70>)
 80046ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f2:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <FLASH_MassErase+0x70>)
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	4313      	orrs	r3, r2
 80046fe:	4a05      	ldr	r2, [pc, #20]	; (8004714 <FLASH_MassErase+0x70>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004704:	6113      	str	r3, [r2, #16]
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40023c00 	.word	0x40023c00

08004718 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	e010      	b.n	8004756 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d103      	bne.n	8004742 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800473a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e009      	b.n	8004756 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d103      	bne.n	8004750 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e002      	b.n	8004756 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004750:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004754:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b0b      	cmp	r3, #11
 800475a:	d902      	bls.n	8004762 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004762:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <FLASH_Erase_Sector+0x98>)
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	4a12      	ldr	r2, [pc, #72]	; (80047b0 <FLASH_Erase_Sector+0x98>)
 8004768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <FLASH_Erase_Sector+0x98>)
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	490f      	ldr	r1, [pc, #60]	; (80047b0 <FLASH_Erase_Sector+0x98>)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <FLASH_Erase_Sector+0x98>)
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <FLASH_Erase_Sector+0x98>)
 8004780:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004784:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <FLASH_Erase_Sector+0x98>)
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4313      	orrs	r3, r2
 8004790:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <FLASH_Erase_Sector+0x98>)
 8004792:	f043 0302 	orr.w	r3, r3, #2
 8004796:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <FLASH_Erase_Sector+0x98>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <FLASH_Erase_Sector+0x98>)
 800479e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a2:	6113      	str	r3, [r2, #16]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40023c00 	.word	0x40023c00

080047b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80047b8:	4b20      	ldr	r3, [pc, #128]	; (800483c <FLASH_FlushCaches+0x88>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d017      	beq.n	80047f4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <FLASH_FlushCaches+0x88>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1c      	ldr	r2, [pc, #112]	; (800483c <FLASH_FlushCaches+0x88>)
 80047ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047ce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80047d0:	4b1a      	ldr	r3, [pc, #104]	; (800483c <FLASH_FlushCaches+0x88>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a19      	ldr	r2, [pc, #100]	; (800483c <FLASH_FlushCaches+0x88>)
 80047d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	4b17      	ldr	r3, [pc, #92]	; (800483c <FLASH_FlushCaches+0x88>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a16      	ldr	r2, [pc, #88]	; (800483c <FLASH_FlushCaches+0x88>)
 80047e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047e8:	4b14      	ldr	r3, [pc, #80]	; (800483c <FLASH_FlushCaches+0x88>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a13      	ldr	r2, [pc, #76]	; (800483c <FLASH_FlushCaches+0x88>)
 80047ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047f2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80047f4:	4b11      	ldr	r3, [pc, #68]	; (800483c <FLASH_FlushCaches+0x88>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d017      	beq.n	8004830 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004800:	4b0e      	ldr	r3, [pc, #56]	; (800483c <FLASH_FlushCaches+0x88>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a0d      	ldr	r2, [pc, #52]	; (800483c <FLASH_FlushCaches+0x88>)
 8004806:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800480a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <FLASH_FlushCaches+0x88>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0a      	ldr	r2, [pc, #40]	; (800483c <FLASH_FlushCaches+0x88>)
 8004812:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <FLASH_FlushCaches+0x88>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a07      	ldr	r2, [pc, #28]	; (800483c <FLASH_FlushCaches+0x88>)
 800481e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004822:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <FLASH_FlushCaches+0x88>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a04      	ldr	r2, [pc, #16]	; (800483c <FLASH_FlushCaches+0x88>)
 800482a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800482e:	6013      	str	r3, [r2, #0]
  }
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40023c00 	.word	0x40023c00

08004840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004852:	2300      	movs	r3, #0
 8004854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	e177      	b.n	8004b4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800485c:	2201      	movs	r2, #1
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4013      	ands	r3, r2
 800486e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	429a      	cmp	r2, r3
 8004876:	f040 8166 	bne.w	8004b46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d005      	beq.n	8004892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800488e:	2b02      	cmp	r3, #2
 8004890:	d130      	bne.n	80048f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	2203      	movs	r2, #3
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43db      	mvns	r3, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4013      	ands	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048c8:	2201      	movs	r2, #1
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 0201 	and.w	r2, r3, #1
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d017      	beq.n	8004930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	2203      	movs	r2, #3
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d123      	bne.n	8004984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	08da      	lsrs	r2, r3, #3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3208      	adds	r2, #8
 8004944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	220f      	movs	r2, #15
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4313      	orrs	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	08da      	lsrs	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3208      	adds	r2, #8
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	2203      	movs	r2, #3
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4013      	ands	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 0203 	and.w	r2, r3, #3
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80c0 	beq.w	8004b46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	4b66      	ldr	r3, [pc, #408]	; (8004b64 <HAL_GPIO_Init+0x324>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	4a65      	ldr	r2, [pc, #404]	; (8004b64 <HAL_GPIO_Init+0x324>)
 80049d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049d4:	6453      	str	r3, [r2, #68]	; 0x44
 80049d6:	4b63      	ldr	r3, [pc, #396]	; (8004b64 <HAL_GPIO_Init+0x324>)
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049e2:	4a61      	ldr	r2, [pc, #388]	; (8004b68 <HAL_GPIO_Init+0x328>)
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	089b      	lsrs	r3, r3, #2
 80049e8:	3302      	adds	r3, #2
 80049ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	220f      	movs	r2, #15
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <HAL_GPIO_Init+0x32c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d037      	beq.n	8004a7e <HAL_GPIO_Init+0x23e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a57      	ldr	r2, [pc, #348]	; (8004b70 <HAL_GPIO_Init+0x330>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d031      	beq.n	8004a7a <HAL_GPIO_Init+0x23a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a56      	ldr	r2, [pc, #344]	; (8004b74 <HAL_GPIO_Init+0x334>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d02b      	beq.n	8004a76 <HAL_GPIO_Init+0x236>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a55      	ldr	r2, [pc, #340]	; (8004b78 <HAL_GPIO_Init+0x338>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d025      	beq.n	8004a72 <HAL_GPIO_Init+0x232>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a54      	ldr	r2, [pc, #336]	; (8004b7c <HAL_GPIO_Init+0x33c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01f      	beq.n	8004a6e <HAL_GPIO_Init+0x22e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a53      	ldr	r2, [pc, #332]	; (8004b80 <HAL_GPIO_Init+0x340>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d019      	beq.n	8004a6a <HAL_GPIO_Init+0x22a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a52      	ldr	r2, [pc, #328]	; (8004b84 <HAL_GPIO_Init+0x344>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_GPIO_Init+0x226>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a51      	ldr	r2, [pc, #324]	; (8004b88 <HAL_GPIO_Init+0x348>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00d      	beq.n	8004a62 <HAL_GPIO_Init+0x222>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a50      	ldr	r2, [pc, #320]	; (8004b8c <HAL_GPIO_Init+0x34c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <HAL_GPIO_Init+0x21e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a4f      	ldr	r2, [pc, #316]	; (8004b90 <HAL_GPIO_Init+0x350>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <HAL_GPIO_Init+0x21a>
 8004a56:	2309      	movs	r3, #9
 8004a58:	e012      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	e010      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	e00e      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a62:	2307      	movs	r3, #7
 8004a64:	e00c      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a66:	2306      	movs	r3, #6
 8004a68:	e00a      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a6a:	2305      	movs	r3, #5
 8004a6c:	e008      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	e006      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a72:	2303      	movs	r3, #3
 8004a74:	e004      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e002      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	f002 0203 	and.w	r2, r2, #3
 8004a86:	0092      	lsls	r2, r2, #2
 8004a88:	4093      	lsls	r3, r2
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a90:	4935      	ldr	r1, [pc, #212]	; (8004b68 <HAL_GPIO_Init+0x328>)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <HAL_GPIO_Init+0x354>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ac2:	4a34      	ldr	r2, [pc, #208]	; (8004b94 <HAL_GPIO_Init+0x354>)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ac8:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <HAL_GPIO_Init+0x354>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004aec:	4a29      	ldr	r2, [pc, #164]	; (8004b94 <HAL_GPIO_Init+0x354>)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004af2:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <HAL_GPIO_Init+0x354>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b16:	4a1f      	ldr	r2, [pc, #124]	; (8004b94 <HAL_GPIO_Init+0x354>)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <HAL_GPIO_Init+0x354>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b40:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <HAL_GPIO_Init+0x354>)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b0f      	cmp	r3, #15
 8004b50:	f67f ae84 	bls.w	800485c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	3724      	adds	r7, #36	; 0x24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40013800 	.word	0x40013800
 8004b6c:	40020000 	.word	0x40020000
 8004b70:	40020400 	.word	0x40020400
 8004b74:	40020800 	.word	0x40020800
 8004b78:	40020c00 	.word	0x40020c00
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	40021400 	.word	0x40021400
 8004b84:	40021800 	.word	0x40021800
 8004b88:	40021c00 	.word	0x40021c00
 8004b8c:	40022000 	.word	0x40022000
 8004b90:	40022400 	.word	0x40022400
 8004b94:	40013c00 	.word	0x40013c00

08004b98 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e034      	b.n	8004c14 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f245 5255 	movw	r2, #21845	; 0x5555
 8004bbc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6852      	ldr	r2, [r2, #4]
 8004bc6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004bd2:	f7fe f955 	bl	8002e80 <HAL_GetTick>
 8004bd6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004bd8:	e00f      	b.n	8004bfa <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004bda:	f7fe f951 	bl	8002e80 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b31      	cmp	r3, #49	; 0x31
 8004be6:	d908      	bls.n	8004bfa <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e00c      	b.n	8004c14 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e8      	bne.n	8004bda <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004c10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c46:	2300      	movs	r3, #0
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_PWREx_EnableOverDrive+0x90>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <HAL_PWREx_EnableOverDrive+0x90>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c54:	6413      	str	r3, [r2, #64]	; 0x40
 8004c56:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <HAL_PWREx_EnableOverDrive+0x90>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c62:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c68:	f7fe f90a 	bl	8002e80 <HAL_GetTick>
 8004c6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c6e:	e009      	b.n	8004c84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c70:	f7fe f906 	bl	8002e80 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c7e:	d901      	bls.n	8004c84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e01f      	b.n	8004cc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c84:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c90:	d1ee      	bne.n	8004c70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c92:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c98:	f7fe f8f2 	bl	8002e80 <HAL_GetTick>
 8004c9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c9e:	e009      	b.n	8004cb4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ca0:	f7fe f8ee 	bl	8002e80 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cae:	d901      	bls.n	8004cb4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e007      	b.n	8004cc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cb4:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc0:	d1ee      	bne.n	8004ca0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	420e0040 	.word	0x420e0040
 8004cd4:	40007000 	.word	0x40007000
 8004cd8:	420e0044 	.word	0x420e0044

08004cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e267      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d075      	beq.n	8004de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cfa:	4b88      	ldr	r3, [pc, #544]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d00c      	beq.n	8004d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d06:	4b85      	ldr	r3, [pc, #532]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d112      	bne.n	8004d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d12:	4b82      	ldr	r3, [pc, #520]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d1e:	d10b      	bne.n	8004d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d20:	4b7e      	ldr	r3, [pc, #504]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d05b      	beq.n	8004de4 <HAL_RCC_OscConfig+0x108>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d157      	bne.n	8004de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e242      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d40:	d106      	bne.n	8004d50 <HAL_RCC_OscConfig+0x74>
 8004d42:	4b76      	ldr	r3, [pc, #472]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a75      	ldr	r2, [pc, #468]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e01d      	b.n	8004d8c <HAL_RCC_OscConfig+0xb0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCC_OscConfig+0x98>
 8004d5a:	4b70      	ldr	r3, [pc, #448]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a6f      	ldr	r2, [pc, #444]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	4b6d      	ldr	r3, [pc, #436]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a6c      	ldr	r2, [pc, #432]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	e00b      	b.n	8004d8c <HAL_RCC_OscConfig+0xb0>
 8004d74:	4b69      	ldr	r3, [pc, #420]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a68      	ldr	r2, [pc, #416]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	4b66      	ldr	r3, [pc, #408]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a65      	ldr	r2, [pc, #404]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d013      	beq.n	8004dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fe f874 	bl	8002e80 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fe f870 	bl	8002e80 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e207      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dae:	4b5b      	ldr	r3, [pc, #364]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0xc0>
 8004dba:	e014      	b.n	8004de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbc:	f7fe f860 	bl	8002e80 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dc4:	f7fe f85c 	bl	8002e80 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b64      	cmp	r3, #100	; 0x64
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e1f3      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dd6:	4b51      	ldr	r3, [pc, #324]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0xe8>
 8004de2:	e000      	b.n	8004de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d063      	beq.n	8004eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004df2:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dfe:	4b47      	ldr	r3, [pc, #284]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d11c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e0a:	4b44      	ldr	r3, [pc, #272]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d116      	bne.n	8004e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e16:	4b41      	ldr	r3, [pc, #260]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_RCC_OscConfig+0x152>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d001      	beq.n	8004e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e1c7      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2e:	4b3b      	ldr	r3, [pc, #236]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4937      	ldr	r1, [pc, #220]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e42:	e03a      	b.n	8004eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d020      	beq.n	8004e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e4c:	4b34      	ldr	r3, [pc, #208]	; (8004f20 <HAL_RCC_OscConfig+0x244>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fe f815 	bl	8002e80 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e5a:	f7fe f811 	bl	8002e80 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e1a8      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6c:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e78:	4b28      	ldr	r3, [pc, #160]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4925      	ldr	r1, [pc, #148]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	600b      	str	r3, [r1, #0]
 8004e8c:	e015      	b.n	8004eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e8e:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <HAL_RCC_OscConfig+0x244>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fd fff4 	bl	8002e80 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e9c:	f7fd fff0 	bl	8002e80 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e187      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eae:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d036      	beq.n	8004f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d016      	beq.n	8004efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <HAL_RCC_OscConfig+0x248>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fd ffd4 	bl	8002e80 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004edc:	f7fd ffd0 	bl	8002e80 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e167      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eee:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <HAL_RCC_OscConfig+0x240>)
 8004ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x200>
 8004efa:	e01b      	b.n	8004f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_RCC_OscConfig+0x248>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f02:	f7fd ffbd 	bl	8002e80 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f08:	e00e      	b.n	8004f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f0a:	f7fd ffb9 	bl	8002e80 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d907      	bls.n	8004f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e150      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	42470000 	.word	0x42470000
 8004f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f28:	4b88      	ldr	r3, [pc, #544]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ea      	bne.n	8004f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8097 	beq.w	8005070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f42:	2300      	movs	r3, #0
 8004f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f46:	4b81      	ldr	r3, [pc, #516]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10f      	bne.n	8004f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	4b7d      	ldr	r3, [pc, #500]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	4a7c      	ldr	r2, [pc, #496]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f60:	6413      	str	r3, [r2, #64]	; 0x40
 8004f62:	4b7a      	ldr	r3, [pc, #488]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f72:	4b77      	ldr	r3, [pc, #476]	; (8005150 <HAL_RCC_OscConfig+0x474>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d118      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f7e:	4b74      	ldr	r3, [pc, #464]	; (8005150 <HAL_RCC_OscConfig+0x474>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a73      	ldr	r2, [pc, #460]	; (8005150 <HAL_RCC_OscConfig+0x474>)
 8004f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8a:	f7fd ff79 	bl	8002e80 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f92:	f7fd ff75 	bl	8002e80 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e10c      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa4:	4b6a      	ldr	r3, [pc, #424]	; (8005150 <HAL_RCC_OscConfig+0x474>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d106      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x2ea>
 8004fb8:	4b64      	ldr	r3, [pc, #400]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	4a63      	ldr	r2, [pc, #396]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc4:	e01c      	b.n	8005000 <HAL_RCC_OscConfig+0x324>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x30c>
 8004fce:	4b5f      	ldr	r3, [pc, #380]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd2:	4a5e      	ldr	r2, [pc, #376]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004fd4:	f043 0304 	orr.w	r3, r3, #4
 8004fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fda:	4b5c      	ldr	r3, [pc, #368]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	4a5b      	ldr	r2, [pc, #364]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe6:	e00b      	b.n	8005000 <HAL_RCC_OscConfig+0x324>
 8004fe8:	4b58      	ldr	r3, [pc, #352]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	4a57      	ldr	r2, [pc, #348]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff4:	4b55      	ldr	r3, [pc, #340]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	4a54      	ldr	r2, [pc, #336]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8004ffa:	f023 0304 	bic.w	r3, r3, #4
 8004ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d015      	beq.n	8005034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fd ff3a 	bl	8002e80 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500e:	e00a      	b.n	8005026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005010:	f7fd ff36 	bl	8002e80 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f241 3288 	movw	r2, #5000	; 0x1388
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e0cb      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005026:	4b49      	ldr	r3, [pc, #292]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ee      	beq.n	8005010 <HAL_RCC_OscConfig+0x334>
 8005032:	e014      	b.n	800505e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005034:	f7fd ff24 	bl	8002e80 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503a:	e00a      	b.n	8005052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800503c:	f7fd ff20 	bl	8002e80 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f241 3288 	movw	r2, #5000	; 0x1388
 800504a:	4293      	cmp	r3, r2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e0b5      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005052:	4b3e      	ldr	r3, [pc, #248]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1ee      	bne.n	800503c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d105      	bne.n	8005070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005064:	4b39      	ldr	r3, [pc, #228]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	4a38      	ldr	r2, [pc, #224]	; (800514c <HAL_RCC_OscConfig+0x470>)
 800506a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800506e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80a1 	beq.w	80051bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800507a:	4b34      	ldr	r3, [pc, #208]	; (800514c <HAL_RCC_OscConfig+0x470>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b08      	cmp	r3, #8
 8005084:	d05c      	beq.n	8005140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d141      	bne.n	8005112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508e:	4b31      	ldr	r3, [pc, #196]	; (8005154 <HAL_RCC_OscConfig+0x478>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005094:	f7fd fef4 	bl	8002e80 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800509c:	f7fd fef0 	bl	8002e80 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e087      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ae:	4b27      	ldr	r3, [pc, #156]	; (800514c <HAL_RCC_OscConfig+0x470>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69da      	ldr	r2, [r3, #28]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	019b      	lsls	r3, r3, #6
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	3b01      	subs	r3, #1
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	061b      	lsls	r3, r3, #24
 80050de:	491b      	ldr	r1, [pc, #108]	; (800514c <HAL_RCC_OscConfig+0x470>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <HAL_RCC_OscConfig+0x478>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ea:	f7fd fec9 	bl	8002e80 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f2:	f7fd fec5 	bl	8002e80 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e05c      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005104:	4b11      	ldr	r3, [pc, #68]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0x416>
 8005110:	e054      	b.n	80051bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005112:	4b10      	ldr	r3, [pc, #64]	; (8005154 <HAL_RCC_OscConfig+0x478>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fd feb2 	bl	8002e80 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005120:	f7fd feae 	bl	8002e80 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e045      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_RCC_OscConfig+0x470>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x444>
 800513e:	e03d      	b.n	80051bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d107      	bne.n	8005158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e038      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
 800514c:	40023800 	.word	0x40023800
 8005150:	40007000 	.word	0x40007000
 8005154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005158:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <HAL_RCC_OscConfig+0x4ec>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d028      	beq.n	80051b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d121      	bne.n	80051b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d11a      	bne.n	80051b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005188:	4013      	ands	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800518e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005190:	4293      	cmp	r3, r2
 8005192:	d111      	bne.n	80051b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	3b01      	subs	r3, #1
 80051a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d107      	bne.n	80051b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40023800 	.word	0x40023800

080051cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0cc      	b.n	800537a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051e0:	4b68      	ldr	r3, [pc, #416]	; (8005384 <HAL_RCC_ClockConfig+0x1b8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d90c      	bls.n	8005208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ee:	4b65      	ldr	r3, [pc, #404]	; (8005384 <HAL_RCC_ClockConfig+0x1b8>)
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b63      	ldr	r3, [pc, #396]	; (8005384 <HAL_RCC_ClockConfig+0x1b8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0b8      	b.n	800537a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d020      	beq.n	8005256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005220:	4b59      	ldr	r3, [pc, #356]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4a58      	ldr	r2, [pc, #352]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800522a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005238:	4b53      	ldr	r3, [pc, #332]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	4a52      	ldr	r2, [pc, #328]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005244:	4b50      	ldr	r3, [pc, #320]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	494d      	ldr	r1, [pc, #308]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	4313      	orrs	r3, r2
 8005254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d044      	beq.n	80052ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d107      	bne.n	800527a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526a:	4b47      	ldr	r3, [pc, #284]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d119      	bne.n	80052aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e07f      	b.n	800537a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d003      	beq.n	800528a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005286:	2b03      	cmp	r3, #3
 8005288:	d107      	bne.n	800529a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528a:	4b3f      	ldr	r3, [pc, #252]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e06f      	b.n	800537a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529a:	4b3b      	ldr	r3, [pc, #236]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e067      	b.n	800537a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052aa:	4b37      	ldr	r3, [pc, #220]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f023 0203 	bic.w	r2, r3, #3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	4934      	ldr	r1, [pc, #208]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052bc:	f7fd fde0 	bl	8002e80 <HAL_GetTick>
 80052c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c2:	e00a      	b.n	80052da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c4:	f7fd fddc 	bl	8002e80 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e04f      	b.n	800537a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052da:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 020c 	and.w	r2, r3, #12
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d1eb      	bne.n	80052c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052ec:	4b25      	ldr	r3, [pc, #148]	; (8005384 <HAL_RCC_ClockConfig+0x1b8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d20c      	bcs.n	8005314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fa:	4b22      	ldr	r3, [pc, #136]	; (8005384 <HAL_RCC_ClockConfig+0x1b8>)
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005302:	4b20      	ldr	r3, [pc, #128]	; (8005384 <HAL_RCC_ClockConfig+0x1b8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d001      	beq.n	8005314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e032      	b.n	800537a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005320:	4b19      	ldr	r3, [pc, #100]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4916      	ldr	r1, [pc, #88]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	4313      	orrs	r3, r2
 8005330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	490e      	ldr	r1, [pc, #56]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	4313      	orrs	r3, r2
 8005350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005352:	f000 f889 	bl	8005468 <HAL_RCC_GetSysClockFreq>
 8005356:	4602      	mov	r2, r0
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	490a      	ldr	r1, [pc, #40]	; (800538c <HAL_RCC_ClockConfig+0x1c0>)
 8005364:	5ccb      	ldrb	r3, [r1, r3]
 8005366:	fa22 f303 	lsr.w	r3, r2, r3
 800536a:	4a09      	ldr	r2, [pc, #36]	; (8005390 <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <HAL_RCC_ClockConfig+0x1c8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7fd fd40 	bl	8002df8 <HAL_InitTick>

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40023c00 	.word	0x40023c00
 8005388:	40023800 	.word	0x40023800
 800538c:	080140b0 	.word	0x080140b0
 8005390:	20000090 	.word	0x20000090
 8005394:	20000098 	.word	0x20000098

08005398 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08c      	sub	sp, #48	; 0x30
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d129      	bne.n	80053fe <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	4b2b      	ldr	r3, [pc, #172]	; (800545c <HAL_RCC_MCOConfig+0xc4>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	4a2a      	ldr	r2, [pc, #168]	; (800545c <HAL_RCC_MCOConfig+0xc4>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6313      	str	r3, [r2, #48]	; 0x30
 80053ba:	4b28      	ldr	r3, [pc, #160]	; (800545c <HAL_RCC_MCOConfig+0xc4>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80053c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053cc:	2302      	movs	r3, #2
 80053ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d0:	2303      	movs	r3, #3
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80053d8:	2300      	movs	r3, #0
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80053dc:	f107 031c 	add.w	r3, r7, #28
 80053e0:	4619      	mov	r1, r3
 80053e2:	481f      	ldr	r0, [pc, #124]	; (8005460 <HAL_RCC_MCOConfig+0xc8>)
 80053e4:	f7ff fa2c 	bl	8004840 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80053e8:	4b1c      	ldr	r3, [pc, #112]	; (800545c <HAL_RCC_MCOConfig+0xc4>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	430b      	orrs	r3, r1
 80053f6:	4919      	ldr	r1, [pc, #100]	; (800545c <HAL_RCC_MCOConfig+0xc4>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80053fc:	e029      	b.n	8005452 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <HAL_RCC_MCOConfig+0xc4>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	4a15      	ldr	r2, [pc, #84]	; (800545c <HAL_RCC_MCOConfig+0xc4>)
 8005408:	f043 0304 	orr.w	r3, r3, #4
 800540c:	6313      	str	r3, [r2, #48]	; 0x30
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <HAL_RCC_MCOConfig+0xc4>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800541a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800541e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005420:	2302      	movs	r3, #2
 8005422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005424:	2303      	movs	r3, #3
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005428:	2300      	movs	r3, #0
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800542c:	2300      	movs	r3, #0
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005430:	f107 031c 	add.w	r3, r7, #28
 8005434:	4619      	mov	r1, r3
 8005436:	480b      	ldr	r0, [pc, #44]	; (8005464 <HAL_RCC_MCOConfig+0xcc>)
 8005438:	f7ff fa02 	bl	8004840 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800543c:	4b07      	ldr	r3, [pc, #28]	; (800545c <HAL_RCC_MCOConfig+0xc4>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	00d9      	lsls	r1, r3, #3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	430b      	orrs	r3, r1
 800544c:	4903      	ldr	r1, [pc, #12]	; (800545c <HAL_RCC_MCOConfig+0xc4>)
 800544e:	4313      	orrs	r3, r2
 8005450:	608b      	str	r3, [r1, #8]
}
 8005452:	bf00      	nop
 8005454:	3730      	adds	r7, #48	; 0x30
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800
 8005460:	40020000 	.word	0x40020000
 8005464:	40020800 	.word	0x40020800

08005468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800546c:	b090      	sub	sp, #64	; 0x40
 800546e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
 8005474:	2300      	movs	r3, #0
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005478:	2300      	movs	r3, #0
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005480:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b08      	cmp	r3, #8
 800548a:	d00d      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x40>
 800548c:	2b08      	cmp	r3, #8
 800548e:	f200 80a1 	bhi.w	80055d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x34>
 8005496:	2b04      	cmp	r3, #4
 8005498:	d003      	beq.n	80054a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800549a:	e09b      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800549c:	4b53      	ldr	r3, [pc, #332]	; (80055ec <HAL_RCC_GetSysClockFreq+0x184>)
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80054a0:	e09b      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054a2:	4b53      	ldr	r3, [pc, #332]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80054a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054a6:	e098      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054a8:	4b4f      	ldr	r3, [pc, #316]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054b2:	4b4d      	ldr	r3, [pc, #308]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d028      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054be:	4b4a      	ldr	r3, [pc, #296]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	099b      	lsrs	r3, r3, #6
 80054c4:	2200      	movs	r2, #0
 80054c6:	623b      	str	r3, [r7, #32]
 80054c8:	627a      	str	r2, [r7, #36]	; 0x24
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054d0:	2100      	movs	r1, #0
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80054d4:	fb03 f201 	mul.w	r2, r3, r1
 80054d8:	2300      	movs	r3, #0
 80054da:	fb00 f303 	mul.w	r3, r0, r3
 80054de:	4413      	add	r3, r2
 80054e0:	4a43      	ldr	r2, [pc, #268]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80054e2:	fba0 1202 	umull	r1, r2, r0, r2
 80054e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e8:	460a      	mov	r2, r1
 80054ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80054ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ee:	4413      	add	r3, r2
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	2200      	movs	r2, #0
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	61fa      	str	r2, [r7, #28]
 80054fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005502:	f7fa fedd 	bl	80002c0 <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4613      	mov	r3, r2
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550e:	e053      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	099b      	lsrs	r3, r3, #6
 8005516:	2200      	movs	r2, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	617a      	str	r2, [r7, #20]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005522:	f04f 0b00 	mov.w	fp, #0
 8005526:	4652      	mov	r2, sl
 8005528:	465b      	mov	r3, fp
 800552a:	f04f 0000 	mov.w	r0, #0
 800552e:	f04f 0100 	mov.w	r1, #0
 8005532:	0159      	lsls	r1, r3, #5
 8005534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005538:	0150      	lsls	r0, r2, #5
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	ebb2 080a 	subs.w	r8, r2, sl
 8005542:	eb63 090b 	sbc.w	r9, r3, fp
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005552:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005556:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800555a:	ebb2 0408 	subs.w	r4, r2, r8
 800555e:	eb63 0509 	sbc.w	r5, r3, r9
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	00eb      	lsls	r3, r5, #3
 800556c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005570:	00e2      	lsls	r2, r4, #3
 8005572:	4614      	mov	r4, r2
 8005574:	461d      	mov	r5, r3
 8005576:	eb14 030a 	adds.w	r3, r4, sl
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	eb45 030b 	adc.w	r3, r5, fp
 8005580:	607b      	str	r3, [r7, #4]
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800558e:	4629      	mov	r1, r5
 8005590:	028b      	lsls	r3, r1, #10
 8005592:	4621      	mov	r1, r4
 8005594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005598:	4621      	mov	r1, r4
 800559a:	028a      	lsls	r2, r1, #10
 800559c:	4610      	mov	r0, r2
 800559e:	4619      	mov	r1, r3
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	2200      	movs	r2, #0
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	60fa      	str	r2, [r7, #12]
 80055a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055ac:	f7fa fe88 	bl	80002c0 <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4613      	mov	r3, r2
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	3301      	adds	r3, #1
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80055c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055d2:	e002      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <HAL_RCC_GetSysClockFreq+0x184>)
 80055d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3740      	adds	r7, #64	; 0x40
 80055e0:	46bd      	mov	sp, r7
 80055e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055e6:	bf00      	nop
 80055e8:	40023800 	.word	0x40023800
 80055ec:	00f42400 	.word	0x00f42400
 80055f0:	017d7840 	.word	0x017d7840

080055f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <HAL_RCC_GetHCLKFreq+0x14>)
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000090 	.word	0x20000090

0800560c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005610:	f7ff fff0 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005614:	4602      	mov	r2, r0
 8005616:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	0a9b      	lsrs	r3, r3, #10
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	4903      	ldr	r1, [pc, #12]	; (8005630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005622:	5ccb      	ldrb	r3, [r1, r3]
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40023800 	.word	0x40023800
 8005630:	080140c0 	.word	0x080140c0

08005634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005638:	f7ff ffdc 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 800563c:	4602      	mov	r2, r0
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	0b5b      	lsrs	r3, r3, #13
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	4903      	ldr	r1, [pc, #12]	; (8005658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800564a:	5ccb      	ldrb	r3, [r1, r3]
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40023800 	.word	0x40023800
 8005658:	080140c0 	.word	0x080140c0

0800565c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005662:	f7fd fc0d 	bl	8002e80 <HAL_GetTick>
 8005666:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005668:	4b72      	ldr	r3, [pc, #456]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a71      	ldr	r2, [pc, #452]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005674:	e008      	b.n	8005688 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005676:	f7fd fc03 	bl	8002e80 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e0d0      	b.n	800582a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005688:	4b6a      	ldr	r3, [pc, #424]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8005694:	4b67      	ldr	r3, [pc, #412]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a66      	ldr	r2, [pc, #408]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800569a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80056a0:	f7fd fbee 	bl	8002e80 <HAL_GetTick>
 80056a4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80056a6:	4b63      	ldr	r3, [pc, #396]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80056ac:	e00a      	b.n	80056c4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ae:	f7fd fbe7 	bl	8002e80 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e0b2      	b.n	800582a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80056c4:	4b5b      	ldr	r3, [pc, #364]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 030c 	and.w	r3, r3, #12
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1ee      	bne.n	80056ae <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80056d0:	f7fd fbd6 	bl	8002e80 <HAL_GetTick>
 80056d4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80056d6:	4b57      	ldr	r3, [pc, #348]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a56      	ldr	r2, [pc, #344]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80056dc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80056e0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e4:	f7fd fbcc 	bl	8002e80 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b64      	cmp	r3, #100	; 0x64
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e099      	b.n	800582a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80056f6:	4b4f      	ldr	r3, [pc, #316]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f0      	bne.n	80056e4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005702:	f7fd fbbd 	bl	8002e80 <HAL_GetTick>
 8005706:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005708:	4b4a      	ldr	r3, [pc, #296]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a49      	ldr	r2, [pc, #292]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800570e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005712:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005714:	e008      	b.n	8005728 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005716:	f7fd fbb3 	bl	8002e80 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e080      	b.n	800582a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005728:	4b42      	ldr	r3, [pc, #264]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f0      	bne.n	8005716 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005734:	f7fd fba4 	bl	8002e80 <HAL_GetTick>
 8005738:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800573a:	4b3e      	ldr	r3, [pc, #248]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a3d      	ldr	r2, [pc, #244]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 8005740:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005744:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005748:	f7fd fb9a 	bl	8002e80 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e067      	b.n	800582a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800575a:	4b36      	ldr	r3, [pc, #216]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005766:	f7fd fb8b 	bl	8002e80 <HAL_GetTick>
 800576a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 800576c:	4b31      	ldr	r3, [pc, #196]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a30      	ldr	r2, [pc, #192]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 8005772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005776:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8005778:	e008      	b.n	800578c <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800577a:	f7fd fb81 	bl	8002e80 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e04e      	b.n	800582a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 800578c:	4b29      	ldr	r3, [pc, #164]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8005798:	4b26      	ldr	r3, [pc, #152]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 800579a:	4a27      	ldr	r2, [pc, #156]	; (8005838 <HAL_RCC_DeInit+0x1dc>)
 800579c:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800579e:	4b25      	ldr	r3, [pc, #148]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057a0:	4a26      	ldr	r2, [pc, #152]	; (800583c <HAL_RCC_DeInit+0x1e0>)
 80057a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 80057a6:	4b23      	ldr	r3, [pc, #140]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057a8:	4a24      	ldr	r2, [pc, #144]	; (800583c <HAL_RCC_DeInit+0x1e0>)
 80057aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80057ae:	4b21      	ldr	r3, [pc, #132]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	4a20      	ldr	r2, [pc, #128]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057b4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80057b8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80057ba:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80057c6:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	4a1a      	ldr	r2, [pc, #104]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80057d2:	4b18      	ldr	r3, [pc, #96]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4a17      	ldr	r2, [pc, #92]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057d8:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80057dc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80057de:	4b15      	ldr	r3, [pc, #84]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	4a14      	ldr	r2, [pc, #80]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	4a11      	ldr	r2, [pc, #68]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80057f6:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fa:	4a0e      	ldr	r2, [pc, #56]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005802:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 8005804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005806:	4a0b      	ldr	r2, [pc, #44]	; (8005834 <HAL_RCC_DeInit+0x1d8>)
 8005808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800580c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <HAL_RCC_DeInit+0x1e4>)
 8005810:	4a0c      	ldr	r2, [pc, #48]	; (8005844 <HAL_RCC_DeInit+0x1e8>)
 8005812:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <HAL_RCC_DeInit+0x1ec>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f7fd faed 	bl	8002df8 <HAL_InitTick>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8005828:	2300      	movs	r3, #0
  }
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40023800 	.word	0x40023800
 8005838:	04003010 	.word	0x04003010
 800583c:	24003000 	.word	0x24003000
 8005840:	20000090 	.word	0x20000090
 8005844:	00f42400 	.word	0x00f42400
 8005848:	20000098 	.word	0x20000098

0800584c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e041      	b.n	80058e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fb ff3c 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f000 f9fe 	bl	8005c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d001      	beq.n	8005904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e04e      	b.n	80059a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a23      	ldr	r2, [pc, #140]	; (80059b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d022      	beq.n	800596c <HAL_TIM_Base_Start_IT+0x80>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592e:	d01d      	beq.n	800596c <HAL_TIM_Base_Start_IT+0x80>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d018      	beq.n	800596c <HAL_TIM_Base_Start_IT+0x80>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <HAL_TIM_Base_Start_IT+0x80>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <HAL_TIM_Base_Start_IT+0xd0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00e      	beq.n	800596c <HAL_TIM_Base_Start_IT+0x80>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_TIM_Base_Start_IT+0x80>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_TIM_Base_Start_IT+0x80>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d111      	bne.n	8005990 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b06      	cmp	r3, #6
 800597c:	d010      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598e:	e007      	b.n	80059a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40010400 	.word	0x40010400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40001800 	.word	0x40001800

080059cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6a1a      	ldr	r2, [r3, #32]
 80059ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10f      	bne.n	8005a14 <HAL_TIM_Base_Stop_IT+0x48>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6a1a      	ldr	r2, [r3, #32]
 80059fa:	f240 4344 	movw	r3, #1092	; 0x444
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d107      	bne.n	8005a14 <HAL_TIM_Base_Stop_IT+0x48>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d122      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d11b      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f06f 0202 	mvn.w	r2, #2
 8005a56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f8ee 	bl	8005c4e <HAL_TIM_IC_CaptureCallback>
 8005a72:	e005      	b.n	8005a80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f8e0 	bl	8005c3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8f1 	bl	8005c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d122      	bne.n	8005ada <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d11b      	bne.n	8005ada <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f06f 0204 	mvn.w	r2, #4
 8005aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f8c4 	bl	8005c4e <HAL_TIM_IC_CaptureCallback>
 8005ac6:	e005      	b.n	8005ad4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f8b6 	bl	8005c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f8c7 	bl	8005c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d122      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d11b      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f06f 0208 	mvn.w	r2, #8
 8005afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2204      	movs	r2, #4
 8005b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f89a 	bl	8005c4e <HAL_TIM_IC_CaptureCallback>
 8005b1a:	e005      	b.n	8005b28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f88c 	bl	8005c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f89d 	bl	8005c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d122      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d11b      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f06f 0210 	mvn.w	r2, #16
 8005b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2208      	movs	r2, #8
 8005b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f870 	bl	8005c4e <HAL_TIM_IC_CaptureCallback>
 8005b6e:	e005      	b.n	8005b7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f862 	bl	8005c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f873 	bl	8005c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d10e      	bne.n	8005bae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d107      	bne.n	8005bae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0201 	mvn.w	r2, #1
 8005ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7fb fdc9 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb8:	2b80      	cmp	r3, #128	; 0x80
 8005bba:	d10e      	bne.n	8005bda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc6:	2b80      	cmp	r3, #128	; 0x80
 8005bc8:	d107      	bne.n	8005bda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f97f 	bl	8005ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d10e      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	d107      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f838 	bl	8005c76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d10e      	bne.n	8005c32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d107      	bne.n	8005c32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f06f 0220 	mvn.w	r2, #32
 8005c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f949 	bl	8005ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a40      	ldr	r2, [pc, #256]	; (8005da0 <TIM_Base_SetConfig+0x114>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d013      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005caa:	d00f      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a3d      	ldr	r2, [pc, #244]	; (8005da4 <TIM_Base_SetConfig+0x118>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3c      	ldr	r2, [pc, #240]	; (8005da8 <TIM_Base_SetConfig+0x11c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d007      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3b      	ldr	r2, [pc, #236]	; (8005dac <TIM_Base_SetConfig+0x120>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a3a      	ldr	r2, [pc, #232]	; (8005db0 <TIM_Base_SetConfig+0x124>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d108      	bne.n	8005cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a2f      	ldr	r2, [pc, #188]	; (8005da0 <TIM_Base_SetConfig+0x114>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d02b      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cec:	d027      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2c      	ldr	r2, [pc, #176]	; (8005da4 <TIM_Base_SetConfig+0x118>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d023      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2b      	ldr	r2, [pc, #172]	; (8005da8 <TIM_Base_SetConfig+0x11c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01f      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2a      	ldr	r2, [pc, #168]	; (8005dac <TIM_Base_SetConfig+0x120>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01b      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a29      	ldr	r2, [pc, #164]	; (8005db0 <TIM_Base_SetConfig+0x124>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d017      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <TIM_Base_SetConfig+0x128>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <TIM_Base_SetConfig+0x12c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00f      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <TIM_Base_SetConfig+0x130>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00b      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a25      	ldr	r2, [pc, #148]	; (8005dc0 <TIM_Base_SetConfig+0x134>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d007      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a24      	ldr	r2, [pc, #144]	; (8005dc4 <TIM_Base_SetConfig+0x138>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d003      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a23      	ldr	r2, [pc, #140]	; (8005dc8 <TIM_Base_SetConfig+0x13c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d108      	bne.n	8005d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a0a      	ldr	r2, [pc, #40]	; (8005da0 <TIM_Base_SetConfig+0x114>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_Base_SetConfig+0xf8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <TIM_Base_SetConfig+0x124>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d103      	bne.n	8005d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	615a      	str	r2, [r3, #20]
}
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40010400 	.word	0x40010400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40014400 	.word	0x40014400
 8005dbc:	40014800 	.word	0x40014800
 8005dc0:	40001800 	.word	0x40001800
 8005dc4:	40001c00 	.word	0x40001c00
 8005dc8:	40002000 	.word	0x40002000

08005dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e05a      	b.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a21      	ldr	r2, [pc, #132]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d022      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e30:	d01d      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1d      	ldr	r2, [pc, #116]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d018      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1a      	ldr	r2, [pc, #104]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00e      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a17      	ldr	r2, [pc, #92]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d10c      	bne.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40000400 	.word	0x40000400
 8005eb0:	40000800 	.word	0x40000800
 8005eb4:	40000c00 	.word	0x40000c00
 8005eb8:	40010400 	.word	0x40010400
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40001800 	.word	0x40001800

08005ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e03f      	b.n	8005f7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fb fc50 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2224      	movs	r2, #36	; 0x24
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fd19 	bl	8006968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	4613      	mov	r3, r2
 8005f92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d130      	bne.n	8006002 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_UART_Transmit_IT+0x26>
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e029      	b.n	8006004 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_UART_Transmit_IT+0x38>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e022      	b.n	8006004 <HAL_UART_Transmit_IT+0x7e>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	88fa      	ldrh	r2, [r7, #6]
 8005fd6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2221      	movs	r2, #33	; 0x21
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ffc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e000      	b.n	8006004 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006002:	2302      	movs	r3, #2
  }
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4613      	mov	r3, r2
 800601c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b20      	cmp	r3, #32
 8006028:	d11d      	bne.n	8006066 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_UART_Receive_IT+0x26>
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e016      	b.n	8006068 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_UART_Receive_IT+0x38>
 8006044:	2302      	movs	r3, #2
 8006046:	e00f      	b.n	8006068 <HAL_UART_Receive_IT+0x58>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	461a      	mov	r2, r3
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 faab 	bl	80065b8 <UART_Start_Receive_IT>
 8006062:	4603      	mov	r3, r0
 8006064:	e000      	b.n	8006068 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006066:	2302      	movs	r3, #2
  }
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b0ba      	sub	sp, #232	; 0xe8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006096:	2300      	movs	r3, #0
 8006098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10f      	bne.n	80060d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <HAL_UART_IRQHandler+0x66>
 80060c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fb8f 	bl	80067f2 <UART_Receive_IT>
      return;
 80060d4:	e256      	b.n	8006584 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80de 	beq.w	800629c <HAL_UART_IRQHandler+0x22c>
 80060e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d106      	bne.n	80060fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80d1 	beq.w	800629c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <HAL_UART_IRQHandler+0xae>
 8006106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800610a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f043 0201 	orr.w	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00b      	beq.n	8006142 <HAL_UART_IRQHandler+0xd2>
 800612a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f043 0202 	orr.w	r2, r3, #2
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00b      	beq.n	8006166 <HAL_UART_IRQHandler+0xf6>
 800614e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	f043 0204 	orr.w	r2, r3, #4
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d011      	beq.n	8006196 <HAL_UART_IRQHandler+0x126>
 8006172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d105      	bne.n	800618a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800617e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f043 0208 	orr.w	r2, r3, #8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 81ed 	beq.w	800657a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <HAL_UART_IRQHandler+0x14e>
 80061ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fb1a 	bl	80067f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <HAL_UART_IRQHandler+0x17a>
 80061e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d04f      	beq.n	800628a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa22 	bl	8006634 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	d141      	bne.n	8006282 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3314      	adds	r3, #20
 8006204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3314      	adds	r3, #20
 8006226:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800622a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800622e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006236:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1d9      	bne.n	80061fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	2b00      	cmp	r3, #0
 8006250:	d013      	beq.n	800627a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	4a7d      	ldr	r2, [pc, #500]	; (800644c <HAL_UART_IRQHandler+0x3dc>)
 8006258:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	4618      	mov	r0, r3
 8006260:	f7fc ffbf 	bl	80031e2 <HAL_DMA_Abort_IT>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d016      	beq.n	8006298 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006274:	4610      	mov	r0, r2
 8006276:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	e00e      	b.n	8006298 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f986 	bl	800658c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	e00a      	b.n	8006298 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f982 	bl	800658c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	e006      	b.n	8006298 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f97e 	bl	800658c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006296:	e170      	b.n	800657a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006298:	bf00      	nop
    return;
 800629a:	e16e      	b.n	800657a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	f040 814a 	bne.w	800653a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062aa:	f003 0310 	and.w	r3, r3, #16
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8143 	beq.w	800653a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 813c 	beq.w	800653a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e2:	2b40      	cmp	r3, #64	; 0x40
 80062e4:	f040 80b4 	bne.w	8006450 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8140 	beq.w	800657e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006306:	429a      	cmp	r2, r3
 8006308:	f080 8139 	bcs.w	800657e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006312:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	f000 8088 	beq.w	8006432 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800633c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800634e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800635a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1d9      	bne.n	8006322 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3314      	adds	r3, #20
 8006374:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800637e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3314      	adds	r3, #20
 800638e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006392:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006396:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800639a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e1      	bne.n	800636e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3314      	adds	r3, #20
 80063b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3314      	adds	r3, #20
 80063ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e3      	bne.n	80063aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006402:	f023 0310 	bic.w	r3, r3, #16
 8006406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	330c      	adds	r3, #12
 8006410:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006414:	65ba      	str	r2, [r7, #88]	; 0x58
 8006416:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800641a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e3      	bne.n	80063f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	4618      	mov	r0, r3
 800642e:	f7fc fe68 	bl	8003102 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800643a:	b29b      	uxth	r3, r3
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	b29b      	uxth	r3, r3
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f8ac 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006448:	e099      	b.n	800657e <HAL_UART_IRQHandler+0x50e>
 800644a:	bf00      	nop
 800644c:	080066fb 	.word	0x080066fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006458:	b29b      	uxth	r3, r3
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 808b 	beq.w	8006582 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800646c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 8086 	beq.w	8006582 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	330c      	adds	r3, #12
 800647c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800648c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800649a:	647a      	str	r2, [r7, #68]	; 0x44
 800649c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e3      	bne.n	8006476 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	623b      	str	r3, [r7, #32]
   return(result);
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3314      	adds	r3, #20
 80064ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064d2:	633a      	str	r2, [r7, #48]	; 0x30
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e3      	bne.n	80064ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	60fb      	str	r3, [r7, #12]
   return(result);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0310 	bic.w	r3, r3, #16
 800650a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	330c      	adds	r3, #12
 8006514:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006518:	61fa      	str	r2, [r7, #28]
 800651a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	69b9      	ldr	r1, [r7, #24]
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	617b      	str	r3, [r7, #20]
   return(result);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e3      	bne.n	80064f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800652c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f834 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006538:	e023      	b.n	8006582 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <HAL_UART_IRQHandler+0x4ea>
 8006546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f8e5 	bl	8006722 <UART_Transmit_IT>
    return;
 8006558:	e014      	b.n	8006584 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800655a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00e      	beq.n	8006584 <HAL_UART_IRQHandler+0x514>
 8006566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d008      	beq.n	8006584 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f925 	bl	80067c2 <UART_EndTransmit_IT>
    return;
 8006578:	e004      	b.n	8006584 <HAL_UART_IRQHandler+0x514>
    return;
 800657a:	bf00      	nop
 800657c:	e002      	b.n	8006584 <HAL_UART_IRQHandler+0x514>
      return;
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <HAL_UART_IRQHandler+0x514>
      return;
 8006582:	bf00      	nop
  }
}
 8006584:	37e8      	adds	r7, #232	; 0xe8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop

0800658c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	88fa      	ldrh	r2, [r7, #6]
 80065d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2222      	movs	r2, #34	; 0x22
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006604:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695a      	ldr	r2, [r3, #20]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f042 0220 	orr.w	r2, r2, #32
 8006624:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b095      	sub	sp, #84	; 0x54
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	330c      	adds	r3, #12
 800665a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800665c:	643a      	str	r2, [r7, #64]	; 0x40
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e5      	bne.n	800663c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3314      	adds	r3, #20
 8006676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	64bb      	str	r3, [r7, #72]	; 0x48
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3314      	adds	r3, #20
 800668e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006690:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e5      	bne.n	8006670 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d119      	bne.n	80066e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	330c      	adds	r3, #12
 80066b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f023 0310 	bic.w	r3, r3, #16
 80066c2:	647b      	str	r3, [r7, #68]	; 0x44
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	330c      	adds	r3, #12
 80066ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066cc:	61ba      	str	r2, [r7, #24]
 80066ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6979      	ldr	r1, [r7, #20]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	613b      	str	r3, [r7, #16]
   return(result);
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e5      	bne.n	80066ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066ee:	bf00      	nop
 80066f0:	3754      	adds	r7, #84	; 0x54
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7ff ff39 	bl	800658c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800671a:	bf00      	nop
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b21      	cmp	r3, #33	; 0x21
 8006734:	d13e      	bne.n	80067b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673e:	d114      	bne.n	800676a <UART_Transmit_IT+0x48>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d110      	bne.n	800676a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800675c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	1c9a      	adds	r2, r3, #2
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]
 8006768:	e008      	b.n	800677c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6211      	str	r1, [r2, #32]
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4619      	mov	r1, r3
 800678a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10f      	bne.n	80067b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800679e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e000      	b.n	80067b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fc f828 	bl	8002838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b08c      	sub	sp, #48	; 0x30
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b22      	cmp	r3, #34	; 0x22
 8006804:	f040 80ab 	bne.w	800695e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	d117      	bne.n	8006842 <UART_Receive_IT+0x50>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d113      	bne.n	8006842 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006830:	b29a      	uxth	r2, r3
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	1c9a      	adds	r2, r3, #2
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	629a      	str	r2, [r3, #40]	; 0x28
 8006840:	e026      	b.n	8006890 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006848:	2300      	movs	r3, #0
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006854:	d007      	beq.n	8006866 <UART_Receive_IT+0x74>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <UART_Receive_IT+0x82>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	b2da      	uxtb	r2, r3
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	e008      	b.n	8006886 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006880:	b2da      	uxtb	r2, r3
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4619      	mov	r1, r3
 800689e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d15a      	bne.n	800695a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0220 	bic.w	r2, r2, #32
 80068b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d135      	bne.n	8006950 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	330c      	adds	r3, #12
 80068f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	613b      	str	r3, [r7, #16]
   return(result);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f023 0310 	bic.w	r3, r3, #16
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	623a      	str	r2, [r7, #32]
 800690c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	69f9      	ldr	r1, [r7, #28]
 8006910:	6a3a      	ldr	r2, [r7, #32]
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	61bb      	str	r3, [r7, #24]
   return(result);
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e5      	bne.n	80068ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b10      	cmp	r3, #16
 800692a:	d10a      	bne.n	8006942 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff fe29 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
 800694e:	e002      	b.n	8006956 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7fb ff91 	bl	8002878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e002      	b.n	8006960 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	e000      	b.n	8006960 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800695e:	2302      	movs	r3, #2
  }
}
 8006960:	4618      	mov	r0, r3
 8006962:	3730      	adds	r7, #48	; 0x30
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800696c:	b0c0      	sub	sp, #256	; 0x100
 800696e:	af00      	add	r7, sp, #0
 8006970:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006984:	68d9      	ldr	r1, [r3, #12]
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	ea40 0301 	orr.w	r3, r0, r1
 8006990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	431a      	orrs	r2, r3
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069c0:	f021 010c 	bic.w	r1, r1, #12
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069ce:	430b      	orrs	r3, r1
 80069d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e2:	6999      	ldr	r1, [r3, #24]
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	ea40 0301 	orr.w	r3, r0, r1
 80069ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4b8f      	ldr	r3, [pc, #572]	; (8006c34 <UART_SetConfig+0x2cc>)
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d005      	beq.n	8006a08 <UART_SetConfig+0xa0>
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b8d      	ldr	r3, [pc, #564]	; (8006c38 <UART_SetConfig+0x2d0>)
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d104      	bne.n	8006a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a08:	f7fe fe14 	bl	8005634 <HAL_RCC_GetPCLK2Freq>
 8006a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a10:	e003      	b.n	8006a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a12:	f7fe fdfb 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 8006a16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a24:	f040 810c 	bne.w	8006c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	1891      	adds	r1, r2, r2
 8006a40:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a42:	415b      	adcs	r3, r3
 8006a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	eb12 0801 	adds.w	r8, r2, r1
 8006a50:	4629      	mov	r1, r5
 8006a52:	eb43 0901 	adc.w	r9, r3, r1
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a6a:	4690      	mov	r8, r2
 8006a6c:	4699      	mov	r9, r3
 8006a6e:	4623      	mov	r3, r4
 8006a70:	eb18 0303 	adds.w	r3, r8, r3
 8006a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a78:	462b      	mov	r3, r5
 8006a7a:	eb49 0303 	adc.w	r3, r9, r3
 8006a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a96:	460b      	mov	r3, r1
 8006a98:	18db      	adds	r3, r3, r3
 8006a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	eb42 0303 	adc.w	r3, r2, r3
 8006aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8006aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006aac:	f7f9 fc08 	bl	80002c0 <__aeabi_uldivmod>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <UART_SetConfig+0x2d4>)
 8006ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	011c      	lsls	r4, r3, #4
 8006abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	1891      	adds	r1, r2, r2
 8006ad6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ad8:	415b      	adcs	r3, r3
 8006ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b00:	4692      	mov	sl, r2
 8006b02:	469b      	mov	fp, r3
 8006b04:	4643      	mov	r3, r8
 8006b06:	eb1a 0303 	adds.w	r3, sl, r3
 8006b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	eb4b 0303 	adc.w	r3, fp, r3
 8006b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	18db      	adds	r3, r3, r3
 8006b30:	643b      	str	r3, [r7, #64]	; 0x40
 8006b32:	4613      	mov	r3, r2
 8006b34:	eb42 0303 	adc.w	r3, r2, r3
 8006b38:	647b      	str	r3, [r7, #68]	; 0x44
 8006b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b42:	f7f9 fbbd 	bl	80002c0 <__aeabi_uldivmod>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4b3b      	ldr	r3, [pc, #236]	; (8006c3c <UART_SetConfig+0x2d4>)
 8006b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	2264      	movs	r2, #100	; 0x64
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
 8006b5a:	1acb      	subs	r3, r1, r3
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b62:	4b36      	ldr	r3, [pc, #216]	; (8006c3c <UART_SetConfig+0x2d4>)
 8006b64:	fba3 2302 	umull	r2, r3, r3, r2
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b70:	441c      	add	r4, r3
 8006b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b84:	4642      	mov	r2, r8
 8006b86:	464b      	mov	r3, r9
 8006b88:	1891      	adds	r1, r2, r2
 8006b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b8c:	415b      	adcs	r3, r3
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b94:	4641      	mov	r1, r8
 8006b96:	1851      	adds	r1, r2, r1
 8006b98:	6339      	str	r1, [r7, #48]	; 0x30
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	414b      	adcs	r3, r1
 8006b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bac:	4659      	mov	r1, fp
 8006bae:	00cb      	lsls	r3, r1, #3
 8006bb0:	4651      	mov	r1, sl
 8006bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bb6:	4651      	mov	r1, sl
 8006bb8:	00ca      	lsls	r2, r1, #3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bc8:	464b      	mov	r3, r9
 8006bca:	460a      	mov	r2, r1
 8006bcc:	eb42 0303 	adc.w	r3, r2, r3
 8006bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006be0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006be8:	460b      	mov	r3, r1
 8006bea:	18db      	adds	r3, r3, r3
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bee:	4613      	mov	r3, r2
 8006bf0:	eb42 0303 	adc.w	r3, r2, r3
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006bfe:	f7f9 fb5f 	bl	80002c0 <__aeabi_uldivmod>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <UART_SetConfig+0x2d4>)
 8006c08:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	2164      	movs	r1, #100	; 0x64
 8006c10:	fb01 f303 	mul.w	r3, r1, r3
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	3332      	adds	r3, #50	; 0x32
 8006c1a:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <UART_SetConfig+0x2d4>)
 8006c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	f003 0207 	and.w	r2, r3, #7
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4422      	add	r2, r4
 8006c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c30:	e105      	b.n	8006e3e <UART_SetConfig+0x4d6>
 8006c32:	bf00      	nop
 8006c34:	40011000 	.word	0x40011000
 8006c38:	40011400 	.word	0x40011400
 8006c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c52:	4642      	mov	r2, r8
 8006c54:	464b      	mov	r3, r9
 8006c56:	1891      	adds	r1, r2, r2
 8006c58:	6239      	str	r1, [r7, #32]
 8006c5a:	415b      	adcs	r3, r3
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c62:	4641      	mov	r1, r8
 8006c64:	1854      	adds	r4, r2, r1
 8006c66:	4649      	mov	r1, r9
 8006c68:	eb43 0501 	adc.w	r5, r3, r1
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	00eb      	lsls	r3, r5, #3
 8006c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c7a:	00e2      	lsls	r2, r4, #3
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	461d      	mov	r5, r3
 8006c80:	4643      	mov	r3, r8
 8006c82:	18e3      	adds	r3, r4, r3
 8006c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c88:	464b      	mov	r3, r9
 8006c8a:	eb45 0303 	adc.w	r3, r5, r3
 8006c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ca2:	f04f 0200 	mov.w	r2, #0
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cae:	4629      	mov	r1, r5
 8006cb0:	008b      	lsls	r3, r1, #2
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cb8:	4621      	mov	r1, r4
 8006cba:	008a      	lsls	r2, r1, #2
 8006cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006cc0:	f7f9 fafe 	bl	80002c0 <__aeabi_uldivmod>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4b60      	ldr	r3, [pc, #384]	; (8006e4c <UART_SetConfig+0x4e4>)
 8006cca:	fba3 2302 	umull	r2, r3, r3, r2
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	011c      	lsls	r4, r3, #4
 8006cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	1891      	adds	r1, r2, r2
 8006cea:	61b9      	str	r1, [r7, #24]
 8006cec:	415b      	adcs	r3, r3
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cf4:	4641      	mov	r1, r8
 8006cf6:	1851      	adds	r1, r2, r1
 8006cf8:	6139      	str	r1, [r7, #16]
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	414b      	adcs	r3, r1
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	00cb      	lsls	r3, r1, #3
 8006d10:	4651      	mov	r1, sl
 8006d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d16:	4651      	mov	r1, sl
 8006d18:	00ca      	lsls	r2, r1, #3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4642      	mov	r2, r8
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d28:	464b      	mov	r3, r9
 8006d2a:	460a      	mov	r2, r1
 8006d2c:	eb42 0303 	adc.w	r3, r2, r3
 8006d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	008b      	lsls	r3, r1, #2
 8006d50:	4641      	mov	r1, r8
 8006d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d56:	4641      	mov	r1, r8
 8006d58:	008a      	lsls	r2, r1, #2
 8006d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d5e:	f7f9 faaf 	bl	80002c0 <__aeabi_uldivmod>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4b39      	ldr	r3, [pc, #228]	; (8006e4c <UART_SetConfig+0x4e4>)
 8006d68:	fba3 1302 	umull	r1, r3, r3, r2
 8006d6c:	095b      	lsrs	r3, r3, #5
 8006d6e:	2164      	movs	r1, #100	; 0x64
 8006d70:	fb01 f303 	mul.w	r3, r1, r3
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	3332      	adds	r3, #50	; 0x32
 8006d7a:	4a34      	ldr	r2, [pc, #208]	; (8006e4c <UART_SetConfig+0x4e4>)
 8006d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d86:	441c      	add	r4, r3
 8006d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d90:	677a      	str	r2, [r7, #116]	; 0x74
 8006d92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d96:	4642      	mov	r2, r8
 8006d98:	464b      	mov	r3, r9
 8006d9a:	1891      	adds	r1, r2, r2
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	415b      	adcs	r3, r3
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006da6:	4641      	mov	r1, r8
 8006da8:	1851      	adds	r1, r2, r1
 8006daa:	6039      	str	r1, [r7, #0]
 8006dac:	4649      	mov	r1, r9
 8006dae:	414b      	adcs	r3, r1
 8006db0:	607b      	str	r3, [r7, #4]
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dbe:	4659      	mov	r1, fp
 8006dc0:	00cb      	lsls	r3, r1, #3
 8006dc2:	4651      	mov	r1, sl
 8006dc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dc8:	4651      	mov	r1, sl
 8006dca:	00ca      	lsls	r2, r1, #3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	4642      	mov	r2, r8
 8006dd4:	189b      	adds	r3, r3, r2
 8006dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dd8:	464b      	mov	r3, r9
 8006dda:	460a      	mov	r2, r1
 8006ddc:	eb42 0303 	adc.w	r3, r2, r3
 8006de0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	663b      	str	r3, [r7, #96]	; 0x60
 8006dec:	667a      	str	r2, [r7, #100]	; 0x64
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	008b      	lsls	r3, r1, #2
 8006dfe:	4641      	mov	r1, r8
 8006e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e04:	4641      	mov	r1, r8
 8006e06:	008a      	lsls	r2, r1, #2
 8006e08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e0c:	f7f9 fa58 	bl	80002c0 <__aeabi_uldivmod>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <UART_SetConfig+0x4e4>)
 8006e16:	fba3 1302 	umull	r1, r3, r3, r2
 8006e1a:	095b      	lsrs	r3, r3, #5
 8006e1c:	2164      	movs	r1, #100	; 0x64
 8006e1e:	fb01 f303 	mul.w	r3, r1, r3
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	3332      	adds	r3, #50	; 0x32
 8006e28:	4a08      	ldr	r2, [pc, #32]	; (8006e4c <UART_SetConfig+0x4e4>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	f003 020f 	and.w	r2, r3, #15
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4422      	add	r2, r4
 8006e3c:	609a      	str	r2, [r3, #8]
}
 8006e3e:	bf00      	nop
 8006e40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e44:	46bd      	mov	sp, r7
 8006e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4a:	bf00      	nop
 8006e4c:	51eb851f 	.word	0x51eb851f

08006e50 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8006e56:	4b8b      	ldr	r3, [pc, #556]	; (8007084 <MX_LWIP_Init+0x234>)
 8006e58:	22a9      	movs	r2, #169	; 0xa9
 8006e5a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8006e5c:	4b89      	ldr	r3, [pc, #548]	; (8007084 <MX_LWIP_Init+0x234>)
 8006e5e:	22fe      	movs	r2, #254	; 0xfe
 8006e60:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 8006e62:	4b88      	ldr	r3, [pc, #544]	; (8007084 <MX_LWIP_Init+0x234>)
 8006e64:	2208      	movs	r2, #8
 8006e66:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 45;
 8006e68:	4b86      	ldr	r3, [pc, #536]	; (8007084 <MX_LWIP_Init+0x234>)
 8006e6a:	222d      	movs	r2, #45	; 0x2d
 8006e6c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006e6e:	4b86      	ldr	r3, [pc, #536]	; (8007088 <MX_LWIP_Init+0x238>)
 8006e70:	22ff      	movs	r2, #255	; 0xff
 8006e72:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006e74:	4b84      	ldr	r3, [pc, #528]	; (8007088 <MX_LWIP_Init+0x238>)
 8006e76:	22ff      	movs	r2, #255	; 0xff
 8006e78:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8006e7a:	4b83      	ldr	r3, [pc, #524]	; (8007088 <MX_LWIP_Init+0x238>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006e80:	4b81      	ldr	r3, [pc, #516]	; (8007088 <MX_LWIP_Init+0x238>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006e86:	4b81      	ldr	r3, [pc, #516]	; (800708c <MX_LWIP_Init+0x23c>)
 8006e88:	22c0      	movs	r2, #192	; 0xc0
 8006e8a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006e8c:	4b7f      	ldr	r3, [pc, #508]	; (800708c <MX_LWIP_Init+0x23c>)
 8006e8e:	22a8      	movs	r2, #168	; 0xa8
 8006e90:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006e92:	4b7e      	ldr	r3, [pc, #504]	; (800708c <MX_LWIP_Init+0x23c>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006e98:	4b7c      	ldr	r3, [pc, #496]	; (800708c <MX_LWIP_Init+0x23c>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006e9e:	f000 fc27 	bl	80076f0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006ea2:	4b78      	ldr	r3, [pc, #480]	; (8007084 <MX_LWIP_Init+0x234>)
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	061a      	lsls	r2, r3, #24
 8006ea8:	4b76      	ldr	r3, [pc, #472]	; (8007084 <MX_LWIP_Init+0x234>)
 8006eaa:	785b      	ldrb	r3, [r3, #1]
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	4b74      	ldr	r3, [pc, #464]	; (8007084 <MX_LWIP_Init+0x234>)
 8006eb2:	789b      	ldrb	r3, [r3, #2]
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	4a72      	ldr	r2, [pc, #456]	; (8007084 <MX_LWIP_Init+0x234>)
 8006eba:	78d2      	ldrb	r2, [r2, #3]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	061a      	lsls	r2, r3, #24
 8006ec0:	4b70      	ldr	r3, [pc, #448]	; (8007084 <MX_LWIP_Init+0x234>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	0619      	lsls	r1, r3, #24
 8006ec6:	4b6f      	ldr	r3, [pc, #444]	; (8007084 <MX_LWIP_Init+0x234>)
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	041b      	lsls	r3, r3, #16
 8006ecc:	4319      	orrs	r1, r3
 8006ece:	4b6d      	ldr	r3, [pc, #436]	; (8007084 <MX_LWIP_Init+0x234>)
 8006ed0:	789b      	ldrb	r3, [r3, #2]
 8006ed2:	021b      	lsls	r3, r3, #8
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	496b      	ldr	r1, [pc, #428]	; (8007084 <MX_LWIP_Init+0x234>)
 8006ed8:	78c9      	ldrb	r1, [r1, #3]
 8006eda:	430b      	orrs	r3, r1
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	4b67      	ldr	r3, [pc, #412]	; (8007084 <MX_LWIP_Init+0x234>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	0619      	lsls	r1, r3, #24
 8006eea:	4b66      	ldr	r3, [pc, #408]	; (8007084 <MX_LWIP_Init+0x234>)
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	4319      	orrs	r1, r3
 8006ef2:	4b64      	ldr	r3, [pc, #400]	; (8007084 <MX_LWIP_Init+0x234>)
 8006ef4:	789b      	ldrb	r3, [r3, #2]
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	4962      	ldr	r1, [pc, #392]	; (8007084 <MX_LWIP_Init+0x234>)
 8006efc:	78c9      	ldrb	r1, [r1, #3]
 8006efe:	430b      	orrs	r3, r1
 8006f00:	0a1b      	lsrs	r3, r3, #8
 8006f02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f06:	431a      	orrs	r2, r3
 8006f08:	4b5e      	ldr	r3, [pc, #376]	; (8007084 <MX_LWIP_Init+0x234>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	0619      	lsls	r1, r3, #24
 8006f0e:	4b5d      	ldr	r3, [pc, #372]	; (8007084 <MX_LWIP_Init+0x234>)
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	041b      	lsls	r3, r3, #16
 8006f14:	4319      	orrs	r1, r3
 8006f16:	4b5b      	ldr	r3, [pc, #364]	; (8007084 <MX_LWIP_Init+0x234>)
 8006f18:	789b      	ldrb	r3, [r3, #2]
 8006f1a:	021b      	lsls	r3, r3, #8
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	4959      	ldr	r1, [pc, #356]	; (8007084 <MX_LWIP_Init+0x234>)
 8006f20:	78c9      	ldrb	r1, [r1, #3]
 8006f22:	430b      	orrs	r3, r1
 8006f24:	0e1b      	lsrs	r3, r3, #24
 8006f26:	4313      	orrs	r3, r2
 8006f28:	4a59      	ldr	r2, [pc, #356]	; (8007090 <MX_LWIP_Init+0x240>)
 8006f2a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006f2c:	4b56      	ldr	r3, [pc, #344]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	061a      	lsls	r2, r3, #24
 8006f32:	4b55      	ldr	r3, [pc, #340]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	4b53      	ldr	r3, [pc, #332]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f3c:	789b      	ldrb	r3, [r3, #2]
 8006f3e:	021b      	lsls	r3, r3, #8
 8006f40:	4313      	orrs	r3, r2
 8006f42:	4a51      	ldr	r2, [pc, #324]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f44:	78d2      	ldrb	r2, [r2, #3]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	061a      	lsls	r2, r3, #24
 8006f4a:	4b4f      	ldr	r3, [pc, #316]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	0619      	lsls	r1, r3, #24
 8006f50:	4b4d      	ldr	r3, [pc, #308]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	041b      	lsls	r3, r3, #16
 8006f56:	4319      	orrs	r1, r3
 8006f58:	4b4b      	ldr	r3, [pc, #300]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f5a:	789b      	ldrb	r3, [r3, #2]
 8006f5c:	021b      	lsls	r3, r3, #8
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	4949      	ldr	r1, [pc, #292]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f62:	78c9      	ldrb	r1, [r1, #3]
 8006f64:	430b      	orrs	r3, r1
 8006f66:	021b      	lsls	r3, r3, #8
 8006f68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	4b46      	ldr	r3, [pc, #280]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	0619      	lsls	r1, r3, #24
 8006f74:	4b44      	ldr	r3, [pc, #272]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f76:	785b      	ldrb	r3, [r3, #1]
 8006f78:	041b      	lsls	r3, r3, #16
 8006f7a:	4319      	orrs	r1, r3
 8006f7c:	4b42      	ldr	r3, [pc, #264]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f7e:	789b      	ldrb	r3, [r3, #2]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	430b      	orrs	r3, r1
 8006f84:	4940      	ldr	r1, [pc, #256]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f86:	78c9      	ldrb	r1, [r1, #3]
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	0a1b      	lsrs	r3, r3, #8
 8006f8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f90:	431a      	orrs	r2, r3
 8006f92:	4b3d      	ldr	r3, [pc, #244]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	0619      	lsls	r1, r3, #24
 8006f98:	4b3b      	ldr	r3, [pc, #236]	; (8007088 <MX_LWIP_Init+0x238>)
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	041b      	lsls	r3, r3, #16
 8006f9e:	4319      	orrs	r1, r3
 8006fa0:	4b39      	ldr	r3, [pc, #228]	; (8007088 <MX_LWIP_Init+0x238>)
 8006fa2:	789b      	ldrb	r3, [r3, #2]
 8006fa4:	021b      	lsls	r3, r3, #8
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	4937      	ldr	r1, [pc, #220]	; (8007088 <MX_LWIP_Init+0x238>)
 8006faa:	78c9      	ldrb	r1, [r1, #3]
 8006fac:	430b      	orrs	r3, r1
 8006fae:	0e1b      	lsrs	r3, r3, #24
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	4a38      	ldr	r2, [pc, #224]	; (8007094 <MX_LWIP_Init+0x244>)
 8006fb4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006fb6:	4b35      	ldr	r3, [pc, #212]	; (800708c <MX_LWIP_Init+0x23c>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	061a      	lsls	r2, r3, #24
 8006fbc:	4b33      	ldr	r3, [pc, #204]	; (800708c <MX_LWIP_Init+0x23c>)
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	041b      	lsls	r3, r3, #16
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	4b31      	ldr	r3, [pc, #196]	; (800708c <MX_LWIP_Init+0x23c>)
 8006fc6:	789b      	ldrb	r3, [r3, #2]
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	4a2f      	ldr	r2, [pc, #188]	; (800708c <MX_LWIP_Init+0x23c>)
 8006fce:	78d2      	ldrb	r2, [r2, #3]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	061a      	lsls	r2, r3, #24
 8006fd4:	4b2d      	ldr	r3, [pc, #180]	; (800708c <MX_LWIP_Init+0x23c>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	0619      	lsls	r1, r3, #24
 8006fda:	4b2c      	ldr	r3, [pc, #176]	; (800708c <MX_LWIP_Init+0x23c>)
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	041b      	lsls	r3, r3, #16
 8006fe0:	4319      	orrs	r1, r3
 8006fe2:	4b2a      	ldr	r3, [pc, #168]	; (800708c <MX_LWIP_Init+0x23c>)
 8006fe4:	789b      	ldrb	r3, [r3, #2]
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	4928      	ldr	r1, [pc, #160]	; (800708c <MX_LWIP_Init+0x23c>)
 8006fec:	78c9      	ldrb	r1, [r1, #3]
 8006fee:	430b      	orrs	r3, r1
 8006ff0:	021b      	lsls	r3, r3, #8
 8006ff2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	4b24      	ldr	r3, [pc, #144]	; (800708c <MX_LWIP_Init+0x23c>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	0619      	lsls	r1, r3, #24
 8006ffe:	4b23      	ldr	r3, [pc, #140]	; (800708c <MX_LWIP_Init+0x23c>)
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	041b      	lsls	r3, r3, #16
 8007004:	4319      	orrs	r1, r3
 8007006:	4b21      	ldr	r3, [pc, #132]	; (800708c <MX_LWIP_Init+0x23c>)
 8007008:	789b      	ldrb	r3, [r3, #2]
 800700a:	021b      	lsls	r3, r3, #8
 800700c:	430b      	orrs	r3, r1
 800700e:	491f      	ldr	r1, [pc, #124]	; (800708c <MX_LWIP_Init+0x23c>)
 8007010:	78c9      	ldrb	r1, [r1, #3]
 8007012:	430b      	orrs	r3, r1
 8007014:	0a1b      	lsrs	r3, r3, #8
 8007016:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800701a:	431a      	orrs	r2, r3
 800701c:	4b1b      	ldr	r3, [pc, #108]	; (800708c <MX_LWIP_Init+0x23c>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	0619      	lsls	r1, r3, #24
 8007022:	4b1a      	ldr	r3, [pc, #104]	; (800708c <MX_LWIP_Init+0x23c>)
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	041b      	lsls	r3, r3, #16
 8007028:	4319      	orrs	r1, r3
 800702a:	4b18      	ldr	r3, [pc, #96]	; (800708c <MX_LWIP_Init+0x23c>)
 800702c:	789b      	ldrb	r3, [r3, #2]
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	430b      	orrs	r3, r1
 8007032:	4916      	ldr	r1, [pc, #88]	; (800708c <MX_LWIP_Init+0x23c>)
 8007034:	78c9      	ldrb	r1, [r1, #3]
 8007036:	430b      	orrs	r3, r1
 8007038:	0e1b      	lsrs	r3, r3, #24
 800703a:	4313      	orrs	r3, r2
 800703c:	4a16      	ldr	r2, [pc, #88]	; (8007098 <MX_LWIP_Init+0x248>)
 800703e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007040:	4b16      	ldr	r3, [pc, #88]	; (800709c <MX_LWIP_Init+0x24c>)
 8007042:	9302      	str	r3, [sp, #8]
 8007044:	4b16      	ldr	r3, [pc, #88]	; (80070a0 <MX_LWIP_Init+0x250>)
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	2300      	movs	r3, #0
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	4b12      	ldr	r3, [pc, #72]	; (8007098 <MX_LWIP_Init+0x248>)
 800704e:	4a11      	ldr	r2, [pc, #68]	; (8007094 <MX_LWIP_Init+0x244>)
 8007050:	490f      	ldr	r1, [pc, #60]	; (8007090 <MX_LWIP_Init+0x240>)
 8007052:	4814      	ldr	r0, [pc, #80]	; (80070a4 <MX_LWIP_Init+0x254>)
 8007054:	f000 ff50 	bl	8007ef8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007058:	4812      	ldr	r0, [pc, #72]	; (80070a4 <MX_LWIP_Init+0x254>)
 800705a:	f001 f82d 	bl	80080b8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800705e:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <MX_LWIP_Init+0x254>)
 8007060:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007064:	089b      	lsrs	r3, r3, #2
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007070:	480c      	ldr	r0, [pc, #48]	; (80070a4 <MX_LWIP_Init+0x254>)
 8007072:	f001 f831 	bl	80080d8 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007076:	e002      	b.n	800707e <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8007078:	480a      	ldr	r0, [pc, #40]	; (80070a4 <MX_LWIP_Init+0x254>)
 800707a:	f001 f871 	bl	8008160 <netif_set_down>
}
 800707e:	bf00      	nop
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	2000099c 	.word	0x2000099c
 8007088:	200009a0 	.word	0x200009a0
 800708c:	200009a4 	.word	0x200009a4
 8007090:	20000990 	.word	0x20000990
 8007094:	20000994 	.word	0x20000994
 8007098:	20000998 	.word	0x20000998
 800709c:	08010971 	.word	0x08010971
 80070a0:	08007639 	.word	0x08007639
 80070a4:	20000960 	.word	0x20000960

080070a8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80070ac:	4803      	ldr	r0, [pc, #12]	; (80070bc <MX_LWIP_Process+0x14>)
 80070ae:	f000 faa3 	bl	80075f8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80070b2:	f007 f97f 	bl	800e3b4 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80070b6:	bf00      	nop
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20000960 	.word	0x20000960

080070c0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08e      	sub	sp, #56	; 0x38
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	605a      	str	r2, [r3, #4]
 80070d2:	609a      	str	r2, [r3, #8]
 80070d4:	60da      	str	r2, [r3, #12]
 80070d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a46      	ldr	r2, [pc, #280]	; (80071f8 <HAL_ETH_MspInit+0x138>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	f040 8085 	bne.w	80071ee <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80070e4:	2300      	movs	r3, #0
 80070e6:	623b      	str	r3, [r7, #32]
 80070e8:	4b44      	ldr	r3, [pc, #272]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 80070ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ec:	4a43      	ldr	r2, [pc, #268]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 80070ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80070f2:	6313      	str	r3, [r2, #48]	; 0x30
 80070f4:	4b41      	ldr	r3, [pc, #260]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 80070f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fc:	623b      	str	r3, [r7, #32]
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	2300      	movs	r3, #0
 8007102:	61fb      	str	r3, [r7, #28]
 8007104:	4b3d      	ldr	r3, [pc, #244]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	4a3c      	ldr	r2, [pc, #240]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 800710a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800710e:	6313      	str	r3, [r2, #48]	; 0x30
 8007110:	4b3a      	ldr	r3, [pc, #232]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
 8007120:	4b36      	ldr	r3, [pc, #216]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	4a35      	ldr	r2, [pc, #212]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 8007126:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800712a:	6313      	str	r3, [r2, #48]	; 0x30
 800712c:	4b33      	ldr	r3, [pc, #204]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	4b2f      	ldr	r3, [pc, #188]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	4a2e      	ldr	r2, [pc, #184]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 8007142:	f043 0304 	orr.w	r3, r3, #4
 8007146:	6313      	str	r3, [r2, #48]	; 0x30
 8007148:	4b2c      	ldr	r3, [pc, #176]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007154:	2300      	movs	r3, #0
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	4b28      	ldr	r3, [pc, #160]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	4a27      	ldr	r2, [pc, #156]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	6313      	str	r3, [r2, #48]	; 0x30
 8007164:	4b25      	ldr	r3, [pc, #148]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 8007166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	4b21      	ldr	r3, [pc, #132]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	4a20      	ldr	r2, [pc, #128]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 800717a:	f043 0302 	orr.w	r3, r3, #2
 800717e:	6313      	str	r3, [r2, #48]	; 0x30
 8007180:	4b1e      	ldr	r3, [pc, #120]	; (80071fc <HAL_ETH_MspInit+0x13c>)
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800718c:	2332      	movs	r3, #50	; 0x32
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007190:	2302      	movs	r3, #2
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007194:	2300      	movs	r3, #0
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007198:	2303      	movs	r3, #3
 800719a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800719c:	230b      	movs	r3, #11
 800719e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071a4:	4619      	mov	r1, r3
 80071a6:	4816      	ldr	r0, [pc, #88]	; (8007200 <HAL_ETH_MspInit+0x140>)
 80071a8:	f7fd fb4a 	bl	8004840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80071ac:	2386      	movs	r3, #134	; 0x86
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b0:	2302      	movs	r3, #2
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b8:	2303      	movs	r3, #3
 80071ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071bc:	230b      	movs	r3, #11
 80071be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071c4:	4619      	mov	r1, r3
 80071c6:	480f      	ldr	r0, [pc, #60]	; (8007204 <HAL_ETH_MspInit+0x144>)
 80071c8:	f7fd fb3a 	bl	8004840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80071cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80071d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d2:	2302      	movs	r3, #2
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071da:	2303      	movs	r3, #3
 80071dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071de:	230b      	movs	r3, #11
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071e6:	4619      	mov	r1, r3
 80071e8:	4807      	ldr	r0, [pc, #28]	; (8007208 <HAL_ETH_MspInit+0x148>)
 80071ea:	f7fd fb29 	bl	8004840 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80071ee:	bf00      	nop
 80071f0:	3738      	adds	r7, #56	; 0x38
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40028000 	.word	0x40028000
 80071fc:	40023800 	.word	0x40023800
 8007200:	40020800 	.word	0x40020800
 8007204:	40020000 	.word	0x40020000
 8007208:	40020400 	.word	0x40020400

0800720c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007218:	4b49      	ldr	r3, [pc, #292]	; (8007340 <low_level_init+0x134>)
 800721a:	4a4a      	ldr	r2, [pc, #296]	; (8007344 <low_level_init+0x138>)
 800721c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800721e:	4b48      	ldr	r3, [pc, #288]	; (8007340 <low_level_init+0x134>)
 8007220:	2201      	movs	r2, #1
 8007222:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007224:	4b46      	ldr	r3, [pc, #280]	; (8007340 <low_level_init+0x134>)
 8007226:	2201      	movs	r2, #1
 8007228:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800722a:	2300      	movs	r3, #0
 800722c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800722e:	2380      	movs	r3, #128	; 0x80
 8007230:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007232:	23e1      	movs	r3, #225	; 0xe1
 8007234:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007236:	2300      	movs	r3, #0
 8007238:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800723a:	2300      	movs	r3, #0
 800723c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800723e:	2300      	movs	r3, #0
 8007240:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007242:	4a3f      	ldr	r2, [pc, #252]	; (8007340 <low_level_init+0x134>)
 8007244:	f107 0308 	add.w	r3, r7, #8
 8007248:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800724a:	4b3d      	ldr	r3, [pc, #244]	; (8007340 <low_level_init+0x134>)
 800724c:	2200      	movs	r2, #0
 800724e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007250:	4b3b      	ldr	r3, [pc, #236]	; (8007340 <low_level_init+0x134>)
 8007252:	2200      	movs	r2, #0
 8007254:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007256:	4b3a      	ldr	r3, [pc, #232]	; (8007340 <low_level_init+0x134>)
 8007258:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800725c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800725e:	4838      	ldr	r0, [pc, #224]	; (8007340 <low_level_init+0x134>)
 8007260:	f7fb ffe2 	bl	8003228 <HAL_ETH_Init>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d108      	bne.n	8007280 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007274:	f043 0304 	orr.w	r3, r3, #4
 8007278:	b2da      	uxtb	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007280:	2304      	movs	r3, #4
 8007282:	4a31      	ldr	r2, [pc, #196]	; (8007348 <low_level_init+0x13c>)
 8007284:	4931      	ldr	r1, [pc, #196]	; (800734c <low_level_init+0x140>)
 8007286:	482e      	ldr	r0, [pc, #184]	; (8007340 <low_level_init+0x134>)
 8007288:	f7fc f968 	bl	800355c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800728c:	2304      	movs	r3, #4
 800728e:	4a30      	ldr	r2, [pc, #192]	; (8007350 <low_level_init+0x144>)
 8007290:	4930      	ldr	r1, [pc, #192]	; (8007354 <low_level_init+0x148>)
 8007292:	482b      	ldr	r0, [pc, #172]	; (8007340 <low_level_init+0x134>)
 8007294:	f7fc f9ca 	bl	800362c <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2206      	movs	r2, #6
 800729c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80072a0:	4b27      	ldr	r3, [pc, #156]	; (8007340 <low_level_init+0x134>)
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80072ac:	4b24      	ldr	r3, [pc, #144]	; (8007340 <low_level_init+0x134>)
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	785a      	ldrb	r2, [r3, #1]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80072b8:	4b21      	ldr	r3, [pc, #132]	; (8007340 <low_level_init+0x134>)
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	789a      	ldrb	r2, [r3, #2]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80072c4:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <low_level_init+0x134>)
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	78da      	ldrb	r2, [r3, #3]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80072d0:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <low_level_init+0x134>)
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	791a      	ldrb	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80072dc:	4b18      	ldr	r3, [pc, #96]	; (8007340 <low_level_init+0x134>)
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	795a      	ldrb	r2, [r3, #5]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* maximum transfer unit */
  netif->mtu = 1500;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80072ee:	845a      	strh	r2, [r3, #34]	; 0x22

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80072f6:	f043 030a 	orr.w	r3, r3, #10
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007302:	480f      	ldr	r0, [pc, #60]	; (8007340 <low_level_init+0x134>)
 8007304:	f7fc fcbc 	bl	8003c80 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007308:	f107 0310 	add.w	r3, r7, #16
 800730c:	461a      	mov	r2, r3
 800730e:	211d      	movs	r1, #29
 8007310:	480b      	ldr	r0, [pc, #44]	; (8007340 <low_level_init+0x134>)
 8007312:	f7fc fbe7 	bl	8003ae4 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f043 0310 	orr.w	r3, r3, #16
 800731c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	461a      	mov	r2, r3
 8007322:	211d      	movs	r1, #29
 8007324:	4806      	ldr	r0, [pc, #24]	; (8007340 <low_level_init+0x134>)
 8007326:	f7fc fc45 	bl	8003bb4 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800732a:	f107 0310 	add.w	r3, r7, #16
 800732e:	461a      	mov	r2, r3
 8007330:	211d      	movs	r1, #29
 8007332:	4803      	ldr	r0, [pc, #12]	; (8007340 <low_level_init+0x134>)
 8007334:	f7fc fbd6 	bl	8003ae4 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8007338:	bf00      	nop
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20003a48 	.word	0x20003a48
 8007344:	40028000 	.word	0x40028000
 8007348:	20002278 	.word	0x20002278
 800734c:	20000a28 	.word	0x20000a28
 8007350:	20000aa8 	.word	0x20000aa8
 8007354:	200009a8 	.word	0x200009a8

08007358 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007362:	4b4b      	ldr	r3, [pc, #300]	; (8007490 <low_level_output+0x138>)
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800737a:	4b45      	ldr	r3, [pc, #276]	; (8007490 <low_level_output+0x138>)
 800737c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	623b      	str	r3, [r7, #32]
 8007388:	e05a      	b.n	8007440 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	da03      	bge.n	800739a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007392:	23f8      	movs	r3, #248	; 0xf8
 8007394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007398:	e05c      	b.n	8007454 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	895b      	ldrh	r3, [r3, #10]
 800739e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80073a4:	e02f      	b.n	8007406 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	18d0      	adds	r0, r2, r3
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	18d1      	adds	r1, r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80073ba:	3304      	adds	r3, #4
 80073bc:	461a      	mov	r2, r3
 80073be:	f009 fbf9 	bl	8010bb4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da03      	bge.n	80073d8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80073d0:	23f8      	movs	r3, #248	; 0xf8
 80073d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80073d6:	e03d      	b.n	8007454 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80073e8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80073f4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007400:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	4413      	add	r3, r2
 800740c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007410:	4293      	cmp	r3, r2
 8007412:	d8c8      	bhi.n	80073a6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	18d0      	adds	r0, r2, r3
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	4413      	add	r3, r2
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4619      	mov	r1, r3
 8007426:	f009 fbc5 	bl	8010bb4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	623b      	str	r3, [r7, #32]
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1a1      	bne.n	800738a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007446:	6979      	ldr	r1, [r7, #20]
 8007448:	4811      	ldr	r0, [pc, #68]	; (8007490 <low_level_output+0x138>)
 800744a:	f7fc f95b 	bl	8003704 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007454:	4b0e      	ldr	r3, [pc, #56]	; (8007490 <low_level_output+0x138>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00d      	beq.n	8007482 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <low_level_output+0x138>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746e:	461a      	mov	r2, r3
 8007470:	2320      	movs	r3, #32
 8007472:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007474:	4b06      	ldr	r3, [pc, #24]	; (8007490 <low_level_output+0x138>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747c:	461a      	mov	r2, r3
 800747e:	2300      	movs	r3, #0
 8007480:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8007482:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007486:	4618      	mov	r0, r3
 8007488:	3728      	adds	r7, #40	; 0x28
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20003a48 	.word	0x20003a48

08007494 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08c      	sub	sp, #48	; 0x30
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80074a0:	2300      	movs	r3, #0
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80074b8:	484e      	ldr	r0, [pc, #312]	; (80075f4 <low_level_input+0x160>)
 80074ba:	f7fc fa0d 	bl	80038d8 <HAL_ETH_GetReceivedFrame>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <low_level_input+0x34>
    return NULL;
 80074c4:	2300      	movs	r3, #0
 80074c6:	e090      	b.n	80075ea <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80074c8:	4b4a      	ldr	r3, [pc, #296]	; (80075f4 <low_level_input+0x160>)
 80074ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074cc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80074ce:	4b49      	ldr	r3, [pc, #292]	; (80075f4 <low_level_input+0x160>)
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80074d4:	89fb      	ldrh	r3, [r7, #14]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d006      	beq.n	80074e8 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80074da:	89fb      	ldrh	r3, [r7, #14]
 80074dc:	2203      	movs	r2, #3
 80074de:	4619      	mov	r1, r3
 80074e0:	2004      	movs	r0, #4
 80074e2:	f000 fe8f 	bl	8008204 <pbuf_alloc>
 80074e6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d04b      	beq.n	8007586 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80074ee:	4b41      	ldr	r3, [pc, #260]	; (80075f4 <low_level_input+0x160>)
 80074f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f2:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80074fc:	e040      	b.n	8007580 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	895b      	ldrh	r3, [r3, #10]
 8007502:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007508:	e021      	b.n	800754e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	18d0      	adds	r0, r2, r3
 8007512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	18d1      	adds	r1, r2, r3
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800751e:	3304      	adds	r3, #4
 8007520:	461a      	mov	r2, r3
 8007522:	f009 fb47 	bl	8010bb4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	4413      	add	r3, r2
 8007538:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800753c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007548:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007558:	4293      	cmp	r3, r2
 800755a:	d8d6      	bhi.n	800750a <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	18d0      	adds	r0, r2, r3
 8007564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	4413      	add	r3, r2
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4619      	mov	r1, r3
 800756e:	f009 fb21 	bl	8010bb4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	4413      	add	r3, r2
 8007578:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1bb      	bne.n	80074fe <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007586:	4b1b      	ldr	r3, [pc, #108]	; (80075f4 <low_level_input+0x160>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800758c:	2300      	movs	r3, #0
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	e00b      	b.n	80075aa <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	3301      	adds	r3, #1
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <low_level_input+0x160>)
 80075ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d3ee      	bcc.n	8007592 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80075b4:	4b0f      	ldr	r3, [pc, #60]	; (80075f4 <low_level_input+0x160>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80075ba:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <low_level_input+0x160>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00d      	beq.n	80075e8 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <low_level_input+0x160>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d4:	461a      	mov	r2, r3
 80075d6:	2380      	movs	r3, #128	; 0x80
 80075d8:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80075da:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <low_level_input+0x160>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e2:	461a      	mov	r2, r3
 80075e4:	2300      	movs	r3, #0
 80075e6:	6093      	str	r3, [r2, #8]
  }
  return p;
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3730      	adds	r7, #48	; 0x30
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20003a48 	.word	0x20003a48

080075f8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff ff47 	bl	8007494 <low_level_input>
 8007606:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d010      	beq.n	8007630 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	4798      	blx	r3
 8007618:	4603      	mov	r3, r0
 800761a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800761c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d006      	beq.n	8007632 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f001 f965 	bl	80088f4 <pbuf_free>
    p = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	e000      	b.n	8007632 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007630:	bf00      	nop
  }
}
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <ethernetif_init+0x1c>
 8007646:	4b0e      	ldr	r3, [pc, #56]	; (8007680 <ethernetif_init+0x48>)
 8007648:	f44f 7201 	mov.w	r2, #516	; 0x204
 800764c:	490d      	ldr	r1, [pc, #52]	; (8007684 <ethernetif_init+0x4c>)
 800764e:	480e      	ldr	r0, [pc, #56]	; (8007688 <ethernetif_init+0x50>)
 8007650:	f009 fba6 	bl	8010da0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2273      	movs	r2, #115	; 0x73
 8007658:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2274      	movs	r2, #116	; 0x74
 8007660:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a09      	ldr	r2, [pc, #36]	; (800768c <ethernetif_init+0x54>)
 8007668:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a08      	ldr	r2, [pc, #32]	; (8007690 <ethernetif_init+0x58>)
 800766e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff fdcb 	bl	800720c <low_level_init>

  return ERR_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	080123f8 	.word	0x080123f8
 8007684:	08012414 	.word	0x08012414
 8007688:	08012424 	.word	0x08012424
 800768c:	0800ef4d 	.word	0x0800ef4d
 8007690:	08007359 	.word	0x08007359

08007694 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007698:	f7fb fbf2 	bl	8002e80 <HAL_GetTick>
 800769c:	4603      	mov	r3, r0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	4603      	mov	r3, r0
 80076aa:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80076ac:	88fb      	ldrh	r3, [r7, #6]
 80076ae:	ba5b      	rev16	r3, r3
 80076b0:	b29b      	uxth	r3, r3
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	061a      	lsls	r2, r3, #24
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	0e1b      	lsrs	r3, r3, #24
 80076e2:	4313      	orrs	r3, r2
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80076fa:	f000 f8a7 	bl	800784c <mem_init>
  memp_init();
 80076fe:	f000 fb39 	bl	8007d74 <memp_init>
  pbuf_init();
  netif_init();
 8007702:	f000 fbf1 	bl	8007ee8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007706:	f006 fea7 	bl	800e458 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800770a:	f001 fb6d 	bl	8008de8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800770e:	f006 fd85 	bl	800e21c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007724:	4b40      	ldr	r3, [pc, #256]	; (8007828 <plug_holes+0x10c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	429a      	cmp	r2, r3
 800772c:	d206      	bcs.n	800773c <plug_holes+0x20>
 800772e:	4b3f      	ldr	r3, [pc, #252]	; (800782c <plug_holes+0x110>)
 8007730:	f240 125d 	movw	r2, #349	; 0x15d
 8007734:	493e      	ldr	r1, [pc, #248]	; (8007830 <plug_holes+0x114>)
 8007736:	483f      	ldr	r0, [pc, #252]	; (8007834 <plug_holes+0x118>)
 8007738:	f009 fb32 	bl	8010da0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800773c:	4b3e      	ldr	r3, [pc, #248]	; (8007838 <plug_holes+0x11c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	429a      	cmp	r2, r3
 8007744:	d306      	bcc.n	8007754 <plug_holes+0x38>
 8007746:	4b39      	ldr	r3, [pc, #228]	; (800782c <plug_holes+0x110>)
 8007748:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800774c:	493b      	ldr	r1, [pc, #236]	; (800783c <plug_holes+0x120>)
 800774e:	4839      	ldr	r0, [pc, #228]	; (8007834 <plug_holes+0x118>)
 8007750:	f009 fb26 	bl	8010da0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	791b      	ldrb	r3, [r3, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d006      	beq.n	800776a <plug_holes+0x4e>
 800775c:	4b33      	ldr	r3, [pc, #204]	; (800782c <plug_holes+0x110>)
 800775e:	f240 125f 	movw	r2, #351	; 0x15f
 8007762:	4937      	ldr	r1, [pc, #220]	; (8007840 <plug_holes+0x124>)
 8007764:	4833      	ldr	r0, [pc, #204]	; (8007834 <plug_holes+0x118>)
 8007766:	f009 fb1b 	bl	8010da0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007772:	d906      	bls.n	8007782 <plug_holes+0x66>
 8007774:	4b2d      	ldr	r3, [pc, #180]	; (800782c <plug_holes+0x110>)
 8007776:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800777a:	4932      	ldr	r1, [pc, #200]	; (8007844 <plug_holes+0x128>)
 800777c:	482d      	ldr	r0, [pc, #180]	; (8007834 <plug_holes+0x118>)
 800777e:	f009 fb0f 	bl	8010da0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8007782:	4b29      	ldr	r3, [pc, #164]	; (8007828 <plug_holes+0x10c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	8812      	ldrh	r2, [r2, #0]
 800778a:	4413      	add	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	429a      	cmp	r2, r3
 8007794:	d01f      	beq.n	80077d6 <plug_holes+0xba>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	791b      	ldrb	r3, [r3, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d11b      	bne.n	80077d6 <plug_holes+0xba>
 800779e:	4b26      	ldr	r3, [pc, #152]	; (8007838 <plug_holes+0x11c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d016      	beq.n	80077d6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80077a8:	4b27      	ldr	r3, [pc, #156]	; (8007848 <plug_holes+0x12c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d102      	bne.n	80077b8 <plug_holes+0x9c>
      lfree = mem;
 80077b2:	4a25      	ldr	r2, [pc, #148]	; (8007848 <plug_holes+0x12c>)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	881a      	ldrh	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80077c0:	4b19      	ldr	r3, [pc, #100]	; (8007828 <plug_holes+0x10c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	1ad1      	subs	r1, r2, r3
 80077c8:	4b17      	ldr	r3, [pc, #92]	; (8007828 <plug_holes+0x10c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	8812      	ldrh	r2, [r2, #0]
 80077d0:	4413      	add	r3, r2
 80077d2:	b28a      	uxth	r2, r1
 80077d4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <plug_holes+0x10c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	8852      	ldrh	r2, [r2, #2]
 80077de:	4413      	add	r3, r2
 80077e0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d01a      	beq.n	8007820 <plug_holes+0x104>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	791b      	ldrb	r3, [r3, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d116      	bne.n	8007820 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80077f2:	4b15      	ldr	r3, [pc, #84]	; (8007848 <plug_holes+0x12c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d102      	bne.n	8007802 <plug_holes+0xe6>
      lfree = pmem;
 80077fc:	4a12      	ldr	r2, [pc, #72]	; (8007848 <plug_holes+0x12c>)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	881a      	ldrh	r2, [r3, #0]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800780a:	4b07      	ldr	r3, [pc, #28]	; (8007828 <plug_holes+0x10c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	1ad1      	subs	r1, r2, r3
 8007812:	4b05      	ldr	r3, [pc, #20]	; (8007828 <plug_holes+0x10c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	8812      	ldrh	r2, [r2, #0]
 800781a:	4413      	add	r3, r2
 800781c:	b28a      	uxth	r2, r1
 800781e:	805a      	strh	r2, [r3, #2]
  }
}
 8007820:	bf00      	nop
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	200040fc 	.word	0x200040fc
 800782c:	0801244c 	.word	0x0801244c
 8007830:	0801247c 	.word	0x0801247c
 8007834:	08012494 	.word	0x08012494
 8007838:	20004100 	.word	0x20004100
 800783c:	080124bc 	.word	0x080124bc
 8007840:	080124d8 	.word	0x080124d8
 8007844:	080124f4 	.word	0x080124f4
 8007848:	20004104 	.word	0x20004104

0800784c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007852:	4b19      	ldr	r3, [pc, #100]	; (80078b8 <mem_init+0x6c>)
 8007854:	3303      	adds	r3, #3
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	461a      	mov	r2, r3
 800785c:	4b17      	ldr	r3, [pc, #92]	; (80078bc <mem_init+0x70>)
 800785e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007860:	4b16      	ldr	r3, [pc, #88]	; (80078bc <mem_init+0x70>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800786c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800787a:	4b10      	ldr	r3, [pc, #64]	; (80078bc <mem_init+0x70>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8007882:	4a0f      	ldr	r2, [pc, #60]	; (80078c0 <mem_init+0x74>)
 8007884:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <mem_init+0x74>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2201      	movs	r2, #1
 800788c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <mem_init+0x74>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007896:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007898:	4b09      	ldr	r3, [pc, #36]	; (80078c0 <mem_init+0x74>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80078a0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80078a2:	4b06      	ldr	r3, [pc, #24]	; (80078bc <mem_init+0x70>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a07      	ldr	r2, [pc, #28]	; (80078c4 <mem_init+0x78>)
 80078a8:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20003aa8 	.word	0x20003aa8
 80078bc:	200040fc 	.word	0x200040fc
 80078c0:	20004100 	.word	0x20004100
 80078c4:	20004104 	.word	0x20004104

080078c8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d043      	beq.n	800795e <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d006      	beq.n	80078ee <mem_free+0x26>
 80078e0:	4b22      	ldr	r3, [pc, #136]	; (800796c <mem_free+0xa4>)
 80078e2:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80078e6:	4922      	ldr	r1, [pc, #136]	; (8007970 <mem_free+0xa8>)
 80078e8:	4822      	ldr	r0, [pc, #136]	; (8007974 <mem_free+0xac>)
 80078ea:	f009 fa59 	bl	8010da0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80078ee:	4b22      	ldr	r3, [pc, #136]	; (8007978 <mem_free+0xb0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d304      	bcc.n	8007902 <mem_free+0x3a>
 80078f8:	4b20      	ldr	r3, [pc, #128]	; (800797c <mem_free+0xb4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d306      	bcc.n	8007910 <mem_free+0x48>
 8007902:	4b1a      	ldr	r3, [pc, #104]	; (800796c <mem_free+0xa4>)
 8007904:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8007908:	491d      	ldr	r1, [pc, #116]	; (8007980 <mem_free+0xb8>)
 800790a:	481a      	ldr	r0, [pc, #104]	; (8007974 <mem_free+0xac>)
 800790c:	f009 fa48 	bl	8010da0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007910:	4b19      	ldr	r3, [pc, #100]	; (8007978 <mem_free+0xb0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	429a      	cmp	r2, r3
 8007918:	d323      	bcc.n	8007962 <mem_free+0x9a>
 800791a:	4b18      	ldr	r3, [pc, #96]	; (800797c <mem_free+0xb4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d21e      	bcs.n	8007962 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3b08      	subs	r3, #8
 8007928:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	791b      	ldrb	r3, [r3, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <mem_free+0x78>
 8007932:	4b0e      	ldr	r3, [pc, #56]	; (800796c <mem_free+0xa4>)
 8007934:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007938:	4912      	ldr	r1, [pc, #72]	; (8007984 <mem_free+0xbc>)
 800793a:	480e      	ldr	r0, [pc, #56]	; (8007974 <mem_free+0xac>)
 800793c:	f009 fa30 	bl	8010da0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007946:	4b10      	ldr	r3, [pc, #64]	; (8007988 <mem_free+0xc0>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	429a      	cmp	r2, r3
 800794e:	d202      	bcs.n	8007956 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007950:	4a0d      	ldr	r2, [pc, #52]	; (8007988 <mem_free+0xc0>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff fee0 	bl	800771c <plug_holes>
 800795c:	e002      	b.n	8007964 <mem_free+0x9c>
    return;
 800795e:	bf00      	nop
 8007960:	e000      	b.n	8007964 <mem_free+0x9c>
    return;
 8007962:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	0801244c 	.word	0x0801244c
 8007970:	08012520 	.word	0x08012520
 8007974:	08012494 	.word	0x08012494
 8007978:	200040fc 	.word	0x200040fc
 800797c:	20004100 	.word	0x20004100
 8007980:	08012544 	.word	0x08012544
 8007984:	0801255c 	.word	0x0801255c
 8007988:	20004104 	.word	0x20004104

0800798c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8007998:	887b      	ldrh	r3, [r7, #2]
 800799a:	3303      	adds	r3, #3
 800799c:	b29b      	uxth	r3, r3
 800799e:	f023 0303 	bic.w	r3, r3, #3
 80079a2:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80079a4:	887b      	ldrh	r3, [r7, #2]
 80079a6:	2b0b      	cmp	r3, #11
 80079a8:	d801      	bhi.n	80079ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80079aa:	230c      	movs	r3, #12
 80079ac:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80079ae:	887b      	ldrh	r3, [r7, #2]
 80079b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80079b4:	d901      	bls.n	80079ba <mem_trim+0x2e>
    return NULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e0b1      	b.n	8007b1e <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80079ba:	4b5b      	ldr	r3, [pc, #364]	; (8007b28 <mem_trim+0x19c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d304      	bcc.n	80079ce <mem_trim+0x42>
 80079c4:	4b59      	ldr	r3, [pc, #356]	; (8007b2c <mem_trim+0x1a0>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d306      	bcc.n	80079dc <mem_trim+0x50>
 80079ce:	4b58      	ldr	r3, [pc, #352]	; (8007b30 <mem_trim+0x1a4>)
 80079d0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80079d4:	4957      	ldr	r1, [pc, #348]	; (8007b34 <mem_trim+0x1a8>)
 80079d6:	4858      	ldr	r0, [pc, #352]	; (8007b38 <mem_trim+0x1ac>)
 80079d8:	f009 f9e2 	bl	8010da0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80079dc:	4b52      	ldr	r3, [pc, #328]	; (8007b28 <mem_trim+0x19c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d304      	bcc.n	80079f0 <mem_trim+0x64>
 80079e6:	4b51      	ldr	r3, [pc, #324]	; (8007b2c <mem_trim+0x1a0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d301      	bcc.n	80079f4 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	e094      	b.n	8007b1e <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3b08      	subs	r3, #8
 80079f8:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80079fa:	4b4b      	ldr	r3, [pc, #300]	; (8007b28 <mem_trim+0x19c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	881a      	ldrh	r2, [r3, #0]
 8007a08:	8a7b      	ldrh	r3, [r7, #18]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b08      	subs	r3, #8
 8007a10:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007a12:	887a      	ldrh	r2, [r7, #2]
 8007a14:	8a3b      	ldrh	r3, [r7, #16]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d906      	bls.n	8007a28 <mem_trim+0x9c>
 8007a1a:	4b45      	ldr	r3, [pc, #276]	; (8007b30 <mem_trim+0x1a4>)
 8007a1c:	f240 2206 	movw	r2, #518	; 0x206
 8007a20:	4946      	ldr	r1, [pc, #280]	; (8007b3c <mem_trim+0x1b0>)
 8007a22:	4845      	ldr	r0, [pc, #276]	; (8007b38 <mem_trim+0x1ac>)
 8007a24:	f009 f9bc 	bl	8010da0 <iprintf>
  if (newsize > size) {
 8007a28:	887a      	ldrh	r2, [r7, #2]
 8007a2a:	8a3b      	ldrh	r3, [r7, #16]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d901      	bls.n	8007a34 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e074      	b.n	8007b1e <mem_trim+0x192>
  }
  if (newsize == size) {
 8007a34:	887a      	ldrh	r2, [r7, #2]
 8007a36:	8a3b      	ldrh	r3, [r7, #16]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d101      	bne.n	8007a40 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	e06e      	b.n	8007b1e <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8007a40:	4b39      	ldr	r3, [pc, #228]	; (8007b28 <mem_trim+0x19c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	8812      	ldrh	r2, [r2, #0]
 8007a48:	4413      	add	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	791b      	ldrb	r3, [r3, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d131      	bne.n	8007ab8 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007a5a:	8a7a      	ldrh	r2, [r7, #18]
 8007a5c:	887b      	ldrh	r3, [r7, #2]
 8007a5e:	4413      	add	r3, r2
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3308      	adds	r3, #8
 8007a64:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8007a66:	4b36      	ldr	r3, [pc, #216]	; (8007b40 <mem_trim+0x1b4>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d105      	bne.n	8007a7c <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007a70:	4b2d      	ldr	r3, [pc, #180]	; (8007b28 <mem_trim+0x19c>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	897b      	ldrh	r3, [r7, #10]
 8007a76:	4413      	add	r3, r2
 8007a78:	4a31      	ldr	r2, [pc, #196]	; (8007b40 <mem_trim+0x1b4>)
 8007a7a:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007a7c:	4b2a      	ldr	r3, [pc, #168]	; (8007b28 <mem_trim+0x19c>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	897b      	ldrh	r3, [r7, #10]
 8007a82:	4413      	add	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	893a      	ldrh	r2, [r7, #8]
 8007a90:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8a7a      	ldrh	r2, [r7, #18]
 8007a96:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	897a      	ldrh	r2, [r7, #10]
 8007a9c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007aa6:	d039      	beq.n	8007b1c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007aa8:	4b1f      	ldr	r3, [pc, #124]	; (8007b28 <mem_trim+0x19c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	8812      	ldrh	r2, [r2, #0]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	897a      	ldrh	r2, [r7, #10]
 8007ab4:	805a      	strh	r2, [r3, #2]
 8007ab6:	e031      	b.n	8007b1c <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007ab8:	887b      	ldrh	r3, [r7, #2]
 8007aba:	f103 0214 	add.w	r2, r3, #20
 8007abe:	8a3b      	ldrh	r3, [r7, #16]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d82b      	bhi.n	8007b1c <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007ac4:	8a7a      	ldrh	r2, [r7, #18]
 8007ac6:	887b      	ldrh	r3, [r7, #2]
 8007ac8:	4413      	add	r3, r2
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	3308      	adds	r3, #8
 8007ace:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007ad0:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <mem_trim+0x19c>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	897b      	ldrh	r3, [r7, #10]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8007ada:	4b19      	ldr	r3, [pc, #100]	; (8007b40 <mem_trim+0x1b4>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d202      	bcs.n	8007aea <mem_trim+0x15e>
      lfree = mem2;
 8007ae4:	4a16      	ldr	r2, [pc, #88]	; (8007b40 <mem_trim+0x1b4>)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	881a      	ldrh	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8a7a      	ldrh	r2, [r7, #18]
 8007afc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	897a      	ldrh	r2, [r7, #10]
 8007b02:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b0c:	d006      	beq.n	8007b1c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007b0e:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <mem_trim+0x19c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	8812      	ldrh	r2, [r2, #0]
 8007b16:	4413      	add	r3, r2
 8007b18:	897a      	ldrh	r2, [r7, #10]
 8007b1a:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007b1c:	687b      	ldr	r3, [r7, #4]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	200040fc 	.word	0x200040fc
 8007b2c:	20004100 	.word	0x20004100
 8007b30:	0801244c 	.word	0x0801244c
 8007b34:	08012570 	.word	0x08012570
 8007b38:	08012494 	.word	0x08012494
 8007b3c:	08012588 	.word	0x08012588
 8007b40:	20004104 	.word	0x20004104

08007b44 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <mem_malloc+0x14>
    return NULL;
 8007b54:	2300      	movs	r3, #0
 8007b56:	e0c7      	b.n	8007ce8 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	3303      	adds	r3, #3
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f023 0303 	bic.w	r3, r3, #3
 8007b62:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	2b0b      	cmp	r3, #11
 8007b68:	d801      	bhi.n	8007b6e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b74:	d901      	bls.n	8007b7a <mem_malloc+0x36>
    return NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e0b6      	b.n	8007ce8 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007b7a:	4b5d      	ldr	r3, [pc, #372]	; (8007cf0 <mem_malloc+0x1ac>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4b5d      	ldr	r3, [pc, #372]	; (8007cf4 <mem_malloc+0x1b0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	83fb      	strh	r3, [r7, #30]
 8007b86:	e0a7      	b.n	8007cd8 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8007b88:	4b5a      	ldr	r3, [pc, #360]	; (8007cf4 <mem_malloc+0x1b0>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	8bfb      	ldrh	r3, [r7, #30]
 8007b8e:	4413      	add	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	791b      	ldrb	r3, [r3, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f040 8098 	bne.w	8007ccc <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	8bfb      	ldrh	r3, [r7, #30]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	f1a3 0208 	sub.w	r2, r3, #8
 8007baa:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8007bac:	429a      	cmp	r2, r3
 8007bae:	f0c0 808d 	bcc.w	8007ccc <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	8bfb      	ldrh	r3, [r7, #30]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	f1a3 0208 	sub.w	r2, r3, #8
 8007bc0:	88fb      	ldrh	r3, [r7, #6]
 8007bc2:	3314      	adds	r3, #20
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d327      	bcc.n	8007c18 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8007bc8:	8bfa      	ldrh	r2, [r7, #30]
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	4413      	add	r3, r2
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8007bd4:	4b47      	ldr	r3, [pc, #284]	; (8007cf4 <mem_malloc+0x1b0>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	8a7b      	ldrh	r3, [r7, #18]
 8007bda:	4413      	add	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	881a      	ldrh	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8bfa      	ldrh	r2, [r7, #30]
 8007bf0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	8a7a      	ldrh	r2, [r7, #18]
 8007bf6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c06:	d00a      	beq.n	8007c1e <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007c08:	4b3a      	ldr	r3, [pc, #232]	; (8007cf4 <mem_malloc+0x1b0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	8812      	ldrh	r2, [r2, #0]
 8007c10:	4413      	add	r3, r2
 8007c12:	8a7a      	ldrh	r2, [r7, #18]
 8007c14:	805a      	strh	r2, [r3, #2]
 8007c16:	e002      	b.n	8007c1e <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007c1e:	4b34      	ldr	r3, [pc, #208]	; (8007cf0 <mem_malloc+0x1ac>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d127      	bne.n	8007c78 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8007c28:	4b31      	ldr	r3, [pc, #196]	; (8007cf0 <mem_malloc+0x1ac>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007c2e:	e005      	b.n	8007c3c <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8007c30:	4b30      	ldr	r3, [pc, #192]	; (8007cf4 <mem_malloc+0x1b0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	8812      	ldrh	r2, [r2, #0]
 8007c38:	4413      	add	r3, r2
 8007c3a:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	791b      	ldrb	r3, [r3, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <mem_malloc+0x10a>
 8007c44:	4b2c      	ldr	r3, [pc, #176]	; (8007cf8 <mem_malloc+0x1b4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d1f0      	bne.n	8007c30 <mem_malloc+0xec>
          }
          lfree = cur;
 8007c4e:	4a28      	ldr	r2, [pc, #160]	; (8007cf0 <mem_malloc+0x1ac>)
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007c54:	4b26      	ldr	r3, [pc, #152]	; (8007cf0 <mem_malloc+0x1ac>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	4b27      	ldr	r3, [pc, #156]	; (8007cf8 <mem_malloc+0x1b4>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d00b      	beq.n	8007c78 <mem_malloc+0x134>
 8007c60:	4b23      	ldr	r3, [pc, #140]	; (8007cf0 <mem_malloc+0x1ac>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	791b      	ldrb	r3, [r3, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d006      	beq.n	8007c78 <mem_malloc+0x134>
 8007c6a:	4b24      	ldr	r3, [pc, #144]	; (8007cfc <mem_malloc+0x1b8>)
 8007c6c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007c70:	4923      	ldr	r1, [pc, #140]	; (8007d00 <mem_malloc+0x1bc>)
 8007c72:	4824      	ldr	r0, [pc, #144]	; (8007d04 <mem_malloc+0x1c0>)
 8007c74:	f009 f894 	bl	8010da0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007c78:	88fa      	ldrh	r2, [r7, #6]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	3308      	adds	r3, #8
 8007c80:	4a1d      	ldr	r2, [pc, #116]	; (8007cf8 <mem_malloc+0x1b4>)
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d906      	bls.n	8007c96 <mem_malloc+0x152>
 8007c88:	4b1c      	ldr	r3, [pc, #112]	; (8007cfc <mem_malloc+0x1b8>)
 8007c8a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8007c8e:	491e      	ldr	r1, [pc, #120]	; (8007d08 <mem_malloc+0x1c4>)
 8007c90:	481c      	ldr	r0, [pc, #112]	; (8007d04 <mem_malloc+0x1c0>)
 8007c92:	f009 f885 	bl	8010da0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f003 0303 	and.w	r3, r3, #3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d006      	beq.n	8007cae <mem_malloc+0x16a>
 8007ca0:	4b16      	ldr	r3, [pc, #88]	; (8007cfc <mem_malloc+0x1b8>)
 8007ca2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8007ca6:	4919      	ldr	r1, [pc, #100]	; (8007d0c <mem_malloc+0x1c8>)
 8007ca8:	4816      	ldr	r0, [pc, #88]	; (8007d04 <mem_malloc+0x1c0>)
 8007caa:	f009 f879 	bl	8010da0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d006      	beq.n	8007cc6 <mem_malloc+0x182>
 8007cb8:	4b10      	ldr	r3, [pc, #64]	; (8007cfc <mem_malloc+0x1b8>)
 8007cba:	f240 22d7 	movw	r2, #727	; 0x2d7
 8007cbe:	4914      	ldr	r1, [pc, #80]	; (8007d10 <mem_malloc+0x1cc>)
 8007cc0:	4810      	ldr	r0, [pc, #64]	; (8007d04 <mem_malloc+0x1c0>)
 8007cc2:	f009 f86d 	bl	8010da0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	e00d      	b.n	8007ce8 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8007ccc:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <mem_malloc+0x1b0>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	8bfb      	ldrh	r3, [r7, #30]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007cd8:	8bfa      	ldrh	r2, [r7, #30]
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	f4ff af51 	bcc.w	8007b88 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20004104 	.word	0x20004104
 8007cf4:	200040fc 	.word	0x200040fc
 8007cf8:	20004100 	.word	0x20004100
 8007cfc:	0801244c 	.word	0x0801244c
 8007d00:	080125a8 	.word	0x080125a8
 8007d04:	08012494 	.word	0x08012494
 8007d08:	080125c4 	.word	0x080125c4
 8007d0c:	080125f4 	.word	0x080125f4
 8007d10:	08012624 	.word	0x08012624

08007d14 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	3303      	adds	r3, #3
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	e011      	b.n	8007d5a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	4413      	add	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3301      	adds	r3, #1
 8007d58:	60fb      	str	r3, [r7, #12]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	885b      	ldrh	r3, [r3, #2]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4293      	cmp	r3, r2
 8007d64:	dbe7      	blt.n	8007d36 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	80fb      	strh	r3, [r7, #6]
 8007d7e:	e009      	b.n	8007d94 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007d80:	88fb      	ldrh	r3, [r7, #6]
 8007d82:	4a08      	ldr	r2, [pc, #32]	; (8007da4 <memp_init+0x30>)
 8007d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff ffc3 	bl	8007d14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
 8007d90:	3301      	adds	r3, #1
 8007d92:	80fb      	strh	r3, [r7, #6]
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d9f2      	bls.n	8007d80 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007d9a:	bf00      	nop
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	08014134 	.word	0x08014134

08007da8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d012      	beq.n	8007de4 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d006      	beq.n	8007de0 <do_memp_malloc_pool+0x38>
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <do_memp_malloc_pool+0x48>)
 8007dd4:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8007dd8:	4906      	ldr	r1, [pc, #24]	; (8007df4 <do_memp_malloc_pool+0x4c>)
 8007dda:	4807      	ldr	r0, [pc, #28]	; (8007df8 <do_memp_malloc_pool+0x50>)
 8007ddc:	f008 ffe0 	bl	8010da0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	e000      	b.n	8007de6 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	08012648 	.word	0x08012648
 8007df4:	08012678 	.word	0x08012678
 8007df8:	0801269c 	.word	0x0801269c

08007dfc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d908      	bls.n	8007e1e <memp_malloc+0x22>
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <memp_malloc+0x3c>)
 8007e0e:	f240 1287 	movw	r2, #391	; 0x187
 8007e12:	490a      	ldr	r1, [pc, #40]	; (8007e3c <memp_malloc+0x40>)
 8007e14:	480a      	ldr	r0, [pc, #40]	; (8007e40 <memp_malloc+0x44>)
 8007e16:	f008 ffc3 	bl	8010da0 <iprintf>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e008      	b.n	8007e30 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	4a08      	ldr	r2, [pc, #32]	; (8007e44 <memp_malloc+0x48>)
 8007e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff ffbe 	bl	8007da8 <do_memp_malloc_pool>
 8007e2c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	08012648 	.word	0x08012648
 8007e3c:	080126d8 	.word	0x080126d8
 8007e40:	0801269c 	.word	0x0801269c
 8007e44:	08014134 	.word	0x08014134

08007e48 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	f003 0303 	and.w	r3, r3, #3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d006      	beq.n	8007e6a <do_memp_free_pool+0x22>
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <do_memp_free_pool+0x40>)
 8007e5e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007e62:	490a      	ldr	r1, [pc, #40]	; (8007e8c <do_memp_free_pool+0x44>)
 8007e64:	480a      	ldr	r0, [pc, #40]	; (8007e90 <do_memp_free_pool+0x48>)
 8007e66:	f008 ff9b 	bl	8010da0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007e80:	bf00      	nop
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	08012648 	.word	0x08012648
 8007e8c:	080126f8 	.word	0x080126f8
 8007e90:	0801269c 	.word	0x0801269c

08007e94 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d907      	bls.n	8007eb6 <memp_free+0x22>
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <memp_free+0x44>)
 8007ea8:	f240 12db 	movw	r2, #475	; 0x1db
 8007eac:	490b      	ldr	r1, [pc, #44]	; (8007edc <memp_free+0x48>)
 8007eae:	480c      	ldr	r0, [pc, #48]	; (8007ee0 <memp_free+0x4c>)
 8007eb0:	f008 ff76 	bl	8010da0 <iprintf>
 8007eb4:	e00c      	b.n	8007ed0 <memp_free+0x3c>

  if (mem == NULL) {
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007ebc:	79fb      	ldrb	r3, [r7, #7]
 8007ebe:	4a09      	ldr	r2, [pc, #36]	; (8007ee4 <memp_free+0x50>)
 8007ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff ffbe 	bl	8007e48 <do_memp_free_pool>
 8007ecc:	e000      	b.n	8007ed0 <memp_free+0x3c>
    return;
 8007ece:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	08012648 	.word	0x08012648
 8007edc:	08012718 	.word	0x08012718
 8007ee0:	0801269c 	.word	0x0801269c
 8007ee4:	08014134 	.word	0x08014134

08007ee8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007eec:	bf00      	nop
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d105      	bne.n	8007f18 <netif_add+0x20>
 8007f0c:	4b1f      	ldr	r3, [pc, #124]	; (8007f8c <netif_add+0x94>)
 8007f0e:	22fb      	movs	r2, #251	; 0xfb
 8007f10:	491f      	ldr	r1, [pc, #124]	; (8007f90 <netif_add+0x98>)
 8007f12:	4820      	ldr	r0, [pc, #128]	; (8007f94 <netif_add+0x9c>)
 8007f14:	f008 ff44 	bl	8010da0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2203      	movs	r2, #3
 8007f36:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8007f40:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <netif_add+0xa0>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	b2d1      	uxtb	r1, r2
 8007f48:	4a13      	ldr	r2, [pc, #76]	; (8007f98 <netif_add+0xa0>)
 8007f4a:	7011      	strb	r1, [r2, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6a3a      	ldr	r2, [r7, #32]
 8007f56:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 f81e 	bl	8007fa0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	4798      	blx	r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <netif_add+0x7c>
    return NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	e007      	b.n	8007f84 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007f74:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <netif_add+0xa4>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007f7c:	4a07      	ldr	r2, [pc, #28]	; (8007f9c <netif_add+0xa4>)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8007f82:	68fb      	ldr	r3, [r7, #12]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	08012734 	.word	0x08012734
 8007f90:	08012768 	.word	0x08012768
 8007f94:	08012780 	.word	0x08012780
 8007f98:	20006fe8 	.word	0x20006fe8
 8007f9c:	20006fe0 	.word	0x20006fe0

08007fa0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <netif_set_addr+0x1c>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10c      	bne.n	8007fd6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8007fbc:	68b9      	ldr	r1, [r7, #8]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 f81a 	bl	8007ff8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 f862 	bl	8008090 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 f84a 	bl	8008068 <netif_set_gw>
 8007fd4:	e00c      	b.n	8007ff0 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 f859 	bl	8008090 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 f841 	bl	8008068 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8007fe6:	68b9      	ldr	r1, [r7, #8]
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 f805 	bl	8007ff8 <netif_set_ipaddr>
  }
}
 8007fee:	bf00      	nop
 8007ff0:	bf00      	nop
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <netif_set_ipaddr+0x18>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60fb      	str	r3, [r7, #12]
 800800e:	e002      	b.n	8008016 <netif_set_ipaddr+0x1e>
 8008010:	4b14      	ldr	r3, [pc, #80]	; (8008064 <netif_set_ipaddr+0x6c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3304      	adds	r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d01c      	beq.n	800805c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3304      	adds	r3, #4
 8008026:	f107 020c 	add.w	r2, r7, #12
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f002 facf 	bl	800a5d0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3304      	adds	r3, #4
 8008036:	f107 020c 	add.w	r2, r7, #12
 800803a:	4611      	mov	r1, r2
 800803c:	4618      	mov	r0, r3
 800803e:	f006 fb35 	bl	800e6ac <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <netif_set_ipaddr+0x56>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	e000      	b.n	8008050 <netif_set_ipaddr+0x58>
 800804e:	2300      	movs	r3, #0
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008054:	2101      	movs	r1, #1
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f861 	bl	800811e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800805c:	bf00      	nop
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	08014198 	.word	0x08014198

08008068 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <netif_set_gw+0x16>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	e000      	b.n	8008080 <netif_set_gw+0x18>
 800807e:	2300      	movs	r3, #0
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <netif_set_netmask+0x16>
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	e000      	b.n	80080a8 <netif_set_netmask+0x18>
 80080a6:	2300      	movs	r3, #0
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80080c0:	4a04      	ldr	r2, [pc, #16]	; (80080d4 <netif_set_default+0x1c>)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20006fe4 	.word	0x20006fe4

080080d8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d113      	bne.n	8008116 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80080f4:	f043 0301 	orr.w	r3, r3, #1
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008106:	f003 0304 	and.w	r3, r3, #4
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800810e:	2103      	movs	r1, #3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f804 	bl	800811e <netif_issue_reports>
    }
  }
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800812a:	78fb      	ldrb	r3, [r7, #3]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d011      	beq.n	8008158 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3304      	adds	r3, #4
 8008138:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00c      	beq.n	8008158 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008144:	f003 0308 	and.w	r3, r3, #8
 8008148:	2b00      	cmp	r3, #0
 800814a:	d005      	beq.n	8008158 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3304      	adds	r3, #4
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f007 f9de 	bl	800f514 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d012      	beq.n	800819c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800817c:	f023 0301 	bic.w	r3, r3, #1
 8008180:	b2da      	uxtb	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f006 fd82 	bl	800eca0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80081aa:	4b0e      	ldr	r3, [pc, #56]	; (80081e4 <pbuf_free_ooseq+0x40>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80081b0:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <pbuf_free_ooseq+0x44>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	607b      	str	r3, [r7, #4]
 80081b6:	e00f      	b.n	80081d8 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d008      	beq.n	80081d2 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 fe74 	bl	8009eb2 <tcp_segs_free>
      pcb->ooseq = NULL;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80081d0:	e005      	b.n	80081de <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	607b      	str	r3, [r7, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1ec      	bne.n	80081b8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20006fe9 	.word	0x20006fe9
 80081e8:	20006ff8 	.word	0x20006ff8

080081ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80081ec:	b480      	push	{r7}
 80081ee:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80081f0:	4b03      	ldr	r3, [pc, #12]	; (8008200 <pbuf_pool_is_empty+0x14>)
 80081f2:	2201      	movs	r2, #1
 80081f4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80081f6:	bf00      	nop
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	20006fe9 	.word	0x20006fe9

08008204 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	71fb      	strb	r3, [r7, #7]
 800820e:	460b      	mov	r3, r1
 8008210:	80bb      	strh	r3, [r7, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	2b04      	cmp	r3, #4
 800821a:	d81c      	bhi.n	8008256 <pbuf_alloc+0x52>
 800821c:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <pbuf_alloc+0x20>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	08008239 	.word	0x08008239
 8008228:	0800823f 	.word	0x0800823f
 800822c:	08008245 	.word	0x08008245
 8008230:	0800824b 	.word	0x0800824b
 8008234:	08008251 	.word	0x08008251
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008238:	2336      	movs	r3, #54	; 0x36
 800823a:	82fb      	strh	r3, [r7, #22]
    break;
 800823c:	e014      	b.n	8008268 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800823e:	2322      	movs	r3, #34	; 0x22
 8008240:	82fb      	strh	r3, [r7, #22]
    break;
 8008242:	e011      	b.n	8008268 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008244:	230e      	movs	r3, #14
 8008246:	82fb      	strh	r3, [r7, #22]
    break;
 8008248:	e00e      	b.n	8008268 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800824a:	2300      	movs	r3, #0
 800824c:	82fb      	strh	r3, [r7, #22]
    break;
 800824e:	e00b      	b.n	8008268 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	82fb      	strh	r3, [r7, #22]
    break;
 8008254:	e008      	b.n	8008268 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8008256:	4ba1      	ldr	r3, [pc, #644]	; (80084dc <pbuf_alloc+0x2d8>)
 8008258:	f44f 728b 	mov.w	r2, #278	; 0x116
 800825c:	49a0      	ldr	r1, [pc, #640]	; (80084e0 <pbuf_alloc+0x2dc>)
 800825e:	48a1      	ldr	r0, [pc, #644]	; (80084e4 <pbuf_alloc+0x2e0>)
 8008260:	f008 fd9e 	bl	8010da0 <iprintf>
    return NULL;
 8008264:	2300      	movs	r3, #0
 8008266:	e15c      	b.n	8008522 <pbuf_alloc+0x31e>
  }

  switch (type) {
 8008268:	79bb      	ldrb	r3, [r7, #6]
 800826a:	2b03      	cmp	r3, #3
 800826c:	d00d      	beq.n	800828a <pbuf_alloc+0x86>
 800826e:	2b03      	cmp	r3, #3
 8008270:	f300 8146 	bgt.w	8008500 <pbuf_alloc+0x2fc>
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 80d0 	beq.w	800841a <pbuf_alloc+0x216>
 800827a:	2b00      	cmp	r3, #0
 800827c:	f2c0 8140 	blt.w	8008500 <pbuf_alloc+0x2fc>
 8008280:	3b01      	subs	r3, #1
 8008282:	2b01      	cmp	r3, #1
 8008284:	f200 813c 	bhi.w	8008500 <pbuf_alloc+0x2fc>
 8008288:	e10d      	b.n	80084a6 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800828a:	2008      	movs	r0, #8
 800828c:	f7ff fdb6 	bl	8007dfc <memp_malloc>
 8008290:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d103      	bne.n	80082a0 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8008298:	f7ff ffa8 	bl	80081ec <pbuf_pool_is_empty>
      return NULL;
 800829c:	2300      	movs	r3, #0
 800829e:	e140      	b.n	8008522 <pbuf_alloc+0x31e>
    }
    p->type = type;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	79ba      	ldrb	r2, [r7, #6]
 80082a4:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80082ac:	8afb      	ldrh	r3, [r7, #22]
 80082ae:	3310      	adds	r3, #16
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	4413      	add	r3, r2
 80082b4:	3303      	adds	r3, #3
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	461a      	mov	r2, r3
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f003 0303 	and.w	r3, r3, #3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d006      	beq.n	80082da <pbuf_alloc+0xd6>
 80082cc:	4b83      	ldr	r3, [pc, #524]	; (80084dc <pbuf_alloc+0x2d8>)
 80082ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 80082d2:	4985      	ldr	r1, [pc, #532]	; (80084e8 <pbuf_alloc+0x2e4>)
 80082d4:	4883      	ldr	r0, [pc, #524]	; (80084e4 <pbuf_alloc+0x2e0>)
 80082d6:	f008 fd63 	bl	8010da0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	88ba      	ldrh	r2, [r7, #4]
 80082de:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80082e0:	8afb      	ldrh	r3, [r7, #22]
 80082e2:	3303      	adds	r3, #3
 80082e4:	f023 0303 	bic.w	r3, r3, #3
 80082e8:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80082ec:	88bb      	ldrh	r3, [r7, #4]
 80082ee:	4293      	cmp	r3, r2
 80082f0:	bf28      	it	cs
 80082f2:	4613      	movcs	r3, r2
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	8952      	ldrh	r2, [r2, #10]
 8008302:	441a      	add	r2, r3
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800830a:	429a      	cmp	r2, r3
 800830c:	d906      	bls.n	800831c <pbuf_alloc+0x118>
 800830e:	4b73      	ldr	r3, [pc, #460]	; (80084dc <pbuf_alloc+0x2d8>)
 8008310:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008314:	4975      	ldr	r1, [pc, #468]	; (80084ec <pbuf_alloc+0x2e8>)
 8008316:	4873      	ldr	r0, [pc, #460]	; (80084e4 <pbuf_alloc+0x2e0>)
 8008318:	f008 fd42 	bl	8010da0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800831c:	8afb      	ldrh	r3, [r7, #22]
 800831e:	3303      	adds	r3, #3
 8008320:	f023 0303 	bic.w	r3, r3, #3
 8008324:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008328:	d106      	bne.n	8008338 <pbuf_alloc+0x134>
 800832a:	4b6c      	ldr	r3, [pc, #432]	; (80084dc <pbuf_alloc+0x2d8>)
 800832c:	f240 1231 	movw	r2, #305	; 0x131
 8008330:	496f      	ldr	r1, [pc, #444]	; (80084f0 <pbuf_alloc+0x2ec>)
 8008332:	486c      	ldr	r0, [pc, #432]	; (80084e4 <pbuf_alloc+0x2e0>)
 8008334:	f008 fd34 	bl	8010da0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	2201      	movs	r2, #1
 800833c:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8008342:	88bb      	ldrh	r3, [r7, #4]
 8008344:	69fa      	ldr	r2, [r7, #28]
 8008346:	8952      	ldrh	r2, [r2, #10]
 8008348:	1a9b      	subs	r3, r3, r2
 800834a:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800834c:	e061      	b.n	8008412 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800834e:	2008      	movs	r0, #8
 8008350:	f7ff fd54 	bl	8007dfc <memp_malloc>
 8008354:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d106      	bne.n	800836a <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800835c:	f7ff ff46 	bl	80081ec <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8008360:	69f8      	ldr	r0, [r7, #28]
 8008362:	f000 fac7 	bl	80088f4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	e0db      	b.n	8008522 <pbuf_alloc+0x31e>
      }
      q->type = type;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	79ba      	ldrb	r2, [r7, #6]
 800836e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008388:	4293      	cmp	r3, r2
 800838a:	dd06      	ble.n	800839a <pbuf_alloc+0x196>
 800838c:	4b53      	ldr	r3, [pc, #332]	; (80084dc <pbuf_alloc+0x2d8>)
 800838e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008392:	4958      	ldr	r1, [pc, #352]	; (80084f4 <pbuf_alloc+0x2f0>)
 8008394:	4853      	ldr	r0, [pc, #332]	; (80084e4 <pbuf_alloc+0x2e0>)
 8008396:	f008 fd03 	bl	8010da0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80083aa:	bf28      	it	cs
 80083ac:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f103 0210 	add.w	r2, r3, #16
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d006      	beq.n	80083da <pbuf_alloc+0x1d6>
 80083cc:	4b43      	ldr	r3, [pc, #268]	; (80084dc <pbuf_alloc+0x2d8>)
 80083ce:	f240 1251 	movw	r2, #337	; 0x151
 80083d2:	4949      	ldr	r1, [pc, #292]	; (80084f8 <pbuf_alloc+0x2f4>)
 80083d4:	4843      	ldr	r0, [pc, #268]	; (80084e4 <pbuf_alloc+0x2e0>)
 80083d6:	f008 fce3 	bl	8010da0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	8952      	ldrh	r2, [r2, #10]
 80083e2:	441a      	add	r2, r3
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d906      	bls.n	80083fc <pbuf_alloc+0x1f8>
 80083ee:	4b3b      	ldr	r3, [pc, #236]	; (80084dc <pbuf_alloc+0x2d8>)
 80083f0:	f240 1253 	movw	r2, #339	; 0x153
 80083f4:	493d      	ldr	r1, [pc, #244]	; (80084ec <pbuf_alloc+0x2e8>)
 80083f6:	483b      	ldr	r0, [pc, #236]	; (80084e4 <pbuf_alloc+0x2e0>)
 80083f8:	f008 fcd2 	bl	8010da0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2201      	movs	r2, #1
 8008400:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	895b      	ldrh	r3, [r3, #10]
 8008406:	461a      	mov	r2, r3
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	dc9a      	bgt.n	800834e <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8008418:	e07c      	b.n	8008514 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800841a:	8afb      	ldrh	r3, [r7, #22]
 800841c:	3313      	adds	r3, #19
 800841e:	b29b      	uxth	r3, r3
 8008420:	f023 0303 	bic.w	r3, r3, #3
 8008424:	b29a      	uxth	r2, r3
 8008426:	88bb      	ldrh	r3, [r7, #4]
 8008428:	3303      	adds	r3, #3
 800842a:	b29b      	uxth	r3, r3
 800842c:	f023 0303 	bic.w	r3, r3, #3
 8008430:	b29b      	uxth	r3, r3
 8008432:	4413      	add	r3, r2
 8008434:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8008436:	897a      	ldrh	r2, [r7, #10]
 8008438:	88bb      	ldrh	r3, [r7, #4]
 800843a:	3303      	adds	r3, #3
 800843c:	f023 0303 	bic.w	r3, r3, #3
 8008440:	429a      	cmp	r2, r3
 8008442:	d201      	bcs.n	8008448 <pbuf_alloc+0x244>
        return NULL;
 8008444:	2300      	movs	r3, #0
 8008446:	e06c      	b.n	8008522 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8008448:	897b      	ldrh	r3, [r7, #10]
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff fb7a 	bl	8007b44 <mem_malloc>
 8008450:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <pbuf_alloc+0x258>
      return NULL;
 8008458:	2300      	movs	r3, #0
 800845a:	e062      	b.n	8008522 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800845c:	8afb      	ldrh	r3, [r7, #22]
 800845e:	3310      	adds	r3, #16
 8008460:	69fa      	ldr	r2, [r7, #28]
 8008462:	4413      	add	r3, r2
 8008464:	3303      	adds	r3, #3
 8008466:	f023 0303 	bic.w	r3, r3, #3
 800846a:	461a      	mov	r2, r3
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	88ba      	ldrh	r2, [r7, #4]
 8008474:	811a      	strh	r2, [r3, #8]
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	891a      	ldrh	r2, [r3, #8]
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	79ba      	ldrb	r2, [r7, #6]
 8008488:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d03d      	beq.n	8008512 <pbuf_alloc+0x30e>
 8008496:	4b11      	ldr	r3, [pc, #68]	; (80084dc <pbuf_alloc+0x2d8>)
 8008498:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800849c:	4917      	ldr	r1, [pc, #92]	; (80084fc <pbuf_alloc+0x2f8>)
 800849e:	4811      	ldr	r0, [pc, #68]	; (80084e4 <pbuf_alloc+0x2e0>)
 80084a0:	f008 fc7e 	bl	8010da0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80084a4:	e035      	b.n	8008512 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80084a6:	2007      	movs	r0, #7
 80084a8:	f7ff fca8 	bl	8007dfc <memp_malloc>
 80084ac:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e034      	b.n	8008522 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	2200      	movs	r2, #0
 80084bc:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	88ba      	ldrh	r2, [r7, #4]
 80084c2:	811a      	strh	r2, [r3, #8]
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	891a      	ldrh	r2, [r3, #8]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
    p->type = type;
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	79ba      	ldrb	r2, [r7, #6]
 80084d6:	731a      	strb	r2, [r3, #12]
    break;
 80084d8:	e01c      	b.n	8008514 <pbuf_alloc+0x310>
 80084da:	bf00      	nop
 80084dc:	080127a8 	.word	0x080127a8
 80084e0:	080127d8 	.word	0x080127d8
 80084e4:	080127f4 	.word	0x080127f4
 80084e8:	0801281c 	.word	0x0801281c
 80084ec:	0801284c 	.word	0x0801284c
 80084f0:	08012880 	.word	0x08012880
 80084f4:	080128b4 	.word	0x080128b4
 80084f8:	080128c8 	.word	0x080128c8
 80084fc:	080128f8 	.word	0x080128f8
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <pbuf_alloc+0x328>)
 8008502:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8008506:	490a      	ldr	r1, [pc, #40]	; (8008530 <pbuf_alloc+0x32c>)
 8008508:	480a      	ldr	r0, [pc, #40]	; (8008534 <pbuf_alloc+0x330>)
 800850a:	f008 fc49 	bl	8010da0 <iprintf>
    return NULL;
 800850e:	2300      	movs	r3, #0
 8008510:	e007      	b.n	8008522 <pbuf_alloc+0x31e>
    break;
 8008512:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	2201      	movs	r2, #1
 8008518:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	2200      	movs	r2, #0
 800851e:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008520:	69fb      	ldr	r3, [r7, #28]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3720      	adds	r7, #32
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	080127a8 	.word	0x080127a8
 8008530:	08012924 	.word	0x08012924
 8008534:	080127f4 	.word	0x080127f4

08008538 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	4603      	mov	r3, r0
 8008542:	71fb      	strb	r3, [r7, #7]
 8008544:	460b      	mov	r3, r1
 8008546:	80bb      	strh	r3, [r7, #4]
 8008548:	4613      	mov	r3, r2
 800854a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	2b04      	cmp	r3, #4
 8008550:	d81b      	bhi.n	800858a <pbuf_alloced_custom+0x52>
 8008552:	a201      	add	r2, pc, #4	; (adr r2, 8008558 <pbuf_alloced_custom+0x20>)
 8008554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008558:	0800856d 	.word	0x0800856d
 800855c:	08008573 	.word	0x08008573
 8008560:	08008579 	.word	0x08008579
 8008564:	0800857f 	.word	0x0800857f
 8008568:	08008585 	.word	0x08008585
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800856c:	2336      	movs	r3, #54	; 0x36
 800856e:	81fb      	strh	r3, [r7, #14]
    break;
 8008570:	e014      	b.n	800859c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008572:	2322      	movs	r3, #34	; 0x22
 8008574:	81fb      	strh	r3, [r7, #14]
    break;
 8008576:	e011      	b.n	800859c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008578:	230e      	movs	r3, #14
 800857a:	81fb      	strh	r3, [r7, #14]
    break;
 800857c:	e00e      	b.n	800859c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800857e:	2300      	movs	r3, #0
 8008580:	81fb      	strh	r3, [r7, #14]
    break;
 8008582:	e00b      	b.n	800859c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	81fb      	strh	r3, [r7, #14]
    break;
 8008588:	e008      	b.n	800859c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800858a:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <pbuf_alloced_custom+0xc8>)
 800858c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8008590:	491c      	ldr	r1, [pc, #112]	; (8008604 <pbuf_alloced_custom+0xcc>)
 8008592:	481d      	ldr	r0, [pc, #116]	; (8008608 <pbuf_alloced_custom+0xd0>)
 8008594:	f008 fc04 	bl	8010da0 <iprintf>
    return NULL;
 8008598:	2300      	movs	r3, #0
 800859a:	e02d      	b.n	80085f8 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800859c:	89fb      	ldrh	r3, [r7, #14]
 800859e:	3303      	adds	r3, #3
 80085a0:	f023 0203 	bic.w	r2, r3, #3
 80085a4:	88bb      	ldrh	r3, [r7, #4]
 80085a6:	441a      	add	r2, r3
 80085a8:	8bbb      	ldrh	r3, [r7, #28]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d901      	bls.n	80085b2 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e022      	b.n	80085f8 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80085be:	89fb      	ldrh	r3, [r7, #14]
 80085c0:	3303      	adds	r3, #3
 80085c2:	f023 0303 	bic.w	r3, r3, #3
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	441a      	add	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	605a      	str	r2, [r3, #4]
 80085ce:	e002      	b.n	80085d6 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2202      	movs	r2, #2
 80085da:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	88ba      	ldrh	r2, [r7, #4]
 80085e0:	811a      	strh	r2, [r3, #8]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	891a      	ldrh	r2, [r3, #8]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	79ba      	ldrb	r2, [r7, #6]
 80085ee:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2201      	movs	r2, #1
 80085f4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80085f6:	683b      	ldr	r3, [r7, #0]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	080127a8 	.word	0x080127a8
 8008604:	08012940 	.word	0x08012940
 8008608:	080127f4 	.word	0x080127f4

0800860c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <pbuf_realloc+0x20>
 800861e:	4b4b      	ldr	r3, [pc, #300]	; (800874c <pbuf_realloc+0x140>)
 8008620:	f240 12f3 	movw	r2, #499	; 0x1f3
 8008624:	494a      	ldr	r1, [pc, #296]	; (8008750 <pbuf_realloc+0x144>)
 8008626:	484b      	ldr	r0, [pc, #300]	; (8008754 <pbuf_realloc+0x148>)
 8008628:	f008 fbba 	bl	8010da0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	7b1b      	ldrb	r3, [r3, #12]
 8008630:	2b03      	cmp	r3, #3
 8008632:	d012      	beq.n	800865a <pbuf_realloc+0x4e>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	7b1b      	ldrb	r3, [r3, #12]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d00e      	beq.n	800865a <pbuf_realloc+0x4e>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7b1b      	ldrb	r3, [r3, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <pbuf_realloc+0x4e>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	7b1b      	ldrb	r3, [r3, #12]
 8008648:	2b02      	cmp	r3, #2
 800864a:	d006      	beq.n	800865a <pbuf_realloc+0x4e>
 800864c:	4b3f      	ldr	r3, [pc, #252]	; (800874c <pbuf_realloc+0x140>)
 800864e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008652:	4941      	ldr	r1, [pc, #260]	; (8008758 <pbuf_realloc+0x14c>)
 8008654:	483f      	ldr	r0, [pc, #252]	; (8008754 <pbuf_realloc+0x148>)
 8008656:	f008 fba3 	bl	8010da0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	891b      	ldrh	r3, [r3, #8]
 800865e:	887a      	ldrh	r2, [r7, #2]
 8008660:	429a      	cmp	r2, r3
 8008662:	d26e      	bcs.n	8008742 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8008664:	887b      	ldrh	r3, [r7, #2]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	8912      	ldrh	r2, [r2, #8]
 800866a:	1a9b      	subs	r3, r3, r2
 800866c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800866e:	887b      	ldrh	r3, [r7, #2]
 8008670:	827b      	strh	r3, [r7, #18]
  q = p;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008676:	e025      	b.n	80086c4 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	895b      	ldrh	r3, [r3, #10]
 800867c:	8a7a      	ldrh	r2, [r7, #18]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008688:	4293      	cmp	r3, r2
 800868a:	dd06      	ble.n	800869a <pbuf_realloc+0x8e>
 800868c:	4b2f      	ldr	r3, [pc, #188]	; (800874c <pbuf_realloc+0x140>)
 800868e:	f240 220b 	movw	r2, #523	; 0x20b
 8008692:	4932      	ldr	r1, [pc, #200]	; (800875c <pbuf_realloc+0x150>)
 8008694:	482f      	ldr	r0, [pc, #188]	; (8008754 <pbuf_realloc+0x148>)
 8008696:	f008 fb83 	bl	8010da0 <iprintf>
    q->tot_len += (u16_t)grow;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	891a      	ldrh	r2, [r3, #8]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <pbuf_realloc+0xb8>
 80086b6:	4b25      	ldr	r3, [pc, #148]	; (800874c <pbuf_realloc+0x140>)
 80086b8:	f240 220f 	movw	r2, #527	; 0x20f
 80086bc:	4928      	ldr	r1, [pc, #160]	; (8008760 <pbuf_realloc+0x154>)
 80086be:	4825      	ldr	r0, [pc, #148]	; (8008754 <pbuf_realloc+0x148>)
 80086c0:	f008 fb6e 	bl	8010da0 <iprintf>
  while (rem_len > q->len) {
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	895b      	ldrh	r3, [r3, #10]
 80086c8:	8a7a      	ldrh	r2, [r7, #18]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d8d4      	bhi.n	8008678 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	7b1b      	ldrb	r3, [r3, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d121      	bne.n	800871a <pbuf_realloc+0x10e>
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	895b      	ldrh	r3, [r3, #10]
 80086da:	8a7a      	ldrh	r2, [r7, #18]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d01c      	beq.n	800871a <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	7b5b      	ldrb	r3, [r3, #13]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d116      	bne.n	800871a <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	8a7b      	ldrh	r3, [r7, #18]
 80086f8:	4413      	add	r3, r2
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	4619      	mov	r1, r3
 80086fe:	6978      	ldr	r0, [r7, #20]
 8008700:	f7ff f944 	bl	800798c <mem_trim>
 8008704:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d106      	bne.n	800871a <pbuf_realloc+0x10e>
 800870c:	4b0f      	ldr	r3, [pc, #60]	; (800874c <pbuf_realloc+0x140>)
 800870e:	f240 221d 	movw	r2, #541	; 0x21d
 8008712:	4914      	ldr	r1, [pc, #80]	; (8008764 <pbuf_realloc+0x158>)
 8008714:	480f      	ldr	r0, [pc, #60]	; (8008754 <pbuf_realloc+0x148>)
 8008716:	f008 fb43 	bl	8010da0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	8a7a      	ldrh	r2, [r7, #18]
 800871e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	895a      	ldrh	r2, [r3, #10]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d004      	beq.n	800873a <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f8dd 	bl	80088f4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	e000      	b.n	8008744 <pbuf_realloc+0x138>
    return;
 8008742:	bf00      	nop

}
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	080127a8 	.word	0x080127a8
 8008750:	08012964 	.word	0x08012964
 8008754:	080127f4 	.word	0x080127f4
 8008758:	0801297c 	.word	0x0801297c
 800875c:	08012998 	.word	0x08012998
 8008760:	080129ac 	.word	0x080129ac
 8008764:	080129c4 	.word	0x080129c4

08008768 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	807b      	strh	r3, [r7, #2]
 8008774:	4613      	mov	r3, r2
 8008776:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d106      	bne.n	800878c <pbuf_header_impl+0x24>
 800877e:	4b46      	ldr	r3, [pc, #280]	; (8008898 <pbuf_header_impl+0x130>)
 8008780:	f240 223f 	movw	r2, #575	; 0x23f
 8008784:	4945      	ldr	r1, [pc, #276]	; (800889c <pbuf_header_impl+0x134>)
 8008786:	4846      	ldr	r0, [pc, #280]	; (80088a0 <pbuf_header_impl+0x138>)
 8008788:	f008 fb0a 	bl	8010da0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800878c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <pbuf_header_impl+0x32>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <pbuf_header_impl+0x36>
    return 0;
 800879a:	2300      	movs	r3, #0
 800879c:	e078      	b.n	8008890 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800879e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	da10      	bge.n	80087c8 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80087a6:	887b      	ldrh	r3, [r7, #2]
 80087a8:	425b      	negs	r3, r3
 80087aa:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	895b      	ldrh	r3, [r3, #10]
 80087b0:	89fa      	ldrh	r2, [r7, #14]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d90a      	bls.n	80087cc <pbuf_header_impl+0x64>
 80087b6:	4b38      	ldr	r3, [pc, #224]	; (8008898 <pbuf_header_impl+0x130>)
 80087b8:	f240 2247 	movw	r2, #583	; 0x247
 80087bc:	4939      	ldr	r1, [pc, #228]	; (80088a4 <pbuf_header_impl+0x13c>)
 80087be:	4838      	ldr	r0, [pc, #224]	; (80088a0 <pbuf_header_impl+0x138>)
 80087c0:	f008 faee 	bl	8010da0 <iprintf>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e063      	b.n	8008890 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80087c8:	887b      	ldrh	r3, [r7, #2]
 80087ca:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	7b1b      	ldrb	r3, [r3, #12]
 80087d0:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80087d8:	89bb      	ldrh	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <pbuf_header_impl+0x7c>
 80087de:	89bb      	ldrh	r3, [r7, #12]
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d112      	bne.n	800880a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087ec:	425b      	negs	r3, r3
 80087ee:	441a      	add	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3310      	adds	r3, #16
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d238      	bcs.n	8008872 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8008806:	2301      	movs	r3, #1
 8008808:	e042      	b.n	8008890 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800880a:	89bb      	ldrh	r3, [r7, #12]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d002      	beq.n	8008816 <pbuf_header_impl+0xae>
 8008810:	89bb      	ldrh	r3, [r7, #12]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d124      	bne.n	8008860 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008816:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800881a:	2b00      	cmp	r3, #0
 800881c:	da0d      	bge.n	800883a <pbuf_header_impl+0xd2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	895b      	ldrh	r3, [r3, #10]
 8008822:	89fa      	ldrh	r2, [r7, #14]
 8008824:	429a      	cmp	r2, r3
 8008826:	d808      	bhi.n	800883a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008830:	425b      	negs	r3, r3
 8008832:	441a      	add	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	605a      	str	r2, [r3, #4]
 8008838:	e011      	b.n	800885e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800883a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800883e:	2b00      	cmp	r3, #0
 8008840:	dd0b      	ble.n	800885a <pbuf_header_impl+0xf2>
 8008842:	787b      	ldrb	r3, [r7, #1]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d008      	beq.n	800885a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008850:	425b      	negs	r3, r3
 8008852:	441a      	add	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	605a      	str	r2, [r3, #4]
 8008858:	e001      	b.n	800885e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800885a:	2301      	movs	r3, #1
 800885c:	e018      	b.n	8008890 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800885e:	e008      	b.n	8008872 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8008860:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <pbuf_header_impl+0x130>)
 8008862:	f240 2277 	movw	r2, #631	; 0x277
 8008866:	4910      	ldr	r1, [pc, #64]	; (80088a8 <pbuf_header_impl+0x140>)
 8008868:	480d      	ldr	r0, [pc, #52]	; (80088a0 <pbuf_header_impl+0x138>)
 800886a:	f008 fa99 	bl	8010da0 <iprintf>
    return 1;
 800886e:	2301      	movs	r3, #1
 8008870:	e00e      	b.n	8008890 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	895a      	ldrh	r2, [r3, #10]
 8008876:	887b      	ldrh	r3, [r7, #2]
 8008878:	4413      	add	r3, r2
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	891a      	ldrh	r2, [r3, #8]
 8008884:	887b      	ldrh	r3, [r7, #2]
 8008886:	4413      	add	r3, r2
 8008888:	b29a      	uxth	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	080127a8 	.word	0x080127a8
 800889c:	080129e0 	.word	0x080129e0
 80088a0:	080127f4 	.word	0x080127f4
 80088a4:	080129ec 	.word	0x080129ec
 80088a8:	08012a0c 	.word	0x08012a0c

080088ac <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80088b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088bc:	2200      	movs	r2, #0
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff ff51 	bl	8008768 <pbuf_header_impl>
 80088c6:	4603      	mov	r3, r0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80088dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088e0:	2201      	movs	r2, #1
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff ff3f 	bl	8008768 <pbuf_header_impl>
 80088ea:	4603      	mov	r3, r0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10b      	bne.n	800891a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <pbuf_free+0x22>
 8008908:	4b3e      	ldr	r3, [pc, #248]	; (8008a04 <pbuf_free+0x110>)
 800890a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800890e:	493e      	ldr	r1, [pc, #248]	; (8008a08 <pbuf_free+0x114>)
 8008910:	483e      	ldr	r0, [pc, #248]	; (8008a0c <pbuf_free+0x118>)
 8008912:	f008 fa45 	bl	8010da0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008916:	2300      	movs	r3, #0
 8008918:	e070      	b.n	80089fc <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	7b1b      	ldrb	r3, [r3, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d012      	beq.n	8008948 <pbuf_free+0x54>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	7b1b      	ldrb	r3, [r3, #12]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d00e      	beq.n	8008948 <pbuf_free+0x54>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	7b1b      	ldrb	r3, [r3, #12]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d00a      	beq.n	8008948 <pbuf_free+0x54>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	7b1b      	ldrb	r3, [r3, #12]
 8008936:	2b03      	cmp	r3, #3
 8008938:	d006      	beq.n	8008948 <pbuf_free+0x54>
 800893a:	4b32      	ldr	r3, [pc, #200]	; (8008a04 <pbuf_free+0x110>)
 800893c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008940:	4933      	ldr	r1, [pc, #204]	; (8008a10 <pbuf_free+0x11c>)
 8008942:	4832      	ldr	r0, [pc, #200]	; (8008a0c <pbuf_free+0x118>)
 8008944:	f008 fa2c 	bl	8010da0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800894c:	e052      	b.n	80089f4 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	89db      	ldrh	r3, [r3, #14]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <pbuf_free+0x70>
 8008956:	4b2b      	ldr	r3, [pc, #172]	; (8008a04 <pbuf_free+0x110>)
 8008958:	f240 22eb 	movw	r2, #747	; 0x2eb
 800895c:	492d      	ldr	r1, [pc, #180]	; (8008a14 <pbuf_free+0x120>)
 800895e:	482b      	ldr	r0, [pc, #172]	; (8008a0c <pbuf_free+0x118>)
 8008960:	f008 fa1e 	bl	8010da0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	89db      	ldrh	r3, [r3, #14]
 8008968:	3b01      	subs	r3, #1
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	81da      	strh	r2, [r3, #14]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	89db      	ldrh	r3, [r3, #14]
 8008974:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008976:	8abb      	ldrh	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d139      	bne.n	80089f0 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	7b1b      	ldrb	r3, [r3, #12]
 8008986:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	7b5b      	ldrb	r3, [r3, #13]
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d011      	beq.n	80089b8 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d106      	bne.n	80089ae <pbuf_free+0xba>
 80089a0:	4b18      	ldr	r3, [pc, #96]	; (8008a04 <pbuf_free+0x110>)
 80089a2:	f240 22f9 	movw	r2, #761	; 0x2f9
 80089a6:	491c      	ldr	r1, [pc, #112]	; (8008a18 <pbuf_free+0x124>)
 80089a8:	4818      	ldr	r0, [pc, #96]	; (8008a0c <pbuf_free+0x118>)
 80089aa:	f008 f9f9 	bl	8010da0 <iprintf>
        pc->custom_free_function(p);
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
 80089b6:	e015      	b.n	80089e4 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80089b8:	89fb      	ldrh	r3, [r7, #14]
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d104      	bne.n	80089c8 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	2008      	movs	r0, #8
 80089c2:	f7ff fa67 	bl	8007e94 <memp_free>
 80089c6:	e00d      	b.n	80089e4 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80089c8:	89fb      	ldrh	r3, [r7, #14]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d002      	beq.n	80089d4 <pbuf_free+0xe0>
 80089ce:	89fb      	ldrh	r3, [r7, #14]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d104      	bne.n	80089de <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	2007      	movs	r0, #7
 80089d8:	f7ff fa5c 	bl	8007e94 <memp_free>
 80089dc:	e002      	b.n	80089e4 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7fe ff72 	bl	80078c8 <mem_free>
        }
      }
      count++;
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	3301      	adds	r3, #1
 80089e8:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	607b      	str	r3, [r7, #4]
 80089ee:	e001      	b.n	80089f4 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80089f0:	2300      	movs	r3, #0
 80089f2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1a9      	bne.n	800894e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80089fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	080127a8 	.word	0x080127a8
 8008a08:	080129e0 	.word	0x080129e0
 8008a0c:	080127f4 	.word	0x080127f4
 8008a10:	08012a1c 	.word	0x08012a1c
 8008a14:	08012a34 	.word	0x08012a34
 8008a18:	08012a4c 	.word	0x08012a4c

08008a1c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008a28:	e005      	b.n	8008a36 <pbuf_clen+0x1a>
    ++len;
 8008a2a:	89fb      	ldrh	r3, [r7, #14]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1f6      	bne.n	8008a2a <pbuf_clen+0xe>
  }
  return len;
 8008a3c:	89fb      	ldrh	r3, [r7, #14]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
	...

08008a4c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d010      	beq.n	8008a7c <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	89db      	ldrh	r3, [r3, #14]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	89db      	ldrh	r3, [r3, #14]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <pbuf_ref+0x30>
 8008a6e:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <pbuf_ref+0x38>)
 8008a70:	f240 3239 	movw	r2, #825	; 0x339
 8008a74:	4904      	ldr	r1, [pc, #16]	; (8008a88 <pbuf_ref+0x3c>)
 8008a76:	4805      	ldr	r0, [pc, #20]	; (8008a8c <pbuf_ref+0x40>)
 8008a78:	f008 f992 	bl	8010da0 <iprintf>
  }
}
 8008a7c:	bf00      	nop
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	080127a8 	.word	0x080127a8
 8008a88:	08012a70 	.word	0x08012a70
 8008a8c:	080127f4 	.word	0x080127f4

08008a90 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <pbuf_cat+0x16>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d107      	bne.n	8008ab6 <pbuf_cat+0x26>
 8008aa6:	4b20      	ldr	r3, [pc, #128]	; (8008b28 <pbuf_cat+0x98>)
 8008aa8:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8008aac:	491f      	ldr	r1, [pc, #124]	; (8008b2c <pbuf_cat+0x9c>)
 8008aae:	4820      	ldr	r0, [pc, #128]	; (8008b30 <pbuf_cat+0xa0>)
 8008ab0:	f008 f976 	bl	8010da0 <iprintf>
 8008ab4:	e034      	b.n	8008b20 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	e00a      	b.n	8008ad2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	891a      	ldrh	r2, [r3, #8]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	891b      	ldrh	r3, [r3, #8]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1f0      	bne.n	8008abc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	891a      	ldrh	r2, [r3, #8]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	895b      	ldrh	r3, [r3, #10]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d006      	beq.n	8008af4 <pbuf_cat+0x64>
 8008ae6:	4b10      	ldr	r3, [pc, #64]	; (8008b28 <pbuf_cat+0x98>)
 8008ae8:	f240 3255 	movw	r2, #853	; 0x355
 8008aec:	4911      	ldr	r1, [pc, #68]	; (8008b34 <pbuf_cat+0xa4>)
 8008aee:	4810      	ldr	r0, [pc, #64]	; (8008b30 <pbuf_cat+0xa0>)
 8008af0:	f008 f956 	bl	8010da0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d006      	beq.n	8008b0a <pbuf_cat+0x7a>
 8008afc:	4b0a      	ldr	r3, [pc, #40]	; (8008b28 <pbuf_cat+0x98>)
 8008afe:	f240 3256 	movw	r2, #854	; 0x356
 8008b02:	490d      	ldr	r1, [pc, #52]	; (8008b38 <pbuf_cat+0xa8>)
 8008b04:	480a      	ldr	r0, [pc, #40]	; (8008b30 <pbuf_cat+0xa0>)
 8008b06:	f008 f94b 	bl	8010da0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	891a      	ldrh	r2, [r3, #8]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	891b      	ldrh	r3, [r3, #8]
 8008b12:	4413      	add	r3, r2
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	080127a8 	.word	0x080127a8
 8008b2c:	08012a84 	.word	0x08012a84
 8008b30:	080127f4 	.word	0x080127f4
 8008b34:	08012abc 	.word	0x08012abc
 8008b38:	08012aec 	.word	0x08012aec

08008b3c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ffa1 	bl	8008a90 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008b4e:	6838      	ldr	r0, [r7, #0]
 8008b50:	f7ff ff7c 	bl	8008a4c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8008b66:	2300      	movs	r3, #0
 8008b68:	81fb      	strh	r3, [r7, #14]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d008      	beq.n	8008b86 <pbuf_copy+0x2a>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <pbuf_copy+0x2a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	891a      	ldrh	r2, [r3, #8]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	891b      	ldrh	r3, [r3, #8]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d209      	bcs.n	8008b9a <pbuf_copy+0x3e>
 8008b86:	4b54      	ldr	r3, [pc, #336]	; (8008cd8 <pbuf_copy+0x17c>)
 8008b88:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8008b8c:	4953      	ldr	r1, [pc, #332]	; (8008cdc <pbuf_copy+0x180>)
 8008b8e:	4854      	ldr	r0, [pc, #336]	; (8008ce0 <pbuf_copy+0x184>)
 8008b90:	f008 f906 	bl	8010da0 <iprintf>
 8008b94:	f06f 030f 	mvn.w	r3, #15
 8008b98:	e099      	b.n	8008cce <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	895b      	ldrh	r3, [r3, #10]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	89fb      	ldrh	r3, [r7, #14]
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	895b      	ldrh	r3, [r3, #10]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	89bb      	ldrh	r3, [r7, #12]
 8008bac:	1acb      	subs	r3, r1, r3
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	db05      	blt.n	8008bbe <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	895a      	ldrh	r2, [r3, #10]
 8008bb6:	89bb      	ldrh	r3, [r7, #12]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	817b      	strh	r3, [r7, #10]
 8008bbc:	e004      	b.n	8008bc8 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	895a      	ldrh	r2, [r3, #10]
 8008bc2:	89fb      	ldrh	r3, [r7, #14]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	89fb      	ldrh	r3, [r7, #14]
 8008bce:	18d0      	adds	r0, r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	89bb      	ldrh	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	897a      	ldrh	r2, [r7, #10]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	f007 ffea 	bl	8010bb4 <memcpy>
    offset_to += len;
 8008be0:	89fa      	ldrh	r2, [r7, #14]
 8008be2:	897b      	ldrh	r3, [r7, #10]
 8008be4:	4413      	add	r3, r2
 8008be6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8008be8:	89ba      	ldrh	r2, [r7, #12]
 8008bea:	897b      	ldrh	r3, [r7, #10]
 8008bec:	4413      	add	r3, r2
 8008bee:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	895b      	ldrh	r3, [r3, #10]
 8008bf4:	89fa      	ldrh	r2, [r7, #14]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d906      	bls.n	8008c08 <pbuf_copy+0xac>
 8008bfa:	4b37      	ldr	r3, [pc, #220]	; (8008cd8 <pbuf_copy+0x17c>)
 8008bfc:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008c00:	4938      	ldr	r1, [pc, #224]	; (8008ce4 <pbuf_copy+0x188>)
 8008c02:	4837      	ldr	r0, [pc, #220]	; (8008ce0 <pbuf_copy+0x184>)
 8008c04:	f008 f8cc 	bl	8010da0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	895b      	ldrh	r3, [r3, #10]
 8008c0c:	89ba      	ldrh	r2, [r7, #12]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d906      	bls.n	8008c20 <pbuf_copy+0xc4>
 8008c12:	4b31      	ldr	r3, [pc, #196]	; (8008cd8 <pbuf_copy+0x17c>)
 8008c14:	f240 32ce 	movw	r2, #974	; 0x3ce
 8008c18:	4933      	ldr	r1, [pc, #204]	; (8008ce8 <pbuf_copy+0x18c>)
 8008c1a:	4831      	ldr	r0, [pc, #196]	; (8008ce0 <pbuf_copy+0x184>)
 8008c1c:	f008 f8c0 	bl	8010da0 <iprintf>
    if (offset_from >= p_from->len) {
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	895b      	ldrh	r3, [r3, #10]
 8008c24:	89ba      	ldrh	r2, [r7, #12]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d304      	bcc.n	8008c34 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	895b      	ldrh	r3, [r3, #10]
 8008c38:	89fa      	ldrh	r2, [r7, #14]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d114      	bne.n	8008c68 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10c      	bne.n	8008c68 <pbuf_copy+0x10c>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d009      	beq.n	8008c68 <pbuf_copy+0x10c>
 8008c54:	4b20      	ldr	r3, [pc, #128]	; (8008cd8 <pbuf_copy+0x17c>)
 8008c56:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8008c5a:	4924      	ldr	r1, [pc, #144]	; (8008cec <pbuf_copy+0x190>)
 8008c5c:	4820      	ldr	r0, [pc, #128]	; (8008ce0 <pbuf_copy+0x184>)
 8008c5e:	f008 f89f 	bl	8010da0 <iprintf>
 8008c62:	f06f 030f 	mvn.w	r3, #15
 8008c66:	e032      	b.n	8008cce <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d013      	beq.n	8008c96 <pbuf_copy+0x13a>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	895a      	ldrh	r2, [r3, #10]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	891b      	ldrh	r3, [r3, #8]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d10d      	bne.n	8008c96 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d009      	beq.n	8008c96 <pbuf_copy+0x13a>
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <pbuf_copy+0x17c>)
 8008c84:	f240 32dd 	movw	r2, #989	; 0x3dd
 8008c88:	4919      	ldr	r1, [pc, #100]	; (8008cf0 <pbuf_copy+0x194>)
 8008c8a:	4815      	ldr	r0, [pc, #84]	; (8008ce0 <pbuf_copy+0x184>)
 8008c8c:	f008 f888 	bl	8010da0 <iprintf>
 8008c90:	f06f 0305 	mvn.w	r3, #5
 8008c94:	e01b      	b.n	8008cce <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d013      	beq.n	8008cc4 <pbuf_copy+0x168>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	895a      	ldrh	r2, [r3, #10]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	891b      	ldrh	r3, [r3, #8]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d10d      	bne.n	8008cc4 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d009      	beq.n	8008cc4 <pbuf_copy+0x168>
 8008cb0:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <pbuf_copy+0x17c>)
 8008cb2:	f240 32e2 	movw	r2, #994	; 0x3e2
 8008cb6:	490e      	ldr	r1, [pc, #56]	; (8008cf0 <pbuf_copy+0x194>)
 8008cb8:	4809      	ldr	r0, [pc, #36]	; (8008ce0 <pbuf_copy+0x184>)
 8008cba:	f008 f871 	bl	8010da0 <iprintf>
 8008cbe:	f06f 0305 	mvn.w	r3, #5
 8008cc2:	e004      	b.n	8008cce <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f47f af67 	bne.w	8008b9a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	080127a8 	.word	0x080127a8
 8008cdc:	08012b38 	.word	0x08012b38
 8008ce0:	080127f4 	.word	0x080127f4
 8008ce4:	08012b68 	.word	0x08012b68
 8008ce8:	08012b80 	.word	0x08012b80
 8008cec:	08012b9c 	.word	0x08012b9c
 8008cf0:	08012bac 	.word	0x08012bac

08008cf4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	461a      	mov	r2, r3
 8008d02:	460b      	mov	r3, r1
 8008d04:	80fb      	strh	r3, [r7, #6]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d108      	bne.n	8008d26 <pbuf_copy_partial+0x32>
 8008d14:	4b30      	ldr	r3, [pc, #192]	; (8008dd8 <pbuf_copy_partial+0xe4>)
 8008d16:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008d1a:	4930      	ldr	r1, [pc, #192]	; (8008ddc <pbuf_copy_partial+0xe8>)
 8008d1c:	4830      	ldr	r0, [pc, #192]	; (8008de0 <pbuf_copy_partial+0xec>)
 8008d1e:	f008 f83f 	bl	8010da0 <iprintf>
 8008d22:	2300      	movs	r3, #0
 8008d24:	e054      	b.n	8008dd0 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d108      	bne.n	8008d3e <pbuf_copy_partial+0x4a>
 8008d2c:	4b2a      	ldr	r3, [pc, #168]	; (8008dd8 <pbuf_copy_partial+0xe4>)
 8008d2e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008d32:	492c      	ldr	r1, [pc, #176]	; (8008de4 <pbuf_copy_partial+0xf0>)
 8008d34:	482a      	ldr	r0, [pc, #168]	; (8008de0 <pbuf_copy_partial+0xec>)
 8008d36:	f008 f833 	bl	8010da0 <iprintf>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	e048      	b.n	8008dd0 <pbuf_copy_partial+0xdc>

  left = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <pbuf_copy_partial+0x5a>
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <pbuf_copy_partial+0x5e>
    return 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e03e      	b.n	8008dd0 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	61fb      	str	r3, [r7, #28]
 8008d56:	e034      	b.n	8008dc2 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8008d58:	88bb      	ldrh	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <pbuf_copy_partial+0x80>
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	895b      	ldrh	r3, [r3, #10]
 8008d62:	88ba      	ldrh	r2, [r7, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d305      	bcc.n	8008d74 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	895b      	ldrh	r3, [r3, #10]
 8008d6c:	88ba      	ldrh	r2, [r7, #4]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	80bb      	strh	r3, [r7, #4]
 8008d72:	e023      	b.n	8008dbc <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	895a      	ldrh	r2, [r3, #10]
 8008d78:	88bb      	ldrh	r3, [r7, #4]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008d7e:	8b3a      	ldrh	r2, [r7, #24]
 8008d80:	88fb      	ldrh	r3, [r7, #6]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d901      	bls.n	8008d8a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8008d86:	88fb      	ldrh	r3, [r7, #6]
 8008d88:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8008d8a:	8b7b      	ldrh	r3, [r7, #26]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	18d0      	adds	r0, r2, r3
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	88bb      	ldrh	r3, [r7, #4]
 8008d96:	4413      	add	r3, r2
 8008d98:	8b3a      	ldrh	r2, [r7, #24]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	f007 ff0a 	bl	8010bb4 <memcpy>
      copied_total += buf_copy_len;
 8008da0:	8afa      	ldrh	r2, [r7, #22]
 8008da2:	8b3b      	ldrh	r3, [r7, #24]
 8008da4:	4413      	add	r3, r2
 8008da6:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8008da8:	8b7a      	ldrh	r2, [r7, #26]
 8008daa:	8b3b      	ldrh	r3, [r7, #24]
 8008dac:	4413      	add	r3, r2
 8008dae:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8008db0:	88fa      	ldrh	r2, [r7, #6]
 8008db2:	8b3b      	ldrh	r3, [r7, #24]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	61fb      	str	r3, [r7, #28]
 8008dc2:	88fb      	ldrh	r3, [r7, #6]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <pbuf_copy_partial+0xda>
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1c4      	bne.n	8008d58 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8008dce:	8afb      	ldrh	r3, [r7, #22]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3720      	adds	r7, #32
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	080127a8 	.word	0x080127a8
 8008ddc:	08012bd8 	.word	0x08012bd8
 8008de0:	080127f4 	.word	0x080127f4
 8008de4:	08012bf8 	.word	0x08012bf8

08008de8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008dec:	bf00      	nop
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
	...

08008df8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008dfc:	f000 ff8c 	bl	8009d18 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <tcp_tmr+0x28>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	3301      	adds	r3, #1
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <tcp_tmr+0x28>)
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	4b04      	ldr	r3, [pc, #16]	; (8008e20 <tcp_tmr+0x28>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008e18:	f000 fcbc 	bl	8009794 <tcp_slowtmr>
  }
}
 8008e1c:	bf00      	nop
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20007001 	.word	0x20007001

08008e24 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	e00a      	b.n	8008e4a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d102      	bne.n	8008e44 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1f1      	bne.n	8008e34 <tcp_remove_listener+0x10>
      }
   }
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
	...

08008e60 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d105      	bne.n	8008e7a <tcp_listen_closed+0x1a>
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <tcp_listen_closed+0x5c>)
 8008e70:	22c0      	movs	r2, #192	; 0xc0
 8008e72:	4913      	ldr	r1, [pc, #76]	; (8008ec0 <tcp_listen_closed+0x60>)
 8008e74:	4813      	ldr	r0, [pc, #76]	; (8008ec4 <tcp_listen_closed+0x64>)
 8008e76:	f007 ff93 	bl	8010da0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	7d1b      	ldrb	r3, [r3, #20]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d005      	beq.n	8008e8e <tcp_listen_closed+0x2e>
 8008e82:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <tcp_listen_closed+0x5c>)
 8008e84:	22c1      	movs	r2, #193	; 0xc1
 8008e86:	4910      	ldr	r1, [pc, #64]	; (8008ec8 <tcp_listen_closed+0x68>)
 8008e88:	480e      	ldr	r0, [pc, #56]	; (8008ec4 <tcp_listen_closed+0x64>)
 8008e8a:	f007 ff89 	bl	8010da0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008e8e:	2301      	movs	r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	e00b      	b.n	8008eac <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8008e94:	4a0d      	ldr	r2, [pc, #52]	; (8008ecc <tcp_listen_closed+0x6c>)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7ff ffbf 	bl	8008e24 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d9f0      	bls.n	8008e94 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008eb2:	bf00      	nop
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	08012d2c 	.word	0x08012d2c
 8008ec0:	08012d5c 	.word	0x08012d5c
 8008ec4:	08012d68 	.word	0x08012d68
 8008ec8:	08012d90 	.word	0x08012d90
 8008ecc:	08014170 	.word	0x08014170

08008ed0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008ed0:	b5b0      	push	{r4, r5, r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af02      	add	r7, sp, #8
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d075      	beq.n	8008fce <tcp_close_shutdown+0xfe>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7d1b      	ldrb	r3, [r3, #20]
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	d003      	beq.n	8008ef2 <tcp_close_shutdown+0x22>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7d1b      	ldrb	r3, [r3, #20]
 8008eee:	2b07      	cmp	r3, #7
 8008ef0:	d16d      	bne.n	8008fce <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <tcp_close_shutdown+0x34>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008efe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008f02:	d064      	beq.n	8008fce <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	7e9b      	ldrb	r3, [r3, #26]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <tcp_close_shutdown+0x4e>
 8008f10:	4b5b      	ldr	r3, [pc, #364]	; (8009080 <tcp_close_shutdown+0x1b0>)
 8008f12:	f240 120f 	movw	r2, #271	; 0x10f
 8008f16:	495b      	ldr	r1, [pc, #364]	; (8009084 <tcp_close_shutdown+0x1b4>)
 8008f18:	485b      	ldr	r0, [pc, #364]	; (8009088 <tcp_close_shutdown+0x1b8>)
 8008f1a:	f007 ff41 	bl	8010da0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f26:	687c      	ldr	r4, [r7, #4]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	1d1d      	adds	r5, r3, #4
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	8adb      	ldrh	r3, [r3, #22]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	8b12      	ldrh	r2, [r2, #24]
 8008f34:	9201      	str	r2, [sp, #4]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	462b      	mov	r3, r5
 8008f3a:	4622      	mov	r2, r4
 8008f3c:	f004 fef0 	bl	800dd20 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f001 fa29 	bl	800a398 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008f46:	4b51      	ldr	r3, [pc, #324]	; (800908c <tcp_close_shutdown+0x1bc>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d105      	bne.n	8008f5c <tcp_close_shutdown+0x8c>
 8008f50:	4b4e      	ldr	r3, [pc, #312]	; (800908c <tcp_close_shutdown+0x1bc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	4a4d      	ldr	r2, [pc, #308]	; (800908c <tcp_close_shutdown+0x1bc>)
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	e013      	b.n	8008f84 <tcp_close_shutdown+0xb4>
 8008f5c:	4b4b      	ldr	r3, [pc, #300]	; (800908c <tcp_close_shutdown+0x1bc>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	e00c      	b.n	8008f7e <tcp_close_shutdown+0xae>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d104      	bne.n	8008f78 <tcp_close_shutdown+0xa8>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	60da      	str	r2, [r3, #12]
 8008f76:	e005      	b.n	8008f84 <tcp_close_shutdown+0xb4>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1ef      	bne.n	8008f64 <tcp_close_shutdown+0x94>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	60da      	str	r2, [r3, #12]
 8008f8a:	4b41      	ldr	r3, [pc, #260]	; (8009090 <tcp_close_shutdown+0x1c0>)
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7d1b      	ldrb	r3, [r3, #20]
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d10c      	bne.n	8008fb2 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	220a      	movs	r2, #10
 8008f9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008f9e:	4b3d      	ldr	r3, [pc, #244]	; (8009094 <tcp_close_shutdown+0x1c4>)
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	60da      	str	r2, [r3, #12]
 8008fa6:	4a3b      	ldr	r2, [pc, #236]	; (8009094 <tcp_close_shutdown+0x1c4>)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	f005 f900 	bl	800e1b0 <tcp_timer_needed>
 8008fb0:	e00b      	b.n	8008fca <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8008fb2:	4b39      	ldr	r3, [pc, #228]	; (8009098 <tcp_close_shutdown+0x1c8>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d102      	bne.n	8008fc2 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8008fbc:	f003 fd50 	bl	800ca60 <tcp_trigger_input_pcb_close>
 8008fc0:	e003      	b.n	8008fca <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	2001      	movs	r0, #1
 8008fc6:	f7fe ff65 	bl	8007e94 <memp_free>
        }
      }
      return ERR_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e053      	b.n	8009076 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	7d1b      	ldrb	r3, [r3, #20]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d03d      	beq.n	8009052 <tcp_close_shutdown+0x182>
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	dc47      	bgt.n	800906a <tcp_close_shutdown+0x19a>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <tcp_close_shutdown+0x114>
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d02b      	beq.n	800903a <tcp_close_shutdown+0x16a>
 8008fe2:	e042      	b.n	800906a <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	8adb      	ldrh	r3, [r3, #22]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d021      	beq.n	8009030 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008fec:	4b2b      	ldr	r3, [pc, #172]	; (800909c <tcp_close_shutdown+0x1cc>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d105      	bne.n	8009002 <tcp_close_shutdown+0x132>
 8008ff6:	4b29      	ldr	r3, [pc, #164]	; (800909c <tcp_close_shutdown+0x1cc>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	4a27      	ldr	r2, [pc, #156]	; (800909c <tcp_close_shutdown+0x1cc>)
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	e013      	b.n	800902a <tcp_close_shutdown+0x15a>
 8009002:	4b26      	ldr	r3, [pc, #152]	; (800909c <tcp_close_shutdown+0x1cc>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	60bb      	str	r3, [r7, #8]
 8009008:	e00c      	b.n	8009024 <tcp_close_shutdown+0x154>
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	429a      	cmp	r2, r3
 8009012:	d104      	bne.n	800901e <tcp_close_shutdown+0x14e>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	60da      	str	r2, [r3, #12]
 800901c:	e005      	b.n	800902a <tcp_close_shutdown+0x15a>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	60bb      	str	r3, [r7, #8]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1ef      	bne.n	800900a <tcp_close_shutdown+0x13a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	2001      	movs	r0, #1
 8009034:	f7fe ff2e 	bl	8007e94 <memp_free>
    break;
 8009038:	e01c      	b.n	8009074 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff ff10 	bl	8008e60 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	4817      	ldr	r0, [pc, #92]	; (80090a0 <tcp_close_shutdown+0x1d0>)
 8009044:	f001 f9ea 	bl	800a41c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	2002      	movs	r0, #2
 800904c:	f7fe ff22 	bl	8007e94 <memp_free>
    break;
 8009050:	e010      	b.n	8009074 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	480d      	ldr	r0, [pc, #52]	; (800908c <tcp_close_shutdown+0x1bc>)
 8009056:	f001 f9e1 	bl	800a41c <tcp_pcb_remove>
 800905a:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <tcp_close_shutdown+0x1c0>)
 800905c:	2201      	movs	r2, #1
 800905e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	2001      	movs	r0, #1
 8009064:	f7fe ff16 	bl	8007e94 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8009068:	e004      	b.n	8009074 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f81a 	bl	80090a4 <tcp_close_shutdown_fin>
 8009070:	4603      	mov	r3, r0
 8009072:	e000      	b.n	8009076 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bdb0      	pop	{r4, r5, r7, pc}
 800907e:	bf00      	nop
 8009080:	08012d2c 	.word	0x08012d2c
 8009084:	08012da8 	.word	0x08012da8
 8009088:	08012d68 	.word	0x08012d68
 800908c:	20006ff8 	.word	0x20006ff8
 8009090:	20007000 	.word	0x20007000
 8009094:	20006ffc 	.word	0x20006ffc
 8009098:	20007038 	.word	0x20007038
 800909c:	20006ff0 	.word	0x20006ff0
 80090a0:	20006ff4 	.word	0x20006ff4

080090a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <tcp_close_shutdown_fin+0x1c>
 80090b2:	4b2e      	ldr	r3, [pc, #184]	; (800916c <tcp_close_shutdown_fin+0xc8>)
 80090b4:	f240 124d 	movw	r2, #333	; 0x14d
 80090b8:	492d      	ldr	r1, [pc, #180]	; (8009170 <tcp_close_shutdown_fin+0xcc>)
 80090ba:	482e      	ldr	r0, [pc, #184]	; (8009174 <tcp_close_shutdown_fin+0xd0>)
 80090bc:	f007 fe70 	bl	8010da0 <iprintf>

  switch (pcb->state) {
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7d1b      	ldrb	r3, [r3, #20]
 80090c4:	2b07      	cmp	r3, #7
 80090c6:	d020      	beq.n	800910a <tcp_close_shutdown_fin+0x66>
 80090c8:	2b07      	cmp	r3, #7
 80090ca:	dc2b      	bgt.n	8009124 <tcp_close_shutdown_fin+0x80>
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d002      	beq.n	80090d6 <tcp_close_shutdown_fin+0x32>
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	d00d      	beq.n	80090f0 <tcp_close_shutdown_fin+0x4c>
 80090d4:	e026      	b.n	8009124 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f003 fd4c 	bl	800cb74 <tcp_send_fin>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80090e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d11f      	bne.n	8009128 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2205      	movs	r2, #5
 80090ec:	751a      	strb	r2, [r3, #20]
    }
    break;
 80090ee:	e01b      	b.n	8009128 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f003 fd3f 	bl	800cb74 <tcp_send_fin>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80090fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d114      	bne.n	800912c <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2205      	movs	r2, #5
 8009106:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009108:	e010      	b.n	800912c <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f003 fd32 	bl	800cb74 <tcp_send_fin>
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d109      	bne.n	8009130 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2209      	movs	r2, #9
 8009120:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009122:	e005      	b.n	8009130 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	e01c      	b.n	8009162 <tcp_close_shutdown_fin+0xbe>
    break;
 8009128:	bf00      	nop
 800912a:	e002      	b.n	8009132 <tcp_close_shutdown_fin+0x8e>
    break;
 800912c:	bf00      	nop
 800912e:	e000      	b.n	8009132 <tcp_close_shutdown_fin+0x8e>
    break;
 8009130:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d103      	bne.n	8009142 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f004 fb6c 	bl	800d818 <tcp_output>
 8009140:	e00d      	b.n	800915e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914a:	d108      	bne.n	800915e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7e9b      	ldrb	r3, [r3, #26]
 8009150:	f043 0308 	orr.w	r3, r3, #8
 8009154:	b2da      	uxtb	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	e001      	b.n	8009162 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800915e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	08012d2c 	.word	0x08012d2c
 8009170:	08012d5c 	.word	0x08012d5c
 8009174:	08012d68 	.word	0x08012d68

08009178 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7d1b      	ldrb	r3, [r3, #20]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d006      	beq.n	8009196 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7e9b      	ldrb	r3, [r3, #26]
 800918c:	f043 0310 	orr.w	r3, r3, #16
 8009190:	b2da      	uxtb	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009196:	2101      	movs	r1, #1
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7ff fe99 	bl	8008ed0 <tcp_close_shutdown>
 800919e:	4603      	mov	r3, r0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08c      	sub	sp, #48	; 0x30
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	7d1b      	ldrb	r3, [r3, #20]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d106      	bne.n	80091c8 <tcp_abandon+0x20>
 80091ba:	4b4d      	ldr	r3, [pc, #308]	; (80092f0 <tcp_abandon+0x148>)
 80091bc:	f240 12df 	movw	r2, #479	; 0x1df
 80091c0:	494c      	ldr	r1, [pc, #304]	; (80092f4 <tcp_abandon+0x14c>)
 80091c2:	484d      	ldr	r0, [pc, #308]	; (80092f8 <tcp_abandon+0x150>)
 80091c4:	f007 fdec 	bl	8010da0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	7d1b      	ldrb	r3, [r3, #20]
 80091cc:	2b0a      	cmp	r3, #10
 80091ce:	d108      	bne.n	80091e2 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	484a      	ldr	r0, [pc, #296]	; (80092fc <tcp_abandon+0x154>)
 80091d4:	f001 f922 	bl	800a41c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	2001      	movs	r0, #1
 80091dc:	f7fe fe5a 	bl	8007e94 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80091e0:	e081      	b.n	80092e6 <tcp_abandon+0x13e>
    int send_rst = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091fc:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	7d1b      	ldrb	r3, [r3, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d126      	bne.n	800925a <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8adb      	ldrh	r3, [r3, #22]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d02e      	beq.n	8009272 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009214:	4b3a      	ldr	r3, [pc, #232]	; (8009300 <tcp_abandon+0x158>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	429a      	cmp	r2, r3
 800921c:	d105      	bne.n	800922a <tcp_abandon+0x82>
 800921e:	4b38      	ldr	r3, [pc, #224]	; (8009300 <tcp_abandon+0x158>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	4a36      	ldr	r2, [pc, #216]	; (8009300 <tcp_abandon+0x158>)
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	e013      	b.n	8009252 <tcp_abandon+0xaa>
 800922a:	4b35      	ldr	r3, [pc, #212]	; (8009300 <tcp_abandon+0x158>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	61fb      	str	r3, [r7, #28]
 8009230:	e00c      	b.n	800924c <tcp_abandon+0xa4>
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	429a      	cmp	r2, r3
 800923a:	d104      	bne.n	8009246 <tcp_abandon+0x9e>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68da      	ldr	r2, [r3, #12]
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	60da      	str	r2, [r3, #12]
 8009244:	e005      	b.n	8009252 <tcp_abandon+0xaa>
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	61fb      	str	r3, [r7, #28]
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1ef      	bne.n	8009232 <tcp_abandon+0x8a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	60da      	str	r2, [r3, #12]
 8009258:	e00b      	b.n	8009272 <tcp_abandon+0xca>
      send_rst = reset;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	8adb      	ldrh	r3, [r3, #22]
 8009262:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4827      	ldr	r0, [pc, #156]	; (8009304 <tcp_abandon+0x15c>)
 8009268:	f001 f8d8 	bl	800a41c <tcp_pcb_remove>
 800926c:	4b26      	ldr	r3, [pc, #152]	; (8009308 <tcp_abandon+0x160>)
 800926e:	2201      	movs	r2, #1
 8009270:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009276:	2b00      	cmp	r3, #0
 8009278:	d004      	beq.n	8009284 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fe17 	bl	8009eb2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009288:	2b00      	cmp	r3, #0
 800928a:	d004      	beq.n	8009296 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fe0e 	bl	8009eb2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929a:	2b00      	cmp	r3, #0
 800929c:	d004      	beq.n	80092a8 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fe05 	bl	8009eb2 <tcp_segs_free>
    if (send_rst) {
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00c      	beq.n	80092c8 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	1d19      	adds	r1, r3, #4
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	8b1b      	ldrh	r3, [r3, #24]
 80092b8:	9301      	str	r3, [sp, #4]
 80092ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	460b      	mov	r3, r1
 80092c0:	6979      	ldr	r1, [r7, #20]
 80092c2:	69b8      	ldr	r0, [r7, #24]
 80092c4:	f004 fd2c 	bl	800dd20 <tcp_rst>
    last_state = pcb->state;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	7d1b      	ldrb	r3, [r3, #20]
 80092cc:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	2001      	movs	r0, #1
 80092d2:	f7fe fddf 	bl	8007e94 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d004      	beq.n	80092e6 <tcp_abandon+0x13e>
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f06f 010c 	mvn.w	r1, #12
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	4798      	blx	r3
}
 80092e6:	bf00      	nop
 80092e8:	3728      	adds	r7, #40	; 0x28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	08012d2c 	.word	0x08012d2c
 80092f4:	08012dc4 	.word	0x08012dc4
 80092f8:	08012d68 	.word	0x08012d68
 80092fc:	20006ffc 	.word	0x20006ffc
 8009300:	20006ff0 	.word	0x20006ff0
 8009304:	20006ff8 	.word	0x20006ff8
 8009308:	20007000 	.word	0x20007000

0800930c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009314:	2101      	movs	r1, #1
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff ff46 	bl	80091a8 <tcp_abandon>
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	4613      	mov	r3, r2
 8009330:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009332:	2304      	movs	r3, #4
 8009334:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d101      	bne.n	8009340 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800933c:	4b3c      	ldr	r3, [pc, #240]	; (8009430 <tcp_bind+0x10c>)
 800933e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <tcp_bind+0x28>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d102      	bne.n	8009352 <tcp_bind+0x2e>
    return ERR_VAL;
 800934c:	f06f 0305 	mvn.w	r3, #5
 8009350:	e06a      	b.n	8009428 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	7d1b      	ldrb	r3, [r3, #20]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <tcp_bind+0x4a>
 800935a:	4b36      	ldr	r3, [pc, #216]	; (8009434 <tcp_bind+0x110>)
 800935c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8009360:	4935      	ldr	r1, [pc, #212]	; (8009438 <tcp_bind+0x114>)
 8009362:	4836      	ldr	r0, [pc, #216]	; (800943c <tcp_bind+0x118>)
 8009364:	f007 fd1c 	bl	8010da0 <iprintf>
 8009368:	f06f 0305 	mvn.w	r3, #5
 800936c:	e05c      	b.n	8009428 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800936e:	88fb      	ldrh	r3, [r7, #6]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d109      	bne.n	8009388 <tcp_bind+0x64>
    port = tcp_new_port();
 8009374:	f000 f9ca 	bl	800970c <tcp_new_port>
 8009378:	4603      	mov	r3, r0
 800937a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800937c:	88fb      	ldrh	r3, [r7, #6]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d135      	bne.n	80093ee <tcp_bind+0xca>
      return ERR_BUF;
 8009382:	f06f 0301 	mvn.w	r3, #1
 8009386:	e04f      	b.n	8009428 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009388:	2300      	movs	r3, #0
 800938a:	61fb      	str	r3, [r7, #28]
 800938c:	e02b      	b.n	80093e6 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800938e:	4a2c      	ldr	r2, [pc, #176]	; (8009440 <tcp_bind+0x11c>)
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	61bb      	str	r3, [r7, #24]
 800939a:	e01e      	b.n	80093da <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	8adb      	ldrh	r3, [r3, #22]
 80093a0:	88fa      	ldrh	r2, [r7, #6]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d116      	bne.n	80093d4 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80093a6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d010      	beq.n	80093ce <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00c      	beq.n	80093ce <tcp_bind+0xaa>
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d009      	beq.n	80093ce <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d102      	bne.n	80093d4 <tcp_bind+0xb0>
              return ERR_USE;
 80093ce:	f06f 0307 	mvn.w	r3, #7
 80093d2:	e029      	b.n	8009428 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	61bb      	str	r3, [r7, #24]
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1dd      	bne.n	800939c <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	3301      	adds	r3, #1
 80093e4:	61fb      	str	r3, [r7, #28]
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	dbcf      	blt.n	800938e <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00c      	beq.n	800940e <tcp_bind+0xea>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d008      	beq.n	800940e <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <tcp_bind+0xe4>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	e000      	b.n	800940a <tcp_bind+0xe6>
 8009408:	2300      	movs	r3, #0
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	88fa      	ldrh	r2, [r7, #6]
 8009412:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009414:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <tcp_bind+0x120>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	60da      	str	r2, [r3, #12]
 800941c:	4a09      	ldr	r2, [pc, #36]	; (8009444 <tcp_bind+0x120>)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	f004 fec5 	bl	800e1b0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3720      	adds	r7, #32
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	08014198 	.word	0x08014198
 8009434:	08012d2c 	.word	0x08012d2c
 8009438:	08012df8 	.word	0x08012df8
 800943c:	08012d68 	.word	0x08012d68
 8009440:	08014170 	.word	0x08014170
 8009444:	20006ff0 	.word	0x20006ff0

08009448 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8009456:	68b8      	ldr	r0, [r7, #8]
 8009458:	f7ff ff58 	bl	800930c <tcp_abort>

  return ERR_ABRT;
 800945c:	f06f 030c 	mvn.w	r3, #12
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	2200      	movs	r2, #0
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f806 	bl	800948c <tcp_listen_with_backlog_and_err>
 8009480:	4603      	mov	r3, r0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	460b      	mov	r3, r1
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	7d1b      	ldrb	r3, [r3, #20]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d009      	beq.n	80094ba <tcp_listen_with_backlog_and_err+0x2e>
 80094a6:	4b3f      	ldr	r3, [pc, #252]	; (80095a4 <tcp_listen_with_backlog_and_err+0x118>)
 80094a8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80094ac:	493e      	ldr	r1, [pc, #248]	; (80095a8 <tcp_listen_with_backlog_and_err+0x11c>)
 80094ae:	483f      	ldr	r0, [pc, #252]	; (80095ac <tcp_listen_with_backlog_and_err+0x120>)
 80094b0:	f007 fc76 	bl	8010da0 <iprintf>
 80094b4:	23f1      	movs	r3, #241	; 0xf1
 80094b6:	76fb      	strb	r3, [r7, #27]
 80094b8:	e069      	b.n	800958e <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	7d1b      	ldrb	r3, [r3, #20]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d104      	bne.n	80094cc <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80094c6:	23f7      	movs	r3, #247	; 0xf7
 80094c8:	76fb      	strb	r3, [r7, #27]
    goto done;
 80094ca:	e060      	b.n	800958e <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80094cc:	2002      	movs	r0, #2
 80094ce:	f7fe fc95 	bl	8007dfc <memp_malloc>
 80094d2:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d102      	bne.n	80094e0 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 80094da:	23ff      	movs	r3, #255	; 0xff
 80094dc:	76fb      	strb	r3, [r7, #27]
    goto done;
 80094de:	e056      	b.n	800958e <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	691a      	ldr	r2, [r3, #16]
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8ada      	ldrh	r2, [r3, #22]
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	2201      	movs	r2, #1
 80094f4:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	7d5a      	ldrb	r2, [r3, #21]
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	7a1a      	ldrb	r2, [r3, #8]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	7a9a      	ldrb	r2, [r3, #10]
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	7a5a      	ldrb	r2, [r3, #9]
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8adb      	ldrh	r3, [r3, #22]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d021      	beq.n	800956a <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009526:	4b22      	ldr	r3, [pc, #136]	; (80095b0 <tcp_listen_with_backlog_and_err+0x124>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	429a      	cmp	r2, r3
 800952e:	d105      	bne.n	800953c <tcp_listen_with_backlog_and_err+0xb0>
 8009530:	4b1f      	ldr	r3, [pc, #124]	; (80095b0 <tcp_listen_with_backlog_and_err+0x124>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	4a1e      	ldr	r2, [pc, #120]	; (80095b0 <tcp_listen_with_backlog_and_err+0x124>)
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	e013      	b.n	8009564 <tcp_listen_with_backlog_and_err+0xd8>
 800953c:	4b1c      	ldr	r3, [pc, #112]	; (80095b0 <tcp_listen_with_backlog_and_err+0x124>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	617b      	str	r3, [r7, #20]
 8009542:	e00c      	b.n	800955e <tcp_listen_with_backlog_and_err+0xd2>
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	429a      	cmp	r2, r3
 800954c:	d104      	bne.n	8009558 <tcp_listen_with_backlog_and_err+0xcc>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	68da      	ldr	r2, [r3, #12]
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	60da      	str	r2, [r3, #12]
 8009556:	e005      	b.n	8009564 <tcp_listen_with_backlog_and_err+0xd8>
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1ef      	bne.n	8009544 <tcp_listen_with_backlog_and_err+0xb8>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	2001      	movs	r0, #1
 800956e:	f7fe fc91 	bl	8007e94 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	4a0f      	ldr	r2, [pc, #60]	; (80095b4 <tcp_listen_with_backlog_and_err+0x128>)
 8009576:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009578:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <tcp_listen_with_backlog_and_err+0x12c>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	60da      	str	r2, [r3, #12]
 8009580:	4a0d      	ldr	r2, [pc, #52]	; (80095b8 <tcp_listen_with_backlog_and_err+0x12c>)
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	f004 fe13 	bl	800e1b0 <tcp_timer_needed>
  res = ERR_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7efa      	ldrb	r2, [r7, #27]
 8009598:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800959a:	69fb      	ldr	r3, [r7, #28]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3720      	adds	r7, #32
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	08012d2c 	.word	0x08012d2c
 80095a8:	08012e20 	.word	0x08012e20
 80095ac:	08012d68 	.word	0x08012d68
 80095b0:	20006ff0 	.word	0x20006ff0
 80095b4:	08009449 	.word	0x08009449
 80095b8:	20006ff4 	.word	0x20006ff4

080095bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80095cc:	4413      	add	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80095d8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80095dc:	bf28      	it	cs
 80095de:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80095e2:	b292      	uxth	r2, r2
 80095e4:	4413      	add	r3, r2
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	db08      	blt.n	8009600 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	e020      	b.n	8009642 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	dd03      	ble.n	8009616 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009614:	e014      	b.n	8009640 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009628:	d306      	bcc.n	8009638 <tcp_update_rcv_ann_wnd+0x7c>
 800962a:	4b08      	ldr	r3, [pc, #32]	; (800964c <tcp_update_rcv_ann_wnd+0x90>)
 800962c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8009630:	4907      	ldr	r1, [pc, #28]	; (8009650 <tcp_update_rcv_ann_wnd+0x94>)
 8009632:	4808      	ldr	r0, [pc, #32]	; (8009654 <tcp_update_rcv_ann_wnd+0x98>)
 8009634:	f007 fbb4 	bl	8010da0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009640:	2300      	movs	r3, #0
  }
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	08012d2c 	.word	0x08012d2c
 8009650:	08012e44 	.word	0x08012e44
 8009654:	08012d68 	.word	0x08012d68

08009658 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	7d1b      	ldrb	r3, [r3, #20]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d106      	bne.n	800967a <tcp_recved+0x22>
 800966c:	4b23      	ldr	r3, [pc, #140]	; (80096fc <tcp_recved+0xa4>)
 800966e:	f240 321f 	movw	r2, #799	; 0x31f
 8009672:	4923      	ldr	r1, [pc, #140]	; (8009700 <tcp_recved+0xa8>)
 8009674:	4823      	ldr	r0, [pc, #140]	; (8009704 <tcp_recved+0xac>)
 8009676:	f007 fb93 	bl	8010da0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800967e:	887b      	ldrh	r3, [r7, #2]
 8009680:	4413      	add	r3, r2
 8009682:	b29a      	uxth	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009690:	d904      	bls.n	800969c <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009698:	851a      	strh	r2, [r3, #40]	; 0x28
 800969a:	e017      	b.n	80096cc <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d113      	bne.n	80096cc <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	7d1b      	ldrb	r3, [r3, #20]
 80096a8:	2b07      	cmp	r3, #7
 80096aa:	d003      	beq.n	80096b4 <tcp_recved+0x5c>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7d1b      	ldrb	r3, [r3, #20]
 80096b0:	2b09      	cmp	r3, #9
 80096b2:	d104      	bne.n	80096be <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80096ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80096bc:	e006      	b.n	80096cc <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80096be:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <tcp_recved+0xa4>)
 80096c0:	f240 322d 	movw	r2, #813	; 0x32d
 80096c4:	4910      	ldr	r1, [pc, #64]	; (8009708 <tcp_recved+0xb0>)
 80096c6:	480f      	ldr	r0, [pc, #60]	; (8009704 <tcp_recved+0xac>)
 80096c8:	f007 fb6a 	bl	8010da0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff ff75 	bl	80095bc <tcp_update_rcv_ann_wnd>
 80096d2:	4603      	mov	r3, r0
 80096d4:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80096dc:	db09      	blt.n	80096f2 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7e9b      	ldrb	r3, [r3, #26]
 80096e2:	f043 0302 	orr.w	r3, r3, #2
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f004 f893 	bl	800d818 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	08012d2c 	.word	0x08012d2c
 8009700:	08012e60 	.word	0x08012e60
 8009704:	08012d68 	.word	0x08012d68
 8009708:	08012e88 	.word	0x08012e88

0800970c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8009716:	4b1d      	ldr	r3, [pc, #116]	; (800978c <tcp_new_port+0x80>)
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	b291      	uxth	r1, r2
 800971e:	4a1b      	ldr	r2, [pc, #108]	; (800978c <tcp_new_port+0x80>)
 8009720:	8011      	strh	r1, [r2, #0]
 8009722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009726:	4293      	cmp	r3, r2
 8009728:	d103      	bne.n	8009732 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800972a:	4b18      	ldr	r3, [pc, #96]	; (800978c <tcp_new_port+0x80>)
 800972c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009730:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009732:	2300      	movs	r3, #0
 8009734:	71fb      	strb	r3, [r7, #7]
 8009736:	e01e      	b.n	8009776 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	4a15      	ldr	r2, [pc, #84]	; (8009790 <tcp_new_port+0x84>)
 800973c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	603b      	str	r3, [r7, #0]
 8009744:	e011      	b.n	800976a <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	8ada      	ldrh	r2, [r3, #22]
 800974a:	4b10      	ldr	r3, [pc, #64]	; (800978c <tcp_new_port+0x80>)
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d108      	bne.n	8009764 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009752:	88bb      	ldrh	r3, [r7, #4]
 8009754:	3301      	adds	r3, #1
 8009756:	80bb      	strh	r3, [r7, #4]
 8009758:	88bb      	ldrh	r3, [r7, #4]
 800975a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800975e:	d3da      	bcc.n	8009716 <tcp_new_port+0xa>
          return 0;
 8009760:	2300      	movs	r3, #0
 8009762:	e00d      	b.n	8009780 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	603b      	str	r3, [r7, #0]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1ea      	bne.n	8009746 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	3301      	adds	r3, #1
 8009774:	71fb      	strb	r3, [r7, #7]
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d9dd      	bls.n	8009738 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800977c:	4b03      	ldr	r3, [pc, #12]	; (800978c <tcp_new_port+0x80>)
 800977e:	881b      	ldrh	r3, [r3, #0]
}
 8009780:	4618      	mov	r0, r3
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	2000009e 	.word	0x2000009e
 8009790:	08014170 	.word	0x08014170

08009794 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009794:	b5b0      	push	{r4, r5, r7, lr}
 8009796:	b08c      	sub	sp, #48	; 0x30
 8009798:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800979e:	4b97      	ldr	r3, [pc, #604]	; (80099fc <tcp_slowtmr+0x268>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3301      	adds	r3, #1
 80097a4:	4a95      	ldr	r2, [pc, #596]	; (80099fc <tcp_slowtmr+0x268>)
 80097a6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80097a8:	4b95      	ldr	r3, [pc, #596]	; (8009a00 <tcp_slowtmr+0x26c>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	3301      	adds	r3, #1
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	4b93      	ldr	r3, [pc, #588]	; (8009a00 <tcp_slowtmr+0x26c>)
 80097b2:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80097b4:	2300      	movs	r3, #0
 80097b6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80097b8:	4b92      	ldr	r3, [pc, #584]	; (8009a04 <tcp_slowtmr+0x270>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80097be:	e227      	b.n	8009c10 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	7d1b      	ldrb	r3, [r3, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <tcp_slowtmr+0x42>
 80097c8:	4b8f      	ldr	r3, [pc, #572]	; (8009a08 <tcp_slowtmr+0x274>)
 80097ca:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80097ce:	498f      	ldr	r1, [pc, #572]	; (8009a0c <tcp_slowtmr+0x278>)
 80097d0:	488f      	ldr	r0, [pc, #572]	; (8009a10 <tcp_slowtmr+0x27c>)
 80097d2:	f007 fae5 	bl	8010da0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	7d1b      	ldrb	r3, [r3, #20]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d106      	bne.n	80097ec <tcp_slowtmr+0x58>
 80097de:	4b8a      	ldr	r3, [pc, #552]	; (8009a08 <tcp_slowtmr+0x274>)
 80097e0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80097e4:	498b      	ldr	r1, [pc, #556]	; (8009a14 <tcp_slowtmr+0x280>)
 80097e6:	488a      	ldr	r0, [pc, #552]	; (8009a10 <tcp_slowtmr+0x27c>)
 80097e8:	f007 fada 	bl	8010da0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	7d1b      	ldrb	r3, [r3, #20]
 80097f0:	2b0a      	cmp	r3, #10
 80097f2:	d106      	bne.n	8009802 <tcp_slowtmr+0x6e>
 80097f4:	4b84      	ldr	r3, [pc, #528]	; (8009a08 <tcp_slowtmr+0x274>)
 80097f6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80097fa:	4987      	ldr	r1, [pc, #540]	; (8009a18 <tcp_slowtmr+0x284>)
 80097fc:	4884      	ldr	r0, [pc, #528]	; (8009a10 <tcp_slowtmr+0x27c>)
 80097fe:	f007 facf 	bl	8010da0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009804:	7f5a      	ldrb	r2, [r3, #29]
 8009806:	4b7e      	ldr	r3, [pc, #504]	; (8009a00 <tcp_slowtmr+0x26c>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d103      	bne.n	8009816 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8009814:	e1fc      	b.n	8009c10 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009816:	4b7a      	ldr	r3, [pc, #488]	; (8009a00 <tcp_slowtmr+0x26c>)
 8009818:	781a      	ldrb	r2, [r3, #0]
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	7d1b      	ldrb	r3, [r3, #20]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d108      	bne.n	8009840 <tcp_slowtmr+0xac>
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009834:	2b05      	cmp	r3, #5
 8009836:	d903      	bls.n	8009840 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8009838:	7ffb      	ldrb	r3, [r7, #31]
 800983a:	3301      	adds	r3, #1
 800983c:	77fb      	strb	r3, [r7, #31]
 800983e:	e0a2      	b.n	8009986 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009846:	2b0b      	cmp	r3, #11
 8009848:	d903      	bls.n	8009852 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800984a:	7ffb      	ldrb	r3, [r7, #31]
 800984c:	3301      	adds	r3, #1
 800984e:	77fb      	strb	r3, [r7, #31]
 8009850:	e099      	b.n	8009986 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009858:	2b00      	cmp	r3, #0
 800985a:	d032      	beq.n	80098c2 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009862:	3b01      	subs	r3, #1
 8009864:	4a6d      	ldr	r2, [pc, #436]	; (8009a1c <tcp_slowtmr+0x288>)
 8009866:	5cd3      	ldrb	r3, [r2, r3]
 8009868:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009870:	7cfa      	ldrb	r2, [r7, #19]
 8009872:	429a      	cmp	r2, r3
 8009874:	d907      	bls.n	8009886 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800987c:	3301      	adds	r3, #1
 800987e:	b2da      	uxtb	r2, r3
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800988c:	7cfa      	ldrb	r2, [r7, #19]
 800988e:	429a      	cmp	r2, r3
 8009890:	d879      	bhi.n	8009986 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8009892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009894:	f004 fbcb 	bl	800e02e <tcp_zero_window_probe>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d173      	bne.n	8009986 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80098ac:	2b06      	cmp	r3, #6
 80098ae:	d86a      	bhi.n	8009986 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80098b6:	3301      	adds	r3, #1
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80098c0:	e061      	b.n	8009986 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	db08      	blt.n	80098de <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3301      	adds	r3, #1
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	b21a      	sxth	r2, r3
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d04f      	beq.n	8009986 <tcp_slowtmr+0x1f2>
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80098f2:	429a      	cmp	r2, r3
 80098f4:	db47      	blt.n	8009986 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	7d1b      	ldrb	r3, [r3, #20]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d018      	beq.n	8009930 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009904:	2b0c      	cmp	r3, #12
 8009906:	bf28      	it	cs
 8009908:	230c      	movcs	r3, #12
 800990a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009912:	10db      	asrs	r3, r3, #3
 8009914:	b21b      	sxth	r3, r3
 8009916:	461a      	mov	r2, r3
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800991e:	4413      	add	r3, r2
 8009920:	7dfa      	ldrb	r2, [r7, #23]
 8009922:	493f      	ldr	r1, [pc, #252]	; (8009a20 <tcp_slowtmr+0x28c>)
 8009924:	5c8a      	ldrb	r2, [r1, r2]
 8009926:	4093      	lsls	r3, r2
 8009928:	b21a      	sxth	r2, r3
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	2200      	movs	r2, #0
 8009934:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009942:	4293      	cmp	r3, r2
 8009944:	bf28      	it	cs
 8009946:	4613      	movcs	r3, r2
 8009948:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800994a:	8abb      	ldrh	r3, [r7, #20]
 800994c:	085b      	lsrs	r3, r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	b29b      	uxth	r3, r3
 8009964:	429a      	cmp	r2, r3
 8009966:	d206      	bcs.n	8009976 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	b29a      	uxth	r2, r3
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8009980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009982:	f004 fa43 	bl	800de0c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	7d1b      	ldrb	r3, [r3, #20]
 800998a:	2b06      	cmp	r3, #6
 800998c:	d10f      	bne.n	80099ae <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	7e9b      	ldrb	r3, [r3, #26]
 8009992:	f003 0310 	and.w	r3, r3, #16
 8009996:	2b00      	cmp	r3, #0
 8009998:	d009      	beq.n	80099ae <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800999a:	4b18      	ldr	r3, [pc, #96]	; (80099fc <tcp_slowtmr+0x268>)
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	2b28      	cmp	r3, #40	; 0x28
 80099a6:	d902      	bls.n	80099ae <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80099a8:	7ffb      	ldrb	r3, [r7, #31]
 80099aa:	3301      	adds	r3, #1
 80099ac:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	7a1b      	ldrb	r3, [r3, #8]
 80099b2:	f003 0308 	and.w	r3, r3, #8
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d05d      	beq.n	8009a76 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80099be:	2b04      	cmp	r3, #4
 80099c0:	d003      	beq.n	80099ca <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80099c6:	2b07      	cmp	r3, #7
 80099c8:	d155      	bne.n	8009a76 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099ca:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <tcp_slowtmr+0x268>)
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099da:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80099de:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80099e2:	4910      	ldr	r1, [pc, #64]	; (8009a24 <tcp_slowtmr+0x290>)
 80099e4:	fba1 1303 	umull	r1, r3, r1, r3
 80099e8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d91c      	bls.n	8009a28 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80099ee:	7ffb      	ldrb	r3, [r7, #31]
 80099f0:	3301      	adds	r3, #1
 80099f2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 80099f4:	7fbb      	ldrb	r3, [r7, #30]
 80099f6:	3301      	adds	r3, #1
 80099f8:	77bb      	strb	r3, [r7, #30]
 80099fa:	e03c      	b.n	8009a76 <tcp_slowtmr+0x2e2>
 80099fc:	20006fec 	.word	0x20006fec
 8009a00:	20007002 	.word	0x20007002
 8009a04:	20006ff8 	.word	0x20006ff8
 8009a08:	08012d2c 	.word	0x08012d2c
 8009a0c:	08012edc 	.word	0x08012edc
 8009a10:	08012d68 	.word	0x08012d68
 8009a14:	08012f08 	.word	0x08012f08
 8009a18:	08012f34 	.word	0x08012f34
 8009a1c:	08014168 	.word	0x08014168
 8009a20:	08014158 	.word	0x08014158
 8009a24:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a28:	4b97      	ldr	r3, [pc, #604]	; (8009c88 <tcp_slowtmr+0x4f4>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009a3e:	4618      	mov	r0, r3
 8009a40:	4b92      	ldr	r3, [pc, #584]	; (8009c8c <tcp_slowtmr+0x4f8>)
 8009a42:	fb00 f303 	mul.w	r3, r0, r3
 8009a46:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8009a48:	4991      	ldr	r1, [pc, #580]	; (8009c90 <tcp_slowtmr+0x4fc>)
 8009a4a:	fba1 1303 	umull	r1, r3, r1, r3
 8009a4e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d910      	bls.n	8009a76 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8009a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a56:	f004 faad 	bl	800dfb4 <tcp_keepalive>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8009a5e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d107      	bne.n	8009a76 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d016      	beq.n	8009aac <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8009a7e:	4b82      	ldr	r3, [pc, #520]	; (8009c88 <tcp_slowtmr+0x4f4>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	1ad2      	subs	r2, r2, r3
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009a8e:	4619      	mov	r1, r3
 8009a90:	460b      	mov	r3, r1
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	440b      	add	r3, r1
 8009a96:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d307      	bcc.n	8009aac <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 fa06 	bl	8009eb2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	7d1b      	ldrb	r3, [r3, #20]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d109      	bne.n	8009ac8 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ab4:	4b74      	ldr	r3, [pc, #464]	; (8009c88 <tcp_slowtmr+0x4f4>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	2b28      	cmp	r3, #40	; 0x28
 8009ac0:	d902      	bls.n	8009ac8 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009ac2:	7ffb      	ldrb	r3, [r7, #31]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	7d1b      	ldrb	r3, [r3, #20]
 8009acc:	2b09      	cmp	r3, #9
 8009ace:	d109      	bne.n	8009ae4 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009ad0:	4b6d      	ldr	r3, [pc, #436]	; (8009c88 <tcp_slowtmr+0x4f4>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2bf0      	cmp	r3, #240	; 0xf0
 8009adc:	d902      	bls.n	8009ae4 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8009ade:	7ffb      	ldrb	r3, [r7, #31]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009ae4:	7ffb      	ldrb	r3, [r7, #31]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d05d      	beq.n	8009ba6 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009af0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009af4:	f000 fc50 	bl	800a398 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d010      	beq.n	8009b20 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009afe:	4b65      	ldr	r3, [pc, #404]	; (8009c94 <tcp_slowtmr+0x500>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d106      	bne.n	8009b16 <tcp_slowtmr+0x382>
 8009b08:	4b63      	ldr	r3, [pc, #396]	; (8009c98 <tcp_slowtmr+0x504>)
 8009b0a:	f240 4289 	movw	r2, #1161	; 0x489
 8009b0e:	4963      	ldr	r1, [pc, #396]	; (8009c9c <tcp_slowtmr+0x508>)
 8009b10:	4863      	ldr	r0, [pc, #396]	; (8009ca0 <tcp_slowtmr+0x50c>)
 8009b12:	f007 f945 	bl	8010da0 <iprintf>
        prev->next = pcb->next;
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	60da      	str	r2, [r3, #12]
 8009b1e:	e00f      	b.n	8009b40 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009b20:	4b5c      	ldr	r3, [pc, #368]	; (8009c94 <tcp_slowtmr+0x500>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d006      	beq.n	8009b38 <tcp_slowtmr+0x3a4>
 8009b2a:	4b5b      	ldr	r3, [pc, #364]	; (8009c98 <tcp_slowtmr+0x504>)
 8009b2c:	f240 428d 	movw	r2, #1165	; 0x48d
 8009b30:	495c      	ldr	r1, [pc, #368]	; (8009ca4 <tcp_slowtmr+0x510>)
 8009b32:	485b      	ldr	r0, [pc, #364]	; (8009ca0 <tcp_slowtmr+0x50c>)
 8009b34:	f007 f934 	bl	8010da0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	4a55      	ldr	r2, [pc, #340]	; (8009c94 <tcp_slowtmr+0x500>)
 8009b3e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009b40:	7fbb      	ldrb	r3, [r7, #30]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d010      	beq.n	8009b68 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009b4e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	1d1d      	adds	r5, r3, #4
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	8adb      	ldrh	r3, [r3, #22]
 8009b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5a:	8b12      	ldrh	r2, [r2, #24]
 8009b5c:	9201      	str	r2, [sp, #4]
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	462b      	mov	r3, r5
 8009b62:	4622      	mov	r2, r4
 8009b64:	f004 f8dc 	bl	800dd20 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	7d1b      	ldrb	r3, [r3, #20]
 8009b72:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	2001      	movs	r0, #1
 8009b82:	f7fe f987 	bl	8007e94 <memp_free>

      tcp_active_pcbs_changed = 0;
 8009b86:	4b48      	ldr	r3, [pc, #288]	; (8009ca8 <tcp_slowtmr+0x514>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d004      	beq.n	8009b9c <tcp_slowtmr+0x408>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f06f 010c 	mvn.w	r1, #12
 8009b98:	68b8      	ldr	r0, [r7, #8]
 8009b9a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009b9c:	4b42      	ldr	r3, [pc, #264]	; (8009ca8 <tcp_slowtmr+0x514>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d035      	beq.n	8009c10 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8009ba4:	e606      	b.n	80097b4 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	7edb      	ldrb	r3, [r3, #27]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	7eda      	ldrb	r2, [r3, #27]
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	7f1b      	ldrb	r3, [r3, #28]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d323      	bcc.n	8009c10 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009bce:	4b36      	ldr	r3, [pc, #216]	; (8009ca8 <tcp_slowtmr+0x514>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <tcp_slowtmr+0x460>
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be4:	6a3a      	ldr	r2, [r7, #32]
 8009be6:	6912      	ldr	r2, [r2, #16]
 8009be8:	6a39      	ldr	r1, [r7, #32]
 8009bea:	4610      	mov	r0, r2
 8009bec:	4798      	blx	r3
 8009bee:	4603      	mov	r3, r0
 8009bf0:	777b      	strb	r3, [r7, #29]
 8009bf2:	e001      	b.n	8009bf8 <tcp_slowtmr+0x464>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8009bf8:	4b2b      	ldr	r3, [pc, #172]	; (8009ca8 <tcp_slowtmr+0x514>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d000      	beq.n	8009c02 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8009c00:	e5d8      	b.n	80097b4 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009c02:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d102      	bne.n	8009c10 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8009c0a:	6a38      	ldr	r0, [r7, #32]
 8009c0c:	f003 fe04 	bl	800d818 <tcp_output>
  while (pcb != NULL) {
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f47f add4 	bne.w	80097c0 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8009c1c:	4b23      	ldr	r3, [pc, #140]	; (8009cac <tcp_slowtmr+0x518>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8009c22:	e068      	b.n	8009cf6 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	7d1b      	ldrb	r3, [r3, #20]
 8009c28:	2b0a      	cmp	r3, #10
 8009c2a:	d006      	beq.n	8009c3a <tcp_slowtmr+0x4a6>
 8009c2c:	4b1a      	ldr	r3, [pc, #104]	; (8009c98 <tcp_slowtmr+0x504>)
 8009c2e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8009c32:	491f      	ldr	r1, [pc, #124]	; (8009cb0 <tcp_slowtmr+0x51c>)
 8009c34:	481a      	ldr	r0, [pc, #104]	; (8009ca0 <tcp_slowtmr+0x50c>)
 8009c36:	f007 f8b3 	bl	8010da0 <iprintf>
    pcb_remove = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009c3e:	4b12      	ldr	r3, [pc, #72]	; (8009c88 <tcp_slowtmr+0x4f4>)
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2bf0      	cmp	r3, #240	; 0xf0
 8009c4a:	d902      	bls.n	8009c52 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8009c4c:	7ffb      	ldrb	r3, [r7, #31]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009c52:	7ffb      	ldrb	r3, [r7, #31]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d049      	beq.n	8009cec <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c5a:	f000 fb9d 	bl	800a398 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d029      	beq.n	8009cb8 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009c64:	4b11      	ldr	r3, [pc, #68]	; (8009cac <tcp_slowtmr+0x518>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d106      	bne.n	8009c7c <tcp_slowtmr+0x4e8>
 8009c6e:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <tcp_slowtmr+0x504>)
 8009c70:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8009c74:	490f      	ldr	r1, [pc, #60]	; (8009cb4 <tcp_slowtmr+0x520>)
 8009c76:	480a      	ldr	r0, [pc, #40]	; (8009ca0 <tcp_slowtmr+0x50c>)
 8009c78:	f007 f892 	bl	8010da0 <iprintf>
        prev->next = pcb->next;
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	60da      	str	r2, [r3, #12]
 8009c84:	e028      	b.n	8009cd8 <tcp_slowtmr+0x544>
 8009c86:	bf00      	nop
 8009c88:	20006fec 	.word	0x20006fec
 8009c8c:	000124f8 	.word	0x000124f8
 8009c90:	10624dd3 	.word	0x10624dd3
 8009c94:	20006ff8 	.word	0x20006ff8
 8009c98:	08012d2c 	.word	0x08012d2c
 8009c9c:	08012f64 	.word	0x08012f64
 8009ca0:	08012d68 	.word	0x08012d68
 8009ca4:	08012f90 	.word	0x08012f90
 8009ca8:	20007000 	.word	0x20007000
 8009cac:	20006ffc 	.word	0x20006ffc
 8009cb0:	08012fbc 	.word	0x08012fbc
 8009cb4:	08012fec 	.word	0x08012fec
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009cb8:	4b13      	ldr	r3, [pc, #76]	; (8009d08 <tcp_slowtmr+0x574>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d006      	beq.n	8009cd0 <tcp_slowtmr+0x53c>
 8009cc2:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <tcp_slowtmr+0x578>)
 8009cc4:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8009cc8:	4911      	ldr	r1, [pc, #68]	; (8009d10 <tcp_slowtmr+0x57c>)
 8009cca:	4812      	ldr	r0, [pc, #72]	; (8009d14 <tcp_slowtmr+0x580>)
 8009ccc:	f007 f868 	bl	8010da0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	4a0c      	ldr	r2, [pc, #48]	; (8009d08 <tcp_slowtmr+0x574>)
 8009cd6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8009ce2:	69b9      	ldr	r1, [r7, #24]
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	f7fe f8d5 	bl	8007e94 <memp_free>
 8009cea:	e004      	b.n	8009cf6 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d193      	bne.n	8009c24 <tcp_slowtmr+0x490>
    }
  }
}
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	3728      	adds	r7, #40	; 0x28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bdb0      	pop	{r4, r5, r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20006ffc 	.word	0x20006ffc
 8009d0c:	08012d2c 	.word	0x08012d2c
 8009d10:	08013014 	.word	0x08013014
 8009d14:	08012d68 	.word	0x08012d68

08009d18 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009d1e:	4b2d      	ldr	r3, [pc, #180]	; (8009dd4 <tcp_fasttmr+0xbc>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	4b2b      	ldr	r3, [pc, #172]	; (8009dd4 <tcp_fasttmr+0xbc>)
 8009d28:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009d2a:	4b2b      	ldr	r3, [pc, #172]	; (8009dd8 <tcp_fasttmr+0xc0>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009d30:	e048      	b.n	8009dc4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	7f5a      	ldrb	r2, [r3, #29]
 8009d36:	4b27      	ldr	r3, [pc, #156]	; (8009dd4 <tcp_fasttmr+0xbc>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d03f      	beq.n	8009dbe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009d3e:	4b25      	ldr	r3, [pc, #148]	; (8009dd4 <tcp_fasttmr+0xbc>)
 8009d40:	781a      	ldrb	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	7e9b      	ldrb	r3, [r3, #26]
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d010      	beq.n	8009d74 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	7e9b      	ldrb	r3, [r3, #26]
 8009d56:	f043 0302 	orr.w	r3, r3, #2
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f003 fd59 	bl	800d818 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	7e9b      	ldrb	r3, [r3, #26]
 8009d6a:	f023 0303 	bic.w	r3, r3, #3
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	7e9b      	ldrb	r3, [r3, #26]
 8009d78:	f003 0308 	and.w	r3, r3, #8
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d009      	beq.n	8009d94 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	7e9b      	ldrb	r3, [r3, #26]
 8009d84:	f023 0308 	bic.w	r3, r3, #8
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7ff f988 	bl	80090a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009da2:	4b0e      	ldr	r3, [pc, #56]	; (8009ddc <tcp_fasttmr+0xc4>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f819 	bl	8009de0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009dae:	4b0b      	ldr	r3, [pc, #44]	; (8009ddc <tcp_fasttmr+0xc4>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d000      	beq.n	8009db8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009db6:	e7b8      	b.n	8009d2a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	607b      	str	r3, [r7, #4]
 8009dbc:	e002      	b.n	8009dc4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1b3      	bne.n	8009d32 <tcp_fasttmr+0x1a>
    }
  }
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	20007002 	.word	0x20007002
 8009dd8:	20006ff8 	.word	0x20006ff8
 8009ddc:	20007000 	.word	0x20007000

08009de0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009de0:	b590      	push	{r4, r7, lr}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dec:	7b5b      	ldrb	r3, [r3, #13]
 8009dee:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00b      	beq.n	8009e1e <tcp_process_refused_data+0x3e>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6918      	ldr	r0, [r3, #16]
 8009e10:	2300      	movs	r3, #0
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	6879      	ldr	r1, [r7, #4]
 8009e16:	47a0      	blx	r4
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73fb      	strb	r3, [r7, #15]
 8009e1c:	e007      	b.n	8009e2e <tcp_process_refused_data+0x4e>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	2000      	movs	r0, #0
 8009e26:	f000 f89c 	bl	8009f62 <tcp_recv_null>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d12a      	bne.n	8009e8c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	f003 0320 	and.w	r3, r3, #32
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d033      	beq.n	8009ea8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e44:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009e48:	d005      	beq.n	8009e56 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e4e:	3301      	adds	r3, #1
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <tcp_process_refused_data+0x98>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6918      	ldr	r0, [r3, #16]
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	47a0      	blx	r4
 8009e72:	4603      	mov	r3, r0
 8009e74:	73fb      	strb	r3, [r7, #15]
 8009e76:	e001      	b.n	8009e7c <tcp_process_refused_data+0x9c>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e80:	f113 0f0d 	cmn.w	r3, #13
 8009e84:	d110      	bne.n	8009ea8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8009e86:	f06f 030c 	mvn.w	r3, #12
 8009e8a:	e00e      	b.n	8009eaa <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8009e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e90:	f113 0f0d 	cmn.w	r3, #13
 8009e94:	d102      	bne.n	8009e9c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009e96:	f06f 030c 	mvn.w	r3, #12
 8009e9a:	e006      	b.n	8009eaa <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8009ea2:	f06f 0304 	mvn.w	r3, #4
 8009ea6:	e000      	b.n	8009eaa <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd90      	pop	{r4, r7, pc}

08009eb2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009eba:	e007      	b.n	8009ecc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f80a 	bl	8009edc <tcp_seg_free>
    seg = next;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f4      	bne.n	8009ebc <tcp_segs_free+0xa>
  }
}
 8009ed2:	bf00      	nop
 8009ed4:	bf00      	nop
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00c      	beq.n	8009f04 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d004      	beq.n	8009efc <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fcfc 	bl	80088f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	2003      	movs	r0, #3
 8009f00:	f7fd ffc8 	bl	8007e94 <memp_free>
  }
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	78fa      	ldrb	r2, [r7, #3]
 8009f1c:	755a      	strb	r2, [r3, #21]
}
 8009f1e:	bf00      	nop
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009f32:	2003      	movs	r0, #3
 8009f34:	f7fd ff62 	bl	8007dfc <memp_malloc>
 8009f38:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d101      	bne.n	8009f44 <tcp_seg_copy+0x1a>
    return NULL;
 8009f40:	2300      	movs	r3, #0
 8009f42:	e00a      	b.n	8009f5a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009f44:	2210      	movs	r2, #16
 8009f46:	6879      	ldr	r1, [r7, #4]
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f006 fe33 	bl	8010bb4 <memcpy>
  pbuf_ref(cseg->p);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe fd7a 	bl	8008a4c <pbuf_ref>
  return cseg;
 8009f58:	68fb      	ldr	r3, [r7, #12]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	607a      	str	r2, [r7, #4]
 8009f6e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d009      	beq.n	8009f8a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	891b      	ldrh	r3, [r3, #8]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	68b8      	ldr	r0, [r7, #8]
 8009f7e:	f7ff fb6b 	bl	8009658 <tcp_recved>
    pbuf_free(p);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7fe fcb6 	bl	80088f4 <pbuf_free>
 8009f88:	e008      	b.n	8009f9c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8009f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d104      	bne.n	8009f9c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8009f92:	68b8      	ldr	r0, [r7, #8]
 8009f94:	f7ff f8f0 	bl	8009178 <tcp_close>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	e000      	b.n	8009f9e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	db01      	blt.n	8009fbe <tcp_kill_prio+0x16>
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	e000      	b.n	8009fc0 <tcp_kill_prio+0x18>
 8009fbe:	237f      	movs	r3, #127	; 0x7f
 8009fc0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fca:	4b16      	ldr	r3, [pc, #88]	; (800a024 <tcp_kill_prio+0x7c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	e01a      	b.n	800a008 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	7d5b      	ldrb	r3, [r3, #21]
 8009fd6:	7afa      	ldrb	r2, [r7, #11]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d312      	bcc.n	800a002 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009fdc:	4b12      	ldr	r3, [pc, #72]	; (800a028 <tcp_kill_prio+0x80>)
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d80a      	bhi.n	800a002 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8009fec:	4b0e      	ldr	r3, [pc, #56]	; (800a028 <tcp_kill_prio+0x80>)
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	6a1b      	ldr	r3, [r3, #32]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	7d5b      	ldrb	r3, [r3, #21]
 800a000:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	617b      	str	r3, [r7, #20]
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e1      	bne.n	8009fd2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a014:	6938      	ldr	r0, [r7, #16]
 800a016:	f7ff f979 	bl	800930c <tcp_abort>
  }
}
 800a01a:	bf00      	nop
 800a01c:	3718      	adds	r7, #24
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	20006ff8 	.word	0x20006ff8
 800a028:	20006fec 	.word	0x20006fec

0800a02c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	2b08      	cmp	r3, #8
 800a03a:	d009      	beq.n	800a050 <tcp_kill_state+0x24>
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	2b09      	cmp	r3, #9
 800a040:	d006      	beq.n	800a050 <tcp_kill_state+0x24>
 800a042:	4b1a      	ldr	r3, [pc, #104]	; (800a0ac <tcp_kill_state+0x80>)
 800a044:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a048:	4919      	ldr	r1, [pc, #100]	; (800a0b0 <tcp_kill_state+0x84>)
 800a04a:	481a      	ldr	r0, [pc, #104]	; (800a0b4 <tcp_kill_state+0x88>)
 800a04c:	f006 fea8 	bl	8010da0 <iprintf>

  inactivity = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a054:	2300      	movs	r3, #0
 800a056:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a058:	4b17      	ldr	r3, [pc, #92]	; (800a0b8 <tcp_kill_state+0x8c>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	617b      	str	r3, [r7, #20]
 800a05e:	e017      	b.n	800a090 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	7d1b      	ldrb	r3, [r3, #20]
 800a064:	79fa      	ldrb	r2, [r7, #7]
 800a066:	429a      	cmp	r2, r3
 800a068:	d10f      	bne.n	800a08a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a06a:	4b14      	ldr	r3, [pc, #80]	; (800a0bc <tcp_kill_state+0x90>)
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	429a      	cmp	r2, r3
 800a078:	d807      	bhi.n	800a08a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a07a:	4b10      	ldr	r3, [pc, #64]	; (800a0bc <tcp_kill_state+0x90>)
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e4      	bne.n	800a060 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a09c:	2100      	movs	r1, #0
 800a09e:	6938      	ldr	r0, [r7, #16]
 800a0a0:	f7ff f882 	bl	80091a8 <tcp_abandon>
  }
}
 800a0a4:	bf00      	nop
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	08012d2c 	.word	0x08012d2c
 800a0b0:	0801303c 	.word	0x0801303c
 800a0b4:	08012d68 	.word	0x08012d68
 800a0b8:	20006ff8 	.word	0x20006ff8
 800a0bc:	20006fec 	.word	0x20006fec

0800a0c0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0ce:	4b12      	ldr	r3, [pc, #72]	; (800a118 <tcp_kill_timewait+0x58>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	e012      	b.n	800a0fc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a0d6:	4b11      	ldr	r3, [pc, #68]	; (800a11c <tcp_kill_timewait+0x5c>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d807      	bhi.n	800a0f6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a0e6:	4b0d      	ldr	r3, [pc, #52]	; (800a11c <tcp_kill_timewait+0x5c>)
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1e9      	bne.n	800a0d6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a108:	68b8      	ldr	r0, [r7, #8]
 800a10a:	f7ff f8ff 	bl	800930c <tcp_abort>
  }
}
 800a10e:	bf00      	nop
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20006ffc 	.word	0x20006ffc
 800a11c:	20006fec 	.word	0x20006fec

0800a120 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	4603      	mov	r3, r0
 800a128:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a12a:	2001      	movs	r0, #1
 800a12c:	f7fd fe66 	bl	8007dfc <memp_malloc>
 800a130:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d124      	bne.n	800a182 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a138:	f7ff ffc2 	bl	800a0c0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a13c:	2001      	movs	r0, #1
 800a13e:	f7fd fe5d 	bl	8007dfc <memp_malloc>
 800a142:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d11b      	bne.n	800a182 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a14a:	2009      	movs	r0, #9
 800a14c:	f7ff ff6e 	bl	800a02c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a150:	2001      	movs	r0, #1
 800a152:	f7fd fe53 	bl	8007dfc <memp_malloc>
 800a156:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d111      	bne.n	800a182 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a15e:	2008      	movs	r0, #8
 800a160:	f7ff ff64 	bl	800a02c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a164:	2001      	movs	r0, #1
 800a166:	f7fd fe49 	bl	8007dfc <memp_malloc>
 800a16a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d107      	bne.n	800a182 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff ff17 	bl	8009fa8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a17a:	2001      	movs	r0, #1
 800a17c:	f7fd fe3e 	bl	8007dfc <memp_malloc>
 800a180:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d03f      	beq.n	800a208 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a188:	2298      	movs	r2, #152	; 0x98
 800a18a:	2100      	movs	r1, #0
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f006 fd1f 	bl	8010bd0 <memset>
    pcb->prio = prio;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	79fa      	ldrb	r2, [r7, #7]
 800a196:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a19e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a1a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	22ff      	movs	r2, #255	; 0xff
 800a1b6:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a1be:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2206      	movs	r2, #6
 800a1c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2206      	movs	r2, #6
 800a1cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1d4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a1de:	4b0d      	ldr	r3, [pc, #52]	; (800a214 <tcp_alloc+0xf4>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a1e6:	4b0c      	ldr	r3, [pc, #48]	; (800a218 <tcp_alloc+0xf8>)
 800a1e8:	781a      	ldrb	r2, [r3, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a1f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4a08      	ldr	r2, [pc, #32]	; (800a21c <tcp_alloc+0xfc>)
 800a1fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4a07      	ldr	r2, [pc, #28]	; (800a220 <tcp_alloc+0x100>)
 800a204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a208:	68fb      	ldr	r3, [r7, #12]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20006fec 	.word	0x20006fec
 800a218:	20007002 	.word	0x20007002
 800a21c:	08009f63 	.word	0x08009f63
 800a220:	006ddd00 	.word	0x006ddd00

0800a224 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800a228:	2040      	movs	r0, #64	; 0x40
 800a22a:	f7ff ff79 	bl	800a120 <tcp_alloc>
 800a22e:	4603      	mov	r3, r0
}
 800a230:	4618      	mov	r0, r3
 800a232:	bd80      	pop	{r7, pc}

0800a234 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	611a      	str	r2, [r3, #16]
  }
}
 800a24a:	bf00      	nop
 800a24c:	370c      	adds	r7, #12
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
	...

0800a258 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00e      	beq.n	800a286 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	7d1b      	ldrb	r3, [r3, #20]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d106      	bne.n	800a27e <tcp_recv+0x26>
 800a270:	4b07      	ldr	r3, [pc, #28]	; (800a290 <tcp_recv+0x38>)
 800a272:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800a276:	4907      	ldr	r1, [pc, #28]	; (800a294 <tcp_recv+0x3c>)
 800a278:	4807      	ldr	r0, [pc, #28]	; (800a298 <tcp_recv+0x40>)
 800a27a:	f006 fd91 	bl	8010da0 <iprintf>
    pcb->recv = recv;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800a286:	bf00      	nop
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	08012d2c 	.word	0x08012d2c
 800a294:	0801304c 	.word	0x0801304c
 800a298:	08012d68 	.word	0x08012d68

0800a29c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00d      	beq.n	800a2c8 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	7d1b      	ldrb	r3, [r3, #20]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d106      	bne.n	800a2c2 <tcp_sent+0x26>
 800a2b4:	4b06      	ldr	r3, [pc, #24]	; (800a2d0 <tcp_sent+0x34>)
 800a2b6:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800a2ba:	4906      	ldr	r1, [pc, #24]	; (800a2d4 <tcp_sent+0x38>)
 800a2bc:	4806      	ldr	r0, [pc, #24]	; (800a2d8 <tcp_sent+0x3c>)
 800a2be:	f006 fd6f 	bl	8010da0 <iprintf>
    pcb->sent = sent;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	08012d2c 	.word	0x08012d2c
 800a2d4:	08013074 	.word	0x08013074
 800a2d8:	08012d68 	.word	0x08012d68

0800a2dc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00e      	beq.n	800a30a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	7d1b      	ldrb	r3, [r3, #20]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d106      	bne.n	800a302 <tcp_err+0x26>
 800a2f4:	4b07      	ldr	r3, [pc, #28]	; (800a314 <tcp_err+0x38>)
 800a2f6:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800a2fa:	4907      	ldr	r1, [pc, #28]	; (800a318 <tcp_err+0x3c>)
 800a2fc:	4807      	ldr	r0, [pc, #28]	; (800a31c <tcp_err+0x40>)
 800a2fe:	f006 fd4f 	bl	8010da0 <iprintf>
    pcb->errf = err;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	08012d2c 	.word	0x08012d2c
 800a318:	0801309c 	.word	0x0801309c
 800a31c:	08012d68 	.word	0x08012d68

0800a320 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d008      	beq.n	800a342 <tcp_accept+0x22>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	7d1b      	ldrb	r3, [r3, #20]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d104      	bne.n	800a342 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	619a      	str	r2, [r3, #24]
  }
}
 800a342:	bf00      	nop
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
	...

0800a350 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	4613      	mov	r3, r2
 800a35c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	7d1b      	ldrb	r3, [r3, #20]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d106      	bne.n	800a374 <tcp_poll+0x24>
 800a366:	4b09      	ldr	r3, [pc, #36]	; (800a38c <tcp_poll+0x3c>)
 800a368:	f240 7203 	movw	r2, #1795	; 0x703
 800a36c:	4908      	ldr	r1, [pc, #32]	; (800a390 <tcp_poll+0x40>)
 800a36e:	4809      	ldr	r0, [pc, #36]	; (800a394 <tcp_poll+0x44>)
 800a370:	f006 fd16 	bl	8010da0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	79fa      	ldrb	r2, [r7, #7]
 800a380:	771a      	strb	r2, [r3, #28]
}
 800a382:	bf00      	nop
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	08012d2c 	.word	0x08012d2c
 800a390:	080130c4 	.word	0x080130c4
 800a394:	08012d68 	.word	0x08012d68

0800a398 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	7d1b      	ldrb	r3, [r3, #20]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d034      	beq.n	800a412 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a3ac:	2b0a      	cmp	r3, #10
 800a3ae:	d030      	beq.n	800a412 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d02c      	beq.n	800a412 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d007      	beq.n	800a3d0 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe fa95 	bl	80088f4 <pbuf_free>
      pcb->refused_data = NULL;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7ff fd6c 	bl	8009eb2 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3e6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff fd60 	bl	8009eb2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff fd5b 	bl	8009eb2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	669a      	str	r2, [r3, #104]	; 0x68
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800a412:	bf00      	nop
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d105      	bne.n	800a43c <tcp_pcb_remove+0x20>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	e013      	b.n	800a464 <tcp_pcb_remove+0x48>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60fb      	str	r3, [r7, #12]
 800a442:	e00c      	b.n	800a45e <tcp_pcb_remove+0x42>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d104      	bne.n	800a458 <tcp_pcb_remove+0x3c>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	68da      	ldr	r2, [r3, #12]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	60da      	str	r2, [r3, #12]
 800a456:	e005      	b.n	800a464 <tcp_pcb_remove+0x48>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	60fb      	str	r3, [r7, #12]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1ef      	bne.n	800a444 <tcp_pcb_remove+0x28>
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2200      	movs	r2, #0
 800a468:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a46a:	6838      	ldr	r0, [r7, #0]
 800a46c:	f7ff ff94 	bl	800a398 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	7d1b      	ldrb	r3, [r3, #20]
 800a474:	2b0a      	cmp	r3, #10
 800a476:	d013      	beq.n	800a4a0 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d00f      	beq.n	800a4a0 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	7e9b      	ldrb	r3, [r3, #26]
 800a484:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d009      	beq.n	800a4a0 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	7e9b      	ldrb	r3, [r3, #26]
 800a490:	f043 0302 	orr.w	r3, r3, #2
 800a494:	b2da      	uxtb	r2, r3
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a49a:	6838      	ldr	r0, [r7, #0]
 800a49c:	f003 f9bc 	bl	800d818 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	7d1b      	ldrb	r3, [r3, #20]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d020      	beq.n	800a4ea <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d006      	beq.n	800a4be <tcp_pcb_remove+0xa2>
 800a4b0:	4b13      	ldr	r3, [pc, #76]	; (800a500 <tcp_pcb_remove+0xe4>)
 800a4b2:	f240 7253 	movw	r2, #1875	; 0x753
 800a4b6:	4913      	ldr	r1, [pc, #76]	; (800a504 <tcp_pcb_remove+0xe8>)
 800a4b8:	4813      	ldr	r0, [pc, #76]	; (800a508 <tcp_pcb_remove+0xec>)
 800a4ba:	f006 fc71 	bl	8010da0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d006      	beq.n	800a4d4 <tcp_pcb_remove+0xb8>
 800a4c6:	4b0e      	ldr	r3, [pc, #56]	; (800a500 <tcp_pcb_remove+0xe4>)
 800a4c8:	f240 7254 	movw	r2, #1876	; 0x754
 800a4cc:	490f      	ldr	r1, [pc, #60]	; (800a50c <tcp_pcb_remove+0xf0>)
 800a4ce:	480e      	ldr	r0, [pc, #56]	; (800a508 <tcp_pcb_remove+0xec>)
 800a4d0:	f006 fc66 	bl	8010da0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d006      	beq.n	800a4ea <tcp_pcb_remove+0xce>
 800a4dc:	4b08      	ldr	r3, [pc, #32]	; (800a500 <tcp_pcb_remove+0xe4>)
 800a4de:	f240 7256 	movw	r2, #1878	; 0x756
 800a4e2:	490b      	ldr	r1, [pc, #44]	; (800a510 <tcp_pcb_remove+0xf4>)
 800a4e4:	4808      	ldr	r0, [pc, #32]	; (800a508 <tcp_pcb_remove+0xec>)
 800a4e6:	f006 fc5b 	bl	8010da0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	08012d2c 	.word	0x08012d2c
 800a504:	080130e4 	.word	0x080130e4
 800a508:	08012d68 	.word	0x08012d68
 800a50c:	080130fc 	.word	0x080130fc
 800a510:	08013118 	.word	0x08013118

0800a514 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a51c:	4b07      	ldr	r3, [pc, #28]	; (800a53c <tcp_next_iss+0x28>)
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	4b07      	ldr	r3, [pc, #28]	; (800a540 <tcp_next_iss+0x2c>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4413      	add	r3, r2
 800a526:	4a05      	ldr	r2, [pc, #20]	; (800a53c <tcp_next_iss+0x28>)
 800a528:	6013      	str	r3, [r2, #0]
  return iss;
 800a52a:	4b04      	ldr	r3, [pc, #16]	; (800a53c <tcp_next_iss+0x28>)
 800a52c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a52e:	4618      	mov	r0, r3
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	200000a0 	.word	0x200000a0
 800a540:	20006fec 	.word	0x20006fec

0800a544 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800a550:	6838      	ldr	r0, [r7, #0]
 800a552:	f005 f97f 	bl	800f854 <ip4_route>
 800a556:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800a55e:	88fb      	ldrh	r3, [r7, #6]
 800a560:	e010      	b.n	800a584 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a566:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a568:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d008      	beq.n	800a582 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800a570:	897b      	ldrh	r3, [r7, #10]
 800a572:	3b28      	subs	r3, #40	; 0x28
 800a574:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a576:	893a      	ldrh	r2, [r7, #8]
 800a578:	88fb      	ldrh	r3, [r7, #6]
 800a57a:	4293      	cmp	r3, r2
 800a57c:	bf28      	it	cs
 800a57e:	4613      	movcs	r3, r2
 800a580:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800a582:	88fb      	ldrh	r3, [r7, #6]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a59a:	e011      	b.n	800a5c0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d108      	bne.n	800a5ba <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f7fe feac 	bl	800930c <tcp_abort>
      pcb = next;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	e002      	b.n	800a5c0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1ea      	bne.n	800a59c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800a5c6:	bf00      	nop
 800a5c8:	bf00      	nop
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d02c      	beq.n	800a63a <tcp_netif_ip_addr_changed+0x6a>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d028      	beq.n	800a63a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a5e8:	4b16      	ldr	r3, [pc, #88]	; (800a644 <tcp_netif_ip_addr_changed+0x74>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7ff ffcc 	bl	800a58c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a5f4:	4b14      	ldr	r3, [pc, #80]	; (800a648 <tcp_netif_ip_addr_changed+0x78>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff ffc6 	bl	800a58c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d019      	beq.n	800a63a <tcp_netif_ip_addr_changed+0x6a>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d015      	beq.n	800a63a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800a60e:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <tcp_netif_ip_addr_changed+0x7c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	e00e      	b.n	800a634 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	429a      	cmp	r2, r3
 800a626:	d103      	bne.n	800a630 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1ed      	bne.n	800a616 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20006ff8 	.word	0x20006ff8
 800a648:	20006ff0 	.word	0x20006ff0
 800a64c:	20006ff4 	.word	0x20006ff4

0800a650 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a650:	b590      	push	{r4, r7, lr}
 800a652:	b08b      	sub	sp, #44	; 0x2c
 800a654:	af02      	add	r7, sp, #8
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	4a82      	ldr	r2, [pc, #520]	; (800a868 <tcp_input+0x218>)
 800a660:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	895b      	ldrh	r3, [r3, #10]
 800a666:	2b13      	cmp	r3, #19
 800a668:	f240 8398 	bls.w	800ad9c <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a66c:	4b7f      	ldr	r3, [pc, #508]	; (800a86c <tcp_input+0x21c>)
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	4a7e      	ldr	r2, [pc, #504]	; (800a86c <tcp_input+0x21c>)
 800a672:	6812      	ldr	r2, [r2, #0]
 800a674:	4611      	mov	r1, r2
 800a676:	4618      	mov	r0, r3
 800a678:	f005 fb68 	bl	800fd4c <ip4_addr_isbroadcast_u32>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f040 838e 	bne.w	800ada0 <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a684:	4b79      	ldr	r3, [pc, #484]	; (800a86c <tcp_input+0x21c>)
 800a686:	695b      	ldr	r3, [r3, #20]
 800a688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a68c:	2be0      	cmp	r3, #224	; 0xe0
 800a68e:	f000 8387 	beq.w	800ada0 <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800a692:	4b75      	ldr	r3, [pc, #468]	; (800a868 <tcp_input+0x218>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	899b      	ldrh	r3, [r3, #12]
 800a698:	b29b      	uxth	r3, r3
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fd f801 	bl	80076a2 <lwip_htons>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	0b1b      	lsrs	r3, r3, #12
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a6ac:	7cbb      	ldrb	r3, [r7, #18]
 800a6ae:	2b13      	cmp	r3, #19
 800a6b0:	f240 8378 	bls.w	800ada4 <tcp_input+0x754>
 800a6b4:	7cbb      	ldrb	r3, [r7, #18]
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	891b      	ldrh	r3, [r3, #8]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	f200 8371 	bhi.w	800ada4 <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800a6c2:	7cbb      	ldrb	r3, [r7, #18]
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	3b14      	subs	r3, #20
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	4b69      	ldr	r3, [pc, #420]	; (800a870 <tcp_input+0x220>)
 800a6cc:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a6ce:	4b69      	ldr	r3, [pc, #420]	; (800a874 <tcp_input+0x224>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	895a      	ldrh	r2, [r3, #10]
 800a6d8:	7cbb      	ldrb	r3, [r7, #18]
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d30d      	bcc.n	800a6fc <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a6e0:	4b63      	ldr	r3, [pc, #396]	; (800a870 <tcp_input+0x220>)
 800a6e2:	881a      	ldrh	r2, [r3, #0]
 800a6e4:	4b64      	ldr	r3, [pc, #400]	; (800a878 <tcp_input+0x228>)
 800a6e6:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800a6e8:	7cbb      	ldrb	r3, [r7, #18]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	425b      	negs	r3, r3
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	b21b      	sxth	r3, r3
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7fe f8d9 	bl	80088ac <pbuf_header>
 800a6fa:	e055      	b.n	800a7a8 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d105      	bne.n	800a710 <tcp_input+0xc0>
 800a704:	4b5d      	ldr	r3, [pc, #372]	; (800a87c <tcp_input+0x22c>)
 800a706:	22b2      	movs	r2, #178	; 0xb2
 800a708:	495d      	ldr	r1, [pc, #372]	; (800a880 <tcp_input+0x230>)
 800a70a:	485e      	ldr	r0, [pc, #376]	; (800a884 <tcp_input+0x234>)
 800a70c:	f006 fb48 	bl	8010da0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800a710:	f06f 0113 	mvn.w	r1, #19
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7fe f8c9 	bl	80088ac <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	895a      	ldrh	r2, [r3, #10]
 800a71e:	4b56      	ldr	r3, [pc, #344]	; (800a878 <tcp_input+0x228>)
 800a720:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800a722:	4b53      	ldr	r3, [pc, #332]	; (800a870 <tcp_input+0x220>)
 800a724:	881a      	ldrh	r2, [r3, #0]
 800a726:	4b54      	ldr	r3, [pc, #336]	; (800a878 <tcp_input+0x228>)
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800a72e:	4b52      	ldr	r3, [pc, #328]	; (800a878 <tcp_input+0x228>)
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	425b      	negs	r3, r3
 800a734:	b29b      	uxth	r3, r3
 800a736:	b21b      	sxth	r3, r3
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7fe f8b6 	bl	80088ac <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	895b      	ldrh	r3, [r3, #10]
 800a746:	8a3a      	ldrh	r2, [r7, #16]
 800a748:	429a      	cmp	r2, r3
 800a74a:	f200 832d 	bhi.w	800ada8 <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	4a47      	ldr	r2, [pc, #284]	; (800a874 <tcp_input+0x224>)
 800a756:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	8a3b      	ldrh	r3, [r7, #16]
 800a75e:	425b      	negs	r3, r3
 800a760:	b29b      	uxth	r3, r3
 800a762:	b21b      	sxth	r3, r3
 800a764:	4619      	mov	r1, r3
 800a766:	4610      	mov	r0, r2
 800a768:	f7fe f8a0 	bl	80088ac <pbuf_header>
    p->tot_len -= opt2len;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	891a      	ldrh	r2, [r3, #8]
 800a770:	8a3b      	ldrh	r3, [r7, #16]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	b29a      	uxth	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	895b      	ldrh	r3, [r3, #10]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <tcp_input+0x13e>
 800a782:	4b3e      	ldr	r3, [pc, #248]	; (800a87c <tcp_input+0x22c>)
 800a784:	22cf      	movs	r2, #207	; 0xcf
 800a786:	4940      	ldr	r1, [pc, #256]	; (800a888 <tcp_input+0x238>)
 800a788:	483e      	ldr	r0, [pc, #248]	; (800a884 <tcp_input+0x234>)
 800a78a:	f006 fb09 	bl	8010da0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	891a      	ldrh	r2, [r3, #8]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	891b      	ldrh	r3, [r3, #8]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d005      	beq.n	800a7a8 <tcp_input+0x158>
 800a79c:	4b37      	ldr	r3, [pc, #220]	; (800a87c <tcp_input+0x22c>)
 800a79e:	22d0      	movs	r2, #208	; 0xd0
 800a7a0:	493a      	ldr	r1, [pc, #232]	; (800a88c <tcp_input+0x23c>)
 800a7a2:	4838      	ldr	r0, [pc, #224]	; (800a884 <tcp_input+0x234>)
 800a7a4:	f006 fafc 	bl	8010da0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a7a8:	4b2f      	ldr	r3, [pc, #188]	; (800a868 <tcp_input+0x218>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	4a2d      	ldr	r2, [pc, #180]	; (800a868 <tcp_input+0x218>)
 800a7b2:	6814      	ldr	r4, [r2, #0]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fc ff74 	bl	80076a2 <lwip_htons>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a7be:	4b2a      	ldr	r3, [pc, #168]	; (800a868 <tcp_input+0x218>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	885b      	ldrh	r3, [r3, #2]
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	4a28      	ldr	r2, [pc, #160]	; (800a868 <tcp_input+0x218>)
 800a7c8:	6814      	ldr	r4, [r2, #0]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fc ff69 	bl	80076a2 <lwip_htons>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a7d4:	4b24      	ldr	r3, [pc, #144]	; (800a868 <tcp_input+0x218>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	4a23      	ldr	r2, [pc, #140]	; (800a868 <tcp_input+0x218>)
 800a7dc:	6814      	ldr	r4, [r2, #0]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fc ff6d 	bl	80076be <lwip_htonl>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	6063      	str	r3, [r4, #4]
 800a7e8:	6863      	ldr	r3, [r4, #4]
 800a7ea:	4a29      	ldr	r2, [pc, #164]	; (800a890 <tcp_input+0x240>)
 800a7ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a7ee:	4b1e      	ldr	r3, [pc, #120]	; (800a868 <tcp_input+0x218>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	4a1c      	ldr	r2, [pc, #112]	; (800a868 <tcp_input+0x218>)
 800a7f6:	6814      	ldr	r4, [r2, #0]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fc ff60 	bl	80076be <lwip_htonl>
 800a7fe:	4603      	mov	r3, r0
 800a800:	60a3      	str	r3, [r4, #8]
 800a802:	68a3      	ldr	r3, [r4, #8]
 800a804:	4a23      	ldr	r2, [pc, #140]	; (800a894 <tcp_input+0x244>)
 800a806:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a808:	4b17      	ldr	r3, [pc, #92]	; (800a868 <tcp_input+0x218>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	89db      	ldrh	r3, [r3, #14]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	4a15      	ldr	r2, [pc, #84]	; (800a868 <tcp_input+0x218>)
 800a812:	6814      	ldr	r4, [r2, #0]
 800a814:	4618      	mov	r0, r3
 800a816:	f7fc ff44 	bl	80076a2 <lwip_htons>
 800a81a:	4603      	mov	r3, r0
 800a81c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a81e:	4b12      	ldr	r3, [pc, #72]	; (800a868 <tcp_input+0x218>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	899b      	ldrh	r3, [r3, #12]
 800a824:	b29b      	uxth	r3, r3
 800a826:	4618      	mov	r0, r3
 800a828:	f7fc ff3b 	bl	80076a2 <lwip_htons>
 800a82c:	4603      	mov	r3, r0
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a834:	b2da      	uxtb	r2, r3
 800a836:	4b18      	ldr	r3, [pc, #96]	; (800a898 <tcp_input+0x248>)
 800a838:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	891a      	ldrh	r2, [r3, #8]
 800a83e:	4b16      	ldr	r3, [pc, #88]	; (800a898 <tcp_input+0x248>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	f003 0303 	and.w	r3, r3, #3
 800a846:	2b00      	cmp	r3, #0
 800a848:	bf14      	ite	ne
 800a84a:	2301      	movne	r3, #1
 800a84c:	2300      	moveq	r3, #0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	b29b      	uxth	r3, r3
 800a852:	4413      	add	r3, r2
 800a854:	b29a      	uxth	r2, r3
 800a856:	4b11      	ldr	r3, [pc, #68]	; (800a89c <tcp_input+0x24c>)
 800a858:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a85a:	2300      	movs	r3, #0
 800a85c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a85e:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <tcp_input+0x250>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	61fb      	str	r3, [r7, #28]
 800a864:	e082      	b.n	800a96c <tcp_input+0x31c>
 800a866:	bf00      	nop
 800a868:	20007014 	.word	0x20007014
 800a86c:	20003a90 	.word	0x20003a90
 800a870:	20007018 	.word	0x20007018
 800a874:	2000701c 	.word	0x2000701c
 800a878:	2000701a 	.word	0x2000701a
 800a87c:	08013130 	.word	0x08013130
 800a880:	08013164 	.word	0x08013164
 800a884:	08013174 	.word	0x08013174
 800a888:	0801319c 	.word	0x0801319c
 800a88c:	080131a8 	.word	0x080131a8
 800a890:	20007024 	.word	0x20007024
 800a894:	20007028 	.word	0x20007028
 800a898:	20007030 	.word	0x20007030
 800a89c:	2000702e 	.word	0x2000702e
 800a8a0:	20006ff8 	.word	0x20006ff8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	7d1b      	ldrb	r3, [r3, #20]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d105      	bne.n	800a8b8 <tcp_input+0x268>
 800a8ac:	4b6e      	ldr	r3, [pc, #440]	; (800aa68 <tcp_input+0x418>)
 800a8ae:	22e2      	movs	r2, #226	; 0xe2
 800a8b0:	496e      	ldr	r1, [pc, #440]	; (800aa6c <tcp_input+0x41c>)
 800a8b2:	486f      	ldr	r0, [pc, #444]	; (800aa70 <tcp_input+0x420>)
 800a8b4:	f006 fa74 	bl	8010da0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	7d1b      	ldrb	r3, [r3, #20]
 800a8bc:	2b0a      	cmp	r3, #10
 800a8be:	d105      	bne.n	800a8cc <tcp_input+0x27c>
 800a8c0:	4b69      	ldr	r3, [pc, #420]	; (800aa68 <tcp_input+0x418>)
 800a8c2:	22e3      	movs	r2, #227	; 0xe3
 800a8c4:	496b      	ldr	r1, [pc, #428]	; (800aa74 <tcp_input+0x424>)
 800a8c6:	486a      	ldr	r0, [pc, #424]	; (800aa70 <tcp_input+0x420>)
 800a8c8:	f006 fa6a 	bl	8010da0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	7d1b      	ldrb	r3, [r3, #20]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d105      	bne.n	800a8e0 <tcp_input+0x290>
 800a8d4:	4b64      	ldr	r3, [pc, #400]	; (800aa68 <tcp_input+0x418>)
 800a8d6:	22e4      	movs	r2, #228	; 0xe4
 800a8d8:	4967      	ldr	r1, [pc, #412]	; (800aa78 <tcp_input+0x428>)
 800a8da:	4865      	ldr	r0, [pc, #404]	; (800aa70 <tcp_input+0x420>)
 800a8dc:	f006 fa60 	bl	8010da0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	8b1a      	ldrh	r2, [r3, #24]
 800a8e4:	4b65      	ldr	r3, [pc, #404]	; (800aa7c <tcp_input+0x42c>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d138      	bne.n	800a962 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	8ada      	ldrh	r2, [r3, #22]
 800a8f4:	4b61      	ldr	r3, [pc, #388]	; (800aa7c <tcp_input+0x42c>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	885b      	ldrh	r3, [r3, #2]
 800a8fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d130      	bne.n	800a962 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	4b5e      	ldr	r3, [pc, #376]	; (800aa80 <tcp_input+0x430>)
 800a906:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a908:	429a      	cmp	r2, r3
 800a90a:	d12a      	bne.n	800a962 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	4b5b      	ldr	r3, [pc, #364]	; (800aa80 <tcp_input+0x430>)
 800a912:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a914:	429a      	cmp	r2, r3
 800a916:	d124      	bne.n	800a962 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	69fa      	ldr	r2, [r7, #28]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d105      	bne.n	800a92e <tcp_input+0x2de>
 800a922:	4b51      	ldr	r3, [pc, #324]	; (800aa68 <tcp_input+0x418>)
 800a924:	22ec      	movs	r2, #236	; 0xec
 800a926:	4957      	ldr	r1, [pc, #348]	; (800aa84 <tcp_input+0x434>)
 800a928:	4851      	ldr	r0, [pc, #324]	; (800aa70 <tcp_input+0x420>)
 800a92a:	f006 fa39 	bl	8010da0 <iprintf>
      if (prev != NULL) {
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00a      	beq.n	800a94a <tcp_input+0x2fa>
        prev->next = pcb->next;
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	68da      	ldr	r2, [r3, #12]
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a93c:	4b52      	ldr	r3, [pc, #328]	; (800aa88 <tcp_input+0x438>)
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a944:	4a50      	ldr	r2, [pc, #320]	; (800aa88 <tcp_input+0x438>)
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	69fa      	ldr	r2, [r7, #28]
 800a950:	429a      	cmp	r2, r3
 800a952:	d10f      	bne.n	800a974 <tcp_input+0x324>
 800a954:	4b44      	ldr	r3, [pc, #272]	; (800aa68 <tcp_input+0x418>)
 800a956:	22f4      	movs	r2, #244	; 0xf4
 800a958:	494c      	ldr	r1, [pc, #304]	; (800aa8c <tcp_input+0x43c>)
 800a95a:	4845      	ldr	r0, [pc, #276]	; (800aa70 <tcp_input+0x420>)
 800a95c:	f006 fa20 	bl	8010da0 <iprintf>
      break;
 800a960:	e008      	b.n	800a974 <tcp_input+0x324>
    }
    prev = pcb;
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	61fb      	str	r3, [r7, #28]
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d198      	bne.n	800a8a4 <tcp_input+0x254>
 800a972:	e000      	b.n	800a976 <tcp_input+0x326>
      break;
 800a974:	bf00      	nop
  }

  if (pcb == NULL) {
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f040 808f 	bne.w	800aa9c <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a97e:	4b44      	ldr	r3, [pc, #272]	; (800aa90 <tcp_input+0x440>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	61fb      	str	r3, [r7, #28]
 800a984:	e02f      	b.n	800a9e6 <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	7d1b      	ldrb	r3, [r3, #20]
 800a98a:	2b0a      	cmp	r3, #10
 800a98c:	d005      	beq.n	800a99a <tcp_input+0x34a>
 800a98e:	4b36      	ldr	r3, [pc, #216]	; (800aa68 <tcp_input+0x418>)
 800a990:	22fe      	movs	r2, #254	; 0xfe
 800a992:	4940      	ldr	r1, [pc, #256]	; (800aa94 <tcp_input+0x444>)
 800a994:	4836      	ldr	r0, [pc, #216]	; (800aa70 <tcp_input+0x420>)
 800a996:	f006 fa03 	bl	8010da0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	8b1a      	ldrh	r2, [r3, #24]
 800a99e:	4b37      	ldr	r3, [pc, #220]	; (800aa7c <tcp_input+0x42c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	881b      	ldrh	r3, [r3, #0]
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d11a      	bne.n	800a9e0 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	8ada      	ldrh	r2, [r3, #22]
 800a9ae:	4b33      	ldr	r3, [pc, #204]	; (800aa7c <tcp_input+0x42c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	885b      	ldrh	r3, [r3, #2]
 800a9b4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d112      	bne.n	800a9e0 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	685a      	ldr	r2, [r3, #4]
 800a9be:	4b30      	ldr	r3, [pc, #192]	; (800aa80 <tcp_input+0x430>)
 800a9c0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d10c      	bne.n	800a9e0 <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	4b2d      	ldr	r3, [pc, #180]	; (800aa80 <tcp_input+0x430>)
 800a9cc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d106      	bne.n	800a9e0 <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800a9d2:	69f8      	ldr	r0, [r7, #28]
 800a9d4:	f000 fb16 	bl	800b004 <tcp_timewait_input>
        pbuf_free(p);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7fd ff8b 	bl	80088f4 <pbuf_free>
        return;
 800a9de:	e1e9      	b.n	800adb4 <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	61fb      	str	r3, [r7, #28]
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1cc      	bne.n	800a986 <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a9f0:	4b29      	ldr	r3, [pc, #164]	; (800aa98 <tcp_input+0x448>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	617b      	str	r3, [r7, #20]
 800a9f6:	e019      	b.n	800aa2c <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	8ada      	ldrh	r2, [r3, #22]
 800a9fc:	4b1f      	ldr	r3, [pc, #124]	; (800aa7c <tcp_input+0x42c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	885b      	ldrh	r3, [r3, #2]
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d10c      	bne.n	800aa22 <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	4b1c      	ldr	r3, [pc, #112]	; (800aa80 <tcp_input+0x430>)
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d00f      	beq.n	800aa34 <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00d      	beq.n	800aa36 <tcp_input+0x3e6>
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d009      	beq.n	800aa36 <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	617b      	str	r3, [r7, #20]
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e2      	bne.n	800a9f8 <tcp_input+0x3a8>
 800aa32:	e000      	b.n	800aa36 <tcp_input+0x3e6>
            break;
 800aa34:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d02f      	beq.n	800aa9c <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00a      	beq.n	800aa58 <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	68da      	ldr	r2, [r3, #12]
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aa4a:	4b13      	ldr	r3, [pc, #76]	; (800aa98 <tcp_input+0x448>)
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aa52:	4a11      	ldr	r2, [pc, #68]	; (800aa98 <tcp_input+0x448>)
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800aa58:	6978      	ldr	r0, [r7, #20]
 800aa5a:	f000 f9f3 	bl	800ae44 <tcp_listen_input>
      pbuf_free(p);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7fd ff48 	bl	80088f4 <pbuf_free>
      return;
 800aa64:	e1a6      	b.n	800adb4 <tcp_input+0x764>
 800aa66:	bf00      	nop
 800aa68:	08013130 	.word	0x08013130
 800aa6c:	080131c8 	.word	0x080131c8
 800aa70:	08013174 	.word	0x08013174
 800aa74:	080131f0 	.word	0x080131f0
 800aa78:	0801321c 	.word	0x0801321c
 800aa7c:	20007014 	.word	0x20007014
 800aa80:	20003a90 	.word	0x20003a90
 800aa84:	08013244 	.word	0x08013244
 800aa88:	20006ff8 	.word	0x20006ff8
 800aa8c:	08013270 	.word	0x08013270
 800aa90:	20006ffc 	.word	0x20006ffc
 800aa94:	0801329c 	.word	0x0801329c
 800aa98:	20006ff4 	.word	0x20006ff4
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f000 8156 	beq.w	800ad50 <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800aaa4:	4b94      	ldr	r3, [pc, #592]	; (800acf8 <tcp_input+0x6a8>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	891a      	ldrh	r2, [r3, #8]
 800aaae:	4b92      	ldr	r3, [pc, #584]	; (800acf8 <tcp_input+0x6a8>)
 800aab0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800aab2:	4a91      	ldr	r2, [pc, #580]	; (800acf8 <tcp_input+0x6a8>)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800aab8:	4b90      	ldr	r3, [pc, #576]	; (800acfc <tcp_input+0x6ac>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a8e      	ldr	r2, [pc, #568]	; (800acf8 <tcp_input+0x6a8>)
 800aabe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800aac0:	4b8f      	ldr	r3, [pc, #572]	; (800ad00 <tcp_input+0x6b0>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800aac6:	4b8f      	ldr	r3, [pc, #572]	; (800ad04 <tcp_input+0x6b4>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800aacc:	4b8e      	ldr	r3, [pc, #568]	; (800ad08 <tcp_input+0x6b8>)
 800aace:	2200      	movs	r2, #0
 800aad0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800aad2:	4b8e      	ldr	r3, [pc, #568]	; (800ad0c <tcp_input+0x6bc>)
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	f003 0308 	and.w	r3, r3, #8
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d006      	beq.n	800aaec <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	7b5b      	ldrb	r3, [r3, #13]
 800aae2:	f043 0301 	orr.w	r3, r3, #1
 800aae6:	b2da      	uxtb	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d017      	beq.n	800ab24 <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aaf4:	69f8      	ldr	r0, [r7, #28]
 800aaf6:	f7ff f973 	bl	8009de0 <tcp_process_refused_data>
 800aafa:	4603      	mov	r3, r0
 800aafc:	f113 0f0d 	cmn.w	r3, #13
 800ab00:	d007      	beq.n	800ab12 <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00c      	beq.n	800ab24 <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab0a:	4b81      	ldr	r3, [pc, #516]	; (800ad10 <tcp_input+0x6c0>)
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d008      	beq.n	800ab24 <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f040 80e2 	bne.w	800ace0 <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ab1c:	69f8      	ldr	r0, [r7, #28]
 800ab1e:	f002 fe1f 	bl	800d760 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ab22:	e0dd      	b.n	800ace0 <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 800ab24:	4a7b      	ldr	r2, [pc, #492]	; (800ad14 <tcp_input+0x6c4>)
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ab2a:	69f8      	ldr	r0, [r7, #28]
 800ab2c:	f000 fad2 	bl	800b0d4 <tcp_process>
 800ab30:	4603      	mov	r3, r0
 800ab32:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ab34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab38:	f113 0f0d 	cmn.w	r3, #13
 800ab3c:	f000 80d2 	beq.w	800ace4 <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 800ab40:	4b70      	ldr	r3, [pc, #448]	; (800ad04 <tcp_input+0x6b4>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	f003 0308 	and.w	r3, r3, #8
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d016      	beq.n	800ab7a <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d008      	beq.n	800ab68 <tcp_input+0x518>
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab5c:	69fa      	ldr	r2, [r7, #28]
 800ab5e:	6912      	ldr	r2, [r2, #16]
 800ab60:	f06f 010d 	mvn.w	r1, #13
 800ab64:	4610      	mov	r0, r2
 800ab66:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ab68:	69f9      	ldr	r1, [r7, #28]
 800ab6a:	486b      	ldr	r0, [pc, #428]	; (800ad18 <tcp_input+0x6c8>)
 800ab6c:	f7ff fc56 	bl	800a41c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800ab70:	69f9      	ldr	r1, [r7, #28]
 800ab72:	2001      	movs	r0, #1
 800ab74:	f7fd f98e 	bl	8007e94 <memp_free>
 800ab78:	e0d7      	b.n	800ad2a <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ab7e:	4b62      	ldr	r3, [pc, #392]	; (800ad08 <tcp_input+0x6b8>)
 800ab80:	881b      	ldrh	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d01b      	beq.n	800abbe <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ab86:	4b60      	ldr	r3, [pc, #384]	; (800ad08 <tcp_input+0x6b8>)
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d009      	beq.n	800aba8 <tcp_input+0x558>
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab98:	69fa      	ldr	r2, [r7, #28]
 800ab9a:	6910      	ldr	r0, [r2, #16]
 800ab9c:	89fa      	ldrh	r2, [r7, #14]
 800ab9e:	69f9      	ldr	r1, [r7, #28]
 800aba0:	4798      	blx	r3
 800aba2:	4603      	mov	r3, r0
 800aba4:	74fb      	strb	r3, [r7, #19]
 800aba6:	e001      	b.n	800abac <tcp_input+0x55c>
 800aba8:	2300      	movs	r3, #0
 800abaa:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800abac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abb0:	f113 0f0d 	cmn.w	r3, #13
 800abb4:	f000 8098 	beq.w	800ace8 <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 800abb8:	4b53      	ldr	r3, [pc, #332]	; (800ad08 <tcp_input+0x6b8>)
 800abba:	2200      	movs	r2, #0
 800abbc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800abbe:	69f8      	ldr	r0, [r7, #28]
 800abc0:	f000 f90e 	bl	800ade0 <tcp_input_delayed_close>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f040 8090 	bne.w	800acec <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800abcc:	4b4c      	ldr	r3, [pc, #304]	; (800ad00 <tcp_input+0x6b0>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d041      	beq.n	800ac58 <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d006      	beq.n	800abea <tcp_input+0x59a>
 800abdc:	4b4f      	ldr	r3, [pc, #316]	; (800ad1c <tcp_input+0x6cc>)
 800abde:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800abe2:	494f      	ldr	r1, [pc, #316]	; (800ad20 <tcp_input+0x6d0>)
 800abe4:	484f      	ldr	r0, [pc, #316]	; (800ad24 <tcp_input+0x6d4>)
 800abe6:	f006 f8db 	bl	8010da0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	7e9b      	ldrb	r3, [r3, #26]
 800abee:	f003 0310 	and.w	r3, r3, #16
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d008      	beq.n	800ac08 <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800abf6:	4b42      	ldr	r3, [pc, #264]	; (800ad00 <tcp_input+0x6b0>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fd fe7a 	bl	80088f4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ac00:	69f8      	ldr	r0, [r7, #28]
 800ac02:	f7fe fb83 	bl	800930c <tcp_abort>
            goto aborted;
 800ac06:	e090      	b.n	800ad2a <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00c      	beq.n	800ac2c <tcp_input+0x5dc>
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	6918      	ldr	r0, [r3, #16]
 800ac1c:	4b38      	ldr	r3, [pc, #224]	; (800ad00 <tcp_input+0x6b0>)
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	2300      	movs	r3, #0
 800ac22:	69f9      	ldr	r1, [r7, #28]
 800ac24:	47a0      	blx	r4
 800ac26:	4603      	mov	r3, r0
 800ac28:	74fb      	strb	r3, [r7, #19]
 800ac2a:	e008      	b.n	800ac3e <tcp_input+0x5ee>
 800ac2c:	4b34      	ldr	r3, [pc, #208]	; (800ad00 <tcp_input+0x6b0>)
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	2300      	movs	r3, #0
 800ac32:	69f9      	ldr	r1, [r7, #28]
 800ac34:	2000      	movs	r0, #0
 800ac36:	f7ff f994 	bl	8009f62 <tcp_recv_null>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ac3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac42:	f113 0f0d 	cmn.w	r3, #13
 800ac46:	d053      	beq.n	800acf0 <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ac48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ac50:	4b2b      	ldr	r3, [pc, #172]	; (800ad00 <tcp_input+0x6b0>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ac58:	4b2a      	ldr	r3, [pc, #168]	; (800ad04 <tcp_input+0x6b4>)
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	f003 0320 	and.w	r3, r3, #32
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d030      	beq.n	800acc6 <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d009      	beq.n	800ac80 <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac70:	7b5a      	ldrb	r2, [r3, #13]
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac76:	f042 0220 	orr.w	r2, r2, #32
 800ac7a:	b2d2      	uxtb	r2, r2
 800ac7c:	735a      	strb	r2, [r3, #13]
 800ac7e:	e022      	b.n	800acc6 <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac84:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ac88:	d005      	beq.n	800ac96 <tcp_input+0x646>
              pcb->rcv_wnd++;
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac8e:	3301      	adds	r3, #1
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00b      	beq.n	800acb8 <tcp_input+0x668>
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	6918      	ldr	r0, [r3, #16]
 800acaa:	2300      	movs	r3, #0
 800acac:	2200      	movs	r2, #0
 800acae:	69f9      	ldr	r1, [r7, #28]
 800acb0:	47a0      	blx	r4
 800acb2:	4603      	mov	r3, r0
 800acb4:	74fb      	strb	r3, [r7, #19]
 800acb6:	e001      	b.n	800acbc <tcp_input+0x66c>
 800acb8:	2300      	movs	r3, #0
 800acba:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800acbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acc0:	f113 0f0d 	cmn.w	r3, #13
 800acc4:	d016      	beq.n	800acf4 <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800acc6:	4b13      	ldr	r3, [pc, #76]	; (800ad14 <tcp_input+0x6c4>)
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800accc:	69f8      	ldr	r0, [r7, #28]
 800acce:	f000 f887 	bl	800ade0 <tcp_input_delayed_close>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d127      	bne.n	800ad28 <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800acd8:	69f8      	ldr	r0, [r7, #28]
 800acda:	f002 fd9d 	bl	800d818 <tcp_output>
 800acde:	e024      	b.n	800ad2a <tcp_input+0x6da>
        goto aborted;
 800ace0:	bf00      	nop
 800ace2:	e022      	b.n	800ad2a <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ace4:	bf00      	nop
 800ace6:	e020      	b.n	800ad2a <tcp_input+0x6da>
              goto aborted;
 800ace8:	bf00      	nop
 800acea:	e01e      	b.n	800ad2a <tcp_input+0x6da>
          goto aborted;
 800acec:	bf00      	nop
 800acee:	e01c      	b.n	800ad2a <tcp_input+0x6da>
            goto aborted;
 800acf0:	bf00      	nop
 800acf2:	e01a      	b.n	800ad2a <tcp_input+0x6da>
              goto aborted;
 800acf4:	bf00      	nop
 800acf6:	e018      	b.n	800ad2a <tcp_input+0x6da>
 800acf8:	20007004 	.word	0x20007004
 800acfc:	20007014 	.word	0x20007014
 800ad00:	20007034 	.word	0x20007034
 800ad04:	20007031 	.word	0x20007031
 800ad08:	2000702c 	.word	0x2000702c
 800ad0c:	20007030 	.word	0x20007030
 800ad10:	2000702e 	.word	0x2000702e
 800ad14:	20007038 	.word	0x20007038
 800ad18:	20006ff8 	.word	0x20006ff8
 800ad1c:	08013130 	.word	0x08013130
 800ad20:	080132cc 	.word	0x080132cc
 800ad24:	08013174 	.word	0x08013174
          goto aborted;
 800ad28:	bf00      	nop
    tcp_input_pcb = NULL;
 800ad2a:	4b24      	ldr	r3, [pc, #144]	; (800adbc <tcp_input+0x76c>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ad30:	4b23      	ldr	r3, [pc, #140]	; (800adc0 <tcp_input+0x770>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800ad36:	4b23      	ldr	r3, [pc, #140]	; (800adc4 <tcp_input+0x774>)
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d039      	beq.n	800adb2 <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 800ad3e:	4b21      	ldr	r3, [pc, #132]	; (800adc4 <tcp_input+0x774>)
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fd fdd6 	bl	80088f4 <pbuf_free>
      inseg.p = NULL;
 800ad48:	4b1e      	ldr	r3, [pc, #120]	; (800adc4 <tcp_input+0x774>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ad4e:	e030      	b.n	800adb2 <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ad50:	4b1d      	ldr	r3, [pc, #116]	; (800adc8 <tcp_input+0x778>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	899b      	ldrh	r3, [r3, #12]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fc fca2 	bl	80076a2 <lwip_htons>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f003 0304 	and.w	r3, r3, #4
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d115      	bne.n	800ad94 <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad68:	4b18      	ldr	r3, [pc, #96]	; (800adcc <tcp_input+0x77c>)
 800ad6a:	6818      	ldr	r0, [r3, #0]
 800ad6c:	4b18      	ldr	r3, [pc, #96]	; (800add0 <tcp_input+0x780>)
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	461a      	mov	r2, r3
 800ad72:	4b18      	ldr	r3, [pc, #96]	; (800add4 <tcp_input+0x784>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad78:	4b13      	ldr	r3, [pc, #76]	; (800adc8 <tcp_input+0x778>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad7c:	885b      	ldrh	r3, [r3, #2]
 800ad7e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad80:	4a11      	ldr	r2, [pc, #68]	; (800adc8 <tcp_input+0x778>)
 800ad82:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad84:	8812      	ldrh	r2, [r2, #0]
 800ad86:	b292      	uxth	r2, r2
 800ad88:	9201      	str	r2, [sp, #4]
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	4b12      	ldr	r3, [pc, #72]	; (800add8 <tcp_input+0x788>)
 800ad8e:	4a13      	ldr	r2, [pc, #76]	; (800addc <tcp_input+0x78c>)
 800ad90:	f002 ffc6 	bl	800dd20 <tcp_rst>
    pbuf_free(p);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7fd fdad 	bl	80088f4 <pbuf_free>
  return;
 800ad9a:	e00a      	b.n	800adb2 <tcp_input+0x762>
    goto dropped;
 800ad9c:	bf00      	nop
 800ad9e:	e004      	b.n	800adaa <tcp_input+0x75a>
    goto dropped;
 800ada0:	bf00      	nop
 800ada2:	e002      	b.n	800adaa <tcp_input+0x75a>
    goto dropped;
 800ada4:	bf00      	nop
 800ada6:	e000      	b.n	800adaa <tcp_input+0x75a>
      goto dropped;
 800ada8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7fd fda2 	bl	80088f4 <pbuf_free>
 800adb0:	e000      	b.n	800adb4 <tcp_input+0x764>
  return;
 800adb2:	bf00      	nop
}
 800adb4:	3724      	adds	r7, #36	; 0x24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd90      	pop	{r4, r7, pc}
 800adba:	bf00      	nop
 800adbc:	20007038 	.word	0x20007038
 800adc0:	20007034 	.word	0x20007034
 800adc4:	20007004 	.word	0x20007004
 800adc8:	20007014 	.word	0x20007014
 800adcc:	20007028 	.word	0x20007028
 800add0:	2000702e 	.word	0x2000702e
 800add4:	20007024 	.word	0x20007024
 800add8:	20003aa0 	.word	0x20003aa0
 800addc:	20003aa4 	.word	0x20003aa4

0800ade0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800ade8:	4b14      	ldr	r3, [pc, #80]	; (800ae3c <tcp_input_delayed_close+0x5c>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	f003 0310 	and.w	r3, r3, #16
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d01d      	beq.n	800ae30 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	7e9b      	ldrb	r3, [r3, #26]
 800adf8:	f003 0310 	and.w	r3, r3, #16
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d10d      	bne.n	800ae1c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d008      	beq.n	800ae1c <tcp_input_delayed_close+0x3c>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	6912      	ldr	r2, [r2, #16]
 800ae14:	f06f 010e 	mvn.w	r1, #14
 800ae18:	4610      	mov	r0, r2
 800ae1a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ae1c:	6879      	ldr	r1, [r7, #4]
 800ae1e:	4808      	ldr	r0, [pc, #32]	; (800ae40 <tcp_input_delayed_close+0x60>)
 800ae20:	f7ff fafc 	bl	800a41c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	2001      	movs	r0, #1
 800ae28:	f7fd f834 	bl	8007e94 <memp_free>
    return 1;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e000      	b.n	800ae32 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20007031 	.word	0x20007031
 800ae40:	20006ff8 	.word	0x20006ff8

0800ae44 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b088      	sub	sp, #32
 800ae48:	af02      	add	r7, sp, #8
 800ae4a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ae4c:	4b63      	ldr	r3, [pc, #396]	; (800afdc <tcp_listen_input+0x198>)
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	f003 0304 	and.w	r3, r3, #4
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f040 80bb 	bne.w	800afd0 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ae5a:	4b60      	ldr	r3, [pc, #384]	; (800afdc <tcp_listen_input+0x198>)
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	f003 0310 	and.w	r3, r3, #16
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d016      	beq.n	800ae94 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae66:	4b5e      	ldr	r3, [pc, #376]	; (800afe0 <tcp_listen_input+0x19c>)
 800ae68:	6818      	ldr	r0, [r3, #0]
 800ae6a:	4b5e      	ldr	r3, [pc, #376]	; (800afe4 <tcp_listen_input+0x1a0>)
 800ae6c:	881b      	ldrh	r3, [r3, #0]
 800ae6e:	461a      	mov	r2, r3
 800ae70:	4b5d      	ldr	r3, [pc, #372]	; (800afe8 <tcp_listen_input+0x1a4>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae76:	4b5d      	ldr	r3, [pc, #372]	; (800afec <tcp_listen_input+0x1a8>)
 800ae78:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae7a:	885b      	ldrh	r3, [r3, #2]
 800ae7c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae7e:	4a5b      	ldr	r2, [pc, #364]	; (800afec <tcp_listen_input+0x1a8>)
 800ae80:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae82:	8812      	ldrh	r2, [r2, #0]
 800ae84:	b292      	uxth	r2, r2
 800ae86:	9201      	str	r2, [sp, #4]
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	4b59      	ldr	r3, [pc, #356]	; (800aff0 <tcp_listen_input+0x1ac>)
 800ae8c:	4a59      	ldr	r2, [pc, #356]	; (800aff4 <tcp_listen_input+0x1b0>)
 800ae8e:	f002 ff47 	bl	800dd20 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ae92:	e09f      	b.n	800afd4 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800ae94:	4b51      	ldr	r3, [pc, #324]	; (800afdc <tcp_listen_input+0x198>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f000 8099 	beq.w	800afd4 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	7d5b      	ldrb	r3, [r3, #21]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff f93a 	bl	800a120 <tcp_alloc>
 800aeac:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d111      	bne.n	800aed8 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00a      	beq.n	800aed2 <tcp_listen_input+0x8e>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	6910      	ldr	r0, [r2, #16]
 800aec4:	f04f 32ff 	mov.w	r2, #4294967295
 800aec8:	2100      	movs	r1, #0
 800aeca:	4798      	blx	r3
 800aecc:	4603      	mov	r3, r0
 800aece:	73bb      	strb	r3, [r7, #14]
      return;
 800aed0:	e081      	b.n	800afd6 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aed2:	23f0      	movs	r3, #240	; 0xf0
 800aed4:	73bb      	strb	r3, [r7, #14]
      return;
 800aed6:	e07e      	b.n	800afd6 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800aed8:	4b47      	ldr	r3, [pc, #284]	; (800aff8 <tcp_listen_input+0x1b4>)
 800aeda:	695a      	ldr	r2, [r3, #20]
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800aee0:	4b45      	ldr	r3, [pc, #276]	; (800aff8 <tcp_listen_input+0x1b4>)
 800aee2:	691a      	ldr	r2, [r3, #16]
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	8ada      	ldrh	r2, [r3, #22]
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800aef0:	4b3e      	ldr	r3, [pc, #248]	; (800afec <tcp_listen_input+0x1a8>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	2203      	movs	r2, #3
 800af00:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800af02:	4b39      	ldr	r3, [pc, #228]	; (800afe8 <tcp_listen_input+0x1a4>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800af14:	6978      	ldr	r0, [r7, #20]
 800af16:	f7ff fafd 	bl	800a514 <tcp_next_iss>
 800af1a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800af34:	4b2c      	ldr	r3, [pc, #176]	; (800afe8 <tcp_listen_input+0x1a4>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	1e5a      	subs	r2, r3, #1
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691a      	ldr	r2, [r3, #16]
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	7a1b      	ldrb	r3, [r3, #8]
 800af50:	f003 030c 	and.w	r3, r3, #12
 800af54:	b2da      	uxtb	r2, r3
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800af5a:	4b28      	ldr	r3, [pc, #160]	; (800affc <tcp_listen_input+0x1b8>)
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	60da      	str	r2, [r3, #12]
 800af62:	4a26      	ldr	r2, [pc, #152]	; (800affc <tcp_listen_input+0x1b8>)
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	f003 f922 	bl	800e1b0 <tcp_timer_needed>
 800af6c:	4b24      	ldr	r3, [pc, #144]	; (800b000 <tcp_listen_input+0x1bc>)
 800af6e:	2201      	movs	r2, #1
 800af70:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800af72:	6978      	ldr	r0, [r7, #20]
 800af74:	f001 fd0e 	bl	800c994 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800af78:	4b1c      	ldr	r3, [pc, #112]	; (800afec <tcp_listen_input+0x1a8>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	89db      	ldrh	r3, [r3, #14]
 800af7e:	b29a      	uxth	r2, r3
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	3304      	adds	r3, #4
 800af9a:	4619      	mov	r1, r3
 800af9c:	4610      	mov	r0, r2
 800af9e:	f7ff fad1 	bl	800a544 <tcp_eff_send_mss_impl>
 800afa2:	4603      	mov	r3, r0
 800afa4:	461a      	mov	r2, r3
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800afaa:	2112      	movs	r1, #18
 800afac:	6978      	ldr	r0, [r7, #20]
 800afae:	f002 fadb 	bl	800d568 <tcp_enqueue_flags>
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800afb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d004      	beq.n	800afc8 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800afbe:	2100      	movs	r1, #0
 800afc0:	6978      	ldr	r0, [r7, #20]
 800afc2:	f7fe f8f1 	bl	80091a8 <tcp_abandon>
      return;
 800afc6:	e006      	b.n	800afd6 <tcp_listen_input+0x192>
    tcp_output(npcb);
 800afc8:	6978      	ldr	r0, [r7, #20]
 800afca:	f002 fc25 	bl	800d818 <tcp_output>
  return;
 800afce:	e001      	b.n	800afd4 <tcp_listen_input+0x190>
    return;
 800afd0:	bf00      	nop
 800afd2:	e000      	b.n	800afd6 <tcp_listen_input+0x192>
  return;
 800afd4:	bf00      	nop
}
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	20007030 	.word	0x20007030
 800afe0:	20007028 	.word	0x20007028
 800afe4:	2000702e 	.word	0x2000702e
 800afe8:	20007024 	.word	0x20007024
 800afec:	20007014 	.word	0x20007014
 800aff0:	20003aa0 	.word	0x20003aa0
 800aff4:	20003aa4 	.word	0x20003aa4
 800aff8:	20003a90 	.word	0x20003a90
 800affc:	20006ff8 	.word	0x20006ff8
 800b000:	20007000 	.word	0x20007000

0800b004 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af02      	add	r7, sp, #8
 800b00a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b00c:	4b29      	ldr	r3, [pc, #164]	; (800b0b4 <tcp_timewait_input+0xb0>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	f003 0304 	and.w	r3, r3, #4
 800b014:	2b00      	cmp	r3, #0
 800b016:	d146      	bne.n	800b0a6 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b018:	4b26      	ldr	r3, [pc, #152]	; (800b0b4 <tcp_timewait_input+0xb0>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f003 0302 	and.w	r3, r3, #2
 800b020:	2b00      	cmp	r3, #0
 800b022:	d027      	beq.n	800b074 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b024:	4b24      	ldr	r3, [pc, #144]	; (800b0b8 <tcp_timewait_input+0xb4>)
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	db2a      	blt.n	800b088 <tcp_timewait_input+0x84>
 800b032:	4b21      	ldr	r3, [pc, #132]	; (800b0b8 <tcp_timewait_input+0xb4>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03a:	6879      	ldr	r1, [r7, #4]
 800b03c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b03e:	440b      	add	r3, r1
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	2b00      	cmp	r3, #0
 800b044:	dc20      	bgt.n	800b088 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b046:	4b1d      	ldr	r3, [pc, #116]	; (800b0bc <tcp_timewait_input+0xb8>)
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	4b1d      	ldr	r3, [pc, #116]	; (800b0c0 <tcp_timewait_input+0xbc>)
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	461a      	mov	r2, r3
 800b050:	4b19      	ldr	r3, [pc, #100]	; (800b0b8 <tcp_timewait_input+0xb4>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b056:	4b1b      	ldr	r3, [pc, #108]	; (800b0c4 <tcp_timewait_input+0xc0>)
 800b058:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b05a:	885b      	ldrh	r3, [r3, #2]
 800b05c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b05e:	4a19      	ldr	r2, [pc, #100]	; (800b0c4 <tcp_timewait_input+0xc0>)
 800b060:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b062:	8812      	ldrh	r2, [r2, #0]
 800b064:	b292      	uxth	r2, r2
 800b066:	9201      	str	r2, [sp, #4]
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	4b17      	ldr	r3, [pc, #92]	; (800b0c8 <tcp_timewait_input+0xc4>)
 800b06c:	4a17      	ldr	r2, [pc, #92]	; (800b0cc <tcp_timewait_input+0xc8>)
 800b06e:	f002 fe57 	bl	800dd20 <tcp_rst>
      return;
 800b072:	e01b      	b.n	800b0ac <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800b074:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <tcp_timewait_input+0xb0>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d003      	beq.n	800b088 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b080:	4b13      	ldr	r3, [pc, #76]	; (800b0d0 <tcp_timewait_input+0xcc>)
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b088:	4b0d      	ldr	r3, [pc, #52]	; (800b0c0 <tcp_timewait_input+0xbc>)
 800b08a:	881b      	ldrh	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00c      	beq.n	800b0aa <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	7e9b      	ldrb	r3, [r3, #26]
 800b094:	f043 0302 	orr.w	r3, r3, #2
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f002 fbba 	bl	800d818 <tcp_output>
  }
  return;
 800b0a4:	e001      	b.n	800b0aa <tcp_timewait_input+0xa6>
    return;
 800b0a6:	bf00      	nop
 800b0a8:	e000      	b.n	800b0ac <tcp_timewait_input+0xa8>
  return;
 800b0aa:	bf00      	nop
}
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20007030 	.word	0x20007030
 800b0b8:	20007024 	.word	0x20007024
 800b0bc:	20007028 	.word	0x20007028
 800b0c0:	2000702e 	.word	0x2000702e
 800b0c4:	20007014 	.word	0x20007014
 800b0c8:	20003aa0 	.word	0x20003aa0
 800b0cc:	20003aa4 	.word	0x20003aa4
 800b0d0:	20006fec 	.word	0x20006fec

0800b0d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08a      	sub	sp, #40	; 0x28
 800b0d8:	af02      	add	r7, sp, #8
 800b0da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b0e4:	4b93      	ldr	r3, [pc, #588]	; (800b334 <tcp_process+0x260>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d04e      	beq.n	800b18e <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	7d1b      	ldrb	r3, [r3, #20]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d108      	bne.n	800b10a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0fc:	4b8e      	ldr	r3, [pc, #568]	; (800b338 <tcp_process+0x264>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d123      	bne.n	800b14c <tcp_process+0x78>
        acceptable = 1;
 800b104:	2301      	movs	r3, #1
 800b106:	76fb      	strb	r3, [r7, #27]
 800b108:	e020      	b.n	800b14c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b10e:	4b8b      	ldr	r3, [pc, #556]	; (800b33c <tcp_process+0x268>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	429a      	cmp	r2, r3
 800b114:	d102      	bne.n	800b11c <tcp_process+0x48>
        acceptable = 1;
 800b116:	2301      	movs	r3, #1
 800b118:	76fb      	strb	r3, [r7, #27]
 800b11a:	e017      	b.n	800b14c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b11c:	4b87      	ldr	r3, [pc, #540]	; (800b33c <tcp_process+0x268>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	db10      	blt.n	800b14c <tcp_process+0x78>
 800b12a:	4b84      	ldr	r3, [pc, #528]	; (800b33c <tcp_process+0x268>)
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b136:	440b      	add	r3, r1
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dc06      	bgt.n	800b14c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	7e9b      	ldrb	r3, [r3, #26]
 800b142:	f043 0302 	orr.w	r3, r3, #2
 800b146:	b2da      	uxtb	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b14c:	7efb      	ldrb	r3, [r7, #27]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d01b      	beq.n	800b18a <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	7d1b      	ldrb	r3, [r3, #20]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d106      	bne.n	800b168 <tcp_process+0x94>
 800b15a:	4b79      	ldr	r3, [pc, #484]	; (800b340 <tcp_process+0x26c>)
 800b15c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800b160:	4978      	ldr	r1, [pc, #480]	; (800b344 <tcp_process+0x270>)
 800b162:	4879      	ldr	r0, [pc, #484]	; (800b348 <tcp_process+0x274>)
 800b164:	f005 fe1c 	bl	8010da0 <iprintf>
      recv_flags |= TF_RESET;
 800b168:	4b78      	ldr	r3, [pc, #480]	; (800b34c <tcp_process+0x278>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	f043 0308 	orr.w	r3, r3, #8
 800b170:	b2da      	uxtb	r2, r3
 800b172:	4b76      	ldr	r3, [pc, #472]	; (800b34c <tcp_process+0x278>)
 800b174:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	7e9b      	ldrb	r3, [r3, #26]
 800b17a:	f023 0301 	bic.w	r3, r3, #1
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800b184:	f06f 030d 	mvn.w	r3, #13
 800b188:	e348      	b.n	800b81c <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	e346      	b.n	800b81c <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b18e:	4b69      	ldr	r3, [pc, #420]	; (800b334 <tcp_process+0x260>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	f003 0302 	and.w	r3, r3, #2
 800b196:	2b00      	cmp	r3, #0
 800b198:	d010      	beq.n	800b1bc <tcp_process+0xe8>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	7d1b      	ldrb	r3, [r3, #20]
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d00c      	beq.n	800b1bc <tcp_process+0xe8>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7d1b      	ldrb	r3, [r3, #20]
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d008      	beq.n	800b1bc <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	7e9b      	ldrb	r3, [r3, #26]
 800b1ae:	f043 0302 	orr.w	r3, r3, #2
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e32f      	b.n	800b81c <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	7e9b      	ldrb	r3, [r3, #26]
 800b1c0:	f003 0310 	and.w	r3, r3, #16
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d103      	bne.n	800b1d0 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b1c8:	4b61      	ldr	r3, [pc, #388]	; (800b350 <tcp_process+0x27c>)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 fbdb 	bl	800c994 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	7d1b      	ldrb	r3, [r3, #20]
 800b1e2:	3b02      	subs	r3, #2
 800b1e4:	2b07      	cmp	r3, #7
 800b1e6:	f200 8309 	bhi.w	800b7fc <tcp_process+0x728>
 800b1ea:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <tcp_process+0x11c>)
 800b1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f0:	0800b211 	.word	0x0800b211
 800b1f4:	0800b407 	.word	0x0800b407
 800b1f8:	0800b55f 	.word	0x0800b55f
 800b1fc:	0800b589 	.word	0x0800b589
 800b200:	0800b6ab 	.word	0x0800b6ab
 800b204:	0800b55f 	.word	0x0800b55f
 800b208:	0800b737 	.word	0x0800b737
 800b20c:	0800b7c7 	.word	0x0800b7c7
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b210:	4b48      	ldr	r3, [pc, #288]	; (800b334 <tcp_process+0x260>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	f003 0310 	and.w	r3, r3, #16
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 80ca 	beq.w	800b3b2 <tcp_process+0x2de>
 800b21e:	4b45      	ldr	r3, [pc, #276]	; (800b334 <tcp_process+0x260>)
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	f003 0302 	and.w	r3, r3, #2
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 80c3 	beq.w	800b3b2 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	4b41      	ldr	r3, [pc, #260]	; (800b338 <tcp_process+0x264>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	429a      	cmp	r2, r3
 800b238:	f040 80bb 	bne.w	800b3b2 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 800b23c:	4b3f      	ldr	r3, [pc, #252]	; (800b33c <tcp_process+0x268>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	1c5a      	adds	r2, r3, #1
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800b24e:	4b3a      	ldr	r3, [pc, #232]	; (800b338 <tcp_process+0x264>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800b256:	4b3f      	ldr	r3, [pc, #252]	; (800b354 <tcp_process+0x280>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	89db      	ldrh	r3, [r3, #14]
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b270:	4b32      	ldr	r3, [pc, #200]	; (800b33c <tcp_process+0x268>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	1e5a      	subs	r2, r3, #1
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2204      	movs	r2, #4
 800b27e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	3304      	adds	r3, #4
 800b288:	4619      	mov	r1, r3
 800b28a:	4610      	mov	r0, r2
 800b28c:	f7ff f95a 	bl	800a544 <tcp_eff_send_mss_impl>
 800b290:	4603      	mov	r3, r0
 800b292:	461a      	mov	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b29c:	005b      	lsls	r3, r3, #1
 800b29e:	f241 121c 	movw	r2, #4380	; 0x111c
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	bf38      	it	cc
 800b2a6:	461a      	movcc	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	bf28      	it	cs
 800b2b2:	4613      	movcs	r3, r2
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d106      	bne.n	800b2d4 <tcp_process+0x200>
 800b2c6:	4b1e      	ldr	r3, [pc, #120]	; (800b340 <tcp_process+0x26c>)
 800b2c8:	f240 321a 	movw	r2, #794	; 0x31a
 800b2cc:	4922      	ldr	r1, [pc, #136]	; (800b358 <tcp_process+0x284>)
 800b2ce:	481e      	ldr	r0, [pc, #120]	; (800b348 <tcp_process+0x274>)
 800b2d0:	f005 fd66 	bl	8010da0 <iprintf>
      --pcb->snd_queuelen;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e8:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d111      	bne.n	800b314 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2f4:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <tcp_process+0x236>
 800b2fc:	4b10      	ldr	r3, [pc, #64]	; (800b340 <tcp_process+0x26c>)
 800b2fe:	f240 3222 	movw	r2, #802	; 0x322
 800b302:	4916      	ldr	r1, [pc, #88]	; (800b35c <tcp_process+0x288>)
 800b304:	4810      	ldr	r0, [pc, #64]	; (800b348 <tcp_process+0x274>)
 800b306:	f005 fd4b 	bl	8010da0 <iprintf>
        pcb->unsent = rseg->next;
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	669a      	str	r2, [r3, #104]	; 0x68
 800b312:	e003      	b.n	800b31c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800b31c:	69f8      	ldr	r0, [r7, #28]
 800b31e:	f7fe fddd 	bl	8009edc <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b326:	2b00      	cmp	r3, #0
 800b328:	d11a      	bne.n	800b360 <tcp_process+0x28c>
        pcb->rtime = -1;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b330:	861a      	strh	r2, [r3, #48]	; 0x30
 800b332:	e01c      	b.n	800b36e <tcp_process+0x29a>
 800b334:	20007030 	.word	0x20007030
 800b338:	20007028 	.word	0x20007028
 800b33c:	20007024 	.word	0x20007024
 800b340:	08013130 	.word	0x08013130
 800b344:	080132e8 	.word	0x080132e8
 800b348:	08013174 	.word	0x08013174
 800b34c:	20007031 	.word	0x20007031
 800b350:	20006fec 	.word	0x20006fec
 800b354:	20007014 	.word	0x20007014
 800b358:	08013308 	.word	0x08013308
 800b35c:	08013320 	.word	0x08013320
      } else {
        pcb->rtime = 0;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00a      	beq.n	800b38e <tcp_process+0x2ba>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	6910      	ldr	r0, [r2, #16]
 800b382:	2200      	movs	r2, #0
 800b384:	6879      	ldr	r1, [r7, #4]
 800b386:	4798      	blx	r3
 800b388:	4603      	mov	r3, r0
 800b38a:	76bb      	strb	r3, [r7, #26]
 800b38c:	e001      	b.n	800b392 <tcp_process+0x2be>
 800b38e:	2300      	movs	r3, #0
 800b390:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800b392:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b396:	f113 0f0d 	cmn.w	r3, #13
 800b39a:	d102      	bne.n	800b3a2 <tcp_process+0x2ce>
        return ERR_ABRT;
 800b39c:	f06f 030c 	mvn.w	r3, #12
 800b3a0:	e23c      	b.n	800b81c <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	7e9b      	ldrb	r3, [r3, #26]
 800b3a6:	f043 0302 	orr.w	r3, r3, #2
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800b3b0:	e226      	b.n	800b800 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800b3b2:	4b93      	ldr	r3, [pc, #588]	; (800b600 <tcp_process+0x52c>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	f003 0310 	and.w	r3, r3, #16
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 8220 	beq.w	800b800 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3c0:	4b90      	ldr	r3, [pc, #576]	; (800b604 <tcp_process+0x530>)
 800b3c2:	6818      	ldr	r0, [r3, #0]
 800b3c4:	4b90      	ldr	r3, [pc, #576]	; (800b608 <tcp_process+0x534>)
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	4b90      	ldr	r3, [pc, #576]	; (800b60c <tcp_process+0x538>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3d0:	4b8f      	ldr	r3, [pc, #572]	; (800b610 <tcp_process+0x53c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3d4:	885b      	ldrh	r3, [r3, #2]
 800b3d6:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3d8:	4a8d      	ldr	r2, [pc, #564]	; (800b610 <tcp_process+0x53c>)
 800b3da:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3dc:	8812      	ldrh	r2, [r2, #0]
 800b3de:	b292      	uxth	r2, r2
 800b3e0:	9201      	str	r2, [sp, #4]
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	4b8b      	ldr	r3, [pc, #556]	; (800b614 <tcp_process+0x540>)
 800b3e6:	4a8c      	ldr	r2, [pc, #560]	; (800b618 <tcp_process+0x544>)
 800b3e8:	f002 fc9a 	bl	800dd20 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3f2:	2b05      	cmp	r3, #5
 800b3f4:	f200 8204 	bhi.w	800b800 <tcp_process+0x72c>
        pcb->rtime = 0;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f002 fd04 	bl	800de0c <tcp_rexmit_rto>
    break;
 800b404:	e1fc      	b.n	800b800 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800b406:	4b7e      	ldr	r3, [pc, #504]	; (800b600 <tcp_process+0x52c>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	f003 0310 	and.w	r3, r3, #16
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f000 8091 	beq.w	800b536 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b414:	4b7b      	ldr	r3, [pc, #492]	; (800b604 <tcp_process+0x530>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	3b01      	subs	r3, #1
 800b420:	2b00      	cmp	r3, #0
 800b422:	db71      	blt.n	800b508 <tcp_process+0x434>
 800b424:	4b77      	ldr	r3, [pc, #476]	; (800b604 <tcp_process+0x530>)
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	2b00      	cmp	r3, #0
 800b430:	dc6a      	bgt.n	800b508 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2204      	movs	r2, #4
 800b436:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00b      	beq.n	800b458 <tcp_process+0x384>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <tcp_process+0x384>
 800b44a:	4b74      	ldr	r3, [pc, #464]	; (800b61c <tcp_process+0x548>)
 800b44c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b450:	4973      	ldr	r1, [pc, #460]	; (800b620 <tcp_process+0x54c>)
 800b452:	4874      	ldr	r0, [pc, #464]	; (800b624 <tcp_process+0x550>)
 800b454:	f005 fca4 	bl	8010da0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d102      	bne.n	800b466 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800b460:	23fa      	movs	r3, #250	; 0xfa
 800b462:	76bb      	strb	r3, [r7, #26]
 800b464:	e011      	b.n	800b48a <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00a      	beq.n	800b486 <tcp_process+0x3b2>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	6910      	ldr	r0, [r2, #16]
 800b47a:	2200      	movs	r2, #0
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	4798      	blx	r3
 800b480:	4603      	mov	r3, r0
 800b482:	76bb      	strb	r3, [r7, #26]
 800b484:	e001      	b.n	800b48a <tcp_process+0x3b6>
 800b486:	23f0      	movs	r3, #240	; 0xf0
 800b488:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800b48a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00a      	beq.n	800b4a8 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800b492:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b496:	f113 0f0d 	cmn.w	r3, #13
 800b49a:	d002      	beq.n	800b4a2 <tcp_process+0x3ce>
            tcp_abort(pcb);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7fd ff35 	bl	800930c <tcp_abort>
          }
          return ERR_ABRT;
 800b4a2:	f06f 030c 	mvn.w	r3, #12
 800b4a6:	e1b9      	b.n	800b81c <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 fa3d 	bl	800b928 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800b4ae:	4b5e      	ldr	r3, [pc, #376]	; (800b628 <tcp_process+0x554>)
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <tcp_process+0x3ee>
          recv_acked--;
 800b4b6:	4b5c      	ldr	r3, [pc, #368]	; (800b628 <tcp_process+0x554>)
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	4b5a      	ldr	r3, [pc, #360]	; (800b628 <tcp_process+0x554>)
 800b4c0:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4c6:	005b      	lsls	r3, r3, #1
 800b4c8:	f241 121c 	movw	r2, #4380	; 0x111c
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	bf38      	it	cc
 800b4d0:	461a      	movcc	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	bf28      	it	cs
 800b4dc:	4613      	movcs	r3, r2
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800b4e6:	4b51      	ldr	r3, [pc, #324]	; (800b62c <tcp_process+0x558>)
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	f003 0320 	and.w	r3, r3, #32
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d034      	beq.n	800b55c <tcp_process+0x488>
          tcp_ack_now(pcb);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	7e9b      	ldrb	r3, [r3, #26]
 800b4f6:	f043 0302 	orr.w	r3, r3, #2
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2207      	movs	r2, #7
 800b504:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800b506:	e029      	b.n	800b55c <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b508:	4b3e      	ldr	r3, [pc, #248]	; (800b604 <tcp_process+0x530>)
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	4b3e      	ldr	r3, [pc, #248]	; (800b608 <tcp_process+0x534>)
 800b50e:	881b      	ldrh	r3, [r3, #0]
 800b510:	461a      	mov	r2, r3
 800b512:	4b3e      	ldr	r3, [pc, #248]	; (800b60c <tcp_process+0x538>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b518:	4b3d      	ldr	r3, [pc, #244]	; (800b610 <tcp_process+0x53c>)
 800b51a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b51c:	885b      	ldrh	r3, [r3, #2]
 800b51e:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b520:	4a3b      	ldr	r2, [pc, #236]	; (800b610 <tcp_process+0x53c>)
 800b522:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b524:	8812      	ldrh	r2, [r2, #0]
 800b526:	b292      	uxth	r2, r2
 800b528:	9201      	str	r2, [sp, #4]
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	4b39      	ldr	r3, [pc, #228]	; (800b614 <tcp_process+0x540>)
 800b52e:	4a3a      	ldr	r2, [pc, #232]	; (800b618 <tcp_process+0x544>)
 800b530:	f002 fbf6 	bl	800dd20 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800b534:	e166      	b.n	800b804 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b536:	4b32      	ldr	r3, [pc, #200]	; (800b600 <tcp_process+0x52c>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	f003 0302 	and.w	r3, r3, #2
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f000 8160 	beq.w	800b804 <tcp_process+0x730>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	1e5a      	subs	r2, r3, #1
 800b54a:	4b30      	ldr	r3, [pc, #192]	; (800b60c <tcp_process+0x538>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	429a      	cmp	r2, r3
 800b550:	f040 8158 	bne.w	800b804 <tcp_process+0x730>
      tcp_rexmit(pcb);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f002 fc8f 	bl	800de78 <tcp_rexmit>
    break;
 800b55a:	e153      	b.n	800b804 <tcp_process+0x730>
 800b55c:	e152      	b.n	800b804 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f9e2 	bl	800b928 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b564:	4b31      	ldr	r3, [pc, #196]	; (800b62c <tcp_process+0x558>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	f003 0320 	and.w	r3, r3, #32
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 814b 	beq.w	800b808 <tcp_process+0x734>
      tcp_ack_now(pcb);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	7e9b      	ldrb	r3, [r3, #26]
 800b576:	f043 0302 	orr.w	r3, r3, #2
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2207      	movs	r2, #7
 800b584:	751a      	strb	r2, [r3, #20]
    }
    break;
 800b586:	e13f      	b.n	800b808 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f9cd 	bl	800b928 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800b58e:	4b27      	ldr	r3, [pc, #156]	; (800b62c <tcp_process+0x558>)
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	f003 0320 	and.w	r3, r3, #32
 800b596:	2b00      	cmp	r3, #0
 800b598:	d070      	beq.n	800b67c <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b59a:	4b19      	ldr	r3, [pc, #100]	; (800b600 <tcp_process+0x52c>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	f003 0310 	and.w	r3, r3, #16
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d05f      	beq.n	800b666 <tcp_process+0x592>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5aa:	4b16      	ldr	r3, [pc, #88]	; (800b604 <tcp_process+0x530>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d159      	bne.n	800b666 <tcp_process+0x592>
          pcb->unsent == NULL) {
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d155      	bne.n	800b666 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	7e9b      	ldrb	r3, [r3, #26]
 800b5be:	f043 0302 	orr.w	r3, r3, #2
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7fe fee5 	bl	800a398 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b5ce:	4b18      	ldr	r3, [pc, #96]	; (800b630 <tcp_process+0x55c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d105      	bne.n	800b5e4 <tcp_process+0x510>
 800b5d8:	4b15      	ldr	r3, [pc, #84]	; (800b630 <tcp_process+0x55c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	4a14      	ldr	r2, [pc, #80]	; (800b630 <tcp_process+0x55c>)
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	e02d      	b.n	800b640 <tcp_process+0x56c>
 800b5e4:	4b12      	ldr	r3, [pc, #72]	; (800b630 <tcp_process+0x55c>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	617b      	str	r3, [r7, #20]
 800b5ea:	e026      	b.n	800b63a <tcp_process+0x566>
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d11e      	bne.n	800b634 <tcp_process+0x560>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	68da      	ldr	r2, [r3, #12]
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	60da      	str	r2, [r3, #12]
 800b5fe:	e01f      	b.n	800b640 <tcp_process+0x56c>
 800b600:	20007030 	.word	0x20007030
 800b604:	20007028 	.word	0x20007028
 800b608:	2000702e 	.word	0x2000702e
 800b60c:	20007024 	.word	0x20007024
 800b610:	20007014 	.word	0x20007014
 800b614:	20003aa0 	.word	0x20003aa0
 800b618:	20003aa4 	.word	0x20003aa4
 800b61c:	08013130 	.word	0x08013130
 800b620:	08013334 	.word	0x08013334
 800b624:	08013174 	.word	0x08013174
 800b628:	2000702c 	.word	0x2000702c
 800b62c:	20007031 	.word	0x20007031
 800b630:	20006ff8 	.word	0x20006ff8
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	617b      	str	r3, [r7, #20]
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1d5      	bne.n	800b5ec <tcp_process+0x518>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	60da      	str	r2, [r3, #12]
 800b646:	4b77      	ldr	r3, [pc, #476]	; (800b824 <tcp_process+0x750>)
 800b648:	2201      	movs	r2, #1
 800b64a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	220a      	movs	r2, #10
 800b650:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b652:	4b75      	ldr	r3, [pc, #468]	; (800b828 <tcp_process+0x754>)
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	60da      	str	r2, [r3, #12]
 800b65a:	4a73      	ldr	r2, [pc, #460]	; (800b828 <tcp_process+0x754>)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	f002 fda6 	bl	800e1b0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800b664:	e0d2      	b.n	800b80c <tcp_process+0x738>
        tcp_ack_now(pcb);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	7e9b      	ldrb	r3, [r3, #26]
 800b66a:	f043 0302 	orr.w	r3, r3, #2
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2208      	movs	r2, #8
 800b678:	751a      	strb	r2, [r3, #20]
    break;
 800b67a:	e0c7      	b.n	800b80c <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b67c:	4b6b      	ldr	r3, [pc, #428]	; (800b82c <tcp_process+0x758>)
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	f003 0310 	and.w	r3, r3, #16
 800b684:	2b00      	cmp	r3, #0
 800b686:	f000 80c1 	beq.w	800b80c <tcp_process+0x738>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b68e:	4b68      	ldr	r3, [pc, #416]	; (800b830 <tcp_process+0x75c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	429a      	cmp	r2, r3
 800b694:	f040 80ba 	bne.w	800b80c <tcp_process+0x738>
               pcb->unsent == NULL) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f040 80b5 	bne.w	800b80c <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2206      	movs	r2, #6
 800b6a6:	751a      	strb	r2, [r3, #20]
    break;
 800b6a8:	e0b0      	b.n	800b80c <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f93c 	bl	800b928 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800b6b0:	4b60      	ldr	r3, [pc, #384]	; (800b834 <tcp_process+0x760>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	f003 0320 	and.w	r3, r3, #32
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 80a9 	beq.w	800b810 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	7e9b      	ldrb	r3, [r3, #26]
 800b6c2:	f043 0302 	orr.w	r3, r3, #2
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7fe fe63 	bl	800a398 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b6d2:	4b59      	ldr	r3, [pc, #356]	; (800b838 <tcp_process+0x764>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d105      	bne.n	800b6e8 <tcp_process+0x614>
 800b6dc:	4b56      	ldr	r3, [pc, #344]	; (800b838 <tcp_process+0x764>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68db      	ldr	r3, [r3, #12]
 800b6e2:	4a55      	ldr	r2, [pc, #340]	; (800b838 <tcp_process+0x764>)
 800b6e4:	6013      	str	r3, [r2, #0]
 800b6e6:	e013      	b.n	800b710 <tcp_process+0x63c>
 800b6e8:	4b53      	ldr	r3, [pc, #332]	; (800b838 <tcp_process+0x764>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	613b      	str	r3, [r7, #16]
 800b6ee:	e00c      	b.n	800b70a <tcp_process+0x636>
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d104      	bne.n	800b704 <tcp_process+0x630>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68da      	ldr	r2, [r3, #12]
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	60da      	str	r2, [r3, #12]
 800b702:	e005      	b.n	800b710 <tcp_process+0x63c>
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	613b      	str	r3, [r7, #16]
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1ef      	bne.n	800b6f0 <tcp_process+0x61c>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	60da      	str	r2, [r3, #12]
 800b716:	4b43      	ldr	r3, [pc, #268]	; (800b824 <tcp_process+0x750>)
 800b718:	2201      	movs	r2, #1
 800b71a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	220a      	movs	r2, #10
 800b720:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b722:	4b41      	ldr	r3, [pc, #260]	; (800b828 <tcp_process+0x754>)
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60da      	str	r2, [r3, #12]
 800b72a:	4a3f      	ldr	r2, [pc, #252]	; (800b828 <tcp_process+0x754>)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	f002 fd3e 	bl	800e1b0 <tcp_timer_needed>
    }
    break;
 800b734:	e06c      	b.n	800b810 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f8f6 	bl	800b928 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b73c:	4b3b      	ldr	r3, [pc, #236]	; (800b82c <tcp_process+0x758>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	f003 0310 	and.w	r3, r3, #16
 800b744:	2b00      	cmp	r3, #0
 800b746:	d065      	beq.n	800b814 <tcp_process+0x740>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b74c:	4b38      	ldr	r3, [pc, #224]	; (800b830 <tcp_process+0x75c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	429a      	cmp	r2, r3
 800b752:	d15f      	bne.n	800b814 <tcp_process+0x740>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d15b      	bne.n	800b814 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7fe fe1b 	bl	800a398 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b762:	4b35      	ldr	r3, [pc, #212]	; (800b838 <tcp_process+0x764>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d105      	bne.n	800b778 <tcp_process+0x6a4>
 800b76c:	4b32      	ldr	r3, [pc, #200]	; (800b838 <tcp_process+0x764>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	4a31      	ldr	r2, [pc, #196]	; (800b838 <tcp_process+0x764>)
 800b774:	6013      	str	r3, [r2, #0]
 800b776:	e013      	b.n	800b7a0 <tcp_process+0x6cc>
 800b778:	4b2f      	ldr	r3, [pc, #188]	; (800b838 <tcp_process+0x764>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	60fb      	str	r3, [r7, #12]
 800b77e:	e00c      	b.n	800b79a <tcp_process+0x6c6>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	429a      	cmp	r2, r3
 800b788:	d104      	bne.n	800b794 <tcp_process+0x6c0>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68da      	ldr	r2, [r3, #12]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	60da      	str	r2, [r3, #12]
 800b792:	e005      	b.n	800b7a0 <tcp_process+0x6cc>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	60fb      	str	r3, [r7, #12]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1ef      	bne.n	800b780 <tcp_process+0x6ac>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	60da      	str	r2, [r3, #12]
 800b7a6:	4b1f      	ldr	r3, [pc, #124]	; (800b824 <tcp_process+0x750>)
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	220a      	movs	r2, #10
 800b7b0:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b7b2:	4b1d      	ldr	r3, [pc, #116]	; (800b828 <tcp_process+0x754>)
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	60da      	str	r2, [r3, #12]
 800b7ba:	4a1b      	ldr	r2, [pc, #108]	; (800b828 <tcp_process+0x754>)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	f002 fcf6 	bl	800e1b0 <tcp_timer_needed>
    }
    break;
 800b7c4:	e026      	b.n	800b814 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f8ae 	bl	800b928 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b7cc:	4b17      	ldr	r3, [pc, #92]	; (800b82c <tcp_process+0x758>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	f003 0310 	and.w	r3, r3, #16
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d01f      	beq.n	800b818 <tcp_process+0x744>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7dc:	4b14      	ldr	r3, [pc, #80]	; (800b830 <tcp_process+0x75c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d119      	bne.n	800b818 <tcp_process+0x744>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d115      	bne.n	800b818 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800b7ec:	4b11      	ldr	r3, [pc, #68]	; (800b834 <tcp_process+0x760>)
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	f043 0310 	orr.w	r3, r3, #16
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <tcp_process+0x760>)
 800b7f8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b7fa:	e00d      	b.n	800b818 <tcp_process+0x744>
  default:
    break;
 800b7fc:	bf00      	nop
 800b7fe:	e00c      	b.n	800b81a <tcp_process+0x746>
    break;
 800b800:	bf00      	nop
 800b802:	e00a      	b.n	800b81a <tcp_process+0x746>
    break;
 800b804:	bf00      	nop
 800b806:	e008      	b.n	800b81a <tcp_process+0x746>
    break;
 800b808:	bf00      	nop
 800b80a:	e006      	b.n	800b81a <tcp_process+0x746>
    break;
 800b80c:	bf00      	nop
 800b80e:	e004      	b.n	800b81a <tcp_process+0x746>
    break;
 800b810:	bf00      	nop
 800b812:	e002      	b.n	800b81a <tcp_process+0x746>
    break;
 800b814:	bf00      	nop
 800b816:	e000      	b.n	800b81a <tcp_process+0x746>
    break;
 800b818:	bf00      	nop
  }
  return ERR_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3720      	adds	r7, #32
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	20007000 	.word	0x20007000
 800b828:	20006ffc 	.word	0x20006ffc
 800b82c:	20007030 	.word	0x20007030
 800b830:	20007028 	.word	0x20007028
 800b834:	20007031 	.word	0x20007031
 800b838:	20006ff8 	.word	0x20006ff8

0800b83c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b83c:	b590      	push	{r4, r7, lr}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	899b      	ldrh	r3, [r3, #12]
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fb ff27 	bl	80076a2 <lwip_htons>
 800b854:	4603      	mov	r3, r0
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d027      	beq.n	800b8ae <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b85e:	6838      	ldr	r0, [r7, #0]
 800b860:	f7fe fb27 	bl	8009eb2 <tcp_segs_free>
    next = NULL;
 800b864:	2300      	movs	r3, #0
 800b866:	603b      	str	r3, [r7, #0]
 800b868:	e055      	b.n	800b916 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	899b      	ldrh	r3, [r3, #12]
 800b870:	b29b      	uxth	r3, r3
 800b872:	4618      	mov	r0, r3
 800b874:	f7fb ff15 	bl	80076a2 <lwip_htons>
 800b878:	4603      	mov	r3, r0
 800b87a:	f003 0301 	and.w	r3, r3, #1
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00d      	beq.n	800b89e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	899b      	ldrh	r3, [r3, #12]
 800b888:	b29c      	uxth	r4, r3
 800b88a:	2001      	movs	r0, #1
 800b88c:	f7fb ff09 	bl	80076a2 <lwip_htons>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	4322      	orrs	r2, r4
 800b89a:	b292      	uxth	r2, r2
 800b89c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f7fe fb17 	bl	8009edc <tcp_seg_free>
    while (next &&
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00e      	beq.n	800b8d2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	891b      	ldrh	r3, [r3, #8]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	4b1a      	ldr	r3, [pc, #104]	; (800b924 <tcp_oos_insert_segment+0xe8>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	441a      	add	r2, r3
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	8909      	ldrh	r1, [r1, #8]
 800b8ca:	440b      	add	r3, r1
 800b8cc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	dacb      	bge.n	800b86a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d01e      	beq.n	800b916 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	891b      	ldrh	r3, [r3, #8]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	4b11      	ldr	r3, [pc, #68]	; (800b924 <tcp_oos_insert_segment+0xe8>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	441a      	add	r2, r3
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	dd12      	ble.n	800b916 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	4b0a      	ldr	r3, [pc, #40]	; (800b924 <tcp_oos_insert_segment+0xe8>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	b29a      	uxth	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	891b      	ldrh	r3, [r3, #8]
 800b90e:	4619      	mov	r1, r3
 800b910:	4610      	mov	r0, r2
 800b912:	f7fc fe7b 	bl	800860c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	601a      	str	r2, [r3, #0]
}
 800b91c:	bf00      	nop
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	bd90      	pop	{r4, r7, pc}
 800b924:	20007024 	.word	0x20007024

0800b928 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b92a:	b08d      	sub	sp, #52	; 0x34
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	7d1b      	ldrb	r3, [r3, #20]
 800b938:	2b03      	cmp	r3, #3
 800b93a:	d806      	bhi.n	800b94a <tcp_receive+0x22>
 800b93c:	4b98      	ldr	r3, [pc, #608]	; (800bba0 <tcp_receive+0x278>)
 800b93e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b942:	4998      	ldr	r1, [pc, #608]	; (800bba4 <tcp_receive+0x27c>)
 800b944:	4898      	ldr	r0, [pc, #608]	; (800bba8 <tcp_receive+0x280>)
 800b946:	f005 fa2b 	bl	8010da0 <iprintf>

  if (flags & TCP_ACK) {
 800b94a:	4b98      	ldr	r3, [pc, #608]	; (800bbac <tcp_receive+0x284>)
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	f003 0310 	and.w	r3, r3, #16
 800b952:	2b00      	cmp	r3, #0
 800b954:	f000 82c1 	beq.w	800beda <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b95e:	461a      	mov	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b964:	4413      	add	r3, r2
 800b966:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b96c:	4b90      	ldr	r3, [pc, #576]	; (800bbb0 <tcp_receive+0x288>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	2b00      	cmp	r3, #0
 800b974:	db1b      	blt.n	800b9ae <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b97a:	4b8d      	ldr	r3, [pc, #564]	; (800bbb0 <tcp_receive+0x288>)
 800b97c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b97e:	429a      	cmp	r2, r3
 800b980:	d106      	bne.n	800b990 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b986:	4b8b      	ldr	r3, [pc, #556]	; (800bbb4 <tcp_receive+0x28c>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	db0e      	blt.n	800b9ae <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b994:	4b87      	ldr	r3, [pc, #540]	; (800bbb4 <tcp_receive+0x28c>)
 800b996:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b998:	429a      	cmp	r2, r3
 800b99a:	d141      	bne.n	800ba20 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b99c:	4b86      	ldr	r3, [pc, #536]	; (800bbb8 <tcp_receive+0x290>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	89db      	ldrh	r3, [r3, #14]
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d938      	bls.n	800ba20 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b9ae:	4b82      	ldr	r3, [pc, #520]	; (800bbb8 <tcp_receive+0x290>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	89db      	ldrh	r3, [r3, #14]
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d205      	bcs.n	800b9d8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800b9d8:	4b75      	ldr	r3, [pc, #468]	; (800bbb0 <tcp_receive+0x288>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800b9e0:	4b74      	ldr	r3, [pc, #464]	; (800bbb4 <tcp_receive+0x28c>)
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10d      	bne.n	800ba0e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d111      	bne.n	800ba20 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800ba0c:	e008      	b.n	800ba20 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d003      	beq.n	800ba20 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ba20:	4b64      	ldr	r3, [pc, #400]	; (800bbb4 <tcp_receive+0x28c>)
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	dc53      	bgt.n	800bad6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800ba2e:	4b63      	ldr	r3, [pc, #396]	; (800bbbc <tcp_receive+0x294>)
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d146      	bne.n	800bac4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800ba40:	4413      	add	r3, r2
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d13d      	bne.n	800bac4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	db38      	blt.n	800bac4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba56:	4b57      	ldr	r3, [pc, #348]	; (800bbb4 <tcp_receive+0x28c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d132      	bne.n	800bac4 <tcp_receive+0x19c>
              found_dupack = 1;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba68:	2bff      	cmp	r3, #255	; 0xff
 800ba6a:	d007      	beq.n	800ba7c <tcp_receive+0x154>
                ++pcb->dupacks;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba72:	3301      	adds	r3, #1
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d916      	bls.n	800bab4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba90:	4413      	add	r3, r2
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d912      	bls.n	800bac4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baa8:	4413      	add	r3, r2
 800baaa:	b29a      	uxth	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bab2:	e007      	b.n	800bac4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800baba:	2b03      	cmp	r3, #3
 800babc:	d102      	bne.n	800bac4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f002 fa2a 	bl	800df18 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f040 816a 	bne.w	800bda0 <tcp_receive+0x478>
        pcb->dupacks = 0;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bad4:	e164      	b.n	800bda0 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800bad6:	4b37      	ldr	r3, [pc, #220]	; (800bbb4 <tcp_receive+0x28c>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	3b01      	subs	r3, #1
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f2c0 8108 	blt.w	800bcf8 <tcp_receive+0x3d0>
 800bae8:	4b32      	ldr	r3, [pc, #200]	; (800bbb4 <tcp_receive+0x28c>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f300 8100 	bgt.w	800bcf8 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	7e9b      	ldrb	r3, [r3, #26]
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00c      	beq.n	800bb1e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	7e9b      	ldrb	r3, [r3, #26]
 800bb08:	f023 0304 	bic.w	r3, r3, #4
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb2c:	10db      	asrs	r3, r3, #3
 800bb2e:	b21b      	sxth	r3, r3
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	4413      	add	r3, r2
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	b21a      	sxth	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bb4e:	4b19      	ldr	r3, [pc, #100]	; (800bbb4 <tcp_receive+0x28c>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	7d1b      	ldrb	r3, [r3, #20]
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	f240 8095 	bls.w	800bc8a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d227      	bcs.n	800bbc0 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb7a:	4413      	add	r3, r2
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb84:	429a      	cmp	r2, r3
 800bb86:	f240 8080 	bls.w	800bc8a <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb94:	4413      	add	r3, r2
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bb9e:	e074      	b.n	800bc8a <tcp_receive+0x362>
 800bba0:	08013130 	.word	0x08013130
 800bba4:	08013354 	.word	0x08013354
 800bba8:	08013174 	.word	0x08013174
 800bbac:	20007030 	.word	0x20007030
 800bbb0:	20007024 	.word	0x20007024
 800bbb4:	20007028 	.word	0x20007028
 800bbb8:	20007014 	.word	0x20007014
 800bbbc:	2000702e 	.word	0x2000702e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbca:	4619      	mov	r1, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbd0:	fb01 f303 	mul.w	r3, r1, r3
 800bbd4:	6879      	ldr	r1, [r7, #4]
 800bbd6:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800bbda:	fb93 f3f1 	sdiv	r3, r3, r1
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	4413      	add	r3, r2
 800bbe2:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bbea:	8a7a      	ldrh	r2, [r7, #18]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d94c      	bls.n	800bc8a <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	8a7a      	ldrh	r2, [r7, #18]
 800bbf4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800bbf8:	e047      	b.n	800bc8a <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800bc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fc ff01 	bl	8008a1c <pbuf_clen>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	d206      	bcs.n	800bc2e <tcp_receive+0x306>
 800bc20:	4b70      	ldr	r3, [pc, #448]	; (800bde4 <tcp_receive+0x4bc>)
 800bc22:	f240 429e 	movw	r2, #1182	; 0x49e
 800bc26:	4970      	ldr	r1, [pc, #448]	; (800bde8 <tcp_receive+0x4c0>)
 800bc28:	4870      	ldr	r0, [pc, #448]	; (800bdec <tcp_receive+0x4c4>)
 800bc2a:	f005 f8b9 	bl	8010da0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800bc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fc fef2 	bl	8008a1c <pbuf_clen>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc42:	1a9b      	subs	r3, r3, r2
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4e:	891a      	ldrh	r2, [r3, #8]
 800bc50:	4b67      	ldr	r3, [pc, #412]	; (800bdf0 <tcp_receive+0x4c8>)
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	4413      	add	r3, r2
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	4b65      	ldr	r3, [pc, #404]	; (800bdf0 <tcp_receive+0x4c8>)
 800bc5a:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800bc5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc5e:	f7fe f93d 	bl	8009edc <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00e      	beq.n	800bc8a <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <tcp_receive+0x362>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d106      	bne.n	800bc8a <tcp_receive+0x362>
 800bc7c:	4b59      	ldr	r3, [pc, #356]	; (800bde4 <tcp_receive+0x4bc>)
 800bc7e:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800bc82:	495c      	ldr	r1, [pc, #368]	; (800bdf4 <tcp_receive+0x4cc>)
 800bc84:	4859      	ldr	r0, [pc, #356]	; (800bdec <tcp_receive+0x4c4>)
 800bc86:	f005 f88b 	bl	8010da0 <iprintf>
      while (pcb->unacked != NULL &&
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d022      	beq.n	800bcd8 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fb fd0f 	bl	80076be <lwip_htonl>
 800bca0:	4604      	mov	r4, r0
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca6:	891b      	ldrh	r3, [r3, #8]
 800bca8:	461d      	mov	r5, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	899b      	ldrh	r3, [r3, #12]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fb fcf4 	bl	80076a2 <lwip_htons>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f003 0303 	and.w	r3, r3, #3
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d001      	beq.n	800bcc8 <tcp_receive+0x3a0>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e000      	b.n	800bcca <tcp_receive+0x3a2>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	442b      	add	r3, r5
 800bccc:	18e2      	adds	r2, r4, r3
 800bcce:	4b4a      	ldr	r3, [pc, #296]	; (800bdf8 <tcp_receive+0x4d0>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dd90      	ble.n	800bbfa <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <tcp_receive+0x3c2>
        pcb->rtime = -1;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bce6:	861a      	strh	r2, [r3, #48]	; 0x30
 800bce8:	e002      	b.n	800bcf0 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	76da      	strb	r2, [r3, #27]
 800bcf6:	e002      	b.n	800bcfe <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f001 fd31 	bl	800d760 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800bcfe:	e04f      	b.n	800bda0 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d103      	bne.n	800bd20 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800bd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fc fe76 	bl	8008a1c <pbuf_clen>
 800bd30:	4603      	mov	r3, r0
 800bd32:	429c      	cmp	r4, r3
 800bd34:	d206      	bcs.n	800bd44 <tcp_receive+0x41c>
 800bd36:	4b2b      	ldr	r3, [pc, #172]	; (800bde4 <tcp_receive+0x4bc>)
 800bd38:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bd3c:	492a      	ldr	r1, [pc, #168]	; (800bde8 <tcp_receive+0x4c0>)
 800bd3e:	482b      	ldr	r0, [pc, #172]	; (800bdec <tcp_receive+0x4c4>)
 800bd40:	f005 f82e 	bl	8010da0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800bd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fc fe67 	bl	8008a1c <pbuf_clen>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	461a      	mov	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd58:	1a9b      	subs	r3, r3, r2
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800bd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd64:	891a      	ldrh	r2, [r3, #8]
 800bd66:	4b22      	ldr	r3, [pc, #136]	; (800bdf0 <tcp_receive+0x4c8>)
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	4b20      	ldr	r3, [pc, #128]	; (800bdf0 <tcp_receive+0x4c8>)
 800bd70:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800bd72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd74:	f7fe f8b2 	bl	8009edc <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00e      	beq.n	800bda0 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10a      	bne.n	800bda0 <tcp_receive+0x478>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d106      	bne.n	800bda0 <tcp_receive+0x478>
 800bd92:	4b14      	ldr	r3, [pc, #80]	; (800bde4 <tcp_receive+0x4bc>)
 800bd94:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800bd98:	4916      	ldr	r1, [pc, #88]	; (800bdf4 <tcp_receive+0x4cc>)
 800bd9a:	4814      	ldr	r0, [pc, #80]	; (800bdec <tcp_receive+0x4c4>)
 800bd9c:	f005 f800 	bl	8010da0 <iprintf>
    while (pcb->unsent != NULL &&
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d037      	beq.n	800be18 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800bda8:	4b13      	ldr	r3, [pc, #76]	; (800bdf8 <tcp_receive+0x4d0>)
 800bdaa:	681c      	ldr	r4, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fb fc82 	bl	80076be <lwip_htonl>
 800bdba:	4605      	mov	r5, r0
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdc0:	891b      	ldrh	r3, [r3, #8]
 800bdc2:	461e      	mov	r6, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	899b      	ldrh	r3, [r3, #12]
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fb fc67 	bl	80076a2 <lwip_htons>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	f003 0303 	and.w	r3, r3, #3
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00e      	beq.n	800bdfc <tcp_receive+0x4d4>
 800bdde:	2301      	movs	r3, #1
 800bde0:	e00d      	b.n	800bdfe <tcp_receive+0x4d6>
 800bde2:	bf00      	nop
 800bde4:	08013130 	.word	0x08013130
 800bde8:	08013370 	.word	0x08013370
 800bdec:	08013174 	.word	0x08013174
 800bdf0:	2000702c 	.word	0x2000702c
 800bdf4:	08013398 	.word	0x08013398
 800bdf8:	20007028 	.word	0x20007028
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4433      	add	r3, r6
 800be00:	442b      	add	r3, r5
 800be02:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800be04:	2b00      	cmp	r3, #0
 800be06:	db07      	blt.n	800be18 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800be08:	4b8d      	ldr	r3, [pc, #564]	; (800c040 <tcp_receive+0x718>)
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	f77f af74 	ble.w	800bd00 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800be1e:	4b89      	ldr	r3, [pc, #548]	; (800c044 <tcp_receive+0x71c>)
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	4413      	add	r3, r2
 800be24:	b29a      	uxth	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be30:	2b00      	cmp	r3, #0
 800be32:	d052      	beq.n	800beda <tcp_receive+0x5b2>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be38:	4b81      	ldr	r3, [pc, #516]	; (800c040 <tcp_receive+0x718>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	da4b      	bge.n	800beda <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800be42:	4b81      	ldr	r3, [pc, #516]	; (800c048 <tcp_receive+0x720>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	b29a      	uxth	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	b29b      	uxth	r3, r3
 800be52:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800be54:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be5c:	10db      	asrs	r3, r3, #3
 800be5e:	b21b      	sxth	r3, r3
 800be60:	b29b      	uxth	r3, r3
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	b29b      	uxth	r3, r3
 800be66:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be6e:	b29a      	uxth	r2, r3
 800be70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be72:	4413      	add	r3, r2
 800be74:	b29b      	uxth	r3, r3
 800be76:	b21a      	sxth	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800be7c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800be80:	2b00      	cmp	r3, #0
 800be82:	da03      	bge.n	800be8c <tcp_receive+0x564>
        m = -m;
 800be84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be86:	425b      	negs	r3, r3
 800be88:	b29b      	uxth	r3, r3
 800be8a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800be8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be94:	109b      	asrs	r3, r3, #2
 800be96:	b21b      	sxth	r3, r3
 800be98:	b29b      	uxth	r3, r3
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800beaa:	4413      	add	r3, r2
 800beac:	b29b      	uxth	r3, r3
 800beae:	b21a      	sxth	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800beba:	10db      	asrs	r3, r3, #3
 800bebc:	b21b      	sxth	r3, r3
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	4413      	add	r3, r2
 800beca:	b29b      	uxth	r3, r3
 800becc:	b21a      	sxth	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800beda:	4b5c      	ldr	r3, [pc, #368]	; (800c04c <tcp_receive+0x724>)
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 84f1 	beq.w	800c8c6 <tcp_receive+0xf9e>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	7d1b      	ldrb	r3, [r3, #20]
 800bee8:	2b06      	cmp	r3, #6
 800beea:	f200 84ec 	bhi.w	800c8c6 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bef2:	4b57      	ldr	r3, [pc, #348]	; (800c050 <tcp_receive+0x728>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	3b01      	subs	r3, #1
 800befa:	2b00      	cmp	r3, #0
 800befc:	f2c0 80b8 	blt.w	800c070 <tcp_receive+0x748>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf04:	4b51      	ldr	r3, [pc, #324]	; (800c04c <tcp_receive+0x724>)
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4b51      	ldr	r3, [pc, #324]	; (800c050 <tcp_receive+0x728>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	440b      	add	r3, r1
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	3301      	adds	r3, #1
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f300 80ab 	bgt.w	800c070 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bf1a:	4b4e      	ldr	r3, [pc, #312]	; (800c054 <tcp_receive+0x72c>)
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf24:	4b4a      	ldr	r3, [pc, #296]	; (800c050 <tcp_receive+0x728>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bf2c:	4b49      	ldr	r3, [pc, #292]	; (800c054 <tcp_receive+0x72c>)
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <tcp_receive+0x61a>
 800bf34:	4b48      	ldr	r3, [pc, #288]	; (800c058 <tcp_receive+0x730>)
 800bf36:	f240 523c 	movw	r2, #1340	; 0x53c
 800bf3a:	4948      	ldr	r1, [pc, #288]	; (800c05c <tcp_receive+0x734>)
 800bf3c:	4848      	ldr	r0, [pc, #288]	; (800c060 <tcp_receive+0x738>)
 800bf3e:	f004 ff2f 	bl	8010da0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800bf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf44:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	dd06      	ble.n	800bf5a <tcp_receive+0x632>
 800bf4c:	4b42      	ldr	r3, [pc, #264]	; (800c058 <tcp_receive+0x730>)
 800bf4e:	f240 523d 	movw	r2, #1341	; 0x53d
 800bf52:	4944      	ldr	r1, [pc, #272]	; (800c064 <tcp_receive+0x73c>)
 800bf54:	4842      	ldr	r0, [pc, #264]	; (800c060 <tcp_receive+0x738>)
 800bf56:	f004 ff23 	bl	8010da0 <iprintf>
      if (inseg.p->len < off) {
 800bf5a:	4b3e      	ldr	r3, [pc, #248]	; (800c054 <tcp_receive+0x72c>)
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	895b      	ldrh	r3, [r3, #10]
 800bf60:	461a      	mov	r2, r3
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	4293      	cmp	r3, r2
 800bf66:	dd3e      	ble.n	800bfe6 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bf68:	4b3a      	ldr	r3, [pc, #232]	; (800c054 <tcp_receive+0x72c>)
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	891b      	ldrh	r3, [r3, #8]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf72:	4293      	cmp	r3, r2
 800bf74:	dd06      	ble.n	800bf84 <tcp_receive+0x65c>
 800bf76:	4b38      	ldr	r3, [pc, #224]	; (800c058 <tcp_receive+0x730>)
 800bf78:	f240 523f 	movw	r2, #1343	; 0x53f
 800bf7c:	493a      	ldr	r1, [pc, #232]	; (800c068 <tcp_receive+0x740>)
 800bf7e:	4838      	ldr	r0, [pc, #224]	; (800c060 <tcp_receive+0x738>)
 800bf80:	f004 ff0e 	bl	8010da0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bf84:	4b33      	ldr	r3, [pc, #204]	; (800c054 <tcp_receive+0x72c>)
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	891a      	ldrh	r2, [r3, #8]
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800bf92:	e00e      	b.n	800bfb2 <tcp_receive+0x68a>
          off -= p->len;
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	895b      	ldrh	r3, [r3, #10]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9c:	1a9b      	subs	r3, r3, r2
 800bf9e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	8a3a      	ldrh	r2, [r7, #16]
 800bfa4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	895b      	ldrh	r3, [r3, #10]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	dcea      	bgt.n	800bf94 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	425b      	negs	r3, r3
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	b21b      	sxth	r3, r3
 800bfc8:	4619      	mov	r1, r3
 800bfca:	69b8      	ldr	r0, [r7, #24]
 800bfcc:	f7fc fc6e 	bl	80088ac <pbuf_header>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d01c      	beq.n	800c010 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800bfd6:	4b20      	ldr	r3, [pc, #128]	; (800c058 <tcp_receive+0x730>)
 800bfd8:	f240 524c 	movw	r2, #1356	; 0x54c
 800bfdc:	4923      	ldr	r1, [pc, #140]	; (800c06c <tcp_receive+0x744>)
 800bfde:	4820      	ldr	r0, [pc, #128]	; (800c060 <tcp_receive+0x738>)
 800bfe0:	f004 fede 	bl	8010da0 <iprintf>
 800bfe4:	e014      	b.n	800c010 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800bfe6:	4b1b      	ldr	r3, [pc, #108]	; (800c054 <tcp_receive+0x72c>)
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfec:	b292      	uxth	r2, r2
 800bfee:	4252      	negs	r2, r2
 800bff0:	b292      	uxth	r2, r2
 800bff2:	b212      	sxth	r2, r2
 800bff4:	4611      	mov	r1, r2
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fc fc58 	bl	80088ac <pbuf_header>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d006      	beq.n	800c010 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c002:	4b15      	ldr	r3, [pc, #84]	; (800c058 <tcp_receive+0x730>)
 800c004:	f240 5251 	movw	r2, #1361	; 0x551
 800c008:	4918      	ldr	r1, [pc, #96]	; (800c06c <tcp_receive+0x744>)
 800c00a:	4815      	ldr	r0, [pc, #84]	; (800c060 <tcp_receive+0x738>)
 800c00c:	f004 fec8 	bl	8010da0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c010:	4b10      	ldr	r3, [pc, #64]	; (800c054 <tcp_receive+0x72c>)
 800c012:	891a      	ldrh	r2, [r3, #8]
 800c014:	4b0e      	ldr	r3, [pc, #56]	; (800c050 <tcp_receive+0x728>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	b299      	uxth	r1, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	b29b      	uxth	r3, r3
 800c020:	1acb      	subs	r3, r1, r3
 800c022:	b29b      	uxth	r3, r3
 800c024:	4413      	add	r3, r2
 800c026:	b29a      	uxth	r2, r3
 800c028:	4b0a      	ldr	r3, [pc, #40]	; (800c054 <tcp_receive+0x72c>)
 800c02a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	4a07      	ldr	r2, [pc, #28]	; (800c050 <tcp_receive+0x728>)
 800c032:	6013      	str	r3, [r2, #0]
 800c034:	4b07      	ldr	r3, [pc, #28]	; (800c054 <tcp_receive+0x72c>)
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	4a05      	ldr	r2, [pc, #20]	; (800c050 <tcp_receive+0x728>)
 800c03a:	6812      	ldr	r2, [r2, #0]
 800c03c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c03e:	e025      	b.n	800c08c <tcp_receive+0x764>
 800c040:	20007028 	.word	0x20007028
 800c044:	2000702c 	.word	0x2000702c
 800c048:	20006fec 	.word	0x20006fec
 800c04c:	2000702e 	.word	0x2000702e
 800c050:	20007024 	.word	0x20007024
 800c054:	20007004 	.word	0x20007004
 800c058:	08013130 	.word	0x08013130
 800c05c:	080133b8 	.word	0x080133b8
 800c060:	08013174 	.word	0x08013174
 800c064:	080133c8 	.word	0x080133c8
 800c068:	080133d8 	.word	0x080133d8
 800c06c:	080133e8 	.word	0x080133e8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c070:	4b87      	ldr	r3, [pc, #540]	; (800c290 <tcp_receive+0x968>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	da06      	bge.n	800c08c <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	7e9b      	ldrb	r3, [r3, #26]
 800c082:	f043 0302 	orr.w	r3, r3, #2
 800c086:	b2da      	uxtb	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c08c:	4b80      	ldr	r3, [pc, #512]	; (800c290 <tcp_receive+0x968>)
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	f2c0 8410 	blt.w	800c8bc <tcp_receive+0xf94>
 800c09c:	4b7c      	ldr	r3, [pc, #496]	; (800c290 <tcp_receive+0x968>)
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a4:	6879      	ldr	r1, [r7, #4]
 800c0a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c0a8:	440b      	add	r3, r1
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f300 8404 	bgt.w	800c8bc <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0b8:	4b75      	ldr	r3, [pc, #468]	; (800c290 <tcp_receive+0x968>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	f040 8287 	bne.w	800c5d0 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c0c2:	4b74      	ldr	r3, [pc, #464]	; (800c294 <tcp_receive+0x96c>)
 800c0c4:	891c      	ldrh	r4, [r3, #8]
 800c0c6:	4b73      	ldr	r3, [pc, #460]	; (800c294 <tcp_receive+0x96c>)
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	899b      	ldrh	r3, [r3, #12]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fb fae7 	bl	80076a2 <lwip_htons>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	f003 0303 	and.w	r3, r3, #3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d001      	beq.n	800c0e2 <tcp_receive+0x7ba>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	e000      	b.n	800c0e4 <tcp_receive+0x7bc>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	4423      	add	r3, r4
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	4b6b      	ldr	r3, [pc, #428]	; (800c298 <tcp_receive+0x970>)
 800c0ea:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c0f0:	4b69      	ldr	r3, [pc, #420]	; (800c298 <tcp_receive+0x970>)
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d26e      	bcs.n	800c1d6 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c0f8:	4b66      	ldr	r3, [pc, #408]	; (800c294 <tcp_receive+0x96c>)
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	899b      	ldrh	r3, [r3, #12]
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	4618      	mov	r0, r3
 800c102:	f7fb face 	bl	80076a2 <lwip_htons>
 800c106:	4603      	mov	r3, r0
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d01b      	beq.n	800c148 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c110:	4b60      	ldr	r3, [pc, #384]	; (800c294 <tcp_receive+0x96c>)
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	899b      	ldrh	r3, [r3, #12]
 800c116:	b29b      	uxth	r3, r3
 800c118:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c11c:	b29c      	uxth	r4, r3
 800c11e:	4b5d      	ldr	r3, [pc, #372]	; (800c294 <tcp_receive+0x96c>)
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	899b      	ldrh	r3, [r3, #12]
 800c124:	b29b      	uxth	r3, r3
 800c126:	4618      	mov	r0, r3
 800c128:	f7fb fabb 	bl	80076a2 <lwip_htons>
 800c12c:	4603      	mov	r3, r0
 800c12e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c132:	b29b      	uxth	r3, r3
 800c134:	4618      	mov	r0, r3
 800c136:	f7fb fab4 	bl	80076a2 <lwip_htons>
 800c13a:	4603      	mov	r3, r0
 800c13c:	461a      	mov	r2, r3
 800c13e:	4b55      	ldr	r3, [pc, #340]	; (800c294 <tcp_receive+0x96c>)
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	4322      	orrs	r2, r4
 800c144:	b292      	uxth	r2, r2
 800c146:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c14c:	4b51      	ldr	r3, [pc, #324]	; (800c294 <tcp_receive+0x96c>)
 800c14e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c150:	4b50      	ldr	r3, [pc, #320]	; (800c294 <tcp_receive+0x96c>)
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	899b      	ldrh	r3, [r3, #12]
 800c156:	b29b      	uxth	r3, r3
 800c158:	4618      	mov	r0, r3
 800c15a:	f7fb faa2 	bl	80076a2 <lwip_htons>
 800c15e:	4603      	mov	r3, r0
 800c160:	f003 0302 	and.w	r3, r3, #2
 800c164:	2b00      	cmp	r3, #0
 800c166:	d005      	beq.n	800c174 <tcp_receive+0x84c>
            inseg.len -= 1;
 800c168:	4b4a      	ldr	r3, [pc, #296]	; (800c294 <tcp_receive+0x96c>)
 800c16a:	891b      	ldrh	r3, [r3, #8]
 800c16c:	3b01      	subs	r3, #1
 800c16e:	b29a      	uxth	r2, r3
 800c170:	4b48      	ldr	r3, [pc, #288]	; (800c294 <tcp_receive+0x96c>)
 800c172:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c174:	4b47      	ldr	r3, [pc, #284]	; (800c294 <tcp_receive+0x96c>)
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	4a46      	ldr	r2, [pc, #280]	; (800c294 <tcp_receive+0x96c>)
 800c17a:	8912      	ldrh	r2, [r2, #8]
 800c17c:	4611      	mov	r1, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fc fa44 	bl	800860c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c184:	4b43      	ldr	r3, [pc, #268]	; (800c294 <tcp_receive+0x96c>)
 800c186:	891c      	ldrh	r4, [r3, #8]
 800c188:	4b42      	ldr	r3, [pc, #264]	; (800c294 <tcp_receive+0x96c>)
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	899b      	ldrh	r3, [r3, #12]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	4618      	mov	r0, r3
 800c192:	f7fb fa86 	bl	80076a2 <lwip_htons>
 800c196:	4603      	mov	r3, r0
 800c198:	f003 0303 	and.w	r3, r3, #3
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <tcp_receive+0x87c>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e000      	b.n	800c1a6 <tcp_receive+0x87e>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4423      	add	r3, r4
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	4b3b      	ldr	r3, [pc, #236]	; (800c298 <tcp_receive+0x970>)
 800c1ac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c1ae:	4b3a      	ldr	r3, [pc, #232]	; (800c298 <tcp_receive+0x970>)
 800c1b0:	881b      	ldrh	r3, [r3, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	4b36      	ldr	r3, [pc, #216]	; (800c290 <tcp_receive+0x968>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	441a      	add	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1be:	6879      	ldr	r1, [r7, #4]
 800c1c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c1c2:	440b      	add	r3, r1
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d006      	beq.n	800c1d6 <tcp_receive+0x8ae>
 800c1c8:	4b34      	ldr	r3, [pc, #208]	; (800c29c <tcp_receive+0x974>)
 800c1ca:	f240 527e 	movw	r2, #1406	; 0x57e
 800c1ce:	4934      	ldr	r1, [pc, #208]	; (800c2a0 <tcp_receive+0x978>)
 800c1d0:	4834      	ldr	r0, [pc, #208]	; (800c2a4 <tcp_receive+0x97c>)
 800c1d2:	f004 fde5 	bl	8010da0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f000 80e1 	beq.w	800c3a2 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c1e0:	4b2c      	ldr	r3, [pc, #176]	; (800c294 <tcp_receive+0x96c>)
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	899b      	ldrh	r3, [r3, #12]
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fb fa5a 	bl	80076a2 <lwip_htons>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d010      	beq.n	800c21a <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c1f8:	e00a      	b.n	800c210 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1fe:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800c20a:	68b8      	ldr	r0, [r7, #8]
 800c20c:	f7fd fe66 	bl	8009edc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1f0      	bne.n	800c1fa <tcp_receive+0x8d2>
 800c218:	e0c3      	b.n	800c3a2 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c21e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c220:	e04f      	b.n	800c2c2 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	899b      	ldrh	r3, [r3, #12]
 800c228:	b29b      	uxth	r3, r3
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fb fa39 	bl	80076a2 <lwip_htons>
 800c230:	4603      	mov	r3, r0
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	2b00      	cmp	r3, #0
 800c238:	d03b      	beq.n	800c2b2 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c23a:	4b16      	ldr	r3, [pc, #88]	; (800c294 <tcp_receive+0x96c>)
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	899b      	ldrh	r3, [r3, #12]
 800c240:	b29b      	uxth	r3, r3
 800c242:	4618      	mov	r0, r3
 800c244:	f7fb fa2d 	bl	80076a2 <lwip_htons>
 800c248:	4603      	mov	r3, r0
 800c24a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d12f      	bne.n	800c2b2 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c252:	4b10      	ldr	r3, [pc, #64]	; (800c294 <tcp_receive+0x96c>)
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	899b      	ldrh	r3, [r3, #12]
 800c258:	b29c      	uxth	r4, r3
 800c25a:	2001      	movs	r0, #1
 800c25c:	f7fb fa21 	bl	80076a2 <lwip_htons>
 800c260:	4603      	mov	r3, r0
 800c262:	461a      	mov	r2, r3
 800c264:	4b0b      	ldr	r3, [pc, #44]	; (800c294 <tcp_receive+0x96c>)
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	4322      	orrs	r2, r4
 800c26a:	b292      	uxth	r2, r2
 800c26c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c26e:	4b09      	ldr	r3, [pc, #36]	; (800c294 <tcp_receive+0x96c>)
 800c270:	891c      	ldrh	r4, [r3, #8]
 800c272:	4b08      	ldr	r3, [pc, #32]	; (800c294 <tcp_receive+0x96c>)
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	899b      	ldrh	r3, [r3, #12]
 800c278:	b29b      	uxth	r3, r3
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fb fa11 	bl	80076a2 <lwip_htons>
 800c280:	4603      	mov	r3, r0
 800c282:	f003 0303 	and.w	r3, r3, #3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00e      	beq.n	800c2a8 <tcp_receive+0x980>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e00d      	b.n	800c2aa <tcp_receive+0x982>
 800c28e:	bf00      	nop
 800c290:	20007024 	.word	0x20007024
 800c294:	20007004 	.word	0x20007004
 800c298:	2000702e 	.word	0x2000702e
 800c29c:	08013130 	.word	0x08013130
 800c2a0:	080133fc 	.word	0x080133fc
 800c2a4:	08013174 	.word	0x08013174
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4423      	add	r3, r4
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	4b95      	ldr	r3, [pc, #596]	; (800c504 <tcp_receive+0xbdc>)
 800c2b0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800c2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800c2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2be:	f7fd fe0d 	bl	8009edc <tcp_seg_free>
            while (next &&
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00e      	beq.n	800c2e6 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c2c8:	4b8e      	ldr	r3, [pc, #568]	; (800c504 <tcp_receive+0xbdc>)
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	4b8e      	ldr	r3, [pc, #568]	; (800c508 <tcp_receive+0xbe0>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	441a      	add	r2, r3
 800c2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2dc:	8909      	ldrh	r1, [r1, #8]
 800c2de:	440b      	add	r3, r1
 800c2e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	da9d      	bge.n	800c222 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d057      	beq.n	800c39c <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 800c2ec:	4b85      	ldr	r3, [pc, #532]	; (800c504 <tcp_receive+0xbdc>)
 800c2ee:	881b      	ldrh	r3, [r3, #0]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4b85      	ldr	r3, [pc, #532]	; (800c508 <tcp_receive+0xbe0>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	441a      	add	r2, r3
 800c2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c300:	2b00      	cmp	r3, #0
 800c302:	dd4b      	ble.n	800c39c <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	4b7e      	ldr	r3, [pc, #504]	; (800c508 <tcp_receive+0xbe0>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	b29b      	uxth	r3, r3
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	b29a      	uxth	r2, r3
 800c316:	4b7d      	ldr	r3, [pc, #500]	; (800c50c <tcp_receive+0xbe4>)
 800c318:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c31a:	4b7c      	ldr	r3, [pc, #496]	; (800c50c <tcp_receive+0xbe4>)
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	899b      	ldrh	r3, [r3, #12]
 800c320:	b29b      	uxth	r3, r3
 800c322:	4618      	mov	r0, r3
 800c324:	f7fb f9bd 	bl	80076a2 <lwip_htons>
 800c328:	4603      	mov	r3, r0
 800c32a:	f003 0302 	and.w	r3, r3, #2
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d005      	beq.n	800c33e <tcp_receive+0xa16>
                inseg.len -= 1;
 800c332:	4b76      	ldr	r3, [pc, #472]	; (800c50c <tcp_receive+0xbe4>)
 800c334:	891b      	ldrh	r3, [r3, #8]
 800c336:	3b01      	subs	r3, #1
 800c338:	b29a      	uxth	r2, r3
 800c33a:	4b74      	ldr	r3, [pc, #464]	; (800c50c <tcp_receive+0xbe4>)
 800c33c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c33e:	4b73      	ldr	r3, [pc, #460]	; (800c50c <tcp_receive+0xbe4>)
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	4a72      	ldr	r2, [pc, #456]	; (800c50c <tcp_receive+0xbe4>)
 800c344:	8912      	ldrh	r2, [r2, #8]
 800c346:	4611      	mov	r1, r2
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fc f95f 	bl	800860c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c34e:	4b6f      	ldr	r3, [pc, #444]	; (800c50c <tcp_receive+0xbe4>)
 800c350:	891c      	ldrh	r4, [r3, #8]
 800c352:	4b6e      	ldr	r3, [pc, #440]	; (800c50c <tcp_receive+0xbe4>)
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	899b      	ldrh	r3, [r3, #12]
 800c358:	b29b      	uxth	r3, r3
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fb f9a1 	bl	80076a2 <lwip_htons>
 800c360:	4603      	mov	r3, r0
 800c362:	f003 0303 	and.w	r3, r3, #3
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <tcp_receive+0xa46>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e000      	b.n	800c370 <tcp_receive+0xa48>
 800c36e:	2300      	movs	r3, #0
 800c370:	4423      	add	r3, r4
 800c372:	b29a      	uxth	r2, r3
 800c374:	4b63      	ldr	r3, [pc, #396]	; (800c504 <tcp_receive+0xbdc>)
 800c376:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c378:	4b62      	ldr	r3, [pc, #392]	; (800c504 <tcp_receive+0xbdc>)
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	461a      	mov	r2, r3
 800c37e:	4b62      	ldr	r3, [pc, #392]	; (800c508 <tcp_receive+0xbe0>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	441a      	add	r2, r3
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d006      	beq.n	800c39c <tcp_receive+0xa74>
 800c38e:	4b60      	ldr	r3, [pc, #384]	; (800c510 <tcp_receive+0xbe8>)
 800c390:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800c394:	495f      	ldr	r1, [pc, #380]	; (800c514 <tcp_receive+0xbec>)
 800c396:	4860      	ldr	r0, [pc, #384]	; (800c518 <tcp_receive+0xbf0>)
 800c398:	f004 fd02 	bl	8010da0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3a0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c3a2:	4b58      	ldr	r3, [pc, #352]	; (800c504 <tcp_receive+0xbdc>)
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	4b57      	ldr	r3, [pc, #348]	; (800c508 <tcp_receive+0xbe0>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	441a      	add	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c3b6:	4b53      	ldr	r3, [pc, #332]	; (800c504 <tcp_receive+0xbdc>)
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d206      	bcs.n	800c3cc <tcp_receive+0xaa4>
 800c3be:	4b54      	ldr	r3, [pc, #336]	; (800c510 <tcp_receive+0xbe8>)
 800c3c0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c3c4:	4955      	ldr	r1, [pc, #340]	; (800c51c <tcp_receive+0xbf4>)
 800c3c6:	4854      	ldr	r0, [pc, #336]	; (800c518 <tcp_receive+0xbf0>)
 800c3c8:	f004 fcea 	bl	8010da0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c3d0:	4b4c      	ldr	r3, [pc, #304]	; (800c504 <tcp_receive+0xbdc>)
 800c3d2:	881b      	ldrh	r3, [r3, #0]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7fd f8ed 	bl	80095bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c3e2:	4b4a      	ldr	r3, [pc, #296]	; (800c50c <tcp_receive+0xbe4>)
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	891b      	ldrh	r3, [r3, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d006      	beq.n	800c3fa <tcp_receive+0xad2>
          recv_data = inseg.p;
 800c3ec:	4b47      	ldr	r3, [pc, #284]	; (800c50c <tcp_receive+0xbe4>)
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	4a4b      	ldr	r2, [pc, #300]	; (800c520 <tcp_receive+0xbf8>)
 800c3f2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c3f4:	4b45      	ldr	r3, [pc, #276]	; (800c50c <tcp_receive+0xbe4>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c3fa:	4b44      	ldr	r3, [pc, #272]	; (800c50c <tcp_receive+0xbe4>)
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	899b      	ldrh	r3, [r3, #12]
 800c400:	b29b      	uxth	r3, r3
 800c402:	4618      	mov	r0, r3
 800c404:	f7fb f94d 	bl	80076a2 <lwip_htons>
 800c408:	4603      	mov	r3, r0
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f000 80b4 	beq.w	800c57c <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c414:	4b43      	ldr	r3, [pc, #268]	; (800c524 <tcp_receive+0xbfc>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	f043 0320 	orr.w	r3, r3, #32
 800c41c:	b2da      	uxtb	r2, r3
 800c41e:	4b41      	ldr	r3, [pc, #260]	; (800c524 <tcp_receive+0xbfc>)
 800c420:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c422:	e0ab      	b.n	800c57c <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c428:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	4a35      	ldr	r2, [pc, #212]	; (800c508 <tcp_receive+0xbe0>)
 800c434:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	891b      	ldrh	r3, [r3, #8]
 800c43a:	461c      	mov	r4, r3
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	899b      	ldrh	r3, [r3, #12]
 800c442:	b29b      	uxth	r3, r3
 800c444:	4618      	mov	r0, r3
 800c446:	f7fb f92c 	bl	80076a2 <lwip_htons>
 800c44a:	4603      	mov	r3, r0
 800c44c:	f003 0303 	and.w	r3, r3, #3
 800c450:	2b00      	cmp	r3, #0
 800c452:	d001      	beq.n	800c458 <tcp_receive+0xb30>
 800c454:	2301      	movs	r3, #1
 800c456:	e000      	b.n	800c45a <tcp_receive+0xb32>
 800c458:	2300      	movs	r3, #0
 800c45a:	191a      	adds	r2, r3, r4
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	441a      	add	r2, r3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c46a:	461c      	mov	r4, r3
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	891b      	ldrh	r3, [r3, #8]
 800c470:	461d      	mov	r5, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	899b      	ldrh	r3, [r3, #12]
 800c478:	b29b      	uxth	r3, r3
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fb f911 	bl	80076a2 <lwip_htons>
 800c480:	4603      	mov	r3, r0
 800c482:	f003 0303 	and.w	r3, r3, #3
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <tcp_receive+0xb66>
 800c48a:	2301      	movs	r3, #1
 800c48c:	e000      	b.n	800c490 <tcp_receive+0xb68>
 800c48e:	2300      	movs	r3, #0
 800c490:	442b      	add	r3, r5
 800c492:	429c      	cmp	r4, r3
 800c494:	d206      	bcs.n	800c4a4 <tcp_receive+0xb7c>
 800c496:	4b1e      	ldr	r3, [pc, #120]	; (800c510 <tcp_receive+0xbe8>)
 800c498:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800c49c:	4922      	ldr	r1, [pc, #136]	; (800c528 <tcp_receive+0xc00>)
 800c49e:	481e      	ldr	r0, [pc, #120]	; (800c518 <tcp_receive+0xbf0>)
 800c4a0:	f004 fc7e 	bl	8010da0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	891b      	ldrh	r3, [r3, #8]
 800c4a8:	461c      	mov	r4, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	899b      	ldrh	r3, [r3, #12]
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fb f8f5 	bl	80076a2 <lwip_htons>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f003 0303 	and.w	r3, r3, #3
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <tcp_receive+0xb9e>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e000      	b.n	800c4c8 <tcp_receive+0xba0>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	1919      	adds	r1, r3, r4
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4ce:	b28b      	uxth	r3, r1
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7fd f86f 	bl	80095bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	891b      	ldrh	r3, [r3, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d028      	beq.n	800c53a <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c4e8:	4b0d      	ldr	r3, [pc, #52]	; (800c520 <tcp_receive+0xbf8>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d01d      	beq.n	800c52c <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800c4f0:	4b0b      	ldr	r3, [pc, #44]	; (800c520 <tcp_receive+0xbf8>)
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4610      	mov	r0, r2
 800c4fc:	f7fc fac8 	bl	8008a90 <pbuf_cat>
 800c500:	e018      	b.n	800c534 <tcp_receive+0xc0c>
 800c502:	bf00      	nop
 800c504:	2000702e 	.word	0x2000702e
 800c508:	20007024 	.word	0x20007024
 800c50c:	20007004 	.word	0x20007004
 800c510:	08013130 	.word	0x08013130
 800c514:	08013434 	.word	0x08013434
 800c518:	08013174 	.word	0x08013174
 800c51c:	08013470 	.word	0x08013470
 800c520:	20007034 	.word	0x20007034
 800c524:	20007031 	.word	0x20007031
 800c528:	08013490 	.word	0x08013490
            } else {
              recv_data = cseg->p;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	4a71      	ldr	r2, [pc, #452]	; (800c6f8 <tcp_receive+0xdd0>)
 800c532:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	899b      	ldrh	r3, [r3, #12]
 800c540:	b29b      	uxth	r3, r3
 800c542:	4618      	mov	r0, r3
 800c544:	f7fb f8ad 	bl	80076a2 <lwip_htons>
 800c548:	4603      	mov	r3, r0
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00d      	beq.n	800c56e <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c552:	4b6a      	ldr	r3, [pc, #424]	; (800c6fc <tcp_receive+0xdd4>)
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	f043 0320 	orr.w	r3, r3, #32
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	4b67      	ldr	r3, [pc, #412]	; (800c6fc <tcp_receive+0xdd4>)
 800c55e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	7d1b      	ldrb	r3, [r3, #20]
 800c564:	2b04      	cmp	r3, #4
 800c566:	d102      	bne.n	800c56e <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2207      	movs	r2, #7
 800c56c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f7fd fcb0 	bl	8009edc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c580:	2b00      	cmp	r3, #0
 800c582:	d008      	beq.n	800c596 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c590:	429a      	cmp	r2, r3
 800c592:	f43f af47 	beq.w	800c424 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	7e9b      	ldrb	r3, [r3, #26]
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00e      	beq.n	800c5c0 <tcp_receive+0xc98>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	7e9b      	ldrb	r3, [r3, #26]
 800c5a6:	f023 0301 	bic.w	r3, r3, #1
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	769a      	strb	r2, [r3, #26]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	7e9b      	ldrb	r3, [r3, #26]
 800c5b4:	f043 0302 	orr.w	r3, r3, #2
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c5be:	e181      	b.n	800c8c4 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	7e9b      	ldrb	r3, [r3, #26]
 800c5c4:	f043 0301 	orr.w	r3, r3, #1
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c5ce:	e179      	b.n	800c8c4 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f001 f8c5 	bl	800d760 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d106      	bne.n	800c5ec <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c5de:	4848      	ldr	r0, [pc, #288]	; (800c700 <tcp_receive+0xdd8>)
 800c5e0:	f7fd fca3 	bl	8009f2a <tcp_seg_copy>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800c5ea:	e16b      	b.n	800c8c4 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5f6:	e150      	b.n	800c89a <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800c5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	4b41      	ldr	r3, [pc, #260]	; (800c704 <tcp_receive+0xddc>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	429a      	cmp	r2, r3
 800c604:	d11d      	bne.n	800c642 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c606:	4b3e      	ldr	r3, [pc, #248]	; (800c700 <tcp_receive+0xdd8>)
 800c608:	891a      	ldrh	r2, [r3, #8]
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	891b      	ldrh	r3, [r3, #8]
 800c60e:	429a      	cmp	r2, r3
 800c610:	f240 8148 	bls.w	800c8a4 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800c614:	483a      	ldr	r0, [pc, #232]	; (800c700 <tcp_receive+0xdd8>)
 800c616:	f7fd fc88 	bl	8009f2a <tcp_seg_copy>
 800c61a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 8142 	beq.w	800c8a8 <tcp_receive+0xf80>
                  if (prev != NULL) {
 800c624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <tcp_receive+0xd0a>
                    prev->next = cseg;
 800c62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	601a      	str	r2, [r3, #0]
 800c630:	e002      	b.n	800c638 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c638:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f7ff f8fe 	bl	800b83c <tcp_oos_insert_segment>
                }
                break;
 800c640:	e132      	b.n	800c8a8 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	2b00      	cmp	r3, #0
 800c646:	d117      	bne.n	800c678 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c648:	4b2e      	ldr	r3, [pc, #184]	; (800c704 <tcp_receive+0xddc>)
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	da57      	bge.n	800c708 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800c658:	4829      	ldr	r0, [pc, #164]	; (800c700 <tcp_receive+0xdd8>)
 800c65a:	f7fd fc66 	bl	8009f2a <tcp_seg_copy>
 800c65e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2b00      	cmp	r3, #0
 800c664:	f000 8122 	beq.w	800c8ac <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800c66e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f7ff f8e3 	bl	800b83c <tcp_oos_insert_segment>
                  }
                  break;
 800c676:	e119      	b.n	800c8ac <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800c678:	4b22      	ldr	r3, [pc, #136]	; (800c704 <tcp_receive+0xddc>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	3b01      	subs	r3, #1
 800c686:	2b00      	cmp	r3, #0
 800c688:	db3e      	blt.n	800c708 <tcp_receive+0xde0>
 800c68a:	4b1e      	ldr	r3, [pc, #120]	; (800c704 <tcp_receive+0xddc>)
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	3301      	adds	r3, #1
 800c698:	2b00      	cmp	r3, #0
 800c69a:	dc35      	bgt.n	800c708 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800c69c:	4818      	ldr	r0, [pc, #96]	; (800c700 <tcp_receive+0xdd8>)
 800c69e:	f7fd fc44 	bl	8009f2a <tcp_seg_copy>
 800c6a2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 8102 	beq.w	800c8b0 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6b4:	8912      	ldrh	r2, [r2, #8]
 800c6b6:	441a      	add	r2, r3
 800c6b8:	4b12      	ldr	r3, [pc, #72]	; (800c704 <tcp_receive+0xddc>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	dd12      	ble.n	800c6e8 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c6c2:	4b10      	ldr	r3, [pc, #64]	; (800c704 <tcp_receive+0xddc>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	b29a      	uxth	r2, r3
 800c6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6de:	891b      	ldrh	r3, [r3, #8]
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	4610      	mov	r0, r2
 800c6e4:	f7fb ff92 	bl	800860c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c6ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f7ff f8a3 	bl	800b83c <tcp_oos_insert_segment>
                  }
                  break;
 800c6f6:	e0db      	b.n	800c8b0 <tcp_receive+0xf88>
 800c6f8:	20007034 	.word	0x20007034
 800c6fc:	20007031 	.word	0x20007031
 800c700:	20007004 	.word	0x20007004
 800c704:	20007024 	.word	0x20007024
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f040 80bf 	bne.w	800c890 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c712:	4b7c      	ldr	r3, [pc, #496]	; (800c904 <tcp_receive+0xfdc>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f340 80b6 	ble.w	800c890 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	899b      	ldrh	r3, [r3, #12]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7fa ffb8 	bl	80076a2 <lwip_htons>
 800c732:	4603      	mov	r3, r0
 800c734:	f003 0301 	and.w	r3, r3, #1
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f040 80bb 	bne.w	800c8b4 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c73e:	4872      	ldr	r0, [pc, #456]	; (800c908 <tcp_receive+0xfe0>)
 800c740:	f7fd fbf3 	bl	8009f2a <tcp_seg_copy>
 800c744:	4602      	mov	r2, r0
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f000 80b2 	beq.w	800c8b8 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c75c:	8912      	ldrh	r2, [r2, #8]
 800c75e:	441a      	add	r2, r3
 800c760:	4b68      	ldr	r3, [pc, #416]	; (800c904 <tcp_receive+0xfdc>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	1ad3      	subs	r3, r2, r3
 800c766:	2b00      	cmp	r3, #0
 800c768:	dd12      	ble.n	800c790 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c76a:	4b66      	ldr	r3, [pc, #408]	; (800c904 <tcp_receive+0xfdc>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	b29a      	uxth	r2, r3
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	b29b      	uxth	r3, r3
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	685a      	ldr	r2, [r3, #4]
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c786:	891b      	ldrh	r3, [r3, #8]
 800c788:	4619      	mov	r1, r3
 800c78a:	4610      	mov	r0, r2
 800c78c:	f7fb ff3e 	bl	800860c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c790:	4b5e      	ldr	r3, [pc, #376]	; (800c90c <tcp_receive+0xfe4>)
 800c792:	881b      	ldrh	r3, [r3, #0]
 800c794:	461a      	mov	r2, r3
 800c796:	4b5b      	ldr	r3, [pc, #364]	; (800c904 <tcp_receive+0xfdc>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	441a      	add	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a0:	6879      	ldr	r1, [r7, #4]
 800c7a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c7a4:	440b      	add	r3, r1
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f340 8085 	ble.w	800c8b8 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	899b      	ldrh	r3, [r3, #12]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fa ff72 	bl	80076a2 <lwip_htons>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f003 0301 	and.w	r3, r3, #1
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d01e      	beq.n	800c806 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	899b      	ldrh	r3, [r3, #12]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c7d6:	b29c      	uxth	r4, r3
 800c7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	899b      	ldrh	r3, [r3, #12]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fa ff5d 	bl	80076a2 <lwip_htons>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fa ff56 	bl	80076a2 <lwip_htons>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	4322      	orrs	r2, r4
 800c802:	b292      	uxth	r2, r2
 800c804:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c810:	4413      	add	r3, r2
 800c812:	b299      	uxth	r1, r3
 800c814:	4b3b      	ldr	r3, [pc, #236]	; (800c904 <tcp_receive+0xfdc>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	b29a      	uxth	r2, r3
 800c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	1a8a      	subs	r2, r1, r2
 800c820:	b292      	uxth	r2, r2
 800c822:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	891b      	ldrh	r3, [r3, #8]
 800c830:	4619      	mov	r1, r3
 800c832:	4610      	mov	r0, r2
 800c834:	f7fb feea 	bl	800860c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	891c      	ldrh	r4, [r3, #8]
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	899b      	ldrh	r3, [r3, #12]
 800c846:	b29b      	uxth	r3, r3
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fa ff2a 	bl	80076a2 <lwip_htons>
 800c84e:	4603      	mov	r3, r0
 800c850:	f003 0303 	and.w	r3, r3, #3
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <tcp_receive+0xf34>
 800c858:	2301      	movs	r3, #1
 800c85a:	e000      	b.n	800c85e <tcp_receive+0xf36>
 800c85c:	2300      	movs	r3, #0
 800c85e:	4423      	add	r3, r4
 800c860:	b29a      	uxth	r2, r3
 800c862:	4b2a      	ldr	r3, [pc, #168]	; (800c90c <tcp_receive+0xfe4>)
 800c864:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c866:	4b29      	ldr	r3, [pc, #164]	; (800c90c <tcp_receive+0xfe4>)
 800c868:	881b      	ldrh	r3, [r3, #0]
 800c86a:	461a      	mov	r2, r3
 800c86c:	4b25      	ldr	r3, [pc, #148]	; (800c904 <tcp_receive+0xfdc>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	441a      	add	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c876:	6879      	ldr	r1, [r7, #4]
 800c878:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c87a:	440b      	add	r3, r1
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d01b      	beq.n	800c8b8 <tcp_receive+0xf90>
 800c880:	4b23      	ldr	r3, [pc, #140]	; (800c910 <tcp_receive+0xfe8>)
 800c882:	f240 627a 	movw	r2, #1658	; 0x67a
 800c886:	4923      	ldr	r1, [pc, #140]	; (800c914 <tcp_receive+0xfec>)
 800c888:	4823      	ldr	r0, [pc, #140]	; (800c918 <tcp_receive+0xff0>)
 800c88a:	f004 fa89 	bl	8010da0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c88e:	e013      	b.n	800c8b8 <tcp_receive+0xf90>
              }
            }
            prev = next;
 800c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c892:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f47f aeab 	bne.w	800c5f8 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 800c8a2:	e00f      	b.n	800c8c4 <tcp_receive+0xf9c>
                break;
 800c8a4:	bf00      	nop
 800c8a6:	e00d      	b.n	800c8c4 <tcp_receive+0xf9c>
                break;
 800c8a8:	bf00      	nop
 800c8aa:	e00b      	b.n	800c8c4 <tcp_receive+0xf9c>
                  break;
 800c8ac:	bf00      	nop
 800c8ae:	e009      	b.n	800c8c4 <tcp_receive+0xf9c>
                  break;
 800c8b0:	bf00      	nop
 800c8b2:	e007      	b.n	800c8c4 <tcp_receive+0xf9c>
                  break;
 800c8b4:	bf00      	nop
 800c8b6:	e005      	b.n	800c8c4 <tcp_receive+0xf9c>
                break;
 800c8b8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800c8ba:	e003      	b.n	800c8c4 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 ff4f 	bl	800d760 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c8c2:	e01a      	b.n	800c8fa <tcp_receive+0xfd2>
 800c8c4:	e019      	b.n	800c8fa <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c8c6:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <tcp_receive+0xfdc>)
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	db0a      	blt.n	800c8ea <tcp_receive+0xfc2>
 800c8d4:	4b0b      	ldr	r3, [pc, #44]	; (800c904 <tcp_receive+0xfdc>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8dc:	6879      	ldr	r1, [r7, #4]
 800c8de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c8e0:	440b      	add	r3, r1
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	dd07      	ble.n	800c8fa <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	7e9b      	ldrb	r3, [r3, #26]
 800c8ee:	f043 0302 	orr.w	r3, r3, #2
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800c8f8:	e7ff      	b.n	800c8fa <tcp_receive+0xfd2>
 800c8fa:	bf00      	nop
 800c8fc:	3734      	adds	r7, #52	; 0x34
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c902:	bf00      	nop
 800c904:	20007024 	.word	0x20007024
 800c908:	20007004 	.word	0x20007004
 800c90c:	2000702e 	.word	0x2000702e
 800c910:	08013130 	.word	0x08013130
 800c914:	080133fc 	.word	0x080133fc
 800c918:	08013174 	.word	0x08013174

0800c91c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800c922:	4b18      	ldr	r3, [pc, #96]	; (800c984 <tcp_getoptbyte+0x68>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d005      	beq.n	800c936 <tcp_getoptbyte+0x1a>
 800c92a:	4b17      	ldr	r3, [pc, #92]	; (800c988 <tcp_getoptbyte+0x6c>)
 800c92c:	881a      	ldrh	r2, [r3, #0]
 800c92e:	4b17      	ldr	r3, [pc, #92]	; (800c98c <tcp_getoptbyte+0x70>)
 800c930:	881b      	ldrh	r3, [r3, #0]
 800c932:	429a      	cmp	r2, r3
 800c934:	d20e      	bcs.n	800c954 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800c936:	4b16      	ldr	r3, [pc, #88]	; (800c990 <tcp_getoptbyte+0x74>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3314      	adds	r3, #20
 800c93c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800c93e:	4b12      	ldr	r3, [pc, #72]	; (800c988 <tcp_getoptbyte+0x6c>)
 800c940:	881b      	ldrh	r3, [r3, #0]
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	b291      	uxth	r1, r2
 800c946:	4a10      	ldr	r2, [pc, #64]	; (800c988 <tcp_getoptbyte+0x6c>)
 800c948:	8011      	strh	r1, [r2, #0]
 800c94a:	461a      	mov	r2, r3
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	4413      	add	r3, r2
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	e010      	b.n	800c976 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800c954:	4b0c      	ldr	r3, [pc, #48]	; (800c988 <tcp_getoptbyte+0x6c>)
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	b291      	uxth	r1, r2
 800c95c:	4a0a      	ldr	r2, [pc, #40]	; (800c988 <tcp_getoptbyte+0x6c>)
 800c95e:	8011      	strh	r1, [r2, #0]
 800c960:	b2da      	uxtb	r2, r3
 800c962:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <tcp_getoptbyte+0x70>)
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	b2db      	uxtb	r3, r3
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800c96c:	4b05      	ldr	r3, [pc, #20]	; (800c984 <tcp_getoptbyte+0x68>)
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	79fb      	ldrb	r3, [r7, #7]
 800c972:	4413      	add	r3, r2
 800c974:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c976:	4618      	mov	r0, r3
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	2000701c 	.word	0x2000701c
 800c988:	20007020 	.word	0x20007020
 800c98c:	2000701a 	.word	0x2000701a
 800c990:	20007014 	.word	0x20007014

0800c994 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c99c:	4b2e      	ldr	r3, [pc, #184]	; (800ca58 <tcp_parseopt+0xc4>)
 800c99e:	881b      	ldrh	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d055      	beq.n	800ca50 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c9a4:	4b2d      	ldr	r3, [pc, #180]	; (800ca5c <tcp_parseopt+0xc8>)
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	801a      	strh	r2, [r3, #0]
 800c9aa:	e045      	b.n	800ca38 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800c9ac:	f7ff ffb6 	bl	800c91c <tcp_getoptbyte>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d006      	beq.n	800c9c8 <tcp_parseopt+0x34>
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	dc2b      	bgt.n	800ca16 <tcp_parseopt+0x82>
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d041      	beq.n	800ca46 <tcp_parseopt+0xb2>
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d127      	bne.n	800ca16 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800c9c6:	e037      	b.n	800ca38 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c9c8:	f7ff ffa8 	bl	800c91c <tcp_getoptbyte>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	d13b      	bne.n	800ca4a <tcp_parseopt+0xb6>
 800c9d2:	4b22      	ldr	r3, [pc, #136]	; (800ca5c <tcp_parseopt+0xc8>)
 800c9d4:	881b      	ldrh	r3, [r3, #0]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	4a1f      	ldr	r2, [pc, #124]	; (800ca58 <tcp_parseopt+0xc4>)
 800c9da:	8812      	ldrh	r2, [r2, #0]
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	da34      	bge.n	800ca4a <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800c9e0:	f7ff ff9c 	bl	800c91c <tcp_getoptbyte>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	021b      	lsls	r3, r3, #8
 800c9ea:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800c9ec:	f7ff ff96 	bl	800c91c <tcp_getoptbyte>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	89bb      	ldrh	r3, [r7, #12]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c9fa:	89bb      	ldrh	r3, [r7, #12]
 800c9fc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ca00:	d804      	bhi.n	800ca0c <tcp_parseopt+0x78>
 800ca02:	89bb      	ldrh	r3, [r7, #12]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <tcp_parseopt+0x78>
 800ca08:	89ba      	ldrh	r2, [r7, #12]
 800ca0a:	e001      	b.n	800ca10 <tcp_parseopt+0x7c>
 800ca0c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800ca14:	e010      	b.n	800ca38 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800ca16:	f7ff ff81 	bl	800c91c <tcp_getoptbyte>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800ca1e:	7afb      	ldrb	r3, [r7, #11]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d914      	bls.n	800ca4e <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800ca24:	7afb      	ldrb	r3, [r7, #11]
 800ca26:	b29a      	uxth	r2, r3
 800ca28:	4b0c      	ldr	r3, [pc, #48]	; (800ca5c <tcp_parseopt+0xc8>)
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	3b02      	subs	r3, #2
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	4b09      	ldr	r3, [pc, #36]	; (800ca5c <tcp_parseopt+0xc8>)
 800ca36:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ca38:	4b08      	ldr	r3, [pc, #32]	; (800ca5c <tcp_parseopt+0xc8>)
 800ca3a:	881a      	ldrh	r2, [r3, #0]
 800ca3c:	4b06      	ldr	r3, [pc, #24]	; (800ca58 <tcp_parseopt+0xc4>)
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d3b3      	bcc.n	800c9ac <tcp_parseopt+0x18>
 800ca44:	e004      	b.n	800ca50 <tcp_parseopt+0xbc>
        return;
 800ca46:	bf00      	nop
 800ca48:	e002      	b.n	800ca50 <tcp_parseopt+0xbc>
          return;
 800ca4a:	bf00      	nop
 800ca4c:	e000      	b.n	800ca50 <tcp_parseopt+0xbc>
          return;
 800ca4e:	bf00      	nop
      }
    }
  }
}
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	20007018 	.word	0x20007018
 800ca5c:	20007020 	.word	0x20007020

0800ca60 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ca60:	b480      	push	{r7}
 800ca62:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ca64:	4b05      	ldr	r3, [pc, #20]	; (800ca7c <tcp_trigger_input_pcb_close+0x1c>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	f043 0310 	orr.w	r3, r3, #16
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	4b03      	ldr	r3, [pc, #12]	; (800ca7c <tcp_trigger_input_pcb_close+0x1c>)
 800ca70:	701a      	strb	r2, [r3, #0]
}
 800ca72:	bf00      	nop
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	20007031 	.word	0x20007031

0800ca80 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	607b      	str	r3, [r7, #4]
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	817b      	strh	r3, [r7, #10]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ca92:	897a      	ldrh	r2, [r7, #10]
 800ca94:	893b      	ldrh	r3, [r7, #8]
 800ca96:	4413      	add	r3, r2
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	3314      	adds	r3, #20
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	2200      	movs	r2, #0
 800caa0:	4619      	mov	r1, r3
 800caa2:	2001      	movs	r0, #1
 800caa4:	f7fb fbae 	bl	8008204 <pbuf_alloc>
 800caa8:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d056      	beq.n	800cb5e <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cab0:	897b      	ldrh	r3, [r7, #10]
 800cab2:	3313      	adds	r3, #19
 800cab4:	697a      	ldr	r2, [r7, #20]
 800cab6:	8952      	ldrh	r2, [r2, #10]
 800cab8:	4293      	cmp	r3, r2
 800caba:	db05      	blt.n	800cac8 <tcp_output_alloc_header+0x48>
 800cabc:	4b2a      	ldr	r3, [pc, #168]	; (800cb68 <tcp_output_alloc_header+0xe8>)
 800cabe:	2272      	movs	r2, #114	; 0x72
 800cac0:	492a      	ldr	r1, [pc, #168]	; (800cb6c <tcp_output_alloc_header+0xec>)
 800cac2:	482b      	ldr	r0, [pc, #172]	; (800cb70 <tcp_output_alloc_header+0xf0>)
 800cac4:	f004 f96c 	bl	8010da0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	8adb      	ldrh	r3, [r3, #22]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fa fde5 	bl	80076a2 <lwip_htons>
 800cad8:	4603      	mov	r3, r0
 800cada:	461a      	mov	r2, r3
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	8b1b      	ldrh	r3, [r3, #24]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fa fddc 	bl	80076a2 <lwip_htons>
 800caea:	4603      	mov	r3, r0
 800caec:	461a      	mov	r2, r3
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fa fdde 	bl	80076be <lwip_htonl>
 800cb02:	4602      	mov	r2, r0
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800cb08:	897b      	ldrh	r3, [r7, #10]
 800cb0a:	089b      	lsrs	r3, r3, #2
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	3305      	adds	r3, #5
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	031b      	lsls	r3, r3, #12
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	f043 0310 	orr.w	r3, r3, #16
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fa fdc0 	bl	80076a2 <lwip_htons>
 800cb22:	4603      	mov	r3, r0
 800cb24:	461a      	mov	r2, r3
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fa fdb7 	bl	80076a2 <lwip_htons>
 800cb34:	4603      	mov	r3, r0
 800cb36:	461a      	mov	r2, r3
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	741a      	strb	r2, [r3, #16]
 800cb42:	2200      	movs	r2, #0
 800cb44:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	749a      	strb	r2, [r3, #18]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cb58:	441a      	add	r2, r3
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cb5e:	697b      	ldr	r3, [r7, #20]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3718      	adds	r7, #24
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	080134b8 	.word	0x080134b8
 800cb6c:	080134ec 	.word	0x080134ec
 800cb70:	0801351c 	.word	0x0801351c

0800cb74 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cb74:	b590      	push	{r4, r7, lr}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d02d      	beq.n	800cbe0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb88:	60fb      	str	r3, [r7, #12]
 800cb8a:	e002      	b.n	800cb92 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1f8      	bne.n	800cb8c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	899b      	ldrh	r3, [r3, #12]
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fa fd7d 	bl	80076a2 <lwip_htons>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f003 0307 	and.w	r3, r3, #7
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d116      	bne.n	800cbe0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	899b      	ldrh	r3, [r3, #12]
 800cbb8:	b29c      	uxth	r4, r3
 800cbba:	2001      	movs	r0, #1
 800cbbc:	f7fa fd71 	bl	80076a2 <lwip_htons>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	4322      	orrs	r2, r4
 800cbca:	b292      	uxth	r2, r2
 800cbcc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	7e9b      	ldrb	r3, [r3, #26]
 800cbd2:	f043 0320 	orr.w	r3, r3, #32
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	e004      	b.n	800cbea <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fcc0 	bl	800d568 <tcp_enqueue_flags>
 800cbe8:	4603      	mov	r3, r0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd90      	pop	{r4, r7, pc}
	...

0800cbf4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800cbf4:	b590      	push	{r4, r7, lr}
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	603b      	str	r3, [r7, #0]
 800cc00:	4613      	mov	r3, r2
 800cc02:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cc04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	f003 0304 	and.w	r3, r3, #4
 800cc10:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cc12:	2003      	movs	r0, #3
 800cc14:	f7fb f8f2 	bl	8007dfc <memp_malloc>
 800cc18:	6138      	str	r0, [r7, #16]
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d104      	bne.n	800cc2a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cc20:	68b8      	ldr	r0, [r7, #8]
 800cc22:	f7fb fe67 	bl	80088f4 <pbuf_free>
    return NULL;
 800cc26:	2300      	movs	r3, #0
 800cc28:	e061      	b.n	800ccee <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cc30:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	68ba      	ldr	r2, [r7, #8]
 800cc3c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	891a      	ldrh	r2, [r3, #8]
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d205      	bcs.n	800cc56 <tcp_create_segment+0x62>
 800cc4a:	4b2b      	ldr	r3, [pc, #172]	; (800ccf8 <tcp_create_segment+0x104>)
 800cc4c:	22ba      	movs	r2, #186	; 0xba
 800cc4e:	492b      	ldr	r1, [pc, #172]	; (800ccfc <tcp_create_segment+0x108>)
 800cc50:	482b      	ldr	r0, [pc, #172]	; (800cd00 <tcp_create_segment+0x10c>)
 800cc52:	f004 f8a5 	bl	8010da0 <iprintf>
  seg->len = p->tot_len - optlen;
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	891a      	ldrh	r2, [r3, #8]
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800cc66:	2114      	movs	r1, #20
 800cc68:	68b8      	ldr	r0, [r7, #8]
 800cc6a:	f7fb fe1f 	bl	80088ac <pbuf_header>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d004      	beq.n	800cc7e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cc74:	6938      	ldr	r0, [r7, #16]
 800cc76:	f7fd f931 	bl	8009edc <tcp_seg_free>
    return NULL;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	e037      	b.n	800ccee <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	685a      	ldr	r2, [r3, #4]
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	8ada      	ldrh	r2, [r3, #22]
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	68dc      	ldr	r4, [r3, #12]
 800cc90:	4610      	mov	r0, r2
 800cc92:	f7fa fd06 	bl	80076a2 <lwip_htons>
 800cc96:	4603      	mov	r3, r0
 800cc98:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	8b1a      	ldrh	r2, [r3, #24]
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	68dc      	ldr	r4, [r3, #12]
 800cca2:	4610      	mov	r0, r2
 800cca4:	f7fa fcfd 	bl	80076a2 <lwip_htons>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	68dc      	ldr	r4, [r3, #12]
 800ccb0:	6838      	ldr	r0, [r7, #0]
 800ccb2:	f7fa fd04 	bl	80076be <lwip_htonl>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800ccba:	7dfb      	ldrb	r3, [r7, #23]
 800ccbc:	089b      	lsrs	r3, r3, #2
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	3305      	adds	r3, #5
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	031b      	lsls	r3, r3, #12
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	79fb      	ldrb	r3, [r7, #7]
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	68dc      	ldr	r4, [r3, #12]
 800ccd6:	4610      	mov	r0, r2
 800ccd8:	f7fa fce3 	bl	80076a2 <lwip_htons>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	2200      	movs	r2, #0
 800cce6:	749a      	strb	r2, [r3, #18]
 800cce8:	2200      	movs	r2, #0
 800ccea:	74da      	strb	r2, [r3, #19]
  return seg;
 800ccec:	693b      	ldr	r3, [r7, #16]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	371c      	adds	r7, #28
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd90      	pop	{r4, r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	080134b8 	.word	0x080134b8
 800ccfc:	08013544 	.word	0x08013544
 800cd00:	0801351c 	.word	0x0801351c

0800cd04 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	607b      	str	r3, [r7, #4]
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	73fb      	strb	r3, [r7, #15]
 800cd10:	460b      	mov	r3, r1
 800cd12:	81bb      	strh	r3, [r7, #12]
 800cd14:	4613      	mov	r3, r2
 800cd16:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800cd18:	89bb      	ldrh	r3, [r7, #12]
 800cd1a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800cd1c:	89ba      	ldrh	r2, [r7, #12]
 800cd1e:	897b      	ldrh	r3, [r7, #10]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d221      	bcs.n	800cd68 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cd24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd28:	f003 0302 	and.w	r3, r3, #2
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d111      	bne.n	800cd54 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800cd30:	6a3b      	ldr	r3, [r7, #32]
 800cd32:	7e9b      	ldrb	r3, [r3, #26]
 800cd34:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d115      	bne.n	800cd68 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800cd3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d007      	beq.n	800cd54 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d103      	bne.n	800cd54 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d009      	beq.n	800cd68 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800cd54:	89bb      	ldrh	r3, [r7, #12]
 800cd56:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800cd5a:	f023 0203 	bic.w	r2, r3, #3
 800cd5e:	897b      	ldrh	r3, [r7, #10]
 800cd60:	4293      	cmp	r3, r2
 800cd62:	bf28      	it	cs
 800cd64:	4613      	movcs	r3, r2
 800cd66:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800cd68:	8af9      	ldrh	r1, [r7, #22]
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fb fa48 	bl	8008204 <pbuf_alloc>
 800cd74:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d101      	bne.n	800cd80 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	e019      	b.n	800cdb4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d006      	beq.n	800cd96 <tcp_pbuf_prealloc+0x92>
 800cd88:	4b0c      	ldr	r3, [pc, #48]	; (800cdbc <tcp_pbuf_prealloc+0xb8>)
 800cd8a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800cd8e:	490c      	ldr	r1, [pc, #48]	; (800cdc0 <tcp_pbuf_prealloc+0xbc>)
 800cd90:	480c      	ldr	r0, [pc, #48]	; (800cdc4 <tcp_pbuf_prealloc+0xc0>)
 800cd92:	f004 f805 	bl	8010da0 <iprintf>
  *oversize = p->len - length;
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	895a      	ldrh	r2, [r3, #10]
 800cd9a:	89bb      	ldrh	r3, [r7, #12]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	89ba      	ldrh	r2, [r7, #12]
 800cda8:	811a      	strh	r2, [r3, #8]
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	891a      	ldrh	r2, [r3, #8]
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	815a      	strh	r2, [r3, #10]
  return p;
 800cdb2:	693b      	ldr	r3, [r7, #16]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3718      	adds	r7, #24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	080134b8 	.word	0x080134b8
 800cdc0:	0801355c 	.word	0x0801355c
 800cdc4:	0801351c 	.word	0x0801351c

0800cdc8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7d1b      	ldrb	r3, [r3, #20]
 800cdd8:	2b04      	cmp	r3, #4
 800cdda:	d00e      	beq.n	800cdfa <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800cde0:	2b07      	cmp	r3, #7
 800cde2:	d00a      	beq.n	800cdfa <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d006      	beq.n	800cdfa <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800cdf0:	2b03      	cmp	r3, #3
 800cdf2:	d002      	beq.n	800cdfa <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800cdf4:	f06f 030a 	mvn.w	r3, #10
 800cdf8:	e04f      	b.n	800ce9a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800cdfa:	887b      	ldrh	r3, [r7, #2]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <tcp_write_checks+0x3c>
    return ERR_OK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	e04a      	b.n	800ce9a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce0a:	887a      	ldrh	r2, [r7, #2]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d909      	bls.n	800ce24 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	7e9b      	ldrb	r3, [r3, #26]
 800ce14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800ce1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce22:	e03a      	b.n	800ce9a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce2a:	2b08      	cmp	r3, #8
 800ce2c:	d806      	bhi.n	800ce3c <tcp_write_checks+0x74>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce34:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d909      	bls.n	800ce50 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	7e9b      	ldrb	r3, [r3, #26]
 800ce40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800ce4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce4e:	e024      	b.n	800ce9a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00f      	beq.n	800ce7a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d11a      	bne.n	800ce98 <tcp_write_checks+0xd0>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d116      	bne.n	800ce98 <tcp_write_checks+0xd0>
 800ce6a:	4b0e      	ldr	r3, [pc, #56]	; (800cea4 <tcp_write_checks+0xdc>)
 800ce6c:	f240 1255 	movw	r2, #341	; 0x155
 800ce70:	490d      	ldr	r1, [pc, #52]	; (800cea8 <tcp_write_checks+0xe0>)
 800ce72:	480e      	ldr	r0, [pc, #56]	; (800ceac <tcp_write_checks+0xe4>)
 800ce74:	f003 ff94 	bl	8010da0 <iprintf>
 800ce78:	e00e      	b.n	800ce98 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d103      	bne.n	800ce8a <tcp_write_checks+0xc2>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d006      	beq.n	800ce98 <tcp_write_checks+0xd0>
 800ce8a:	4b06      	ldr	r3, [pc, #24]	; (800cea4 <tcp_write_checks+0xdc>)
 800ce8c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ce90:	4907      	ldr	r1, [pc, #28]	; (800ceb0 <tcp_write_checks+0xe8>)
 800ce92:	4806      	ldr	r0, [pc, #24]	; (800ceac <tcp_write_checks+0xe4>)
 800ce94:	f003 ff84 	bl	8010da0 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	080134b8 	.word	0x080134b8
 800cea8:	08013570 	.word	0x08013570
 800ceac:	0801351c 	.word	0x0801351c
 800ceb0:	080135ac 	.word	0x080135ac

0800ceb4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ceb4:	b590      	push	{r4, r7, lr}
 800ceb6:	b09b      	sub	sp, #108	; 0x6c
 800ceb8:	af04      	add	r7, sp, #16
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	4611      	mov	r1, r2
 800cec0:	461a      	mov	r2, r3
 800cec2:	460b      	mov	r3, r1
 800cec4:	80fb      	strh	r3, [r7, #6]
 800cec6:	4613      	mov	r3, r2
 800cec8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ceca:	2300      	movs	r3, #0
 800cecc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	653b      	str	r3, [r7, #80]	; 0x50
 800ced2:	2300      	movs	r3, #0
 800ced4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ced6:	2300      	movs	r3, #0
 800ced8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ceda:	2300      	movs	r3, #0
 800cedc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800cede:	2300      	movs	r3, #0
 800cee0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800cef8:	2300      	movs	r3, #0
 800cefa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf02:	085b      	lsrs	r3, r3, #1
 800cf04:	b29a      	uxth	r2, r3
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	bf28      	it	cs
 800cf0e:	4613      	movcs	r3, r2
 800cf10:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800cf12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <tcp_write+0x6a>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf1c:	e000      	b.n	800cf20 <tcp_write+0x6c>
 800cf1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf20:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d109      	bne.n	800cf3c <tcp_write+0x88>
 800cf28:	4b92      	ldr	r3, [pc, #584]	; (800d174 <tcp_write+0x2c0>)
 800cf2a:	f240 1291 	movw	r2, #401	; 0x191
 800cf2e:	4992      	ldr	r1, [pc, #584]	; (800d178 <tcp_write+0x2c4>)
 800cf30:	4892      	ldr	r0, [pc, #584]	; (800d17c <tcp_write+0x2c8>)
 800cf32:	f003 ff35 	bl	8010da0 <iprintf>
 800cf36:	f06f 030f 	mvn.w	r3, #15
 800cf3a:	e30a      	b.n	800d552 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800cf3c:	88fb      	ldrh	r3, [r7, #6]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f7ff ff41 	bl	800cdc8 <tcp_write_checks>
 800cf46:	4603      	mov	r3, r0
 800cf48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800cf4c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <tcp_write+0xa6>
    return err;
 800cf54:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cf58:	e2fb      	b.n	800d552 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f000 80f4 	beq.w	800d156 <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf72:	653b      	str	r3, [r7, #80]	; 0x50
 800cf74:	e002      	b.n	800cf7c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800cf76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1f8      	bne.n	800cf76 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800cf84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf86:	7a9b      	ldrb	r3, [r3, #10]
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	f003 0304 	and.w	r3, r3, #4
 800cf90:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cf92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf96:	891b      	ldrh	r3, [r3, #8]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	8c3b      	ldrh	r3, [r7, #32]
 800cf9c:	440b      	add	r3, r1
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	da06      	bge.n	800cfb0 <tcp_write+0xfc>
 800cfa2:	4b74      	ldr	r3, [pc, #464]	; (800d174 <tcp_write+0x2c0>)
 800cfa4:	f240 12c7 	movw	r2, #455	; 0x1c7
 800cfa8:	4975      	ldr	r1, [pc, #468]	; (800d180 <tcp_write+0x2cc>)
 800cfaa:	4874      	ldr	r0, [pc, #464]	; (800d17c <tcp_write+0x2c8>)
 800cfac:	f003 fef8 	bl	8010da0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cfb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfb2:	891a      	ldrh	r2, [r3, #8]
 800cfb4:	8c3b      	ldrh	r3, [r7, #32]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cfc6:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800cfc8:	8a7b      	ldrh	r3, [r7, #18]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d026      	beq.n	800d01c <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800cfce:	8a7b      	ldrh	r3, [r7, #18]
 800cfd0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d206      	bcs.n	800cfe4 <tcp_write+0x130>
 800cfd6:	4b67      	ldr	r3, [pc, #412]	; (800d174 <tcp_write+0x2c0>)
 800cfd8:	f240 12d9 	movw	r2, #473	; 0x1d9
 800cfdc:	4969      	ldr	r1, [pc, #420]	; (800d184 <tcp_write+0x2d0>)
 800cfde:	4867      	ldr	r0, [pc, #412]	; (800d17c <tcp_write+0x2c8>)
 800cfe0:	f003 fede 	bl	8010da0 <iprintf>
      seg = last_unsent;
 800cfe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfe6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800cfe8:	8a7b      	ldrh	r3, [r7, #18]
 800cfea:	88fa      	ldrh	r2, [r7, #6]
 800cfec:	4293      	cmp	r3, r2
 800cfee:	bf28      	it	cs
 800cff0:	4613      	movcs	r3, r2
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cff6:	4293      	cmp	r3, r2
 800cff8:	bf28      	it	cs
 800cffa:	4613      	movcs	r3, r2
 800cffc:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800cffe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d002:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d004:	4413      	add	r3, r2
 800d006:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d00a:	8a7a      	ldrh	r2, [r7, #18]
 800d00c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	b29b      	uxth	r3, r3
 800d012:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d014:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d016:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d01c:	8a7b      	ldrh	r3, [r7, #18]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00b      	beq.n	800d03a <tcp_write+0x186>
 800d022:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d026:	88fb      	ldrh	r3, [r7, #6]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d006      	beq.n	800d03a <tcp_write+0x186>
 800d02c:	4b51      	ldr	r3, [pc, #324]	; (800d174 <tcp_write+0x2c0>)
 800d02e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d032:	4955      	ldr	r1, [pc, #340]	; (800d188 <tcp_write+0x2d4>)
 800d034:	4851      	ldr	r0, [pc, #324]	; (800d17c <tcp_write+0x2c8>)
 800d036:	f003 feb3 	bl	8010da0 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d03a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d03e:	88fb      	ldrh	r3, [r7, #6]
 800d040:	429a      	cmp	r2, r3
 800d042:	f080 8169 	bcs.w	800d318 <tcp_write+0x464>
 800d046:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f000 8165 	beq.w	800d318 <tcp_write+0x464>
 800d04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d050:	891b      	ldrh	r3, [r3, #8]
 800d052:	2b00      	cmp	r3, #0
 800d054:	f000 8160 	beq.w	800d318 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d058:	88fa      	ldrh	r2, [r7, #6]
 800d05a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d05e:	1ad2      	subs	r2, r2, r3
 800d060:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d062:	4293      	cmp	r3, r2
 800d064:	bfa8      	it	ge
 800d066:	4613      	movge	r3, r2
 800d068:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d06a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d06c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d06e:	797b      	ldrb	r3, [r7, #5]
 800d070:	f003 0301 	and.w	r3, r3, #1
 800d074:	2b00      	cmp	r3, #0
 800d076:	d027      	beq.n	800d0c8 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d078:	f107 0012 	add.w	r0, r7, #18
 800d07c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d07e:	8bf9      	ldrh	r1, [r7, #30]
 800d080:	2301      	movs	r3, #1
 800d082:	9302      	str	r3, [sp, #8]
 800d084:	797b      	ldrb	r3, [r7, #5]
 800d086:	9301      	str	r3, [sp, #4]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	4603      	mov	r3, r0
 800d08e:	2004      	movs	r0, #4
 800d090:	f7ff fe38 	bl	800cd04 <tcp_pbuf_prealloc>
 800d094:	6578      	str	r0, [r7, #84]	; 0x54
 800d096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 8228 	beq.w	800d4ee <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d09e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0a0:	6858      	ldr	r0, [r3, #4]
 800d0a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	8bfa      	ldrh	r2, [r7, #30]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	f003 fd81 	bl	8010bb4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d0b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d0b4:	f7fb fcb2 	bl	8008a1c <pbuf_clen>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0c0:	4413      	add	r3, r2
 800d0c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d0c6:	e03f      	b.n	800d148 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d0c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ce:	e002      	b.n	800d0d6 <tcp_write+0x222>
 800d0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	637b      	str	r3, [r7, #52]	; 0x34
 800d0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1f8      	bne.n	800d0d0 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e0:	7b1b      	ldrb	r3, [r3, #12]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d115      	bne.n	800d112 <tcp_write+0x25e>
 800d0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0ec:	8952      	ldrh	r2, [r2, #10]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d10d      	bne.n	800d112 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d0f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d006      	beq.n	800d10c <tcp_write+0x258>
 800d0fe:	4b1d      	ldr	r3, [pc, #116]	; (800d174 <tcp_write+0x2c0>)
 800d100:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800d104:	4921      	ldr	r1, [pc, #132]	; (800d18c <tcp_write+0x2d8>)
 800d106:	481d      	ldr	r0, [pc, #116]	; (800d17c <tcp_write+0x2c8>)
 800d108:	f003 fe4a 	bl	8010da0 <iprintf>
          extendlen = seglen;
 800d10c:	8bfb      	ldrh	r3, [r7, #30]
 800d10e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d110:	e01a      	b.n	800d148 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d112:	8bfb      	ldrh	r3, [r7, #30]
 800d114:	2201      	movs	r2, #1
 800d116:	4619      	mov	r1, r3
 800d118:	2004      	movs	r0, #4
 800d11a:	f7fb f873 	bl	8008204 <pbuf_alloc>
 800d11e:	6578      	str	r0, [r7, #84]	; 0x54
 800d120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d122:	2b00      	cmp	r3, #0
 800d124:	f000 81e5 	beq.w	800d4f2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800d128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	441a      	add	r2, r3
 800d130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d132:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d134:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d136:	f7fb fc71 	bl	8008a1c <pbuf_clen>
 800d13a:	4603      	mov	r3, r0
 800d13c:	461a      	mov	r2, r3
 800d13e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d142:	4413      	add	r3, r2
 800d144:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d148:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d14c:	8bfb      	ldrh	r3, [r7, #30]
 800d14e:	4413      	add	r3, r2
 800d150:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d154:	e0e0      	b.n	800d318 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f000 80db 	beq.w	800d318 <tcp_write+0x464>
 800d162:	4b04      	ldr	r3, [pc, #16]	; (800d174 <tcp_write+0x2c0>)
 800d164:	f44f 7209 	mov.w	r2, #548	; 0x224
 800d168:	4909      	ldr	r1, [pc, #36]	; (800d190 <tcp_write+0x2dc>)
 800d16a:	4804      	ldr	r0, [pc, #16]	; (800d17c <tcp_write+0x2c8>)
 800d16c:	f003 fe18 	bl	8010da0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d170:	e0d2      	b.n	800d318 <tcp_write+0x464>
 800d172:	bf00      	nop
 800d174:	080134b8 	.word	0x080134b8
 800d178:	080135e0 	.word	0x080135e0
 800d17c:	0801351c 	.word	0x0801351c
 800d180:	08013614 	.word	0x08013614
 800d184:	0801362c 	.word	0x0801362c
 800d188:	0801364c 	.word	0x0801364c
 800d18c:	0801366c 	.word	0x0801366c
 800d190:	08013698 	.word	0x08013698
    struct pbuf *p;
    u16_t left = len - pos;
 800d194:	88fa      	ldrh	r2, [r7, #6]
 800d196:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d19e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1a6:	1ad3      	subs	r3, r2, r3
 800d1a8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d1aa:	8b7a      	ldrh	r2, [r7, #26]
 800d1ac:	8bbb      	ldrh	r3, [r7, #28]
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	bf28      	it	cs
 800d1b2:	4613      	movcs	r3, r2
 800d1b4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d1b6:	797b      	ldrb	r3, [r7, #5]
 800d1b8:	f003 0301 	and.w	r3, r3, #1
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d036      	beq.n	800d22e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d1c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	8b3b      	ldrh	r3, [r7, #24]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	b299      	uxth	r1, r3
 800d1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	bf0c      	ite	eq
 800d1d2:	2301      	moveq	r3, #1
 800d1d4:	2300      	movne	r3, #0
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	f107 0012 	add.w	r0, r7, #18
 800d1dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1de:	9302      	str	r3, [sp, #8]
 800d1e0:	797b      	ldrb	r3, [r7, #5]
 800d1e2:	9301      	str	r3, [sp, #4]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	f7ff fd8a 	bl	800cd04 <tcp_pbuf_prealloc>
 800d1f0:	6338      	str	r0, [r7, #48]	; 0x30
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 817e 	beq.w	800d4f6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	895b      	ldrh	r3, [r3, #10]
 800d1fe:	8b3a      	ldrh	r2, [r7, #24]
 800d200:	429a      	cmp	r2, r3
 800d202:	d906      	bls.n	800d212 <tcp_write+0x35e>
 800d204:	4b8f      	ldr	r3, [pc, #572]	; (800d444 <tcp_write+0x590>)
 800d206:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d20a:	498f      	ldr	r1, [pc, #572]	; (800d448 <tcp_write+0x594>)
 800d20c:	488f      	ldr	r0, [pc, #572]	; (800d44c <tcp_write+0x598>)
 800d20e:	f003 fdc7 	bl	8010da0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800d212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d21a:	18d0      	adds	r0, r2, r3
 800d21c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d220:	68ba      	ldr	r2, [r7, #8]
 800d222:	4413      	add	r3, r2
 800d224:	8b3a      	ldrh	r2, [r7, #24]
 800d226:	4619      	mov	r1, r3
 800d228:	f003 fcc4 	bl	8010bb4 <memcpy>
 800d22c:	e02e      	b.n	800d28c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d22e:	8a7b      	ldrh	r3, [r7, #18]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d006      	beq.n	800d242 <tcp_write+0x38e>
 800d234:	4b83      	ldr	r3, [pc, #524]	; (800d444 <tcp_write+0x590>)
 800d236:	f240 224b 	movw	r2, #587	; 0x24b
 800d23a:	4985      	ldr	r1, [pc, #532]	; (800d450 <tcp_write+0x59c>)
 800d23c:	4883      	ldr	r0, [pc, #524]	; (800d44c <tcp_write+0x598>)
 800d23e:	f003 fdaf 	bl	8010da0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d242:	8b3b      	ldrh	r3, [r7, #24]
 800d244:	2201      	movs	r2, #1
 800d246:	4619      	mov	r1, r3
 800d248:	2000      	movs	r0, #0
 800d24a:	f7fa ffdb 	bl	8008204 <pbuf_alloc>
 800d24e:	6178      	str	r0, [r7, #20]
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	2b00      	cmp	r3, #0
 800d254:	f000 8151 	beq.w	800d4fa <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800d258:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d25c:	68ba      	ldr	r2, [r7, #8]
 800d25e:	441a      	add	r2, r3
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d268:	b29b      	uxth	r3, r3
 800d26a:	2200      	movs	r2, #0
 800d26c:	4619      	mov	r1, r3
 800d26e:	2000      	movs	r0, #0
 800d270:	f7fa ffc8 	bl	8008204 <pbuf_alloc>
 800d274:	6338      	str	r0, [r7, #48]	; 0x30
 800d276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d103      	bne.n	800d284 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d27c:	6978      	ldr	r0, [r7, #20]
 800d27e:	f7fb fb39 	bl	80088f4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d282:	e13d      	b.n	800d500 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d284:	6979      	ldr	r1, [r7, #20]
 800d286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d288:	f7fb fc02 	bl	8008a90 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d28c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d28e:	f7fb fbc5 	bl	8008a1c <pbuf_clen>
 800d292:	4603      	mov	r3, r0
 800d294:	461a      	mov	r2, r3
 800d296:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d29a:	4413      	add	r3, r2
 800d29c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d2a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d2a4:	2b09      	cmp	r3, #9
 800d2a6:	d805      	bhi.n	800d2b4 <tcp_write+0x400>
 800d2a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d2ac:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d903      	bls.n	800d2bc <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d2b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2b6:	f7fb fb1d 	bl	80088f4 <pbuf_free>
      goto memerr;
 800d2ba:	e121      	b.n	800d500 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d2c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d2c4:	441a      	add	r2, r3
 800d2c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f7ff fc8e 	bl	800cbf4 <tcp_create_segment>
 800d2d8:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 810e 	beq.w	800d4fe <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d2e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <tcp_write+0x43a>
      queue = seg;
 800d2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ea:	647b      	str	r3, [r7, #68]	; 0x44
 800d2ec:	e00c      	b.n	800d308 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d106      	bne.n	800d302 <tcp_write+0x44e>
 800d2f4:	4b53      	ldr	r3, [pc, #332]	; (800d444 <tcp_write+0x590>)
 800d2f6:	f240 2285 	movw	r2, #645	; 0x285
 800d2fa:	4956      	ldr	r1, [pc, #344]	; (800d454 <tcp_write+0x5a0>)
 800d2fc:	4853      	ldr	r0, [pc, #332]	; (800d44c <tcp_write+0x598>)
 800d2fe:	f003 fd4f 	bl	8010da0 <iprintf>
      prev_seg->next = seg;
 800d302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d306:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d30a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d30c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d310:	8b3b      	ldrh	r3, [r7, #24]
 800d312:	4413      	add	r3, r2
 800d314:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d318:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d31c:	88fb      	ldrh	r3, [r7, #6]
 800d31e:	429a      	cmp	r2, r3
 800d320:	f4ff af38 	bcc.w	800d194 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d324:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d326:	2b00      	cmp	r3, #0
 800d328:	d02c      	beq.n	800d384 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d32a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d330:	e01e      	b.n	800d370 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800d332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d334:	891a      	ldrh	r2, [r3, #8]
 800d336:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d338:	4413      	add	r3, r2
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d110      	bne.n	800d36a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d34e:	8952      	ldrh	r2, [r2, #10]
 800d350:	4413      	add	r3, r2
 800d352:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d354:	68b9      	ldr	r1, [r7, #8]
 800d356:	4618      	mov	r0, r3
 800d358:	f003 fc2c 	bl	8010bb4 <memcpy>
        p->len += oversize_used;
 800d35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35e:	895a      	ldrh	r2, [r3, #10]
 800d360:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d362:	4413      	add	r3, r2
 800d364:	b29a      	uxth	r2, r3
 800d366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d368:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1dd      	bne.n	800d332 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800d376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d378:	891a      	ldrh	r2, [r3, #8]
 800d37a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d37c:	4413      	add	r3, r2
 800d37e:	b29a      	uxth	r2, r3
 800d380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d382:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d384:	8a7a      	ldrh	r2, [r7, #18]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d38c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d018      	beq.n	800d3c4 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d394:	2b00      	cmp	r3, #0
 800d396:	d106      	bne.n	800d3a6 <tcp_write+0x4f2>
 800d398:	4b2a      	ldr	r3, [pc, #168]	; (800d444 <tcp_write+0x590>)
 800d39a:	f240 22ba 	movw	r2, #698	; 0x2ba
 800d39e:	492e      	ldr	r1, [pc, #184]	; (800d458 <tcp_write+0x5a4>)
 800d3a0:	482a      	ldr	r0, [pc, #168]	; (800d44c <tcp_write+0x598>)
 800d3a2:	f003 fcfd 	bl	8010da0 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fb fb6f 	bl	8008a90 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3b4:	891a      	ldrh	r2, [r3, #8]
 800d3b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3b8:	891b      	ldrh	r3, [r3, #8]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3c0:	811a      	strh	r2, [r3, #8]
 800d3c2:	e037      	b.n	800d434 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800d3c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d034      	beq.n	800d434 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d003      	beq.n	800d3d8 <tcp_write+0x524>
 800d3d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d106      	bne.n	800d3e6 <tcp_write+0x532>
 800d3d8:	4b1a      	ldr	r3, [pc, #104]	; (800d444 <tcp_write+0x590>)
 800d3da:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800d3de:	491f      	ldr	r1, [pc, #124]	; (800d45c <tcp_write+0x5a8>)
 800d3e0:	481a      	ldr	r0, [pc, #104]	; (800d44c <tcp_write+0x598>)
 800d3e2:	f003 fcdd 	bl	8010da0 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d3e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3ec:	e009      	b.n	800d402 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800d3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f0:	891a      	ldrh	r2, [r3, #8]
 800d3f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d3f4:	4413      	add	r3, r2
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	62bb      	str	r3, [r7, #40]	; 0x28
 800d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1f1      	bne.n	800d3ee <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800d40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40c:	891a      	ldrh	r2, [r3, #8]
 800d40e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d410:	4413      	add	r3, r2
 800d412:	b29a      	uxth	r2, r3
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41a:	895a      	ldrh	r2, [r3, #10]
 800d41c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d41e:	4413      	add	r3, r2
 800d420:	b29a      	uxth	r2, r3
 800d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d424:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d428:	891a      	ldrh	r2, [r3, #8]
 800d42a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d42c:	4413      	add	r3, r2
 800d42e:	b29a      	uxth	r2, r3
 800d430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d432:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d436:	2b00      	cmp	r3, #0
 800d438:	d112      	bne.n	800d460 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d43e:	669a      	str	r2, [r3, #104]	; 0x68
 800d440:	e011      	b.n	800d466 <tcp_write+0x5b2>
 800d442:	bf00      	nop
 800d444:	080134b8 	.word	0x080134b8
 800d448:	080136c8 	.word	0x080136c8
 800d44c:	0801351c 	.word	0x0801351c
 800d450:	08013708 	.word	0x08013708
 800d454:	08013718 	.word	0x08013718
 800d458:	0801372c 	.word	0x0801372c
 800d45c:	08013764 	.word	0x08013764
  } else {
    last_unsent->next = queue;
 800d460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d464:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d46a:	88fb      	ldrh	r3, [r7, #6]
 800d46c:	441a      	add	r2, r3
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d478:	88fb      	ldrh	r3, [r7, #6]
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d48a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00e      	beq.n	800d4b6 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10a      	bne.n	800d4b6 <tcp_write+0x602>
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d106      	bne.n	800d4b6 <tcp_write+0x602>
 800d4a8:	4b2c      	ldr	r3, [pc, #176]	; (800d55c <tcp_write+0x6a8>)
 800d4aa:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800d4ae:	492c      	ldr	r1, [pc, #176]	; (800d560 <tcp_write+0x6ac>)
 800d4b0:	482c      	ldr	r0, [pc, #176]	; (800d564 <tcp_write+0x6b0>)
 800d4b2:	f003 fc75 	bl	8010da0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800d4b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d016      	beq.n	800d4ea <tcp_write+0x636>
 800d4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d012      	beq.n	800d4ea <tcp_write+0x636>
 800d4c4:	797b      	ldrb	r3, [r7, #5]
 800d4c6:	f003 0302 	and.w	r3, r3, #2
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10d      	bne.n	800d4ea <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	899b      	ldrh	r3, [r3, #12]
 800d4d4:	b29c      	uxth	r4, r3
 800d4d6:	2008      	movs	r0, #8
 800d4d8:	f7fa f8e3 	bl	80076a2 <lwip_htons>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	461a      	mov	r2, r3
 800d4e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	4322      	orrs	r2, r4
 800d4e6:	b292      	uxth	r2, r2
 800d4e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	e031      	b.n	800d552 <tcp_write+0x69e>
          goto memerr;
 800d4ee:	bf00      	nop
 800d4f0:	e006      	b.n	800d500 <tcp_write+0x64c>
            goto memerr;
 800d4f2:	bf00      	nop
 800d4f4:	e004      	b.n	800d500 <tcp_write+0x64c>
        goto memerr;
 800d4f6:	bf00      	nop
 800d4f8:	e002      	b.n	800d500 <tcp_write+0x64c>
        goto memerr;
 800d4fa:	bf00      	nop
 800d4fc:	e000      	b.n	800d500 <tcp_write+0x64c>
      goto memerr;
 800d4fe:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	7e9b      	ldrb	r3, [r3, #26]
 800d504:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d50e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d510:	2b00      	cmp	r3, #0
 800d512:	d002      	beq.n	800d51a <tcp_write+0x666>
    pbuf_free(concat_p);
 800d514:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d516:	f7fb f9ed 	bl	80088f4 <pbuf_free>
  }
  if (queue != NULL) {
 800d51a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <tcp_write+0x672>
    tcp_segs_free(queue);
 800d520:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d522:	f7fc fcc6 	bl	8009eb2 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00e      	beq.n	800d54e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10a      	bne.n	800d54e <tcp_write+0x69a>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d106      	bne.n	800d54e <tcp_write+0x69a>
 800d540:	4b06      	ldr	r3, [pc, #24]	; (800d55c <tcp_write+0x6a8>)
 800d542:	f240 3201 	movw	r2, #769	; 0x301
 800d546:	4906      	ldr	r1, [pc, #24]	; (800d560 <tcp_write+0x6ac>)
 800d548:	4806      	ldr	r0, [pc, #24]	; (800d564 <tcp_write+0x6b0>)
 800d54a:	f003 fc29 	bl	8010da0 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d54e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d552:	4618      	mov	r0, r3
 800d554:	375c      	adds	r7, #92	; 0x5c
 800d556:	46bd      	mov	sp, r7
 800d558:	bd90      	pop	{r4, r7, pc}
 800d55a:	bf00      	nop
 800d55c:	080134b8 	.word	0x080134b8
 800d560:	0801379c 	.word	0x0801379c
 800d564:	0801351c 	.word	0x0801351c

0800d568 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	; 0x28
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	460b      	mov	r3, r1
 800d572:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d574:	2300      	movs	r3, #0
 800d576:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d57c:	78fb      	ldrb	r3, [r7, #3]
 800d57e:	f003 0303 	and.w	r3, r3, #3
 800d582:	2b00      	cmp	r3, #0
 800d584:	d106      	bne.n	800d594 <tcp_enqueue_flags+0x2c>
 800d586:	4b6f      	ldr	r3, [pc, #444]	; (800d744 <tcp_enqueue_flags+0x1dc>)
 800d588:	f240 321a 	movw	r2, #794	; 0x31a
 800d58c:	496e      	ldr	r1, [pc, #440]	; (800d748 <tcp_enqueue_flags+0x1e0>)
 800d58e:	486f      	ldr	r0, [pc, #444]	; (800d74c <tcp_enqueue_flags+0x1e4>)
 800d590:	f003 fc06 	bl	8010da0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d59a:	2b08      	cmp	r3, #8
 800d59c:	d806      	bhi.n	800d5ac <tcp_enqueue_flags+0x44>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5a4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d90e      	bls.n	800d5ca <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800d5ac:	78fb      	ldrb	r3, [r7, #3]
 800d5ae:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d109      	bne.n	800d5ca <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	7e9b      	ldrb	r3, [r3, #26]
 800d5ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800d5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5c8:	e0b7      	b.n	800d73a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800d5ca:	78fb      	ldrb	r3, [r7, #3]
 800d5cc:	f003 0302 	and.w	r3, r3, #2
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d5d8:	7ffb      	ldrb	r3, [r7, #31]
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	f003 0304 	and.w	r3, r3, #4
 800d5e2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d5e4:	7dfb      	ldrb	r3, [r7, #23]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	f7fa fe09 	bl	8008204 <pbuf_alloc>
 800d5f2:	6138      	str	r0, [r7, #16]
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d109      	bne.n	800d60e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	7e9b      	ldrb	r3, [r3, #26]
 800d5fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d602:	b2da      	uxtb	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d608:	f04f 33ff 	mov.w	r3, #4294967295
 800d60c:	e095      	b.n	800d73a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	895a      	ldrh	r2, [r3, #10]
 800d612:	7dfb      	ldrb	r3, [r7, #23]
 800d614:	b29b      	uxth	r3, r3
 800d616:	429a      	cmp	r2, r3
 800d618:	d206      	bcs.n	800d628 <tcp_enqueue_flags+0xc0>
 800d61a:	4b4a      	ldr	r3, [pc, #296]	; (800d744 <tcp_enqueue_flags+0x1dc>)
 800d61c:	f44f 7250 	mov.w	r2, #832	; 0x340
 800d620:	494b      	ldr	r1, [pc, #300]	; (800d750 <tcp_enqueue_flags+0x1e8>)
 800d622:	484a      	ldr	r0, [pc, #296]	; (800d74c <tcp_enqueue_flags+0x1e4>)
 800d624:	f003 fbbc 	bl	8010da0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800d62c:	78fa      	ldrb	r2, [r7, #3]
 800d62e:	7ffb      	ldrb	r3, [r7, #31]
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	460b      	mov	r3, r1
 800d634:	6939      	ldr	r1, [r7, #16]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7ff fadc 	bl	800cbf4 <tcp_create_segment>
 800d63c:	60f8      	str	r0, [r7, #12]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d109      	bne.n	800d658 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	7e9b      	ldrb	r3, [r3, #26]
 800d648:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d64c:	b2da      	uxtb	r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d652:	f04f 33ff 	mov.w	r3, #4294967295
 800d656:	e070      	b.n	800d73a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	68db      	ldr	r3, [r3, #12]
 800d65c:	f003 0303 	and.w	r3, r3, #3
 800d660:	2b00      	cmp	r3, #0
 800d662:	d006      	beq.n	800d672 <tcp_enqueue_flags+0x10a>
 800d664:	4b37      	ldr	r3, [pc, #220]	; (800d744 <tcp_enqueue_flags+0x1dc>)
 800d666:	f240 3249 	movw	r2, #841	; 0x349
 800d66a:	493a      	ldr	r1, [pc, #232]	; (800d754 <tcp_enqueue_flags+0x1ec>)
 800d66c:	4837      	ldr	r0, [pc, #220]	; (800d74c <tcp_enqueue_flags+0x1e4>)
 800d66e:	f003 fb97 	bl	8010da0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	891b      	ldrh	r3, [r3, #8]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d006      	beq.n	800d688 <tcp_enqueue_flags+0x120>
 800d67a:	4b32      	ldr	r3, [pc, #200]	; (800d744 <tcp_enqueue_flags+0x1dc>)
 800d67c:	f240 324a 	movw	r2, #842	; 0x34a
 800d680:	4935      	ldr	r1, [pc, #212]	; (800d758 <tcp_enqueue_flags+0x1f0>)
 800d682:	4832      	ldr	r0, [pc, #200]	; (800d74c <tcp_enqueue_flags+0x1e4>)
 800d684:	f003 fb8c 	bl	8010da0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d103      	bne.n	800d698 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	669a      	str	r2, [r3, #104]	; 0x68
 800d696:	e00d      	b.n	800d6b4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d69c:	61bb      	str	r3, [r7, #24]
 800d69e:	e002      	b.n	800d6a6 <tcp_enqueue_flags+0x13e>
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	61bb      	str	r3, [r7, #24]
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1f8      	bne.n	800d6a0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d6bc:	78fb      	ldrb	r3, [r7, #3]
 800d6be:	f003 0302 	and.w	r3, r3, #2
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d104      	bne.n	800d6d0 <tcp_enqueue_flags+0x168>
 800d6c6:	78fb      	ldrb	r3, [r7, #3]
 800d6c8:	f003 0301 	and.w	r3, r3, #1
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d004      	beq.n	800d6da <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6d4:	1c5a      	adds	r2, r3, #1
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d6da:	78fb      	ldrb	r3, [r7, #3]
 800d6dc:	f003 0301 	and.w	r3, r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d006      	beq.n	800d6f2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7e9b      	ldrb	r3, [r3, #26]
 800d6e8:	f043 0320 	orr.w	r3, r3, #32
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fb f990 	bl	8008a1c <pbuf_clen>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	461a      	mov	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d706:	4413      	add	r3, r2
 800d708:	b29a      	uxth	r2, r3
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00e      	beq.n	800d738 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10a      	bne.n	800d738 <tcp_enqueue_flags+0x1d0>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d726:	2b00      	cmp	r3, #0
 800d728:	d106      	bne.n	800d738 <tcp_enqueue_flags+0x1d0>
 800d72a:	4b06      	ldr	r3, [pc, #24]	; (800d744 <tcp_enqueue_flags+0x1dc>)
 800d72c:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d730:	490a      	ldr	r1, [pc, #40]	; (800d75c <tcp_enqueue_flags+0x1f4>)
 800d732:	4806      	ldr	r0, [pc, #24]	; (800d74c <tcp_enqueue_flags+0x1e4>)
 800d734:	f003 fb34 	bl	8010da0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3720      	adds	r7, #32
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	080134b8 	.word	0x080134b8
 800d748:	080137bc 	.word	0x080137bc
 800d74c:	0801351c 	.word	0x0801351c
 800d750:	08013814 	.word	0x08013814
 800d754:	08013850 	.word	0x08013850
 800d758:	08013868 	.word	0x08013868
 800d75c:	08013894 	.word	0x08013894

0800d760 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d760:	b590      	push	{r4, r7, lr}
 800d762:	b08b      	sub	sp, #44	; 0x2c
 800d764:	af04      	add	r7, sp, #16
 800d766:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d76c:	7dbb      	ldrb	r3, [r7, #22]
 800d76e:	b29c      	uxth	r4, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d774:	4618      	mov	r0, r3
 800d776:	f7f9 ffa2 	bl	80076be <lwip_htonl>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2200      	movs	r2, #0
 800d77e:	4621      	mov	r1, r4
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f7ff f97d 	bl	800ca80 <tcp_output_alloc_header>
 800d786:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d109      	bne.n	800d7a2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	7e9b      	ldrb	r3, [r3, #26]
 800d792:	f043 0303 	orr.w	r3, r3, #3
 800d796:	b2da      	uxtb	r2, r3
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d79c:	f06f 0301 	mvn.w	r3, #1
 800d7a0:	e036      	b.n	800d810 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f002 f854 	bl	800f854 <ip4_route>
 800d7ac:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d102      	bne.n	800d7ba <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800d7b4:	23fc      	movs	r3, #252	; 0xfc
 800d7b6:	75fb      	strb	r3, [r7, #23]
 800d7b8:	e012      	b.n	800d7e0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800d7ba:	6879      	ldr	r1, [r7, #4]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	1d18      	adds	r0, r3, #4
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	7a9c      	ldrb	r4, [r3, #10]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	7a5b      	ldrb	r3, [r3, #9]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	9202      	str	r2, [sp, #8]
 800d7cc:	2206      	movs	r2, #6
 800d7ce:	9201      	str	r2, [sp, #4]
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	4623      	mov	r3, r4
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	6938      	ldr	r0, [r7, #16]
 800d7d8:	f002 f9e6 	bl	800fba8 <ip4_output_if>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d7e0:	6938      	ldr	r0, [r7, #16]
 800d7e2:	f7fb f887 	bl	80088f4 <pbuf_free>

  if (err != ERR_OK) {
 800d7e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d007      	beq.n	800d7fe <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	7e9b      	ldrb	r3, [r3, #26]
 800d7f2:	f043 0303 	orr.w	r3, r3, #3
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	769a      	strb	r2, [r3, #26]
 800d7fc:	e006      	b.n	800d80c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	7e9b      	ldrb	r3, [r3, #26]
 800d802:	f023 0303 	bic.w	r3, r3, #3
 800d806:	b2da      	uxtb	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800d80c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d810:	4618      	mov	r0, r3
 800d812:	371c      	adds	r7, #28
 800d814:	46bd      	mov	sp, r7
 800d816:	bd90      	pop	{r4, r7, pc}

0800d818 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d818:	b5b0      	push	{r4, r5, r7, lr}
 800d81a:	b08a      	sub	sp, #40	; 0x28
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	7d1b      	ldrb	r3, [r3, #20]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d106      	bne.n	800d836 <tcp_output+0x1e>
 800d828:	4b99      	ldr	r3, [pc, #612]	; (800da90 <tcp_output+0x278>)
 800d82a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800d82e:	4999      	ldr	r1, [pc, #612]	; (800da94 <tcp_output+0x27c>)
 800d830:	4899      	ldr	r0, [pc, #612]	; (800da98 <tcp_output+0x280>)
 800d832:	f003 fab5 	bl	8010da0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d836:	4b99      	ldr	r3, [pc, #612]	; (800da9c <tcp_output+0x284>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d101      	bne.n	800d844 <tcp_output+0x2c>
    return ERR_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	e1cb      	b.n	800dbdc <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d850:	4293      	cmp	r3, r2
 800d852:	bf28      	it	cs
 800d854:	4613      	movcs	r3, r2
 800d856:	b29b      	uxth	r3, r3
 800d858:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d85e:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	7e9b      	ldrb	r3, [r3, #26]
 800d864:	f003 0302 	and.w	r3, r3, #2
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d017      	beq.n	800d89c <tcp_output+0x84>
 800d86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d00f      	beq.n	800d892 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800d872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4618      	mov	r0, r3
 800d87a:	f7f9 ff20 	bl	80076be <lwip_htonl>
 800d87e:	4602      	mov	r2, r0
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d888:	8912      	ldrh	r2, [r2, #8]
 800d88a:	4413      	add	r3, r2
     (seg == NULL ||
 800d88c:	69ba      	ldr	r2, [r7, #24]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d204      	bcs.n	800d89c <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff ff64 	bl	800d760 <tcp_send_empty_ack>
 800d898:	4603      	mov	r3, r0
 800d89a:	e19f      	b.n	800dbdc <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8a0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d8a2:	6a3b      	ldr	r3, [r7, #32]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d007      	beq.n	800d8b8 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800d8a8:	e002      	b.n	800d8b0 <tcp_output+0x98>
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	623b      	str	r3, [r7, #32]
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1f8      	bne.n	800d8aa <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f001 ffc9 	bl	800f854 <ip4_route>
 800d8c2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d102      	bne.n	800d8d0 <tcp_output+0xb8>
    return ERR_RTE;
 800d8ca:	f06f 0303 	mvn.w	r3, #3
 800d8ce:	e185      	b.n	800dbdc <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d003      	beq.n	800d8de <tcp_output+0xc6>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d111      	bne.n	800d902 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d002      	beq.n	800d8ea <tcp_output+0xd2>
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	e000      	b.n	800d8ec <tcp_output+0xd4>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d102      	bne.n	800d8fa <tcp_output+0xe2>
      return ERR_RTE;
 800d8f4:	f06f 0303 	mvn.w	r3, #3
 800d8f8:	e170      	b.n	800dbdc <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800d902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d904:	2b00      	cmp	r3, #0
 800d906:	f000 813f 	beq.w	800db88 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	4618      	mov	r0, r3
 800d912:	f7f9 fed4 	bl	80076be <lwip_htonl>
 800d916:	4602      	mov	r2, r0
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d91c:	1ad3      	subs	r3, r2, r3
 800d91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d920:	8912      	ldrh	r2, [r2, #8]
 800d922:	4413      	add	r3, r2
  if (seg != NULL &&
 800d924:	69ba      	ldr	r2, [r7, #24]
 800d926:	429a      	cmp	r2, r3
 800d928:	f080 812e 	bcs.w	800db88 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f000 812a 	beq.w	800db88 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d93a:	461a      	mov	r2, r3
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	4293      	cmp	r3, r2
 800d940:	f040 8122 	bne.w	800db88 <tcp_output+0x370>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f040 811d 	bne.w	800db88 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d954:	2b00      	cmp	r3, #0
 800d956:	f040 812c 	bne.w	800dbb2 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2201      	movs	r2, #1
 800d966:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800d96a:	e122      	b.n	800dbb2 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	899b      	ldrh	r3, [r3, #12]
 800d972:	b29b      	uxth	r3, r3
 800d974:	4618      	mov	r0, r3
 800d976:	f7f9 fe94 	bl	80076a2 <lwip_htons>
 800d97a:	4603      	mov	r3, r0
 800d97c:	f003 0304 	and.w	r3, r3, #4
 800d980:	2b00      	cmp	r3, #0
 800d982:	d006      	beq.n	800d992 <tcp_output+0x17a>
 800d984:	4b42      	ldr	r3, [pc, #264]	; (800da90 <tcp_output+0x278>)
 800d986:	f240 4245 	movw	r2, #1093	; 0x445
 800d98a:	4945      	ldr	r1, [pc, #276]	; (800daa0 <tcp_output+0x288>)
 800d98c:	4842      	ldr	r0, [pc, #264]	; (800da98 <tcp_output+0x280>)
 800d98e:	f003 fa07 	bl	8010da0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d996:	2b00      	cmp	r3, #0
 800d998:	d01f      	beq.n	800d9da <tcp_output+0x1c2>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7e9b      	ldrb	r3, [r3, #26]
 800d99e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d119      	bne.n	800d9da <tcp_output+0x1c2>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00b      	beq.n	800d9c6 <tcp_output+0x1ae>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d110      	bne.n	800d9da <tcp_output+0x1c2>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9bc:	891a      	ldrh	r2, [r3, #8]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d209      	bcs.n	800d9da <tcp_output+0x1c2>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d004      	beq.n	800d9da <tcp_output+0x1c2>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9d6:	2b08      	cmp	r3, #8
 800d9d8:	d901      	bls.n	800d9de <tcp_output+0x1c6>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e000      	b.n	800d9e0 <tcp_output+0x1c8>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d106      	bne.n	800d9f2 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	7e9b      	ldrb	r3, [r3, #26]
 800d9e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f000 80e2 	beq.w	800dbb6 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	7d1b      	ldrb	r3, [r3, #20]
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d00d      	beq.n	800da16 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	899b      	ldrh	r3, [r3, #12]
 800da00:	b29c      	uxth	r4, r3
 800da02:	2010      	movs	r0, #16
 800da04:	f7f9 fe4d 	bl	80076a2 <lwip_htons>
 800da08:	4603      	mov	r3, r0
 800da0a:	461a      	mov	r2, r3
 800da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	4322      	orrs	r2, r4
 800da12:	b292      	uxth	r2, r2
 800da14:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800da16:	697a      	ldr	r2, [r7, #20]
 800da18:	6879      	ldr	r1, [r7, #4]
 800da1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da1c:	f000 f8e2 	bl	800dbe4 <tcp_output_segment>
 800da20:	4603      	mov	r3, r0
 800da22:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800da24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d009      	beq.n	800da40 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	7e9b      	ldrb	r3, [r3, #26]
 800da30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da34:	b2da      	uxtb	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	769a      	strb	r2, [r3, #26]
      return err;
 800da3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da3e:	e0cd      	b.n	800dbdc <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	7d1b      	ldrb	r3, [r3, #20]
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d006      	beq.n	800da5e <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	7e9b      	ldrb	r3, [r3, #26]
 800da54:	f023 0303 	bic.w	r3, r3, #3
 800da58:	b2da      	uxtb	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800da5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	4618      	mov	r0, r3
 800da66:	f7f9 fe2a 	bl	80076be <lwip_htonl>
 800da6a:	4604      	mov	r4, r0
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	891b      	ldrh	r3, [r3, #8]
 800da70:	461d      	mov	r5, r3
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	899b      	ldrh	r3, [r3, #12]
 800da78:	b29b      	uxth	r3, r3
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7f9 fe11 	bl	80076a2 <lwip_htons>
 800da80:	4603      	mov	r3, r0
 800da82:	f003 0303 	and.w	r3, r3, #3
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00c      	beq.n	800daa4 <tcp_output+0x28c>
 800da8a:	2301      	movs	r3, #1
 800da8c:	e00b      	b.n	800daa6 <tcp_output+0x28e>
 800da8e:	bf00      	nop
 800da90:	080134b8 	.word	0x080134b8
 800da94:	080138bc 	.word	0x080138bc
 800da98:	0801351c 	.word	0x0801351c
 800da9c:	20007038 	.word	0x20007038
 800daa0:	080138e4 	.word	0x080138e4
 800daa4:	2300      	movs	r3, #0
 800daa6:	442b      	add	r3, r5
 800daa8:	4423      	add	r3, r4
 800daaa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	da02      	bge.n	800dabe <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	68ba      	ldr	r2, [r7, #8]
 800dabc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac0:	891b      	ldrh	r3, [r3, #8]
 800dac2:	461c      	mov	r4, r3
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	899b      	ldrh	r3, [r3, #12]
 800daca:	b29b      	uxth	r3, r3
 800dacc:	4618      	mov	r0, r3
 800dace:	f7f9 fde8 	bl	80076a2 <lwip_htons>
 800dad2:	4603      	mov	r3, r0
 800dad4:	f003 0303 	and.w	r3, r3, #3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <tcp_output+0x2c8>
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <tcp_output+0x2ca>
 800dae0:	2300      	movs	r3, #0
 800dae2:	4423      	add	r3, r4
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d049      	beq.n	800db7c <tcp_output+0x364>
      seg->next = NULL;
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	2200      	movs	r2, #0
 800daec:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d105      	bne.n	800db02 <tcp_output+0x2ea>
        pcb->unacked = seg;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dafa:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafe:	623b      	str	r3, [r7, #32]
 800db00:	e03f      	b.n	800db82 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800db02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7f9 fdd8 	bl	80076be <lwip_htonl>
 800db0e:	4604      	mov	r4, r0
 800db10:	6a3b      	ldr	r3, [r7, #32]
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	4618      	mov	r0, r3
 800db18:	f7f9 fdd1 	bl	80076be <lwip_htonl>
 800db1c:	4603      	mov	r3, r0
 800db1e:	1ae3      	subs	r3, r4, r3
 800db20:	2b00      	cmp	r3, #0
 800db22:	da24      	bge.n	800db6e <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	336c      	adds	r3, #108	; 0x6c
 800db28:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800db2a:	e002      	b.n	800db32 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d011      	beq.n	800db5e <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	4618      	mov	r0, r3
 800db44:	f7f9 fdbb 	bl	80076be <lwip_htonl>
 800db48:	4604      	mov	r4, r0
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	4618      	mov	r0, r3
 800db52:	f7f9 fdb4 	bl	80076be <lwip_htonl>
 800db56:	4603      	mov	r3, r0
 800db58:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	dbe6      	blt.n	800db2c <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db64:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db6a:	601a      	str	r2, [r3, #0]
 800db6c:	e009      	b.n	800db82 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800db6e:	6a3b      	ldr	r3, [r7, #32]
 800db70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db72:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800db74:	6a3b      	ldr	r3, [r7, #32]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	623b      	str	r3, [r7, #32]
 800db7a:	e002      	b.n	800db82 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800db7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db7e:	f7fc f9ad 	bl	8009edc <tcp_seg_free>
    }
    seg = pcb->unsent;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db86:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d015      	beq.n	800dbba <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	4618      	mov	r0, r3
 800db96:	f7f9 fd92 	bl	80076be <lwip_htonl>
 800db9a:	4602      	mov	r2, r0
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dba4:	8912      	ldrh	r2, [r2, #8]
 800dba6:	4413      	add	r3, r2
  while (seg != NULL &&
 800dba8:	69ba      	ldr	r2, [r7, #24]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	f4bf aede 	bcs.w	800d96c <tcp_output+0x154>
  }
output_done:
 800dbb0:	e003      	b.n	800dbba <tcp_output+0x3a2>
    goto output_done;
 800dbb2:	bf00      	nop
 800dbb4:	e002      	b.n	800dbbc <tcp_output+0x3a4>
      break;
 800dbb6:	bf00      	nop
 800dbb8:	e000      	b.n	800dbbc <tcp_output+0x3a4>
output_done:
 800dbba:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d103      	bne.n	800dbcc <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	7e9b      	ldrb	r3, [r3, #26]
 800dbd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800dbda:	2300      	movs	r3, #0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3728      	adds	r7, #40	; 0x28
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bdb0      	pop	{r4, r5, r7, pc}

0800dbe4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800dbe4:	b5b0      	push	{r4, r5, r7, lr}
 800dbe6:	b08c      	sub	sp, #48	; 0x30
 800dbe8:	af04      	add	r7, sp, #16
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	89db      	ldrh	r3, [r3, #14]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d001      	beq.n	800dbfe <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e08a      	b.n	800dd14 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	68dc      	ldr	r4, [r3, #12]
 800dc06:	4610      	mov	r0, r2
 800dc08:	f7f9 fd59 	bl	80076be <lwip_htonl>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	68dc      	ldr	r4, [r3, #12]
 800dc18:	4610      	mov	r0, r2
 800dc1a:	f7f9 fd42 	bl	80076a2 <lwip_htons>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dc2a:	441a      	add	r2, r3
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	3314      	adds	r3, #20
 800dc36:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	7a9b      	ldrb	r3, [r3, #10]
 800dc3c:	f003 0301 	and.w	r3, r3, #1
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d014      	beq.n	800dc6e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	3304      	adds	r3, #4
 800dc48:	4619      	mov	r1, r3
 800dc4a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800dc4e:	f7fc fc79 	bl	800a544 <tcp_eff_send_mss_impl>
 800dc52:	4603      	mov	r3, r0
 800dc54:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800dc56:	8b7b      	ldrh	r3, [r7, #26]
 800dc58:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7f9 fd2e 	bl	80076be <lwip_htonl>
 800dc62:	4602      	mov	r2, r0
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	601a      	str	r2, [r3, #0]
    opts += 1;
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	da02      	bge.n	800dc7e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10c      	bne.n	800dca0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800dc86:	4b25      	ldr	r3, [pc, #148]	; (800dd1c <tcp_output_segment+0x138>)
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7f9 fd12 	bl	80076be <lwip_htonl>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	68da      	ldr	r2, [r3, #12]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	8959      	ldrh	r1, [r3, #10]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	8b3a      	ldrh	r2, [r7, #24]
 800dcba:	1a8a      	subs	r2, r1, r2
 800dcbc:	b292      	uxth	r2, r2
 800dcbe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	8919      	ldrh	r1, [r3, #8]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	8b3a      	ldrh	r2, [r7, #24]
 800dccc:	1a8a      	subs	r2, r1, r2
 800dcce:	b292      	uxth	r2, r2
 800dcd0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	68d2      	ldr	r2, [r2, #12]
 800dcda:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	2200      	movs	r2, #0
 800dce2:	741a      	strb	r2, [r3, #16]
 800dce4:	2200      	movs	r2, #0
 800dce6:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6858      	ldr	r0, [r3, #4]
 800dcec:	68b9      	ldr	r1, [r7, #8]
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	1d1c      	adds	r4, r3, #4
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	7a9d      	ldrb	r5, [r3, #10]
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	7a5b      	ldrb	r3, [r3, #9]
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	9202      	str	r2, [sp, #8]
 800dcfe:	2206      	movs	r2, #6
 800dd00:	9201      	str	r2, [sp, #4]
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	462b      	mov	r3, r5
 800dd06:	4622      	mov	r2, r4
 800dd08:	f001 ff4e 	bl	800fba8 <ip4_output_if>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800dd10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3720      	adds	r7, #32
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bdb0      	pop	{r4, r5, r7, pc}
 800dd1c:	20006fec 	.word	0x20006fec

0800dd20 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b08c      	sub	sp, #48	; 0x30
 800dd24:	af04      	add	r7, sp, #16
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800dd2e:	2200      	movs	r2, #0
 800dd30:	2114      	movs	r1, #20
 800dd32:	2001      	movs	r0, #1
 800dd34:	f7fa fa66 	bl	8008204 <pbuf_alloc>
 800dd38:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d05b      	beq.n	800ddf8 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	895b      	ldrh	r3, [r3, #10]
 800dd44:	2b13      	cmp	r3, #19
 800dd46:	d806      	bhi.n	800dd56 <tcp_rst+0x36>
 800dd48:	4b2d      	ldr	r3, [pc, #180]	; (800de00 <tcp_rst+0xe0>)
 800dd4a:	f240 524c 	movw	r2, #1356	; 0x54c
 800dd4e:	492d      	ldr	r1, [pc, #180]	; (800de04 <tcp_rst+0xe4>)
 800dd50:	482d      	ldr	r0, [pc, #180]	; (800de08 <tcp_rst+0xe8>)
 800dd52:	f003 f825 	bl	8010da0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800dd5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7f9 fc9f 	bl	80076a2 <lwip_htons>
 800dd64:	4603      	mov	r3, r0
 800dd66:	461a      	mov	r2, r3
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800dd6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7f9 fc97 	bl	80076a2 <lwip_htons>
 800dd74:	4603      	mov	r3, r0
 800dd76:	461a      	mov	r2, r3
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7f9 fc9e 	bl	80076be <lwip_htonl>
 800dd82:	4602      	mov	r2, r0
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800dd88:	68b8      	ldr	r0, [r7, #8]
 800dd8a:	f7f9 fc98 	bl	80076be <lwip_htonl>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800dd94:	f245 0014 	movw	r0, #20500	; 0x5014
 800dd98:	f7f9 fc83 	bl	80076a2 <lwip_htons>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	461a      	mov	r2, r3
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f042 0208 	orr.w	r2, r2, #8
 800ddac:	739a      	strb	r2, [r3, #14]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ddb4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800ddb6:	69bb      	ldr	r3, [r7, #24]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	741a      	strb	r2, [r3, #16]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	749a      	strb	r2, [r3, #18]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800ddca:	6838      	ldr	r0, [r7, #0]
 800ddcc:	f001 fd42 	bl	800f854 <ip4_route>
 800ddd0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00b      	beq.n	800ddf0 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	9302      	str	r3, [sp, #8]
 800dddc:	2306      	movs	r3, #6
 800ddde:	9301      	str	r3, [sp, #4]
 800dde0:	2300      	movs	r3, #0
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	23ff      	movs	r3, #255	; 0xff
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	6879      	ldr	r1, [r7, #4]
 800ddea:	69f8      	ldr	r0, [r7, #28]
 800ddec:	f001 fedc 	bl	800fba8 <ip4_output_if>
  }
  pbuf_free(p);
 800ddf0:	69f8      	ldr	r0, [r7, #28]
 800ddf2:	f7fa fd7f 	bl	80088f4 <pbuf_free>
 800ddf6:	e000      	b.n	800ddfa <tcp_rst+0xda>
    return;
 800ddf8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ddfa:	3720      	adds	r7, #32
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	080134b8 	.word	0x080134b8
 800de04:	080134ec 	.word	0x080134ec
 800de08:	0801351c 	.word	0x0801351c

0800de0c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d029      	beq.n	800de70 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de20:	60fb      	str	r3, [r7, #12]
 800de22:	e002      	b.n	800de2a <tcp_rexmit_rto+0x1e>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	60fb      	str	r3, [r7, #12]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d1f8      	bne.n	800de24 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de4e:	2bff      	cmp	r3, #255	; 0xff
 800de50:	d007      	beq.n	800de62 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de58:	3301      	adds	r3, #1
 800de5a:	b2da      	uxtb	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff fcd5 	bl	800d818 <tcp_output>
 800de6e:	e000      	b.n	800de72 <tcp_rexmit_rto+0x66>
    return;
 800de70:	bf00      	nop
}
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800de78:	b590      	push	{r4, r7, lr}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de84:	2b00      	cmp	r3, #0
 800de86:	d043      	beq.n	800df10 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de8c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	3368      	adds	r3, #104	; 0x68
 800de9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800de9c:	e002      	b.n	800dea4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d011      	beq.n	800ded0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7f9 fc02 	bl	80076be <lwip_htonl>
 800deba:	4604      	mov	r4, r0
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7f9 fbfb 	bl	80076be <lwip_htonl>
 800dec8:	4603      	mov	r3, r0
 800deca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800decc:	2b00      	cmp	r3, #0
 800dece:	dbe6      	blt.n	800de9e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	68ba      	ldr	r2, [r7, #8]
 800dedc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d103      	bne.n	800deee <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2200      	movs	r2, #0
 800deea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800def4:	2bff      	cmp	r3, #255	; 0xff
 800def6:	d007      	beq.n	800df08 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800defe:	3301      	adds	r3, #1
 800df00:	b2da      	uxtb	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	635a      	str	r2, [r3, #52]	; 0x34
 800df0e:	e000      	b.n	800df12 <tcp_rexmit+0x9a>
    return;
 800df10:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800df12:	3714      	adds	r7, #20
 800df14:	46bd      	mov	sp, r7
 800df16:	bd90      	pop	{r4, r7, pc}

0800df18 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df24:	2b00      	cmp	r3, #0
 800df26:	d041      	beq.n	800dfac <tcp_rexmit_fast+0x94>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	7e9b      	ldrb	r3, [r3, #26]
 800df2c:	f003 0304 	and.w	r3, r3, #4
 800df30:	2b00      	cmp	r3, #0
 800df32:	d13b      	bne.n	800dfac <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff ff9f 	bl	800de78 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df46:	4293      	cmp	r3, r2
 800df48:	bf28      	it	cs
 800df4a:	4613      	movcs	r3, r2
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	0fda      	lsrs	r2, r3, #31
 800df50:	4413      	add	r3, r2
 800df52:	105b      	asrs	r3, r3, #1
 800df54:	b29a      	uxth	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800df62:	461a      	mov	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df68:	005b      	lsls	r3, r3, #1
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d206      	bcs.n	800df7c <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df72:	005b      	lsls	r3, r3, #1
 800df74:	b29a      	uxth	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df86:	4619      	mov	r1, r3
 800df88:	0049      	lsls	r1, r1, #1
 800df8a:	440b      	add	r3, r1
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	4413      	add	r3, r2
 800df90:	b29a      	uxth	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	7e9b      	ldrb	r3, [r3, #26]
 800df9c:	f043 0304 	orr.w	r3, r3, #4
 800dfa0:	b2da      	uxtb	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800dfac:	bf00      	nop
 800dfae:	3708      	adds	r7, #8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b08a      	sub	sp, #40	; 0x28
 800dfb8:	af04      	add	r7, sp, #16
 800dfba:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7f9 fb7b 	bl	80076be <lwip_htonl>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2200      	movs	r2, #0
 800dfcc:	2100      	movs	r1, #0
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7fe fd56 	bl	800ca80 <tcp_output_alloc_header>
 800dfd4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d102      	bne.n	800dfe2 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dfdc:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe0:	e021      	b.n	800e026 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f001 fc34 	bl	800f854 <ip4_route>
 800dfec:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d102      	bne.n	800dffa <tcp_keepalive+0x46>
    err = ERR_RTE;
 800dff4:	23fc      	movs	r3, #252	; 0xfc
 800dff6:	75fb      	strb	r3, [r7, #23]
 800dff8:	e010      	b.n	800e01c <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	1d1a      	adds	r2, r3, #4
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	7a98      	ldrb	r0, [r3, #10]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	9302      	str	r3, [sp, #8]
 800e008:	2306      	movs	r3, #6
 800e00a:	9301      	str	r3, [sp, #4]
 800e00c:	2300      	movs	r3, #0
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	4603      	mov	r3, r0
 800e012:	6938      	ldr	r0, [r7, #16]
 800e014:	f001 fdc8 	bl	800fba8 <ip4_output_if>
 800e018:	4603      	mov	r3, r0
 800e01a:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e01c:	6938      	ldr	r0, [r7, #16]
 800e01e:	f7fa fc69 	bl	80088f4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3718      	adds	r7, #24
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e02e:	b590      	push	{r4, r7, lr}
 800e030:	b08f      	sub	sp, #60	; 0x3c
 800e032:	af04      	add	r7, sp, #16
 800e034:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e03a:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800e03c:	6a3b      	ldr	r3, [r7, #32]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d102      	bne.n	800e048 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e046:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d101      	bne.n	800e052 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	e085      	b.n	800e15e <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e052:	6a3b      	ldr	r3, [r7, #32]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	899b      	ldrh	r3, [r3, #12]
 800e058:	b29b      	uxth	r3, r3
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7f9 fb21 	bl	80076a2 <lwip_htons>
 800e060:	4603      	mov	r3, r0
 800e062:	f003 0301 	and.w	r3, r3, #1
 800e066:	2b00      	cmp	r3, #0
 800e068:	d005      	beq.n	800e076 <tcp_zero_window_probe+0x48>
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	891b      	ldrh	r3, [r3, #8]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d101      	bne.n	800e076 <tcp_zero_window_probe+0x48>
 800e072:	2301      	movs	r3, #1
 800e074:	e000      	b.n	800e078 <tcp_zero_window_probe+0x4a>
 800e076:	2300      	movs	r3, #0
 800e078:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e07a:	7ffb      	ldrb	r3, [r7, #31]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	bf0c      	ite	eq
 800e080:	2301      	moveq	r3, #1
 800e082:	2300      	movne	r3, #0
 800e084:	b2db      	uxtb	r3, r3
 800e086:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	8bba      	ldrh	r2, [r7, #28]
 800e090:	2100      	movs	r1, #0
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f7fe fcf4 	bl	800ca80 <tcp_output_alloc_header>
 800e098:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d102      	bne.n	800e0a6 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a4:	e05b      	b.n	800e15e <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e0ac:	7ffb      	ldrb	r3, [r7, #31]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00e      	beq.n	800e0d0 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	899b      	ldrh	r3, [r3, #12]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e0bc:	b29c      	uxth	r4, r3
 800e0be:	2011      	movs	r0, #17
 800e0c0:	f7f9 faef 	bl	80076a2 <lwip_htons>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	4323      	orrs	r3, r4
 800e0c8:	b29a      	uxth	r2, r3
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	819a      	strh	r2, [r3, #12]
 800e0ce:	e010      	b.n	800e0f2 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	3314      	adds	r3, #20
 800e0d6:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e0d8:	6a3b      	ldr	r3, [r7, #32]
 800e0da:	6858      	ldr	r0, [r3, #4]
 800e0dc:	6a3b      	ldr	r3, [r7, #32]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	891a      	ldrh	r2, [r3, #8]
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	891b      	ldrh	r3, [r3, #8]
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	6939      	ldr	r1, [r7, #16]
 800e0ee:	f7fa fe01 	bl	8008cf4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e0f2:	6a3b      	ldr	r3, [r7, #32]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7f9 fae0 	bl	80076be <lwip_htonl>
 800e0fe:	4603      	mov	r3, r0
 800e100:	3301      	adds	r3, #1
 800e102:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	1ad3      	subs	r3, r2, r3
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	da02      	bge.n	800e116 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	68fa      	ldr	r2, [r7, #12]
 800e114:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3304      	adds	r3, #4
 800e11a:	4618      	mov	r0, r3
 800e11c:	f001 fb9a 	bl	800f854 <ip4_route>
 800e120:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d103      	bne.n	800e130 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800e128:	23fc      	movs	r3, #252	; 0xfc
 800e12a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e12e:	e011      	b.n	800e154 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e130:	6879      	ldr	r1, [r7, #4]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	1d1a      	adds	r2, r3, #4
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	7a98      	ldrb	r0, [r3, #10]
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	9302      	str	r3, [sp, #8]
 800e13e:	2306      	movs	r3, #6
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	2300      	movs	r3, #0
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	4603      	mov	r3, r0
 800e148:	69b8      	ldr	r0, [r7, #24]
 800e14a:	f001 fd2d 	bl	800fba8 <ip4_output_if>
 800e14e:	4603      	mov	r3, r0
 800e150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800e154:	69b8      	ldr	r0, [r7, #24]
 800e156:	f7fa fbcd 	bl	80088f4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e15a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e15e:	4618      	mov	r0, r3
 800e160:	372c      	adds	r7, #44	; 0x2c
 800e162:	46bd      	mov	sp, r7
 800e164:	bd90      	pop	{r4, r7, pc}
	...

0800e168 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e170:	f7fa fe42 	bl	8008df8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e174:	4b0a      	ldr	r3, [pc, #40]	; (800e1a0 <tcpip_tcp_timer+0x38>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d103      	bne.n	800e184 <tcpip_tcp_timer+0x1c>
 800e17c:	4b09      	ldr	r3, [pc, #36]	; (800e1a4 <tcpip_tcp_timer+0x3c>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d005      	beq.n	800e190 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e184:	2200      	movs	r2, #0
 800e186:	4908      	ldr	r1, [pc, #32]	; (800e1a8 <tcpip_tcp_timer+0x40>)
 800e188:	20fa      	movs	r0, #250	; 0xfa
 800e18a:	f000 f86f 	bl	800e26c <sys_timeout>
 800e18e:	e003      	b.n	800e198 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e190:	4b06      	ldr	r3, [pc, #24]	; (800e1ac <tcpip_tcp_timer+0x44>)
 800e192:	2200      	movs	r2, #0
 800e194:	601a      	str	r2, [r3, #0]
  }
}
 800e196:	bf00      	nop
 800e198:	bf00      	nop
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	20006ff8 	.word	0x20006ff8
 800e1a4:	20006ffc 	.word	0x20006ffc
 800e1a8:	0800e169 	.word	0x0800e169
 800e1ac:	20007044 	.word	0x20007044

0800e1b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e1b4:	4b0a      	ldr	r3, [pc, #40]	; (800e1e0 <tcp_timer_needed+0x30>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10f      	bne.n	800e1dc <tcp_timer_needed+0x2c>
 800e1bc:	4b09      	ldr	r3, [pc, #36]	; (800e1e4 <tcp_timer_needed+0x34>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d103      	bne.n	800e1cc <tcp_timer_needed+0x1c>
 800e1c4:	4b08      	ldr	r3, [pc, #32]	; (800e1e8 <tcp_timer_needed+0x38>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d007      	beq.n	800e1dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e1cc:	4b04      	ldr	r3, [pc, #16]	; (800e1e0 <tcp_timer_needed+0x30>)
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	4905      	ldr	r1, [pc, #20]	; (800e1ec <tcp_timer_needed+0x3c>)
 800e1d6:	20fa      	movs	r0, #250	; 0xfa
 800e1d8:	f000 f848 	bl	800e26c <sys_timeout>
  }
}
 800e1dc:	bf00      	nop
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	20007044 	.word	0x20007044
 800e1e4:	20006ff8 	.word	0x20006ff8
 800e1e8:	20006ffc 	.word	0x20006ffc
 800e1ec:	0800e169 	.word	0x0800e169

0800e1f0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	4903      	ldr	r1, [pc, #12]	; (800e218 <cyclic_timer+0x28>)
 800e20a:	4618      	mov	r0, r3
 800e20c:	f000 f82e 	bl	800e26c <sys_timeout>
}
 800e210:	bf00      	nop
 800e212:	3710      	adds	r7, #16
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	0800e1f1 	.word	0x0800e1f1

0800e21c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e222:	2301      	movs	r3, #1
 800e224:	607b      	str	r3, [r7, #4]
 800e226:	e00e      	b.n	800e246 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800e228:	4a0d      	ldr	r2, [pc, #52]	; (800e260 <sys_timeouts_init+0x44>)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	00db      	lsls	r3, r3, #3
 800e234:	4a0a      	ldr	r2, [pc, #40]	; (800e260 <sys_timeouts_init+0x44>)
 800e236:	4413      	add	r3, r2
 800e238:	461a      	mov	r2, r3
 800e23a:	490a      	ldr	r1, [pc, #40]	; (800e264 <sys_timeouts_init+0x48>)
 800e23c:	f000 f816 	bl	800e26c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	3301      	adds	r3, #1
 800e244:	607b      	str	r3, [r7, #4]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b02      	cmp	r3, #2
 800e24a:	d9ed      	bls.n	800e228 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800e24c:	f7f9 fa22 	bl	8007694 <sys_now>
 800e250:	4603      	mov	r3, r0
 800e252:	4a05      	ldr	r2, [pc, #20]	; (800e268 <sys_timeouts_init+0x4c>)
 800e254:	6013      	str	r3, [r2, #0]
}
 800e256:	bf00      	nop
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	08014180 	.word	0x08014180
 800e264:	0800e1f1 	.word	0x0800e1f1
 800e268:	20007040 	.word	0x20007040

0800e26c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e278:	2006      	movs	r0, #6
 800e27a:	f7f9 fdbf 	bl	8007dfc <memp_malloc>
 800e27e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d10a      	bne.n	800e29c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f040 8084 	bne.w	800e396 <sys_timeout+0x12a>
 800e28e:	4b44      	ldr	r3, [pc, #272]	; (800e3a0 <sys_timeout+0x134>)
 800e290:	22d4      	movs	r2, #212	; 0xd4
 800e292:	4944      	ldr	r1, [pc, #272]	; (800e3a4 <sys_timeout+0x138>)
 800e294:	4844      	ldr	r0, [pc, #272]	; (800e3a8 <sys_timeout+0x13c>)
 800e296:	f002 fd83 	bl	8010da0 <iprintf>
    return;
 800e29a:	e07c      	b.n	800e396 <sys_timeout+0x12a>
  }

  now = sys_now();
 800e29c:	f7f9 f9fa 	bl	8007694 <sys_now>
 800e2a0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800e2a2:	4b42      	ldr	r3, [pc, #264]	; (800e3ac <sys_timeout+0x140>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d105      	bne.n	800e2b6 <sys_timeout+0x4a>
    diff = 0;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800e2ae:	4a40      	ldr	r2, [pc, #256]	; (800e3b0 <sys_timeout+0x144>)
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	6013      	str	r3, [r2, #0]
 800e2b4:	e004      	b.n	800e2c0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800e2b6:	4b3e      	ldr	r3, [pc, #248]	; (800e3b0 <sys_timeout+0x144>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	693a      	ldr	r2, [r7, #16]
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800e2d2:	68fa      	ldr	r2, [r7, #12]
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	441a      	add	r2, r3
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e2dc:	4b33      	ldr	r3, [pc, #204]	; (800e3ac <sys_timeout+0x140>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d103      	bne.n	800e2ec <sys_timeout+0x80>
    next_timeout = timeout;
 800e2e4:	4a31      	ldr	r2, [pc, #196]	; (800e3ac <sys_timeout+0x140>)
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	6013      	str	r3, [r2, #0]
    return;
 800e2ea:	e055      	b.n	800e398 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800e2ec:	4b2f      	ldr	r3, [pc, #188]	; (800e3ac <sys_timeout+0x140>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	68fa      	ldr	r2, [r7, #12]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d20f      	bcs.n	800e318 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800e2f8:	4b2c      	ldr	r3, [pc, #176]	; (800e3ac <sys_timeout+0x140>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	6859      	ldr	r1, [r3, #4]
 800e2fe:	4b2b      	ldr	r3, [pc, #172]	; (800e3ac <sys_timeout+0x140>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	68fa      	ldr	r2, [r7, #12]
 800e304:	1a8a      	subs	r2, r1, r2
 800e306:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800e308:	4b28      	ldr	r3, [pc, #160]	; (800e3ac <sys_timeout+0x140>)
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e310:	4a26      	ldr	r2, [pc, #152]	; (800e3ac <sys_timeout+0x140>)
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	6013      	str	r3, [r2, #0]
 800e316:	e03f      	b.n	800e398 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e318:	4b24      	ldr	r3, [pc, #144]	; (800e3ac <sys_timeout+0x140>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	61fb      	str	r3, [r7, #28]
 800e31e:	e036      	b.n	800e38e <sys_timeout+0x122>
      timeout->time -= t->time;
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	685a      	ldr	r2, [r3, #4]
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	1ad2      	subs	r2, r2, r3
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d006      	beq.n	800e344 <sys_timeout+0xd8>
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	685a      	ldr	r2, [r3, #4]
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	429a      	cmp	r2, r3
 800e342:	d921      	bls.n	800e388 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d009      	beq.n	800e360 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	6859      	ldr	r1, [r3, #4]
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	685a      	ldr	r2, [r3, #4]
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	1a8a      	subs	r2, r1, r2
 800e35c:	605a      	str	r2, [r3, #4]
 800e35e:	e00b      	b.n	800e378 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	429a      	cmp	r2, r3
 800e368:	d206      	bcs.n	800e378 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800e36a:	4b10      	ldr	r3, [pc, #64]	; (800e3ac <sys_timeout+0x140>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	685a      	ldr	r2, [r3, #4]
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	441a      	add	r2, r3
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	697a      	ldr	r2, [r7, #20]
 800e384:	601a      	str	r2, [r3, #0]
        break;
 800e386:	e007      	b.n	800e398 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	61fb      	str	r3, [r7, #28]
 800e38e:	69fb      	ldr	r3, [r7, #28]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d1c5      	bne.n	800e320 <sys_timeout+0xb4>
 800e394:	e000      	b.n	800e398 <sys_timeout+0x12c>
    return;
 800e396:	bf00      	nop
      }
    }
  }
}
 800e398:	3720      	adds	r7, #32
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	080138fc 	.word	0x080138fc
 800e3a4:	08013930 	.word	0x08013930
 800e3a8:	08013970 	.word	0x08013970
 800e3ac:	2000703c 	.word	0x2000703c
 800e3b0:	20007040 	.word	0x20007040

0800e3b4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b086      	sub	sp, #24
 800e3b8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800e3ba:	4b24      	ldr	r3, [pc, #144]	; (800e44c <sys_check_timeouts+0x98>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d040      	beq.n	800e444 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800e3c2:	f7f9 f967 	bl	8007694 <sys_now>
 800e3c6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800e3c8:	4b21      	ldr	r3, [pc, #132]	; (800e450 <sys_check_timeouts+0x9c>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	68fa      	ldr	r2, [r7, #12]
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800e3d2:	4b20      	ldr	r3, [pc, #128]	; (800e454 <sys_check_timeouts+0xa0>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <sys_check_timeouts+0x2c>
 800e3dc:	f7f9 fee2 	bl	80081a4 <pbuf_free_ooseq>
      had_one = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800e3e4:	4b19      	ldr	r3, [pc, #100]	; (800e44c <sys_check_timeouts+0x98>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d026      	beq.n	800e43e <sys_check_timeouts+0x8a>
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	697a      	ldr	r2, [r7, #20]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d321      	bcc.n	800e43e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	685a      	ldr	r2, [r3, #4]
 800e402:	4b13      	ldr	r3, [pc, #76]	; (800e450 <sys_check_timeouts+0x9c>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4413      	add	r3, r2
 800e408:	4a11      	ldr	r2, [pc, #68]	; (800e450 <sys_check_timeouts+0x9c>)
 800e40a:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	697a      	ldr	r2, [r7, #20]
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4a0c      	ldr	r2, [pc, #48]	; (800e44c <sys_check_timeouts+0x98>)
 800e41c:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	689b      	ldr	r3, [r3, #8]
 800e422:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e42a:	68b9      	ldr	r1, [r7, #8]
 800e42c:	2006      	movs	r0, #6
 800e42e:	f7f9 fd31 	bl	8007e94 <memp_free>
        if (handler != NULL) {
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d002      	beq.n	800e43e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6838      	ldr	r0, [r7, #0]
 800e43c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800e43e:	7cfb      	ldrb	r3, [r7, #19]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1c6      	bne.n	800e3d2 <sys_check_timeouts+0x1e>
  }
}
 800e444:	bf00      	nop
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	2000703c 	.word	0x2000703c
 800e450:	20007040 	.word	0x20007040
 800e454:	20006fe9 	.word	0x20006fe9

0800e458 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e458:	b480      	push	{r7}
 800e45a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800e45c:	bf00      	nop
 800e45e:	46bd      	mov	sp, r7
 800e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e464:	4770      	bx	lr
	...

0800e468 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	4613      	mov	r3, r2
 800e474:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e476:	79fb      	ldrb	r3, [r7, #7]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d018      	beq.n	800e4ae <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d013      	beq.n	800e4aa <udp_input_local_match+0x42>
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d00f      	beq.n	800e4aa <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e48a:	4b14      	ldr	r3, [pc, #80]	; (800e4dc <udp_input_local_match+0x74>)
 800e48c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e492:	d00a      	beq.n	800e4aa <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	4b10      	ldr	r3, [pc, #64]	; (800e4dc <udp_input_local_match+0x74>)
 800e49a:	695b      	ldr	r3, [r3, #20]
 800e49c:	405a      	eors	r2, r3
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	3308      	adds	r3, #8
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d110      	bne.n	800e4cc <udp_input_local_match+0x64>
          return 1;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e00f      	b.n	800e4ce <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d009      	beq.n	800e4c8 <udp_input_local_match+0x60>
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d005      	beq.n	800e4c8 <udp_input_local_match+0x60>
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	4b06      	ldr	r3, [pc, #24]	; (800e4dc <udp_input_local_match+0x74>)
 800e4c2:	695b      	ldr	r3, [r3, #20]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d101      	bne.n	800e4cc <udp_input_local_match+0x64>
      return 1;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e000      	b.n	800e4ce <udp_input_local_match+0x66>
    }
  }

  return 0;
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3714      	adds	r7, #20
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	20003a90 	.word	0x20003a90

0800e4e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e4e0:	b590      	push	{r4, r7, lr}
 800e4e2:	b08d      	sub	sp, #52	; 0x34
 800e4e4:	af02      	add	r7, sp, #8
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	895b      	ldrh	r3, [r3, #10]
 800e4f2:	2b07      	cmp	r3, #7
 800e4f4:	d803      	bhi.n	800e4fe <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7fa f9fc 	bl	80088f4 <pbuf_free>
    goto end;
 800e4fc:	e0c6      	b.n	800e68c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e504:	4b63      	ldr	r3, [pc, #396]	; (800e694 <udp_input+0x1b4>)
 800e506:	695b      	ldr	r3, [r3, #20]
 800e508:	4a62      	ldr	r2, [pc, #392]	; (800e694 <udp_input+0x1b4>)
 800e50a:	6812      	ldr	r2, [r2, #0]
 800e50c:	4611      	mov	r1, r2
 800e50e:	4618      	mov	r0, r3
 800e510:	f001 fc1c 	bl	800fd4c <ip4_addr_isbroadcast_u32>
 800e514:	4603      	mov	r3, r0
 800e516:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	881b      	ldrh	r3, [r3, #0]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	4618      	mov	r0, r3
 800e520:	f7f9 f8bf 	bl	80076a2 <lwip_htons>
 800e524:	4603      	mov	r3, r0
 800e526:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	885b      	ldrh	r3, [r3, #2]
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	4618      	mov	r0, r3
 800e530:	f7f9 f8b7 	bl	80076a2 <lwip_htons>
 800e534:	4603      	mov	r3, r0
 800e536:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e538:	2300      	movs	r3, #0
 800e53a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e53c:	2300      	movs	r3, #0
 800e53e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e540:	2300      	movs	r3, #0
 800e542:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e544:	4b54      	ldr	r3, [pc, #336]	; (800e698 <udp_input+0x1b8>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	627b      	str	r3, [r7, #36]	; 0x24
 800e54a:	e03b      	b.n	800e5c4 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54e:	8a5b      	ldrh	r3, [r3, #18]
 800e550:	89fa      	ldrh	r2, [r7, #14]
 800e552:	429a      	cmp	r2, r3
 800e554:	d131      	bne.n	800e5ba <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e556:	7cfb      	ldrb	r3, [r7, #19]
 800e558:	461a      	mov	r2, r3
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e55e:	f7ff ff83 	bl	800e468 <udp_input_local_match>
 800e562:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e564:	2b00      	cmp	r3, #0
 800e566:	d028      	beq.n	800e5ba <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56a:	7c1b      	ldrb	r3, [r3, #16]
 800e56c:	f003 0304 	and.w	r3, r3, #4
 800e570:	2b00      	cmp	r3, #0
 800e572:	d104      	bne.n	800e57e <udp_input+0x9e>
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d101      	bne.n	800e57e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800e57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e580:	8a9b      	ldrh	r3, [r3, #20]
 800e582:	8a3a      	ldrh	r2, [r7, #16]
 800e584:	429a      	cmp	r2, r3
 800e586:	d118      	bne.n	800e5ba <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d005      	beq.n	800e59c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e592:	685a      	ldr	r2, [r3, #4]
 800e594:	4b3f      	ldr	r3, [pc, #252]	; (800e694 <udp_input+0x1b4>)
 800e596:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e598:	429a      	cmp	r2, r3
 800e59a:	d10e      	bne.n	800e5ba <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e59c:	6a3b      	ldr	r3, [r7, #32]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d014      	beq.n	800e5cc <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a4:	68da      	ldr	r2, [r3, #12]
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e5aa:	4b3b      	ldr	r3, [pc, #236]	; (800e698 <udp_input+0x1b8>)
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e5b2:	4a39      	ldr	r2, [pc, #228]	; (800e698 <udp_input+0x1b8>)
 800e5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b6:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e5b8:	e008      	b.n	800e5cc <udp_input+0xec>
      }
    }

    prev = pcb;
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5bc:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	627b      	str	r3, [r7, #36]	; 0x24
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d1c0      	bne.n	800e54c <udp_input+0x6c>
 800e5ca:	e000      	b.n	800e5ce <udp_input+0xee>
        break;
 800e5cc:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d101      	bne.n	800e5d8 <udp_input+0xf8>
    pcb = uncon_pcb;
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d002      	beq.n	800e5e4 <udp_input+0x104>
    for_us = 1;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	76fb      	strb	r3, [r7, #27]
 800e5e2:	e00a      	b.n	800e5fa <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	3304      	adds	r3, #4
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	4b2a      	ldr	r3, [pc, #168]	; (800e694 <udp_input+0x1b4>)
 800e5ec:	695b      	ldr	r3, [r3, #20]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	bf0c      	ite	eq
 800e5f2:	2301      	moveq	r3, #1
 800e5f4:	2300      	movne	r3, #0
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e5fa:	7efb      	ldrb	r3, [r7, #27]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d042      	beq.n	800e686 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800e600:	f06f 0107 	mvn.w	r1, #7
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7fa f951 	bl	80088ac <pbuf_header>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00a      	beq.n	800e626 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800e610:	4b22      	ldr	r3, [pc, #136]	; (800e69c <udp_input+0x1bc>)
 800e612:	f240 1255 	movw	r2, #341	; 0x155
 800e616:	4922      	ldr	r1, [pc, #136]	; (800e6a0 <udp_input+0x1c0>)
 800e618:	4822      	ldr	r0, [pc, #136]	; (800e6a4 <udp_input+0x1c4>)
 800e61a:	f002 fbc1 	bl	8010da0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7fa f968 	bl	80088f4 <pbuf_free>
      goto end;
 800e624:	e032      	b.n	800e68c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800e626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d012      	beq.n	800e652 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62e:	699b      	ldr	r3, [r3, #24]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00a      	beq.n	800e64a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e636:	699c      	ldr	r4, [r3, #24]
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	69d8      	ldr	r0, [r3, #28]
 800e63c:	8a3b      	ldrh	r3, [r7, #16]
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	4b19      	ldr	r3, [pc, #100]	; (800e6a8 <udp_input+0x1c8>)
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e646:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e648:	e021      	b.n	800e68e <udp_input+0x1ae>
        pbuf_free(p);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7fa f952 	bl	80088f4 <pbuf_free>
        goto end;
 800e650:	e01c      	b.n	800e68c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e652:	7cfb      	ldrb	r3, [r7, #19]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d112      	bne.n	800e67e <udp_input+0x19e>
 800e658:	4b0e      	ldr	r3, [pc, #56]	; (800e694 <udp_input+0x1b4>)
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e660:	2be0      	cmp	r3, #224	; 0xe0
 800e662:	d00c      	beq.n	800e67e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e664:	4b0b      	ldr	r3, [pc, #44]	; (800e694 <udp_input+0x1b4>)
 800e666:	899b      	ldrh	r3, [r3, #12]
 800e668:	3308      	adds	r3, #8
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	b21b      	sxth	r3, r3
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7fa f92d 	bl	80088d0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e676:	2103      	movs	r1, #3
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f001 f863 	bl	800f744 <icmp_dest_unreach>
      pbuf_free(p);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7fa f938 	bl	80088f4 <pbuf_free>
  return;
 800e684:	e003      	b.n	800e68e <udp_input+0x1ae>
    pbuf_free(p);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7fa f934 	bl	80088f4 <pbuf_free>
  return;
 800e68c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e68e:	372c      	adds	r7, #44	; 0x2c
 800e690:	46bd      	mov	sp, r7
 800e692:	bd90      	pop	{r4, r7, pc}
 800e694:	20003a90 	.word	0x20003a90
 800e698:	20007048 	.word	0x20007048
 800e69c:	08013998 	.word	0x08013998
 800e6a0:	080139c8 	.word	0x080139c8
 800e6a4:	080139dc 	.word	0x080139dc
 800e6a8:	20003aa0 	.word	0x20003aa0

0800e6ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b085      	sub	sp, #20
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d01e      	beq.n	800e6fa <udp_netif_ip_addr_changed+0x4e>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d01a      	beq.n	800e6fa <udp_netif_ip_addr_changed+0x4e>
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d017      	beq.n	800e6fa <udp_netif_ip_addr_changed+0x4e>
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d013      	beq.n	800e6fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e6d2:	4b0d      	ldr	r3, [pc, #52]	; (800e708 <udp_netif_ip_addr_changed+0x5c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	60fb      	str	r3, [r7, #12]
 800e6d8:	e00c      	b.n	800e6f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d103      	bne.n	800e6ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1ef      	bne.n	800e6da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e6fa:	bf00      	nop
 800e6fc:	3714      	adds	r7, #20
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop
 800e708:	20007048 	.word	0x20007048

0800e70c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e714:	4915      	ldr	r1, [pc, #84]	; (800e76c <etharp_free_entry+0x60>)
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	4613      	mov	r3, r2
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	4413      	add	r3, r2
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	440b      	add	r3, r1
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d013      	beq.n	800e750 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e728:	4910      	ldr	r1, [pc, #64]	; (800e76c <etharp_free_entry+0x60>)
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	4613      	mov	r3, r2
 800e72e:	005b      	lsls	r3, r3, #1
 800e730:	4413      	add	r3, r2
 800e732:	00db      	lsls	r3, r3, #3
 800e734:	440b      	add	r3, r1
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4618      	mov	r0, r3
 800e73a:	f7fa f8db 	bl	80088f4 <pbuf_free>
    arp_table[i].q = NULL;
 800e73e:	490b      	ldr	r1, [pc, #44]	; (800e76c <etharp_free_entry+0x60>)
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	4613      	mov	r3, r2
 800e744:	005b      	lsls	r3, r3, #1
 800e746:	4413      	add	r3, r2
 800e748:	00db      	lsls	r3, r3, #3
 800e74a:	440b      	add	r3, r1
 800e74c:	2200      	movs	r2, #0
 800e74e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e750:	4906      	ldr	r1, [pc, #24]	; (800e76c <etharp_free_entry+0x60>)
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	4613      	mov	r3, r2
 800e756:	005b      	lsls	r3, r3, #1
 800e758:	4413      	add	r3, r2
 800e75a:	00db      	lsls	r3, r3, #3
 800e75c:	440b      	add	r3, r1
 800e75e:	3314      	adds	r3, #20
 800e760:	2200      	movs	r2, #0
 800e762:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e764:	bf00      	nop
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	2000704c 	.word	0x2000704c

0800e770 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e776:	2300      	movs	r3, #0
 800e778:	71fb      	strb	r3, [r7, #7]
 800e77a:	e096      	b.n	800e8aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e77c:	79fa      	ldrb	r2, [r7, #7]
 800e77e:	494f      	ldr	r1, [pc, #316]	; (800e8bc <etharp_tmr+0x14c>)
 800e780:	4613      	mov	r3, r2
 800e782:	005b      	lsls	r3, r3, #1
 800e784:	4413      	add	r3, r2
 800e786:	00db      	lsls	r3, r3, #3
 800e788:	440b      	add	r3, r1
 800e78a:	3314      	adds	r3, #20
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800e790:	79bb      	ldrb	r3, [r7, #6]
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 8086 	beq.w	800e8a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800e798:	79fa      	ldrb	r2, [r7, #7]
 800e79a:	4948      	ldr	r1, [pc, #288]	; (800e8bc <etharp_tmr+0x14c>)
 800e79c:	4613      	mov	r3, r2
 800e79e:	005b      	lsls	r3, r3, #1
 800e7a0:	4413      	add	r3, r2
 800e7a2:	00db      	lsls	r3, r3, #3
 800e7a4:	440b      	add	r3, r1
 800e7a6:	3312      	adds	r3, #18
 800e7a8:	881b      	ldrh	r3, [r3, #0]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	b298      	uxth	r0, r3
 800e7ae:	4943      	ldr	r1, [pc, #268]	; (800e8bc <etharp_tmr+0x14c>)
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	005b      	lsls	r3, r3, #1
 800e7b4:	4413      	add	r3, r2
 800e7b6:	00db      	lsls	r3, r3, #3
 800e7b8:	440b      	add	r3, r1
 800e7ba:	3312      	adds	r3, #18
 800e7bc:	4602      	mov	r2, r0
 800e7be:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e7c0:	79fa      	ldrb	r2, [r7, #7]
 800e7c2:	493e      	ldr	r1, [pc, #248]	; (800e8bc <etharp_tmr+0x14c>)
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	005b      	lsls	r3, r3, #1
 800e7c8:	4413      	add	r3, r2
 800e7ca:	00db      	lsls	r3, r3, #3
 800e7cc:	440b      	add	r3, r1
 800e7ce:	3312      	adds	r3, #18
 800e7d0:	881b      	ldrh	r3, [r3, #0]
 800e7d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e7d6:	d215      	bcs.n	800e804 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e7d8:	79fa      	ldrb	r2, [r7, #7]
 800e7da:	4938      	ldr	r1, [pc, #224]	; (800e8bc <etharp_tmr+0x14c>)
 800e7dc:	4613      	mov	r3, r2
 800e7de:	005b      	lsls	r3, r3, #1
 800e7e0:	4413      	add	r3, r2
 800e7e2:	00db      	lsls	r3, r3, #3
 800e7e4:	440b      	add	r3, r1
 800e7e6:	3314      	adds	r3, #20
 800e7e8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d10f      	bne.n	800e80e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e7ee:	79fa      	ldrb	r2, [r7, #7]
 800e7f0:	4932      	ldr	r1, [pc, #200]	; (800e8bc <etharp_tmr+0x14c>)
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	005b      	lsls	r3, r3, #1
 800e7f6:	4413      	add	r3, r2
 800e7f8:	00db      	lsls	r3, r3, #3
 800e7fa:	440b      	add	r3, r1
 800e7fc:	3312      	adds	r3, #18
 800e7fe:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e800:	2b04      	cmp	r3, #4
 800e802:	d904      	bls.n	800e80e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e804:	79fb      	ldrb	r3, [r7, #7]
 800e806:	4618      	mov	r0, r3
 800e808:	f7ff ff80 	bl	800e70c <etharp_free_entry>
 800e80c:	e04a      	b.n	800e8a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e80e:	79fa      	ldrb	r2, [r7, #7]
 800e810:	492a      	ldr	r1, [pc, #168]	; (800e8bc <etharp_tmr+0x14c>)
 800e812:	4613      	mov	r3, r2
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	4413      	add	r3, r2
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	440b      	add	r3, r1
 800e81c:	3314      	adds	r3, #20
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	2b03      	cmp	r3, #3
 800e822:	d10a      	bne.n	800e83a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e824:	79fa      	ldrb	r2, [r7, #7]
 800e826:	4925      	ldr	r1, [pc, #148]	; (800e8bc <etharp_tmr+0x14c>)
 800e828:	4613      	mov	r3, r2
 800e82a:	005b      	lsls	r3, r3, #1
 800e82c:	4413      	add	r3, r2
 800e82e:	00db      	lsls	r3, r3, #3
 800e830:	440b      	add	r3, r1
 800e832:	3314      	adds	r3, #20
 800e834:	2204      	movs	r2, #4
 800e836:	701a      	strb	r2, [r3, #0]
 800e838:	e034      	b.n	800e8a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e83a:	79fa      	ldrb	r2, [r7, #7]
 800e83c:	491f      	ldr	r1, [pc, #124]	; (800e8bc <etharp_tmr+0x14c>)
 800e83e:	4613      	mov	r3, r2
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	4413      	add	r3, r2
 800e844:	00db      	lsls	r3, r3, #3
 800e846:	440b      	add	r3, r1
 800e848:	3314      	adds	r3, #20
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	2b04      	cmp	r3, #4
 800e84e:	d10a      	bne.n	800e866 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e850:	79fa      	ldrb	r2, [r7, #7]
 800e852:	491a      	ldr	r1, [pc, #104]	; (800e8bc <etharp_tmr+0x14c>)
 800e854:	4613      	mov	r3, r2
 800e856:	005b      	lsls	r3, r3, #1
 800e858:	4413      	add	r3, r2
 800e85a:	00db      	lsls	r3, r3, #3
 800e85c:	440b      	add	r3, r1
 800e85e:	3314      	adds	r3, #20
 800e860:	2202      	movs	r2, #2
 800e862:	701a      	strb	r2, [r3, #0]
 800e864:	e01e      	b.n	800e8a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e866:	79fa      	ldrb	r2, [r7, #7]
 800e868:	4914      	ldr	r1, [pc, #80]	; (800e8bc <etharp_tmr+0x14c>)
 800e86a:	4613      	mov	r3, r2
 800e86c:	005b      	lsls	r3, r3, #1
 800e86e:	4413      	add	r3, r2
 800e870:	00db      	lsls	r3, r3, #3
 800e872:	440b      	add	r3, r1
 800e874:	3314      	adds	r3, #20
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d113      	bne.n	800e8a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e87c:	79fa      	ldrb	r2, [r7, #7]
 800e87e:	490f      	ldr	r1, [pc, #60]	; (800e8bc <etharp_tmr+0x14c>)
 800e880:	4613      	mov	r3, r2
 800e882:	005b      	lsls	r3, r3, #1
 800e884:	4413      	add	r3, r2
 800e886:	00db      	lsls	r3, r3, #3
 800e888:	440b      	add	r3, r1
 800e88a:	3308      	adds	r3, #8
 800e88c:	6818      	ldr	r0, [r3, #0]
 800e88e:	79fa      	ldrb	r2, [r7, #7]
 800e890:	4613      	mov	r3, r2
 800e892:	005b      	lsls	r3, r3, #1
 800e894:	4413      	add	r3, r2
 800e896:	00db      	lsls	r3, r3, #3
 800e898:	4a08      	ldr	r2, [pc, #32]	; (800e8bc <etharp_tmr+0x14c>)
 800e89a:	4413      	add	r3, r2
 800e89c:	3304      	adds	r3, #4
 800e89e:	4619      	mov	r1, r3
 800e8a0:	f000 fe38 	bl	800f514 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8a4:	79fb      	ldrb	r3, [r7, #7]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	71fb      	strb	r3, [r7, #7]
 800e8aa:	79fb      	ldrb	r3, [r7, #7]
 800e8ac:	2b09      	cmp	r3, #9
 800e8ae:	f67f af65 	bls.w	800e77c <etharp_tmr+0xc>
      }
    }
  }
}
 800e8b2:	bf00      	nop
 800e8b4:	bf00      	nop
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	2000704c 	.word	0x2000704c

0800e8c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b088      	sub	sp, #32
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	607a      	str	r2, [r7, #4]
 800e8cc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e8ce:	230a      	movs	r3, #10
 800e8d0:	77fb      	strb	r3, [r7, #31]
 800e8d2:	230a      	movs	r3, #10
 800e8d4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800e8d6:	230a      	movs	r3, #10
 800e8d8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800e8de:	230a      	movs	r3, #10
 800e8e0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	833b      	strh	r3, [r7, #24]
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	82fb      	strh	r3, [r7, #22]
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	773b      	strb	r3, [r7, #28]
 800e8f2:	e093      	b.n	800ea1c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800e8f4:	7f3a      	ldrb	r2, [r7, #28]
 800e8f6:	4990      	ldr	r1, [pc, #576]	; (800eb38 <etharp_find_entry+0x278>)
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	005b      	lsls	r3, r3, #1
 800e8fc:	4413      	add	r3, r2
 800e8fe:	00db      	lsls	r3, r3, #3
 800e900:	440b      	add	r3, r1
 800e902:	3314      	adds	r3, #20
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e908:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e90c:	2b0a      	cmp	r3, #10
 800e90e:	d105      	bne.n	800e91c <etharp_find_entry+0x5c>
 800e910:	7cfb      	ldrb	r3, [r7, #19]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d102      	bne.n	800e91c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800e916:	7f3b      	ldrb	r3, [r7, #28]
 800e918:	777b      	strb	r3, [r7, #29]
 800e91a:	e07c      	b.n	800ea16 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e91c:	7cfb      	ldrb	r3, [r7, #19]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d079      	beq.n	800ea16 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e922:	7cfb      	ldrb	r3, [r7, #19]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d009      	beq.n	800e93c <etharp_find_entry+0x7c>
 800e928:	7cfb      	ldrb	r3, [r7, #19]
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d806      	bhi.n	800e93c <etharp_find_entry+0x7c>
 800e92e:	4b83      	ldr	r3, [pc, #524]	; (800eb3c <etharp_find_entry+0x27c>)
 800e930:	f240 1225 	movw	r2, #293	; 0x125
 800e934:	4982      	ldr	r1, [pc, #520]	; (800eb40 <etharp_find_entry+0x280>)
 800e936:	4883      	ldr	r0, [pc, #524]	; (800eb44 <etharp_find_entry+0x284>)
 800e938:	f002 fa32 	bl	8010da0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d00f      	beq.n	800e962 <etharp_find_entry+0xa2>
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	6819      	ldr	r1, [r3, #0]
 800e946:	7f3a      	ldrb	r2, [r7, #28]
 800e948:	487b      	ldr	r0, [pc, #492]	; (800eb38 <etharp_find_entry+0x278>)
 800e94a:	4613      	mov	r3, r2
 800e94c:	005b      	lsls	r3, r3, #1
 800e94e:	4413      	add	r3, r2
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	4403      	add	r3, r0
 800e954:	3304      	adds	r3, #4
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4299      	cmp	r1, r3
 800e95a:	d102      	bne.n	800e962 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e95c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e960:	e0e5      	b.n	800eb2e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e962:	7cfb      	ldrb	r3, [r7, #19]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d13b      	bne.n	800e9e0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e968:	7f3a      	ldrb	r2, [r7, #28]
 800e96a:	4973      	ldr	r1, [pc, #460]	; (800eb38 <etharp_find_entry+0x278>)
 800e96c:	4613      	mov	r3, r2
 800e96e:	005b      	lsls	r3, r3, #1
 800e970:	4413      	add	r3, r2
 800e972:	00db      	lsls	r3, r3, #3
 800e974:	440b      	add	r3, r1
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d018      	beq.n	800e9ae <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800e97c:	7f3a      	ldrb	r2, [r7, #28]
 800e97e:	496e      	ldr	r1, [pc, #440]	; (800eb38 <etharp_find_entry+0x278>)
 800e980:	4613      	mov	r3, r2
 800e982:	005b      	lsls	r3, r3, #1
 800e984:	4413      	add	r3, r2
 800e986:	00db      	lsls	r3, r3, #3
 800e988:	440b      	add	r3, r1
 800e98a:	3312      	adds	r3, #18
 800e98c:	881b      	ldrh	r3, [r3, #0]
 800e98e:	8b3a      	ldrh	r2, [r7, #24]
 800e990:	429a      	cmp	r2, r3
 800e992:	d840      	bhi.n	800ea16 <etharp_find_entry+0x156>
            old_queue = i;
 800e994:	7f3b      	ldrb	r3, [r7, #28]
 800e996:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800e998:	7f3a      	ldrb	r2, [r7, #28]
 800e99a:	4967      	ldr	r1, [pc, #412]	; (800eb38 <etharp_find_entry+0x278>)
 800e99c:	4613      	mov	r3, r2
 800e99e:	005b      	lsls	r3, r3, #1
 800e9a0:	4413      	add	r3, r2
 800e9a2:	00db      	lsls	r3, r3, #3
 800e9a4:	440b      	add	r3, r1
 800e9a6:	3312      	adds	r3, #18
 800e9a8:	881b      	ldrh	r3, [r3, #0]
 800e9aa:	833b      	strh	r3, [r7, #24]
 800e9ac:	e033      	b.n	800ea16 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e9ae:	7f3a      	ldrb	r2, [r7, #28]
 800e9b0:	4961      	ldr	r1, [pc, #388]	; (800eb38 <etharp_find_entry+0x278>)
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	005b      	lsls	r3, r3, #1
 800e9b6:	4413      	add	r3, r2
 800e9b8:	00db      	lsls	r3, r3, #3
 800e9ba:	440b      	add	r3, r1
 800e9bc:	3312      	adds	r3, #18
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	8afa      	ldrh	r2, [r7, #22]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d827      	bhi.n	800ea16 <etharp_find_entry+0x156>
            old_pending = i;
 800e9c6:	7f3b      	ldrb	r3, [r7, #28]
 800e9c8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800e9ca:	7f3a      	ldrb	r2, [r7, #28]
 800e9cc:	495a      	ldr	r1, [pc, #360]	; (800eb38 <etharp_find_entry+0x278>)
 800e9ce:	4613      	mov	r3, r2
 800e9d0:	005b      	lsls	r3, r3, #1
 800e9d2:	4413      	add	r3, r2
 800e9d4:	00db      	lsls	r3, r3, #3
 800e9d6:	440b      	add	r3, r1
 800e9d8:	3312      	adds	r3, #18
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	82fb      	strh	r3, [r7, #22]
 800e9de:	e01a      	b.n	800ea16 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e9e0:	7cfb      	ldrb	r3, [r7, #19]
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d917      	bls.n	800ea16 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e9e6:	7f3a      	ldrb	r2, [r7, #28]
 800e9e8:	4953      	ldr	r1, [pc, #332]	; (800eb38 <etharp_find_entry+0x278>)
 800e9ea:	4613      	mov	r3, r2
 800e9ec:	005b      	lsls	r3, r3, #1
 800e9ee:	4413      	add	r3, r2
 800e9f0:	00db      	lsls	r3, r3, #3
 800e9f2:	440b      	add	r3, r1
 800e9f4:	3312      	adds	r3, #18
 800e9f6:	881b      	ldrh	r3, [r3, #0]
 800e9f8:	8aba      	ldrh	r2, [r7, #20]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d80b      	bhi.n	800ea16 <etharp_find_entry+0x156>
            old_stable = i;
 800e9fe:	7f3b      	ldrb	r3, [r7, #28]
 800ea00:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800ea02:	7f3a      	ldrb	r2, [r7, #28]
 800ea04:	494c      	ldr	r1, [pc, #304]	; (800eb38 <etharp_find_entry+0x278>)
 800ea06:	4613      	mov	r3, r2
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	4413      	add	r3, r2
 800ea0c:	00db      	lsls	r3, r3, #3
 800ea0e:	440b      	add	r3, r1
 800ea10:	3312      	adds	r3, #18
 800ea12:	881b      	ldrh	r3, [r3, #0]
 800ea14:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea16:	7f3b      	ldrb	r3, [r7, #28]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	773b      	strb	r3, [r7, #28]
 800ea1c:	7f3b      	ldrb	r3, [r7, #28]
 800ea1e:	2b09      	cmp	r3, #9
 800ea20:	f67f af68 	bls.w	800e8f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ea24:	7afb      	ldrb	r3, [r7, #11]
 800ea26:	f003 0302 	and.w	r3, r3, #2
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d108      	bne.n	800ea40 <etharp_find_entry+0x180>
 800ea2e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ea32:	2b0a      	cmp	r3, #10
 800ea34:	d107      	bne.n	800ea46 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ea36:	7afb      	ldrb	r3, [r7, #11]
 800ea38:	f003 0301 	and.w	r3, r3, #1
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d102      	bne.n	800ea46 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800ea40:	f04f 33ff 	mov.w	r3, #4294967295
 800ea44:	e073      	b.n	800eb2e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ea46:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ea4a:	2b09      	cmp	r3, #9
 800ea4c:	dc02      	bgt.n	800ea54 <etharp_find_entry+0x194>
    i = empty;
 800ea4e:	7f7b      	ldrb	r3, [r7, #29]
 800ea50:	773b      	strb	r3, [r7, #28]
 800ea52:	e036      	b.n	800eac2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ea54:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ea58:	2b09      	cmp	r3, #9
 800ea5a:	dc13      	bgt.n	800ea84 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800ea5c:	7fbb      	ldrb	r3, [r7, #30]
 800ea5e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ea60:	7f3a      	ldrb	r2, [r7, #28]
 800ea62:	4935      	ldr	r1, [pc, #212]	; (800eb38 <etharp_find_entry+0x278>)
 800ea64:	4613      	mov	r3, r2
 800ea66:	005b      	lsls	r3, r3, #1
 800ea68:	4413      	add	r3, r2
 800ea6a:	00db      	lsls	r3, r3, #3
 800ea6c:	440b      	add	r3, r1
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d018      	beq.n	800eaa6 <etharp_find_entry+0x1e6>
 800ea74:	4b31      	ldr	r3, [pc, #196]	; (800eb3c <etharp_find_entry+0x27c>)
 800ea76:	f240 126f 	movw	r2, #367	; 0x16f
 800ea7a:	4933      	ldr	r1, [pc, #204]	; (800eb48 <etharp_find_entry+0x288>)
 800ea7c:	4831      	ldr	r0, [pc, #196]	; (800eb44 <etharp_find_entry+0x284>)
 800ea7e:	f002 f98f 	bl	8010da0 <iprintf>
 800ea82:	e010      	b.n	800eaa6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ea84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ea88:	2b09      	cmp	r3, #9
 800ea8a:	dc02      	bgt.n	800ea92 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800ea8c:	7ffb      	ldrb	r3, [r7, #31]
 800ea8e:	773b      	strb	r3, [r7, #28]
 800ea90:	e009      	b.n	800eaa6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ea92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ea96:	2b09      	cmp	r3, #9
 800ea98:	dc02      	bgt.n	800eaa0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ea9a:	7efb      	ldrb	r3, [r7, #27]
 800ea9c:	773b      	strb	r3, [r7, #28]
 800ea9e:	e002      	b.n	800eaa6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800eaa0:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa4:	e043      	b.n	800eb2e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800eaa6:	7f3b      	ldrb	r3, [r7, #28]
 800eaa8:	2b09      	cmp	r3, #9
 800eaaa:	d906      	bls.n	800eaba <etharp_find_entry+0x1fa>
 800eaac:	4b23      	ldr	r3, [pc, #140]	; (800eb3c <etharp_find_entry+0x27c>)
 800eaae:	f240 1281 	movw	r2, #385	; 0x181
 800eab2:	4926      	ldr	r1, [pc, #152]	; (800eb4c <etharp_find_entry+0x28c>)
 800eab4:	4823      	ldr	r0, [pc, #140]	; (800eb44 <etharp_find_entry+0x284>)
 800eab6:	f002 f973 	bl	8010da0 <iprintf>
    etharp_free_entry(i);
 800eaba:	7f3b      	ldrb	r3, [r7, #28]
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7ff fe25 	bl	800e70c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800eac2:	7f3b      	ldrb	r3, [r7, #28]
 800eac4:	2b09      	cmp	r3, #9
 800eac6:	d906      	bls.n	800ead6 <etharp_find_entry+0x216>
 800eac8:	4b1c      	ldr	r3, [pc, #112]	; (800eb3c <etharp_find_entry+0x27c>)
 800eaca:	f240 1285 	movw	r2, #389	; 0x185
 800eace:	491f      	ldr	r1, [pc, #124]	; (800eb4c <etharp_find_entry+0x28c>)
 800ead0:	481c      	ldr	r0, [pc, #112]	; (800eb44 <etharp_find_entry+0x284>)
 800ead2:	f002 f965 	bl	8010da0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ead6:	7f3a      	ldrb	r2, [r7, #28]
 800ead8:	4917      	ldr	r1, [pc, #92]	; (800eb38 <etharp_find_entry+0x278>)
 800eada:	4613      	mov	r3, r2
 800eadc:	005b      	lsls	r3, r3, #1
 800eade:	4413      	add	r3, r2
 800eae0:	00db      	lsls	r3, r3, #3
 800eae2:	440b      	add	r3, r1
 800eae4:	3314      	adds	r3, #20
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d006      	beq.n	800eafa <etharp_find_entry+0x23a>
 800eaec:	4b13      	ldr	r3, [pc, #76]	; (800eb3c <etharp_find_entry+0x27c>)
 800eaee:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800eaf2:	4917      	ldr	r1, [pc, #92]	; (800eb50 <etharp_find_entry+0x290>)
 800eaf4:	4813      	ldr	r0, [pc, #76]	; (800eb44 <etharp_find_entry+0x284>)
 800eaf6:	f002 f953 	bl	8010da0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00a      	beq.n	800eb16 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800eb00:	7f3a      	ldrb	r2, [r7, #28]
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6819      	ldr	r1, [r3, #0]
 800eb06:	480c      	ldr	r0, [pc, #48]	; (800eb38 <etharp_find_entry+0x278>)
 800eb08:	4613      	mov	r3, r2
 800eb0a:	005b      	lsls	r3, r3, #1
 800eb0c:	4413      	add	r3, r2
 800eb0e:	00db      	lsls	r3, r3, #3
 800eb10:	4403      	add	r3, r0
 800eb12:	3304      	adds	r3, #4
 800eb14:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800eb16:	7f3a      	ldrb	r2, [r7, #28]
 800eb18:	4907      	ldr	r1, [pc, #28]	; (800eb38 <etharp_find_entry+0x278>)
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	005b      	lsls	r3, r3, #1
 800eb1e:	4413      	add	r3, r2
 800eb20:	00db      	lsls	r3, r3, #3
 800eb22:	440b      	add	r3, r1
 800eb24:	3312      	adds	r3, #18
 800eb26:	2200      	movs	r2, #0
 800eb28:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800eb2a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3720      	adds	r7, #32
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	2000704c 	.word	0x2000704c
 800eb3c:	08013a34 	.word	0x08013a34
 800eb40:	08013a6c 	.word	0x08013a6c
 800eb44:	08013aac 	.word	0x08013aac
 800eb48:	08013ad4 	.word	0x08013ad4
 800eb4c:	08013aec 	.word	0x08013aec
 800eb50:	08013b00 	.word	0x08013b00

0800eb54 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b088      	sub	sp, #32
 800eb58:	af02      	add	r7, sp, #8
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
 800eb60:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb68:	2b06      	cmp	r3, #6
 800eb6a:	d006      	beq.n	800eb7a <etharp_update_arp_entry+0x26>
 800eb6c:	4b48      	ldr	r3, [pc, #288]	; (800ec90 <etharp_update_arp_entry+0x13c>)
 800eb6e:	f240 12ab 	movw	r2, #427	; 0x1ab
 800eb72:	4948      	ldr	r1, [pc, #288]	; (800ec94 <etharp_update_arp_entry+0x140>)
 800eb74:	4848      	ldr	r0, [pc, #288]	; (800ec98 <etharp_update_arp_entry+0x144>)
 800eb76:	f002 f913 	bl	8010da0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d012      	beq.n	800eba6 <etharp_update_arp_entry+0x52>
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00e      	beq.n	800eba6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	68f9      	ldr	r1, [r7, #12]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f001 f8dc 	bl	800fd4c <ip4_addr_isbroadcast_u32>
 800eb94:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d105      	bne.n	800eba6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eba2:	2be0      	cmp	r3, #224	; 0xe0
 800eba4:	d102      	bne.n	800ebac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eba6:	f06f 030f 	mvn.w	r3, #15
 800ebaa:	e06c      	b.n	800ec86 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ebac:	78fb      	ldrb	r3, [r7, #3]
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	68b8      	ldr	r0, [r7, #8]
 800ebb4:	f7ff fe84 	bl	800e8c0 <etharp_find_entry>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ebbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	da02      	bge.n	800ebca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ebc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebc8:	e05d      	b.n	800ec86 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ebca:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ebce:	4933      	ldr	r1, [pc, #204]	; (800ec9c <etharp_update_arp_entry+0x148>)
 800ebd0:	4613      	mov	r3, r2
 800ebd2:	005b      	lsls	r3, r3, #1
 800ebd4:	4413      	add	r3, r2
 800ebd6:	00db      	lsls	r3, r3, #3
 800ebd8:	440b      	add	r3, r1
 800ebda:	3314      	adds	r3, #20
 800ebdc:	2202      	movs	r2, #2
 800ebde:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ebe0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ebe4:	492d      	ldr	r1, [pc, #180]	; (800ec9c <etharp_update_arp_entry+0x148>)
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	005b      	lsls	r3, r3, #1
 800ebea:	4413      	add	r3, r2
 800ebec:	00db      	lsls	r3, r3, #3
 800ebee:	440b      	add	r3, r1
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	68fa      	ldr	r2, [r7, #12]
 800ebf4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800ebf6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	005b      	lsls	r3, r3, #1
 800ebfe:	4413      	add	r3, r2
 800ec00:	00db      	lsls	r3, r3, #3
 800ec02:	3308      	adds	r3, #8
 800ec04:	4a25      	ldr	r2, [pc, #148]	; (800ec9c <etharp_update_arp_entry+0x148>)
 800ec06:	4413      	add	r3, r2
 800ec08:	3304      	adds	r3, #4
 800ec0a:	2206      	movs	r2, #6
 800ec0c:	6879      	ldr	r1, [r7, #4]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f001 ffd0 	bl	8010bb4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ec14:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ec18:	4920      	ldr	r1, [pc, #128]	; (800ec9c <etharp_update_arp_entry+0x148>)
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	005b      	lsls	r3, r3, #1
 800ec1e:	4413      	add	r3, r2
 800ec20:	00db      	lsls	r3, r3, #3
 800ec22:	440b      	add	r3, r1
 800ec24:	3312      	adds	r3, #18
 800ec26:	2200      	movs	r2, #0
 800ec28:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ec2a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ec2e:	491b      	ldr	r1, [pc, #108]	; (800ec9c <etharp_update_arp_entry+0x148>)
 800ec30:	4613      	mov	r3, r2
 800ec32:	005b      	lsls	r3, r3, #1
 800ec34:	4413      	add	r3, r2
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	440b      	add	r3, r1
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d021      	beq.n	800ec84 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ec40:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ec44:	4915      	ldr	r1, [pc, #84]	; (800ec9c <etharp_update_arp_entry+0x148>)
 800ec46:	4613      	mov	r3, r2
 800ec48:	005b      	lsls	r3, r3, #1
 800ec4a:	4413      	add	r3, r2
 800ec4c:	00db      	lsls	r3, r3, #3
 800ec4e:	440b      	add	r3, r1
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ec54:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ec58:	4910      	ldr	r1, [pc, #64]	; (800ec9c <etharp_update_arp_entry+0x148>)
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	005b      	lsls	r3, r3, #1
 800ec5e:	4413      	add	r3, r2
 800ec60:	00db      	lsls	r3, r3, #3
 800ec62:	440b      	add	r3, r1
 800ec64:	2200      	movs	r2, #0
 800ec66:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800ec6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6939      	ldr	r1, [r7, #16]
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f001 ff0f 	bl	8010a9c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ec7e:	6938      	ldr	r0, [r7, #16]
 800ec80:	f7f9 fe38 	bl	80088f4 <pbuf_free>
  }
  return ERR_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3718      	adds	r7, #24
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	08013a34 	.word	0x08013a34
 800ec94:	08013b2c 	.word	0x08013b2c
 800ec98:	08013aac 	.word	0x08013aac
 800ec9c:	2000704c 	.word	0x2000704c

0800eca0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eca8:	2300      	movs	r3, #0
 800ecaa:	73fb      	strb	r3, [r7, #15]
 800ecac:	e01f      	b.n	800ecee <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800ecae:	7bfa      	ldrb	r2, [r7, #15]
 800ecb0:	4913      	ldr	r1, [pc, #76]	; (800ed00 <etharp_cleanup_netif+0x60>)
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	005b      	lsls	r3, r3, #1
 800ecb6:	4413      	add	r3, r2
 800ecb8:	00db      	lsls	r3, r3, #3
 800ecba:	440b      	add	r3, r1
 800ecbc:	3314      	adds	r3, #20
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ecc2:	7bbb      	ldrb	r3, [r7, #14]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00f      	beq.n	800ece8 <etharp_cleanup_netif+0x48>
 800ecc8:	7bfa      	ldrb	r2, [r7, #15]
 800ecca:	490d      	ldr	r1, [pc, #52]	; (800ed00 <etharp_cleanup_netif+0x60>)
 800eccc:	4613      	mov	r3, r2
 800ecce:	005b      	lsls	r3, r3, #1
 800ecd0:	4413      	add	r3, r2
 800ecd2:	00db      	lsls	r3, r3, #3
 800ecd4:	440b      	add	r3, r1
 800ecd6:	3308      	adds	r3, #8
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d103      	bne.n	800ece8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800ece0:	7bfb      	ldrb	r3, [r7, #15]
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7ff fd12 	bl	800e70c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ece8:	7bfb      	ldrb	r3, [r7, #15]
 800ecea:	3301      	adds	r3, #1
 800ecec:	73fb      	strb	r3, [r7, #15]
 800ecee:	7bfb      	ldrb	r3, [r7, #15]
 800ecf0:	2b09      	cmp	r3, #9
 800ecf2:	d9dc      	bls.n	800ecae <etharp_cleanup_netif+0xe>
    }
  }
}
 800ecf4:	bf00      	nop
 800ecf6:	bf00      	nop
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	2000704c 	.word	0x2000704c

0800ed04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ed04:	b5b0      	push	{r4, r5, r7, lr}
 800ed06:	b08a      	sub	sp, #40	; 0x28
 800ed08:	af04      	add	r7, sp, #16
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d107      	bne.n	800ed24 <etharp_input+0x20>
 800ed14:	4b3d      	ldr	r3, [pc, #244]	; (800ee0c <etharp_input+0x108>)
 800ed16:	f44f 7222 	mov.w	r2, #648	; 0x288
 800ed1a:	493d      	ldr	r1, [pc, #244]	; (800ee10 <etharp_input+0x10c>)
 800ed1c:	483d      	ldr	r0, [pc, #244]	; (800ee14 <etharp_input+0x110>)
 800ed1e:	f002 f83f 	bl	8010da0 <iprintf>
 800ed22:	e06f      	b.n	800ee04 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	881b      	ldrh	r3, [r3, #0]
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed34:	d10c      	bne.n	800ed50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800ed3a:	2b06      	cmp	r3, #6
 800ed3c:	d108      	bne.n	800ed50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ed42:	2b04      	cmp	r3, #4
 800ed44:	d104      	bne.n	800ed50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	885b      	ldrh	r3, [r3, #2]
 800ed4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ed4c:	2b08      	cmp	r3, #8
 800ed4e:	d003      	beq.n	800ed58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f7f9 fdcf 	bl	80088f4 <pbuf_free>
    return;
 800ed56:	e055      	b.n	800ee04 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	330e      	adds	r3, #14
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	3318      	adds	r3, #24
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d102      	bne.n	800ed78 <etharp_input+0x74>
    for_us = 0;
 800ed72:	2300      	movs	r3, #0
 800ed74:	75fb      	strb	r3, [r7, #23]
 800ed76:	e009      	b.n	800ed8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ed78:	68ba      	ldr	r2, [r7, #8]
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	3304      	adds	r3, #4
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	bf0c      	ite	eq
 800ed84:	2301      	moveq	r3, #1
 800ed86:	2300      	movne	r3, #0
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	f103 0208 	add.w	r2, r3, #8
 800ed92:	7dfb      	ldrb	r3, [r7, #23]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d001      	beq.n	800ed9c <etharp_input+0x98>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e000      	b.n	800ed9e <etharp_input+0x9a>
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	f107 010c 	add.w	r1, r7, #12
 800eda2:	6838      	ldr	r0, [r7, #0]
 800eda4:	f7ff fed6 	bl	800eb54 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	88db      	ldrh	r3, [r3, #6]
 800edac:	b29b      	uxth	r3, r3
 800edae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edb2:	d003      	beq.n	800edbc <etharp_input+0xb8>
 800edb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edb8:	d01e      	beq.n	800edf8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800edba:	e020      	b.n	800edfe <etharp_input+0xfa>
    if (for_us) {
 800edbc:	7dfb      	ldrb	r3, [r7, #23]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d01c      	beq.n	800edfc <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800edd8:	693a      	ldr	r2, [r7, #16]
 800edda:	3208      	adds	r2, #8
      etharp_raw(netif,
 800eddc:	2102      	movs	r1, #2
 800edde:	9103      	str	r1, [sp, #12]
 800ede0:	f107 010c 	add.w	r1, r7, #12
 800ede4:	9102      	str	r1, [sp, #8]
 800ede6:	9201      	str	r2, [sp, #4]
 800ede8:	9300      	str	r3, [sp, #0]
 800edea:	462b      	mov	r3, r5
 800edec:	4622      	mov	r2, r4
 800edee:	4601      	mov	r1, r0
 800edf0:	6838      	ldr	r0, [r7, #0]
 800edf2:	f000 fae1 	bl	800f3b8 <etharp_raw>
    break;
 800edf6:	e001      	b.n	800edfc <etharp_input+0xf8>
    break;
 800edf8:	bf00      	nop
 800edfa:	e000      	b.n	800edfe <etharp_input+0xfa>
    break;
 800edfc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f7f9 fd78 	bl	80088f4 <pbuf_free>
}
 800ee04:	3718      	adds	r7, #24
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bdb0      	pop	{r4, r5, r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	08013a34 	.word	0x08013a34
 800ee10:	08013b84 	.word	0x08013b84
 800ee14:	08013aac 	.word	0x08013aac

0800ee18 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b086      	sub	sp, #24
 800ee1c:	af02      	add	r7, sp, #8
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	4613      	mov	r3, r2
 800ee24:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ee26:	79fa      	ldrb	r2, [r7, #7]
 800ee28:	4944      	ldr	r1, [pc, #272]	; (800ef3c <etharp_output_to_arp_index+0x124>)
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	005b      	lsls	r3, r3, #1
 800ee2e:	4413      	add	r3, r2
 800ee30:	00db      	lsls	r3, r3, #3
 800ee32:	440b      	add	r3, r1
 800ee34:	3314      	adds	r3, #20
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d806      	bhi.n	800ee4a <etharp_output_to_arp_index+0x32>
 800ee3c:	4b40      	ldr	r3, [pc, #256]	; (800ef40 <etharp_output_to_arp_index+0x128>)
 800ee3e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800ee42:	4940      	ldr	r1, [pc, #256]	; (800ef44 <etharp_output_to_arp_index+0x12c>)
 800ee44:	4840      	ldr	r0, [pc, #256]	; (800ef48 <etharp_output_to_arp_index+0x130>)
 800ee46:	f001 ffab 	bl	8010da0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ee4a:	79fa      	ldrb	r2, [r7, #7]
 800ee4c:	493b      	ldr	r1, [pc, #236]	; (800ef3c <etharp_output_to_arp_index+0x124>)
 800ee4e:	4613      	mov	r3, r2
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	4413      	add	r3, r2
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	440b      	add	r3, r1
 800ee58:	3314      	adds	r3, #20
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d153      	bne.n	800ef08 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ee60:	79fa      	ldrb	r2, [r7, #7]
 800ee62:	4936      	ldr	r1, [pc, #216]	; (800ef3c <etharp_output_to_arp_index+0x124>)
 800ee64:	4613      	mov	r3, r2
 800ee66:	005b      	lsls	r3, r3, #1
 800ee68:	4413      	add	r3, r2
 800ee6a:	00db      	lsls	r3, r3, #3
 800ee6c:	440b      	add	r3, r1
 800ee6e:	3312      	adds	r3, #18
 800ee70:	881b      	ldrh	r3, [r3, #0]
 800ee72:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ee76:	d919      	bls.n	800eeac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ee78:	79fa      	ldrb	r2, [r7, #7]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	005b      	lsls	r3, r3, #1
 800ee7e:	4413      	add	r3, r2
 800ee80:	00db      	lsls	r3, r3, #3
 800ee82:	4a2e      	ldr	r2, [pc, #184]	; (800ef3c <etharp_output_to_arp_index+0x124>)
 800ee84:	4413      	add	r3, r2
 800ee86:	3304      	adds	r3, #4
 800ee88:	4619      	mov	r1, r3
 800ee8a:	68f8      	ldr	r0, [r7, #12]
 800ee8c:	f000 fb42 	bl	800f514 <etharp_request>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d138      	bne.n	800ef08 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ee96:	79fa      	ldrb	r2, [r7, #7]
 800ee98:	4928      	ldr	r1, [pc, #160]	; (800ef3c <etharp_output_to_arp_index+0x124>)
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	005b      	lsls	r3, r3, #1
 800ee9e:	4413      	add	r3, r2
 800eea0:	00db      	lsls	r3, r3, #3
 800eea2:	440b      	add	r3, r1
 800eea4:	3314      	adds	r3, #20
 800eea6:	2203      	movs	r2, #3
 800eea8:	701a      	strb	r2, [r3, #0]
 800eeaa:	e02d      	b.n	800ef08 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800eeac:	79fa      	ldrb	r2, [r7, #7]
 800eeae:	4923      	ldr	r1, [pc, #140]	; (800ef3c <etharp_output_to_arp_index+0x124>)
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	005b      	lsls	r3, r3, #1
 800eeb4:	4413      	add	r3, r2
 800eeb6:	00db      	lsls	r3, r3, #3
 800eeb8:	440b      	add	r3, r1
 800eeba:	3312      	adds	r3, #18
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800eec2:	d321      	bcc.n	800ef08 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800eec4:	79fa      	ldrb	r2, [r7, #7]
 800eec6:	4613      	mov	r3, r2
 800eec8:	005b      	lsls	r3, r3, #1
 800eeca:	4413      	add	r3, r2
 800eecc:	00db      	lsls	r3, r3, #3
 800eece:	4a1b      	ldr	r2, [pc, #108]	; (800ef3c <etharp_output_to_arp_index+0x124>)
 800eed0:	4413      	add	r3, r2
 800eed2:	1d19      	adds	r1, r3, #4
 800eed4:	79fa      	ldrb	r2, [r7, #7]
 800eed6:	4613      	mov	r3, r2
 800eed8:	005b      	lsls	r3, r3, #1
 800eeda:	4413      	add	r3, r2
 800eedc:	00db      	lsls	r3, r3, #3
 800eede:	3308      	adds	r3, #8
 800eee0:	4a16      	ldr	r2, [pc, #88]	; (800ef3c <etharp_output_to_arp_index+0x124>)
 800eee2:	4413      	add	r3, r2
 800eee4:	3304      	adds	r3, #4
 800eee6:	461a      	mov	r2, r3
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f000 faf1 	bl	800f4d0 <etharp_request_dst>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d109      	bne.n	800ef08 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eef4:	79fa      	ldrb	r2, [r7, #7]
 800eef6:	4911      	ldr	r1, [pc, #68]	; (800ef3c <etharp_output_to_arp_index+0x124>)
 800eef8:	4613      	mov	r3, r2
 800eefa:	005b      	lsls	r3, r3, #1
 800eefc:	4413      	add	r3, r2
 800eefe:	00db      	lsls	r3, r3, #3
 800ef00:	440b      	add	r3, r1
 800ef02:	3314      	adds	r3, #20
 800ef04:	2203      	movs	r2, #3
 800ef06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800ef0e:	79fa      	ldrb	r2, [r7, #7]
 800ef10:	4613      	mov	r3, r2
 800ef12:	005b      	lsls	r3, r3, #1
 800ef14:	4413      	add	r3, r2
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	3308      	adds	r3, #8
 800ef1a:	4a08      	ldr	r2, [pc, #32]	; (800ef3c <etharp_output_to_arp_index+0x124>)
 800ef1c:	4413      	add	r3, r2
 800ef1e:	3304      	adds	r3, #4
 800ef20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef24:	9200      	str	r2, [sp, #0]
 800ef26:	460a      	mov	r2, r1
 800ef28:	68b9      	ldr	r1, [r7, #8]
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f001 fdb6 	bl	8010a9c <ethernet_output>
 800ef30:	4603      	mov	r3, r0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	2000704c 	.word	0x2000704c
 800ef40:	08013a34 	.word	0x08013a34
 800ef44:	08013ba4 	.word	0x08013ba4
 800ef48:	08013aac 	.word	0x08013aac

0800ef4c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b08a      	sub	sp, #40	; 0x28
 800ef50:	af02      	add	r7, sp, #8
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d106      	bne.n	800ef70 <etharp_output+0x24>
 800ef62:	4b69      	ldr	r3, [pc, #420]	; (800f108 <etharp_output+0x1bc>)
 800ef64:	f240 321b 	movw	r2, #795	; 0x31b
 800ef68:	4968      	ldr	r1, [pc, #416]	; (800f10c <etharp_output+0x1c0>)
 800ef6a:	4869      	ldr	r0, [pc, #420]	; (800f110 <etharp_output+0x1c4>)
 800ef6c:	f001 ff18 	bl	8010da0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d106      	bne.n	800ef84 <etharp_output+0x38>
 800ef76:	4b64      	ldr	r3, [pc, #400]	; (800f108 <etharp_output+0x1bc>)
 800ef78:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ef7c:	4965      	ldr	r1, [pc, #404]	; (800f114 <etharp_output+0x1c8>)
 800ef7e:	4864      	ldr	r0, [pc, #400]	; (800f110 <etharp_output+0x1c4>)
 800ef80:	f001 ff0e 	bl	8010da0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d106      	bne.n	800ef98 <etharp_output+0x4c>
 800ef8a:	4b5f      	ldr	r3, [pc, #380]	; (800f108 <etharp_output+0x1bc>)
 800ef8c:	f240 321d 	movw	r2, #797	; 0x31d
 800ef90:	4961      	ldr	r1, [pc, #388]	; (800f118 <etharp_output+0x1cc>)
 800ef92:	485f      	ldr	r0, [pc, #380]	; (800f110 <etharp_output+0x1c4>)
 800ef94:	f001 ff04 	bl	8010da0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	68f9      	ldr	r1, [r7, #12]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 fed4 	bl	800fd4c <ip4_addr_isbroadcast_u32>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d002      	beq.n	800efb0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800efaa:	4b5c      	ldr	r3, [pc, #368]	; (800f11c <etharp_output+0x1d0>)
 800efac:	61fb      	str	r3, [r7, #28]
 800efae:	e09b      	b.n	800f0e8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efb8:	2be0      	cmp	r3, #224	; 0xe0
 800efba:	d118      	bne.n	800efee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800efbc:	2301      	movs	r3, #1
 800efbe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800efc0:	2300      	movs	r3, #0
 800efc2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800efc4:	235e      	movs	r3, #94	; 0x5e
 800efc6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	3301      	adds	r3, #1
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	3302      	adds	r3, #2
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	3303      	adds	r3, #3
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800efe6:	f107 0310 	add.w	r3, r7, #16
 800efea:	61fb      	str	r3, [r7, #28]
 800efec:	e07c      	b.n	800f0e8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	3304      	adds	r3, #4
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	405a      	eors	r2, r3
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	3308      	adds	r3, #8
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4013      	ands	r3, r2
 800f002:	2b00      	cmp	r3, #0
 800f004:	d012      	beq.n	800f02c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f00c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f010:	4293      	cmp	r3, r2
 800f012:	d00b      	beq.n	800f02c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	330c      	adds	r3, #12
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d003      	beq.n	800f026 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	330c      	adds	r3, #12
 800f022:	61bb      	str	r3, [r7, #24]
 800f024:	e002      	b.n	800f02c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f026:	f06f 0303 	mvn.w	r3, #3
 800f02a:	e069      	b.n	800f100 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f02c:	4b3c      	ldr	r3, [pc, #240]	; (800f120 <etharp_output+0x1d4>)
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	4619      	mov	r1, r3
 800f032:	4a3c      	ldr	r2, [pc, #240]	; (800f124 <etharp_output+0x1d8>)
 800f034:	460b      	mov	r3, r1
 800f036:	005b      	lsls	r3, r3, #1
 800f038:	440b      	add	r3, r1
 800f03a:	00db      	lsls	r3, r3, #3
 800f03c:	4413      	add	r3, r2
 800f03e:	3314      	adds	r3, #20
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	2b01      	cmp	r3, #1
 800f044:	d917      	bls.n	800f076 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	681a      	ldr	r2, [r3, #0]
 800f04a:	4b35      	ldr	r3, [pc, #212]	; (800f120 <etharp_output+0x1d4>)
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	4618      	mov	r0, r3
 800f050:	4934      	ldr	r1, [pc, #208]	; (800f124 <etharp_output+0x1d8>)
 800f052:	4603      	mov	r3, r0
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	4403      	add	r3, r0
 800f058:	00db      	lsls	r3, r3, #3
 800f05a:	440b      	add	r3, r1
 800f05c:	3304      	adds	r3, #4
 800f05e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f060:	429a      	cmp	r2, r3
 800f062:	d108      	bne.n	800f076 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f064:	4b2e      	ldr	r3, [pc, #184]	; (800f120 <etharp_output+0x1d4>)
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	461a      	mov	r2, r3
 800f06a:	68b9      	ldr	r1, [r7, #8]
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	f7ff fed3 	bl	800ee18 <etharp_output_to_arp_index>
 800f072:	4603      	mov	r3, r0
 800f074:	e044      	b.n	800f100 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f076:	2300      	movs	r3, #0
 800f078:	75fb      	strb	r3, [r7, #23]
 800f07a:	e02a      	b.n	800f0d2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f07c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800f080:	4928      	ldr	r1, [pc, #160]	; (800f124 <etharp_output+0x1d8>)
 800f082:	4613      	mov	r3, r2
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	4413      	add	r3, r2
 800f088:	00db      	lsls	r3, r3, #3
 800f08a:	440b      	add	r3, r1
 800f08c:	3314      	adds	r3, #20
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d918      	bls.n	800f0c6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	6819      	ldr	r1, [r3, #0]
 800f098:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800f09c:	4821      	ldr	r0, [pc, #132]	; (800f124 <etharp_output+0x1d8>)
 800f09e:	4613      	mov	r3, r2
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	4413      	add	r3, r2
 800f0a4:	00db      	lsls	r3, r3, #3
 800f0a6:	4403      	add	r3, r0
 800f0a8:	3304      	adds	r3, #4
 800f0aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f0ac:	4299      	cmp	r1, r3
 800f0ae:	d10a      	bne.n	800f0c6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800f0b0:	7dfa      	ldrb	r2, [r7, #23]
 800f0b2:	4b1b      	ldr	r3, [pc, #108]	; (800f120 <etharp_output+0x1d4>)
 800f0b4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f0b6:	7dfb      	ldrb	r3, [r7, #23]
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	68b9      	ldr	r1, [r7, #8]
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f7ff feab 	bl	800ee18 <etharp_output_to_arp_index>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	e01c      	b.n	800f100 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f0c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	75fb      	strb	r3, [r7, #23]
 800f0d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f0d6:	2b09      	cmp	r3, #9
 800f0d8:	ddd0      	ble.n	800f07c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f0da:	68ba      	ldr	r2, [r7, #8]
 800f0dc:	69b9      	ldr	r1, [r7, #24]
 800f0de:	68f8      	ldr	r0, [r7, #12]
 800f0e0:	f000 f822 	bl	800f128 <etharp_query>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	e00b      	b.n	800f100 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800f0ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0f2:	9300      	str	r3, [sp, #0]
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	68b9      	ldr	r1, [r7, #8]
 800f0f8:	68f8      	ldr	r0, [r7, #12]
 800f0fa:	f001 fccf 	bl	8010a9c <ethernet_output>
 800f0fe:	4603      	mov	r3, r0
}
 800f100:	4618      	mov	r0, r3
 800f102:	3720      	adds	r7, #32
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}
 800f108:	08013a34 	.word	0x08013a34
 800f10c:	08013b84 	.word	0x08013b84
 800f110:	08013aac 	.word	0x08013aac
 800f114:	08013bd4 	.word	0x08013bd4
 800f118:	08013b74 	.word	0x08013b74
 800f11c:	0801419c 	.word	0x0801419c
 800f120:	2000713c 	.word	0x2000713c
 800f124:	2000704c 	.word	0x2000704c

0800f128 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b08c      	sub	sp, #48	; 0x30
 800f12c:	af02      	add	r7, sp, #8
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	3325      	adds	r3, #37	; 0x25
 800f138:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f13a:	23ff      	movs	r3, #255	; 0xff
 800f13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f140:	2300      	movs	r3, #0
 800f142:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	68f9      	ldr	r1, [r7, #12]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f000 fdfe 	bl	800fd4c <ip4_addr_isbroadcast_u32>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d10c      	bne.n	800f170 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f15e:	2be0      	cmp	r3, #224	; 0xe0
 800f160:	d006      	beq.n	800f170 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d003      	beq.n	800f170 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d102      	bne.n	800f176 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f170:	f06f 030f 	mvn.w	r3, #15
 800f174:	e10e      	b.n	800f394 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	2101      	movs	r1, #1
 800f17a:	68b8      	ldr	r0, [r7, #8]
 800f17c:	f7ff fba0 	bl	800e8c0 <etharp_find_entry>
 800f180:	4603      	mov	r3, r0
 800f182:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800f184:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	da02      	bge.n	800f192 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800f18c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f190:	e100      	b.n	800f394 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f192:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f196:	4981      	ldr	r1, [pc, #516]	; (800f39c <etharp_query+0x274>)
 800f198:	4613      	mov	r3, r2
 800f19a:	005b      	lsls	r3, r3, #1
 800f19c:	4413      	add	r3, r2
 800f19e:	00db      	lsls	r3, r3, #3
 800f1a0:	440b      	add	r3, r1
 800f1a2:	3314      	adds	r3, #20
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d117      	bne.n	800f1da <etharp_query+0xb2>
    is_new_entry = 1;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f1ae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f1b2:	497a      	ldr	r1, [pc, #488]	; (800f39c <etharp_query+0x274>)
 800f1b4:	4613      	mov	r3, r2
 800f1b6:	005b      	lsls	r3, r3, #1
 800f1b8:	4413      	add	r3, r2
 800f1ba:	00db      	lsls	r3, r3, #3
 800f1bc:	440b      	add	r3, r1
 800f1be:	3314      	adds	r3, #20
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f1c4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f1c8:	4974      	ldr	r1, [pc, #464]	; (800f39c <etharp_query+0x274>)
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	005b      	lsls	r3, r3, #1
 800f1ce:	4413      	add	r3, r2
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	440b      	add	r3, r1
 800f1d4:	3308      	adds	r3, #8
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f1da:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f1de:	496f      	ldr	r1, [pc, #444]	; (800f39c <etharp_query+0x274>)
 800f1e0:	4613      	mov	r3, r2
 800f1e2:	005b      	lsls	r3, r3, #1
 800f1e4:	4413      	add	r3, r2
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	440b      	add	r3, r1
 800f1ea:	3314      	adds	r3, #20
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d012      	beq.n	800f218 <etharp_query+0xf0>
 800f1f2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f1f6:	4969      	ldr	r1, [pc, #420]	; (800f39c <etharp_query+0x274>)
 800f1f8:	4613      	mov	r3, r2
 800f1fa:	005b      	lsls	r3, r3, #1
 800f1fc:	4413      	add	r3, r2
 800f1fe:	00db      	lsls	r3, r3, #3
 800f200:	440b      	add	r3, r1
 800f202:	3314      	adds	r3, #20
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	2b01      	cmp	r3, #1
 800f208:	d806      	bhi.n	800f218 <etharp_query+0xf0>
 800f20a:	4b65      	ldr	r3, [pc, #404]	; (800f3a0 <etharp_query+0x278>)
 800f20c:	f240 32c7 	movw	r2, #967	; 0x3c7
 800f210:	4964      	ldr	r1, [pc, #400]	; (800f3a4 <etharp_query+0x27c>)
 800f212:	4865      	ldr	r0, [pc, #404]	; (800f3a8 <etharp_query+0x280>)
 800f214:	f001 fdc4 	bl	8010da0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f218:	6a3b      	ldr	r3, [r7, #32]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d102      	bne.n	800f224 <etharp_query+0xfc>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10c      	bne.n	800f23e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f224:	68b9      	ldr	r1, [r7, #8]
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f000 f974 	bl	800f514 <etharp_request>
 800f22c:	4603      	mov	r3, r0
 800f22e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d102      	bne.n	800f23e <etharp_query+0x116>
      return result;
 800f238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f23c:	e0aa      	b.n	800f394 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d106      	bne.n	800f252 <etharp_query+0x12a>
 800f244:	4b56      	ldr	r3, [pc, #344]	; (800f3a0 <etharp_query+0x278>)
 800f246:	f240 32db 	movw	r2, #987	; 0x3db
 800f24a:	4958      	ldr	r1, [pc, #352]	; (800f3ac <etharp_query+0x284>)
 800f24c:	4856      	ldr	r0, [pc, #344]	; (800f3a8 <etharp_query+0x280>)
 800f24e:	f001 fda7 	bl	8010da0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f252:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f256:	4951      	ldr	r1, [pc, #324]	; (800f39c <etharp_query+0x274>)
 800f258:	4613      	mov	r3, r2
 800f25a:	005b      	lsls	r3, r3, #1
 800f25c:	4413      	add	r3, r2
 800f25e:	00db      	lsls	r3, r3, #3
 800f260:	440b      	add	r3, r1
 800f262:	3314      	adds	r3, #20
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	2b01      	cmp	r3, #1
 800f268:	d918      	bls.n	800f29c <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800f26a:	7cfa      	ldrb	r2, [r7, #19]
 800f26c:	4b50      	ldr	r3, [pc, #320]	; (800f3b0 <etharp_query+0x288>)
 800f26e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f270:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f274:	4613      	mov	r3, r2
 800f276:	005b      	lsls	r3, r3, #1
 800f278:	4413      	add	r3, r2
 800f27a:	00db      	lsls	r3, r3, #3
 800f27c:	3308      	adds	r3, #8
 800f27e:	4a47      	ldr	r2, [pc, #284]	; (800f39c <etharp_query+0x274>)
 800f280:	4413      	add	r3, r2
 800f282:	3304      	adds	r3, #4
 800f284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f288:	9200      	str	r2, [sp, #0]
 800f28a:	697a      	ldr	r2, [r7, #20]
 800f28c:	6879      	ldr	r1, [r7, #4]
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f001 fc04 	bl	8010a9c <ethernet_output>
 800f294:	4603      	mov	r3, r0
 800f296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f29a:	e079      	b.n	800f390 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f29c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f2a0:	493e      	ldr	r1, [pc, #248]	; (800f39c <etharp_query+0x274>)
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	005b      	lsls	r3, r3, #1
 800f2a6:	4413      	add	r3, r2
 800f2a8:	00db      	lsls	r3, r3, #3
 800f2aa:	440b      	add	r3, r1
 800f2ac:	3314      	adds	r3, #20
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d16d      	bne.n	800f390 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f2bc:	e01a      	b.n	800f2f4 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	895a      	ldrh	r2, [r3, #10]
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	891b      	ldrh	r3, [r3, #8]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d10a      	bne.n	800f2e0 <etharp_query+0x1b8>
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d006      	beq.n	800f2e0 <etharp_query+0x1b8>
 800f2d2:	4b33      	ldr	r3, [pc, #204]	; (800f3a0 <etharp_query+0x278>)
 800f2d4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800f2d8:	4936      	ldr	r1, [pc, #216]	; (800f3b4 <etharp_query+0x28c>)
 800f2da:	4833      	ldr	r0, [pc, #204]	; (800f3a8 <etharp_query+0x280>)
 800f2dc:	f001 fd60 	bl	8010da0 <iprintf>
      if (p->type != PBUF_ROM) {
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	7b1b      	ldrb	r3, [r3, #12]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d002      	beq.n	800f2ee <etharp_query+0x1c6>
        copy_needed = 1;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	61bb      	str	r3, [r7, #24]
        break;
 800f2ec:	e005      	b.n	800f2fa <etharp_query+0x1d2>
      }
      p = p->next;
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d1e1      	bne.n	800f2be <etharp_query+0x196>
    }
    if (copy_needed) {
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d017      	beq.n	800f330 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	891b      	ldrh	r3, [r3, #8]
 800f304:	2200      	movs	r2, #0
 800f306:	4619      	mov	r1, r3
 800f308:	2002      	movs	r0, #2
 800f30a:	f7f8 ff7b 	bl	8008204 <pbuf_alloc>
 800f30e:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d011      	beq.n	800f33a <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800f316:	6879      	ldr	r1, [r7, #4]
 800f318:	69f8      	ldr	r0, [r7, #28]
 800f31a:	f7f9 fc1f 	bl	8008b5c <pbuf_copy>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00a      	beq.n	800f33a <etharp_query+0x212>
          pbuf_free(p);
 800f324:	69f8      	ldr	r0, [r7, #28]
 800f326:	f7f9 fae5 	bl	80088f4 <pbuf_free>
          p = NULL;
 800f32a:	2300      	movs	r3, #0
 800f32c:	61fb      	str	r3, [r7, #28]
 800f32e:	e004      	b.n	800f33a <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f334:	69f8      	ldr	r0, [r7, #28]
 800f336:	f7f9 fb89 	bl	8008a4c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d024      	beq.n	800f38a <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f340:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f344:	4915      	ldr	r1, [pc, #84]	; (800f39c <etharp_query+0x274>)
 800f346:	4613      	mov	r3, r2
 800f348:	005b      	lsls	r3, r3, #1
 800f34a:	4413      	add	r3, r2
 800f34c:	00db      	lsls	r3, r3, #3
 800f34e:	440b      	add	r3, r1
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00b      	beq.n	800f36e <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800f356:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f35a:	4910      	ldr	r1, [pc, #64]	; (800f39c <etharp_query+0x274>)
 800f35c:	4613      	mov	r3, r2
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	4413      	add	r3, r2
 800f362:	00db      	lsls	r3, r3, #3
 800f364:	440b      	add	r3, r1
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4618      	mov	r0, r3
 800f36a:	f7f9 fac3 	bl	80088f4 <pbuf_free>
      }
      arp_table[i].q = p;
 800f36e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f372:	490a      	ldr	r1, [pc, #40]	; (800f39c <etharp_query+0x274>)
 800f374:	4613      	mov	r3, r2
 800f376:	005b      	lsls	r3, r3, #1
 800f378:	4413      	add	r3, r2
 800f37a:	00db      	lsls	r3, r3, #3
 800f37c:	440b      	add	r3, r1
 800f37e:	69fa      	ldr	r2, [r7, #28]
 800f380:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f382:	2300      	movs	r3, #0
 800f384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f388:	e002      	b.n	800f390 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f38a:	23ff      	movs	r3, #255	; 0xff
 800f38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f390:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f394:	4618      	mov	r0, r3
 800f396:	3728      	adds	r7, #40	; 0x28
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	2000704c 	.word	0x2000704c
 800f3a0:	08013a34 	.word	0x08013a34
 800f3a4:	08013be0 	.word	0x08013be0
 800f3a8:	08013aac 	.word	0x08013aac
 800f3ac:	08013bd4 	.word	0x08013bd4
 800f3b0:	2000713c 	.word	0x2000713c
 800f3b4:	08013c08 	.word	0x08013c08

0800f3b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b08a      	sub	sp, #40	; 0x28
 800f3bc:	af02      	add	r7, sp, #8
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
 800f3c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d106      	bne.n	800f3de <etharp_raw+0x26>
 800f3d0:	4b3a      	ldr	r3, [pc, #232]	; (800f4bc <etharp_raw+0x104>)
 800f3d2:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800f3d6:	493a      	ldr	r1, [pc, #232]	; (800f4c0 <etharp_raw+0x108>)
 800f3d8:	483a      	ldr	r0, [pc, #232]	; (800f4c4 <etharp_raw+0x10c>)
 800f3da:	f001 fce1 	bl	8010da0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f3de:	2200      	movs	r2, #0
 800f3e0:	211c      	movs	r1, #28
 800f3e2:	2002      	movs	r0, #2
 800f3e4:	f7f8 ff0e 	bl	8008204 <pbuf_alloc>
 800f3e8:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d102      	bne.n	800f3f6 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f4:	e05d      	b.n	800f4b2 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f3f6:	69bb      	ldr	r3, [r7, #24]
 800f3f8:	895b      	ldrh	r3, [r3, #10]
 800f3fa:	2b1b      	cmp	r3, #27
 800f3fc:	d806      	bhi.n	800f40c <etharp_raw+0x54>
 800f3fe:	4b2f      	ldr	r3, [pc, #188]	; (800f4bc <etharp_raw+0x104>)
 800f400:	f240 4263 	movw	r2, #1123	; 0x463
 800f404:	4930      	ldr	r1, [pc, #192]	; (800f4c8 <etharp_raw+0x110>)
 800f406:	482f      	ldr	r0, [pc, #188]	; (800f4c4 <etharp_raw+0x10c>)
 800f408:	f001 fcca 	bl	8010da0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f412:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f414:	4618      	mov	r0, r3
 800f416:	f7f8 f944 	bl	80076a2 <lwip_htons>
 800f41a:	4603      	mov	r3, r0
 800f41c:	461a      	mov	r2, r3
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f428:	2b06      	cmp	r3, #6
 800f42a:	d006      	beq.n	800f43a <etharp_raw+0x82>
 800f42c:	4b23      	ldr	r3, [pc, #140]	; (800f4bc <etharp_raw+0x104>)
 800f42e:	f240 426a 	movw	r2, #1130	; 0x46a
 800f432:	4926      	ldr	r1, [pc, #152]	; (800f4cc <etharp_raw+0x114>)
 800f434:	4823      	ldr	r0, [pc, #140]	; (800f4c4 <etharp_raw+0x10c>)
 800f436:	f001 fcb3 	bl	8010da0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	3308      	adds	r3, #8
 800f43e:	2206      	movs	r2, #6
 800f440:	6839      	ldr	r1, [r7, #0]
 800f442:	4618      	mov	r0, r3
 800f444:	f001 fbb6 	bl	8010bb4 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	3312      	adds	r3, #18
 800f44c:	2206      	movs	r2, #6
 800f44e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f450:	4618      	mov	r0, r3
 800f452:	f001 fbaf 	bl	8010bb4 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	330e      	adds	r3, #14
 800f45a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f45c:	6812      	ldr	r2, [r2, #0]
 800f45e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	3318      	adds	r3, #24
 800f464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f466:	6812      	ldr	r2, [r2, #0]
 800f468:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	2200      	movs	r2, #0
 800f46e:	701a      	strb	r2, [r3, #0]
 800f470:	2200      	movs	r2, #0
 800f472:	f042 0201 	orr.w	r2, r2, #1
 800f476:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	2200      	movs	r2, #0
 800f47c:	f042 0208 	orr.w	r2, r2, #8
 800f480:	709a      	strb	r2, [r3, #2]
 800f482:	2200      	movs	r2, #0
 800f484:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	2206      	movs	r2, #6
 800f48a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2204      	movs	r2, #4
 800f490:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f492:	f640 0306 	movw	r3, #2054	; 0x806
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	68ba      	ldr	r2, [r7, #8]
 800f49c:	69b9      	ldr	r1, [r7, #24]
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f001 fafc 	bl	8010a9c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f4a4:	69b8      	ldr	r0, [r7, #24]
 800f4a6:	f7f9 fa25 	bl	80088f4 <pbuf_free>
  p = NULL;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f4ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3720      	adds	r7, #32
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
 800f4ba:	bf00      	nop
 800f4bc:	08013a34 	.word	0x08013a34
 800f4c0:	08013b84 	.word	0x08013b84
 800f4c4:	08013aac 	.word	0x08013aac
 800f4c8:	08013c24 	.word	0x08013c24
 800f4cc:	08013c58 	.word	0x08013c58

0800f4d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b088      	sub	sp, #32
 800f4d4:	af04      	add	r7, sp, #16
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	9203      	str	r2, [sp, #12]
 800f4f0:	68ba      	ldr	r2, [r7, #8]
 800f4f2:	9202      	str	r2, [sp, #8]
 800f4f4:	4a06      	ldr	r2, [pc, #24]	; (800f510 <etharp_request_dst+0x40>)
 800f4f6:	9201      	str	r2, [sp, #4]
 800f4f8:	9300      	str	r3, [sp, #0]
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	68f8      	ldr	r0, [r7, #12]
 800f500:	f7ff ff5a 	bl	800f3b8 <etharp_raw>
 800f504:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f506:	4618      	mov	r0, r3
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	080141a4 	.word	0x080141a4

0800f514 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f51e:	4a05      	ldr	r2, [pc, #20]	; (800f534 <etharp_request+0x20>)
 800f520:	6839      	ldr	r1, [r7, #0]
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7ff ffd4 	bl	800f4d0 <etharp_request_dst>
 800f528:	4603      	mov	r3, r0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3708      	adds	r7, #8
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	0801419c 	.word	0x0801419c

0800f538 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b08e      	sub	sp, #56	; 0x38
 800f53c:	af04      	add	r7, sp, #16
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f542:	4b7a      	ldr	r3, [pc, #488]	; (800f72c <icmp_input+0x1f4>)
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800f548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	f003 030f 	and.w	r3, r3, #15
 800f552:	b29b      	uxth	r3, r3
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f558:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f55a:	2b13      	cmp	r3, #19
 800f55c:	f240 80d1 	bls.w	800f702 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	895b      	ldrh	r3, [r3, #10]
 800f564:	2b03      	cmp	r3, #3
 800f566:	f240 80ce 	bls.w	800f706 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f574:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f578:	2b00      	cmp	r3, #0
 800f57a:	f000 80bb 	beq.w	800f6f4 <icmp_input+0x1bc>
 800f57e:	2b08      	cmp	r3, #8
 800f580:	f040 80bb 	bne.w	800f6fa <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800f584:	4b6a      	ldr	r3, [pc, #424]	; (800f730 <icmp_input+0x1f8>)
 800f586:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f588:	4b68      	ldr	r3, [pc, #416]	; (800f72c <icmp_input+0x1f4>)
 800f58a:	695b      	ldr	r3, [r3, #20]
 800f58c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f590:	2be0      	cmp	r3, #224	; 0xe0
 800f592:	f000 80bf 	beq.w	800f714 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f596:	4b65      	ldr	r3, [pc, #404]	; (800f72c <icmp_input+0x1f4>)
 800f598:	695b      	ldr	r3, [r3, #20]
 800f59a:	4a64      	ldr	r2, [pc, #400]	; (800f72c <icmp_input+0x1f4>)
 800f59c:	6812      	ldr	r2, [r2, #0]
 800f59e:	4611      	mov	r1, r2
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f000 fbd3 	bl	800fd4c <ip4_addr_isbroadcast_u32>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f040 80b5 	bne.w	800f718 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	891b      	ldrh	r3, [r3, #8]
 800f5b2:	2b07      	cmp	r3, #7
 800f5b4:	f240 80a9 	bls.w	800f70a <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800f5b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5ba:	330e      	adds	r3, #14
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	b21b      	sxth	r3, r3
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7f9 f972 	bl	80088ac <pbuf_header>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d046      	beq.n	800f65c <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	891a      	ldrh	r2, [r3, #8]
 800f5d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5d4:	4413      	add	r3, r2
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	2200      	movs	r2, #0
 800f5da:	4619      	mov	r1, r3
 800f5dc:	2002      	movs	r0, #2
 800f5de:	f7f8 fe11 	bl	8008204 <pbuf_alloc>
 800f5e2:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f000 8098 	beq.w	800f71c <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	895b      	ldrh	r3, [r3, #10]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5f4:	3308      	adds	r3, #8
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d203      	bcs.n	800f602 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800f5fa:	69b8      	ldr	r0, [r7, #24]
 800f5fc:	f7f9 f97a 	bl	80088f4 <pbuf_free>
        goto icmperr;
 800f600:	e08d      	b.n	800f71e <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800f602:	69bb      	ldr	r3, [r7, #24]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f60a:	4618      	mov	r0, r3
 800f60c:	f001 fad2 	bl	8010bb4 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800f610:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f612:	425b      	negs	r3, r3
 800f614:	b29b      	uxth	r3, r3
 800f616:	b21b      	sxth	r3, r3
 800f618:	4619      	mov	r1, r3
 800f61a:	69b8      	ldr	r0, [r7, #24]
 800f61c:	f7f9 f946 	bl	80088ac <pbuf_header>
 800f620:	4603      	mov	r3, r0
 800f622:	2b00      	cmp	r3, #0
 800f624:	d009      	beq.n	800f63a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f626:	4b43      	ldr	r3, [pc, #268]	; (800f734 <icmp_input+0x1fc>)
 800f628:	22af      	movs	r2, #175	; 0xaf
 800f62a:	4943      	ldr	r1, [pc, #268]	; (800f738 <icmp_input+0x200>)
 800f62c:	4843      	ldr	r0, [pc, #268]	; (800f73c <icmp_input+0x204>)
 800f62e:	f001 fbb7 	bl	8010da0 <iprintf>
        pbuf_free(r);
 800f632:	69b8      	ldr	r0, [r7, #24]
 800f634:	f7f9 f95e 	bl	80088f4 <pbuf_free>
        goto icmperr;
 800f638:	e071      	b.n	800f71e <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800f63a:	6879      	ldr	r1, [r7, #4]
 800f63c:	69b8      	ldr	r0, [r7, #24]
 800f63e:	f7f9 fa8d 	bl	8008b5c <pbuf_copy>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d003      	beq.n	800f650 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800f648:	69b8      	ldr	r0, [r7, #24]
 800f64a:	f7f9 f953 	bl	80088f4 <pbuf_free>
        goto icmperr;
 800f64e:	e066      	b.n	800f71e <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f7f9 f94f 	bl	80088f4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	607b      	str	r3, [r7, #4]
 800f65a:	e015      	b.n	800f688 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800f65c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f65e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800f662:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f666:	33f2      	adds	r3, #242	; 0xf2
 800f668:	b29b      	uxth	r3, r3
 800f66a:	b21b      	sxth	r3, r3
 800f66c:	4619      	mov	r1, r3
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f7f9 f91c 	bl	80088ac <pbuf_header>
 800f674:	4603      	mov	r3, r0
 800f676:	2b00      	cmp	r3, #0
 800f678:	d006      	beq.n	800f688 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f67a:	4b2e      	ldr	r3, [pc, #184]	; (800f734 <icmp_input+0x1fc>)
 800f67c:	22c0      	movs	r2, #192	; 0xc0
 800f67e:	4930      	ldr	r1, [pc, #192]	; (800f740 <icmp_input+0x208>)
 800f680:	482e      	ldr	r0, [pc, #184]	; (800f73c <icmp_input+0x204>)
 800f682:	f001 fb8d 	bl	8010da0 <iprintf>
        goto icmperr;
 800f686:	e04a      	b.n	800f71e <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800f68e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f692:	4619      	mov	r1, r3
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7f9 f909 	bl	80088ac <pbuf_header>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d12b      	bne.n	800f6f8 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f6ae:	4b1f      	ldr	r3, [pc, #124]	; (800f72c <icmp_input+0x1f4>)
 800f6b0:	691a      	ldr	r2, [r3, #16]
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	709a      	strb	r2, [r3, #2]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	22ff      	movs	r2, #255	; 0xff
 800f6ca:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	729a      	strb	r2, [r3, #10]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	9302      	str	r3, [sp, #8]
 800f6da:	2301      	movs	r3, #1
 800f6dc:	9301      	str	r3, [sp, #4]
 800f6de:	2300      	movs	r3, #0
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	23ff      	movs	r3, #255	; 0xff
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	69f9      	ldr	r1, [r7, #28]
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 fa5d 	bl	800fba8 <ip4_output_if>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800f6f2:	e001      	b.n	800f6f8 <icmp_input+0x1c0>
    break;
 800f6f4:	bf00      	nop
 800f6f6:	e000      	b.n	800f6fa <icmp_input+0x1c2>
    break;
 800f6f8:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f7f9 f8fa 	bl	80088f4 <pbuf_free>
  return;
 800f700:	e011      	b.n	800f726 <icmp_input+0x1ee>
    goto lenerr;
 800f702:	bf00      	nop
 800f704:	e002      	b.n	800f70c <icmp_input+0x1d4>
    goto lenerr;
 800f706:	bf00      	nop
 800f708:	e000      	b.n	800f70c <icmp_input+0x1d4>
      goto lenerr;
 800f70a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f7f9 f8f1 	bl	80088f4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f712:	e008      	b.n	800f726 <icmp_input+0x1ee>
      goto icmperr;
 800f714:	bf00      	nop
 800f716:	e002      	b.n	800f71e <icmp_input+0x1e6>
      goto icmperr;
 800f718:	bf00      	nop
 800f71a:	e000      	b.n	800f71e <icmp_input+0x1e6>
        goto icmperr;
 800f71c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f7f9 f8e8 	bl	80088f4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f724:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f726:	3728      	adds	r7, #40	; 0x28
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	20003a90 	.word	0x20003a90
 800f730:	20003aa4 	.word	0x20003aa4
 800f734:	08013c9c 	.word	0x08013c9c
 800f738:	08013cd4 	.word	0x08013cd4
 800f73c:	08013d0c 	.word	0x08013d0c
 800f740:	08013d34 	.word	0x08013d34

0800f744 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	460b      	mov	r3, r1
 800f74e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f750:	78fb      	ldrb	r3, [r7, #3]
 800f752:	461a      	mov	r2, r3
 800f754:	2103      	movs	r1, #3
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 f814 	bl	800f784 <icmp_send_response>
}
 800f75c:	bf00      	nop
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	460b      	mov	r3, r1
 800f76e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f770:	78fb      	ldrb	r3, [r7, #3]
 800f772:	461a      	mov	r2, r3
 800f774:	210b      	movs	r1, #11
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 f804 	bl	800f784 <icmp_send_response>
}
 800f77c:	bf00      	nop
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b08c      	sub	sp, #48	; 0x30
 800f788:	af04      	add	r7, sp, #16
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	460b      	mov	r3, r1
 800f78e:	70fb      	strb	r3, [r7, #3]
 800f790:	4613      	mov	r3, r2
 800f792:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f794:	2200      	movs	r2, #0
 800f796:	2124      	movs	r1, #36	; 0x24
 800f798:	2001      	movs	r0, #1
 800f79a:	f7f8 fd33 	bl	8008204 <pbuf_alloc>
 800f79e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d04c      	beq.n	800f840 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	895b      	ldrh	r3, [r3, #10]
 800f7aa:	2b23      	cmp	r3, #35	; 0x23
 800f7ac:	d806      	bhi.n	800f7bc <icmp_send_response+0x38>
 800f7ae:	4b26      	ldr	r3, [pc, #152]	; (800f848 <icmp_send_response+0xc4>)
 800f7b0:	f240 1261 	movw	r2, #353	; 0x161
 800f7b4:	4925      	ldr	r1, [pc, #148]	; (800f84c <icmp_send_response+0xc8>)
 800f7b6:	4826      	ldr	r0, [pc, #152]	; (800f850 <icmp_send_response+0xcc>)
 800f7b8:	f001 faf2 	bl	8010da0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	78fa      	ldrb	r2, [r7, #3]
 800f7cc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	78ba      	ldrb	r2, [r7, #2]
 800f7d2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	711a      	strb	r2, [r3, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	719a      	strb	r2, [r3, #6]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	f103 0008 	add.w	r0, r3, #8
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	221c      	movs	r2, #28
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	f001 f9dc 	bl	8010bb4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	68db      	ldr	r3, [r3, #12]
 800f800:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f802:	f107 030c 	add.w	r3, r7, #12
 800f806:	4618      	mov	r0, r3
 800f808:	f000 f824 	bl	800f854 <ip4_route>
 800f80c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d011      	beq.n	800f838 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	2200      	movs	r2, #0
 800f818:	709a      	strb	r2, [r3, #2]
 800f81a:	2200      	movs	r2, #0
 800f81c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f81e:	f107 020c 	add.w	r2, r7, #12
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	9302      	str	r3, [sp, #8]
 800f826:	2301      	movs	r3, #1
 800f828:	9301      	str	r3, [sp, #4]
 800f82a:	2300      	movs	r3, #0
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	23ff      	movs	r3, #255	; 0xff
 800f830:	2100      	movs	r1, #0
 800f832:	69f8      	ldr	r0, [r7, #28]
 800f834:	f000 f9b8 	bl	800fba8 <ip4_output_if>
  }
  pbuf_free(q);
 800f838:	69f8      	ldr	r0, [r7, #28]
 800f83a:	f7f9 f85b 	bl	80088f4 <pbuf_free>
 800f83e:	e000      	b.n	800f842 <icmp_send_response+0xbe>
    return;
 800f840:	bf00      	nop
}
 800f842:	3720      	adds	r7, #32
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	08013c9c 	.word	0x08013c9c
 800f84c:	08013d68 	.word	0x08013d68
 800f850:	08013d0c 	.word	0x08013d0c

0800f854 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f854:	b480      	push	{r7}
 800f856:	b085      	sub	sp, #20
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800f85c:	4b30      	ldr	r3, [pc, #192]	; (800f920 <ip4_route+0xcc>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	60fb      	str	r3, [r7, #12]
 800f862:	e036      	b.n	800f8d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f86a:	f003 0301 	and.w	r3, r3, #1
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	2b00      	cmp	r3, #0
 800f872:	d02b      	beq.n	800f8cc <ip4_route+0x78>
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f87a:	089b      	lsrs	r3, r3, #2
 800f87c:	f003 0301 	and.w	r3, r3, #1
 800f880:	b2db      	uxtb	r3, r3
 800f882:	2b00      	cmp	r3, #0
 800f884:	d022      	beq.n	800f8cc <ip4_route+0x78>
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	3304      	adds	r3, #4
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d01d      	beq.n	800f8cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	3304      	adds	r3, #4
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	405a      	eors	r2, r3
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	3308      	adds	r3, #8
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4013      	ands	r3, r2
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d101      	bne.n	800f8ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	e033      	b.n	800f914 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f8b2:	f003 0302 	and.w	r3, r3, #2
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d108      	bne.n	800f8cc <ip4_route+0x78>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	330c      	adds	r3, #12
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d101      	bne.n	800f8cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	e023      	b.n	800f914 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	60fb      	str	r3, [r7, #12]
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d1c5      	bne.n	800f864 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f8d8:	4b12      	ldr	r3, [pc, #72]	; (800f924 <ip4_route+0xd0>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d015      	beq.n	800f90c <ip4_route+0xb8>
 800f8e0:	4b10      	ldr	r3, [pc, #64]	; (800f924 <ip4_route+0xd0>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f8e8:	f003 0301 	and.w	r3, r3, #1
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d00d      	beq.n	800f90c <ip4_route+0xb8>
 800f8f0:	4b0c      	ldr	r3, [pc, #48]	; (800f924 <ip4_route+0xd0>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f8f8:	f003 0304 	and.w	r3, r3, #4
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d005      	beq.n	800f90c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800f900:	4b08      	ldr	r3, [pc, #32]	; (800f924 <ip4_route+0xd0>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	3304      	adds	r3, #4
 800f906:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d101      	bne.n	800f910 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f90c:	2300      	movs	r3, #0
 800f90e:	e001      	b.n	800f914 <ip4_route+0xc0>
  }

  return netif_default;
 800f910:	4b04      	ldr	r3, [pc, #16]	; (800f924 <ip4_route+0xd0>)
 800f912:	681b      	ldr	r3, [r3, #0]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3714      	adds	r7, #20
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr
 800f920:	20006fe0 	.word	0x20006fe0
 800f924:	20006fe4 	.word	0x20006fe4

0800f928 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b086      	sub	sp, #24
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	091b      	lsrs	r3, r3, #4
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	2b04      	cmp	r3, #4
 800f942:	d004      	beq.n	800f94e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7f8 ffd5 	bl	80088f4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f94a:	2300      	movs	r3, #0
 800f94c:	e124      	b.n	800fb98 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	b29b      	uxth	r3, r3
 800f954:	f003 030f 	and.w	r3, r3, #15
 800f958:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800f95a:	897b      	ldrh	r3, [r7, #10]
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	885b      	ldrh	r3, [r3, #2]
 800f964:	b29b      	uxth	r3, r3
 800f966:	4618      	mov	r0, r3
 800f968:	f7f7 fe9b 	bl	80076a2 <lwip_htons>
 800f96c:	4603      	mov	r3, r0
 800f96e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	891b      	ldrh	r3, [r3, #8]
 800f974:	893a      	ldrh	r2, [r7, #8]
 800f976:	429a      	cmp	r2, r3
 800f978:	d204      	bcs.n	800f984 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800f97a:	893b      	ldrh	r3, [r7, #8]
 800f97c:	4619      	mov	r1, r3
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f7f8 fe44 	bl	800860c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	895b      	ldrh	r3, [r3, #10]
 800f988:	897a      	ldrh	r2, [r7, #10]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d807      	bhi.n	800f99e <ip4_input+0x76>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	891b      	ldrh	r3, [r3, #8]
 800f992:	893a      	ldrh	r2, [r7, #8]
 800f994:	429a      	cmp	r2, r3
 800f996:	d802      	bhi.n	800f99e <ip4_input+0x76>
 800f998:	897b      	ldrh	r3, [r7, #10]
 800f99a:	2b13      	cmp	r3, #19
 800f99c:	d804      	bhi.n	800f9a8 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f7f8 ffa8 	bl	80088f4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	e0f7      	b.n	800fb98 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	691b      	ldr	r3, [r3, #16]
 800f9ac:	4a7c      	ldr	r2, [pc, #496]	; (800fba0 <ip4_input+0x278>)
 800f9ae:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	4a7a      	ldr	r2, [pc, #488]	; (800fba0 <ip4_input+0x278>)
 800f9b6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f9b8:	4b79      	ldr	r3, [pc, #484]	; (800fba0 <ip4_input+0x278>)
 800f9ba:	695b      	ldr	r3, [r3, #20]
 800f9bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9c0:	2be0      	cmp	r3, #224	; 0xe0
 800f9c2:	d112      	bne.n	800f9ea <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f9ca:	f003 0301 	and.w	r3, r3, #1
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d007      	beq.n	800f9e4 <ip4_input+0xbc>
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	3304      	adds	r3, #4
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d002      	beq.n	800f9e4 <ip4_input+0xbc>
      netif = inp;
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	613b      	str	r3, [r7, #16]
 800f9e2:	e041      	b.n	800fa68 <ip4_input+0x140>
    } else {
      netif = NULL;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	613b      	str	r3, [r7, #16]
 800f9e8:	e03e      	b.n	800fa68 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f9f8:	f003 0301 	and.w	r3, r3, #1
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d014      	beq.n	800fa2c <ip4_input+0x104>
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	3304      	adds	r3, #4
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00f      	beq.n	800fa2c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fa0c:	4b64      	ldr	r3, [pc, #400]	; (800fba0 <ip4_input+0x278>)
 800fa0e:	695a      	ldr	r2, [r3, #20]
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	3304      	adds	r3, #4
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d026      	beq.n	800fa68 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fa1a:	4b61      	ldr	r3, [pc, #388]	; (800fba0 <ip4_input+0x278>)
 800fa1c:	695b      	ldr	r3, [r3, #20]
 800fa1e:	6939      	ldr	r1, [r7, #16]
 800fa20:	4618      	mov	r0, r3
 800fa22:	f000 f993 	bl	800fd4c <ip4_addr_isbroadcast_u32>
 800fa26:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d11d      	bne.n	800fa68 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d00d      	beq.n	800fa4e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800fa32:	4b5b      	ldr	r3, [pc, #364]	; (800fba0 <ip4_input+0x278>)
 800fa34:	695b      	ldr	r3, [r3, #20]
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	2b7f      	cmp	r3, #127	; 0x7f
 800fa3a:	d102      	bne.n	800fa42 <ip4_input+0x11a>
          netif = NULL;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	613b      	str	r3, [r7, #16]
          break;
 800fa40:	e012      	b.n	800fa68 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800fa42:	2300      	movs	r3, #0
 800fa44:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800fa46:	4b57      	ldr	r3, [pc, #348]	; (800fba4 <ip4_input+0x27c>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	613b      	str	r3, [r7, #16]
 800fa4c:	e002      	b.n	800fa54 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d102      	bne.n	800fa62 <ip4_input+0x13a>
        netif = netif->next;
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d1c4      	bne.n	800f9f2 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa68:	4b4d      	ldr	r3, [pc, #308]	; (800fba0 <ip4_input+0x278>)
 800fa6a:	691b      	ldr	r3, [r3, #16]
 800fa6c:	6839      	ldr	r1, [r7, #0]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 f96c 	bl	800fd4c <ip4_addr_isbroadcast_u32>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d105      	bne.n	800fa86 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fa7a:	4b49      	ldr	r3, [pc, #292]	; (800fba0 <ip4_input+0x278>)
 800fa7c:	691b      	ldr	r3, [r3, #16]
 800fa7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa82:	2be0      	cmp	r3, #224	; 0xe0
 800fa84:	d104      	bne.n	800fa90 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7f8 ff34 	bl	80088f4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	e083      	b.n	800fb98 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d104      	bne.n	800faa0 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7f8 ff2c 	bl	80088f4 <pbuf_free>
    return ERR_OK;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	e07b      	b.n	800fb98 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	88db      	ldrh	r3, [r3, #6]
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	461a      	mov	r2, r3
 800faa8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800faac:	4013      	ands	r3, r2
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d00b      	beq.n	800faca <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 fc90 	bl	80103d8 <ip4_reass>
 800fab8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d101      	bne.n	800fac4 <ip4_input+0x19c>
      return ERR_OK;
 800fac0:	2300      	movs	r3, #0
 800fac2:	e069      	b.n	800fb98 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	685b      	ldr	r3, [r3, #4]
 800fac8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800faca:	4a35      	ldr	r2, [pc, #212]	; (800fba0 <ip4_input+0x278>)
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fad0:	4a33      	ldr	r2, [pc, #204]	; (800fba0 <ip4_input+0x278>)
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fad6:	4a32      	ldr	r2, [pc, #200]	; (800fba0 <ip4_input+0x278>)
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	f003 030f 	and.w	r3, r3, #15
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	b29a      	uxth	r2, r3
 800faec:	4b2c      	ldr	r3, [pc, #176]	; (800fba0 <ip4_input+0x278>)
 800faee:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800faf0:	897b      	ldrh	r3, [r7, #10]
 800faf2:	425b      	negs	r3, r3
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	b21b      	sxth	r3, r3
 800faf8:	4619      	mov	r1, r3
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7f8 fed6 	bl	80088ac <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	7a5b      	ldrb	r3, [r3, #9]
 800fb04:	2b11      	cmp	r3, #17
 800fb06:	d006      	beq.n	800fb16 <ip4_input+0x1ee>
 800fb08:	2b11      	cmp	r3, #17
 800fb0a:	dc13      	bgt.n	800fb34 <ip4_input+0x20c>
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d00c      	beq.n	800fb2a <ip4_input+0x202>
 800fb10:	2b06      	cmp	r3, #6
 800fb12:	d005      	beq.n	800fb20 <ip4_input+0x1f8>
 800fb14:	e00e      	b.n	800fb34 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800fb16:	6839      	ldr	r1, [r7, #0]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7fe fce1 	bl	800e4e0 <udp_input>
      break;
 800fb1e:	e028      	b.n	800fb72 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7fa fd94 	bl	800a650 <tcp_input>
      break;
 800fb28:	e023      	b.n	800fb72 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7ff fd03 	bl	800f538 <icmp_input>
      break;
 800fb32:	e01e      	b.n	800fb72 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fb34:	4b1a      	ldr	r3, [pc, #104]	; (800fba0 <ip4_input+0x278>)
 800fb36:	695b      	ldr	r3, [r3, #20]
 800fb38:	6939      	ldr	r1, [r7, #16]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f000 f906 	bl	800fd4c <ip4_addr_isbroadcast_u32>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d112      	bne.n	800fb6c <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fb46:	4b16      	ldr	r3, [pc, #88]	; (800fba0 <ip4_input+0x278>)
 800fb48:	695b      	ldr	r3, [r3, #20]
 800fb4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fb4e:	2be0      	cmp	r3, #224	; 0xe0
 800fb50:	d00c      	beq.n	800fb6c <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800fb52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fb56:	4619      	mov	r1, r3
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7f8 feb9 	bl	80088d0 <pbuf_header_force>
        p->payload = iphdr;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	697a      	ldr	r2, [r7, #20]
 800fb62:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fb64:	2102      	movs	r1, #2
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f7ff fdec 	bl	800f744 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f7f8 fec1 	bl	80088f4 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fb72:	4b0b      	ldr	r3, [pc, #44]	; (800fba0 <ip4_input+0x278>)
 800fb74:	2200      	movs	r2, #0
 800fb76:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fb78:	4b09      	ldr	r3, [pc, #36]	; (800fba0 <ip4_input+0x278>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fb7e:	4b08      	ldr	r3, [pc, #32]	; (800fba0 <ip4_input+0x278>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fb84:	4b06      	ldr	r3, [pc, #24]	; (800fba0 <ip4_input+0x278>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fb8a:	4b05      	ldr	r3, [pc, #20]	; (800fba0 <ip4_input+0x278>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fb90:	4b03      	ldr	r3, [pc, #12]	; (800fba0 <ip4_input+0x278>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3718      	adds	r7, #24
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	20003a90 	.word	0x20003a90
 800fba4:	20006fe0 	.word	0x20006fe0

0800fba8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b08a      	sub	sp, #40	; 0x28
 800fbac:	af04      	add	r7, sp, #16
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	607a      	str	r2, [r7, #4]
 800fbb4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d009      	beq.n	800fbd4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d003      	beq.n	800fbce <ip4_output_if+0x26>
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d102      	bne.n	800fbd4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd0:	3304      	adds	r3, #4
 800fbd2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fbd4:	78fa      	ldrb	r2, [r7, #3]
 800fbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd8:	9302      	str	r3, [sp, #8]
 800fbda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fbde:	9301      	str	r3, [sp, #4]
 800fbe0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	687a      	ldr	r2, [r7, #4]
 800fbea:	6979      	ldr	r1, [r7, #20]
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f000 f805 	bl	800fbfc <ip4_output_if_src>
 800fbf2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3718      	adds	r7, #24
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b088      	sub	sp, #32
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	607a      	str	r2, [r7, #4]
 800fc08:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	89db      	ldrh	r3, [r3, #14]
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d006      	beq.n	800fc20 <ip4_output_if_src+0x24>
 800fc12:	4b48      	ldr	r3, [pc, #288]	; (800fd34 <ip4_output_if_src+0x138>)
 800fc14:	f240 3233 	movw	r2, #819	; 0x333
 800fc18:	4947      	ldr	r1, [pc, #284]	; (800fd38 <ip4_output_if_src+0x13c>)
 800fc1a:	4848      	ldr	r0, [pc, #288]	; (800fd3c <ip4_output_if_src+0x140>)
 800fc1c:	f001 f8c0 	bl	8010da0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d060      	beq.n	800fce8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fc26:	2314      	movs	r3, #20
 800fc28:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800fc2a:	2114      	movs	r1, #20
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f7f8 fe3d 	bl	80088ac <pbuf_header>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d002      	beq.n	800fc3e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fc38:	f06f 0301 	mvn.w	r3, #1
 800fc3c:	e075      	b.n	800fd2a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	895b      	ldrh	r3, [r3, #10]
 800fc48:	2b13      	cmp	r3, #19
 800fc4a:	d806      	bhi.n	800fc5a <ip4_output_if_src+0x5e>
 800fc4c:	4b39      	ldr	r3, [pc, #228]	; (800fd34 <ip4_output_if_src+0x138>)
 800fc4e:	f44f 7258 	mov.w	r2, #864	; 0x360
 800fc52:	493b      	ldr	r1, [pc, #236]	; (800fd40 <ip4_output_if_src+0x144>)
 800fc54:	4839      	ldr	r0, [pc, #228]	; (800fd3c <ip4_output_if_src+0x140>)
 800fc56:	f001 f8a3 	bl	8010da0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	78fa      	ldrb	r2, [r7, #3]
 800fc5e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fc66:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	69fb      	ldr	r3, [r7, #28]
 800fc6e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fc70:	8b7b      	ldrh	r3, [r7, #26]
 800fc72:	089b      	lsrs	r3, r3, #2
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc7c:	b2da      	uxtb	r2, r3
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fc88:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	891b      	ldrh	r3, [r3, #8]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7f7 fd07 	bl	80076a2 <lwip_htons>
 800fc94:	4603      	mov	r3, r0
 800fc96:	461a      	mov	r2, r3
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	719a      	strb	r2, [r3, #6]
 800fca2:	2200      	movs	r2, #0
 800fca4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fca6:	4b27      	ldr	r3, [pc, #156]	; (800fd44 <ip4_output_if_src+0x148>)
 800fca8:	881b      	ldrh	r3, [r3, #0]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7f7 fcf9 	bl	80076a2 <lwip_htons>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fcb8:	4b22      	ldr	r3, [pc, #136]	; (800fd44 <ip4_output_if_src+0x148>)
 800fcba:	881b      	ldrh	r3, [r3, #0]
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	4b20      	ldr	r3, [pc, #128]	; (800fd44 <ip4_output_if_src+0x148>)
 800fcc2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d104      	bne.n	800fcd4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fcca:	4b1f      	ldr	r3, [pc, #124]	; (800fd48 <ip4_output_if_src+0x14c>)
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	60da      	str	r2, [r3, #12]
 800fcd2:	e003      	b.n	800fcdc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	2200      	movs	r2, #0
 800fce0:	729a      	strb	r2, [r3, #10]
 800fce2:	2200      	movs	r2, #0
 800fce4:	72da      	strb	r2, [r3, #11]
 800fce6:	e008      	b.n	800fcfa <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	691b      	ldr	r3, [r3, #16]
 800fcf2:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fcf4:	f107 0314 	add.w	r3, r7, #20
 800fcf8:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00c      	beq.n	800fd1c <ip4_output_if_src+0x120>
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	891a      	ldrh	r2, [r3, #8]
 800fd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd08:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d906      	bls.n	800fd1c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	f000 fd0c 	bl	8010730 <ip4_frag>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	e006      	b.n	800fd2a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1e:	695b      	ldr	r3, [r3, #20]
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	68f9      	ldr	r1, [r7, #12]
 800fd24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd26:	4798      	blx	r3
 800fd28:	4603      	mov	r3, r0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3720      	adds	r7, #32
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	08013d94 	.word	0x08013d94
 800fd38:	08013dc8 	.word	0x08013dc8
 800fd3c:	08013dd4 	.word	0x08013dd4
 800fd40:	08013dfc 	.word	0x08013dfc
 800fd44:	2000713e 	.word	0x2000713e
 800fd48:	08014198 	.word	0x08014198

0800fd4c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b085      	sub	sp, #20
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd60:	d002      	beq.n	800fd68 <ip4_addr_isbroadcast_u32+0x1c>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d101      	bne.n	800fd6c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fd68:	2301      	movs	r3, #1
 800fd6a:	e02a      	b.n	800fdc2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fd72:	f003 0302 	and.w	r3, r3, #2
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d101      	bne.n	800fd7e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	e021      	b.n	800fdc2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	3304      	adds	r3, #4
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d101      	bne.n	800fd8e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	e019      	b.n	800fdc2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fd8e:	68fa      	ldr	r2, [r7, #12]
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	3304      	adds	r3, #4
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	405a      	eors	r2, r3
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	3308      	adds	r3, #8
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	4013      	ands	r3, r2
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d10d      	bne.n	800fdc0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	3308      	adds	r3, #8
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	43da      	mvns	r2, r3
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	3308      	adds	r3, #8
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d101      	bne.n	800fdc0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	e000      	b.n	800fdc2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fdc0:	2300      	movs	r3, #0
  }
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3714      	adds	r7, #20
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
	...

0800fdd0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fdda:	4b12      	ldr	r3, [pc, #72]	; (800fe24 <ip_reass_tmr+0x54>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fde0:	e018      	b.n	800fe14 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	7fdb      	ldrb	r3, [r3, #31]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d00b      	beq.n	800fe02 <ip_reass_tmr+0x32>
      r->timer--;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	7fdb      	ldrb	r3, [r3, #31]
 800fdee:	3b01      	subs	r3, #1
 800fdf0:	b2da      	uxtb	r2, r3
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	60fb      	str	r3, [r7, #12]
 800fe00:	e008      	b.n	800fe14 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fe0c:	68b9      	ldr	r1, [r7, #8]
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 f80a 	bl	800fe28 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d1e3      	bne.n	800fde2 <ip_reass_tmr+0x12>
     }
   }
}
 800fe1a:	bf00      	nop
 800fe1c:	bf00      	nop
 800fe1e:	3710      	adds	r7, #16
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	20007140 	.word	0x20007140

0800fe28 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b088      	sub	sp, #32
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fe32:	2300      	movs	r3, #0
 800fe34:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fe36:	683a      	ldr	r2, [r7, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d105      	bne.n	800fe4a <ip_reass_free_complete_datagram+0x22>
 800fe3e:	4b45      	ldr	r3, [pc, #276]	; (800ff54 <ip_reass_free_complete_datagram+0x12c>)
 800fe40:	22ab      	movs	r2, #171	; 0xab
 800fe42:	4945      	ldr	r1, [pc, #276]	; (800ff58 <ip_reass_free_complete_datagram+0x130>)
 800fe44:	4845      	ldr	r0, [pc, #276]	; (800ff5c <ip_reass_free_complete_datagram+0x134>)
 800fe46:	f000 ffab 	bl	8010da0 <iprintf>
  if (prev != NULL) {
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d00a      	beq.n	800fe66 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d005      	beq.n	800fe66 <ip_reass_free_complete_datagram+0x3e>
 800fe5a:	4b3e      	ldr	r3, [pc, #248]	; (800ff54 <ip_reass_free_complete_datagram+0x12c>)
 800fe5c:	22ad      	movs	r2, #173	; 0xad
 800fe5e:	4940      	ldr	r1, [pc, #256]	; (800ff60 <ip_reass_free_complete_datagram+0x138>)
 800fe60:	483e      	ldr	r0, [pc, #248]	; (800ff5c <ip_reass_free_complete_datagram+0x134>)
 800fe62:	f000 ff9d 	bl	8010da0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	889b      	ldrh	r3, [r3, #4]
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d12a      	bne.n	800fece <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	6858      	ldr	r0, [r3, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	3308      	adds	r3, #8
 800fe8e:	2214      	movs	r2, #20
 800fe90:	4619      	mov	r1, r3
 800fe92:	f000 fe8f 	bl	8010bb4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fe96:	2101      	movs	r1, #1
 800fe98:	69b8      	ldr	r0, [r7, #24]
 800fe9a:	f7ff fc63 	bl	800f764 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fe9e:	69b8      	ldr	r0, [r7, #24]
 800fea0:	f7f8 fdbc 	bl	8008a1c <pbuf_clen>
 800fea4:	4603      	mov	r3, r0
 800fea6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fea8:	8bfa      	ldrh	r2, [r7, #30]
 800feaa:	8a7b      	ldrh	r3, [r7, #18]
 800feac:	4413      	add	r3, r2
 800feae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800feb2:	db05      	blt.n	800fec0 <ip_reass_free_complete_datagram+0x98>
 800feb4:	4b27      	ldr	r3, [pc, #156]	; (800ff54 <ip_reass_free_complete_datagram+0x12c>)
 800feb6:	22bc      	movs	r2, #188	; 0xbc
 800feb8:	492a      	ldr	r1, [pc, #168]	; (800ff64 <ip_reass_free_complete_datagram+0x13c>)
 800feba:	4828      	ldr	r0, [pc, #160]	; (800ff5c <ip_reass_free_complete_datagram+0x134>)
 800febc:	f000 ff70 	bl	8010da0 <iprintf>
    pbufs_freed += clen;
 800fec0:	8bfa      	ldrh	r2, [r7, #30]
 800fec2:	8a7b      	ldrh	r3, [r7, #18]
 800fec4:	4413      	add	r3, r2
 800fec6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fec8:	69b8      	ldr	r0, [r7, #24]
 800feca:	f7f8 fd13 	bl	80088f4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fed4:	e01f      	b.n	800ff16 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fee6:	68f8      	ldr	r0, [r7, #12]
 800fee8:	f7f8 fd98 	bl	8008a1c <pbuf_clen>
 800feec:	4603      	mov	r3, r0
 800feee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fef0:	8bfa      	ldrh	r2, [r7, #30]
 800fef2:	8a7b      	ldrh	r3, [r7, #18]
 800fef4:	4413      	add	r3, r2
 800fef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fefa:	db05      	blt.n	800ff08 <ip_reass_free_complete_datagram+0xe0>
 800fefc:	4b15      	ldr	r3, [pc, #84]	; (800ff54 <ip_reass_free_complete_datagram+0x12c>)
 800fefe:	22cc      	movs	r2, #204	; 0xcc
 800ff00:	4918      	ldr	r1, [pc, #96]	; (800ff64 <ip_reass_free_complete_datagram+0x13c>)
 800ff02:	4816      	ldr	r0, [pc, #88]	; (800ff5c <ip_reass_free_complete_datagram+0x134>)
 800ff04:	f000 ff4c 	bl	8010da0 <iprintf>
    pbufs_freed += clen;
 800ff08:	8bfa      	ldrh	r2, [r7, #30]
 800ff0a:	8a7b      	ldrh	r3, [r7, #18]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7f8 fcef 	bl	80088f4 <pbuf_free>
  while (p != NULL) {
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d1dc      	bne.n	800fed6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ff1c:	6839      	ldr	r1, [r7, #0]
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 f8c2 	bl	80100a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800ff24:	4b10      	ldr	r3, [pc, #64]	; (800ff68 <ip_reass_free_complete_datagram+0x140>)
 800ff26:	881b      	ldrh	r3, [r3, #0]
 800ff28:	8bfa      	ldrh	r2, [r7, #30]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d905      	bls.n	800ff3a <ip_reass_free_complete_datagram+0x112>
 800ff2e:	4b09      	ldr	r3, [pc, #36]	; (800ff54 <ip_reass_free_complete_datagram+0x12c>)
 800ff30:	22d2      	movs	r2, #210	; 0xd2
 800ff32:	490e      	ldr	r1, [pc, #56]	; (800ff6c <ip_reass_free_complete_datagram+0x144>)
 800ff34:	4809      	ldr	r0, [pc, #36]	; (800ff5c <ip_reass_free_complete_datagram+0x134>)
 800ff36:	f000 ff33 	bl	8010da0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800ff3a:	4b0b      	ldr	r3, [pc, #44]	; (800ff68 <ip_reass_free_complete_datagram+0x140>)
 800ff3c:	881a      	ldrh	r2, [r3, #0]
 800ff3e:	8bfb      	ldrh	r3, [r7, #30]
 800ff40:	1ad3      	subs	r3, r2, r3
 800ff42:	b29a      	uxth	r2, r3
 800ff44:	4b08      	ldr	r3, [pc, #32]	; (800ff68 <ip_reass_free_complete_datagram+0x140>)
 800ff46:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ff48:	8bfb      	ldrh	r3, [r7, #30]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3720      	adds	r7, #32
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	08013e2c 	.word	0x08013e2c
 800ff58:	08013e68 	.word	0x08013e68
 800ff5c:	08013e74 	.word	0x08013e74
 800ff60:	08013e9c 	.word	0x08013e9c
 800ff64:	08013eb0 	.word	0x08013eb0
 800ff68:	20007144 	.word	0x20007144
 800ff6c:	08013ed0 	.word	0x08013ed0

0800ff70 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b08a      	sub	sp, #40	; 0x28
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ff82:	2300      	movs	r3, #0
 800ff84:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ff86:	2300      	movs	r3, #0
 800ff88:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ff8e:	4b28      	ldr	r3, [pc, #160]	; (8010030 <ip_reass_remove_oldest_datagram+0xc0>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ff94:	e030      	b.n	800fff8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	695a      	ldr	r2, [r3, #20]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d10c      	bne.n	800ffbc <ip_reass_remove_oldest_datagram+0x4c>
 800ffa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa4:	699a      	ldr	r2, [r3, #24]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	691b      	ldr	r3, [r3, #16]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d106      	bne.n	800ffbc <ip_reass_remove_oldest_datagram+0x4c>
 800ffae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb0:	899a      	ldrh	r2, [r3, #12]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	889b      	ldrh	r3, [r3, #4]
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d014      	beq.n	800ffe6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ffc2:	6a3b      	ldr	r3, [r7, #32]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d104      	bne.n	800ffd2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ffc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	61bb      	str	r3, [r7, #24]
 800ffd0:	e009      	b.n	800ffe6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd4:	7fda      	ldrb	r2, [r3, #31]
 800ffd6:	6a3b      	ldr	r3, [r7, #32]
 800ffd8:	7fdb      	ldrb	r3, [r3, #31]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d803      	bhi.n	800ffe6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ffde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d001      	beq.n	800fff2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ffee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d1cb      	bne.n	800ff96 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d008      	beq.n	8010016 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010004:	69b9      	ldr	r1, [r7, #24]
 8010006:	6a38      	ldr	r0, [r7, #32]
 8010008:	f7ff ff0e 	bl	800fe28 <ip_reass_free_complete_datagram>
 801000c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801000e:	697a      	ldr	r2, [r7, #20]
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	4413      	add	r3, r2
 8010014:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010016:	697a      	ldr	r2, [r7, #20]
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	429a      	cmp	r2, r3
 801001c:	da02      	bge.n	8010024 <ip_reass_remove_oldest_datagram+0xb4>
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	2b01      	cmp	r3, #1
 8010022:	dcac      	bgt.n	800ff7e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010024:	697b      	ldr	r3, [r7, #20]
}
 8010026:	4618      	mov	r0, r3
 8010028:	3728      	adds	r7, #40	; 0x28
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	20007140 	.word	0x20007140

08010034 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801003e:	2004      	movs	r0, #4
 8010040:	f7f7 fedc 	bl	8007dfc <memp_malloc>
 8010044:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d110      	bne.n	801006e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801004c:	6839      	ldr	r1, [r7, #0]
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f7ff ff8e 	bl	800ff70 <ip_reass_remove_oldest_datagram>
 8010054:	4602      	mov	r2, r0
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	4293      	cmp	r3, r2
 801005a:	dc03      	bgt.n	8010064 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801005c:	2004      	movs	r0, #4
 801005e:	f7f7 fecd 	bl	8007dfc <memp_malloc>
 8010062:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d101      	bne.n	801006e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801006a:	2300      	movs	r3, #0
 801006c:	e016      	b.n	801009c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801006e:	2220      	movs	r2, #32
 8010070:	2100      	movs	r1, #0
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	f000 fdac 	bl	8010bd0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2203      	movs	r2, #3
 801007c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801007e:	4b09      	ldr	r3, [pc, #36]	; (80100a4 <ip_reass_enqueue_new_datagram+0x70>)
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010086:	4a07      	ldr	r2, [pc, #28]	; (80100a4 <ip_reass_enqueue_new_datagram+0x70>)
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	3308      	adds	r3, #8
 8010090:	2214      	movs	r2, #20
 8010092:	6879      	ldr	r1, [r7, #4]
 8010094:	4618      	mov	r0, r3
 8010096:	f000 fd8d 	bl	8010bb4 <memcpy>
  return ipr;
 801009a:	68fb      	ldr	r3, [r7, #12]
}
 801009c:	4618      	mov	r0, r3
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	20007140 	.word	0x20007140

080100a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80100b2:	4b10      	ldr	r3, [pc, #64]	; (80100f4 <ip_reass_dequeue_datagram+0x4c>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d104      	bne.n	80100c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4a0c      	ldr	r2, [pc, #48]	; (80100f4 <ip_reass_dequeue_datagram+0x4c>)
 80100c2:	6013      	str	r3, [r2, #0]
 80100c4:	e00d      	b.n	80100e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d106      	bne.n	80100da <ip_reass_dequeue_datagram+0x32>
 80100cc:	4b0a      	ldr	r3, [pc, #40]	; (80100f8 <ip_reass_dequeue_datagram+0x50>)
 80100ce:	f240 1245 	movw	r2, #325	; 0x145
 80100d2:	490a      	ldr	r1, [pc, #40]	; (80100fc <ip_reass_dequeue_datagram+0x54>)
 80100d4:	480a      	ldr	r0, [pc, #40]	; (8010100 <ip_reass_dequeue_datagram+0x58>)
 80100d6:	f000 fe63 	bl	8010da0 <iprintf>
    prev->next = ipr->next;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80100e2:	6879      	ldr	r1, [r7, #4]
 80100e4:	2004      	movs	r0, #4
 80100e6:	f7f7 fed5 	bl	8007e94 <memp_free>
}
 80100ea:	bf00      	nop
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	20007140 	.word	0x20007140
 80100f8:	08013e2c 	.word	0x08013e2c
 80100fc:	08013eec 	.word	0x08013eec
 8010100:	08013e74 	.word	0x08013e74

08010104 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b08c      	sub	sp, #48	; 0x30
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8010110:	2300      	movs	r3, #0
 8010112:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010114:	2301      	movs	r3, #1
 8010116:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	885b      	ldrh	r3, [r3, #2]
 8010122:	b29b      	uxth	r3, r3
 8010124:	4618      	mov	r0, r3
 8010126:	f7f7 fabc 	bl	80076a2 <lwip_htons>
 801012a:	4603      	mov	r3, r0
 801012c:	461a      	mov	r2, r3
 801012e:	69fb      	ldr	r3, [r7, #28]
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	b29b      	uxth	r3, r3
 8010134:	f003 030f 	and.w	r3, r3, #15
 8010138:	b29b      	uxth	r3, r3
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	b29b      	uxth	r3, r3
 801013e:	1ad3      	subs	r3, r2, r3
 8010140:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	88db      	ldrh	r3, [r3, #6]
 8010146:	b29b      	uxth	r3, r3
 8010148:	4618      	mov	r0, r3
 801014a:	f7f7 faaa 	bl	80076a2 <lwip_htons>
 801014e:	4603      	mov	r3, r0
 8010150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010154:	b29b      	uxth	r3, r3
 8010156:	00db      	lsls	r3, r3, #3
 8010158:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010162:	2200      	movs	r2, #0
 8010164:	701a      	strb	r2, [r3, #0]
 8010166:	2200      	movs	r2, #0
 8010168:	705a      	strb	r2, [r3, #1]
 801016a:	2200      	movs	r2, #0
 801016c:	709a      	strb	r2, [r3, #2]
 801016e:	2200      	movs	r2, #0
 8010170:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010174:	8b3a      	ldrh	r2, [r7, #24]
 8010176:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8010178:	8b3a      	ldrh	r2, [r7, #24]
 801017a:	8b7b      	ldrh	r3, [r7, #26]
 801017c:	4413      	add	r3, r2
 801017e:	b29a      	uxth	r2, r3
 8010180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010182:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	627b      	str	r3, [r7, #36]	; 0x24
 801018a:	e061      	b.n	8010250 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801018c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8010192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010194:	889b      	ldrh	r3, [r3, #4]
 8010196:	b29a      	uxth	r2, r3
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	889b      	ldrh	r3, [r3, #4]
 801019c:	b29b      	uxth	r3, r3
 801019e:	429a      	cmp	r2, r3
 80101a0:	d232      	bcs.n	8010208 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80101a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101a6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80101a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d01f      	beq.n	80101ee <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80101ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b0:	889b      	ldrh	r3, [r3, #4]
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b6:	88db      	ldrh	r3, [r3, #6]
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	429a      	cmp	r2, r3
 80101bc:	f0c0 80e3 	bcc.w	8010386 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80101c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c2:	88db      	ldrh	r3, [r3, #6]
 80101c4:	b29a      	uxth	r2, r3
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	889b      	ldrh	r3, [r3, #4]
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	429a      	cmp	r2, r3
 80101ce:	f200 80da 	bhi.w	8010386 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80101d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d4:	68ba      	ldr	r2, [r7, #8]
 80101d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80101d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101da:	88db      	ldrh	r3, [r3, #6]
 80101dc:	b29a      	uxth	r2, r3
 80101de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e0:	889b      	ldrh	r3, [r3, #4]
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d037      	beq.n	8010258 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80101ec:	e034      	b.n	8010258 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80101ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f0:	88db      	ldrh	r3, [r3, #6]
 80101f2:	b29a      	uxth	r2, r3
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	889b      	ldrh	r3, [r3, #4]
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	429a      	cmp	r2, r3
 80101fc:	f200 80c5 	bhi.w	801038a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	68ba      	ldr	r2, [r7, #8]
 8010204:	605a      	str	r2, [r3, #4]
      break;
 8010206:	e027      	b.n	8010258 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8010208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020a:	889b      	ldrh	r3, [r3, #4]
 801020c:	b29a      	uxth	r2, r3
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	889b      	ldrh	r3, [r3, #4]
 8010212:	b29b      	uxth	r3, r3
 8010214:	429a      	cmp	r2, r3
 8010216:	f000 80ba 	beq.w	801038e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801021a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021c:	889b      	ldrh	r3, [r3, #4]
 801021e:	b29a      	uxth	r2, r3
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	88db      	ldrh	r3, [r3, #6]
 8010224:	b29b      	uxth	r3, r3
 8010226:	429a      	cmp	r2, r3
 8010228:	f0c0 80b3 	bcc.w	8010392 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801022c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022e:	2b00      	cmp	r3, #0
 8010230:	d009      	beq.n	8010246 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8010232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010234:	88db      	ldrh	r3, [r3, #6]
 8010236:	b29a      	uxth	r2, r3
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	889b      	ldrh	r3, [r3, #4]
 801023c:	b29b      	uxth	r3, r3
 801023e:	429a      	cmp	r2, r3
 8010240:	d001      	beq.n	8010246 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010242:	2300      	movs	r3, #0
 8010244:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010252:	2b00      	cmp	r3, #0
 8010254:	d19a      	bne.n	801018c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8010256:	e000      	b.n	801025a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8010258:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801025a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025c:	2b00      	cmp	r3, #0
 801025e:	d12d      	bne.n	80102bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8010260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010262:	2b00      	cmp	r3, #0
 8010264:	d01c      	beq.n	80102a0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010268:	88db      	ldrh	r3, [r3, #6]
 801026a:	b29a      	uxth	r2, r3
 801026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026e:	889b      	ldrh	r3, [r3, #4]
 8010270:	b29b      	uxth	r3, r3
 8010272:	429a      	cmp	r2, r3
 8010274:	d906      	bls.n	8010284 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8010276:	4b51      	ldr	r3, [pc, #324]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8010278:	f240 12ab 	movw	r2, #427	; 0x1ab
 801027c:	4950      	ldr	r1, [pc, #320]	; (80103c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801027e:	4851      	ldr	r0, [pc, #324]	; (80103c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010280:	f000 fd8e 	bl	8010da0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801028a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028c:	88db      	ldrh	r3, [r3, #6]
 801028e:	b29a      	uxth	r2, r3
 8010290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010292:	889b      	ldrh	r3, [r3, #4]
 8010294:	b29b      	uxth	r3, r3
 8010296:	429a      	cmp	r2, r3
 8010298:	d010      	beq.n	80102bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801029a:	2300      	movs	r3, #0
 801029c:	623b      	str	r3, [r7, #32]
 801029e:	e00d      	b.n	80102bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d006      	beq.n	80102b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80102a8:	4b44      	ldr	r3, [pc, #272]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80102aa:	f240 12b3 	movw	r2, #435	; 0x1b3
 80102ae:	4946      	ldr	r1, [pc, #280]	; (80103c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80102b0:	4844      	ldr	r0, [pc, #272]	; (80103c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80102b2:	f000 fd75 	bl	8010da0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	68ba      	ldr	r2, [r7, #8]
 80102ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d105      	bne.n	80102ce <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	7f9b      	ldrb	r3, [r3, #30]
 80102c6:	f003 0301 	and.w	r3, r3, #1
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d059      	beq.n	8010382 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d04f      	beq.n	8010374 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d006      	beq.n	80102ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	889b      	ldrh	r3, [r3, #4]
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d002      	beq.n	80102f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	623b      	str	r3, [r7, #32]
 80102ee:	e041      	b.n	8010374 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80102f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80102f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80102fa:	e012      	b.n	8010322 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80102fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010304:	88db      	ldrh	r3, [r3, #6]
 8010306:	b29a      	uxth	r2, r3
 8010308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030a:	889b      	ldrh	r3, [r3, #4]
 801030c:	b29b      	uxth	r3, r3
 801030e:	429a      	cmp	r2, r3
 8010310:	d002      	beq.n	8010318 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	623b      	str	r3, [r7, #32]
            break;
 8010316:	e007      	b.n	8010328 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8010318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801031c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010324:	2b00      	cmp	r3, #0
 8010326:	d1e9      	bne.n	80102fc <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010328:	6a3b      	ldr	r3, [r7, #32]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d022      	beq.n	8010374 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d106      	bne.n	8010344 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8010336:	4b21      	ldr	r3, [pc, #132]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8010338:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801033c:	4923      	ldr	r1, [pc, #140]	; (80103cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801033e:	4821      	ldr	r0, [pc, #132]	; (80103c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010340:	f000 fd2e 	bl	8010da0 <iprintf>
          LWIP_ASSERT("sanity check",
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801034c:	429a      	cmp	r2, r3
 801034e:	d106      	bne.n	801035e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8010350:	4b1a      	ldr	r3, [pc, #104]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8010352:	f240 12d5 	movw	r2, #469	; 0x1d5
 8010356:	491d      	ldr	r1, [pc, #116]	; (80103cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010358:	481a      	ldr	r0, [pc, #104]	; (80103c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801035a:	f000 fd21 	bl	8010da0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801035e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d006      	beq.n	8010374 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8010366:	4b15      	ldr	r3, [pc, #84]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8010368:	f240 12d7 	movw	r2, #471	; 0x1d7
 801036c:	4918      	ldr	r1, [pc, #96]	; (80103d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801036e:	4815      	ldr	r0, [pc, #84]	; (80103c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010370:	f000 fd16 	bl	8010da0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010374:	6a3b      	ldr	r3, [r7, #32]
 8010376:	2b00      	cmp	r3, #0
 8010378:	bf14      	ite	ne
 801037a:	2301      	movne	r3, #1
 801037c:	2300      	moveq	r3, #0
 801037e:	b2db      	uxtb	r3, r3
 8010380:	e018      	b.n	80103b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010382:	2300      	movs	r3, #0
 8010384:	e016      	b.n	80103b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 8010386:	bf00      	nop
 8010388:	e004      	b.n	8010394 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801038a:	bf00      	nop
 801038c:	e002      	b.n	8010394 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801038e:	bf00      	nop
 8010390:	e000      	b.n	8010394 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8010392:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8010394:	68b8      	ldr	r0, [r7, #8]
 8010396:	f7f8 fb41 	bl	8008a1c <pbuf_clen>
 801039a:	4603      	mov	r3, r0
 801039c:	461a      	mov	r2, r3
 801039e:	4b0d      	ldr	r3, [pc, #52]	; (80103d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80103a0:	881b      	ldrh	r3, [r3, #0]
 80103a2:	1a9b      	subs	r3, r3, r2
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	4b0b      	ldr	r3, [pc, #44]	; (80103d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80103a8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80103aa:	68b8      	ldr	r0, [r7, #8]
 80103ac:	f7f8 faa2 	bl	80088f4 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80103b0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3730      	adds	r7, #48	; 0x30
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	08013e2c 	.word	0x08013e2c
 80103c0:	08013f08 	.word	0x08013f08
 80103c4:	08013e74 	.word	0x08013e74
 80103c8:	08013f28 	.word	0x08013f28
 80103cc:	08013f60 	.word	0x08013f60
 80103d0:	08013f70 	.word	0x08013f70
 80103d4:	20007144 	.word	0x20007144

080103d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b08e      	sub	sp, #56	; 0x38
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80103e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	f003 030f 	and.w	r3, r3, #15
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	2b14      	cmp	r3, #20
 80103f2:	f040 8131 	bne.w	8010658 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80103f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f8:	88db      	ldrh	r3, [r3, #6]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7f7 f950 	bl	80076a2 <lwip_htons>
 8010402:	4603      	mov	r3, r0
 8010404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010408:	b29b      	uxth	r3, r3
 801040a:	00db      	lsls	r3, r3, #3
 801040c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801040e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010410:	885b      	ldrh	r3, [r3, #2]
 8010412:	b29b      	uxth	r3, r3
 8010414:	4618      	mov	r0, r3
 8010416:	f7f7 f944 	bl	80076a2 <lwip_htons>
 801041a:	4603      	mov	r3, r0
 801041c:	461a      	mov	r2, r3
 801041e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	b29b      	uxth	r3, r3
 8010424:	f003 030f 	and.w	r3, r3, #15
 8010428:	b29b      	uxth	r3, r3
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	b29b      	uxth	r3, r3
 801042e:	1ad3      	subs	r3, r2, r3
 8010430:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7f8 faf2 	bl	8008a1c <pbuf_clen>
 8010438:	4603      	mov	r3, r0
 801043a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801043c:	4b8e      	ldr	r3, [pc, #568]	; (8010678 <ip4_reass+0x2a0>)
 801043e:	881b      	ldrh	r3, [r3, #0]
 8010440:	461a      	mov	r2, r3
 8010442:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010444:	4413      	add	r3, r2
 8010446:	2b0a      	cmp	r3, #10
 8010448:	dd10      	ble.n	801046c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801044a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801044c:	4619      	mov	r1, r3
 801044e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010450:	f7ff fd8e 	bl	800ff70 <ip_reass_remove_oldest_datagram>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	f000 8100 	beq.w	801065c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801045c:	4b86      	ldr	r3, [pc, #536]	; (8010678 <ip4_reass+0x2a0>)
 801045e:	881b      	ldrh	r3, [r3, #0]
 8010460:	461a      	mov	r2, r3
 8010462:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010464:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010466:	2b0a      	cmp	r3, #10
 8010468:	f300 80f8 	bgt.w	801065c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801046c:	4b83      	ldr	r3, [pc, #524]	; (801067c <ip4_reass+0x2a4>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	633b      	str	r3, [r7, #48]	; 0x30
 8010472:	e015      	b.n	80104a0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010476:	695a      	ldr	r2, [r3, #20]
 8010478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047a:	68db      	ldr	r3, [r3, #12]
 801047c:	429a      	cmp	r2, r3
 801047e:	d10c      	bne.n	801049a <ip4_reass+0xc2>
 8010480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010482:	699a      	ldr	r2, [r3, #24]
 8010484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010486:	691b      	ldr	r3, [r3, #16]
 8010488:	429a      	cmp	r2, r3
 801048a:	d106      	bne.n	801049a <ip4_reass+0xc2>
 801048c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048e:	899a      	ldrh	r2, [r3, #12]
 8010490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010492:	889b      	ldrh	r3, [r3, #4]
 8010494:	b29b      	uxth	r3, r3
 8010496:	429a      	cmp	r2, r3
 8010498:	d006      	beq.n	80104a8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801049a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	633b      	str	r3, [r7, #48]	; 0x30
 80104a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d1e6      	bne.n	8010474 <ip4_reass+0x9c>
 80104a6:	e000      	b.n	80104aa <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80104a8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80104aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d109      	bne.n	80104c4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80104b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104b2:	4619      	mov	r1, r3
 80104b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104b6:	f7ff fdbd 	bl	8010034 <ip_reass_enqueue_new_datagram>
 80104ba:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80104bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d11c      	bne.n	80104fc <ip4_reass+0x124>
      goto nullreturn;
 80104c2:	e0d0      	b.n	8010666 <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80104c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c6:	88db      	ldrh	r3, [r3, #6]
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7f7 f8e9 	bl	80076a2 <lwip_htons>
 80104d0:	4603      	mov	r3, r0
 80104d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d110      	bne.n	80104fc <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80104da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104dc:	89db      	ldrh	r3, [r3, #14]
 80104de:	4618      	mov	r0, r3
 80104e0:	f7f7 f8df 	bl	80076a2 <lwip_htons>
 80104e4:	4603      	mov	r3, r0
 80104e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d006      	beq.n	80104fc <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80104ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f0:	3308      	adds	r3, #8
 80104f2:	2214      	movs	r2, #20
 80104f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104f6:	4618      	mov	r0, r3
 80104f8:	f000 fb5c 	bl	8010bb4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80104fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fe:	88db      	ldrh	r3, [r3, #6]
 8010500:	b29b      	uxth	r3, r3
 8010502:	f003 0320 	and.w	r3, r3, #32
 8010506:	2b00      	cmp	r3, #0
 8010508:	bf0c      	ite	eq
 801050a:	2301      	moveq	r3, #1
 801050c:	2300      	movne	r3, #0
 801050e:	b2db      	uxtb	r3, r3
 8010510:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d00e      	beq.n	8010536 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8010518:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801051a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801051c:	4413      	add	r3, r2
 801051e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010520:	8b7a      	ldrh	r2, [r7, #26]
 8010522:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010524:	429a      	cmp	r2, r3
 8010526:	f0c0 809b 	bcc.w	8010660 <ip4_reass+0x288>
 801052a:	8b7b      	ldrh	r3, [r7, #26]
 801052c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010530:	4293      	cmp	r3, r2
 8010532:	f200 8095 	bhi.w	8010660 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010536:	69fa      	ldr	r2, [r7, #28]
 8010538:	6879      	ldr	r1, [r7, #4]
 801053a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801053c:	f7ff fde2 	bl	8010104 <ip_reass_chain_frag_into_datagram_and_validate>
 8010540:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010548:	f000 808c 	beq.w	8010664 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801054c:	4b4a      	ldr	r3, [pc, #296]	; (8010678 <ip4_reass+0x2a0>)
 801054e:	881a      	ldrh	r2, [r3, #0]
 8010550:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010552:	4413      	add	r3, r2
 8010554:	b29a      	uxth	r2, r3
 8010556:	4b48      	ldr	r3, [pc, #288]	; (8010678 <ip4_reass+0x2a0>)
 8010558:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801055a:	69fb      	ldr	r3, [r7, #28]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d00d      	beq.n	801057c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8010560:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010564:	4413      	add	r3, r2
 8010566:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056a:	8a7a      	ldrh	r2, [r7, #18]
 801056c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010570:	7f9b      	ldrb	r3, [r3, #30]
 8010572:	f043 0301 	orr.w	r3, r3, #1
 8010576:	b2da      	uxtb	r2, r3
 8010578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d168      	bne.n	8010654 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8010582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010584:	8b9b      	ldrh	r3, [r3, #28]
 8010586:	3314      	adds	r3, #20
 8010588:	b29a      	uxth	r2, r3
 801058a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801058e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8010598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80105a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a2:	3308      	adds	r3, #8
 80105a4:	2214      	movs	r2, #20
 80105a6:	4619      	mov	r1, r3
 80105a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105aa:	f000 fb03 	bl	8010bb4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80105ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b0:	8b9b      	ldrh	r3, [r3, #28]
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7f7 f875 	bl	80076a2 <lwip_htons>
 80105b8:	4603      	mov	r3, r0
 80105ba:	461a      	mov	r2, r3
 80105bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105be:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80105c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c2:	2200      	movs	r2, #0
 80105c4:	719a      	strb	r2, [r3, #6]
 80105c6:	2200      	movs	r2, #0
 80105c8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80105ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105cc:	2200      	movs	r2, #0
 80105ce:	729a      	strb	r2, [r3, #10]
 80105d0:	2200      	movs	r2, #0
 80105d2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80105d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80105da:	e00e      	b.n	80105fa <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80105dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80105e2:	f06f 0113 	mvn.w	r1, #19
 80105e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80105e8:	f7f8 f960 	bl	80088ac <pbuf_header>
      pbuf_cat(p, r);
 80105ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7f8 fa4e 	bl	8008a90 <pbuf_cat>
      r = iprh->next_pbuf;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80105fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d1ed      	bne.n	80105dc <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010600:	4b1e      	ldr	r3, [pc, #120]	; (801067c <ip4_reass+0x2a4>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010606:	429a      	cmp	r2, r3
 8010608:	d102      	bne.n	8010610 <ip4_reass+0x238>
      ipr_prev = NULL;
 801060a:	2300      	movs	r3, #0
 801060c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801060e:	e010      	b.n	8010632 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010610:	4b1a      	ldr	r3, [pc, #104]	; (801067c <ip4_reass+0x2a4>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010616:	e007      	b.n	8010628 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8010618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801061e:	429a      	cmp	r2, r3
 8010620:	d006      	beq.n	8010630 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1f4      	bne.n	8010618 <ip4_reass+0x240>
 801062e:	e000      	b.n	8010632 <ip4_reass+0x25a>
          break;
 8010630:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010636:	f7ff fd37 	bl	80100a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f7f8 f9ee 	bl	8008a1c <pbuf_clen>
 8010640:	4603      	mov	r3, r0
 8010642:	461a      	mov	r2, r3
 8010644:	4b0c      	ldr	r3, [pc, #48]	; (8010678 <ip4_reass+0x2a0>)
 8010646:	881b      	ldrh	r3, [r3, #0]
 8010648:	1a9b      	subs	r3, r3, r2
 801064a:	b29a      	uxth	r2, r3
 801064c:	4b0a      	ldr	r3, [pc, #40]	; (8010678 <ip4_reass+0x2a0>)
 801064e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	e00c      	b.n	801066e <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010654:	2300      	movs	r3, #0
 8010656:	e00a      	b.n	801066e <ip4_reass+0x296>
    goto nullreturn;
 8010658:	bf00      	nop
 801065a:	e004      	b.n	8010666 <ip4_reass+0x28e>
      goto nullreturn;
 801065c:	bf00      	nop
 801065e:	e002      	b.n	8010666 <ip4_reass+0x28e>
      goto nullreturn;
 8010660:	bf00      	nop
 8010662:	e000      	b.n	8010666 <ip4_reass+0x28e>
    goto nullreturn;
 8010664:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7f8 f944 	bl	80088f4 <pbuf_free>
  return NULL;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3738      	adds	r7, #56	; 0x38
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	20007144 	.word	0x20007144
 801067c:	20007140 	.word	0x20007140

08010680 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8010684:	2005      	movs	r0, #5
 8010686:	f7f7 fbb9 	bl	8007dfc <memp_malloc>
 801068a:	4603      	mov	r3, r0
}
 801068c:	4618      	mov	r0, r3
 801068e:	bd80      	pop	{r7, pc}

08010690 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d106      	bne.n	80106ac <ip_frag_free_pbuf_custom_ref+0x1c>
 801069e:	4b07      	ldr	r3, [pc, #28]	; (80106bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80106a0:	f240 22ae 	movw	r2, #686	; 0x2ae
 80106a4:	4906      	ldr	r1, [pc, #24]	; (80106c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80106a6:	4807      	ldr	r0, [pc, #28]	; (80106c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80106a8:	f000 fb7a 	bl	8010da0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80106ac:	6879      	ldr	r1, [r7, #4]
 80106ae:	2005      	movs	r0, #5
 80106b0:	f7f7 fbf0 	bl	8007e94 <memp_free>
}
 80106b4:	bf00      	nop
 80106b6:	3708      	adds	r7, #8
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	08013e2c 	.word	0x08013e2c
 80106c0:	08013f94 	.word	0x08013f94
 80106c4:	08013e74 	.word	0x08013e74

080106c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d106      	bne.n	80106e8 <ipfrag_free_pbuf_custom+0x20>
 80106da:	4b11      	ldr	r3, [pc, #68]	; (8010720 <ipfrag_free_pbuf_custom+0x58>)
 80106dc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80106e0:	4910      	ldr	r1, [pc, #64]	; (8010724 <ipfrag_free_pbuf_custom+0x5c>)
 80106e2:	4811      	ldr	r0, [pc, #68]	; (8010728 <ipfrag_free_pbuf_custom+0x60>)
 80106e4:	f000 fb5c 	bl	8010da0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d006      	beq.n	80106fe <ipfrag_free_pbuf_custom+0x36>
 80106f0:	4b0b      	ldr	r3, [pc, #44]	; (8010720 <ipfrag_free_pbuf_custom+0x58>)
 80106f2:	f240 22b9 	movw	r2, #697	; 0x2b9
 80106f6:	490d      	ldr	r1, [pc, #52]	; (801072c <ipfrag_free_pbuf_custom+0x64>)
 80106f8:	480b      	ldr	r0, [pc, #44]	; (8010728 <ipfrag_free_pbuf_custom+0x60>)
 80106fa:	f000 fb51 	bl	8010da0 <iprintf>
  if (pcr->original != NULL) {
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	695b      	ldr	r3, [r3, #20]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d004      	beq.n	8010710 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	695b      	ldr	r3, [r3, #20]
 801070a:	4618      	mov	r0, r3
 801070c:	f7f8 f8f2 	bl	80088f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	f7ff ffbd 	bl	8010690 <ip_frag_free_pbuf_custom_ref>
}
 8010716:	bf00      	nop
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	08013e2c 	.word	0x08013e2c
 8010724:	08013fa0 	.word	0x08013fa0
 8010728:	08013e74 	.word	0x08013e74
 801072c:	08013fac 	.word	0x08013fac

08010730 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b092      	sub	sp, #72	; 0x48
 8010734:	af02      	add	r7, sp, #8
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801073c:	2300      	movs	r3, #0
 801073e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010744:	3b14      	subs	r3, #20
 8010746:	2b00      	cmp	r3, #0
 8010748:	da00      	bge.n	801074c <ip4_frag+0x1c>
 801074a:	3307      	adds	r3, #7
 801074c:	10db      	asrs	r3, r3, #3
 801074e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010750:	2314      	movs	r3, #20
 8010752:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801075e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	f003 030f 	and.w	r3, r3, #15
 8010766:	009b      	lsls	r3, r3, #2
 8010768:	2b14      	cmp	r3, #20
 801076a:	d009      	beq.n	8010780 <ip4_frag+0x50>
 801076c:	4b7a      	ldr	r3, [pc, #488]	; (8010958 <ip4_frag+0x228>)
 801076e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8010772:	497a      	ldr	r1, [pc, #488]	; (801095c <ip4_frag+0x22c>)
 8010774:	487a      	ldr	r0, [pc, #488]	; (8010960 <ip4_frag+0x230>)
 8010776:	f000 fb13 	bl	8010da0 <iprintf>
 801077a:	f06f 0305 	mvn.w	r3, #5
 801077e:	e0e6      	b.n	801094e <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010782:	88db      	ldrh	r3, [r3, #6]
 8010784:	b29b      	uxth	r3, r3
 8010786:	4618      	mov	r0, r3
 8010788:	f7f6 ff8b 	bl	80076a2 <lwip_htons>
 801078c:	4603      	mov	r3, r0
 801078e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8010790:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010792:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010796:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8010798:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801079a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d009      	beq.n	80107b6 <ip4_frag+0x86>
 80107a2:	4b6d      	ldr	r3, [pc, #436]	; (8010958 <ip4_frag+0x228>)
 80107a4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80107a8:	496e      	ldr	r1, [pc, #440]	; (8010964 <ip4_frag+0x234>)
 80107aa:	486d      	ldr	r0, [pc, #436]	; (8010960 <ip4_frag+0x230>)
 80107ac:	f000 faf8 	bl	8010da0 <iprintf>
 80107b0:	f06f 0305 	mvn.w	r3, #5
 80107b4:	e0cb      	b.n	801094e <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	891b      	ldrh	r3, [r3, #8]
 80107ba:	3b14      	subs	r3, #20
 80107bc:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80107be:	e0bd      	b.n	801093c <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80107c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80107c2:	00da      	lsls	r2, r3, #3
 80107c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107c6:	4293      	cmp	r3, r2
 80107c8:	bfa8      	it	ge
 80107ca:	4613      	movge	r3, r2
 80107cc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80107ce:	2200      	movs	r2, #0
 80107d0:	2114      	movs	r1, #20
 80107d2:	2002      	movs	r0, #2
 80107d4:	f7f7 fd16 	bl	8008204 <pbuf_alloc>
 80107d8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80107da:	6a3b      	ldr	r3, [r7, #32]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f000 80b3 	beq.w	8010948 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	895b      	ldrh	r3, [r3, #10]
 80107e6:	2b13      	cmp	r3, #19
 80107e8:	d806      	bhi.n	80107f8 <ip4_frag+0xc8>
 80107ea:	4b5b      	ldr	r3, [pc, #364]	; (8010958 <ip4_frag+0x228>)
 80107ec:	f44f 7242 	mov.w	r2, #776	; 0x308
 80107f0:	495d      	ldr	r1, [pc, #372]	; (8010968 <ip4_frag+0x238>)
 80107f2:	485b      	ldr	r0, [pc, #364]	; (8010960 <ip4_frag+0x230>)
 80107f4:	f000 fad4 	bl	8010da0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	2214      	movs	r2, #20
 80107fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010800:	4618      	mov	r0, r3
 8010802:	f000 f9d7 	bl	8010bb4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010806:	6a3b      	ldr	r3, [r7, #32]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801080c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801080e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8010810:	e04f      	b.n	80108b2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	895a      	ldrh	r2, [r3, #10]
 8010816:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010818:	1ad3      	subs	r3, r2, r3
 801081a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801081c:	8b7a      	ldrh	r2, [r7, #26]
 801081e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010820:	4293      	cmp	r3, r2
 8010822:	bf28      	it	cs
 8010824:	4613      	movcs	r3, r2
 8010826:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010828:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801082a:	2b00      	cmp	r3, #0
 801082c:	d105      	bne.n	801083a <ip4_frag+0x10a>
        poff = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	60fb      	str	r3, [r7, #12]
        continue;
 8010838:	e03b      	b.n	80108b2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801083a:	f7ff ff21 	bl	8010680 <ip_frag_alloc_pbuf_custom_ref>
 801083e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d103      	bne.n	801084e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8010846:	6a38      	ldr	r0, [r7, #32]
 8010848:	f7f8 f854 	bl	80088f4 <pbuf_free>
        goto memerr;
 801084c:	e07d      	b.n	801094a <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801084e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010854:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010856:	4413      	add	r3, r2
 8010858:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801085a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801085c:	9201      	str	r2, [sp, #4]
 801085e:	9300      	str	r3, [sp, #0]
 8010860:	4603      	mov	r3, r0
 8010862:	2202      	movs	r2, #2
 8010864:	2004      	movs	r0, #4
 8010866:	f7f7 fe67 	bl	8008538 <pbuf_alloced_custom>
 801086a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d106      	bne.n	8010880 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010872:	6978      	ldr	r0, [r7, #20]
 8010874:	f7ff ff0c 	bl	8010690 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010878:	6a38      	ldr	r0, [r7, #32]
 801087a:	f7f8 f83b 	bl	80088f4 <pbuf_free>
        goto memerr;
 801087e:	e064      	b.n	801094a <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f7f8 f8e3 	bl	8008a4c <pbuf_ref>
      pcr->original = p;
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	68fa      	ldr	r2, [r7, #12]
 801088a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	4a37      	ldr	r2, [pc, #220]	; (801096c <ip4_frag+0x23c>)
 8010890:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010892:	6939      	ldr	r1, [r7, #16]
 8010894:	6a38      	ldr	r0, [r7, #32]
 8010896:	f7f8 f8fb 	bl	8008a90 <pbuf_cat>
      left_to_copy -= newpbuflen;
 801089a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801089c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801089e:	1ad3      	subs	r3, r2, r3
 80108a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80108a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d004      	beq.n	80108b2 <ip4_frag+0x182>
        poff = 0;
 80108a8:	2300      	movs	r3, #0
 80108aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80108b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d1ac      	bne.n	8010812 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80108b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80108ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108bc:	4413      	add	r3, r2
 80108be:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80108c4:	f1a3 0213 	sub.w	r2, r3, #19
 80108c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80108ca:	429a      	cmp	r2, r3
 80108cc:	bfcc      	ite	gt
 80108ce:	2301      	movgt	r3, #1
 80108d0:	2300      	movle	r3, #0
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80108d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80108d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80108dc:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d103      	bne.n	80108ec <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 80108e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80108e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80108ea:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80108ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7f6 fed7 	bl	80076a2 <lwip_htons>
 80108f4:	4603      	mov	r3, r0
 80108f6:	461a      	mov	r2, r3
 80108f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fa:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80108fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80108fe:	3314      	adds	r3, #20
 8010900:	b29b      	uxth	r3, r3
 8010902:	4618      	mov	r0, r3
 8010904:	f7f6 fecd 	bl	80076a2 <lwip_htons>
 8010908:	4603      	mov	r3, r0
 801090a:	461a      	mov	r2, r3
 801090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010912:	2200      	movs	r2, #0
 8010914:	729a      	strb	r2, [r3, #10]
 8010916:	2200      	movs	r2, #0
 8010918:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	695b      	ldr	r3, [r3, #20]
 801091e:	687a      	ldr	r2, [r7, #4]
 8010920:	6a39      	ldr	r1, [r7, #32]
 8010922:	68b8      	ldr	r0, [r7, #8]
 8010924:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010926:	6a38      	ldr	r0, [r7, #32]
 8010928:	f7f7 ffe4 	bl	80088f4 <pbuf_free>
    left -= fragsize;
 801092c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801092e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010930:	1ad3      	subs	r3, r2, r3
 8010932:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8010934:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010936:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8010938:	4413      	add	r3, r2
 801093a:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801093c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801093e:	2b00      	cmp	r3, #0
 8010940:	f47f af3e 	bne.w	80107c0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010944:	2300      	movs	r3, #0
 8010946:	e002      	b.n	801094e <ip4_frag+0x21e>
      goto memerr;
 8010948:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801094a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801094e:	4618      	mov	r0, r3
 8010950:	3740      	adds	r7, #64	; 0x40
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	08013e2c 	.word	0x08013e2c
 801095c:	08013fb8 	.word	0x08013fb8
 8010960:	08013e74 	.word	0x08013e74
 8010964:	08013fe0 	.word	0x08013fe0
 8010968:	08013ffc 	.word	0x08013ffc
 801096c:	080106c9 	.word	0x080106c9

08010970 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b086      	sub	sp, #24
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801097a:	230e      	movs	r3, #14
 801097c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	895b      	ldrh	r3, [r3, #10]
 8010982:	2b0e      	cmp	r3, #14
 8010984:	d977      	bls.n	8010a76 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	7b1a      	ldrb	r2, [r3, #12]
 8010990:	7b5b      	ldrb	r3, [r3, #13]
 8010992:	021b      	lsls	r3, r3, #8
 8010994:	4313      	orrs	r3, r2
 8010996:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	f003 0301 	and.w	r3, r3, #1
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d023      	beq.n	80109ec <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	d10f      	bne.n	80109cc <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	785b      	ldrb	r3, [r3, #1]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d11b      	bne.n	80109ec <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80109b8:	2b5e      	cmp	r3, #94	; 0x5e
 80109ba:	d117      	bne.n	80109ec <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	7b5b      	ldrb	r3, [r3, #13]
 80109c0:	f043 0310 	orr.w	r3, r3, #16
 80109c4:	b2da      	uxtb	r2, r3
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	735a      	strb	r2, [r3, #13]
 80109ca:	e00f      	b.n	80109ec <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	2206      	movs	r2, #6
 80109d0:	4931      	ldr	r1, [pc, #196]	; (8010a98 <ethernet_input+0x128>)
 80109d2:	4618      	mov	r0, r3
 80109d4:	f000 f8de 	bl	8010b94 <memcmp>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d106      	bne.n	80109ec <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	7b5b      	ldrb	r3, [r3, #13]
 80109e2:	f043 0308 	orr.w	r3, r3, #8
 80109e6:	b2da      	uxtb	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80109ec:	89fb      	ldrh	r3, [r7, #14]
 80109ee:	2b08      	cmp	r3, #8
 80109f0:	d003      	beq.n	80109fa <ethernet_input+0x8a>
 80109f2:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80109f6:	d01e      	beq.n	8010a36 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80109f8:	e046      	b.n	8010a88 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010a00:	f003 0308 	and.w	r3, r3, #8
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d038      	beq.n	8010a7a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	895b      	ldrh	r3, [r3, #10]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	db33      	blt.n	8010a7e <ethernet_input+0x10e>
 8010a16:	8afb      	ldrh	r3, [r7, #22]
 8010a18:	425b      	negs	r3, r3
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	b21b      	sxth	r3, r3
 8010a1e:	4619      	mov	r1, r3
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7f7 ff43 	bl	80088ac <pbuf_header>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d128      	bne.n	8010a7e <ethernet_input+0x10e>
        ip4_input(p, netif);
 8010a2c:	6839      	ldr	r1, [r7, #0]
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f7fe ff7a 	bl	800f928 <ip4_input>
      break;
 8010a34:	e01d      	b.n	8010a72 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010a3c:	f003 0308 	and.w	r3, r3, #8
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d01e      	beq.n	8010a82 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	895b      	ldrh	r3, [r3, #10]
 8010a48:	461a      	mov	r2, r3
 8010a4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	db19      	blt.n	8010a86 <ethernet_input+0x116>
 8010a52:	8afb      	ldrh	r3, [r7, #22]
 8010a54:	425b      	negs	r3, r3
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	b21b      	sxth	r3, r3
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f7f7 ff25 	bl	80088ac <pbuf_header>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d10e      	bne.n	8010a86 <ethernet_input+0x116>
        etharp_input(p, netif);
 8010a68:	6839      	ldr	r1, [r7, #0]
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f7fe f94a 	bl	800ed04 <etharp_input>
      break;
 8010a70:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010a72:	2300      	movs	r3, #0
 8010a74:	e00c      	b.n	8010a90 <ethernet_input+0x120>
    goto free_and_return;
 8010a76:	bf00      	nop
 8010a78:	e006      	b.n	8010a88 <ethernet_input+0x118>
        goto free_and_return;
 8010a7a:	bf00      	nop
 8010a7c:	e004      	b.n	8010a88 <ethernet_input+0x118>
        goto free_and_return;
 8010a7e:	bf00      	nop
 8010a80:	e002      	b.n	8010a88 <ethernet_input+0x118>
        goto free_and_return;
 8010a82:	bf00      	nop
 8010a84:	e000      	b.n	8010a88 <ethernet_input+0x118>
        goto free_and_return;
 8010a86:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f7f7 ff33 	bl	80088f4 <pbuf_free>
  return ERR_OK;
 8010a8e:	2300      	movs	r3, #0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3718      	adds	r7, #24
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	0801419c 	.word	0x0801419c

08010a9c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b086      	sub	sp, #24
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	607a      	str	r2, [r7, #4]
 8010aa8:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010aaa:	8c3b      	ldrh	r3, [r7, #32]
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7f6 fdf8 	bl	80076a2 <lwip_htons>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8010ab6:	210e      	movs	r1, #14
 8010ab8:	68b8      	ldr	r0, [r7, #8]
 8010aba:	f7f7 fef7 	bl	80088ac <pbuf_header>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d125      	bne.n	8010b10 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	8afa      	ldrh	r2, [r7, #22]
 8010ace:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	2206      	movs	r2, #6
 8010ad4:	6839      	ldr	r1, [r7, #0]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f000 f86c 	bl	8010bb4 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	3306      	adds	r3, #6
 8010ae0:	2206      	movs	r2, #6
 8010ae2:	6879      	ldr	r1, [r7, #4]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f000 f865 	bl	8010bb4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010af0:	2b06      	cmp	r3, #6
 8010af2:	d006      	beq.n	8010b02 <ethernet_output+0x66>
 8010af4:	4b0a      	ldr	r3, [pc, #40]	; (8010b20 <ethernet_output+0x84>)
 8010af6:	f240 122b 	movw	r2, #299	; 0x12b
 8010afa:	490a      	ldr	r1, [pc, #40]	; (8010b24 <ethernet_output+0x88>)
 8010afc:	480a      	ldr	r0, [pc, #40]	; (8010b28 <ethernet_output+0x8c>)
 8010afe:	f000 f94f 	bl	8010da0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	699b      	ldr	r3, [r3, #24]
 8010b06:	68b9      	ldr	r1, [r7, #8]
 8010b08:	68f8      	ldr	r0, [r7, #12]
 8010b0a:	4798      	blx	r3
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	e002      	b.n	8010b16 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010b10:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010b12:	f06f 0301 	mvn.w	r3, #1
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3718      	adds	r7, #24
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
 8010b1e:	bf00      	nop
 8010b20:	0801401c 	.word	0x0801401c
 8010b24:	08014054 	.word	0x08014054
 8010b28:	08014088 	.word	0x08014088

08010b2c <__libc_init_array>:
 8010b2c:	b570      	push	{r4, r5, r6, lr}
 8010b2e:	4d0d      	ldr	r5, [pc, #52]	; (8010b64 <__libc_init_array+0x38>)
 8010b30:	4c0d      	ldr	r4, [pc, #52]	; (8010b68 <__libc_init_array+0x3c>)
 8010b32:	1b64      	subs	r4, r4, r5
 8010b34:	10a4      	asrs	r4, r4, #2
 8010b36:	2600      	movs	r6, #0
 8010b38:	42a6      	cmp	r6, r4
 8010b3a:	d109      	bne.n	8010b50 <__libc_init_array+0x24>
 8010b3c:	4d0b      	ldr	r5, [pc, #44]	; (8010b6c <__libc_init_array+0x40>)
 8010b3e:	4c0c      	ldr	r4, [pc, #48]	; (8010b70 <__libc_init_array+0x44>)
 8010b40:	f001 fa2e 	bl	8011fa0 <_init>
 8010b44:	1b64      	subs	r4, r4, r5
 8010b46:	10a4      	asrs	r4, r4, #2
 8010b48:	2600      	movs	r6, #0
 8010b4a:	42a6      	cmp	r6, r4
 8010b4c:	d105      	bne.n	8010b5a <__libc_init_array+0x2e>
 8010b4e:	bd70      	pop	{r4, r5, r6, pc}
 8010b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b54:	4798      	blx	r3
 8010b56:	3601      	adds	r6, #1
 8010b58:	e7ee      	b.n	8010b38 <__libc_init_array+0xc>
 8010b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b5e:	4798      	blx	r3
 8010b60:	3601      	adds	r6, #1
 8010b62:	e7f2      	b.n	8010b4a <__libc_init_array+0x1e>
 8010b64:	08014350 	.word	0x08014350
 8010b68:	08014350 	.word	0x08014350
 8010b6c:	08014350 	.word	0x08014350
 8010b70:	08014354 	.word	0x08014354

08010b74 <malloc>:
 8010b74:	4b02      	ldr	r3, [pc, #8]	; (8010b80 <malloc+0xc>)
 8010b76:	4601      	mov	r1, r0
 8010b78:	6818      	ldr	r0, [r3, #0]
 8010b7a:	f000 b89d 	b.w	8010cb8 <_malloc_r>
 8010b7e:	bf00      	nop
 8010b80:	200000a4 	.word	0x200000a4

08010b84 <free>:
 8010b84:	4b02      	ldr	r3, [pc, #8]	; (8010b90 <free+0xc>)
 8010b86:	4601      	mov	r1, r0
 8010b88:	6818      	ldr	r0, [r3, #0]
 8010b8a:	f000 b829 	b.w	8010be0 <_free_r>
 8010b8e:	bf00      	nop
 8010b90:	200000a4 	.word	0x200000a4

08010b94 <memcmp>:
 8010b94:	b510      	push	{r4, lr}
 8010b96:	3901      	subs	r1, #1
 8010b98:	4402      	add	r2, r0
 8010b9a:	4290      	cmp	r0, r2
 8010b9c:	d101      	bne.n	8010ba2 <memcmp+0xe>
 8010b9e:	2000      	movs	r0, #0
 8010ba0:	e005      	b.n	8010bae <memcmp+0x1a>
 8010ba2:	7803      	ldrb	r3, [r0, #0]
 8010ba4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ba8:	42a3      	cmp	r3, r4
 8010baa:	d001      	beq.n	8010bb0 <memcmp+0x1c>
 8010bac:	1b18      	subs	r0, r3, r4
 8010bae:	bd10      	pop	{r4, pc}
 8010bb0:	3001      	adds	r0, #1
 8010bb2:	e7f2      	b.n	8010b9a <memcmp+0x6>

08010bb4 <memcpy>:
 8010bb4:	440a      	add	r2, r1
 8010bb6:	4291      	cmp	r1, r2
 8010bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8010bbc:	d100      	bne.n	8010bc0 <memcpy+0xc>
 8010bbe:	4770      	bx	lr
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010bca:	4291      	cmp	r1, r2
 8010bcc:	d1f9      	bne.n	8010bc2 <memcpy+0xe>
 8010bce:	bd10      	pop	{r4, pc}

08010bd0 <memset>:
 8010bd0:	4402      	add	r2, r0
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d100      	bne.n	8010bda <memset+0xa>
 8010bd8:	4770      	bx	lr
 8010bda:	f803 1b01 	strb.w	r1, [r3], #1
 8010bde:	e7f9      	b.n	8010bd4 <memset+0x4>

08010be0 <_free_r>:
 8010be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010be2:	2900      	cmp	r1, #0
 8010be4:	d044      	beq.n	8010c70 <_free_r+0x90>
 8010be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bea:	9001      	str	r0, [sp, #4]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f1a1 0404 	sub.w	r4, r1, #4
 8010bf2:	bfb8      	it	lt
 8010bf4:	18e4      	addlt	r4, r4, r3
 8010bf6:	f000 fa97 	bl	8011128 <__malloc_lock>
 8010bfa:	4a1e      	ldr	r2, [pc, #120]	; (8010c74 <_free_r+0x94>)
 8010bfc:	9801      	ldr	r0, [sp, #4]
 8010bfe:	6813      	ldr	r3, [r2, #0]
 8010c00:	b933      	cbnz	r3, 8010c10 <_free_r+0x30>
 8010c02:	6063      	str	r3, [r4, #4]
 8010c04:	6014      	str	r4, [r2, #0]
 8010c06:	b003      	add	sp, #12
 8010c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c0c:	f000 ba92 	b.w	8011134 <__malloc_unlock>
 8010c10:	42a3      	cmp	r3, r4
 8010c12:	d908      	bls.n	8010c26 <_free_r+0x46>
 8010c14:	6825      	ldr	r5, [r4, #0]
 8010c16:	1961      	adds	r1, r4, r5
 8010c18:	428b      	cmp	r3, r1
 8010c1a:	bf01      	itttt	eq
 8010c1c:	6819      	ldreq	r1, [r3, #0]
 8010c1e:	685b      	ldreq	r3, [r3, #4]
 8010c20:	1949      	addeq	r1, r1, r5
 8010c22:	6021      	streq	r1, [r4, #0]
 8010c24:	e7ed      	b.n	8010c02 <_free_r+0x22>
 8010c26:	461a      	mov	r2, r3
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	b10b      	cbz	r3, 8010c30 <_free_r+0x50>
 8010c2c:	42a3      	cmp	r3, r4
 8010c2e:	d9fa      	bls.n	8010c26 <_free_r+0x46>
 8010c30:	6811      	ldr	r1, [r2, #0]
 8010c32:	1855      	adds	r5, r2, r1
 8010c34:	42a5      	cmp	r5, r4
 8010c36:	d10b      	bne.n	8010c50 <_free_r+0x70>
 8010c38:	6824      	ldr	r4, [r4, #0]
 8010c3a:	4421      	add	r1, r4
 8010c3c:	1854      	adds	r4, r2, r1
 8010c3e:	42a3      	cmp	r3, r4
 8010c40:	6011      	str	r1, [r2, #0]
 8010c42:	d1e0      	bne.n	8010c06 <_free_r+0x26>
 8010c44:	681c      	ldr	r4, [r3, #0]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	6053      	str	r3, [r2, #4]
 8010c4a:	4421      	add	r1, r4
 8010c4c:	6011      	str	r1, [r2, #0]
 8010c4e:	e7da      	b.n	8010c06 <_free_r+0x26>
 8010c50:	d902      	bls.n	8010c58 <_free_r+0x78>
 8010c52:	230c      	movs	r3, #12
 8010c54:	6003      	str	r3, [r0, #0]
 8010c56:	e7d6      	b.n	8010c06 <_free_r+0x26>
 8010c58:	6825      	ldr	r5, [r4, #0]
 8010c5a:	1961      	adds	r1, r4, r5
 8010c5c:	428b      	cmp	r3, r1
 8010c5e:	bf04      	itt	eq
 8010c60:	6819      	ldreq	r1, [r3, #0]
 8010c62:	685b      	ldreq	r3, [r3, #4]
 8010c64:	6063      	str	r3, [r4, #4]
 8010c66:	bf04      	itt	eq
 8010c68:	1949      	addeq	r1, r1, r5
 8010c6a:	6021      	streq	r1, [r4, #0]
 8010c6c:	6054      	str	r4, [r2, #4]
 8010c6e:	e7ca      	b.n	8010c06 <_free_r+0x26>
 8010c70:	b003      	add	sp, #12
 8010c72:	bd30      	pop	{r4, r5, pc}
 8010c74:	20007148 	.word	0x20007148

08010c78 <sbrk_aligned>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	4e0e      	ldr	r6, [pc, #56]	; (8010cb4 <sbrk_aligned+0x3c>)
 8010c7c:	460c      	mov	r4, r1
 8010c7e:	6831      	ldr	r1, [r6, #0]
 8010c80:	4605      	mov	r5, r0
 8010c82:	b911      	cbnz	r1, 8010c8a <sbrk_aligned+0x12>
 8010c84:	f000 f8a4 	bl	8010dd0 <_sbrk_r>
 8010c88:	6030      	str	r0, [r6, #0]
 8010c8a:	4621      	mov	r1, r4
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	f000 f89f 	bl	8010dd0 <_sbrk_r>
 8010c92:	1c43      	adds	r3, r0, #1
 8010c94:	d00a      	beq.n	8010cac <sbrk_aligned+0x34>
 8010c96:	1cc4      	adds	r4, r0, #3
 8010c98:	f024 0403 	bic.w	r4, r4, #3
 8010c9c:	42a0      	cmp	r0, r4
 8010c9e:	d007      	beq.n	8010cb0 <sbrk_aligned+0x38>
 8010ca0:	1a21      	subs	r1, r4, r0
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	f000 f894 	bl	8010dd0 <_sbrk_r>
 8010ca8:	3001      	adds	r0, #1
 8010caa:	d101      	bne.n	8010cb0 <sbrk_aligned+0x38>
 8010cac:	f04f 34ff 	mov.w	r4, #4294967295
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	2000714c 	.word	0x2000714c

08010cb8 <_malloc_r>:
 8010cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cbc:	1ccd      	adds	r5, r1, #3
 8010cbe:	f025 0503 	bic.w	r5, r5, #3
 8010cc2:	3508      	adds	r5, #8
 8010cc4:	2d0c      	cmp	r5, #12
 8010cc6:	bf38      	it	cc
 8010cc8:	250c      	movcc	r5, #12
 8010cca:	2d00      	cmp	r5, #0
 8010ccc:	4607      	mov	r7, r0
 8010cce:	db01      	blt.n	8010cd4 <_malloc_r+0x1c>
 8010cd0:	42a9      	cmp	r1, r5
 8010cd2:	d905      	bls.n	8010ce0 <_malloc_r+0x28>
 8010cd4:	230c      	movs	r3, #12
 8010cd6:	603b      	str	r3, [r7, #0]
 8010cd8:	2600      	movs	r6, #0
 8010cda:	4630      	mov	r0, r6
 8010cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ce0:	4e2e      	ldr	r6, [pc, #184]	; (8010d9c <_malloc_r+0xe4>)
 8010ce2:	f000 fa21 	bl	8011128 <__malloc_lock>
 8010ce6:	6833      	ldr	r3, [r6, #0]
 8010ce8:	461c      	mov	r4, r3
 8010cea:	bb34      	cbnz	r4, 8010d3a <_malloc_r+0x82>
 8010cec:	4629      	mov	r1, r5
 8010cee:	4638      	mov	r0, r7
 8010cf0:	f7ff ffc2 	bl	8010c78 <sbrk_aligned>
 8010cf4:	1c43      	adds	r3, r0, #1
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	d14d      	bne.n	8010d96 <_malloc_r+0xde>
 8010cfa:	6834      	ldr	r4, [r6, #0]
 8010cfc:	4626      	mov	r6, r4
 8010cfe:	2e00      	cmp	r6, #0
 8010d00:	d140      	bne.n	8010d84 <_malloc_r+0xcc>
 8010d02:	6823      	ldr	r3, [r4, #0]
 8010d04:	4631      	mov	r1, r6
 8010d06:	4638      	mov	r0, r7
 8010d08:	eb04 0803 	add.w	r8, r4, r3
 8010d0c:	f000 f860 	bl	8010dd0 <_sbrk_r>
 8010d10:	4580      	cmp	r8, r0
 8010d12:	d13a      	bne.n	8010d8a <_malloc_r+0xd2>
 8010d14:	6821      	ldr	r1, [r4, #0]
 8010d16:	3503      	adds	r5, #3
 8010d18:	1a6d      	subs	r5, r5, r1
 8010d1a:	f025 0503 	bic.w	r5, r5, #3
 8010d1e:	3508      	adds	r5, #8
 8010d20:	2d0c      	cmp	r5, #12
 8010d22:	bf38      	it	cc
 8010d24:	250c      	movcc	r5, #12
 8010d26:	4629      	mov	r1, r5
 8010d28:	4638      	mov	r0, r7
 8010d2a:	f7ff ffa5 	bl	8010c78 <sbrk_aligned>
 8010d2e:	3001      	adds	r0, #1
 8010d30:	d02b      	beq.n	8010d8a <_malloc_r+0xd2>
 8010d32:	6823      	ldr	r3, [r4, #0]
 8010d34:	442b      	add	r3, r5
 8010d36:	6023      	str	r3, [r4, #0]
 8010d38:	e00e      	b.n	8010d58 <_malloc_r+0xa0>
 8010d3a:	6822      	ldr	r2, [r4, #0]
 8010d3c:	1b52      	subs	r2, r2, r5
 8010d3e:	d41e      	bmi.n	8010d7e <_malloc_r+0xc6>
 8010d40:	2a0b      	cmp	r2, #11
 8010d42:	d916      	bls.n	8010d72 <_malloc_r+0xba>
 8010d44:	1961      	adds	r1, r4, r5
 8010d46:	42a3      	cmp	r3, r4
 8010d48:	6025      	str	r5, [r4, #0]
 8010d4a:	bf18      	it	ne
 8010d4c:	6059      	strne	r1, [r3, #4]
 8010d4e:	6863      	ldr	r3, [r4, #4]
 8010d50:	bf08      	it	eq
 8010d52:	6031      	streq	r1, [r6, #0]
 8010d54:	5162      	str	r2, [r4, r5]
 8010d56:	604b      	str	r3, [r1, #4]
 8010d58:	4638      	mov	r0, r7
 8010d5a:	f104 060b 	add.w	r6, r4, #11
 8010d5e:	f000 f9e9 	bl	8011134 <__malloc_unlock>
 8010d62:	f026 0607 	bic.w	r6, r6, #7
 8010d66:	1d23      	adds	r3, r4, #4
 8010d68:	1af2      	subs	r2, r6, r3
 8010d6a:	d0b6      	beq.n	8010cda <_malloc_r+0x22>
 8010d6c:	1b9b      	subs	r3, r3, r6
 8010d6e:	50a3      	str	r3, [r4, r2]
 8010d70:	e7b3      	b.n	8010cda <_malloc_r+0x22>
 8010d72:	6862      	ldr	r2, [r4, #4]
 8010d74:	42a3      	cmp	r3, r4
 8010d76:	bf0c      	ite	eq
 8010d78:	6032      	streq	r2, [r6, #0]
 8010d7a:	605a      	strne	r2, [r3, #4]
 8010d7c:	e7ec      	b.n	8010d58 <_malloc_r+0xa0>
 8010d7e:	4623      	mov	r3, r4
 8010d80:	6864      	ldr	r4, [r4, #4]
 8010d82:	e7b2      	b.n	8010cea <_malloc_r+0x32>
 8010d84:	4634      	mov	r4, r6
 8010d86:	6876      	ldr	r6, [r6, #4]
 8010d88:	e7b9      	b.n	8010cfe <_malloc_r+0x46>
 8010d8a:	230c      	movs	r3, #12
 8010d8c:	603b      	str	r3, [r7, #0]
 8010d8e:	4638      	mov	r0, r7
 8010d90:	f000 f9d0 	bl	8011134 <__malloc_unlock>
 8010d94:	e7a1      	b.n	8010cda <_malloc_r+0x22>
 8010d96:	6025      	str	r5, [r4, #0]
 8010d98:	e7de      	b.n	8010d58 <_malloc_r+0xa0>
 8010d9a:	bf00      	nop
 8010d9c:	20007148 	.word	0x20007148

08010da0 <iprintf>:
 8010da0:	b40f      	push	{r0, r1, r2, r3}
 8010da2:	4b0a      	ldr	r3, [pc, #40]	; (8010dcc <iprintf+0x2c>)
 8010da4:	b513      	push	{r0, r1, r4, lr}
 8010da6:	681c      	ldr	r4, [r3, #0]
 8010da8:	b124      	cbz	r4, 8010db4 <iprintf+0x14>
 8010daa:	69a3      	ldr	r3, [r4, #24]
 8010dac:	b913      	cbnz	r3, 8010db4 <iprintf+0x14>
 8010dae:	4620      	mov	r0, r4
 8010db0:	f000 f91a 	bl	8010fe8 <__sinit>
 8010db4:	ab05      	add	r3, sp, #20
 8010db6:	9a04      	ldr	r2, [sp, #16]
 8010db8:	68a1      	ldr	r1, [r4, #8]
 8010dba:	9301      	str	r3, [sp, #4]
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f000 fb45 	bl	801144c <_vfiprintf_r>
 8010dc2:	b002      	add	sp, #8
 8010dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dc8:	b004      	add	sp, #16
 8010dca:	4770      	bx	lr
 8010dcc:	200000a4 	.word	0x200000a4

08010dd0 <_sbrk_r>:
 8010dd0:	b538      	push	{r3, r4, r5, lr}
 8010dd2:	4d06      	ldr	r5, [pc, #24]	; (8010dec <_sbrk_r+0x1c>)
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	4608      	mov	r0, r1
 8010dda:	602b      	str	r3, [r5, #0]
 8010ddc:	f7f0 fc08 	bl	80015f0 <_sbrk>
 8010de0:	1c43      	adds	r3, r0, #1
 8010de2:	d102      	bne.n	8010dea <_sbrk_r+0x1a>
 8010de4:	682b      	ldr	r3, [r5, #0]
 8010de6:	b103      	cbz	r3, 8010dea <_sbrk_r+0x1a>
 8010de8:	6023      	str	r3, [r4, #0]
 8010dea:	bd38      	pop	{r3, r4, r5, pc}
 8010dec:	20007150 	.word	0x20007150

08010df0 <siprintf>:
 8010df0:	b40e      	push	{r1, r2, r3}
 8010df2:	b500      	push	{lr}
 8010df4:	b09c      	sub	sp, #112	; 0x70
 8010df6:	ab1d      	add	r3, sp, #116	; 0x74
 8010df8:	9002      	str	r0, [sp, #8]
 8010dfa:	9006      	str	r0, [sp, #24]
 8010dfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e00:	4809      	ldr	r0, [pc, #36]	; (8010e28 <siprintf+0x38>)
 8010e02:	9107      	str	r1, [sp, #28]
 8010e04:	9104      	str	r1, [sp, #16]
 8010e06:	4909      	ldr	r1, [pc, #36]	; (8010e2c <siprintf+0x3c>)
 8010e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e0c:	9105      	str	r1, [sp, #20]
 8010e0e:	6800      	ldr	r0, [r0, #0]
 8010e10:	9301      	str	r3, [sp, #4]
 8010e12:	a902      	add	r1, sp, #8
 8010e14:	f000 f9f0 	bl	80111f8 <_svfiprintf_r>
 8010e18:	9b02      	ldr	r3, [sp, #8]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	701a      	strb	r2, [r3, #0]
 8010e1e:	b01c      	add	sp, #112	; 0x70
 8010e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e24:	b003      	add	sp, #12
 8010e26:	4770      	bx	lr
 8010e28:	200000a4 	.word	0x200000a4
 8010e2c:	ffff0208 	.word	0xffff0208

08010e30 <strcpy>:
 8010e30:	4603      	mov	r3, r0
 8010e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e36:	f803 2b01 	strb.w	r2, [r3], #1
 8010e3a:	2a00      	cmp	r2, #0
 8010e3c:	d1f9      	bne.n	8010e32 <strcpy+0x2>
 8010e3e:	4770      	bx	lr

08010e40 <_strtoul_l.constprop.0>:
 8010e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e44:	4f36      	ldr	r7, [pc, #216]	; (8010f20 <_strtoul_l.constprop.0+0xe0>)
 8010e46:	4686      	mov	lr, r0
 8010e48:	460d      	mov	r5, r1
 8010e4a:	4628      	mov	r0, r5
 8010e4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e50:	5de6      	ldrb	r6, [r4, r7]
 8010e52:	f016 0608 	ands.w	r6, r6, #8
 8010e56:	d1f8      	bne.n	8010e4a <_strtoul_l.constprop.0+0xa>
 8010e58:	2c2d      	cmp	r4, #45	; 0x2d
 8010e5a:	d12f      	bne.n	8010ebc <_strtoul_l.constprop.0+0x7c>
 8010e5c:	782c      	ldrb	r4, [r5, #0]
 8010e5e:	2601      	movs	r6, #1
 8010e60:	1c85      	adds	r5, r0, #2
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d057      	beq.n	8010f16 <_strtoul_l.constprop.0+0xd6>
 8010e66:	2b10      	cmp	r3, #16
 8010e68:	d109      	bne.n	8010e7e <_strtoul_l.constprop.0+0x3e>
 8010e6a:	2c30      	cmp	r4, #48	; 0x30
 8010e6c:	d107      	bne.n	8010e7e <_strtoul_l.constprop.0+0x3e>
 8010e6e:	7828      	ldrb	r0, [r5, #0]
 8010e70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010e74:	2858      	cmp	r0, #88	; 0x58
 8010e76:	d149      	bne.n	8010f0c <_strtoul_l.constprop.0+0xcc>
 8010e78:	786c      	ldrb	r4, [r5, #1]
 8010e7a:	2310      	movs	r3, #16
 8010e7c:	3502      	adds	r5, #2
 8010e7e:	f04f 38ff 	mov.w	r8, #4294967295
 8010e82:	2700      	movs	r7, #0
 8010e84:	fbb8 f8f3 	udiv	r8, r8, r3
 8010e88:	fb03 f908 	mul.w	r9, r3, r8
 8010e8c:	ea6f 0909 	mvn.w	r9, r9
 8010e90:	4638      	mov	r0, r7
 8010e92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010e96:	f1bc 0f09 	cmp.w	ip, #9
 8010e9a:	d814      	bhi.n	8010ec6 <_strtoul_l.constprop.0+0x86>
 8010e9c:	4664      	mov	r4, ip
 8010e9e:	42a3      	cmp	r3, r4
 8010ea0:	dd22      	ble.n	8010ee8 <_strtoul_l.constprop.0+0xa8>
 8010ea2:	2f00      	cmp	r7, #0
 8010ea4:	db1d      	blt.n	8010ee2 <_strtoul_l.constprop.0+0xa2>
 8010ea6:	4580      	cmp	r8, r0
 8010ea8:	d31b      	bcc.n	8010ee2 <_strtoul_l.constprop.0+0xa2>
 8010eaa:	d101      	bne.n	8010eb0 <_strtoul_l.constprop.0+0x70>
 8010eac:	45a1      	cmp	r9, r4
 8010eae:	db18      	blt.n	8010ee2 <_strtoul_l.constprop.0+0xa2>
 8010eb0:	fb00 4003 	mla	r0, r0, r3, r4
 8010eb4:	2701      	movs	r7, #1
 8010eb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010eba:	e7ea      	b.n	8010e92 <_strtoul_l.constprop.0+0x52>
 8010ebc:	2c2b      	cmp	r4, #43	; 0x2b
 8010ebe:	bf04      	itt	eq
 8010ec0:	782c      	ldrbeq	r4, [r5, #0]
 8010ec2:	1c85      	addeq	r5, r0, #2
 8010ec4:	e7cd      	b.n	8010e62 <_strtoul_l.constprop.0+0x22>
 8010ec6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010eca:	f1bc 0f19 	cmp.w	ip, #25
 8010ece:	d801      	bhi.n	8010ed4 <_strtoul_l.constprop.0+0x94>
 8010ed0:	3c37      	subs	r4, #55	; 0x37
 8010ed2:	e7e4      	b.n	8010e9e <_strtoul_l.constprop.0+0x5e>
 8010ed4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010ed8:	f1bc 0f19 	cmp.w	ip, #25
 8010edc:	d804      	bhi.n	8010ee8 <_strtoul_l.constprop.0+0xa8>
 8010ede:	3c57      	subs	r4, #87	; 0x57
 8010ee0:	e7dd      	b.n	8010e9e <_strtoul_l.constprop.0+0x5e>
 8010ee2:	f04f 37ff 	mov.w	r7, #4294967295
 8010ee6:	e7e6      	b.n	8010eb6 <_strtoul_l.constprop.0+0x76>
 8010ee8:	2f00      	cmp	r7, #0
 8010eea:	da07      	bge.n	8010efc <_strtoul_l.constprop.0+0xbc>
 8010eec:	2322      	movs	r3, #34	; 0x22
 8010eee:	f8ce 3000 	str.w	r3, [lr]
 8010ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef6:	b932      	cbnz	r2, 8010f06 <_strtoul_l.constprop.0+0xc6>
 8010ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010efc:	b106      	cbz	r6, 8010f00 <_strtoul_l.constprop.0+0xc0>
 8010efe:	4240      	negs	r0, r0
 8010f00:	2a00      	cmp	r2, #0
 8010f02:	d0f9      	beq.n	8010ef8 <_strtoul_l.constprop.0+0xb8>
 8010f04:	b107      	cbz	r7, 8010f08 <_strtoul_l.constprop.0+0xc8>
 8010f06:	1e69      	subs	r1, r5, #1
 8010f08:	6011      	str	r1, [r2, #0]
 8010f0a:	e7f5      	b.n	8010ef8 <_strtoul_l.constprop.0+0xb8>
 8010f0c:	2430      	movs	r4, #48	; 0x30
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1b5      	bne.n	8010e7e <_strtoul_l.constprop.0+0x3e>
 8010f12:	2308      	movs	r3, #8
 8010f14:	e7b3      	b.n	8010e7e <_strtoul_l.constprop.0+0x3e>
 8010f16:	2c30      	cmp	r4, #48	; 0x30
 8010f18:	d0a9      	beq.n	8010e6e <_strtoul_l.constprop.0+0x2e>
 8010f1a:	230a      	movs	r3, #10
 8010f1c:	e7af      	b.n	8010e7e <_strtoul_l.constprop.0+0x3e>
 8010f1e:	bf00      	nop
 8010f20:	080141b1 	.word	0x080141b1

08010f24 <strtoul>:
 8010f24:	4613      	mov	r3, r2
 8010f26:	460a      	mov	r2, r1
 8010f28:	4601      	mov	r1, r0
 8010f2a:	4802      	ldr	r0, [pc, #8]	; (8010f34 <strtoul+0x10>)
 8010f2c:	6800      	ldr	r0, [r0, #0]
 8010f2e:	f7ff bf87 	b.w	8010e40 <_strtoul_l.constprop.0>
 8010f32:	bf00      	nop
 8010f34:	200000a4 	.word	0x200000a4

08010f38 <std>:
 8010f38:	2300      	movs	r3, #0
 8010f3a:	b510      	push	{r4, lr}
 8010f3c:	4604      	mov	r4, r0
 8010f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8010f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f46:	6083      	str	r3, [r0, #8]
 8010f48:	8181      	strh	r1, [r0, #12]
 8010f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8010f4c:	81c2      	strh	r2, [r0, #14]
 8010f4e:	6183      	str	r3, [r0, #24]
 8010f50:	4619      	mov	r1, r3
 8010f52:	2208      	movs	r2, #8
 8010f54:	305c      	adds	r0, #92	; 0x5c
 8010f56:	f7ff fe3b 	bl	8010bd0 <memset>
 8010f5a:	4b05      	ldr	r3, [pc, #20]	; (8010f70 <std+0x38>)
 8010f5c:	6263      	str	r3, [r4, #36]	; 0x24
 8010f5e:	4b05      	ldr	r3, [pc, #20]	; (8010f74 <std+0x3c>)
 8010f60:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f62:	4b05      	ldr	r3, [pc, #20]	; (8010f78 <std+0x40>)
 8010f64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f66:	4b05      	ldr	r3, [pc, #20]	; (8010f7c <std+0x44>)
 8010f68:	6224      	str	r4, [r4, #32]
 8010f6a:	6323      	str	r3, [r4, #48]	; 0x30
 8010f6c:	bd10      	pop	{r4, pc}
 8010f6e:	bf00      	nop
 8010f70:	080119d5 	.word	0x080119d5
 8010f74:	080119f7 	.word	0x080119f7
 8010f78:	08011a2f 	.word	0x08011a2f
 8010f7c:	08011a53 	.word	0x08011a53

08010f80 <_cleanup_r>:
 8010f80:	4901      	ldr	r1, [pc, #4]	; (8010f88 <_cleanup_r+0x8>)
 8010f82:	f000 b8af 	b.w	80110e4 <_fwalk_reent>
 8010f86:	bf00      	nop
 8010f88:	08011d2d 	.word	0x08011d2d

08010f8c <__sfmoreglue>:
 8010f8c:	b570      	push	{r4, r5, r6, lr}
 8010f8e:	2268      	movs	r2, #104	; 0x68
 8010f90:	1e4d      	subs	r5, r1, #1
 8010f92:	4355      	muls	r5, r2
 8010f94:	460e      	mov	r6, r1
 8010f96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010f9a:	f7ff fe8d 	bl	8010cb8 <_malloc_r>
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	b140      	cbz	r0, 8010fb4 <__sfmoreglue+0x28>
 8010fa2:	2100      	movs	r1, #0
 8010fa4:	e9c0 1600 	strd	r1, r6, [r0]
 8010fa8:	300c      	adds	r0, #12
 8010faa:	60a0      	str	r0, [r4, #8]
 8010fac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010fb0:	f7ff fe0e 	bl	8010bd0 <memset>
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	bd70      	pop	{r4, r5, r6, pc}

08010fb8 <__sfp_lock_acquire>:
 8010fb8:	4801      	ldr	r0, [pc, #4]	; (8010fc0 <__sfp_lock_acquire+0x8>)
 8010fba:	f000 b8b3 	b.w	8011124 <__retarget_lock_acquire_recursive>
 8010fbe:	bf00      	nop
 8010fc0:	20007155 	.word	0x20007155

08010fc4 <__sfp_lock_release>:
 8010fc4:	4801      	ldr	r0, [pc, #4]	; (8010fcc <__sfp_lock_release+0x8>)
 8010fc6:	f000 b8ae 	b.w	8011126 <__retarget_lock_release_recursive>
 8010fca:	bf00      	nop
 8010fcc:	20007155 	.word	0x20007155

08010fd0 <__sinit_lock_acquire>:
 8010fd0:	4801      	ldr	r0, [pc, #4]	; (8010fd8 <__sinit_lock_acquire+0x8>)
 8010fd2:	f000 b8a7 	b.w	8011124 <__retarget_lock_acquire_recursive>
 8010fd6:	bf00      	nop
 8010fd8:	20007156 	.word	0x20007156

08010fdc <__sinit_lock_release>:
 8010fdc:	4801      	ldr	r0, [pc, #4]	; (8010fe4 <__sinit_lock_release+0x8>)
 8010fde:	f000 b8a2 	b.w	8011126 <__retarget_lock_release_recursive>
 8010fe2:	bf00      	nop
 8010fe4:	20007156 	.word	0x20007156

08010fe8 <__sinit>:
 8010fe8:	b510      	push	{r4, lr}
 8010fea:	4604      	mov	r4, r0
 8010fec:	f7ff fff0 	bl	8010fd0 <__sinit_lock_acquire>
 8010ff0:	69a3      	ldr	r3, [r4, #24]
 8010ff2:	b11b      	cbz	r3, 8010ffc <__sinit+0x14>
 8010ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ff8:	f7ff bff0 	b.w	8010fdc <__sinit_lock_release>
 8010ffc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011000:	6523      	str	r3, [r4, #80]	; 0x50
 8011002:	4b13      	ldr	r3, [pc, #76]	; (8011050 <__sinit+0x68>)
 8011004:	4a13      	ldr	r2, [pc, #76]	; (8011054 <__sinit+0x6c>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	62a2      	str	r2, [r4, #40]	; 0x28
 801100a:	42a3      	cmp	r3, r4
 801100c:	bf04      	itt	eq
 801100e:	2301      	moveq	r3, #1
 8011010:	61a3      	streq	r3, [r4, #24]
 8011012:	4620      	mov	r0, r4
 8011014:	f000 f820 	bl	8011058 <__sfp>
 8011018:	6060      	str	r0, [r4, #4]
 801101a:	4620      	mov	r0, r4
 801101c:	f000 f81c 	bl	8011058 <__sfp>
 8011020:	60a0      	str	r0, [r4, #8]
 8011022:	4620      	mov	r0, r4
 8011024:	f000 f818 	bl	8011058 <__sfp>
 8011028:	2200      	movs	r2, #0
 801102a:	60e0      	str	r0, [r4, #12]
 801102c:	2104      	movs	r1, #4
 801102e:	6860      	ldr	r0, [r4, #4]
 8011030:	f7ff ff82 	bl	8010f38 <std>
 8011034:	68a0      	ldr	r0, [r4, #8]
 8011036:	2201      	movs	r2, #1
 8011038:	2109      	movs	r1, #9
 801103a:	f7ff ff7d 	bl	8010f38 <std>
 801103e:	68e0      	ldr	r0, [r4, #12]
 8011040:	2202      	movs	r2, #2
 8011042:	2112      	movs	r1, #18
 8011044:	f7ff ff78 	bl	8010f38 <std>
 8011048:	2301      	movs	r3, #1
 801104a:	61a3      	str	r3, [r4, #24]
 801104c:	e7d2      	b.n	8010ff4 <__sinit+0xc>
 801104e:	bf00      	nop
 8011050:	080141ac 	.word	0x080141ac
 8011054:	08010f81 	.word	0x08010f81

08011058 <__sfp>:
 8011058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801105a:	4607      	mov	r7, r0
 801105c:	f7ff ffac 	bl	8010fb8 <__sfp_lock_acquire>
 8011060:	4b1e      	ldr	r3, [pc, #120]	; (80110dc <__sfp+0x84>)
 8011062:	681e      	ldr	r6, [r3, #0]
 8011064:	69b3      	ldr	r3, [r6, #24]
 8011066:	b913      	cbnz	r3, 801106e <__sfp+0x16>
 8011068:	4630      	mov	r0, r6
 801106a:	f7ff ffbd 	bl	8010fe8 <__sinit>
 801106e:	3648      	adds	r6, #72	; 0x48
 8011070:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011074:	3b01      	subs	r3, #1
 8011076:	d503      	bpl.n	8011080 <__sfp+0x28>
 8011078:	6833      	ldr	r3, [r6, #0]
 801107a:	b30b      	cbz	r3, 80110c0 <__sfp+0x68>
 801107c:	6836      	ldr	r6, [r6, #0]
 801107e:	e7f7      	b.n	8011070 <__sfp+0x18>
 8011080:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011084:	b9d5      	cbnz	r5, 80110bc <__sfp+0x64>
 8011086:	4b16      	ldr	r3, [pc, #88]	; (80110e0 <__sfp+0x88>)
 8011088:	60e3      	str	r3, [r4, #12]
 801108a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801108e:	6665      	str	r5, [r4, #100]	; 0x64
 8011090:	f000 f847 	bl	8011122 <__retarget_lock_init_recursive>
 8011094:	f7ff ff96 	bl	8010fc4 <__sfp_lock_release>
 8011098:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801109c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80110a0:	6025      	str	r5, [r4, #0]
 80110a2:	61a5      	str	r5, [r4, #24]
 80110a4:	2208      	movs	r2, #8
 80110a6:	4629      	mov	r1, r5
 80110a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80110ac:	f7ff fd90 	bl	8010bd0 <memset>
 80110b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80110b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80110b8:	4620      	mov	r0, r4
 80110ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110bc:	3468      	adds	r4, #104	; 0x68
 80110be:	e7d9      	b.n	8011074 <__sfp+0x1c>
 80110c0:	2104      	movs	r1, #4
 80110c2:	4638      	mov	r0, r7
 80110c4:	f7ff ff62 	bl	8010f8c <__sfmoreglue>
 80110c8:	4604      	mov	r4, r0
 80110ca:	6030      	str	r0, [r6, #0]
 80110cc:	2800      	cmp	r0, #0
 80110ce:	d1d5      	bne.n	801107c <__sfp+0x24>
 80110d0:	f7ff ff78 	bl	8010fc4 <__sfp_lock_release>
 80110d4:	230c      	movs	r3, #12
 80110d6:	603b      	str	r3, [r7, #0]
 80110d8:	e7ee      	b.n	80110b8 <__sfp+0x60>
 80110da:	bf00      	nop
 80110dc:	080141ac 	.word	0x080141ac
 80110e0:	ffff0001 	.word	0xffff0001

080110e4 <_fwalk_reent>:
 80110e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110e8:	4606      	mov	r6, r0
 80110ea:	4688      	mov	r8, r1
 80110ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80110f0:	2700      	movs	r7, #0
 80110f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110f6:	f1b9 0901 	subs.w	r9, r9, #1
 80110fa:	d505      	bpl.n	8011108 <_fwalk_reent+0x24>
 80110fc:	6824      	ldr	r4, [r4, #0]
 80110fe:	2c00      	cmp	r4, #0
 8011100:	d1f7      	bne.n	80110f2 <_fwalk_reent+0xe>
 8011102:	4638      	mov	r0, r7
 8011104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011108:	89ab      	ldrh	r3, [r5, #12]
 801110a:	2b01      	cmp	r3, #1
 801110c:	d907      	bls.n	801111e <_fwalk_reent+0x3a>
 801110e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011112:	3301      	adds	r3, #1
 8011114:	d003      	beq.n	801111e <_fwalk_reent+0x3a>
 8011116:	4629      	mov	r1, r5
 8011118:	4630      	mov	r0, r6
 801111a:	47c0      	blx	r8
 801111c:	4307      	orrs	r7, r0
 801111e:	3568      	adds	r5, #104	; 0x68
 8011120:	e7e9      	b.n	80110f6 <_fwalk_reent+0x12>

08011122 <__retarget_lock_init_recursive>:
 8011122:	4770      	bx	lr

08011124 <__retarget_lock_acquire_recursive>:
 8011124:	4770      	bx	lr

08011126 <__retarget_lock_release_recursive>:
 8011126:	4770      	bx	lr

08011128 <__malloc_lock>:
 8011128:	4801      	ldr	r0, [pc, #4]	; (8011130 <__malloc_lock+0x8>)
 801112a:	f7ff bffb 	b.w	8011124 <__retarget_lock_acquire_recursive>
 801112e:	bf00      	nop
 8011130:	20007154 	.word	0x20007154

08011134 <__malloc_unlock>:
 8011134:	4801      	ldr	r0, [pc, #4]	; (801113c <__malloc_unlock+0x8>)
 8011136:	f7ff bff6 	b.w	8011126 <__retarget_lock_release_recursive>
 801113a:	bf00      	nop
 801113c:	20007154 	.word	0x20007154

08011140 <__ssputs_r>:
 8011140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011144:	688e      	ldr	r6, [r1, #8]
 8011146:	429e      	cmp	r6, r3
 8011148:	4682      	mov	sl, r0
 801114a:	460c      	mov	r4, r1
 801114c:	4690      	mov	r8, r2
 801114e:	461f      	mov	r7, r3
 8011150:	d838      	bhi.n	80111c4 <__ssputs_r+0x84>
 8011152:	898a      	ldrh	r2, [r1, #12]
 8011154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011158:	d032      	beq.n	80111c0 <__ssputs_r+0x80>
 801115a:	6825      	ldr	r5, [r4, #0]
 801115c:	6909      	ldr	r1, [r1, #16]
 801115e:	eba5 0901 	sub.w	r9, r5, r1
 8011162:	6965      	ldr	r5, [r4, #20]
 8011164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801116c:	3301      	adds	r3, #1
 801116e:	444b      	add	r3, r9
 8011170:	106d      	asrs	r5, r5, #1
 8011172:	429d      	cmp	r5, r3
 8011174:	bf38      	it	cc
 8011176:	461d      	movcc	r5, r3
 8011178:	0553      	lsls	r3, r2, #21
 801117a:	d531      	bpl.n	80111e0 <__ssputs_r+0xa0>
 801117c:	4629      	mov	r1, r5
 801117e:	f7ff fd9b 	bl	8010cb8 <_malloc_r>
 8011182:	4606      	mov	r6, r0
 8011184:	b950      	cbnz	r0, 801119c <__ssputs_r+0x5c>
 8011186:	230c      	movs	r3, #12
 8011188:	f8ca 3000 	str.w	r3, [sl]
 801118c:	89a3      	ldrh	r3, [r4, #12]
 801118e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011192:	81a3      	strh	r3, [r4, #12]
 8011194:	f04f 30ff 	mov.w	r0, #4294967295
 8011198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801119c:	6921      	ldr	r1, [r4, #16]
 801119e:	464a      	mov	r2, r9
 80111a0:	f7ff fd08 	bl	8010bb4 <memcpy>
 80111a4:	89a3      	ldrh	r3, [r4, #12]
 80111a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80111aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111ae:	81a3      	strh	r3, [r4, #12]
 80111b0:	6126      	str	r6, [r4, #16]
 80111b2:	6165      	str	r5, [r4, #20]
 80111b4:	444e      	add	r6, r9
 80111b6:	eba5 0509 	sub.w	r5, r5, r9
 80111ba:	6026      	str	r6, [r4, #0]
 80111bc:	60a5      	str	r5, [r4, #8]
 80111be:	463e      	mov	r6, r7
 80111c0:	42be      	cmp	r6, r7
 80111c2:	d900      	bls.n	80111c6 <__ssputs_r+0x86>
 80111c4:	463e      	mov	r6, r7
 80111c6:	6820      	ldr	r0, [r4, #0]
 80111c8:	4632      	mov	r2, r6
 80111ca:	4641      	mov	r1, r8
 80111cc:	f000 fe62 	bl	8011e94 <memmove>
 80111d0:	68a3      	ldr	r3, [r4, #8]
 80111d2:	1b9b      	subs	r3, r3, r6
 80111d4:	60a3      	str	r3, [r4, #8]
 80111d6:	6823      	ldr	r3, [r4, #0]
 80111d8:	4433      	add	r3, r6
 80111da:	6023      	str	r3, [r4, #0]
 80111dc:	2000      	movs	r0, #0
 80111de:	e7db      	b.n	8011198 <__ssputs_r+0x58>
 80111e0:	462a      	mov	r2, r5
 80111e2:	f000 fe71 	bl	8011ec8 <_realloc_r>
 80111e6:	4606      	mov	r6, r0
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d1e1      	bne.n	80111b0 <__ssputs_r+0x70>
 80111ec:	6921      	ldr	r1, [r4, #16]
 80111ee:	4650      	mov	r0, sl
 80111f0:	f7ff fcf6 	bl	8010be0 <_free_r>
 80111f4:	e7c7      	b.n	8011186 <__ssputs_r+0x46>
	...

080111f8 <_svfiprintf_r>:
 80111f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111fc:	4698      	mov	r8, r3
 80111fe:	898b      	ldrh	r3, [r1, #12]
 8011200:	061b      	lsls	r3, r3, #24
 8011202:	b09d      	sub	sp, #116	; 0x74
 8011204:	4607      	mov	r7, r0
 8011206:	460d      	mov	r5, r1
 8011208:	4614      	mov	r4, r2
 801120a:	d50e      	bpl.n	801122a <_svfiprintf_r+0x32>
 801120c:	690b      	ldr	r3, [r1, #16]
 801120e:	b963      	cbnz	r3, 801122a <_svfiprintf_r+0x32>
 8011210:	2140      	movs	r1, #64	; 0x40
 8011212:	f7ff fd51 	bl	8010cb8 <_malloc_r>
 8011216:	6028      	str	r0, [r5, #0]
 8011218:	6128      	str	r0, [r5, #16]
 801121a:	b920      	cbnz	r0, 8011226 <_svfiprintf_r+0x2e>
 801121c:	230c      	movs	r3, #12
 801121e:	603b      	str	r3, [r7, #0]
 8011220:	f04f 30ff 	mov.w	r0, #4294967295
 8011224:	e0d1      	b.n	80113ca <_svfiprintf_r+0x1d2>
 8011226:	2340      	movs	r3, #64	; 0x40
 8011228:	616b      	str	r3, [r5, #20]
 801122a:	2300      	movs	r3, #0
 801122c:	9309      	str	r3, [sp, #36]	; 0x24
 801122e:	2320      	movs	r3, #32
 8011230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011234:	f8cd 800c 	str.w	r8, [sp, #12]
 8011238:	2330      	movs	r3, #48	; 0x30
 801123a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80113e4 <_svfiprintf_r+0x1ec>
 801123e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011242:	f04f 0901 	mov.w	r9, #1
 8011246:	4623      	mov	r3, r4
 8011248:	469a      	mov	sl, r3
 801124a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801124e:	b10a      	cbz	r2, 8011254 <_svfiprintf_r+0x5c>
 8011250:	2a25      	cmp	r2, #37	; 0x25
 8011252:	d1f9      	bne.n	8011248 <_svfiprintf_r+0x50>
 8011254:	ebba 0b04 	subs.w	fp, sl, r4
 8011258:	d00b      	beq.n	8011272 <_svfiprintf_r+0x7a>
 801125a:	465b      	mov	r3, fp
 801125c:	4622      	mov	r2, r4
 801125e:	4629      	mov	r1, r5
 8011260:	4638      	mov	r0, r7
 8011262:	f7ff ff6d 	bl	8011140 <__ssputs_r>
 8011266:	3001      	adds	r0, #1
 8011268:	f000 80aa 	beq.w	80113c0 <_svfiprintf_r+0x1c8>
 801126c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801126e:	445a      	add	r2, fp
 8011270:	9209      	str	r2, [sp, #36]	; 0x24
 8011272:	f89a 3000 	ldrb.w	r3, [sl]
 8011276:	2b00      	cmp	r3, #0
 8011278:	f000 80a2 	beq.w	80113c0 <_svfiprintf_r+0x1c8>
 801127c:	2300      	movs	r3, #0
 801127e:	f04f 32ff 	mov.w	r2, #4294967295
 8011282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011286:	f10a 0a01 	add.w	sl, sl, #1
 801128a:	9304      	str	r3, [sp, #16]
 801128c:	9307      	str	r3, [sp, #28]
 801128e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011292:	931a      	str	r3, [sp, #104]	; 0x68
 8011294:	4654      	mov	r4, sl
 8011296:	2205      	movs	r2, #5
 8011298:	f814 1b01 	ldrb.w	r1, [r4], #1
 801129c:	4851      	ldr	r0, [pc, #324]	; (80113e4 <_svfiprintf_r+0x1ec>)
 801129e:	f7ee ffbf 	bl	8000220 <memchr>
 80112a2:	9a04      	ldr	r2, [sp, #16]
 80112a4:	b9d8      	cbnz	r0, 80112de <_svfiprintf_r+0xe6>
 80112a6:	06d0      	lsls	r0, r2, #27
 80112a8:	bf44      	itt	mi
 80112aa:	2320      	movmi	r3, #32
 80112ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112b0:	0711      	lsls	r1, r2, #28
 80112b2:	bf44      	itt	mi
 80112b4:	232b      	movmi	r3, #43	; 0x2b
 80112b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112ba:	f89a 3000 	ldrb.w	r3, [sl]
 80112be:	2b2a      	cmp	r3, #42	; 0x2a
 80112c0:	d015      	beq.n	80112ee <_svfiprintf_r+0xf6>
 80112c2:	9a07      	ldr	r2, [sp, #28]
 80112c4:	4654      	mov	r4, sl
 80112c6:	2000      	movs	r0, #0
 80112c8:	f04f 0c0a 	mov.w	ip, #10
 80112cc:	4621      	mov	r1, r4
 80112ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112d2:	3b30      	subs	r3, #48	; 0x30
 80112d4:	2b09      	cmp	r3, #9
 80112d6:	d94e      	bls.n	8011376 <_svfiprintf_r+0x17e>
 80112d8:	b1b0      	cbz	r0, 8011308 <_svfiprintf_r+0x110>
 80112da:	9207      	str	r2, [sp, #28]
 80112dc:	e014      	b.n	8011308 <_svfiprintf_r+0x110>
 80112de:	eba0 0308 	sub.w	r3, r0, r8
 80112e2:	fa09 f303 	lsl.w	r3, r9, r3
 80112e6:	4313      	orrs	r3, r2
 80112e8:	9304      	str	r3, [sp, #16]
 80112ea:	46a2      	mov	sl, r4
 80112ec:	e7d2      	b.n	8011294 <_svfiprintf_r+0x9c>
 80112ee:	9b03      	ldr	r3, [sp, #12]
 80112f0:	1d19      	adds	r1, r3, #4
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	9103      	str	r1, [sp, #12]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	bfbb      	ittet	lt
 80112fa:	425b      	neglt	r3, r3
 80112fc:	f042 0202 	orrlt.w	r2, r2, #2
 8011300:	9307      	strge	r3, [sp, #28]
 8011302:	9307      	strlt	r3, [sp, #28]
 8011304:	bfb8      	it	lt
 8011306:	9204      	strlt	r2, [sp, #16]
 8011308:	7823      	ldrb	r3, [r4, #0]
 801130a:	2b2e      	cmp	r3, #46	; 0x2e
 801130c:	d10c      	bne.n	8011328 <_svfiprintf_r+0x130>
 801130e:	7863      	ldrb	r3, [r4, #1]
 8011310:	2b2a      	cmp	r3, #42	; 0x2a
 8011312:	d135      	bne.n	8011380 <_svfiprintf_r+0x188>
 8011314:	9b03      	ldr	r3, [sp, #12]
 8011316:	1d1a      	adds	r2, r3, #4
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	9203      	str	r2, [sp, #12]
 801131c:	2b00      	cmp	r3, #0
 801131e:	bfb8      	it	lt
 8011320:	f04f 33ff 	movlt.w	r3, #4294967295
 8011324:	3402      	adds	r4, #2
 8011326:	9305      	str	r3, [sp, #20]
 8011328:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80113f4 <_svfiprintf_r+0x1fc>
 801132c:	7821      	ldrb	r1, [r4, #0]
 801132e:	2203      	movs	r2, #3
 8011330:	4650      	mov	r0, sl
 8011332:	f7ee ff75 	bl	8000220 <memchr>
 8011336:	b140      	cbz	r0, 801134a <_svfiprintf_r+0x152>
 8011338:	2340      	movs	r3, #64	; 0x40
 801133a:	eba0 000a 	sub.w	r0, r0, sl
 801133e:	fa03 f000 	lsl.w	r0, r3, r0
 8011342:	9b04      	ldr	r3, [sp, #16]
 8011344:	4303      	orrs	r3, r0
 8011346:	3401      	adds	r4, #1
 8011348:	9304      	str	r3, [sp, #16]
 801134a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801134e:	4826      	ldr	r0, [pc, #152]	; (80113e8 <_svfiprintf_r+0x1f0>)
 8011350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011354:	2206      	movs	r2, #6
 8011356:	f7ee ff63 	bl	8000220 <memchr>
 801135a:	2800      	cmp	r0, #0
 801135c:	d038      	beq.n	80113d0 <_svfiprintf_r+0x1d8>
 801135e:	4b23      	ldr	r3, [pc, #140]	; (80113ec <_svfiprintf_r+0x1f4>)
 8011360:	bb1b      	cbnz	r3, 80113aa <_svfiprintf_r+0x1b2>
 8011362:	9b03      	ldr	r3, [sp, #12]
 8011364:	3307      	adds	r3, #7
 8011366:	f023 0307 	bic.w	r3, r3, #7
 801136a:	3308      	adds	r3, #8
 801136c:	9303      	str	r3, [sp, #12]
 801136e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011370:	4433      	add	r3, r6
 8011372:	9309      	str	r3, [sp, #36]	; 0x24
 8011374:	e767      	b.n	8011246 <_svfiprintf_r+0x4e>
 8011376:	fb0c 3202 	mla	r2, ip, r2, r3
 801137a:	460c      	mov	r4, r1
 801137c:	2001      	movs	r0, #1
 801137e:	e7a5      	b.n	80112cc <_svfiprintf_r+0xd4>
 8011380:	2300      	movs	r3, #0
 8011382:	3401      	adds	r4, #1
 8011384:	9305      	str	r3, [sp, #20]
 8011386:	4619      	mov	r1, r3
 8011388:	f04f 0c0a 	mov.w	ip, #10
 801138c:	4620      	mov	r0, r4
 801138e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011392:	3a30      	subs	r2, #48	; 0x30
 8011394:	2a09      	cmp	r2, #9
 8011396:	d903      	bls.n	80113a0 <_svfiprintf_r+0x1a8>
 8011398:	2b00      	cmp	r3, #0
 801139a:	d0c5      	beq.n	8011328 <_svfiprintf_r+0x130>
 801139c:	9105      	str	r1, [sp, #20]
 801139e:	e7c3      	b.n	8011328 <_svfiprintf_r+0x130>
 80113a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80113a4:	4604      	mov	r4, r0
 80113a6:	2301      	movs	r3, #1
 80113a8:	e7f0      	b.n	801138c <_svfiprintf_r+0x194>
 80113aa:	ab03      	add	r3, sp, #12
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	462a      	mov	r2, r5
 80113b0:	4b0f      	ldr	r3, [pc, #60]	; (80113f0 <_svfiprintf_r+0x1f8>)
 80113b2:	a904      	add	r1, sp, #16
 80113b4:	4638      	mov	r0, r7
 80113b6:	f3af 8000 	nop.w
 80113ba:	1c42      	adds	r2, r0, #1
 80113bc:	4606      	mov	r6, r0
 80113be:	d1d6      	bne.n	801136e <_svfiprintf_r+0x176>
 80113c0:	89ab      	ldrh	r3, [r5, #12]
 80113c2:	065b      	lsls	r3, r3, #25
 80113c4:	f53f af2c 	bmi.w	8011220 <_svfiprintf_r+0x28>
 80113c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113ca:	b01d      	add	sp, #116	; 0x74
 80113cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d0:	ab03      	add	r3, sp, #12
 80113d2:	9300      	str	r3, [sp, #0]
 80113d4:	462a      	mov	r2, r5
 80113d6:	4b06      	ldr	r3, [pc, #24]	; (80113f0 <_svfiprintf_r+0x1f8>)
 80113d8:	a904      	add	r1, sp, #16
 80113da:	4638      	mov	r0, r7
 80113dc:	f000 f9d4 	bl	8011788 <_printf_i>
 80113e0:	e7eb      	b.n	80113ba <_svfiprintf_r+0x1c2>
 80113e2:	bf00      	nop
 80113e4:	08014314 	.word	0x08014314
 80113e8:	0801431e 	.word	0x0801431e
 80113ec:	00000000 	.word	0x00000000
 80113f0:	08011141 	.word	0x08011141
 80113f4:	0801431a 	.word	0x0801431a

080113f8 <__sfputc_r>:
 80113f8:	6893      	ldr	r3, [r2, #8]
 80113fa:	3b01      	subs	r3, #1
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	b410      	push	{r4}
 8011400:	6093      	str	r3, [r2, #8]
 8011402:	da08      	bge.n	8011416 <__sfputc_r+0x1e>
 8011404:	6994      	ldr	r4, [r2, #24]
 8011406:	42a3      	cmp	r3, r4
 8011408:	db01      	blt.n	801140e <__sfputc_r+0x16>
 801140a:	290a      	cmp	r1, #10
 801140c:	d103      	bne.n	8011416 <__sfputc_r+0x1e>
 801140e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011412:	f000 bb23 	b.w	8011a5c <__swbuf_r>
 8011416:	6813      	ldr	r3, [r2, #0]
 8011418:	1c58      	adds	r0, r3, #1
 801141a:	6010      	str	r0, [r2, #0]
 801141c:	7019      	strb	r1, [r3, #0]
 801141e:	4608      	mov	r0, r1
 8011420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011424:	4770      	bx	lr

08011426 <__sfputs_r>:
 8011426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011428:	4606      	mov	r6, r0
 801142a:	460f      	mov	r7, r1
 801142c:	4614      	mov	r4, r2
 801142e:	18d5      	adds	r5, r2, r3
 8011430:	42ac      	cmp	r4, r5
 8011432:	d101      	bne.n	8011438 <__sfputs_r+0x12>
 8011434:	2000      	movs	r0, #0
 8011436:	e007      	b.n	8011448 <__sfputs_r+0x22>
 8011438:	f814 1b01 	ldrb.w	r1, [r4], #1
 801143c:	463a      	mov	r2, r7
 801143e:	4630      	mov	r0, r6
 8011440:	f7ff ffda 	bl	80113f8 <__sfputc_r>
 8011444:	1c43      	adds	r3, r0, #1
 8011446:	d1f3      	bne.n	8011430 <__sfputs_r+0xa>
 8011448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801144c <_vfiprintf_r>:
 801144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011450:	460d      	mov	r5, r1
 8011452:	b09d      	sub	sp, #116	; 0x74
 8011454:	4614      	mov	r4, r2
 8011456:	4698      	mov	r8, r3
 8011458:	4606      	mov	r6, r0
 801145a:	b118      	cbz	r0, 8011464 <_vfiprintf_r+0x18>
 801145c:	6983      	ldr	r3, [r0, #24]
 801145e:	b90b      	cbnz	r3, 8011464 <_vfiprintf_r+0x18>
 8011460:	f7ff fdc2 	bl	8010fe8 <__sinit>
 8011464:	4b89      	ldr	r3, [pc, #548]	; (801168c <_vfiprintf_r+0x240>)
 8011466:	429d      	cmp	r5, r3
 8011468:	d11b      	bne.n	80114a2 <_vfiprintf_r+0x56>
 801146a:	6875      	ldr	r5, [r6, #4]
 801146c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801146e:	07d9      	lsls	r1, r3, #31
 8011470:	d405      	bmi.n	801147e <_vfiprintf_r+0x32>
 8011472:	89ab      	ldrh	r3, [r5, #12]
 8011474:	059a      	lsls	r2, r3, #22
 8011476:	d402      	bmi.n	801147e <_vfiprintf_r+0x32>
 8011478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801147a:	f7ff fe53 	bl	8011124 <__retarget_lock_acquire_recursive>
 801147e:	89ab      	ldrh	r3, [r5, #12]
 8011480:	071b      	lsls	r3, r3, #28
 8011482:	d501      	bpl.n	8011488 <_vfiprintf_r+0x3c>
 8011484:	692b      	ldr	r3, [r5, #16]
 8011486:	b9eb      	cbnz	r3, 80114c4 <_vfiprintf_r+0x78>
 8011488:	4629      	mov	r1, r5
 801148a:	4630      	mov	r0, r6
 801148c:	f000 fb4a 	bl	8011b24 <__swsetup_r>
 8011490:	b1c0      	cbz	r0, 80114c4 <_vfiprintf_r+0x78>
 8011492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011494:	07dc      	lsls	r4, r3, #31
 8011496:	d50e      	bpl.n	80114b6 <_vfiprintf_r+0x6a>
 8011498:	f04f 30ff 	mov.w	r0, #4294967295
 801149c:	b01d      	add	sp, #116	; 0x74
 801149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a2:	4b7b      	ldr	r3, [pc, #492]	; (8011690 <_vfiprintf_r+0x244>)
 80114a4:	429d      	cmp	r5, r3
 80114a6:	d101      	bne.n	80114ac <_vfiprintf_r+0x60>
 80114a8:	68b5      	ldr	r5, [r6, #8]
 80114aa:	e7df      	b.n	801146c <_vfiprintf_r+0x20>
 80114ac:	4b79      	ldr	r3, [pc, #484]	; (8011694 <_vfiprintf_r+0x248>)
 80114ae:	429d      	cmp	r5, r3
 80114b0:	bf08      	it	eq
 80114b2:	68f5      	ldreq	r5, [r6, #12]
 80114b4:	e7da      	b.n	801146c <_vfiprintf_r+0x20>
 80114b6:	89ab      	ldrh	r3, [r5, #12]
 80114b8:	0598      	lsls	r0, r3, #22
 80114ba:	d4ed      	bmi.n	8011498 <_vfiprintf_r+0x4c>
 80114bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114be:	f7ff fe32 	bl	8011126 <__retarget_lock_release_recursive>
 80114c2:	e7e9      	b.n	8011498 <_vfiprintf_r+0x4c>
 80114c4:	2300      	movs	r3, #0
 80114c6:	9309      	str	r3, [sp, #36]	; 0x24
 80114c8:	2320      	movs	r3, #32
 80114ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80114d2:	2330      	movs	r3, #48	; 0x30
 80114d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011698 <_vfiprintf_r+0x24c>
 80114d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114dc:	f04f 0901 	mov.w	r9, #1
 80114e0:	4623      	mov	r3, r4
 80114e2:	469a      	mov	sl, r3
 80114e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114e8:	b10a      	cbz	r2, 80114ee <_vfiprintf_r+0xa2>
 80114ea:	2a25      	cmp	r2, #37	; 0x25
 80114ec:	d1f9      	bne.n	80114e2 <_vfiprintf_r+0x96>
 80114ee:	ebba 0b04 	subs.w	fp, sl, r4
 80114f2:	d00b      	beq.n	801150c <_vfiprintf_r+0xc0>
 80114f4:	465b      	mov	r3, fp
 80114f6:	4622      	mov	r2, r4
 80114f8:	4629      	mov	r1, r5
 80114fa:	4630      	mov	r0, r6
 80114fc:	f7ff ff93 	bl	8011426 <__sfputs_r>
 8011500:	3001      	adds	r0, #1
 8011502:	f000 80aa 	beq.w	801165a <_vfiprintf_r+0x20e>
 8011506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011508:	445a      	add	r2, fp
 801150a:	9209      	str	r2, [sp, #36]	; 0x24
 801150c:	f89a 3000 	ldrb.w	r3, [sl]
 8011510:	2b00      	cmp	r3, #0
 8011512:	f000 80a2 	beq.w	801165a <_vfiprintf_r+0x20e>
 8011516:	2300      	movs	r3, #0
 8011518:	f04f 32ff 	mov.w	r2, #4294967295
 801151c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011520:	f10a 0a01 	add.w	sl, sl, #1
 8011524:	9304      	str	r3, [sp, #16]
 8011526:	9307      	str	r3, [sp, #28]
 8011528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801152c:	931a      	str	r3, [sp, #104]	; 0x68
 801152e:	4654      	mov	r4, sl
 8011530:	2205      	movs	r2, #5
 8011532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011536:	4858      	ldr	r0, [pc, #352]	; (8011698 <_vfiprintf_r+0x24c>)
 8011538:	f7ee fe72 	bl	8000220 <memchr>
 801153c:	9a04      	ldr	r2, [sp, #16]
 801153e:	b9d8      	cbnz	r0, 8011578 <_vfiprintf_r+0x12c>
 8011540:	06d1      	lsls	r1, r2, #27
 8011542:	bf44      	itt	mi
 8011544:	2320      	movmi	r3, #32
 8011546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801154a:	0713      	lsls	r3, r2, #28
 801154c:	bf44      	itt	mi
 801154e:	232b      	movmi	r3, #43	; 0x2b
 8011550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011554:	f89a 3000 	ldrb.w	r3, [sl]
 8011558:	2b2a      	cmp	r3, #42	; 0x2a
 801155a:	d015      	beq.n	8011588 <_vfiprintf_r+0x13c>
 801155c:	9a07      	ldr	r2, [sp, #28]
 801155e:	4654      	mov	r4, sl
 8011560:	2000      	movs	r0, #0
 8011562:	f04f 0c0a 	mov.w	ip, #10
 8011566:	4621      	mov	r1, r4
 8011568:	f811 3b01 	ldrb.w	r3, [r1], #1
 801156c:	3b30      	subs	r3, #48	; 0x30
 801156e:	2b09      	cmp	r3, #9
 8011570:	d94e      	bls.n	8011610 <_vfiprintf_r+0x1c4>
 8011572:	b1b0      	cbz	r0, 80115a2 <_vfiprintf_r+0x156>
 8011574:	9207      	str	r2, [sp, #28]
 8011576:	e014      	b.n	80115a2 <_vfiprintf_r+0x156>
 8011578:	eba0 0308 	sub.w	r3, r0, r8
 801157c:	fa09 f303 	lsl.w	r3, r9, r3
 8011580:	4313      	orrs	r3, r2
 8011582:	9304      	str	r3, [sp, #16]
 8011584:	46a2      	mov	sl, r4
 8011586:	e7d2      	b.n	801152e <_vfiprintf_r+0xe2>
 8011588:	9b03      	ldr	r3, [sp, #12]
 801158a:	1d19      	adds	r1, r3, #4
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	9103      	str	r1, [sp, #12]
 8011590:	2b00      	cmp	r3, #0
 8011592:	bfbb      	ittet	lt
 8011594:	425b      	neglt	r3, r3
 8011596:	f042 0202 	orrlt.w	r2, r2, #2
 801159a:	9307      	strge	r3, [sp, #28]
 801159c:	9307      	strlt	r3, [sp, #28]
 801159e:	bfb8      	it	lt
 80115a0:	9204      	strlt	r2, [sp, #16]
 80115a2:	7823      	ldrb	r3, [r4, #0]
 80115a4:	2b2e      	cmp	r3, #46	; 0x2e
 80115a6:	d10c      	bne.n	80115c2 <_vfiprintf_r+0x176>
 80115a8:	7863      	ldrb	r3, [r4, #1]
 80115aa:	2b2a      	cmp	r3, #42	; 0x2a
 80115ac:	d135      	bne.n	801161a <_vfiprintf_r+0x1ce>
 80115ae:	9b03      	ldr	r3, [sp, #12]
 80115b0:	1d1a      	adds	r2, r3, #4
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	9203      	str	r2, [sp, #12]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	bfb8      	it	lt
 80115ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80115be:	3402      	adds	r4, #2
 80115c0:	9305      	str	r3, [sp, #20]
 80115c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80116a8 <_vfiprintf_r+0x25c>
 80115c6:	7821      	ldrb	r1, [r4, #0]
 80115c8:	2203      	movs	r2, #3
 80115ca:	4650      	mov	r0, sl
 80115cc:	f7ee fe28 	bl	8000220 <memchr>
 80115d0:	b140      	cbz	r0, 80115e4 <_vfiprintf_r+0x198>
 80115d2:	2340      	movs	r3, #64	; 0x40
 80115d4:	eba0 000a 	sub.w	r0, r0, sl
 80115d8:	fa03 f000 	lsl.w	r0, r3, r0
 80115dc:	9b04      	ldr	r3, [sp, #16]
 80115de:	4303      	orrs	r3, r0
 80115e0:	3401      	adds	r4, #1
 80115e2:	9304      	str	r3, [sp, #16]
 80115e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115e8:	482c      	ldr	r0, [pc, #176]	; (801169c <_vfiprintf_r+0x250>)
 80115ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115ee:	2206      	movs	r2, #6
 80115f0:	f7ee fe16 	bl	8000220 <memchr>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d03f      	beq.n	8011678 <_vfiprintf_r+0x22c>
 80115f8:	4b29      	ldr	r3, [pc, #164]	; (80116a0 <_vfiprintf_r+0x254>)
 80115fa:	bb1b      	cbnz	r3, 8011644 <_vfiprintf_r+0x1f8>
 80115fc:	9b03      	ldr	r3, [sp, #12]
 80115fe:	3307      	adds	r3, #7
 8011600:	f023 0307 	bic.w	r3, r3, #7
 8011604:	3308      	adds	r3, #8
 8011606:	9303      	str	r3, [sp, #12]
 8011608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801160a:	443b      	add	r3, r7
 801160c:	9309      	str	r3, [sp, #36]	; 0x24
 801160e:	e767      	b.n	80114e0 <_vfiprintf_r+0x94>
 8011610:	fb0c 3202 	mla	r2, ip, r2, r3
 8011614:	460c      	mov	r4, r1
 8011616:	2001      	movs	r0, #1
 8011618:	e7a5      	b.n	8011566 <_vfiprintf_r+0x11a>
 801161a:	2300      	movs	r3, #0
 801161c:	3401      	adds	r4, #1
 801161e:	9305      	str	r3, [sp, #20]
 8011620:	4619      	mov	r1, r3
 8011622:	f04f 0c0a 	mov.w	ip, #10
 8011626:	4620      	mov	r0, r4
 8011628:	f810 2b01 	ldrb.w	r2, [r0], #1
 801162c:	3a30      	subs	r2, #48	; 0x30
 801162e:	2a09      	cmp	r2, #9
 8011630:	d903      	bls.n	801163a <_vfiprintf_r+0x1ee>
 8011632:	2b00      	cmp	r3, #0
 8011634:	d0c5      	beq.n	80115c2 <_vfiprintf_r+0x176>
 8011636:	9105      	str	r1, [sp, #20]
 8011638:	e7c3      	b.n	80115c2 <_vfiprintf_r+0x176>
 801163a:	fb0c 2101 	mla	r1, ip, r1, r2
 801163e:	4604      	mov	r4, r0
 8011640:	2301      	movs	r3, #1
 8011642:	e7f0      	b.n	8011626 <_vfiprintf_r+0x1da>
 8011644:	ab03      	add	r3, sp, #12
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	462a      	mov	r2, r5
 801164a:	4b16      	ldr	r3, [pc, #88]	; (80116a4 <_vfiprintf_r+0x258>)
 801164c:	a904      	add	r1, sp, #16
 801164e:	4630      	mov	r0, r6
 8011650:	f3af 8000 	nop.w
 8011654:	4607      	mov	r7, r0
 8011656:	1c78      	adds	r0, r7, #1
 8011658:	d1d6      	bne.n	8011608 <_vfiprintf_r+0x1bc>
 801165a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801165c:	07d9      	lsls	r1, r3, #31
 801165e:	d405      	bmi.n	801166c <_vfiprintf_r+0x220>
 8011660:	89ab      	ldrh	r3, [r5, #12]
 8011662:	059a      	lsls	r2, r3, #22
 8011664:	d402      	bmi.n	801166c <_vfiprintf_r+0x220>
 8011666:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011668:	f7ff fd5d 	bl	8011126 <__retarget_lock_release_recursive>
 801166c:	89ab      	ldrh	r3, [r5, #12]
 801166e:	065b      	lsls	r3, r3, #25
 8011670:	f53f af12 	bmi.w	8011498 <_vfiprintf_r+0x4c>
 8011674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011676:	e711      	b.n	801149c <_vfiprintf_r+0x50>
 8011678:	ab03      	add	r3, sp, #12
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	462a      	mov	r2, r5
 801167e:	4b09      	ldr	r3, [pc, #36]	; (80116a4 <_vfiprintf_r+0x258>)
 8011680:	a904      	add	r1, sp, #16
 8011682:	4630      	mov	r0, r6
 8011684:	f000 f880 	bl	8011788 <_printf_i>
 8011688:	e7e4      	b.n	8011654 <_vfiprintf_r+0x208>
 801168a:	bf00      	nop
 801168c:	080142d4 	.word	0x080142d4
 8011690:	080142f4 	.word	0x080142f4
 8011694:	080142b4 	.word	0x080142b4
 8011698:	08014314 	.word	0x08014314
 801169c:	0801431e 	.word	0x0801431e
 80116a0:	00000000 	.word	0x00000000
 80116a4:	08011427 	.word	0x08011427
 80116a8:	0801431a 	.word	0x0801431a

080116ac <_printf_common>:
 80116ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116b0:	4616      	mov	r6, r2
 80116b2:	4699      	mov	r9, r3
 80116b4:	688a      	ldr	r2, [r1, #8]
 80116b6:	690b      	ldr	r3, [r1, #16]
 80116b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80116bc:	4293      	cmp	r3, r2
 80116be:	bfb8      	it	lt
 80116c0:	4613      	movlt	r3, r2
 80116c2:	6033      	str	r3, [r6, #0]
 80116c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80116c8:	4607      	mov	r7, r0
 80116ca:	460c      	mov	r4, r1
 80116cc:	b10a      	cbz	r2, 80116d2 <_printf_common+0x26>
 80116ce:	3301      	adds	r3, #1
 80116d0:	6033      	str	r3, [r6, #0]
 80116d2:	6823      	ldr	r3, [r4, #0]
 80116d4:	0699      	lsls	r1, r3, #26
 80116d6:	bf42      	ittt	mi
 80116d8:	6833      	ldrmi	r3, [r6, #0]
 80116da:	3302      	addmi	r3, #2
 80116dc:	6033      	strmi	r3, [r6, #0]
 80116de:	6825      	ldr	r5, [r4, #0]
 80116e0:	f015 0506 	ands.w	r5, r5, #6
 80116e4:	d106      	bne.n	80116f4 <_printf_common+0x48>
 80116e6:	f104 0a19 	add.w	sl, r4, #25
 80116ea:	68e3      	ldr	r3, [r4, #12]
 80116ec:	6832      	ldr	r2, [r6, #0]
 80116ee:	1a9b      	subs	r3, r3, r2
 80116f0:	42ab      	cmp	r3, r5
 80116f2:	dc26      	bgt.n	8011742 <_printf_common+0x96>
 80116f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80116f8:	1e13      	subs	r3, r2, #0
 80116fa:	6822      	ldr	r2, [r4, #0]
 80116fc:	bf18      	it	ne
 80116fe:	2301      	movne	r3, #1
 8011700:	0692      	lsls	r2, r2, #26
 8011702:	d42b      	bmi.n	801175c <_printf_common+0xb0>
 8011704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011708:	4649      	mov	r1, r9
 801170a:	4638      	mov	r0, r7
 801170c:	47c0      	blx	r8
 801170e:	3001      	adds	r0, #1
 8011710:	d01e      	beq.n	8011750 <_printf_common+0xa4>
 8011712:	6823      	ldr	r3, [r4, #0]
 8011714:	68e5      	ldr	r5, [r4, #12]
 8011716:	6832      	ldr	r2, [r6, #0]
 8011718:	f003 0306 	and.w	r3, r3, #6
 801171c:	2b04      	cmp	r3, #4
 801171e:	bf08      	it	eq
 8011720:	1aad      	subeq	r5, r5, r2
 8011722:	68a3      	ldr	r3, [r4, #8]
 8011724:	6922      	ldr	r2, [r4, #16]
 8011726:	bf0c      	ite	eq
 8011728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801172c:	2500      	movne	r5, #0
 801172e:	4293      	cmp	r3, r2
 8011730:	bfc4      	itt	gt
 8011732:	1a9b      	subgt	r3, r3, r2
 8011734:	18ed      	addgt	r5, r5, r3
 8011736:	2600      	movs	r6, #0
 8011738:	341a      	adds	r4, #26
 801173a:	42b5      	cmp	r5, r6
 801173c:	d11a      	bne.n	8011774 <_printf_common+0xc8>
 801173e:	2000      	movs	r0, #0
 8011740:	e008      	b.n	8011754 <_printf_common+0xa8>
 8011742:	2301      	movs	r3, #1
 8011744:	4652      	mov	r2, sl
 8011746:	4649      	mov	r1, r9
 8011748:	4638      	mov	r0, r7
 801174a:	47c0      	blx	r8
 801174c:	3001      	adds	r0, #1
 801174e:	d103      	bne.n	8011758 <_printf_common+0xac>
 8011750:	f04f 30ff 	mov.w	r0, #4294967295
 8011754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011758:	3501      	adds	r5, #1
 801175a:	e7c6      	b.n	80116ea <_printf_common+0x3e>
 801175c:	18e1      	adds	r1, r4, r3
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	2030      	movs	r0, #48	; 0x30
 8011762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011766:	4422      	add	r2, r4
 8011768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801176c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011770:	3302      	adds	r3, #2
 8011772:	e7c7      	b.n	8011704 <_printf_common+0x58>
 8011774:	2301      	movs	r3, #1
 8011776:	4622      	mov	r2, r4
 8011778:	4649      	mov	r1, r9
 801177a:	4638      	mov	r0, r7
 801177c:	47c0      	blx	r8
 801177e:	3001      	adds	r0, #1
 8011780:	d0e6      	beq.n	8011750 <_printf_common+0xa4>
 8011782:	3601      	adds	r6, #1
 8011784:	e7d9      	b.n	801173a <_printf_common+0x8e>
	...

08011788 <_printf_i>:
 8011788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801178c:	7e0f      	ldrb	r7, [r1, #24]
 801178e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011790:	2f78      	cmp	r7, #120	; 0x78
 8011792:	4691      	mov	r9, r2
 8011794:	4680      	mov	r8, r0
 8011796:	460c      	mov	r4, r1
 8011798:	469a      	mov	sl, r3
 801179a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801179e:	d807      	bhi.n	80117b0 <_printf_i+0x28>
 80117a0:	2f62      	cmp	r7, #98	; 0x62
 80117a2:	d80a      	bhi.n	80117ba <_printf_i+0x32>
 80117a4:	2f00      	cmp	r7, #0
 80117a6:	f000 80d8 	beq.w	801195a <_printf_i+0x1d2>
 80117aa:	2f58      	cmp	r7, #88	; 0x58
 80117ac:	f000 80a3 	beq.w	80118f6 <_printf_i+0x16e>
 80117b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80117b8:	e03a      	b.n	8011830 <_printf_i+0xa8>
 80117ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80117be:	2b15      	cmp	r3, #21
 80117c0:	d8f6      	bhi.n	80117b0 <_printf_i+0x28>
 80117c2:	a101      	add	r1, pc, #4	; (adr r1, 80117c8 <_printf_i+0x40>)
 80117c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80117c8:	08011821 	.word	0x08011821
 80117cc:	08011835 	.word	0x08011835
 80117d0:	080117b1 	.word	0x080117b1
 80117d4:	080117b1 	.word	0x080117b1
 80117d8:	080117b1 	.word	0x080117b1
 80117dc:	080117b1 	.word	0x080117b1
 80117e0:	08011835 	.word	0x08011835
 80117e4:	080117b1 	.word	0x080117b1
 80117e8:	080117b1 	.word	0x080117b1
 80117ec:	080117b1 	.word	0x080117b1
 80117f0:	080117b1 	.word	0x080117b1
 80117f4:	08011941 	.word	0x08011941
 80117f8:	08011865 	.word	0x08011865
 80117fc:	08011923 	.word	0x08011923
 8011800:	080117b1 	.word	0x080117b1
 8011804:	080117b1 	.word	0x080117b1
 8011808:	08011963 	.word	0x08011963
 801180c:	080117b1 	.word	0x080117b1
 8011810:	08011865 	.word	0x08011865
 8011814:	080117b1 	.word	0x080117b1
 8011818:	080117b1 	.word	0x080117b1
 801181c:	0801192b 	.word	0x0801192b
 8011820:	682b      	ldr	r3, [r5, #0]
 8011822:	1d1a      	adds	r2, r3, #4
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	602a      	str	r2, [r5, #0]
 8011828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801182c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011830:	2301      	movs	r3, #1
 8011832:	e0a3      	b.n	801197c <_printf_i+0x1f4>
 8011834:	6820      	ldr	r0, [r4, #0]
 8011836:	6829      	ldr	r1, [r5, #0]
 8011838:	0606      	lsls	r6, r0, #24
 801183a:	f101 0304 	add.w	r3, r1, #4
 801183e:	d50a      	bpl.n	8011856 <_printf_i+0xce>
 8011840:	680e      	ldr	r6, [r1, #0]
 8011842:	602b      	str	r3, [r5, #0]
 8011844:	2e00      	cmp	r6, #0
 8011846:	da03      	bge.n	8011850 <_printf_i+0xc8>
 8011848:	232d      	movs	r3, #45	; 0x2d
 801184a:	4276      	negs	r6, r6
 801184c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011850:	485e      	ldr	r0, [pc, #376]	; (80119cc <_printf_i+0x244>)
 8011852:	230a      	movs	r3, #10
 8011854:	e019      	b.n	801188a <_printf_i+0x102>
 8011856:	680e      	ldr	r6, [r1, #0]
 8011858:	602b      	str	r3, [r5, #0]
 801185a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801185e:	bf18      	it	ne
 8011860:	b236      	sxthne	r6, r6
 8011862:	e7ef      	b.n	8011844 <_printf_i+0xbc>
 8011864:	682b      	ldr	r3, [r5, #0]
 8011866:	6820      	ldr	r0, [r4, #0]
 8011868:	1d19      	adds	r1, r3, #4
 801186a:	6029      	str	r1, [r5, #0]
 801186c:	0601      	lsls	r1, r0, #24
 801186e:	d501      	bpl.n	8011874 <_printf_i+0xec>
 8011870:	681e      	ldr	r6, [r3, #0]
 8011872:	e002      	b.n	801187a <_printf_i+0xf2>
 8011874:	0646      	lsls	r6, r0, #25
 8011876:	d5fb      	bpl.n	8011870 <_printf_i+0xe8>
 8011878:	881e      	ldrh	r6, [r3, #0]
 801187a:	4854      	ldr	r0, [pc, #336]	; (80119cc <_printf_i+0x244>)
 801187c:	2f6f      	cmp	r7, #111	; 0x6f
 801187e:	bf0c      	ite	eq
 8011880:	2308      	moveq	r3, #8
 8011882:	230a      	movne	r3, #10
 8011884:	2100      	movs	r1, #0
 8011886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801188a:	6865      	ldr	r5, [r4, #4]
 801188c:	60a5      	str	r5, [r4, #8]
 801188e:	2d00      	cmp	r5, #0
 8011890:	bfa2      	ittt	ge
 8011892:	6821      	ldrge	r1, [r4, #0]
 8011894:	f021 0104 	bicge.w	r1, r1, #4
 8011898:	6021      	strge	r1, [r4, #0]
 801189a:	b90e      	cbnz	r6, 80118a0 <_printf_i+0x118>
 801189c:	2d00      	cmp	r5, #0
 801189e:	d04d      	beq.n	801193c <_printf_i+0x1b4>
 80118a0:	4615      	mov	r5, r2
 80118a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80118a6:	fb03 6711 	mls	r7, r3, r1, r6
 80118aa:	5dc7      	ldrb	r7, [r0, r7]
 80118ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80118b0:	4637      	mov	r7, r6
 80118b2:	42bb      	cmp	r3, r7
 80118b4:	460e      	mov	r6, r1
 80118b6:	d9f4      	bls.n	80118a2 <_printf_i+0x11a>
 80118b8:	2b08      	cmp	r3, #8
 80118ba:	d10b      	bne.n	80118d4 <_printf_i+0x14c>
 80118bc:	6823      	ldr	r3, [r4, #0]
 80118be:	07de      	lsls	r6, r3, #31
 80118c0:	d508      	bpl.n	80118d4 <_printf_i+0x14c>
 80118c2:	6923      	ldr	r3, [r4, #16]
 80118c4:	6861      	ldr	r1, [r4, #4]
 80118c6:	4299      	cmp	r1, r3
 80118c8:	bfde      	ittt	le
 80118ca:	2330      	movle	r3, #48	; 0x30
 80118cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80118d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80118d4:	1b52      	subs	r2, r2, r5
 80118d6:	6122      	str	r2, [r4, #16]
 80118d8:	f8cd a000 	str.w	sl, [sp]
 80118dc:	464b      	mov	r3, r9
 80118de:	aa03      	add	r2, sp, #12
 80118e0:	4621      	mov	r1, r4
 80118e2:	4640      	mov	r0, r8
 80118e4:	f7ff fee2 	bl	80116ac <_printf_common>
 80118e8:	3001      	adds	r0, #1
 80118ea:	d14c      	bne.n	8011986 <_printf_i+0x1fe>
 80118ec:	f04f 30ff 	mov.w	r0, #4294967295
 80118f0:	b004      	add	sp, #16
 80118f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118f6:	4835      	ldr	r0, [pc, #212]	; (80119cc <_printf_i+0x244>)
 80118f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80118fc:	6829      	ldr	r1, [r5, #0]
 80118fe:	6823      	ldr	r3, [r4, #0]
 8011900:	f851 6b04 	ldr.w	r6, [r1], #4
 8011904:	6029      	str	r1, [r5, #0]
 8011906:	061d      	lsls	r5, r3, #24
 8011908:	d514      	bpl.n	8011934 <_printf_i+0x1ac>
 801190a:	07df      	lsls	r7, r3, #31
 801190c:	bf44      	itt	mi
 801190e:	f043 0320 	orrmi.w	r3, r3, #32
 8011912:	6023      	strmi	r3, [r4, #0]
 8011914:	b91e      	cbnz	r6, 801191e <_printf_i+0x196>
 8011916:	6823      	ldr	r3, [r4, #0]
 8011918:	f023 0320 	bic.w	r3, r3, #32
 801191c:	6023      	str	r3, [r4, #0]
 801191e:	2310      	movs	r3, #16
 8011920:	e7b0      	b.n	8011884 <_printf_i+0xfc>
 8011922:	6823      	ldr	r3, [r4, #0]
 8011924:	f043 0320 	orr.w	r3, r3, #32
 8011928:	6023      	str	r3, [r4, #0]
 801192a:	2378      	movs	r3, #120	; 0x78
 801192c:	4828      	ldr	r0, [pc, #160]	; (80119d0 <_printf_i+0x248>)
 801192e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011932:	e7e3      	b.n	80118fc <_printf_i+0x174>
 8011934:	0659      	lsls	r1, r3, #25
 8011936:	bf48      	it	mi
 8011938:	b2b6      	uxthmi	r6, r6
 801193a:	e7e6      	b.n	801190a <_printf_i+0x182>
 801193c:	4615      	mov	r5, r2
 801193e:	e7bb      	b.n	80118b8 <_printf_i+0x130>
 8011940:	682b      	ldr	r3, [r5, #0]
 8011942:	6826      	ldr	r6, [r4, #0]
 8011944:	6961      	ldr	r1, [r4, #20]
 8011946:	1d18      	adds	r0, r3, #4
 8011948:	6028      	str	r0, [r5, #0]
 801194a:	0635      	lsls	r5, r6, #24
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	d501      	bpl.n	8011954 <_printf_i+0x1cc>
 8011950:	6019      	str	r1, [r3, #0]
 8011952:	e002      	b.n	801195a <_printf_i+0x1d2>
 8011954:	0670      	lsls	r0, r6, #25
 8011956:	d5fb      	bpl.n	8011950 <_printf_i+0x1c8>
 8011958:	8019      	strh	r1, [r3, #0]
 801195a:	2300      	movs	r3, #0
 801195c:	6123      	str	r3, [r4, #16]
 801195e:	4615      	mov	r5, r2
 8011960:	e7ba      	b.n	80118d8 <_printf_i+0x150>
 8011962:	682b      	ldr	r3, [r5, #0]
 8011964:	1d1a      	adds	r2, r3, #4
 8011966:	602a      	str	r2, [r5, #0]
 8011968:	681d      	ldr	r5, [r3, #0]
 801196a:	6862      	ldr	r2, [r4, #4]
 801196c:	2100      	movs	r1, #0
 801196e:	4628      	mov	r0, r5
 8011970:	f7ee fc56 	bl	8000220 <memchr>
 8011974:	b108      	cbz	r0, 801197a <_printf_i+0x1f2>
 8011976:	1b40      	subs	r0, r0, r5
 8011978:	6060      	str	r0, [r4, #4]
 801197a:	6863      	ldr	r3, [r4, #4]
 801197c:	6123      	str	r3, [r4, #16]
 801197e:	2300      	movs	r3, #0
 8011980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011984:	e7a8      	b.n	80118d8 <_printf_i+0x150>
 8011986:	6923      	ldr	r3, [r4, #16]
 8011988:	462a      	mov	r2, r5
 801198a:	4649      	mov	r1, r9
 801198c:	4640      	mov	r0, r8
 801198e:	47d0      	blx	sl
 8011990:	3001      	adds	r0, #1
 8011992:	d0ab      	beq.n	80118ec <_printf_i+0x164>
 8011994:	6823      	ldr	r3, [r4, #0]
 8011996:	079b      	lsls	r3, r3, #30
 8011998:	d413      	bmi.n	80119c2 <_printf_i+0x23a>
 801199a:	68e0      	ldr	r0, [r4, #12]
 801199c:	9b03      	ldr	r3, [sp, #12]
 801199e:	4298      	cmp	r0, r3
 80119a0:	bfb8      	it	lt
 80119a2:	4618      	movlt	r0, r3
 80119a4:	e7a4      	b.n	80118f0 <_printf_i+0x168>
 80119a6:	2301      	movs	r3, #1
 80119a8:	4632      	mov	r2, r6
 80119aa:	4649      	mov	r1, r9
 80119ac:	4640      	mov	r0, r8
 80119ae:	47d0      	blx	sl
 80119b0:	3001      	adds	r0, #1
 80119b2:	d09b      	beq.n	80118ec <_printf_i+0x164>
 80119b4:	3501      	adds	r5, #1
 80119b6:	68e3      	ldr	r3, [r4, #12]
 80119b8:	9903      	ldr	r1, [sp, #12]
 80119ba:	1a5b      	subs	r3, r3, r1
 80119bc:	42ab      	cmp	r3, r5
 80119be:	dcf2      	bgt.n	80119a6 <_printf_i+0x21e>
 80119c0:	e7eb      	b.n	801199a <_printf_i+0x212>
 80119c2:	2500      	movs	r5, #0
 80119c4:	f104 0619 	add.w	r6, r4, #25
 80119c8:	e7f5      	b.n	80119b6 <_printf_i+0x22e>
 80119ca:	bf00      	nop
 80119cc:	08014325 	.word	0x08014325
 80119d0:	08014336 	.word	0x08014336

080119d4 <__sread>:
 80119d4:	b510      	push	{r4, lr}
 80119d6:	460c      	mov	r4, r1
 80119d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119dc:	f000 faa4 	bl	8011f28 <_read_r>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	bfab      	itete	ge
 80119e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80119e6:	89a3      	ldrhlt	r3, [r4, #12]
 80119e8:	181b      	addge	r3, r3, r0
 80119ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80119ee:	bfac      	ite	ge
 80119f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80119f2:	81a3      	strhlt	r3, [r4, #12]
 80119f4:	bd10      	pop	{r4, pc}

080119f6 <__swrite>:
 80119f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119fa:	461f      	mov	r7, r3
 80119fc:	898b      	ldrh	r3, [r1, #12]
 80119fe:	05db      	lsls	r3, r3, #23
 8011a00:	4605      	mov	r5, r0
 8011a02:	460c      	mov	r4, r1
 8011a04:	4616      	mov	r6, r2
 8011a06:	d505      	bpl.n	8011a14 <__swrite+0x1e>
 8011a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a0c:	2302      	movs	r3, #2
 8011a0e:	2200      	movs	r2, #0
 8011a10:	f000 f9c8 	bl	8011da4 <_lseek_r>
 8011a14:	89a3      	ldrh	r3, [r4, #12]
 8011a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a1e:	81a3      	strh	r3, [r4, #12]
 8011a20:	4632      	mov	r2, r6
 8011a22:	463b      	mov	r3, r7
 8011a24:	4628      	mov	r0, r5
 8011a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a2a:	f000 b869 	b.w	8011b00 <_write_r>

08011a2e <__sseek>:
 8011a2e:	b510      	push	{r4, lr}
 8011a30:	460c      	mov	r4, r1
 8011a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a36:	f000 f9b5 	bl	8011da4 <_lseek_r>
 8011a3a:	1c43      	adds	r3, r0, #1
 8011a3c:	89a3      	ldrh	r3, [r4, #12]
 8011a3e:	bf15      	itete	ne
 8011a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011a4a:	81a3      	strheq	r3, [r4, #12]
 8011a4c:	bf18      	it	ne
 8011a4e:	81a3      	strhne	r3, [r4, #12]
 8011a50:	bd10      	pop	{r4, pc}

08011a52 <__sclose>:
 8011a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a56:	f000 b8d3 	b.w	8011c00 <_close_r>
	...

08011a5c <__swbuf_r>:
 8011a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a5e:	460e      	mov	r6, r1
 8011a60:	4614      	mov	r4, r2
 8011a62:	4605      	mov	r5, r0
 8011a64:	b118      	cbz	r0, 8011a6e <__swbuf_r+0x12>
 8011a66:	6983      	ldr	r3, [r0, #24]
 8011a68:	b90b      	cbnz	r3, 8011a6e <__swbuf_r+0x12>
 8011a6a:	f7ff fabd 	bl	8010fe8 <__sinit>
 8011a6e:	4b21      	ldr	r3, [pc, #132]	; (8011af4 <__swbuf_r+0x98>)
 8011a70:	429c      	cmp	r4, r3
 8011a72:	d12b      	bne.n	8011acc <__swbuf_r+0x70>
 8011a74:	686c      	ldr	r4, [r5, #4]
 8011a76:	69a3      	ldr	r3, [r4, #24]
 8011a78:	60a3      	str	r3, [r4, #8]
 8011a7a:	89a3      	ldrh	r3, [r4, #12]
 8011a7c:	071a      	lsls	r2, r3, #28
 8011a7e:	d52f      	bpl.n	8011ae0 <__swbuf_r+0x84>
 8011a80:	6923      	ldr	r3, [r4, #16]
 8011a82:	b36b      	cbz	r3, 8011ae0 <__swbuf_r+0x84>
 8011a84:	6923      	ldr	r3, [r4, #16]
 8011a86:	6820      	ldr	r0, [r4, #0]
 8011a88:	1ac0      	subs	r0, r0, r3
 8011a8a:	6963      	ldr	r3, [r4, #20]
 8011a8c:	b2f6      	uxtb	r6, r6
 8011a8e:	4283      	cmp	r3, r0
 8011a90:	4637      	mov	r7, r6
 8011a92:	dc04      	bgt.n	8011a9e <__swbuf_r+0x42>
 8011a94:	4621      	mov	r1, r4
 8011a96:	4628      	mov	r0, r5
 8011a98:	f000 f948 	bl	8011d2c <_fflush_r>
 8011a9c:	bb30      	cbnz	r0, 8011aec <__swbuf_r+0x90>
 8011a9e:	68a3      	ldr	r3, [r4, #8]
 8011aa0:	3b01      	subs	r3, #1
 8011aa2:	60a3      	str	r3, [r4, #8]
 8011aa4:	6823      	ldr	r3, [r4, #0]
 8011aa6:	1c5a      	adds	r2, r3, #1
 8011aa8:	6022      	str	r2, [r4, #0]
 8011aaa:	701e      	strb	r6, [r3, #0]
 8011aac:	6963      	ldr	r3, [r4, #20]
 8011aae:	3001      	adds	r0, #1
 8011ab0:	4283      	cmp	r3, r0
 8011ab2:	d004      	beq.n	8011abe <__swbuf_r+0x62>
 8011ab4:	89a3      	ldrh	r3, [r4, #12]
 8011ab6:	07db      	lsls	r3, r3, #31
 8011ab8:	d506      	bpl.n	8011ac8 <__swbuf_r+0x6c>
 8011aba:	2e0a      	cmp	r6, #10
 8011abc:	d104      	bne.n	8011ac8 <__swbuf_r+0x6c>
 8011abe:	4621      	mov	r1, r4
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	f000 f933 	bl	8011d2c <_fflush_r>
 8011ac6:	b988      	cbnz	r0, 8011aec <__swbuf_r+0x90>
 8011ac8:	4638      	mov	r0, r7
 8011aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011acc:	4b0a      	ldr	r3, [pc, #40]	; (8011af8 <__swbuf_r+0x9c>)
 8011ace:	429c      	cmp	r4, r3
 8011ad0:	d101      	bne.n	8011ad6 <__swbuf_r+0x7a>
 8011ad2:	68ac      	ldr	r4, [r5, #8]
 8011ad4:	e7cf      	b.n	8011a76 <__swbuf_r+0x1a>
 8011ad6:	4b09      	ldr	r3, [pc, #36]	; (8011afc <__swbuf_r+0xa0>)
 8011ad8:	429c      	cmp	r4, r3
 8011ada:	bf08      	it	eq
 8011adc:	68ec      	ldreq	r4, [r5, #12]
 8011ade:	e7ca      	b.n	8011a76 <__swbuf_r+0x1a>
 8011ae0:	4621      	mov	r1, r4
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	f000 f81e 	bl	8011b24 <__swsetup_r>
 8011ae8:	2800      	cmp	r0, #0
 8011aea:	d0cb      	beq.n	8011a84 <__swbuf_r+0x28>
 8011aec:	f04f 37ff 	mov.w	r7, #4294967295
 8011af0:	e7ea      	b.n	8011ac8 <__swbuf_r+0x6c>
 8011af2:	bf00      	nop
 8011af4:	080142d4 	.word	0x080142d4
 8011af8:	080142f4 	.word	0x080142f4
 8011afc:	080142b4 	.word	0x080142b4

08011b00 <_write_r>:
 8011b00:	b538      	push	{r3, r4, r5, lr}
 8011b02:	4d07      	ldr	r5, [pc, #28]	; (8011b20 <_write_r+0x20>)
 8011b04:	4604      	mov	r4, r0
 8011b06:	4608      	mov	r0, r1
 8011b08:	4611      	mov	r1, r2
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	602a      	str	r2, [r5, #0]
 8011b0e:	461a      	mov	r2, r3
 8011b10:	f7ef fd1d 	bl	800154e <_write>
 8011b14:	1c43      	adds	r3, r0, #1
 8011b16:	d102      	bne.n	8011b1e <_write_r+0x1e>
 8011b18:	682b      	ldr	r3, [r5, #0]
 8011b1a:	b103      	cbz	r3, 8011b1e <_write_r+0x1e>
 8011b1c:	6023      	str	r3, [r4, #0]
 8011b1e:	bd38      	pop	{r3, r4, r5, pc}
 8011b20:	20007150 	.word	0x20007150

08011b24 <__swsetup_r>:
 8011b24:	4b32      	ldr	r3, [pc, #200]	; (8011bf0 <__swsetup_r+0xcc>)
 8011b26:	b570      	push	{r4, r5, r6, lr}
 8011b28:	681d      	ldr	r5, [r3, #0]
 8011b2a:	4606      	mov	r6, r0
 8011b2c:	460c      	mov	r4, r1
 8011b2e:	b125      	cbz	r5, 8011b3a <__swsetup_r+0x16>
 8011b30:	69ab      	ldr	r3, [r5, #24]
 8011b32:	b913      	cbnz	r3, 8011b3a <__swsetup_r+0x16>
 8011b34:	4628      	mov	r0, r5
 8011b36:	f7ff fa57 	bl	8010fe8 <__sinit>
 8011b3a:	4b2e      	ldr	r3, [pc, #184]	; (8011bf4 <__swsetup_r+0xd0>)
 8011b3c:	429c      	cmp	r4, r3
 8011b3e:	d10f      	bne.n	8011b60 <__swsetup_r+0x3c>
 8011b40:	686c      	ldr	r4, [r5, #4]
 8011b42:	89a3      	ldrh	r3, [r4, #12]
 8011b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b48:	0719      	lsls	r1, r3, #28
 8011b4a:	d42c      	bmi.n	8011ba6 <__swsetup_r+0x82>
 8011b4c:	06dd      	lsls	r5, r3, #27
 8011b4e:	d411      	bmi.n	8011b74 <__swsetup_r+0x50>
 8011b50:	2309      	movs	r3, #9
 8011b52:	6033      	str	r3, [r6, #0]
 8011b54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b58:	81a3      	strh	r3, [r4, #12]
 8011b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8011b5e:	e03e      	b.n	8011bde <__swsetup_r+0xba>
 8011b60:	4b25      	ldr	r3, [pc, #148]	; (8011bf8 <__swsetup_r+0xd4>)
 8011b62:	429c      	cmp	r4, r3
 8011b64:	d101      	bne.n	8011b6a <__swsetup_r+0x46>
 8011b66:	68ac      	ldr	r4, [r5, #8]
 8011b68:	e7eb      	b.n	8011b42 <__swsetup_r+0x1e>
 8011b6a:	4b24      	ldr	r3, [pc, #144]	; (8011bfc <__swsetup_r+0xd8>)
 8011b6c:	429c      	cmp	r4, r3
 8011b6e:	bf08      	it	eq
 8011b70:	68ec      	ldreq	r4, [r5, #12]
 8011b72:	e7e6      	b.n	8011b42 <__swsetup_r+0x1e>
 8011b74:	0758      	lsls	r0, r3, #29
 8011b76:	d512      	bpl.n	8011b9e <__swsetup_r+0x7a>
 8011b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b7a:	b141      	cbz	r1, 8011b8e <__swsetup_r+0x6a>
 8011b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b80:	4299      	cmp	r1, r3
 8011b82:	d002      	beq.n	8011b8a <__swsetup_r+0x66>
 8011b84:	4630      	mov	r0, r6
 8011b86:	f7ff f82b 	bl	8010be0 <_free_r>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	6363      	str	r3, [r4, #52]	; 0x34
 8011b8e:	89a3      	ldrh	r3, [r4, #12]
 8011b90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b94:	81a3      	strh	r3, [r4, #12]
 8011b96:	2300      	movs	r3, #0
 8011b98:	6063      	str	r3, [r4, #4]
 8011b9a:	6923      	ldr	r3, [r4, #16]
 8011b9c:	6023      	str	r3, [r4, #0]
 8011b9e:	89a3      	ldrh	r3, [r4, #12]
 8011ba0:	f043 0308 	orr.w	r3, r3, #8
 8011ba4:	81a3      	strh	r3, [r4, #12]
 8011ba6:	6923      	ldr	r3, [r4, #16]
 8011ba8:	b94b      	cbnz	r3, 8011bbe <__swsetup_r+0x9a>
 8011baa:	89a3      	ldrh	r3, [r4, #12]
 8011bac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bb4:	d003      	beq.n	8011bbe <__swsetup_r+0x9a>
 8011bb6:	4621      	mov	r1, r4
 8011bb8:	4630      	mov	r0, r6
 8011bba:	f000 f92b 	bl	8011e14 <__smakebuf_r>
 8011bbe:	89a0      	ldrh	r0, [r4, #12]
 8011bc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011bc4:	f010 0301 	ands.w	r3, r0, #1
 8011bc8:	d00a      	beq.n	8011be0 <__swsetup_r+0xbc>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	60a3      	str	r3, [r4, #8]
 8011bce:	6963      	ldr	r3, [r4, #20]
 8011bd0:	425b      	negs	r3, r3
 8011bd2:	61a3      	str	r3, [r4, #24]
 8011bd4:	6923      	ldr	r3, [r4, #16]
 8011bd6:	b943      	cbnz	r3, 8011bea <__swsetup_r+0xc6>
 8011bd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011bdc:	d1ba      	bne.n	8011b54 <__swsetup_r+0x30>
 8011bde:	bd70      	pop	{r4, r5, r6, pc}
 8011be0:	0781      	lsls	r1, r0, #30
 8011be2:	bf58      	it	pl
 8011be4:	6963      	ldrpl	r3, [r4, #20]
 8011be6:	60a3      	str	r3, [r4, #8]
 8011be8:	e7f4      	b.n	8011bd4 <__swsetup_r+0xb0>
 8011bea:	2000      	movs	r0, #0
 8011bec:	e7f7      	b.n	8011bde <__swsetup_r+0xba>
 8011bee:	bf00      	nop
 8011bf0:	200000a4 	.word	0x200000a4
 8011bf4:	080142d4 	.word	0x080142d4
 8011bf8:	080142f4 	.word	0x080142f4
 8011bfc:	080142b4 	.word	0x080142b4

08011c00 <_close_r>:
 8011c00:	b538      	push	{r3, r4, r5, lr}
 8011c02:	4d06      	ldr	r5, [pc, #24]	; (8011c1c <_close_r+0x1c>)
 8011c04:	2300      	movs	r3, #0
 8011c06:	4604      	mov	r4, r0
 8011c08:	4608      	mov	r0, r1
 8011c0a:	602b      	str	r3, [r5, #0]
 8011c0c:	f7ef fcbb 	bl	8001586 <_close>
 8011c10:	1c43      	adds	r3, r0, #1
 8011c12:	d102      	bne.n	8011c1a <_close_r+0x1a>
 8011c14:	682b      	ldr	r3, [r5, #0]
 8011c16:	b103      	cbz	r3, 8011c1a <_close_r+0x1a>
 8011c18:	6023      	str	r3, [r4, #0]
 8011c1a:	bd38      	pop	{r3, r4, r5, pc}
 8011c1c:	20007150 	.word	0x20007150

08011c20 <__sflush_r>:
 8011c20:	898a      	ldrh	r2, [r1, #12]
 8011c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c26:	4605      	mov	r5, r0
 8011c28:	0710      	lsls	r0, r2, #28
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	d458      	bmi.n	8011ce0 <__sflush_r+0xc0>
 8011c2e:	684b      	ldr	r3, [r1, #4]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	dc05      	bgt.n	8011c40 <__sflush_r+0x20>
 8011c34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	dc02      	bgt.n	8011c40 <__sflush_r+0x20>
 8011c3a:	2000      	movs	r0, #0
 8011c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c42:	2e00      	cmp	r6, #0
 8011c44:	d0f9      	beq.n	8011c3a <__sflush_r+0x1a>
 8011c46:	2300      	movs	r3, #0
 8011c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011c4c:	682f      	ldr	r7, [r5, #0]
 8011c4e:	602b      	str	r3, [r5, #0]
 8011c50:	d032      	beq.n	8011cb8 <__sflush_r+0x98>
 8011c52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011c54:	89a3      	ldrh	r3, [r4, #12]
 8011c56:	075a      	lsls	r2, r3, #29
 8011c58:	d505      	bpl.n	8011c66 <__sflush_r+0x46>
 8011c5a:	6863      	ldr	r3, [r4, #4]
 8011c5c:	1ac0      	subs	r0, r0, r3
 8011c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c60:	b10b      	cbz	r3, 8011c66 <__sflush_r+0x46>
 8011c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011c64:	1ac0      	subs	r0, r0, r3
 8011c66:	2300      	movs	r3, #0
 8011c68:	4602      	mov	r2, r0
 8011c6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c6c:	6a21      	ldr	r1, [r4, #32]
 8011c6e:	4628      	mov	r0, r5
 8011c70:	47b0      	blx	r6
 8011c72:	1c43      	adds	r3, r0, #1
 8011c74:	89a3      	ldrh	r3, [r4, #12]
 8011c76:	d106      	bne.n	8011c86 <__sflush_r+0x66>
 8011c78:	6829      	ldr	r1, [r5, #0]
 8011c7a:	291d      	cmp	r1, #29
 8011c7c:	d82c      	bhi.n	8011cd8 <__sflush_r+0xb8>
 8011c7e:	4a2a      	ldr	r2, [pc, #168]	; (8011d28 <__sflush_r+0x108>)
 8011c80:	40ca      	lsrs	r2, r1
 8011c82:	07d6      	lsls	r6, r2, #31
 8011c84:	d528      	bpl.n	8011cd8 <__sflush_r+0xb8>
 8011c86:	2200      	movs	r2, #0
 8011c88:	6062      	str	r2, [r4, #4]
 8011c8a:	04d9      	lsls	r1, r3, #19
 8011c8c:	6922      	ldr	r2, [r4, #16]
 8011c8e:	6022      	str	r2, [r4, #0]
 8011c90:	d504      	bpl.n	8011c9c <__sflush_r+0x7c>
 8011c92:	1c42      	adds	r2, r0, #1
 8011c94:	d101      	bne.n	8011c9a <__sflush_r+0x7a>
 8011c96:	682b      	ldr	r3, [r5, #0]
 8011c98:	b903      	cbnz	r3, 8011c9c <__sflush_r+0x7c>
 8011c9a:	6560      	str	r0, [r4, #84]	; 0x54
 8011c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c9e:	602f      	str	r7, [r5, #0]
 8011ca0:	2900      	cmp	r1, #0
 8011ca2:	d0ca      	beq.n	8011c3a <__sflush_r+0x1a>
 8011ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ca8:	4299      	cmp	r1, r3
 8011caa:	d002      	beq.n	8011cb2 <__sflush_r+0x92>
 8011cac:	4628      	mov	r0, r5
 8011cae:	f7fe ff97 	bl	8010be0 <_free_r>
 8011cb2:	2000      	movs	r0, #0
 8011cb4:	6360      	str	r0, [r4, #52]	; 0x34
 8011cb6:	e7c1      	b.n	8011c3c <__sflush_r+0x1c>
 8011cb8:	6a21      	ldr	r1, [r4, #32]
 8011cba:	2301      	movs	r3, #1
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	47b0      	blx	r6
 8011cc0:	1c41      	adds	r1, r0, #1
 8011cc2:	d1c7      	bne.n	8011c54 <__sflush_r+0x34>
 8011cc4:	682b      	ldr	r3, [r5, #0]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d0c4      	beq.n	8011c54 <__sflush_r+0x34>
 8011cca:	2b1d      	cmp	r3, #29
 8011ccc:	d001      	beq.n	8011cd2 <__sflush_r+0xb2>
 8011cce:	2b16      	cmp	r3, #22
 8011cd0:	d101      	bne.n	8011cd6 <__sflush_r+0xb6>
 8011cd2:	602f      	str	r7, [r5, #0]
 8011cd4:	e7b1      	b.n	8011c3a <__sflush_r+0x1a>
 8011cd6:	89a3      	ldrh	r3, [r4, #12]
 8011cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cdc:	81a3      	strh	r3, [r4, #12]
 8011cde:	e7ad      	b.n	8011c3c <__sflush_r+0x1c>
 8011ce0:	690f      	ldr	r7, [r1, #16]
 8011ce2:	2f00      	cmp	r7, #0
 8011ce4:	d0a9      	beq.n	8011c3a <__sflush_r+0x1a>
 8011ce6:	0793      	lsls	r3, r2, #30
 8011ce8:	680e      	ldr	r6, [r1, #0]
 8011cea:	bf08      	it	eq
 8011cec:	694b      	ldreq	r3, [r1, #20]
 8011cee:	600f      	str	r7, [r1, #0]
 8011cf0:	bf18      	it	ne
 8011cf2:	2300      	movne	r3, #0
 8011cf4:	eba6 0807 	sub.w	r8, r6, r7
 8011cf8:	608b      	str	r3, [r1, #8]
 8011cfa:	f1b8 0f00 	cmp.w	r8, #0
 8011cfe:	dd9c      	ble.n	8011c3a <__sflush_r+0x1a>
 8011d00:	6a21      	ldr	r1, [r4, #32]
 8011d02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011d04:	4643      	mov	r3, r8
 8011d06:	463a      	mov	r2, r7
 8011d08:	4628      	mov	r0, r5
 8011d0a:	47b0      	blx	r6
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	dc06      	bgt.n	8011d1e <__sflush_r+0xfe>
 8011d10:	89a3      	ldrh	r3, [r4, #12]
 8011d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d16:	81a3      	strh	r3, [r4, #12]
 8011d18:	f04f 30ff 	mov.w	r0, #4294967295
 8011d1c:	e78e      	b.n	8011c3c <__sflush_r+0x1c>
 8011d1e:	4407      	add	r7, r0
 8011d20:	eba8 0800 	sub.w	r8, r8, r0
 8011d24:	e7e9      	b.n	8011cfa <__sflush_r+0xda>
 8011d26:	bf00      	nop
 8011d28:	20400001 	.word	0x20400001

08011d2c <_fflush_r>:
 8011d2c:	b538      	push	{r3, r4, r5, lr}
 8011d2e:	690b      	ldr	r3, [r1, #16]
 8011d30:	4605      	mov	r5, r0
 8011d32:	460c      	mov	r4, r1
 8011d34:	b913      	cbnz	r3, 8011d3c <_fflush_r+0x10>
 8011d36:	2500      	movs	r5, #0
 8011d38:	4628      	mov	r0, r5
 8011d3a:	bd38      	pop	{r3, r4, r5, pc}
 8011d3c:	b118      	cbz	r0, 8011d46 <_fflush_r+0x1a>
 8011d3e:	6983      	ldr	r3, [r0, #24]
 8011d40:	b90b      	cbnz	r3, 8011d46 <_fflush_r+0x1a>
 8011d42:	f7ff f951 	bl	8010fe8 <__sinit>
 8011d46:	4b14      	ldr	r3, [pc, #80]	; (8011d98 <_fflush_r+0x6c>)
 8011d48:	429c      	cmp	r4, r3
 8011d4a:	d11b      	bne.n	8011d84 <_fflush_r+0x58>
 8011d4c:	686c      	ldr	r4, [r5, #4]
 8011d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d0ef      	beq.n	8011d36 <_fflush_r+0xa>
 8011d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011d58:	07d0      	lsls	r0, r2, #31
 8011d5a:	d404      	bmi.n	8011d66 <_fflush_r+0x3a>
 8011d5c:	0599      	lsls	r1, r3, #22
 8011d5e:	d402      	bmi.n	8011d66 <_fflush_r+0x3a>
 8011d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d62:	f7ff f9df 	bl	8011124 <__retarget_lock_acquire_recursive>
 8011d66:	4628      	mov	r0, r5
 8011d68:	4621      	mov	r1, r4
 8011d6a:	f7ff ff59 	bl	8011c20 <__sflush_r>
 8011d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d70:	07da      	lsls	r2, r3, #31
 8011d72:	4605      	mov	r5, r0
 8011d74:	d4e0      	bmi.n	8011d38 <_fflush_r+0xc>
 8011d76:	89a3      	ldrh	r3, [r4, #12]
 8011d78:	059b      	lsls	r3, r3, #22
 8011d7a:	d4dd      	bmi.n	8011d38 <_fflush_r+0xc>
 8011d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d7e:	f7ff f9d2 	bl	8011126 <__retarget_lock_release_recursive>
 8011d82:	e7d9      	b.n	8011d38 <_fflush_r+0xc>
 8011d84:	4b05      	ldr	r3, [pc, #20]	; (8011d9c <_fflush_r+0x70>)
 8011d86:	429c      	cmp	r4, r3
 8011d88:	d101      	bne.n	8011d8e <_fflush_r+0x62>
 8011d8a:	68ac      	ldr	r4, [r5, #8]
 8011d8c:	e7df      	b.n	8011d4e <_fflush_r+0x22>
 8011d8e:	4b04      	ldr	r3, [pc, #16]	; (8011da0 <_fflush_r+0x74>)
 8011d90:	429c      	cmp	r4, r3
 8011d92:	bf08      	it	eq
 8011d94:	68ec      	ldreq	r4, [r5, #12]
 8011d96:	e7da      	b.n	8011d4e <_fflush_r+0x22>
 8011d98:	080142d4 	.word	0x080142d4
 8011d9c:	080142f4 	.word	0x080142f4
 8011da0:	080142b4 	.word	0x080142b4

08011da4 <_lseek_r>:
 8011da4:	b538      	push	{r3, r4, r5, lr}
 8011da6:	4d07      	ldr	r5, [pc, #28]	; (8011dc4 <_lseek_r+0x20>)
 8011da8:	4604      	mov	r4, r0
 8011daa:	4608      	mov	r0, r1
 8011dac:	4611      	mov	r1, r2
 8011dae:	2200      	movs	r2, #0
 8011db0:	602a      	str	r2, [r5, #0]
 8011db2:	461a      	mov	r2, r3
 8011db4:	f7ef fc0e 	bl	80015d4 <_lseek>
 8011db8:	1c43      	adds	r3, r0, #1
 8011dba:	d102      	bne.n	8011dc2 <_lseek_r+0x1e>
 8011dbc:	682b      	ldr	r3, [r5, #0]
 8011dbe:	b103      	cbz	r3, 8011dc2 <_lseek_r+0x1e>
 8011dc0:	6023      	str	r3, [r4, #0]
 8011dc2:	bd38      	pop	{r3, r4, r5, pc}
 8011dc4:	20007150 	.word	0x20007150

08011dc8 <__swhatbuf_r>:
 8011dc8:	b570      	push	{r4, r5, r6, lr}
 8011dca:	460e      	mov	r6, r1
 8011dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dd0:	2900      	cmp	r1, #0
 8011dd2:	b096      	sub	sp, #88	; 0x58
 8011dd4:	4614      	mov	r4, r2
 8011dd6:	461d      	mov	r5, r3
 8011dd8:	da08      	bge.n	8011dec <__swhatbuf_r+0x24>
 8011dda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011dde:	2200      	movs	r2, #0
 8011de0:	602a      	str	r2, [r5, #0]
 8011de2:	061a      	lsls	r2, r3, #24
 8011de4:	d410      	bmi.n	8011e08 <__swhatbuf_r+0x40>
 8011de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dea:	e00e      	b.n	8011e0a <__swhatbuf_r+0x42>
 8011dec:	466a      	mov	r2, sp
 8011dee:	f000 f8ad 	bl	8011f4c <_fstat_r>
 8011df2:	2800      	cmp	r0, #0
 8011df4:	dbf1      	blt.n	8011dda <__swhatbuf_r+0x12>
 8011df6:	9a01      	ldr	r2, [sp, #4]
 8011df8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011dfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e00:	425a      	negs	r2, r3
 8011e02:	415a      	adcs	r2, r3
 8011e04:	602a      	str	r2, [r5, #0]
 8011e06:	e7ee      	b.n	8011de6 <__swhatbuf_r+0x1e>
 8011e08:	2340      	movs	r3, #64	; 0x40
 8011e0a:	2000      	movs	r0, #0
 8011e0c:	6023      	str	r3, [r4, #0]
 8011e0e:	b016      	add	sp, #88	; 0x58
 8011e10:	bd70      	pop	{r4, r5, r6, pc}
	...

08011e14 <__smakebuf_r>:
 8011e14:	898b      	ldrh	r3, [r1, #12]
 8011e16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e18:	079d      	lsls	r5, r3, #30
 8011e1a:	4606      	mov	r6, r0
 8011e1c:	460c      	mov	r4, r1
 8011e1e:	d507      	bpl.n	8011e30 <__smakebuf_r+0x1c>
 8011e20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e24:	6023      	str	r3, [r4, #0]
 8011e26:	6123      	str	r3, [r4, #16]
 8011e28:	2301      	movs	r3, #1
 8011e2a:	6163      	str	r3, [r4, #20]
 8011e2c:	b002      	add	sp, #8
 8011e2e:	bd70      	pop	{r4, r5, r6, pc}
 8011e30:	ab01      	add	r3, sp, #4
 8011e32:	466a      	mov	r2, sp
 8011e34:	f7ff ffc8 	bl	8011dc8 <__swhatbuf_r>
 8011e38:	9900      	ldr	r1, [sp, #0]
 8011e3a:	4605      	mov	r5, r0
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	f7fe ff3b 	bl	8010cb8 <_malloc_r>
 8011e42:	b948      	cbnz	r0, 8011e58 <__smakebuf_r+0x44>
 8011e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e48:	059a      	lsls	r2, r3, #22
 8011e4a:	d4ef      	bmi.n	8011e2c <__smakebuf_r+0x18>
 8011e4c:	f023 0303 	bic.w	r3, r3, #3
 8011e50:	f043 0302 	orr.w	r3, r3, #2
 8011e54:	81a3      	strh	r3, [r4, #12]
 8011e56:	e7e3      	b.n	8011e20 <__smakebuf_r+0xc>
 8011e58:	4b0d      	ldr	r3, [pc, #52]	; (8011e90 <__smakebuf_r+0x7c>)
 8011e5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e5c:	89a3      	ldrh	r3, [r4, #12]
 8011e5e:	6020      	str	r0, [r4, #0]
 8011e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e64:	81a3      	strh	r3, [r4, #12]
 8011e66:	9b00      	ldr	r3, [sp, #0]
 8011e68:	6163      	str	r3, [r4, #20]
 8011e6a:	9b01      	ldr	r3, [sp, #4]
 8011e6c:	6120      	str	r0, [r4, #16]
 8011e6e:	b15b      	cbz	r3, 8011e88 <__smakebuf_r+0x74>
 8011e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e74:	4630      	mov	r0, r6
 8011e76:	f000 f87b 	bl	8011f70 <_isatty_r>
 8011e7a:	b128      	cbz	r0, 8011e88 <__smakebuf_r+0x74>
 8011e7c:	89a3      	ldrh	r3, [r4, #12]
 8011e7e:	f023 0303 	bic.w	r3, r3, #3
 8011e82:	f043 0301 	orr.w	r3, r3, #1
 8011e86:	81a3      	strh	r3, [r4, #12]
 8011e88:	89a0      	ldrh	r0, [r4, #12]
 8011e8a:	4305      	orrs	r5, r0
 8011e8c:	81a5      	strh	r5, [r4, #12]
 8011e8e:	e7cd      	b.n	8011e2c <__smakebuf_r+0x18>
 8011e90:	08010f81 	.word	0x08010f81

08011e94 <memmove>:
 8011e94:	4288      	cmp	r0, r1
 8011e96:	b510      	push	{r4, lr}
 8011e98:	eb01 0402 	add.w	r4, r1, r2
 8011e9c:	d902      	bls.n	8011ea4 <memmove+0x10>
 8011e9e:	4284      	cmp	r4, r0
 8011ea0:	4623      	mov	r3, r4
 8011ea2:	d807      	bhi.n	8011eb4 <memmove+0x20>
 8011ea4:	1e43      	subs	r3, r0, #1
 8011ea6:	42a1      	cmp	r1, r4
 8011ea8:	d008      	beq.n	8011ebc <memmove+0x28>
 8011eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011eb2:	e7f8      	b.n	8011ea6 <memmove+0x12>
 8011eb4:	4402      	add	r2, r0
 8011eb6:	4601      	mov	r1, r0
 8011eb8:	428a      	cmp	r2, r1
 8011eba:	d100      	bne.n	8011ebe <memmove+0x2a>
 8011ebc:	bd10      	pop	{r4, pc}
 8011ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ec6:	e7f7      	b.n	8011eb8 <memmove+0x24>

08011ec8 <_realloc_r>:
 8011ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ecc:	4680      	mov	r8, r0
 8011ece:	4614      	mov	r4, r2
 8011ed0:	460e      	mov	r6, r1
 8011ed2:	b921      	cbnz	r1, 8011ede <_realloc_r+0x16>
 8011ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed8:	4611      	mov	r1, r2
 8011eda:	f7fe beed 	b.w	8010cb8 <_malloc_r>
 8011ede:	b92a      	cbnz	r2, 8011eec <_realloc_r+0x24>
 8011ee0:	f7fe fe7e 	bl	8010be0 <_free_r>
 8011ee4:	4625      	mov	r5, r4
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eec:	f000 f850 	bl	8011f90 <_malloc_usable_size_r>
 8011ef0:	4284      	cmp	r4, r0
 8011ef2:	4607      	mov	r7, r0
 8011ef4:	d802      	bhi.n	8011efc <_realloc_r+0x34>
 8011ef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011efa:	d812      	bhi.n	8011f22 <_realloc_r+0x5a>
 8011efc:	4621      	mov	r1, r4
 8011efe:	4640      	mov	r0, r8
 8011f00:	f7fe feda 	bl	8010cb8 <_malloc_r>
 8011f04:	4605      	mov	r5, r0
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d0ed      	beq.n	8011ee6 <_realloc_r+0x1e>
 8011f0a:	42bc      	cmp	r4, r7
 8011f0c:	4622      	mov	r2, r4
 8011f0e:	4631      	mov	r1, r6
 8011f10:	bf28      	it	cs
 8011f12:	463a      	movcs	r2, r7
 8011f14:	f7fe fe4e 	bl	8010bb4 <memcpy>
 8011f18:	4631      	mov	r1, r6
 8011f1a:	4640      	mov	r0, r8
 8011f1c:	f7fe fe60 	bl	8010be0 <_free_r>
 8011f20:	e7e1      	b.n	8011ee6 <_realloc_r+0x1e>
 8011f22:	4635      	mov	r5, r6
 8011f24:	e7df      	b.n	8011ee6 <_realloc_r+0x1e>
	...

08011f28 <_read_r>:
 8011f28:	b538      	push	{r3, r4, r5, lr}
 8011f2a:	4d07      	ldr	r5, [pc, #28]	; (8011f48 <_read_r+0x20>)
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	4608      	mov	r0, r1
 8011f30:	4611      	mov	r1, r2
 8011f32:	2200      	movs	r2, #0
 8011f34:	602a      	str	r2, [r5, #0]
 8011f36:	461a      	mov	r2, r3
 8011f38:	f7ef faec 	bl	8001514 <_read>
 8011f3c:	1c43      	adds	r3, r0, #1
 8011f3e:	d102      	bne.n	8011f46 <_read_r+0x1e>
 8011f40:	682b      	ldr	r3, [r5, #0]
 8011f42:	b103      	cbz	r3, 8011f46 <_read_r+0x1e>
 8011f44:	6023      	str	r3, [r4, #0]
 8011f46:	bd38      	pop	{r3, r4, r5, pc}
 8011f48:	20007150 	.word	0x20007150

08011f4c <_fstat_r>:
 8011f4c:	b538      	push	{r3, r4, r5, lr}
 8011f4e:	4d07      	ldr	r5, [pc, #28]	; (8011f6c <_fstat_r+0x20>)
 8011f50:	2300      	movs	r3, #0
 8011f52:	4604      	mov	r4, r0
 8011f54:	4608      	mov	r0, r1
 8011f56:	4611      	mov	r1, r2
 8011f58:	602b      	str	r3, [r5, #0]
 8011f5a:	f7ef fb20 	bl	800159e <_fstat>
 8011f5e:	1c43      	adds	r3, r0, #1
 8011f60:	d102      	bne.n	8011f68 <_fstat_r+0x1c>
 8011f62:	682b      	ldr	r3, [r5, #0]
 8011f64:	b103      	cbz	r3, 8011f68 <_fstat_r+0x1c>
 8011f66:	6023      	str	r3, [r4, #0]
 8011f68:	bd38      	pop	{r3, r4, r5, pc}
 8011f6a:	bf00      	nop
 8011f6c:	20007150 	.word	0x20007150

08011f70 <_isatty_r>:
 8011f70:	b538      	push	{r3, r4, r5, lr}
 8011f72:	4d06      	ldr	r5, [pc, #24]	; (8011f8c <_isatty_r+0x1c>)
 8011f74:	2300      	movs	r3, #0
 8011f76:	4604      	mov	r4, r0
 8011f78:	4608      	mov	r0, r1
 8011f7a:	602b      	str	r3, [r5, #0]
 8011f7c:	f7ef fb1f 	bl	80015be <_isatty>
 8011f80:	1c43      	adds	r3, r0, #1
 8011f82:	d102      	bne.n	8011f8a <_isatty_r+0x1a>
 8011f84:	682b      	ldr	r3, [r5, #0]
 8011f86:	b103      	cbz	r3, 8011f8a <_isatty_r+0x1a>
 8011f88:	6023      	str	r3, [r4, #0]
 8011f8a:	bd38      	pop	{r3, r4, r5, pc}
 8011f8c:	20007150 	.word	0x20007150

08011f90 <_malloc_usable_size_r>:
 8011f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f94:	1f18      	subs	r0, r3, #4
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	bfbc      	itt	lt
 8011f9a:	580b      	ldrlt	r3, [r1, r0]
 8011f9c:	18c0      	addlt	r0, r0, r3
 8011f9e:	4770      	bx	lr

08011fa0 <_init>:
 8011fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa2:	bf00      	nop
 8011fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fa6:	bc08      	pop	{r3}
 8011fa8:	469e      	mov	lr, r3
 8011faa:	4770      	bx	lr

08011fac <_fini>:
 8011fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fae:	bf00      	nop
 8011fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fb2:	bc08      	pop	{r3}
 8011fb4:	469e      	mov	lr, r3
 8011fb6:	4770      	bx	lr
