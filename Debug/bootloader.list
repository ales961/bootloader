
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08005eb8  08005eb8  00015eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006270  08006270  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006278  08006278  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800627c  0800627c  0001627c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000003d4  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000046c  2000046c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133ba  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003840  00000000  00000000  00033482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00036cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001040  00000000  00000000  00037eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fb9  00000000  00000000  00038ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a50  00000000  00000000  0005eea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daddf  00000000  00000000  000758f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001506d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bfc  00000000  00000000  00150728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005ea0 	.word	0x08005ea0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	08005ea0 	.word	0x08005ea0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <getVersions>:
uint32_t firstBootFlagAddress2 = CONFIG_2_ADDRESS + 4;
uint32_t notValidFlagAddress2 = CONFIG_2_ADDRESS + 8;
uint32_t versionAddress2 = CONFIG_2_ADDRESS + 12;

static char versionBuf[128];
char* getVersions() { //TODO
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	uint32_t ver1 = FlashReadWord(versionAddress1);
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <getVersions+0x74>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fc12 	bl	8000df8 <FlashReadWord>
 80005d4:	6078      	str	r0, [r7, #4]
	uint32_t ver2 = FlashReadWord(versionAddress2);
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <getVersions+0x78>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fc0c 	bl	8000df8 <FlashReadWord>
 80005e0:	6038      	str	r0, [r7, #0]
	if (ver1 == EMPTY && ver2 == EMPTY) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d105      	bne.n	80005f6 <getVersions+0x32>
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f0:	d101      	bne.n	80005f6 <getVersions+0x32>
		return "No applications in flash\n";
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <getVersions+0x7c>)
 80005f4:	e01c      	b.n	8000630 <getVersions+0x6c>
	} else if (ver1 == EMPTY) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fc:	d106      	bne.n	800060c <getVersions+0x48>
		sprintf(versionBuf, "App 1 version: none\nApp 2 version: %"PRIu32"\n", ver2);
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	4910      	ldr	r1, [pc, #64]	; (8000644 <getVersions+0x80>)
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <getVersions+0x84>)
 8000604:	f005 f84a 	bl	800569c <siprintf>
		return versionBuf;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <getVersions+0x84>)
 800060a:	e011      	b.n	8000630 <getVersions+0x6c>
	} else if (ver2 == EMPTY) {
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000612:	d106      	bne.n	8000622 <getVersions+0x5e>
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: none\n", ver1);
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <getVersions+0x88>)
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <getVersions+0x84>)
 800061a:	f005 f83f 	bl	800569c <siprintf>
		return versionBuf;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <getVersions+0x84>)
 8000620:	e006      	b.n	8000630 <getVersions+0x6c>
	} else {
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: %"PRIu32"\n", ver1, ver2);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	490a      	ldr	r1, [pc, #40]	; (8000650 <getVersions+0x8c>)
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <getVersions+0x84>)
 800062a:	f005 f837 	bl	800569c <siprintf>
		return versionBuf;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <getVersions+0x84>)
	}
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000000c 	.word	0x2000000c
 800063c:	2000001c 	.word	0x2000001c
 8000640:	08005eb8 	.word	0x08005eb8
 8000644:	08005ed4 	.word	0x08005ed4
 8000648:	200000b4 	.word	0x200000b4
 800064c:	08005efc 	.word	0x08005efc
 8000650:	08005f24 	.word	0x08005f24

08000654 <getLatestApplicationAddress>:

uint32_t getLatestApplicationAddress() {
 8000654:	b598      	push	{r3, r4, r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if (FlashReadWord(seqAddress1) < FlashReadWord(seqAddress2)) {
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <getLatestApplicationAddress+0x4c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fbcb 	bl	8000df8 <FlashReadWord>
 8000662:	4604      	mov	r4, r0
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <getLatestApplicationAddress+0x50>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fbc5 	bl	8000df8 <FlashReadWord>
 800066e:	4603      	mov	r3, r0
 8000670:	429c      	cmp	r4, r3
 8000672:	d201      	bcs.n	8000678 <getLatestApplicationAddress+0x24>
		return APP_1_ADDRESS;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <getLatestApplicationAddress+0x54>)
 8000676:	e010      	b.n	800069a <getLatestApplicationAddress+0x46>
	} else if (FlashReadWord(seqAddress2) < FlashReadWord(seqAddress1)) {
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <getLatestApplicationAddress+0x50>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fbbb 	bl	8000df8 <FlashReadWord>
 8000682:	4604      	mov	r4, r0
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <getLatestApplicationAddress+0x4c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fbb5 	bl	8000df8 <FlashReadWord>
 800068e:	4603      	mov	r3, r0
 8000690:	429c      	cmp	r4, r3
 8000692:	d201      	bcs.n	8000698 <getLatestApplicationAddress+0x44>
		return APP_2_ADDRESS;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <getLatestApplicationAddress+0x58>)
 8000696:	e000      	b.n	800069a <getLatestApplicationAddress+0x46>
	} else {
		return 0;
 8000698:	2300      	movs	r3, #0
	}
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd98      	pop	{r3, r4, r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000010 	.word	0x20000010
 80006a8:	0800c000 	.word	0x0800c000
 80006ac:	08104000 	.word	0x08104000

080006b0 <updateConfig>:

void updateConfig() {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 80006b6:	f7ff ffcd 	bl	8000654 <getLatestApplicationAddress>
 80006ba:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_1_ADDRESS) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a21      	ldr	r2, [pc, #132]	; (8000744 <updateConfig+0x94>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d11d      	bne.n	8000700 <updateConfig+0x50>
		EraseSector(CONFIG_2_SECTOR);
 80006c4:	200c      	movs	r0, #12
 80006c6:	f000 fba3 	bl	8000e10 <EraseSector>
		FlashWriteWord(seqAddress2, FlashReadWord(seqAddress1) - 1);
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <updateConfig+0x98>)
 80006cc:	681c      	ldr	r4, [r3, #0]
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <updateConfig+0x9c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fb90 	bl	8000df8 <FlashReadWord>
 80006d8:	4603      	mov	r3, r0
 80006da:	3b01      	subs	r3, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	4620      	mov	r0, r4
 80006e0:	f000 fb6b 	bl	8000dba <FlashWriteWord>
		//FlashWriteWord(firstBootFlagAddress2, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress2, 0xFFFF); // FFFF - not valid (default)
		FlashWriteWord(versionAddress2, FlashReadWord(versionAddress1) + 1);
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <updateConfig+0xa0>)
 80006e6:	681c      	ldr	r4, [r3, #0]
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <updateConfig+0xa4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fb83 	bl	8000df8 <FlashReadWord>
 80006f2:	4603      	mov	r3, r0
 80006f4:	3301      	adds	r3, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	4620      	mov	r0, r4
 80006fa:	f000 fb5e 	bl	8000dba <FlashWriteWord>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
		//FlashWriteWord(firstBootFlagAddress1, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress1, 0xFFFF); // FFFF - not valid (default)
		FlashWriteWord(versionAddress1, FlashReadWord(versionAddress2) + 1);
	}
}
 80006fe:	e01c      	b.n	800073a <updateConfig+0x8a>
		EraseSector(CONFIG_1_SECTOR);
 8000700:	2002      	movs	r0, #2
 8000702:	f000 fb85 	bl	8000e10 <EraseSector>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <updateConfig+0x9c>)
 8000708:	681c      	ldr	r4, [r3, #0]
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <updateConfig+0x98>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fb72 	bl	8000df8 <FlashReadWord>
 8000714:	4603      	mov	r3, r0
 8000716:	3b01      	subs	r3, #1
 8000718:	4619      	mov	r1, r3
 800071a:	4620      	mov	r0, r4
 800071c:	f000 fb4d 	bl	8000dba <FlashWriteWord>
		FlashWriteWord(versionAddress1, FlashReadWord(versionAddress2) + 1);
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <updateConfig+0xa4>)
 8000722:	681c      	ldr	r4, [r3, #0]
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <updateConfig+0xa0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fb65 	bl	8000df8 <FlashReadWord>
 800072e:	4603      	mov	r3, r0
 8000730:	3301      	adds	r3, #1
 8000732:	4619      	mov	r1, r3
 8000734:	4620      	mov	r0, r4
 8000736:	f000 fb40 	bl	8000dba <FlashWriteWord>
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	bf00      	nop
 8000744:	0800c000 	.word	0x0800c000
 8000748:	20000010 	.word	0x20000010
 800074c:	20000000 	.word	0x20000000
 8000750:	2000001c 	.word	0x2000001c
 8000754:	2000000c 	.word	0x2000000c

08000758 <rollbackConfig>:

void rollbackConfig() {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 800075e:	f7ff ff79 	bl	8000654 <getLatestApplicationAddress>
 8000762:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_1_ADDRESS)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a09      	ldr	r2, [pc, #36]	; (800078c <rollbackConfig+0x34>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d103      	bne.n	8000774 <rollbackConfig+0x1c>
		EraseSector(CONFIG_1_SECTOR);
 800076c:	2002      	movs	r0, #2
 800076e:	f000 fb4f 	bl	8000e10 <EraseSector>
	else if (latestAppAddress == APP_2_ADDRESS)
		EraseSector(CONFIG_2_SECTOR);
}
 8000772:	e006      	b.n	8000782 <rollbackConfig+0x2a>
	else if (latestAppAddress == APP_2_ADDRESS)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a06      	ldr	r2, [pc, #24]	; (8000790 <rollbackConfig+0x38>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d102      	bne.n	8000782 <rollbackConfig+0x2a>
		EraseSector(CONFIG_2_SECTOR);
 800077c:	200c      	movs	r0, #12
 800077e:	f000 fb47 	bl	8000e10 <EraseSector>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	0800c000 	.word	0x0800c000
 8000790:	08104000 	.word	0x08104000

08000794 <validateApplications>:

void validateApplications() {
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
	uint32_t nValid1 = FlashReadWord(notValidFlagAddress1);
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <validateApplications+0x68>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fb2a 	bl	8000df8 <FlashReadWord>
 80007a4:	60f8      	str	r0, [r7, #12]
	uint32_t firstBoot1 = FlashReadWord(firstBootFlagAddress1);
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <validateApplications+0x6c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fb24 	bl	8000df8 <FlashReadWord>
 80007b0:	60b8      	str	r0, [r7, #8]
	uint32_t nValid2 = FlashReadWord(notValidFlagAddress2);
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <validateApplications+0x70>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fb1e 	bl	8000df8 <FlashReadWord>
 80007bc:	6078      	str	r0, [r7, #4]
	uint32_t firstBoot2 = FlashReadWord(firstBootFlagAddress2);
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <validateApplications+0x74>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fb18 	bl	8000df8 <FlashReadWord>
 80007c8:	6038      	str	r0, [r7, #0]
	if (nValid1 == EMPTY && firstBoot1 == 0)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d0:	d105      	bne.n	80007de <validateApplications+0x4a>
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <validateApplications+0x4a>
		EraseSector(CONFIG_1_SECTOR);
 80007d8:	2002      	movs	r0, #2
 80007da:	f000 fb19 	bl	8000e10 <EraseSector>
	if (nValid2 == EMPTY && firstBoot2 == 0)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e4:	d105      	bne.n	80007f2 <validateApplications+0x5e>
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <validateApplications+0x5e>
		EraseSector(CONFIG_2_SECTOR);
 80007ec:	200c      	movs	r0, #12
 80007ee:	f000 fb0f 	bl	8000e10 <EraseSector>
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004
 8000804:	20000018 	.word	0x20000018
 8000808:	20000014 	.word	0x20000014

0800080c <jumpToApp>:

void jumpToApp() {
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
	  uint32_t address = getLatestApplicationAddress();
 8000812:	f7ff ff1f 	bl	8000654 <getLatestApplicationAddress>
 8000816:	6178      	str	r0, [r7, #20]
	  if (address == APP_1_ADDRESS)
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	4a30      	ldr	r2, [pc, #192]	; (80008dc <jumpToApp+0xd0>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d106      	bne.n	800082e <jumpToApp+0x22>
		  FlashWriteWord(firstBootFlagAddress1, 0);
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <jumpToApp+0xd4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fac7 	bl	8000dba <FlashWriteWord>
 800082c:	e009      	b.n	8000842 <jumpToApp+0x36>
	  else if (address == APP_2_ADDRESS)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	4a2c      	ldr	r2, [pc, #176]	; (80008e4 <jumpToApp+0xd8>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d14e      	bne.n	80008d4 <jumpToApp+0xc8>
		  FlashWriteWord(firstBootFlagAddress2, 0);
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <jumpToApp+0xdc>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fabc 	bl	8000dba <FlashWriteWord>
	  else return;

	  void(*app_reset_handler)();

	  //shut down any tasks remaining
	  HAL_TIM_Base_Stop_IT(&htim6);
 8000842:	482a      	ldr	r0, [pc, #168]	; (80008ec <jumpToApp+0xe0>)
 8000844:	f003 fad2 	bl	8003dec <HAL_TIM_Base_Stop_IT>
	  uartDisableInterruption();
 8000848:	f001 fa78 	bl	8001d3c <uartDisableInterruption>

	  __HAL_RCC_GPIOC_CLK_DISABLE();
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <jumpToApp+0xe4>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	4a27      	ldr	r2, [pc, #156]	; (80008f0 <jumpToApp+0xe4>)
 8000852:	f023 0304 	bic.w	r3, r3, #4
 8000856:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <jumpToApp+0xe4>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	4a24      	ldr	r2, [pc, #144]	; (80008f0 <jumpToApp+0xe4>)
 800085e:	f023 0308 	bic.w	r3, r3, #8
 8000862:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <jumpToApp+0xe4>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <jumpToApp+0xe4>)
 800086a:	f023 0302 	bic.w	r3, r3, #2
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <jumpToApp+0xe4>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000874:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <jumpToApp+0xe4>)
 8000876:	f023 0301 	bic.w	r3, r3, #1
 800087a:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 800087c:	f003 f8fe 	bl	8003a7c <HAL_RCC_DeInit>
	  HAL_DeInit();// to disable all the peripherals
 8000880:	f001 fd58 	bl	8002334 <HAL_DeInit>

	  SysTick->CTRL = 0;//to turn off the systick
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <jumpToApp+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <jumpToApp+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <jumpToApp+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	2301      	movs	r3, #1
 8000898:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	f383 8810 	msr	PRIMASK, r3
}
 80008a0:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80008a2:	b672      	cpsid	i
}
 80008a4:	bf00      	nop
	  //disable interrupts
	  __set_PRIMASK(1);
	  __disable_irq();

	  //__DMB(); // Data Memory Barrier to ensure write to memory is completed
	  SCB->VTOR = address;//change this
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <jumpToApp+0xec>)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	6093      	str	r3, [r2, #8]
      //__DSB(); // Data Synchronization Barrier to ensure all subsequence instructions use the new configuation

	  //configure the MSP by reading the value from the base address
	  uint32_t msp_value = *(__IO uint32_t*) address;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f383 8808 	msr	MSP, r3
}
 80008bc:	bf00      	nop

	  __set_MSP(msp_value);

	  uint32_t resethandler_address = *(__IO uint32_t*) (address + 4);
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3304      	adds	r3, #4
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	60fb      	str	r3, [r7, #12]

	  //app_reset_handler = (void*)resethandler_address;
	  app_reset_handler = (void (*)(void)) (resethandler_address);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80008ca:	b662      	cpsie	i
}
 80008cc:	bf00      	nop

	  //jump to reset handler of the user app.
	  //NVIC_SystemReset(); //?????
	  __enable_irq();
	  app_reset_handler();
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4798      	blx	r3
 80008d2:	e000      	b.n	80008d6 <jumpToApp+0xca>
	  else return;
 80008d4:	bf00      	nop
}
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	0800c000 	.word	0x0800c000
 80008e0:	20000004 	.word	0x20000004
 80008e4:	08104000 	.word	0x08104000
 80008e8:	20000014 	.word	0x20000014
 80008ec:	20000214 	.word	0x20000214
 80008f0:	40023800 	.word	0x40023800
 80008f4:	e000e010 	.word	0xe000e010
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <eraseLogicalBank1>:

void eraseLogicalBank1() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	EraseSector(FLASH_SECTOR_3);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 fa85 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_4);
 8000906:	2004      	movs	r0, #4
 8000908:	f000 fa82 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_5);
 800090c:	2005      	movs	r0, #5
 800090e:	f000 fa7f 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_6);
 8000912:	2006      	movs	r0, #6
 8000914:	f000 fa7c 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_7);
 8000918:	2007      	movs	r0, #7
 800091a:	f000 fa79 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_8);
 800091e:	2008      	movs	r0, #8
 8000920:	f000 fa76 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_9);
 8000924:	2009      	movs	r0, #9
 8000926:	f000 fa73 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_10);
 800092a:	200a      	movs	r0, #10
 800092c:	f000 fa70 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_11);
 8000930:	200b      	movs	r0, #11
 8000932:	f000 fa6d 	bl	8000e10 <EraseSector>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}

0800093a <eraseLogicalBank2>:

void eraseLogicalBank2() {
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
	EraseSector(FLASH_SECTOR_13);
 800093e:	200d      	movs	r0, #13
 8000940:	f000 fa66 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_14);
 8000944:	200e      	movs	r0, #14
 8000946:	f000 fa63 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_15);
 800094a:	200f      	movs	r0, #15
 800094c:	f000 fa60 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_16);
 8000950:	2010      	movs	r0, #16
 8000952:	f000 fa5d 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_17);
 8000956:	2011      	movs	r0, #17
 8000958:	f000 fa5a 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_18);
 800095c:	2012      	movs	r0, #18
 800095e:	f000 fa57 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_19);
 8000962:	2013      	movs	r0, #19
 8000964:	f000 fa54 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_20);
 8000968:	2014      	movs	r0, #20
 800096a:	f000 fa51 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_21);
 800096e:	2015      	movs	r0, #21
 8000970:	f000 fa4e 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_22);
 8000974:	2016      	movs	r0, #22
 8000976:	f000 fa4b 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_23);
 800097a:	2017      	movs	r0, #23
 800097c:	f000 fa48 	bl	8000e10 <EraseSector>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <eraseLogicalBank>:

void eraseLogicalBank() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 800098a:	f7ff fe63 	bl	8000654 <getLatestApplicationAddress>
 800098e:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_2_ADDRESS) eraseLogicalBank2();
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a06      	ldr	r2, [pc, #24]	; (80009ac <eraseLogicalBank+0x28>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d102      	bne.n	800099e <eraseLogicalBank+0x1a>
 8000998:	f7ff ffcf 	bl	800093a <eraseLogicalBank2>
	else eraseLogicalBank1();
}
 800099c:	e001      	b.n	80009a2 <eraseLogicalBank+0x1e>
	else eraseLogicalBank1();
 800099e:	f7ff ffad 	bl	80008fc <eraseLogicalBank1>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08104000 	.word	0x08104000

080009b0 <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 80009ba:	200c      	movs	r0, #12
 80009bc:	f004 fd6e 	bl	800549c <malloc>
 80009c0:	4603      	mov	r3, r0
 80009c2:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f004 fd68 	bl	800549c <malloc>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f000 f886 	bl	8000aec <bufferClear>
    return buffer;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	889a      	ldrh	r2, [r3, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	88db      	ldrh	r3, [r3, #6]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d21f      	bcs.n	8000a42 <bufferPush+0x58>
        disableInt();
 8000a02:	f000 f8e7 	bl	8000bd4 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	8812      	ldrh	r2, [r2, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	78fa      	ldrb	r2, [r7, #3]
 8000a12:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	88d2      	ldrh	r2, [r2, #6]
 8000a1e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a22:	fb01 f202 	mul.w	r2, r1, r2
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	889b      	ldrh	r3, [r3, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	809a      	strh	r2, [r3, #4]

        enableInt();
 8000a3a:	f000 f8df 	bl	8000bfc <enableInt>
        return 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <bufferPush+0x5a>
    } else
        return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	4613      	mov	r3, r2
 8000a58:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	82fb      	strh	r3, [r7, #22]
 8000a5e:	e00f      	b.n	8000a80 <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 8000a60:	8afb      	ldrh	r3, [r7, #22]
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff ffbd 	bl	80009ea <bufferPush>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <bufferPushValues+0x2e>
            return pushed;
 8000a76:	8afb      	ldrh	r3, [r7, #22]
 8000a78:	e007      	b.n	8000a8a <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8000a7a:	8afb      	ldrh	r3, [r7, #22]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	82fb      	strh	r3, [r7, #22]
 8000a80:	8afa      	ldrh	r2, [r7, #22]
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d3eb      	bcc.n	8000a60 <bufferPushValues+0x14>
    }
    return pushed;
 8000a88:	8afb      	ldrh	r3, [r7, #22]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b084      	sub	sp, #16
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	889b      	ldrh	r3, [r3, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <bufferPop+0x14>
        return 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e01e      	b.n	8000ae4 <bufferPop+0x52>

    disableInt();
 8000aa6:	f000 f895 	bl	8000bd4 <disableInt>

    buffer->size--;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	889b      	ldrh	r3, [r3, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	8852      	ldrh	r2, [r2, #2]
 8000abe:	4413      	add	r3, r2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	885b      	ldrh	r3, [r3, #2]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	88d2      	ldrh	r2, [r2, #6]
 8000ace:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ad2:	fb01 f202 	mul.w	r2, r1, r2
 8000ad6:	1a9b      	subs	r3, r3, r2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	805a      	strh	r2, [r3, #2]

    enableInt();
 8000ade:	f000 f88d 	bl	8000bfc <enableInt>

    return value;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <bufferClear>:

uint8_t bufferPeek(const Buffer * const buffer) {
    return buffer->data[buffer->ptrOut];
}

void bufferClear(Buffer * const buffer) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    disableInt();
 8000af4:	f000 f86e 	bl	8000bd4 <disableInt>
    buffer->size = 0;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	805a      	strh	r2, [r3, #2]
    enableInt();
 8000b0a:	f000 f877 	bl	8000bfc <enableInt>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	889b      	ldrh	r3, [r3, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf14      	ite	ne
 8000b26:	2301      	movne	r3, #1
 8000b28:	2300      	moveq	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	4613      	mov	r3, r2
 8000b44:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff ffe5 	bl	8000b16 <bufferHasValues>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <bufferPopValues+0x1e>
        return 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e01d      	b.n	8000b92 <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f000 f81f 	bl	8000b9a <bufferGetSize>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 8000b60:	8afa      	ldrh	r2, [r7, #22]
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d901      	bls.n	8000b6c <bufferPopValues+0x34>
        popSize = bufSize;
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	82bb      	strh	r3, [r7, #20]
 8000b70:	e00a      	b.n	8000b88 <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 8000b72:	8abb      	ldrh	r3, [r7, #20]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	18d4      	adds	r4, r2, r3
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f7ff ff8a 	bl	8000a92 <bufferPop>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 8000b82:	8abb      	ldrh	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	82bb      	strh	r3, [r7, #20]
 8000b88:	8aba      	ldrh	r2, [r7, #20]
 8000b8a:	8afb      	ldrh	r3, [r7, #22]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d3f0      	bcc.n	8000b72 <bufferPopValues+0x3a>
    return popSize;
 8000b90:	8afb      	ldrh	r3, [r7, #22]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	371c      	adds	r7, #28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}

08000b9a <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
    return buffer->size;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	889b      	ldrh	r3, [r3, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	88da      	ldrh	r2, [r3, #6]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	889b      	ldrh	r3, [r3, #4]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <disableInt>:
		bufferPush(destination, var);
	}
	return 1;
}

static void disableInt() {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000bda:	f3ef 8310 	mrs	r3, PRIMASK
 8000bde:	607b      	str	r3, [r7, #4]
  return(result);
 8000be0:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <disableInt+0x24>)
 8000be4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000be6:	b672      	cpsid	i
}
 8000be8:	bf00      	nop
    __disable_irq();
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000134 	.word	0x20000134

08000bfc <enableInt>:

static void enableInt() {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <enableInt+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f383 8810 	msr	PRIMASK, r3
}
 8000c0e:	bf00      	nop
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	20000134 	.word	0x20000134

08000c20 <commandCreate>:
};

static uint8_t parseInt(const char *str, uint32_t *result);
static uint8_t parseOnOffStatus(const char *str, OnOffStatus *result);

Command * commandCreate(const char * const name, const CommandAction action, const CommandArgument argType) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71fb      	strb	r3, [r7, #7]
    size_t nameLen = strlen(name);
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff fae8 	bl	8000204 <strlen>
 8000c34:	61f8      	str	r0, [r7, #28]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 fc2e 	bl	800549c <malloc>
 8000c40:	4603      	mov	r3, r0
 8000c42:	61bb      	str	r3, [r7, #24]
    strcpy(nameCopy, name);
 8000c44:	68f9      	ldr	r1, [r7, #12]
 8000c46:	69b8      	ldr	r0, [r7, #24]
 8000c48:	f004 fd48 	bl	80056dc <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 8000c4c:	200c      	movs	r0, #12
 8000c4e:	f004 fc25 	bl	800549c <malloc>
 8000c52:	4603      	mov	r3, r0
 8000c54:	617b      	str	r3, [r7, #20]
    command->name = nameCopy;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	601a      	str	r2, [r3, #0]
    command->action = action;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	605a      	str	r2, [r3, #4]
    command->argType = argType;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	721a      	strb	r2, [r3, #8]
    return command;
 8000c68:	697b      	ldr	r3, [r7, #20]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <commandExecute>:

const char * commandExecute(const Command * const command, const char * const argument) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    if (command == NULL || command->action == NULL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <commandExecute+0x18>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <commandExecute+0x1c>
        return NULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e037      	b.n	8000d00 <commandExecute+0x8c>
    switch (command->argType) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7a1b      	ldrb	r3, [r3, #8]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d02c      	beq.n	8000cf2 <commandExecute+0x7e>
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	dc30      	bgt.n	8000cfe <commandExecute+0x8a>
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <commandExecute+0x32>
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d013      	beq.n	8000ccc <commandExecute+0x58>
 8000ca4:	e02b      	b.n	8000cfe <commandExecute+0x8a>
        case INT:
        {
            uint32_t intArg;
            if (!parseInt(argument, &intArg))
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	6838      	ldr	r0, [r7, #0]
 8000cae:	f000 f831 	bl	8000d14 <parseInt>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <commandExecute+0x48>
                return "The argument must be integer\n";
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <commandExecute+0x94>)
 8000cba:	e021      	b.n	8000d00 <commandExecute+0x8c>
            return (*command->action)(&intArg);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f107 020c 	add.w	r2, r7, #12
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4798      	blx	r3
 8000cc8:	4603      	mov	r3, r0
 8000cca:	e019      	b.n	8000d00 <commandExecute+0x8c>
        }
        case ON_OFF:
        {
            OnOffStatus statusArg;
            if (!parseOnOffStatus(argument, &statusArg))
 8000ccc:	f107 030b 	add.w	r3, r7, #11
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6838      	ldr	r0, [r7, #0]
 8000cd4:	f000 f83a 	bl	8000d4c <parseOnOffStatus>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <commandExecute+0x6e>
                return "The argument must be 'on' or 'off'\n";
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <commandExecute+0x98>)
 8000ce0:	e00e      	b.n	8000d00 <commandExecute+0x8c>
            return (*command->action)(&statusArg);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f107 020b 	add.w	r2, r7, #11
 8000cea:	4610      	mov	r0, r2
 8000cec:	4798      	blx	r3
 8000cee:	4603      	mov	r3, r0
 8000cf0:	e006      	b.n	8000d00 <commandExecute+0x8c>
        }
        case NONE:
            return (*command->action)(NULL);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	4798      	blx	r3
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	e000      	b.n	8000d00 <commandExecute+0x8c>
        default:
            return "Unknown argument type\n";
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <commandExecute+0x9c>)
    }
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	08005f4c 	.word	0x08005f4c
 8000d0c:	08005f6c 	.word	0x08005f6c
 8000d10:	08005f90 	.word	0x08005f90

08000d14 <parseInt>:

static uint8_t parseInt(const char * const str, uint32_t * const result) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
    char *endPtr = NULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
    *result = strtoul(str, &(endPtr), 10);
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	220a      	movs	r2, #10
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f004 fd50 	bl	80057d0 <strtoul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	601a      	str	r2, [r3, #0]
    if (endPtr == str) {
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d101      	bne.n	8000d42 <parseInt+0x2e>
        return 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <parseInt+0x30>
    }
    return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <parseOnOffStatus>:

static uint8_t parseOnOffStatus(const char *str, OnOffStatus * const result) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
    if (strcmp(str, "on") == 0) {
 8000d56:	490e      	ldr	r1, [pc, #56]	; (8000d90 <parseOnOffStatus+0x44>)
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fa49 	bl	80001f0 <strcmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d104      	bne.n	8000d6e <parseOnOffStatus+0x22>
        *result = ON;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
        return 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00c      	b.n	8000d88 <parseOnOffStatus+0x3c>
    } else if (strcmp(str, "off") == 0) {
 8000d6e:	4909      	ldr	r1, [pc, #36]	; (8000d94 <parseOnOffStatus+0x48>)
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fa3d 	bl	80001f0 <strcmp>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <parseOnOffStatus+0x3a>
        *result = OFF;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
        return 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <parseOnOffStatus+0x3c>
    }
    return 0;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	08005fa8 	.word	0x08005fa8
 8000d94:	08005fac 	.word	0x08005fac

08000d98 <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <commandGetName+0x12>
        return NULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e001      	b.n	8000dae <commandGetName+0x16>
    return command->name;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <FlashWriteWord>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
	HAL_FLASH_Lock();
}

void FlashWriteWord(uint32_t Address, uint32_t Data) {
 8000dba:	b5b0      	push	{r4, r5, r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 8000dc8:	f001 fd92 	bl	80028f0 <HAL_FLASH_Unlock>
	while (status != HAL_OK)
 8000dcc:	e00b      	b.n	8000de6 <FlashWriteWord+0x2c>
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	461c      	mov	r4, r3
 8000dd4:	4615      	mov	r5, r2
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	462b      	mov	r3, r5
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f001 fd33 	bl	8002848 <HAL_FLASH_Program>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1f0      	bne.n	8000dce <FlashWriteWord+0x14>
	HAL_FLASH_Lock();
 8000dec:	f001 fda2 	bl	8002934 <HAL_FLASH_Lock>
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bdb0      	pop	{r4, r5, r7, pc}

08000df8 <FlashReadWord>:

uint8_t FlashReadByte(uint32_t Address) {
    return (*(__IO uint8_t*)Address);
}

uint32_t FlashReadWord(uint32_t Address) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    return (*(__IO uint32_t*)Address);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <EraseSector>:

void EraseSector(uint32_t Sector) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 8000e1c:	f001 fd68 	bl	80028f0 <HAL_FLASH_Unlock>
	uint32_t SectorError;
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <EraseSector+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Sector = Sector;
 8000e26:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <EraseSector+0x4c>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = 1 ;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <EraseSector+0x4c>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	60da      	str	r2, [r3, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <EraseSector+0x4c>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	611a      	str	r2, [r3, #16]
	while (status != HAL_OK)
 8000e38:	e007      	b.n	8000e4a <EraseSector+0x3a>
		status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <EraseSector+0x4c>)
 8000e42:	f001 fec7 	bl	8002bd4 <HAL_FLASHEx_Erase>
 8000e46:	4603      	mov	r3, r0
 8000e48:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f4      	bne.n	8000e3a <EraseSector+0x2a>
	HAL_FLASH_Lock();
 8000e50:	f001 fd70 	bl	8002934 <HAL_FLASH_Lock>
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000138 	.word	0x20000138

08000e60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <asciiToHex>:
uint8_t calculation_check_sum = 0;//чек-сумма
uint8_t tempBuf[8];

uint8_t firstFirmwarePlaceCheck = 1;

void asciiToHex(uint8_t* buff, uint8_t count) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i=0; i<count;i++) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e023      	b.n	8000f26 <asciiToHex+0x5a>
		if(buff[i] <= '9' && buff[i] >= '0' ) {
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b39      	cmp	r3, #57	; 0x39
 8000ee8:	d810      	bhi.n	8000f0c <asciiToHex+0x40>
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ef4:	d90a      	bls.n	8000f0c <asciiToHex+0x40>
			buff[i] -= 0x30;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	440b      	add	r3, r1
 8000f04:	3a30      	subs	r2, #48	; 0x30
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e009      	b.n	8000f20 <asciiToHex+0x54>
		}
		else {
			buff[i] = buff[i] - 0x41 + 10;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	440b      	add	r3, r1
 8000f1a:	3a37      	subs	r2, #55	; 0x37
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<count;i++) {
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	3301      	adds	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d3d7      	bcc.n	8000ede <asciiToHex+0x12>
		}
	}
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <fillBuffer>:

void fillBuffer(uint8_t* destination, uint8_t* source, uint16_t* startPtr, uint16_t count) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	807b      	strh	r3, [r7, #2]
	for (int16_t i = 0; i < count; i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	82fb      	strh	r3, [r7, #22]
 8000f4e:	e014      	b.n	8000f7a <fillBuffer+0x3e>
		destination[i] = source[*startPtr + i];
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	441a      	add	r2, r3
 8000f62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f66:	68f9      	ldr	r1, [r7, #12]
 8000f68:	440b      	add	r3, r1
 8000f6a:	7812      	ldrb	r2, [r2, #0]
 8000f6c:	701a      	strb	r2, [r3, #0]
	for (int16_t i = 0; i < count; i++) {
 8000f6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3301      	adds	r3, #1
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	82fb      	strh	r3, [r7, #22]
 8000f7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbe5      	blt.n	8000f50 <fillBuffer+0x14>
	}
	*startPtr += count;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	881a      	ldrh	r2, [r3, #0]
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	801a      	strh	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <flashHex>:

uint8_t flashHex(uint8_t* flashBuf, uint16_t size) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
	uint16_t ptr = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	81bb      	strh	r3, [r7, #12]
	while (ptr < size) {
 8000fb0:	e184      	b.n	80012bc <flashHex+0x31c>
		if(flashBuf[ptr] == ':') {
 8000fb2:	89bb      	ldrh	r3, [r7, #12]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b3a      	cmp	r3, #58	; 0x3a
 8000fbe:	f040 8179 	bne.w	80012b4 <flashHex+0x314>
			ptr++;
 8000fc2:	89bb      	ldrh	r3, [r7, #12]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	81bb      	strh	r3, [r7, #12]
			fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2308      	movs	r3, #8
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	488d      	ldr	r0, [pc, #564]	; (8001208 <flashHex+0x268>)
 8000fd4:	f7ff ffb2 	bl	8000f3c <fillBuffer>
			asciiToHex(tempBuf, 8);
 8000fd8:	2108      	movs	r1, #8
 8000fda:	488b      	ldr	r0, [pc, #556]	; (8001208 <flashHex+0x268>)
 8000fdc:	f7ff ff76 	bl	8000ecc <asciiToHex>

			size_data = 2*(tempBuf[1] + 16*tempBuf[0]);//находим размер данных
 8000fe0:	4b89      	ldr	r3, [pc, #548]	; (8001208 <flashHex+0x268>)
 8000fe2:	785b      	ldrb	r3, [r3, #1]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b88      	ldr	r3, [pc, #544]	; (8001208 <flashHex+0x268>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	4413      	add	r3, r2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b85      	ldr	r3, [pc, #532]	; (800120c <flashHex+0x26c>)
 8000ff6:	701a      	strb	r2, [r3, #0]
			address_data = tempBuf[5] + 16*tempBuf[4] + 256*tempBuf[3] + 4096*tempBuf[2];//адрес
 8000ff8:	4b83      	ldr	r3, [pc, #524]	; (8001208 <flashHex+0x268>)
 8000ffa:	795b      	ldrb	r3, [r3, #5]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b82      	ldr	r3, [pc, #520]	; (8001208 <flashHex+0x268>)
 8001000:	78db      	ldrb	r3, [r3, #3]
 8001002:	b299      	uxth	r1, r3
 8001004:	4b80      	ldr	r3, [pc, #512]	; (8001208 <flashHex+0x268>)
 8001006:	789b      	ldrb	r3, [r3, #2]
 8001008:	b29b      	uxth	r3, r3
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	b29b      	uxth	r3, r3
 800100e:	440b      	add	r3, r1
 8001010:	b29b      	uxth	r3, r3
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	b299      	uxth	r1, r3
 8001016:	4b7c      	ldr	r3, [pc, #496]	; (8001208 <flashHex+0x268>)
 8001018:	791b      	ldrb	r3, [r3, #4]
 800101a:	b29b      	uxth	r3, r3
 800101c:	440b      	add	r3, r1
 800101e:	b29b      	uxth	r3, r3
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	b29b      	uxth	r3, r3
 8001024:	4413      	add	r3, r2
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b79      	ldr	r3, [pc, #484]	; (8001210 <flashHex+0x270>)
 800102a:	801a      	strh	r2, [r3, #0]
			type_data = tempBuf[7] + 16*tempBuf[6];//и тип
 800102c:	4b76      	ldr	r3, [pc, #472]	; (8001208 <flashHex+0x268>)
 800102e:	79da      	ldrb	r2, [r3, #7]
 8001030:	4b75      	ldr	r3, [pc, #468]	; (8001208 <flashHex+0x268>)
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4413      	add	r3, r2
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b75      	ldr	r3, [pc, #468]	; (8001214 <flashHex+0x274>)
 800103e:	701a      	strb	r2, [r3, #0]

			calculation_check_sum = size_data/2 + (uint8_t)address_data + (uint8_t)(address_data>>8) + type_data;//считаем чек сумму
 8001040:	4b72      	ldr	r3, [pc, #456]	; (800120c <flashHex+0x26c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b71      	ldr	r3, [pc, #452]	; (8001210 <flashHex+0x270>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4413      	add	r3, r2
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <flashHex+0x270>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	0a1b      	lsrs	r3, r3, #8
 8001058:	b29b      	uxth	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4413      	add	r3, r2
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b6c      	ldr	r3, [pc, #432]	; (8001214 <flashHex+0x274>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4413      	add	r3, r2
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b6b      	ldr	r3, [pc, #428]	; (8001218 <flashHex+0x278>)
 800106a:	701a      	strb	r2, [r3, #0]

			if(type_data == 0x00) {
 800106c:	4b69      	ldr	r3, [pc, #420]	; (8001214 <flashHex+0x274>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	f040 8098 	bne.w	80011a6 <flashHex+0x206>
				while(size_data > 0) {
 8001076:	e06b      	b.n	8001150 <flashHex+0x1b0>
					fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8001078:	f107 020c 	add.w	r2, r7, #12
 800107c:	2308      	movs	r3, #8
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4861      	ldr	r0, [pc, #388]	; (8001208 <flashHex+0x268>)
 8001082:	f7ff ff5b 	bl	8000f3c <fillBuffer>
					asciiToHex(tempBuf, 8);
 8001086:	2108      	movs	r1, #8
 8001088:	485f      	ldr	r0, [pc, #380]	; (8001208 <flashHex+0x268>)
 800108a:	f7ff ff1f 	bl	8000ecc <asciiToHex>


					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e024      	b.n	80010de <flashHex+0x13e>
						tempBuf[i] <<= 4;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	4a5c      	ldr	r2, [pc, #368]	; (8001208 <flashHex+0x268>)
 8001098:	5cd2      	ldrb	r2, [r2, r3]
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d1      	uxtb	r1, r2
 80010a0:	4a59      	ldr	r2, [pc, #356]	; (8001208 <flashHex+0x268>)
 80010a2:	54d1      	strb	r1, [r2, r3]
						tempBuf[i] = tempBuf[i] | tempBuf[i+1];
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	4a58      	ldr	r2, [pc, #352]	; (8001208 <flashHex+0x268>)
 80010a8:	5cd1      	ldrb	r1, [r2, r3]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a56      	ldr	r2, [pc, #344]	; (8001208 <flashHex+0x268>)
 80010b0:	5cd2      	ldrb	r2, [r2, r3]
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	b2d1      	uxtb	r1, r2
 80010b8:	4a53      	ldr	r2, [pc, #332]	; (8001208 <flashHex+0x268>)
 80010ba:	54d1      	strb	r1, [r2, r3]
						program_data |= tempBuf[i] <<(i*4);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	4a52      	ldr	r2, [pc, #328]	; (8001208 <flashHex+0x268>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	461a      	mov	r2, r3
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b53      	ldr	r3, [pc, #332]	; (800121c <flashHex+0x27c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <flashHex+0x27c>)
 80010d6:	6013      	str	r3, [r2, #0]
					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	3302      	adds	r3, #2
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b07      	cmp	r3, #7
 80010e2:	d9d7      	bls.n	8001094 <flashHex+0xf4>
					}

					FlashWriteWord(extented_linear_adress + address_data, program_data);
 80010e4:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <flashHex+0x270>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <flashHex+0x280>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a4a      	ldr	r2, [pc, #296]	; (800121c <flashHex+0x27c>)
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fe5f 	bl	8000dba <FlashWriteWord>
					calculation_check_sum += (uint8_t)program_data + (uint8_t)(program_data>>8) + (uint8_t)(program_data>>16) + (uint8_t)(program_data>>24);
 80010fc:	4b47      	ldr	r3, [pc, #284]	; (800121c <flashHex+0x27c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b46      	ldr	r3, [pc, #280]	; (800121c <flashHex+0x27c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b43      	ldr	r3, [pc, #268]	; (800121c <flashHex+0x27c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	0c1b      	lsrs	r3, r3, #16
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4413      	add	r3, r2
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b40      	ldr	r3, [pc, #256]	; (800121c <flashHex+0x27c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0e1b      	lsrs	r3, r3, #24
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4413      	add	r3, r2
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <flashHex+0x278>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <flashHex+0x278>)
 8001130:	701a      	strb	r2, [r3, #0]
					size_data -= 8;
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <flashHex+0x26c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	3b08      	subs	r3, #8
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <flashHex+0x26c>)
 800113c:	701a      	strb	r2, [r3, #0]
					address_data += 4;
 800113e:	4b34      	ldr	r3, [pc, #208]	; (8001210 <flashHex+0x270>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <flashHex+0x270>)
 8001148:	801a      	strh	r2, [r3, #0]
					program_data = 0;
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <flashHex+0x27c>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
				while(size_data > 0) {
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <flashHex+0x26c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d18f      	bne.n	8001078 <flashHex+0xd8>
				}
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <flashHex+0x278>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	425b      	negs	r3, r3
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <flashHex+0x278>)
 8001162:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 8001164:	f107 020c 	add.w	r2, r7, #12
 8001168:	2302      	movs	r3, #2
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4826      	ldr	r0, [pc, #152]	; (8001208 <flashHex+0x268>)
 800116e:	f7ff fee5 	bl	8000f3c <fillBuffer>
				asciiToHex(tempBuf, 2);
 8001172:	2102      	movs	r1, #2
 8001174:	4824      	ldr	r0, [pc, #144]	; (8001208 <flashHex+0x268>)
 8001176:	f7ff fea9 	bl	8000ecc <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <flashHex+0x268>)
 800117c:	785a      	ldrb	r2, [r3, #1]
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <flashHex+0x268>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <flashHex+0x284>)
 800118c:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <flashHex+0x278>)
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <flashHex+0x284>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d001      	beq.n	800119e <flashHex+0x1fe>
					return 0;//uartTransmit("\n\rchecksum error 1\n\r", 20);
 800119a:	2300      	movs	r3, #0
 800119c:	e096      	b.n	80012cc <flashHex+0x32c>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <flashHex+0x278>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	e086      	b.n	80012b4 <flashHex+0x314>

			} else if(type_data == 0x04) {//дополнительный адрес
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <flashHex+0x274>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d17e      	bne.n	80012ac <flashHex+0x30c>
				fillBuffer(tempBuf, flashBuf, &ptr, 4);
 80011ae:	f107 020c 	add.w	r2, r7, #12
 80011b2:	2304      	movs	r3, #4
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <flashHex+0x268>)
 80011b8:	f7ff fec0 	bl	8000f3c <fillBuffer>
				asciiToHex(tempBuf, 4);
 80011bc:	2104      	movs	r1, #4
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <flashHex+0x268>)
 80011c0:	f7ff fe84 	bl	8000ecc <asciiToHex>

				extented_linear_adress = (uint32_t)(tempBuf[0]<<28 | tempBuf[1]<<24 | tempBuf[2]<<20 | tempBuf[3]<<16 );//считаем адрес
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <flashHex+0x268>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	071a      	lsls	r2, r3, #28
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <flashHex+0x268>)
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	061b      	lsls	r3, r3, #24
 80011d0:	431a      	orrs	r2, r3
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <flashHex+0x268>)
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	051b      	lsls	r3, r3, #20
 80011d8:	431a      	orrs	r2, r3
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <flashHex+0x268>)
 80011dc:	78db      	ldrb	r3, [r3, #3]
 80011de:	041b      	lsls	r3, r3, #16
 80011e0:	4313      	orrs	r3, r2
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <flashHex+0x280>)
 80011e6:	601a      	str	r2, [r3, #0]
				if ((getLatestApplicationAddress() & 0xFFFF0000) != extented_linear_adress &&
 80011e8:	f7ff fa34 	bl	8000654 <getLatestApplicationAddress>
 80011ec:	4603      	mov	r3, r0
 80011ee:	0c1b      	lsrs	r3, r3, #16
 80011f0:	041b      	lsls	r3, r3, #16
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <flashHex+0x280>)
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d018      	beq.n	800122c <flashHex+0x28c>
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <flashHex+0x288>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d014      	beq.n	800122c <flashHex+0x28c>
						firstFirmwarePlaceCheck) //TODO
					return 2;
 8001202:	2302      	movs	r3, #2
 8001204:	e062      	b.n	80012cc <flashHex+0x32c>
 8001206:	bf00      	nop
 8001208:	20000160 	.word	0x20000160
 800120c:	20000150 	.word	0x20000150
 8001210:	20000154 	.word	0x20000154
 8001214:	20000151 	.word	0x20000151
 8001218:	2000015c 	.word	0x2000015c
 800121c:	20000158 	.word	0x20000158
 8001220:	2000014c 	.word	0x2000014c
 8001224:	20000152 	.word	0x20000152
 8001228:	20000020 	.word	0x20000020
				firstFirmwarePlaceCheck = 0;
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <flashHex+0x334>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]

				calculation_check_sum +=  16*tempBuf[0] + tempBuf[1] + 16*tempBuf[2] + tempBuf[3];
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <flashHex+0x338>)
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <flashHex+0x338>)
 8001238:	789b      	ldrb	r3, [r3, #2]
 800123a:	4413      	add	r3, r2
 800123c:	b2db      	uxtb	r3, r3
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <flashHex+0x338>)
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	4413      	add	r3, r2
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <flashHex+0x338>)
 800124c:	78db      	ldrb	r3, [r3, #3]
 800124e:	4413      	add	r3, r2
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <flashHex+0x33c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <flashHex+0x33c>)
 800125c:	701a      	strb	r2, [r3, #0]
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <flashHex+0x33c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	425b      	negs	r3, r3
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <flashHex+0x33c>)
 8001268:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 800126a:	f107 020c 	add.w	r2, r7, #12
 800126e:	2302      	movs	r3, #2
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4819      	ldr	r0, [pc, #100]	; (80012d8 <flashHex+0x338>)
 8001274:	f7ff fe62 	bl	8000f3c <fillBuffer>
				asciiToHex(tempBuf, 2);
 8001278:	2102      	movs	r1, #2
 800127a:	4817      	ldr	r0, [pc, #92]	; (80012d8 <flashHex+0x338>)
 800127c:	f7ff fe26 	bl	8000ecc <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <flashHex+0x338>)
 8001282:	785a      	ldrb	r2, [r3, #1]
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <flashHex+0x338>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4413      	add	r3, r2
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <flashHex+0x340>)
 8001292:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <flashHex+0x33c>)
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <flashHex+0x340>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <flashHex+0x304>
					return 0;//uartTransmit("\n\rchecksum error 2\n\r", 20);
 80012a0:	2300      	movs	r3, #0
 80012a2:	e013      	b.n	80012cc <flashHex+0x32c>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <flashHex+0x33c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e003      	b.n	80012b4 <flashHex+0x314>
			} else if(type_data == 0x01) {//конец файла
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <flashHex+0x344>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d009      	beq.n	80012c8 <flashHex+0x328>
				break;
			}
		}
		ptr++;
 80012b4:	89bb      	ldrh	r3, [r7, #12]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	81bb      	strh	r3, [r7, #12]
	while (ptr < size) {
 80012bc:	89bb      	ldrh	r3, [r7, #12]
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f63f ae76 	bhi.w	8000fb2 <flashHex+0x12>
 80012c6:	e000      	b.n	80012ca <flashHex+0x32a>
				break;
 80012c8:	bf00      	nop
	}
	return 1;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000020 	.word	0x20000020
 80012d8:	20000160 	.word	0x20000160
 80012dc:	2000015c 	.word	0x2000015c
 80012e0:	20000152 	.word	0x20000152
 80012e4:	20000151 	.word	0x20000151

080012e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012ec:	f3bf 8f4f 	dsb	sy
}
 80012f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <__NVIC_SystemReset+0x24>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012fa:	4904      	ldr	r1, [pc, #16]	; (800130c <__NVIC_SystemReset+0x24>)
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_SystemReset+0x28>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001302:	f3bf 8f4f 	dsb	sy
}
 8001306:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <__NVIC_SystemReset+0x20>
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	05fa0004 	.word	0x05fa0004

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  commands[0] = commandCreate("jump", (CommandAction) jumpToUserApp, NONE);
 800131a:	2202      	movs	r2, #2
 800131c:	4927      	ldr	r1, [pc, #156]	; (80013bc <main+0xa8>)
 800131e:	4828      	ldr	r0, [pc, #160]	; (80013c0 <main+0xac>)
 8001320:	f7ff fc7e 	bl	8000c20 <commandCreate>
 8001324:	4603      	mov	r3, r0
 8001326:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <main+0xb0>)
 8001328:	6013      	str	r3, [r2, #0]
  commands[1] = commandCreate("update", (CommandAction) downloadFirmware, NONE);
 800132a:	2202      	movs	r2, #2
 800132c:	4926      	ldr	r1, [pc, #152]	; (80013c8 <main+0xb4>)
 800132e:	4827      	ldr	r0, [pc, #156]	; (80013cc <main+0xb8>)
 8001330:	f7ff fc76 	bl	8000c20 <commandCreate>
 8001334:	4603      	mov	r3, r0
 8001336:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <main+0xb0>)
 8001338:	6053      	str	r3, [r2, #4]
  commands[2] = commandCreate("version", (CommandAction) getAppVersions, NONE);//TODO
 800133a:	2202      	movs	r2, #2
 800133c:	4924      	ldr	r1, [pc, #144]	; (80013d0 <main+0xbc>)
 800133e:	4825      	ldr	r0, [pc, #148]	; (80013d4 <main+0xc0>)
 8001340:	f7ff fc6e 	bl	8000c20 <commandCreate>
 8001344:	4603      	mov	r3, r0
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <main+0xb0>)
 8001348:	6093      	str	r3, [r2, #8]
  commands[3] = commandCreate("help", (CommandAction) getHelpInfo, NONE);
 800134a:	2202      	movs	r2, #2
 800134c:	4922      	ldr	r1, [pc, #136]	; (80013d8 <main+0xc4>)
 800134e:	4823      	ldr	r0, [pc, #140]	; (80013dc <main+0xc8>)
 8001350:	f7ff fc66 	bl	8000c20 <commandCreate>
 8001354:	4603      	mov	r3, r0
 8001356:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <main+0xb0>)
 8001358:	60d3      	str	r3, [r2, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f000 ffc9 	bl	80022f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  uartInit();
 800135e:	f000 fca5 	bl	8001cac <uartInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001362:	f000 f847 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001366:	f7ff fd7b 	bl	8000e60 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800136a:	f000 fbd1 	bl	8001b10 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 800136e:	f000 fb05 	bl	800197c <MX_TIM6_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  uartEnableInterruption();
 8001372:	f000 fcd1 	bl	8001d18 <uartEnableInterruption>
  menuInit(commands, 4);
 8001376:	2104      	movs	r1, #4
 8001378:	4812      	ldr	r0, [pc, #72]	; (80013c4 <main+0xb0>)
 800137a:	f000 f967 	bl	800164c <menuInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_IWDG_Refresh(&hiwdg);
 800137e:	4818      	ldr	r0, [pc, #96]	; (80013e0 <main+0xcc>)
 8001380:	f001 ff14 	bl	80031ac <HAL_IWDG_Refresh>

	  if (uartHasNext()) {
 8001384:	f000 fc86 	bl	8001c94 <uartHasNext>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <main+0x7e>
		  receiveAndSendChar();
 800138e:	f000 f8fb 	bl	8001588 <receiveAndSendChar>
	  }

	  if (hasLine) {
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <main+0xd0>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f1      	beq.n	800137e <main+0x6a>
		  uartBuf[uartBufLast] = '\0';
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <main+0xd4>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <main+0xd8>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	5499      	strb	r1, [r3, r2]
		  const char* commandResult = menuExecuteCommand((char*) uartBuf);
 80013a6:	4811      	ldr	r0, [pc, #68]	; (80013ec <main+0xd8>)
 80013a8:	f000 f984 	bl	80016b4 <menuExecuteCommand>
 80013ac:	6078      	str	r0, [r7, #4]
		  sendMessage("\n");
 80013ae:	4810      	ldr	r0, [pc, #64]	; (80013f0 <main+0xdc>)
 80013b0:	f000 f936 	bl	8001620 <sendMessage>
		  sendCommandResult(commandResult);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f917 	bl	80015e8 <sendCommandResult>
	  HAL_IWDG_Refresh(&hiwdg);
 80013ba:	e7e0      	b.n	800137e <main+0x6a>
 80013bc:	080014cd 	.word	0x080014cd
 80013c0:	08005fb0 	.word	0x08005fb0
 80013c4:	200001f8 	.word	0x200001f8
 80013c8:	08001509 	.word	0x08001509
 80013cc:	08005fb8 	.word	0x08005fb8
 80013d0:	08001575 	.word	0x08001575
 80013d4:	08005fc0 	.word	0x08005fc0
 80013d8:	080014f5 	.word	0x080014f5
 80013dc:	08005fc8 	.word	0x08005fc8
 80013e0:	20000168 	.word	0x20000168
 80013e4:	200001f5 	.word	0x200001f5
 80013e8:	200001f4 	.word	0x200001f4
 80013ec:	20000174 	.word	0x20000174
 80013f0:	08005fd0 	.word	0x08005fd0

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	; 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	2230      	movs	r2, #48	; 0x30
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f004 f852 	bl	80054ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <SystemClock_Config+0xd0>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <SystemClock_Config+0xd0>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <SystemClock_Config+0xd0>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <SystemClock_Config+0xd4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <SystemClock_Config+0xd4>)
 8001442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <SystemClock_Config+0xd4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001454:	230a      	movs	r3, #10
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001458:	2301      	movs	r3, #1
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145c:	2310      	movs	r3, #16
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001460:	2301      	movs	r3, #1
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001464:	2302      	movs	r3, #2
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001468:	2300      	movs	r3, #0
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800146c:	2308      	movs	r3, #8
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001474:	2302      	movs	r3, #2
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001478:	2304      	movs	r3, #4
 800147a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	4618      	mov	r0, r3
 8001482:	f001 fea3 	bl	80031cc <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800148c:	f000 f8d9 	bl	8001642 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	230f      	movs	r3, #15
 8001492:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001494:	2302      	movs	r3, #2
 8001496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001498:	2390      	movs	r3, #144	; 0x90
 800149a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 f906 	bl	80036bc <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014b6:	f000 f8c4 	bl	8001642 <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3750      	adds	r7, #80	; 0x50
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000

080014cc <jumpToUserApp>:

/* USER CODE BEGIN 4 */
static char* jumpToUserApp() {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	validateApplications();
 80014d0:	f7ff f960 	bl	8000794 <validateApplications>
	if (getLatestApplicationAddress() == 0) {
 80014d4:	f7ff f8be 	bl	8000654 <getLatestApplicationAddress>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <jumpToUserApp+0x16>
		return "No valid application in flash\n";
 80014de:	4b03      	ldr	r3, [pc, #12]	; (80014ec <jumpToUserApp+0x20>)
 80014e0:	e002      	b.n	80014e8 <jumpToUserApp+0x1c>
	} else {
		jumpToApp();
 80014e2:	f7ff f993 	bl	800080c <jumpToApp>
		return "Done";
 80014e6:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <jumpToUserApp+0x24>)
	}
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	08005fd4 	.word	0x08005fd4
 80014f0:	08005ff4 	.word	0x08005ff4

080014f4 <getHelpInfo>:

static char* getHelpInfo() {
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
    return "jump: jump to application\n\
 80014f8:	4b02      	ldr	r3, [pc, #8]	; (8001504 <getHelpInfo+0x10>)
update: download firmware and jump to it\n\
version: get current version of application\n\
help: get information about commands\n";
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	08005ffc 	.word	0x08005ffc

08001508 <downloadFirmware>:

static char* downloadFirmware() {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	validateApplications();
 800150e:	f7ff f941 	bl	8000794 <validateApplications>
	updateConfig();
 8001512:	f7ff f8cd 	bl	80006b0 <updateConfig>
	sendMessage("Bank erasing...\n");
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <downloadFirmware+0x60>)
 8001518:	f000 f882 	bl	8001620 <sendMessage>
	HAL_Delay(100);
 800151c:	2064      	movs	r0, #100	; 0x64
 800151e:	f000 ff8d 	bl	800243c <HAL_Delay>
	eraseLogicalBank();
 8001522:	f7ff fa2f 	bl	8000984 <eraseLogicalBank>
	sendMessage("Send hex file via XMODEM\n");
 8001526:	4811      	ldr	r0, [pc, #68]	; (800156c <downloadFirmware+0x64>)
 8001528:	f000 f87a 	bl	8001620 <sendMessage>
	HAL_Delay(100);
 800152c:	2064      	movs	r0, #100	; 0x64
 800152e:	f000 ff85 	bl	800243c <HAL_Delay>
	uint8_t xmodemStatus = xmodemReceive();
 8001532:	f000 fc89 	bl	8001e48 <xmodemReceive>
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	if (xmodemStatus == 1) {
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d103      	bne.n	8001548 <downloadFirmware+0x40>
		return jumpToUserApp();
 8001540:	f7ff ffc4 	bl	80014cc <jumpToUserApp>
 8001544:	4603      	mov	r3, r0
 8001546:	e00a      	b.n	800155e <downloadFirmware+0x56>
	} else if (xmodemStatus == 2) {
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d103      	bne.n	8001556 <downloadFirmware+0x4e>
		rollbackConfig();
 800154e:	f7ff f903 	bl	8000758 <rollbackConfig>
		return "Error. Choose firmware for another bank.\n";
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <downloadFirmware+0x68>)
 8001554:	e003      	b.n	800155e <downloadFirmware+0x56>
	} else {
		rollbackConfig();
 8001556:	f7ff f8ff 	bl	8000758 <rollbackConfig>
		NVIC_SystemReset();
 800155a:	f7ff fec5 	bl	80012e8 <__NVIC_SystemReset>
		return "Error. Update aborted.\n";
	};
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	08006094 	.word	0x08006094
 800156c:	080060a8 	.word	0x080060a8
 8001570:	080060c4 	.word	0x080060c4

08001574 <getAppVersions>:

static char* getAppVersions() {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	validateApplications();
 8001578:	f7ff f90c 	bl	8000794 <validateApplications>
	return getVersions();
 800157c:	f7ff f822 	bl	80005c4 <getVersions>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <receiveAndSendChar>:

static void receiveAndSendChar() {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
    if (uartReceive(uartBuf + uartBufLast, 1)) {
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <receiveAndSendChar+0x54>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <receiveAndSendChar+0x58>)
 8001596:	4413      	add	r3, r2
 8001598:	2101      	movs	r1, #1
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fb9c 	bl	8001cd8 <uartReceive>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d016      	beq.n	80015d4 <receiveAndSendChar+0x4c>
        uint8_t received = uartBuf[uartBufLast];
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <receiveAndSendChar+0x54>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <receiveAndSendChar+0x58>)
 80015ae:	5c9b      	ldrb	r3, [r3, r2]
 80015b0:	71fb      	strb	r3, [r7, #7]
        uartBufLast++;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <receiveAndSendChar+0x54>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <receiveAndSendChar+0x54>)
 80015bc:	701a      	strb	r2, [r3, #0]
        uartTransmit(&received, 1);
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	2101      	movs	r1, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fb1e 	bl	8001c04 <uartTransmit>

        if (received == '\r')
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2b0d      	cmp	r3, #13
 80015cc:	d102      	bne.n	80015d4 <receiveAndSendChar+0x4c>
            hasLine = 1;
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <receiveAndSendChar+0x5c>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
    }
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001f4 	.word	0x200001f4
 80015e0:	20000174 	.word	0x20000174
 80015e4:	200001f5 	.word	0x200001f5

080015e8 <sendCommandResult>:

static void sendCommandResult(const char* commandResult) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7fe fe07 	bl	8000204 <strlen>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4619      	mov	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fb01 	bl	8001c04 <uartTransmit>
    uartBufLast = 0;
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <sendCommandResult+0x30>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
    hasLine = 0;
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <sendCommandResult+0x34>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200001f4 	.word	0x200001f4
 800161c:	200001f5 	.word	0x200001f5

08001620 <sendMessage>:

static void sendMessage(const char* msg) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7fe fdeb 	bl	8000204 <strlen>
 800162e:	4603      	mov	r3, r0
 8001630:	b29b      	uxth	r3, r3
 8001632:	4619      	mov	r1, r3
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fae5 	bl	8001c04 <uartTransmit>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001646:	b672      	cpsid	i
}
 8001648:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164a:	e7fe      	b.n	800164a <Error_Handler+0x8>

0800164c <menuInit>:
uint16_t menuSize;

static int32_t commandSepNameFromArg(const char *commandNameWithArg);
static void strTrim(char *str);

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <menuInit+0x60>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d121      	bne.n	80016a4 <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4618      	mov	r0, r3
 8001666:	f003 ff19 	bl	800549c <malloc>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <menuInit+0x60>)
 8001670:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 8001672:	2300      	movs	r3, #0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	e00d      	b.n	8001694 <menuInit+0x48>
        menuCommands[i] = commands[i];
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	441a      	add	r2, r3
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <menuInit+0x60>)
 8001682:	6819      	ldr	r1, [r3, #0]
 8001684:	89fb      	ldrh	r3, [r7, #14]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	3301      	adds	r3, #1
 8001692:	81fb      	strh	r3, [r7, #14]
 8001694:	89fa      	ldrh	r2, [r7, #14]
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	429a      	cmp	r2, r3
 800169a:	d3ed      	bcc.n	8001678 <menuInit+0x2c>
    }
    menuSize = commandsSize;
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <menuInit+0x64>)
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	8013      	strh	r3, [r2, #0]
 80016a2:	e000      	b.n	80016a6 <menuInit+0x5a>
        return;
 80016a4:	bf00      	nop
}
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000208 	.word	0x20000208
 80016b0:	2000020c 	.word	0x2000020c

080016b4 <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandNameWithArg) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    strTrim(commandNameWithArg);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f866 	bl	800178e <strTrim>
    const int32_t sep = commandSepNameFromArg(commandNameWithArg);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f88a 	bl	80017dc <commandSepNameFromArg>
 80016c8:	6178      	str	r0, [r7, #20]
    const char *commandArg = NULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    if (sep != -1) {
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d009      	beq.n	80016ea <menuExecuteCommand+0x36>
        commandNameWithArg[sep] = '\0';
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
        commandArg = commandNameWithArg + sep + 1;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3301      	adds	r3, #1
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	61fb      	str	r3, [r7, #28]
    }
    const char * const commandName = commandNameWithArg;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < menuSize; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	837b      	strh	r3, [r7, #26]
 80016f2:	e020      	b.n	8001736 <menuExecuteCommand+0x82>
        const Command * const command = menuCommands[i];
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <menuExecuteCommand+0x98>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	8b7b      	ldrh	r3, [r7, #26]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <menuExecuteCommand+0x98>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	8b7b      	ldrh	r3, [r7, #26]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fb42 	bl	8000d98 <commandGetName>
 8001714:	4603      	mov	r3, r0
 8001716:	6939      	ldr	r1, [r7, #16]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fd69 	bl	80001f0 <strcmp>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <menuExecuteCommand+0x7c>
            return commandExecute(command, commandArg);
 8001724:	69f9      	ldr	r1, [r7, #28]
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff faa4 	bl	8000c74 <commandExecute>
 800172c:	4603      	mov	r3, r0
 800172e:	e008      	b.n	8001742 <menuExecuteCommand+0x8e>
    for (uint16_t i = 0; i < menuSize; i++) {
 8001730:	8b7b      	ldrh	r3, [r7, #26]
 8001732:	3301      	adds	r3, #1
 8001734:	837b      	strh	r3, [r7, #26]
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <menuExecuteCommand+0x9c>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	8b7a      	ldrh	r2, [r7, #26]
 800173c:	429a      	cmp	r2, r3
 800173e:	d3d9      	bcc.n	80016f4 <menuExecuteCommand+0x40>
        }
    }
    return "Command not found, print \"help\" for getting info\n";
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <menuExecuteCommand+0xa0>)
}
 8001742:	4618      	mov	r0, r3
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000208 	.word	0x20000208
 8001750:	2000020c 	.word	0x2000020c
 8001754:	080060f0 	.word	0x080060f0

08001758 <isSpaceChar>:

static uint8_t isSpaceChar(char ch) {
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
    return ch == '\n' || ch == ' ' || ch == '\t' || ch == '\r';
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b0a      	cmp	r3, #10
 8001766:	d008      	beq.n	800177a <isSpaceChar+0x22>
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2b20      	cmp	r3, #32
 800176c:	d005      	beq.n	800177a <isSpaceChar+0x22>
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b09      	cmp	r3, #9
 8001772:	d002      	beq.n	800177a <isSpaceChar+0x22>
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b0d      	cmp	r3, #13
 8001778:	d101      	bne.n	800177e <isSpaceChar+0x26>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <isSpaceChar+0x28>
 800177e:	2300      	movs	r3, #0
 8001780:	b2db      	uxtb	r3, r3
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <strTrim>:

static void strTrim(char * const str) {
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(str);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe fd34 	bl	8000204 <strlen>
 800179c:	4603      	mov	r3, r0
 800179e:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	e011      	b.n	80017cc <strTrim+0x3e>
        if (isSpaceChar(str[i])) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ffd1 	bl	8001758 <isSpaceChar>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <strTrim+0x46>
            str[i] = '\0';
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
    for (int32_t i = len - 1; i >= 0; i--) {
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	daea      	bge.n	80017a8 <strTrim+0x1a>
 80017d2:	e000      	b.n	80017d6 <strTrim+0x48>
        } else {
            return;
 80017d4:	bf00      	nop
        }
    }
}
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <commandSepNameFromArg>:

static int32_t commandSepNameFromArg(const char * const commandNameWithArg) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(commandNameWithArg);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7fe fd0d 	bl	8000204 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e00a      	b.n	800180c <commandSepNameFromArg+0x30>
        if (commandNameWithArg[i] == ' ') {
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d101      	bne.n	8001806 <commandSepNameFromArg+0x2a>
            return i;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	e007      	b.n	8001816 <commandSepNameFromArg+0x3a>
    for (int32_t i = len - 1; i >= 0; i--) {
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3b01      	subs	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	daf1      	bge.n	80017f6 <commandSepNameFromArg+0x1a>
        }
    }
    return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_MspInit+0x4c>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_MspInit+0x4c>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 fd9e 	bl	80023fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM6_DAC_IRQHandler+0x10>)
 80018ca:	f002 fabe 	bl	8003e4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000214 	.word	0x20000214

080018d8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <USART6_IRQHandler+0x10>)
 80018de:	f002 fec3 	bl	8004668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000026c 	.word	0x2000026c

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f003 fd94 	bl	8005448 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20030000 	.word	0x20030000
 800194c:	00000400 	.word	0x00000400
 8001950:	20000210 	.word	0x20000210
 8001954:	20000470 	.word	0x20000470

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <MX_TIM6_Init+0x64>)
 800198c:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <MX_TIM6_Init+0x68>)
 800198e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <MX_TIM6_Init+0x64>)
 8001992:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001996:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_TIM6_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019ae:	f002 f95d 	bl	8003c6c <HAL_TIM_Base_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019b8:	f7ff fe43 	bl	8001642 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019ca:	f002 fc0f 	bl	80041ec <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019d4:	f7ff fe35 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000214 	.word	0x20000214
 80019e4:	40001000 	.word	0x40001000

080019e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_TIM_Base_MspInit+0x48>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d115      	bne.n	8001a26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_TIM_Base_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x4c>)
 8001a04:	f043 0310 	orr.w	r3, r3, #16
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_TIM_Base_MspInit+0x4c>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2036      	movs	r0, #54	; 0x36
 8001a1c:	f000 fe31 	bl	8002682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a20:	2036      	movs	r0, #54	; 0x36
 8001a22:	f000 fe4a 	bl	80026ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40001000 	.word	0x40001000
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d102      	bne.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x18>
		uartTransmitChar(X_C);
 8001a4a:	2043      	movs	r0, #67	; 0x43
 8001a4c:	f000 f8fe 	bl	8001c4c <uartTransmitChar>
	}
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40001000 	.word	0x40001000

08001a5c <uartHardwareTransmitInterrupt>:

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
}

void uartHardwareTransmitInterrupt(uint8_t buffer) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
	usartHardwareTransmitBuffer = buffer;
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <uartHardwareTransmitInterrupt+0x28>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a6c:	2047      	movs	r0, #71	; 0x47
 8001a6e:	f000 fe24 	bl	80026ba <HAL_NVIC_EnableIRQ>
	HAL_UART_Transmit_IT(&huart6, &usartHardwareTransmitBuffer, 1);
 8001a72:	2201      	movs	r2, #1
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <uartHardwareTransmitInterrupt+0x28>)
 8001a76:	4804      	ldr	r0, [pc, #16]	; (8001a88 <uartHardwareTransmitInterrupt+0x2c>)
 8001a78:	f002 fc95 	bl	80043a6 <HAL_UART_Transmit_IT>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000025c 	.word	0x2000025c
 8001a88:	2000026c 	.word	0x2000026c

08001a8c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_UART_TxCpltCallback+0x1c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_UART_TxCpltCallback+0x14>
		uartTransmitIntCallback();
 8001a9c:	f000 f9b6 	bl	8001e0c <uartTransmitIntCallback>
	}
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000026c 	.word	0x2000026c

08001aac <uartHardwareReceiveInterrupt>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
}

void uartHardwareReceiveInterrupt() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ab0:	2047      	movs	r0, #71	; 0x47
 8001ab2:	f000 fe02 	bl	80026ba <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart6, &usartHardwareReceiveBuffer, 1);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4902      	ldr	r1, [pc, #8]	; (8001ac4 <uartHardwareReceiveInterrupt+0x18>)
 8001aba:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <uartHardwareReceiveInterrupt+0x1c>)
 8001abc:	f002 fcb8 	bl	8004430 <HAL_UART_Receive_IT>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000025d 	.word	0x2000025d
 8001ac8:	2000026c 	.word	0x2000026c

08001acc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <HAL_UART_RxCpltCallback+0x24>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d104      	bne.n	8001ae6 <HAL_UART_RxCpltCallback+0x1a>
    	uartReceiveIntCallback(usartHardwareReceiveBuffer);
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_UART_RxCpltCallback+0x28>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f965 	bl	8001db0 <uartReceiveIntCallback>
    }
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000026c 	.word	0x2000026c
 8001af4:	2000025d 	.word	0x2000025d

08001af8 <uartHardwareDisableInterrupts>:

void uartHardwareDisableInterrupts() {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart6);
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <uartHardwareDisableInterrupts+0x14>)
 8001afe:	f002 fcc7 	bl	8004490 <HAL_UART_Abort>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8001b02:	2047      	movs	r0, #71	; 0x47
 8001b04:	f000 fde7 	bl	80026d6 <HAL_NVIC_DisableIRQ>
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000026c 	.word	0x2000026c

08001b10 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_USART6_UART_Init+0x4c>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <MX_USART6_UART_Init+0x50>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <MX_USART6_UART_Init+0x4c>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_USART6_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_USART6_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <MX_USART6_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_USART6_UART_Init+0x4c>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <MX_USART6_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_USART6_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_USART6_UART_Init+0x4c>)
 8001b48:	f002 fbe0 	bl	800430c <HAL_UART_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b52:	f7ff fd76 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000026c 	.word	0x2000026c
 8001b60:	40011400 	.word	0x40011400

08001b64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <HAL_UART_MspInit+0x94>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d133      	bne.n	8001bee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <HAL_UART_MspInit+0x98>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a1b      	ldr	r2, [pc, #108]	; (8001bfc <HAL_UART_MspInit+0x98>)
 8001b90:	f043 0320 	orr.w	r3, r3, #32
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_UART_MspInit+0x98>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_UART_MspInit+0x98>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <HAL_UART_MspInit+0x98>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_UART_MspInit+0x98>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bbe:	23c0      	movs	r3, #192	; 0xc0
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bce:	2308      	movs	r3, #8
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4809      	ldr	r0, [pc, #36]	; (8001c00 <HAL_UART_MspInit+0x9c>)
 8001bda:	f001 f93b 	bl	8002e54 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2047      	movs	r0, #71	; 0x47
 8001be4:	f000 fd4d 	bl	8002682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001be8:	2047      	movs	r0, #71	; 0x47
 8001bea:	f000 fd66 	bl	80026ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	; 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40011400 	.word	0x40011400
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020800 	.word	0x40020800

08001c04 <uartTransmit>:
  }
}

/* USER CODE BEGIN 1 */

uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <uartTransmit+0x16>
        return 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e010      	b.n	8001c3c <uartTransmit+0x38>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <uartTransmit+0x40>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe ff12 	bl	8000a4c <bufferPushValues>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <uartTransmit+0x44>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <uartTransmit+0x36>
        hardwareTransmitIT();
 8001c36:	f000 f893 	bl	8001d60 <hardwareTransmitIT>
    }
    return transmitted;
 8001c3a:	89fb      	ldrh	r3, [r7, #14]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000260 	.word	0x20000260
 8001c48:	20000268 	.word	0x20000268

08001c4c <uartTransmitChar>:

uint8_t uartTransmitChar(const uint8_t msg) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
    if (msg == NULL)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <uartTransmitChar+0x14>
        return 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e010      	b.n	8001c82 <uartTransmitChar+0x36>
    const uint8_t transmitted = bufferPush(txBuffer, msg);
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <uartTransmitChar+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	79fa      	ldrb	r2, [r7, #7]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe febe 	bl	80009ea <bufferPush>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
    if (interruptionsEnabled) {
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <uartTransmitChar+0x44>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <uartTransmitChar+0x34>
        hardwareTransmitIT();
 8001c7c:	f000 f870 	bl	8001d60 <hardwareTransmitIT>
    }
    return transmitted;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000260 	.word	0x20000260
 8001c90:	20000268 	.word	0x20000268

08001c94 <uartHasNext>:

uint8_t uartHasNext() {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
    return bufferHasValues(rxBuffer);
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <uartHasNext+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe ff3a 	bl	8000b16 <bufferHasValues>
 8001ca2:	4603      	mov	r3, r0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000264 	.word	0x20000264

08001cac <uartInit>:

void uartInit() {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001cb0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cb4:	f7fe fe7c 	bl	80009b0 <bufferCreate>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <uartInit+0x24>)
 8001cbc:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001cbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cc2:	f7fe fe75 	bl	80009b0 <bufferCreate>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a02      	ldr	r2, [pc, #8]	; (8001cd4 <uartInit+0x28>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000260 	.word	0x20000260
 8001cd4:	20000264 	.word	0x20000264

08001cd8 <uartReceive>:
        hardwareTransmit();
        hardwareReceive();
    }
}

uint16_t uartReceive(uint8_t * const buffer, const uint16_t size) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
    const uint16_t received = bufferPopValues(rxBuffer, buffer, size);
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <uartReceive+0x38>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	887a      	ldrh	r2, [r7, #2]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe ff23 	bl	8000b38 <bufferPopValues>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <uartReceive+0x3c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <uartReceive+0x2c>
        hardwareReceiveIT();
 8001d00:	f000 f828 	bl	8001d54 <hardwareReceiveIT>
    }
    return received;
 8001d04:	89fb      	ldrh	r3, [r7, #14]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000264 	.word	0x20000264
 8001d14:	20000268 	.word	0x20000268

08001d18 <uartEnableInterruption>:

void uartEnableInterruption() {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
    interruptionsEnabled = 1;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <uartEnableInterruption+0x1c>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
    transmitIntEnd = 1;
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <uartEnableInterruption+0x20>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
    hardwareTransmitIT();
 8001d28:	f000 f81a 	bl	8001d60 <hardwareTransmitIT>
    hardwareReceiveIT();
 8001d2c:	f000 f812 	bl	8001d54 <hardwareReceiveIT>
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000268 	.word	0x20000268
 8001d38:	20000028 	.word	0x20000028

08001d3c <uartDisableInterruption>:

void uartDisableInterruption() {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
    interruptionsEnabled = 0;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <uartDisableInterruption+0x14>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
    uartHardwareDisableInterrupts();
 8001d46:	f7ff fed7 	bl	8001af8 <uartHardwareDisableInterrupts>
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000268 	.word	0x20000268

08001d54 <hardwareReceiveIT>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareReceiveIT() {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
    uartHardwareReceiveInterrupt();
 8001d58:	f7ff fea8 	bl	8001aac <uartHardwareReceiveInterrupt>
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <hardwareTransmitIT>:

static void hardwareTransmitIT() {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
    if (!transmitIntEnd)
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <hardwareTransmitIT+0x48>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d016      	beq.n	8001d9e <hardwareTransmitIT+0x3e>
        return;

    if (bufferHasValues(txBuffer)) {
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <hardwareTransmitIT+0x4c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fece 	bl	8000b16 <bufferHasValues>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00f      	beq.n	8001da0 <hardwareTransmitIT+0x40>
        transmitIntEnd = 0;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <hardwareTransmitIT+0x48>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
        uint8_t data = bufferPop(txBuffer);
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <hardwareTransmitIT+0x4c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fe81 	bl	8000a92 <bufferPop>
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
        uartHardwareTransmitInterrupt(data);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fe60 	bl	8001a5c <uartHardwareTransmitInterrupt>
 8001d9c:	e000      	b.n	8001da0 <hardwareTransmitIT+0x40>
        return;
 8001d9e:	bf00      	nop
    }
}
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000028 	.word	0x20000028
 8001dac:	20000260 	.word	0x20000260

08001db0 <uartReceiveIntCallback>:
        if (uartHardwareTransmitPolling(byte, 5))
            bufferPop(txBuffer);
    }
}

extern void uartReceiveIntCallback(uint8_t data) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
    if (bufferGetFreeSize(rxBuffer) > 0) {
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <uartReceiveIntCallback+0x50>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fef7 	bl	8000bb2 <bufferGetFreeSize>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <uartReceiveIntCallback+0x28>
        bufferPush(rxBuffer, data);
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <uartReceiveIntCallback+0x50>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	79fa      	ldrb	r2, [r7, #7]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fe09 	bl	80009ea <bufferPush>
    }
    if (!isRxStarted()) rxStarted = 1;
 8001dd8:	f000 f82a 	bl	8001e30 <isRxStarted>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <uartReceiveIntCallback+0x38>
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <uartReceiveIntCallback+0x54>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <uartReceiveIntCallback+0x58>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <uartReceiveIntCallback+0x46>
        hardwareReceiveIT();
 8001df2:	f7ff ffaf 	bl	8001d54 <hardwareReceiveIT>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000264 	.word	0x20000264
 8001e04:	20000269 	.word	0x20000269
 8001e08:	20000268 	.word	0x20000268

08001e0c <uartTransmitIntCallback>:

extern void uartTransmitIntCallback() {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
    transmitIntEnd = 1;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <uartTransmitIntCallback+0x1c>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <uartTransmitIntCallback+0x20>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <uartTransmitIntCallback+0x18>
        hardwareTransmitIT();
 8001e20:	f7ff ff9e 	bl	8001d60 <hardwareTransmitIT>
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000028 	.word	0x20000028
 8001e2c:	20000268 	.word	0x20000268

08001e30 <isRxStarted>:

uint16_t rxBufToProgBuf(uint8_t* buf) {
	return bufferPopValues(rxBuffer, buf, bufferGetSize(rxBuffer));
}

uint8_t isRxStarted() {
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	return rxStarted;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <isRxStarted+0x14>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000269 	.word	0x20000269

08001e48 <xmodemReceive>:
 * @brief   This function is the base of the Xmodem protocol.
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  uint8_t
 */
uint8_t xmodemReceive() {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	717b      	strb	r3, [r7, #5]
    uint8_t error_number = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	713b      	strb	r3, [r7, #4]
    uint8_t header = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	71fb      	strb	r3, [r7, #7]
    xmodemPacketNumber = 1u;
 8001e5a:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <xmodemReceive+0x10c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6); //send "C" every 10 sec
 8001e60:	483d      	ldr	r0, [pc, #244]	; (8001f58 <xmodemReceive+0x110>)
 8001e62:	f001 ff53 	bl	8003d0c <HAL_TIM_Base_Start_IT>
    timerWorking = 1;
 8001e66:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <xmodemReceive+0x114>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
    /* Loop until there isn't any error or done. */
    while (status == X_OK) {
 8001e6c:	e05d      	b.n	8001f2a <xmodemReceive+0xe2>
  	    WRITE_REG(IWDG->KR, 0x0000AAAAU);
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <xmodemReceive+0x118>)
 8001e70:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001e74:	601a      	str	r2, [r3, #0]
	    xmodemBufSize = uartReceive(xmodemBuf, 1);
 8001e76:	2101      	movs	r1, #1
 8001e78:	483a      	ldr	r0, [pc, #232]	; (8001f64 <xmodemReceive+0x11c>)
 8001e7a:	f7ff ff2d 	bl	8001cd8 <uartReceive>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <xmodemReceive+0x120>)
 8001e84:	801a      	strh	r2, [r3, #0]
	    if (xmodemBufSize != 1) continue;
 8001e86:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <xmodemReceive+0x120>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d000      	beq.n	8001e90 <xmodemReceive+0x48>
 8001e8e:	e04c      	b.n	8001f2a <xmodemReceive+0xe2>
	    if (timerWorking) {
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <xmodemReceive+0x114>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <xmodemReceive+0x5c>
	    	HAL_TIM_Base_Stop_IT(&htim6); //stop sending "C"
 8001e98:	482f      	ldr	r0, [pc, #188]	; (8001f58 <xmodemReceive+0x110>)
 8001e9a:	f001 ffa7 	bl	8003dec <HAL_TIM_Base_Stop_IT>
	    	timerWorking = 0;
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <xmodemReceive+0x114>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
	    }
    	HAL_Delay(100);
 8001ea4:	2064      	movs	r0, #100	; 0x64
 8001ea6:	f000 fac9 	bl	800243c <HAL_Delay>
        header = xmodemBuf[0];
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <xmodemReceive+0x11c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]

        xmodem_status packet_status = X_ERROR;
 8001eb0:	23ff      	movs	r3, #255	; 0xff
 8001eb2:	71bb      	strb	r3, [r7, #6]
        /* The header can be: SOH, STX, EOT and CAN. */
        switch (header) {
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	2b18      	cmp	r3, #24
 8001eb8:	d02c      	beq.n	8001f14 <xmodemReceive+0xcc>
 8001eba:	2b18      	cmp	r3, #24
 8001ebc:	dc2d      	bgt.n	8001f1a <xmodemReceive+0xd2>
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d002      	beq.n	8001ec8 <xmodemReceive+0x80>
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d020      	beq.n	8001f08 <xmodemReceive+0xc0>
 8001ec6:	e028      	b.n	8001f1a <xmodemReceive+0xd2>
            case X_SOH:
                packet_status = xmodem_handle_packet(header); //If the handling was successful, then send an ACK
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f888 	bl	8001fe0 <xmodem_handle_packet>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71bb      	strb	r3, [r7, #6]
                if (packet_status == X_OK) {
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d103      	bne.n	8001ee2 <xmodemReceive+0x9a>
                	uartTransmitChar(X_ACK);
 8001eda:	2006      	movs	r0, #6
 8001edc:	f7ff feb6 	bl	8001c4c <uartTransmitChar>
 8001ee0:	e023      	b.n	8001f2a <xmodemReceive+0xe2>
                } else if (packet_status == X_WRONG_FIRMWARE) {
 8001ee2:	79bb      	ldrb	r3, [r7, #6]
 8001ee4:	2b78      	cmp	r3, #120	; 0x78
 8001ee6:	d107      	bne.n	8001ef8 <xmodemReceive+0xb0>
                	xmodem_error_handler(&error_number, 0);
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 f903 	bl	80020f8 <xmodem_error_handler>
                	status = X_WRONG_FIRMWARE;
 8001ef2:	2378      	movs	r3, #120	; 0x78
 8001ef4:	717b      	strb	r3, [r7, #5]
 8001ef6:	e018      	b.n	8001f2a <xmodemReceive+0xe2>
                } else {
                	status = xmodem_error_handler(&error_number, X_MAX_ERRORS); //Error while processing the packet, either send a NAK or do graceful abort
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2103      	movs	r1, #3
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 f8fb 	bl	80020f8 <xmodem_error_handler>
 8001f02:	4603      	mov	r3, r0
 8001f04:	717b      	strb	r3, [r7, #5]
                }
                break;
 8001f06:	e010      	b.n	8001f2a <xmodemReceive+0xe2>
            /* End of Transmission. */
            case X_EOT:
            	uartTransmitChar(X_ACK);
 8001f08:	2006      	movs	r0, #6
 8001f0a:	f7ff fe9f 	bl	8001c4c <uartTransmitChar>
            	status = X_DONE;
 8001f0e:	23aa      	movs	r3, #170	; 0xaa
 8001f10:	717b      	strb	r3, [r7, #5]
            	break;
 8001f12:	e00a      	b.n	8001f2a <xmodemReceive+0xe2>
            /* Abort from host. */
            case X_CAN:
           		status = X_ERROR;
 8001f14:	23ff      	movs	r3, #255	; 0xff
 8001f16:	717b      	strb	r3, [r7, #5]
           		break;
 8001f18:	e007      	b.n	8001f2a <xmodemReceive+0xe2>
            default:
            /* Wrong header. */
            	status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2103      	movs	r1, #3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f8ea 	bl	80020f8 <xmodem_error_handler>
 8001f24:	4603      	mov	r3, r0
 8001f26:	717b      	strb	r3, [r7, #5]
            	break;
 8001f28:	bf00      	nop
    while (status == X_OK) {
 8001f2a:	797b      	ldrb	r3, [r7, #5]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d09d      	beq.n	8001e6e <xmodemReceive+0x26>
        }
    }
    if (status == X_DONE) return 1;
 8001f32:	797b      	ldrb	r3, [r7, #5]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2baa      	cmp	r3, #170	; 0xaa
 8001f38:	d101      	bne.n	8001f3e <xmodemReceive+0xf6>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e006      	b.n	8001f4c <xmodemReceive+0x104>
    else if (status == X_WRONG_FIRMWARE) return 2;
 8001f3e:	797b      	ldrb	r3, [r7, #5]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b78      	cmp	r3, #120	; 0x78
 8001f44:	d101      	bne.n	8001f4a <xmodemReceive+0x102>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e000      	b.n	8001f4c <xmodemReceive+0x104>
    else return 0;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000029 	.word	0x20000029
 8001f58:	20000214 	.word	0x20000214
 8001f5c:	20000436 	.word	0x20000436
 8001f60:	40003000 	.word	0x40003000
 8001f64:	200002b0 	.word	0x200002b0
 8001f68:	200003b0 	.word	0x200003b0

08001f6c <xmodemCalcCrc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodemCalcCrc(uint8_t *data, uint16_t length)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	81fb      	strh	r3, [r7, #14]
    while (length)
 8001f7c:	e026      	b.n	8001fcc <xmodemCalcCrc+0x60>
    {
        length--;
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	b21a      	sxth	r2, r3
 8001f90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f94:	4053      	eors	r3, r2
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	737b      	strb	r3, [r7, #13]
 8001f9e:	e012      	b.n	8001fc6 <xmodemCalcCrc+0x5a>
        {
            if (crc & 0x8000u)
 8001fa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	da08      	bge.n	8001fba <xmodemCalcCrc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 8001fa8:	89fb      	ldrh	r3, [r7, #14]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001fb2:	f083 0301 	eor.w	r3, r3, #1
 8001fb6:	81fb      	strh	r3, [r7, #14]
 8001fb8:	e002      	b.n	8001fc0 <xmodemCalcCrc+0x54>
            }
            else
            {
                crc = crc << 1u;
 8001fba:	89fb      	ldrh	r3, [r7, #14]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8001fc0:	7b7b      	ldrb	r3, [r7, #13]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	737b      	strb	r3, [r7, #13]
 8001fc6:	7b7b      	ldrb	r3, [r7, #13]
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	d9e9      	bls.n	8001fa0 <xmodemCalcCrc+0x34>
    while (length)
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1d5      	bne.n	8001f7e <xmodemCalcCrc+0x12>
            }
        }
    }
    return crc;
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <xmodem_handle_packet>:
/**
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b0a6      	sub	sp, #152	; 0x98
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
	uint8_t dataTempBuf[128];
	uint8_t crcBuf[2];
    uint16_t size = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

    /* Receive packet number */
    size = uartReceive(xmodemBuf, 2);
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	483e      	ldr	r0, [pc, #248]	; (80020ec <xmodem_handle_packet+0x10c>)
 8001ff4:	f7ff fe70 	bl	8001cd8 <uartReceive>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2)
 8001ffe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002002:	2b02      	cmp	r3, #2
 8002004:	d001      	beq.n	800200a <xmodem_handle_packet+0x2a>
    	return X_ERROR_UART;
 8002006:	2304      	movs	r3, #4
 8002008:	e06c      	b.n	80020e4 <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] != xmodemPacketNumber)
 800200a:	4b38      	ldr	r3, [pc, #224]	; (80020ec <xmodem_handle_packet+0x10c>)
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <xmodem_handle_packet+0x110>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <xmodem_handle_packet+0x3a>
    	return X_ERROR_NUMBER;
 8002016:	2302      	movs	r3, #2
 8002018:	e064      	b.n	80020e4 <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] + xmodemBuf[1] != 255)
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <xmodem_handle_packet+0x10c>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	4b32      	ldr	r3, [pc, #200]	; (80020ec <xmodem_handle_packet+0x10c>)
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	4413      	add	r3, r2
 8002026:	2bff      	cmp	r3, #255	; 0xff
 8002028:	d001      	beq.n	800202e <xmodem_handle_packet+0x4e>
    	return X_ERROR_NUMBER;
 800202a:	2302      	movs	r3, #2
 800202c:	e05a      	b.n	80020e4 <xmodem_handle_packet+0x104>

    /* Receive packet data */
    size = uartReceive(dataTempBuf, X_PACKET_128_SIZE);
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fe4f 	bl	8001cd8 <uartReceive>
 800203a:	4603      	mov	r3, r0
 800203c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != X_PACKET_128_SIZE)
 8002040:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002044:	2b80      	cmp	r3, #128	; 0x80
 8002046:	d001      	beq.n	800204c <xmodem_handle_packet+0x6c>
    	return X_ERROR_UART;
 8002048:	2304      	movs	r3, #4
 800204a:	e04b      	b.n	80020e4 <xmodem_handle_packet+0x104>

    /* Receive CRC */
    size = uartReceive(crcBuf, 2);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	2102      	movs	r1, #2
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fe40 	bl	8001cd8 <uartReceive>
 8002058:	4603      	mov	r3, r0
 800205a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2)
 800205e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002062:	2b02      	cmp	r3, #2
 8002064:	d001      	beq.n	800206a <xmodem_handle_packet+0x8a>
    	return X_ERROR_UART;
 8002066:	2304      	movs	r3, #4
 8002068:	e03c      	b.n	80020e4 <xmodem_handle_packet+0x104>

    /* Check CRC */
    uint16_t crcMerged = ((uint16_t) crcBuf[0] << 8) | ((uint16_t) crcBuf[1]); //Merge the two bytes of CRC
 800206a:	7b3b      	ldrb	r3, [r7, #12]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	b21a      	sxth	r2, r3
 8002070:	7b7b      	ldrb	r3, [r7, #13]
 8002072:	b21b      	sxth	r3, r3
 8002074:	4313      	orrs	r3, r2
 8002076:	b21b      	sxth	r3, r3
 8002078:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    uint16_t crcCalculated = xmodemCalcCrc(dataTempBuf, X_PACKET_128_SIZE);
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	2180      	movs	r1, #128	; 0x80
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff72 	bl	8001f6c <xmodemCalcCrc>
 8002088:	4603      	mov	r3, r0
 800208a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    if (crcMerged != crcCalculated)
 800208e:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8002092:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <xmodem_handle_packet+0xbe>
    	return X_ERROR_CRC;
 800209a:	2301      	movs	r3, #1
 800209c:	e022      	b.n	80020e4 <xmodem_handle_packet+0x104>

    /* Add remaining data from previous packet to current data */
    addRemainingDataToCurrentBuf(dataTempBuf);
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f862 	bl	800216c <addRemainingDataToCurrentBuf>

    /* Remove unfinished line from xmodemBuf and place it to remaining data */
    cutBuf();
 80020a8:	f000 f8aa 	bl	8002200 <cutBuf>

    /* Move data to flash */
    uint8_t flashHexCode = flashHex(xmodemBuf, xmodemBufSize);
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <xmodem_handle_packet+0x114>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	480e      	ldr	r0, [pc, #56]	; (80020ec <xmodem_handle_packet+0x10c>)
 80020b4:	f7fe ff74 	bl	8000fa0 <flashHex>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
    if (flashHexCode == 0)
 80020be:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <xmodem_handle_packet+0xea>
    	return X_ERROR_FLASH;
 80020c6:	2308      	movs	r3, #8
 80020c8:	e00c      	b.n	80020e4 <xmodem_handle_packet+0x104>
    if (flashHexCode == 2)
 80020ca:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d101      	bne.n	80020d6 <xmodem_handle_packet+0xf6>
    	return X_WRONG_FIRMWARE;
 80020d2:	2378      	movs	r3, #120	; 0x78
 80020d4:	e006      	b.n	80020e4 <xmodem_handle_packet+0x104>

    xmodemPacketNumber++;
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <xmodem_handle_packet+0x110>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <xmodem_handle_packet+0x110>)
 80020e0:	701a      	strb	r2, [r3, #0]
    return X_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3798      	adds	r7, #152	; 0x98
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200002b0 	.word	0x200002b0
 80020f0:	20000029 	.word	0x20000029
 80020f4:	200003b0 	.word	0x200003b0

080020f8 <xmodem_error_handler>:
 *          Raises the error counter, then if the number of the errors reached critical, do a graceful abort, otherwise send a NAK.
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
	xmodem_status status = X_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
	/* Raise the error counter. */
	(*error_number)++;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	b2da      	uxtb	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	701a      	strb	r2, [r3, #0]
	/* If the counter reached the max value, then abort. */
	if ((*error_number) >= max_error_number) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	429a      	cmp	r2, r3
 800211c:	d808      	bhi.n	8002130 <xmodem_error_handler+0x38>
		/* Graceful abort. */
		uartTransmitChar(X_CAN);
 800211e:	2018      	movs	r0, #24
 8002120:	f7ff fd94 	bl	8001c4c <uartTransmitChar>
		uartTransmitChar(X_CAN);
 8002124:	2018      	movs	r0, #24
 8002126:	f7ff fd91 	bl	8001c4c <uartTransmitChar>
		status = X_ERROR;
 800212a:	23ff      	movs	r3, #255	; 0xff
 800212c:	73fb      	strb	r3, [r7, #15]
 800212e:	e004      	b.n	800213a <xmodem_error_handler+0x42>
	} else { // Otherwise send a NAK for a repeat.
		uartTransmitChar(X_NAK);
 8002130:	2015      	movs	r0, #21
 8002132:	f7ff fd8b 	bl	8001c4c <uartTransmitChar>
		status = X_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
	}
	if (xmodemPacketNumber == 1 && status == X_OK) {
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <xmodem_error_handler+0x68>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d108      	bne.n	8002154 <xmodem_error_handler+0x5c>
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <xmodem_error_handler+0x5c>
		HAL_TIM_Base_Start_IT(&htim6);
 8002148:	4806      	ldr	r0, [pc, #24]	; (8002164 <xmodem_error_handler+0x6c>)
 800214a:	f001 fddf 	bl	8003d0c <HAL_TIM_Base_Start_IT>
		timerWorking = 1;
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <xmodem_error_handler+0x70>)
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000029 	.word	0x20000029
 8002164:	20000214 	.word	0x20000214
 8002168:	20000436 	.word	0x20000436

0800216c <addRemainingDataToCurrentBuf>:


void addRemainingDataToCurrentBuf(uint8_t* receivedData) {
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (remainingDataSize != 0) {
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <addRemainingDataToCurrentBuf+0x84>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d011      	beq.n	80021a0 <addRemainingDataToCurrentBuf+0x34>
		for (i = 0; i < remainingDataSize; i++) {
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e008      	b.n	8002194 <addRemainingDataToCurrentBuf+0x28>
			xmodemBuf[i] = remainingDataBuf[i];
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	491b      	ldr	r1, [pc, #108]	; (80021f4 <addRemainingDataToCurrentBuf+0x88>)
 8002188:	5c89      	ldrb	r1, [r1, r2]
 800218a:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <addRemainingDataToCurrentBuf+0x8c>)
 800218c:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < remainingDataSize; i++) {
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	3301      	adds	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <addRemainingDataToCurrentBuf+0x84>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d3f0      	bcc.n	8002182 <addRemainingDataToCurrentBuf+0x16>
		}
	}
	xmodemBufSize = remainingDataSize;
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <addRemainingDataToCurrentBuf+0x84>)
 80021a2:	881a      	ldrh	r2, [r3, #0]
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <addRemainingDataToCurrentBuf+0x90>)
 80021a6:	801a      	strh	r2, [r3, #0]
	remainingDataSize = 0;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <addRemainingDataToCurrentBuf+0x84>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	e00d      	b.n	80021d0 <addRemainingDataToCurrentBuf+0x64>
		xmodemBuf[xmodemBufSize + i] = receivedData[i];
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	441a      	add	r2, r3
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <addRemainingDataToCurrentBuf+0x90>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	4619      	mov	r1, r3
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	440b      	add	r3, r1
 80021c4:	7811      	ldrb	r1, [r2, #0]
 80021c6:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <addRemainingDataToCurrentBuf+0x8c>)
 80021c8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	3301      	adds	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	daed      	bge.n	80021b4 <addRemainingDataToCurrentBuf+0x48>
	}
	xmodemBufSize += X_PACKET_128_SIZE;
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <addRemainingDataToCurrentBuf+0x90>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	3380      	adds	r3, #128	; 0x80
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <addRemainingDataToCurrentBuf+0x90>)
 80021e2:	801a      	strh	r2, [r3, #0]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20000434 	.word	0x20000434
 80021f4:	200003b4 	.word	0x200003b4
 80021f8:	200002b0 	.word	0x200002b0
 80021fc:	200003b0 	.word	0x200003b0

08002200 <cutBuf>:

void cutBuf() {
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t linePtr;

	for (i = xmodemBufSize - 1; i >= 0; i--) {
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <cutBuf+0x8c>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <cutBuf+0x90>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	2b0a      	cmp	r3, #10
 8002218:	d111      	bne.n	800223e <cutBuf+0x3e>
			linePtr = i;
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	71bb      	strb	r3, [r7, #6]
			break;
 800221e:	bf00      	nop
		}
	}
	remainingDataSize = xmodemBufSize - linePtr - 1;
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <cutBuf+0x8c>)
 8002222:	881a      	ldrh	r2, [r3, #0]
 8002224:	79bb      	ldrb	r3, [r7, #6]
 8002226:	b29b      	uxth	r3, r3
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <cutBuf+0x94>)
 8002232:	801a      	strh	r2, [r3, #0]
	if (remainingDataSize == 0) return;
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <cutBuf+0x94>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d104      	bne.n	8002246 <cutBuf+0x46>
 800223c:	e020      	b.n	8002280 <cutBuf+0x80>
	for (i = xmodemBufSize - 1; i >= 0; i--) {
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	3b01      	subs	r3, #1
 8002242:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002244:	e7e4      	b.n	8002210 <cutBuf+0x10>
	xmodemBufSize -= remainingDataSize;
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <cutBuf+0x8c>)
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <cutBuf+0x94>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	b29a      	uxth	r2, r3
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <cutBuf+0x8c>)
 8002254:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < remainingDataSize; i++) {
 8002256:	2300      	movs	r3, #0
 8002258:	71fb      	strb	r3, [r7, #7]
 800225a:	e00b      	b.n	8002274 <cutBuf+0x74>
		remainingDataBuf[i] = xmodemBuf[(linePtr + 1) + i];
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	441a      	add	r2, r3
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	490a      	ldr	r1, [pc, #40]	; (8002290 <cutBuf+0x90>)
 8002268:	5c89      	ldrb	r1, [r1, r2]
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <cutBuf+0x98>)
 800226c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < remainingDataSize; i++) {
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	3301      	adds	r3, #1
 8002272:	71fb      	strb	r3, [r7, #7]
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	b29a      	uxth	r2, r3
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <cutBuf+0x94>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d3ed      	bcc.n	800225c <cutBuf+0x5c>
	}
}
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	200003b0 	.word	0x200003b0
 8002290:	200002b0 	.word	0x200002b0
 8002294:	20000434 	.word	0x20000434
 8002298:	200003b4 	.word	0x200003b4

0800229c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800229c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a0:	480d      	ldr	r0, [pc, #52]	; (80022d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022a2:	490e      	ldr	r1, [pc, #56]	; (80022dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b8:	4c0b      	ldr	r4, [pc, #44]	; (80022e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022c6:	f7ff fb47 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ca:	f003 f8c3 	bl	8005454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ce:	f7ff f821 	bl	8001314 <main>
  bx  lr    
 80022d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80022e0:	08006280 	.word	0x08006280
  ldr r2, =_sbss
 80022e4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80022e8:	2000046c 	.word	0x2000046c

080022ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC_IRQHandler>
	...

080022f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_Init+0x40>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_Init+0x40>)
 8002306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_Init+0x40>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f000 f9a7 	bl	800266c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231e:	200f      	movs	r0, #15
 8002320:	f000 f83c 	bl	800239c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002324:	f7ff fa7c 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00

08002334 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <HAL_DeInit+0x54>)
 800233a:	f04f 32ff 	mov.w	r2, #4294967295
 800233e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_DeInit+0x54>)
 8002342:	2200      	movs	r2, #0
 8002344:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_DeInit+0x54>)
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_DeInit+0x54>)
 8002350:	2200      	movs	r2, #0
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_DeInit+0x54>)
 8002356:	f04f 32ff 	mov.w	r2, #4294967295
 800235a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_DeInit+0x54>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_DeInit+0x54>)
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <HAL_DeInit+0x54>)
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_DeInit+0x54>)
 8002372:	f04f 32ff 	mov.w	r2, #4294967295
 8002376:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_DeInit+0x54>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800237e:	f000 f805 	bl	800238c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40023800 	.word	0x40023800

0800238c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x54>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x58>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f999 	bl	80026f2 <HAL_SYSTICK_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00e      	b.n	80023e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d80a      	bhi.n	80023e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f000 f953 	bl	8002682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_InitTick+0x5c>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000024 	.word	0x20000024
 80023f4:	20000030 	.word	0x20000030
 80023f8:	2000002c 	.word	0x2000002c

080023fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x20>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x24>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_IncTick+0x24>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000030 	.word	0x20000030
 8002420:	20000438 	.word	0x20000438

08002424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return uwTick;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_GetTick+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000438 	.word	0x20000438

0800243c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff ffee 	bl	8002424 <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d005      	beq.n	8002462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_Delay+0x44>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002462:	bf00      	nop
 8002464:	f7ff ffde 	bl	8002424 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d8f7      	bhi.n	8002464 <HAL_Delay+0x28>
  {
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000030 	.word	0x20000030

08002484 <__NVIC_SetPriorityGrouping>:
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4907      	ldr	r1, [pc, #28]	; (8002520 <__NVIC_EnableIRQ+0x38>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_DisableIRQ>:
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db12      	blt.n	800255c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	490a      	ldr	r1, [pc, #40]	; (8002568 <__NVIC_DisableIRQ+0x44>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	3320      	adds	r3, #32
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002550:	f3bf 8f4f 	dsb	sy
}
 8002554:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002556:	f3bf 8f6f 	isb	sy
}
 800255a:	bf00      	nop
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000e100 	.word	0xe000e100

0800256c <__NVIC_SetPriority>:
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	2b00      	cmp	r3, #0
 800257e:	db0a      	blt.n	8002596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	490c      	ldr	r1, [pc, #48]	; (80025b8 <__NVIC_SetPriority+0x4c>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	440b      	add	r3, r1
 8002590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002594:	e00a      	b.n	80025ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4908      	ldr	r1, [pc, #32]	; (80025bc <__NVIC_SetPriority+0x50>)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	3b04      	subs	r3, #4
 80025a4:	0112      	lsls	r2, r2, #4
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	440b      	add	r3, r1
 80025aa:	761a      	strb	r2, [r3, #24]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000e100 	.word	0xe000e100
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <NVIC_EncodePriority>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f1c3 0307 	rsb	r3, r3, #7
 80025da:	2b04      	cmp	r3, #4
 80025dc:	bf28      	it	cs
 80025de:	2304      	movcs	r3, #4
 80025e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2b06      	cmp	r3, #6
 80025e8:	d902      	bls.n	80025f0 <NVIC_EncodePriority+0x30>
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3b03      	subs	r3, #3
 80025ee:	e000      	b.n	80025f2 <NVIC_EncodePriority+0x32>
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	401a      	ands	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002608:	f04f 31ff 	mov.w	r1, #4294967295
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fa01 f303 	lsl.w	r3, r1, r3
 8002612:	43d9      	mvns	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	4313      	orrs	r3, r2
}
 800261a:	4618      	mov	r0, r3
 800261c:	3724      	adds	r7, #36	; 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002638:	d301      	bcc.n	800263e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263a:	2301      	movs	r3, #1
 800263c:	e00f      	b.n	800265e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <SysTick_Config+0x40>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002646:	210f      	movs	r1, #15
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f7ff ff8e 	bl	800256c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <SysTick_Config+0x40>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002656:	4b04      	ldr	r3, [pc, #16]	; (8002668 <SysTick_Config+0x40>)
 8002658:	2207      	movs	r2, #7
 800265a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	e000e010 	.word	0xe000e010

0800266c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff05 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002694:	f7ff ff1a 	bl	80024cc <__NVIC_GetPriorityGrouping>
 8002698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f7ff ff8e 	bl	80025c0 <NVIC_EncodePriority>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff5d 	bl	800256c <__NVIC_SetPriority>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff0d 	bl	80024e8 <__NVIC_EnableIRQ>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff1d 	bl	8002524 <__NVIC_DisableIRQ>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ff94 	bl	8002628 <SysTick_Config>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff fe84 	bl	8002424 <HAL_GetTick>
 800271c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d008      	beq.n	800273c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e052      	b.n	80027e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0216 	bic.w	r2, r2, #22
 800274a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800275a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d103      	bne.n	800276c <HAL_DMA_Abort+0x62>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0208 	bic.w	r2, r2, #8
 800277a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278c:	e013      	b.n	80027b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800278e:	f7ff fe49 	bl	8002424 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b05      	cmp	r3, #5
 800279a:	d90c      	bls.n	80027b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2203      	movs	r2, #3
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e015      	b.n	80027e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e4      	bne.n	800278e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	223f      	movs	r2, #63	; 0x3f
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d004      	beq.n	8002808 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e00c      	b.n	8002822 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2205      	movs	r2, #5
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_FLASH_Program+0xa0>)
 800285c:	7e1b      	ldrb	r3, [r3, #24]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_FLASH_Program+0x1e>
 8002862:	2302      	movs	r3, #2
 8002864:	e03b      	b.n	80028de <HAL_FLASH_Program+0x96>
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_FLASH_Program+0xa0>)
 8002868:	2201      	movs	r2, #1
 800286a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800286c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002870:	f000 f870 	bl	8002954 <FLASH_WaitForLastOperation>
 8002874:	4603      	mov	r3, r0
 8002876:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d12b      	bne.n	80028d6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002884:	783b      	ldrb	r3, [r7, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	68b8      	ldr	r0, [r7, #8]
 800288a:	f000 f91b 	bl	8002ac4 <FLASH_Program_Byte>
 800288e:	e016      	b.n	80028be <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002896:	883b      	ldrh	r3, [r7, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	68b8      	ldr	r0, [r7, #8]
 800289c:	f000 f8ee 	bl	8002a7c <FLASH_Program_HalfWord>
 80028a0:	e00d      	b.n	80028be <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d105      	bne.n	80028b4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4619      	mov	r1, r3
 80028ac:	68b8      	ldr	r0, [r7, #8]
 80028ae:	f000 f8c3 	bl	8002a38 <FLASH_Program_Word>
 80028b2:	e004      	b.n	80028be <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80028b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028b8:	68b8      	ldr	r0, [r7, #8]
 80028ba:	f000 f88b 	bl	80029d4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028c2:	f000 f847 	bl	8002954 <FLASH_WaitForLastOperation>
 80028c6:	4603      	mov	r3, r0
 80028c8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_FLASH_Program+0xa4>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	4a07      	ldr	r2, [pc, #28]	; (80028ec <HAL_FLASH_Program+0xa4>)
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <HAL_FLASH_Program+0xa0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	761a      	strb	r2, [r3, #24]
  
  return status;
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000043c 	.word	0x2000043c
 80028ec:	40023c00 	.word	0x40023c00

080028f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_FLASH_Unlock+0x38>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	da0b      	bge.n	800291a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_FLASH_Unlock+0x38>)
 8002904:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_FLASH_Unlock+0x3c>)
 8002906:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_FLASH_Unlock+0x38>)
 800290a:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_FLASH_Unlock+0x40>)
 800290c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_FLASH_Unlock+0x38>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	da01      	bge.n	800291a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800291a:	79fb      	ldrb	r3, [r7, #7]
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40023c00 	.word	0x40023c00
 800292c:	45670123 	.word	0x45670123
 8002930:	cdef89ab 	.word	0xcdef89ab

08002934 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_FLASH_Lock+0x1c>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_FLASH_Lock+0x1c>)
 800293e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002942:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40023c00 	.word	0x40023c00

08002954 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002960:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <FLASH_WaitForLastOperation+0x78>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002966:	f7ff fd5d 	bl	8002424 <HAL_GetTick>
 800296a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800296c:	e010      	b.n	8002990 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d00c      	beq.n	8002990 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <FLASH_WaitForLastOperation+0x38>
 800297c:	f7ff fd52 	bl	8002424 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d201      	bcs.n	8002990 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e019      	b.n	80029c4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <FLASH_WaitForLastOperation+0x7c>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e8      	bne.n	800296e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <FLASH_WaitForLastOperation+0x7c>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <FLASH_WaitForLastOperation+0x7c>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <FLASH_WaitForLastOperation+0x7c>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80029ba:	f000 f8a5 	bl	8002b08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
  
}  
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	2000043c 	.word	0x2000043c
 80029d0:	40023c00 	.word	0x40023c00

080029d4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <FLASH_Program_DoubleWord+0x60>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <FLASH_Program_DoubleWord+0x60>)
 80029e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <FLASH_Program_DoubleWord+0x60>)
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <FLASH_Program_DoubleWord+0x60>)
 80029f2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <FLASH_Program_DoubleWord+0x60>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <FLASH_Program_DoubleWord+0x60>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002a0a:	f3bf 8f6f 	isb	sy
}
 8002a0e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002a10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	000a      	movs	r2, r1
 8002a1e:	2300      	movs	r3, #0
 8002a20:	68f9      	ldr	r1, [r7, #12]
 8002a22:	3104      	adds	r1, #4
 8002a24:	4613      	mov	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40023c00 	.word	0x40023c00

08002a38 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <FLASH_Program_Word+0x40>)
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <FLASH_Program_Word+0x40>)
 8002a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <FLASH_Program_Word+0x40>)
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <FLASH_Program_Word+0x40>)
 8002a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <FLASH_Program_Word+0x40>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <FLASH_Program_Word+0x40>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40023c00 	.word	0x40023c00

08002a7c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <FLASH_Program_HalfWord+0x44>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <FLASH_Program_HalfWord+0x44>)
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <FLASH_Program_HalfWord+0x44>)
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <FLASH_Program_HalfWord+0x44>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <FLASH_Program_HalfWord+0x44>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	4a06      	ldr	r2, [pc, #24]	; (8002ac0 <FLASH_Program_HalfWord+0x44>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	801a      	strh	r2, [r3, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40023c00 	.word	0x40023c00

08002ac4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <FLASH_Program_Byte+0x40>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <FLASH_Program_Byte+0x40>)
 8002ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ada:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <FLASH_Program_Byte+0x40>)
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <FLASH_Program_Byte+0x40>)
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ae4:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <FLASH_Program_Byte+0x40>)
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <FLASH_Program_Byte+0x40>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	701a      	strb	r2, [r3, #0]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00

08002b08 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002b0c:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002b18:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f043 0310 	orr.w	r3, r3, #16
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002b22:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002b26:	2210      	movs	r2, #16
 8002b28:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002b2a:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002b40:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002b42:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002b44:	2220      	movs	r2, #32
 8002b46:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002b48:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002b54:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002b5e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002b62:	2240      	movs	r2, #64	; 0x40
 8002b64:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f043 0302 	orr.w	r3, r3, #2
 8002b7a:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002b7c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002b9a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f043 0320 	orr.w	r3, r3, #32
 8002bb8:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <FLASH_SetErrorCode+0xc8>)
 8002bba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <FLASH_SetErrorCode+0xc4>)
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	60da      	str	r2, [r3, #12]
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40023c00 	.word	0x40023c00
 8002bd0:	2000043c 	.word	0x2000043c

08002bd4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002be6:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <HAL_FLASHEx_Erase+0xdc>)
 8002be8:	7e1b      	ldrb	r3, [r3, #24]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_FLASHEx_Erase+0x1e>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e05a      	b.n	8002ca8 <HAL_FLASHEx_Erase+0xd4>
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <HAL_FLASHEx_Erase+0xdc>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bfc:	f7ff feaa 	bl	8002954 <FLASH_WaitForLastOperation>
 8002c00:	4603      	mov	r3, r0
 8002c02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d14a      	bne.n	8002ca0 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d117      	bne.n	8002c4a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f000 f846 	bl	8002cb8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c30:	f7ff fe90 	bl	8002954 <FLASH_WaitForLastOperation>
 8002c34:	4603      	mov	r3, r0
 8002c36:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_FLASHEx_Erase+0xe0>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	4a1d      	ldr	r2, [pc, #116]	; (8002cb4 <HAL_FLASHEx_Erase+0xe0>)
 8002c3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c42:	f023 0304 	bic.w	r3, r3, #4
 8002c46:	6113      	str	r3, [r2, #16]
 8002c48:	e028      	b.n	8002c9c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	e01c      	b.n	8002c8c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	4619      	mov	r1, r3
 8002c5a:	68b8      	ldr	r0, [r7, #8]
 8002c5c:	f000 f866 	bl	8002d2c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c64:	f7ff fe76 	bl	8002954 <FLASH_WaitForLastOperation>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_FLASHEx_Erase+0xe0>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <HAL_FLASHEx_Erase+0xe0>)
 8002c72:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002c76:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	601a      	str	r2, [r3, #0]
          break;
 8002c84:	e00a      	b.n	8002c9c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4413      	add	r3, r2
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d3da      	bcc.n	8002c52 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002c9c:	f000 f894 	bl	8002dc8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_FLASHEx_Erase+0xdc>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	761a      	strb	r2, [r3, #24]

  return status;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	2000043c 	.word	0x2000043c
 8002cb4:	40023c00 	.word	0x40023c00

08002cb8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <FLASH_MassErase+0x70>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <FLASH_MassErase+0x70>)
 8002cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cce:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d108      	bne.n	8002ce8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <FLASH_MassErase+0x70>)
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <FLASH_MassErase+0x70>)
 8002cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	6113      	str	r3, [r2, #16]
 8002ce6:	e00f      	b.n	8002d08 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d106      	bne.n	8002cfc <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <FLASH_MassErase+0x70>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <FLASH_MassErase+0x70>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6113      	str	r3, [r2, #16]
 8002cfa:	e005      	b.n	8002d08 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <FLASH_MassErase+0x70>)
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <FLASH_MassErase+0x70>)
 8002d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d06:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <FLASH_MassErase+0x70>)
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	4313      	orrs	r3, r2
 8002d12:	4a05      	ldr	r2, [pc, #20]	; (8002d28 <FLASH_MassErase+0x70>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6113      	str	r3, [r2, #16]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40023c00 	.word	0x40023c00

08002d2c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e010      	b.n	8002d6a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d103      	bne.n	8002d56 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e009      	b.n	8002d6a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d103      	bne.n	8002d64 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	e002      	b.n	8002d6a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002d64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0b      	cmp	r3, #11
 8002d6e:	d902      	bls.n	8002d76 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d76:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <FLASH_Erase_Sector+0x98>)
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <FLASH_Erase_Sector+0x98>)
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <FLASH_Erase_Sector+0x98>)
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	490f      	ldr	r1, [pc, #60]	; (8002dc4 <FLASH_Erase_Sector+0x98>)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <FLASH_Erase_Sector+0x98>)
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <FLASH_Erase_Sector+0x98>)
 8002d94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <FLASH_Erase_Sector+0x98>)
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4313      	orrs	r3, r2
 8002da4:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <FLASH_Erase_Sector+0x98>)
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <FLASH_Erase_Sector+0x98>)
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <FLASH_Erase_Sector+0x98>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db6:	6113      	str	r3, [r2, #16]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40023c00 	.word	0x40023c00

08002dc8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002dcc:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002dde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002de2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002de4:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002dea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dfa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e06:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d017      	beq.n	8002e44 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e1e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002e26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e36:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <FLASH_FlushCaches+0x88>)
 8002e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e42:	6013      	str	r3, [r2, #0]
  }
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40023c00 	.word	0x40023c00

08002e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e177      	b.n	8003160 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e70:	2201      	movs	r2, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	f040 8166 	bne.w	800315a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d005      	beq.n	8002ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d130      	bne.n	8002f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 0201 	and.w	r2, r3, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d017      	beq.n	8002f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d123      	bne.n	8002f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	08da      	lsrs	r2, r3, #3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3208      	adds	r2, #8
 8002f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	220f      	movs	r2, #15
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3208      	adds	r2, #8
 8002f92:	69b9      	ldr	r1, [r7, #24]
 8002f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0203 	and.w	r2, r3, #3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80c0 	beq.w	800315a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_GPIO_Init+0x324>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	4a65      	ldr	r2, [pc, #404]	; (8003178 <HAL_GPIO_Init+0x324>)
 8002fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fea:	4b63      	ldr	r3, [pc, #396]	; (8003178 <HAL_GPIO_Init+0x324>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff6:	4a61      	ldr	r2, [pc, #388]	; (800317c <HAL_GPIO_Init+0x328>)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	220f      	movs	r2, #15
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a58      	ldr	r2, [pc, #352]	; (8003180 <HAL_GPIO_Init+0x32c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d037      	beq.n	8003092 <HAL_GPIO_Init+0x23e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a57      	ldr	r2, [pc, #348]	; (8003184 <HAL_GPIO_Init+0x330>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d031      	beq.n	800308e <HAL_GPIO_Init+0x23a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a56      	ldr	r2, [pc, #344]	; (8003188 <HAL_GPIO_Init+0x334>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d02b      	beq.n	800308a <HAL_GPIO_Init+0x236>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a55      	ldr	r2, [pc, #340]	; (800318c <HAL_GPIO_Init+0x338>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d025      	beq.n	8003086 <HAL_GPIO_Init+0x232>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a54      	ldr	r2, [pc, #336]	; (8003190 <HAL_GPIO_Init+0x33c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01f      	beq.n	8003082 <HAL_GPIO_Init+0x22e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a53      	ldr	r2, [pc, #332]	; (8003194 <HAL_GPIO_Init+0x340>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d019      	beq.n	800307e <HAL_GPIO_Init+0x22a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a52      	ldr	r2, [pc, #328]	; (8003198 <HAL_GPIO_Init+0x344>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_GPIO_Init+0x226>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a51      	ldr	r2, [pc, #324]	; (800319c <HAL_GPIO_Init+0x348>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00d      	beq.n	8003076 <HAL_GPIO_Init+0x222>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a50      	ldr	r2, [pc, #320]	; (80031a0 <HAL_GPIO_Init+0x34c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <HAL_GPIO_Init+0x21e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a4f      	ldr	r2, [pc, #316]	; (80031a4 <HAL_GPIO_Init+0x350>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_GPIO_Init+0x21a>
 800306a:	2309      	movs	r3, #9
 800306c:	e012      	b.n	8003094 <HAL_GPIO_Init+0x240>
 800306e:	230a      	movs	r3, #10
 8003070:	e010      	b.n	8003094 <HAL_GPIO_Init+0x240>
 8003072:	2308      	movs	r3, #8
 8003074:	e00e      	b.n	8003094 <HAL_GPIO_Init+0x240>
 8003076:	2307      	movs	r3, #7
 8003078:	e00c      	b.n	8003094 <HAL_GPIO_Init+0x240>
 800307a:	2306      	movs	r3, #6
 800307c:	e00a      	b.n	8003094 <HAL_GPIO_Init+0x240>
 800307e:	2305      	movs	r3, #5
 8003080:	e008      	b.n	8003094 <HAL_GPIO_Init+0x240>
 8003082:	2304      	movs	r3, #4
 8003084:	e006      	b.n	8003094 <HAL_GPIO_Init+0x240>
 8003086:	2303      	movs	r3, #3
 8003088:	e004      	b.n	8003094 <HAL_GPIO_Init+0x240>
 800308a:	2302      	movs	r3, #2
 800308c:	e002      	b.n	8003094 <HAL_GPIO_Init+0x240>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_GPIO_Init+0x240>
 8003092:	2300      	movs	r3, #0
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	f002 0203 	and.w	r2, r2, #3
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	4093      	lsls	r3, r2
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a4:	4935      	ldr	r1, [pc, #212]	; (800317c <HAL_GPIO_Init+0x328>)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	3302      	adds	r3, #2
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030b2:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <HAL_GPIO_Init+0x354>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030d6:	4a34      	ldr	r2, [pc, #208]	; (80031a8 <HAL_GPIO_Init+0x354>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030dc:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_GPIO_Init+0x354>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003100:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <HAL_GPIO_Init+0x354>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003106:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <HAL_GPIO_Init+0x354>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_GPIO_Init+0x354>)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003130:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_GPIO_Init+0x354>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_GPIO_Init+0x354>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3301      	adds	r3, #1
 800315e:	61fb      	str	r3, [r7, #28]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b0f      	cmp	r3, #15
 8003164:	f67f ae84 	bls.w	8002e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	40013800 	.word	0x40013800
 8003180:	40020000 	.word	0x40020000
 8003184:	40020400 	.word	0x40020400
 8003188:	40020800 	.word	0x40020800
 800318c:	40020c00 	.word	0x40020c00
 8003190:	40021000 	.word	0x40021000
 8003194:	40021400 	.word	0x40021400
 8003198:	40021800 	.word	0x40021800
 800319c:	40021c00 	.word	0x40021c00
 80031a0:	40022000 	.word	0x40022000
 80031a4:	40022400 	.word	0x40022400
 80031a8:	40013c00 	.word	0x40013c00

080031ac <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80031bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e267      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d075      	beq.n	80032d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ea:	4b88      	ldr	r3, [pc, #544]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d00c      	beq.n	8003210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4b85      	ldr	r3, [pc, #532]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d112      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003202:	4b82      	ldr	r3, [pc, #520]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320e:	d10b      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	4b7e      	ldr	r3, [pc, #504]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d05b      	beq.n	80032d4 <HAL_RCC_OscConfig+0x108>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d157      	bne.n	80032d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e242      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d106      	bne.n	8003240 <HAL_RCC_OscConfig+0x74>
 8003232:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a75      	ldr	r2, [pc, #468]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e01d      	b.n	800327c <HAL_RCC_OscConfig+0xb0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x98>
 800324a:	4b70      	ldr	r3, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6f      	ldr	r2, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b6d      	ldr	r3, [pc, #436]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6c      	ldr	r2, [pc, #432]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0xb0>
 8003264:	4b69      	ldr	r3, [pc, #420]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a68      	ldr	r2, [pc, #416]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b66      	ldr	r3, [pc, #408]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a65      	ldr	r2, [pc, #404]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7ff f8ce 	bl	8002424 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800328c:	f7ff f8ca 	bl	8002424 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e207      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b5b      	ldr	r3, [pc, #364]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0xc0>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7ff f8ba 	bl	8002424 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b4:	f7ff f8b6 	bl	8002424 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1f3      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	4b51      	ldr	r3, [pc, #324]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0xe8>
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d063      	beq.n	80033aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e2:	4b4a      	ldr	r3, [pc, #296]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d11c      	bne.n	8003334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b44      	ldr	r3, [pc, #272]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d116      	bne.n	8003334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x152>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e1c7      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4937      	ldr	r1, [pc, #220]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003332:	e03a      	b.n	80033aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333c:	4b34      	ldr	r3, [pc, #208]	; (8003410 <HAL_RCC_OscConfig+0x244>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7ff f86f 	bl	8002424 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334a:	f7ff f86b 	bl	8002424 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1a8      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4925      	ldr	r1, [pc, #148]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]
 800337c:	e015      	b.n	80033aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337e:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_RCC_OscConfig+0x244>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7ff f84e 	bl	8002424 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338c:	f7ff f84a 	bl	8002424 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e187      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d036      	beq.n	8003424 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d016      	beq.n	80033ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <HAL_RCC_OscConfig+0x248>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7ff f82e 	bl	8002424 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033cc:	f7ff f82a 	bl	8002424 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e167      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x200>
 80033ea:	e01b      	b.n	8003424 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_OscConfig+0x248>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f2:	f7ff f817 	bl	8002424 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	e00e      	b.n	8003418 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fa:	f7ff f813 	bl	8002424 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d907      	bls.n	8003418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e150      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
 800340c:	40023800 	.word	0x40023800
 8003410:	42470000 	.word	0x42470000
 8003414:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	4b88      	ldr	r3, [pc, #544]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800341a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ea      	bne.n	80033fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8097 	beq.w	8003560 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b81      	ldr	r3, [pc, #516]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10f      	bne.n	8003462 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	4b7d      	ldr	r3, [pc, #500]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a7c      	ldr	r2, [pc, #496]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
 8003452:	4b7a      	ldr	r3, [pc, #488]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	4b77      	ldr	r3, [pc, #476]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d118      	bne.n	80034a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346e:	4b74      	ldr	r3, [pc, #464]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a73      	ldr	r2, [pc, #460]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347a:	f7fe ffd3 	bl	8002424 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7fe ffcf 	bl	8002424 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e10c      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2ea>
 80034a8:	4b64      	ldr	r3, [pc, #400]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4a63      	ldr	r2, [pc, #396]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6713      	str	r3, [r2, #112]	; 0x70
 80034b4:	e01c      	b.n	80034f0 <HAL_RCC_OscConfig+0x324>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x30c>
 80034be:	4b5f      	ldr	r3, [pc, #380]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a5e      	ldr	r2, [pc, #376]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ca:	4b5c      	ldr	r3, [pc, #368]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a5b      	ldr	r2, [pc, #364]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0x324>
 80034d8:	4b58      	ldr	r3, [pc, #352]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a57      	ldr	r2, [pc, #348]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	4b55      	ldr	r3, [pc, #340]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a54      	ldr	r2, [pc, #336]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034ea:	f023 0304 	bic.w	r3, r3, #4
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe ff94 	bl	8002424 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fe ff90 	bl	8002424 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e0cb      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003516:	4b49      	ldr	r3, [pc, #292]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0ee      	beq.n	8003500 <HAL_RCC_OscConfig+0x334>
 8003522:	e014      	b.n	800354e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003524:	f7fe ff7e 	bl	8002424 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352a:	e00a      	b.n	8003542 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7fe ff7a 	bl	8002424 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e0b5      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003542:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1ee      	bne.n	800352c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003554:	4b39      	ldr	r3, [pc, #228]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	4a38      	ldr	r2, [pc, #224]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800355a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80a1 	beq.w	80036ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800356a:	4b34      	ldr	r3, [pc, #208]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b08      	cmp	r3, #8
 8003574:	d05c      	beq.n	8003630 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d141      	bne.n	8003602 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b31      	ldr	r3, [pc, #196]	; (8003644 <HAL_RCC_OscConfig+0x478>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe ff4e 	bl	8002424 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe ff4a 	bl	8002424 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e087      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b27      	ldr	r3, [pc, #156]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	019b      	lsls	r3, r3, #6
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	3b01      	subs	r3, #1
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	061b      	lsls	r3, r3, #24
 80035ce:	491b      	ldr	r1, [pc, #108]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x478>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fe ff23 	bl	8002424 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fe ff1f 	bl	8002424 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e05c      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x416>
 8003600:	e054      	b.n	80036ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_RCC_OscConfig+0x478>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe ff0c 	bl	8002424 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003610:	f7fe ff08 	bl	8002424 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e045      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x444>
 800362e:	e03d      	b.n	80036ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e038      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
 800363c:	40023800 	.word	0x40023800
 8003640:	40007000 	.word	0x40007000
 8003644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <HAL_RCC_OscConfig+0x4ec>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d028      	beq.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d121      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d11a      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003678:	4013      	ands	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003680:	4293      	cmp	r3, r2
 8003682:	d111      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	3b01      	subs	r3, #1
 8003692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0cc      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b68      	ldr	r3, [pc, #416]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d90c      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b65      	ldr	r3, [pc, #404]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b63      	ldr	r3, [pc, #396]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0b8      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d020      	beq.n	8003746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003710:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a58      	ldr	r2, [pc, #352]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800371a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003728:	4b53      	ldr	r3, [pc, #332]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a52      	ldr	r2, [pc, #328]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003734:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	494d      	ldr	r1, [pc, #308]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d044      	beq.n	80037dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d119      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e07f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d003      	beq.n	800377a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003776:	2b03      	cmp	r3, #3
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377a:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e06f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e067      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379a:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f023 0203 	bic.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4934      	ldr	r1, [pc, #208]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ac:	f7fe fe3a 	bl	8002424 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b4:	f7fe fe36 	bl	8002424 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e04f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 020c 	and.w	r2, r3, #12
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1eb      	bne.n	80037b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d20c      	bcs.n	8003804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e032      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4916      	ldr	r1, [pc, #88]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	490e      	ldr	r1, [pc, #56]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003842:	f000 f821 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 8003846:	4602      	mov	r2, r0
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	490a      	ldr	r1, [pc, #40]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	5ccb      	ldrb	r3, [r1, r3]
 8003856:	fa22 f303 	lsr.w	r3, r2, r3
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fd9a 	bl	800239c <HAL_InitTick>

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023c00 	.word	0x40023c00
 8003878:	40023800 	.word	0x40023800
 800387c:	08006124 	.word	0x08006124
 8003880:	20000024 	.word	0x20000024
 8003884:	2000002c 	.word	0x2000002c

08003888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800388c:	b090      	sub	sp, #64	; 0x40
 800388e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
 8003894:	2300      	movs	r3, #0
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003898:	2300      	movs	r3, #0
 800389a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a0:	4b59      	ldr	r3, [pc, #356]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d00d      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x40>
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	f200 80a1 	bhi.w	80039f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0x34>
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d003      	beq.n	80038c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ba:	e09b      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038bc:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038c0:	e09b      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038c2:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80038c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c6:	e098      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c8:	4b4f      	ldr	r3, [pc, #316]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038d2:	4b4d      	ldr	r3, [pc, #308]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d028      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038de:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	2200      	movs	r2, #0
 80038e6:	623b      	str	r3, [r7, #32]
 80038e8:	627a      	str	r2, [r7, #36]	; 0x24
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038f0:	2100      	movs	r1, #0
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f4:	fb03 f201 	mul.w	r2, r3, r1
 80038f8:	2300      	movs	r3, #0
 80038fa:	fb00 f303 	mul.w	r3, r0, r3
 80038fe:	4413      	add	r3, r2
 8003900:	4a43      	ldr	r2, [pc, #268]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003902:	fba0 1202 	umull	r1, r2, r0, r2
 8003906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003908:	460a      	mov	r2, r1
 800390a:	62ba      	str	r2, [r7, #40]	; 0x28
 800390c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800390e:	4413      	add	r3, r2
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003914:	2200      	movs	r2, #0
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	61fa      	str	r2, [r7, #28]
 800391a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800391e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003922:	f7fc fccd 	bl	80002c0 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4613      	mov	r3, r2
 800392c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392e:	e053      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	2200      	movs	r2, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	617a      	str	r2, [r7, #20]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003942:	f04f 0b00 	mov.w	fp, #0
 8003946:	4652      	mov	r2, sl
 8003948:	465b      	mov	r3, fp
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	0159      	lsls	r1, r3, #5
 8003954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003958:	0150      	lsls	r0, r2, #5
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	ebb2 080a 	subs.w	r8, r2, sl
 8003962:	eb63 090b 	sbc.w	r9, r3, fp
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003972:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003976:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800397a:	ebb2 0408 	subs.w	r4, r2, r8
 800397e:	eb63 0509 	sbc.w	r5, r3, r9
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	00eb      	lsls	r3, r5, #3
 800398c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003990:	00e2      	lsls	r2, r4, #3
 8003992:	4614      	mov	r4, r2
 8003994:	461d      	mov	r5, r3
 8003996:	eb14 030a 	adds.w	r3, r4, sl
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	eb45 030b 	adc.w	r3, r5, fp
 80039a0:	607b      	str	r3, [r7, #4]
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ae:	4629      	mov	r1, r5
 80039b0:	028b      	lsls	r3, r1, #10
 80039b2:	4621      	mov	r1, r4
 80039b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039b8:	4621      	mov	r1, r4
 80039ba:	028a      	lsls	r2, r1, #10
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	2200      	movs	r2, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	60fa      	str	r2, [r7, #12]
 80039c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039cc:	f7fc fc78 	bl	80002c0 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4613      	mov	r3, r2
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	3301      	adds	r3, #1
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039f2:	e002      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80039f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3740      	adds	r7, #64	; 0x40
 8003a00:	46bd      	mov	sp, r7
 8003a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	00f42400 	.word	0x00f42400
 8003a10:	017d7840 	.word	0x017d7840

08003a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a18:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000024 	.word	0x20000024

08003a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a30:	f7ff fff0 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	0a9b      	lsrs	r3, r3, #10
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4903      	ldr	r1, [pc, #12]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	08006134 	.word	0x08006134

08003a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a58:	f7ff ffdc 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0b5b      	lsrs	r3, r3, #13
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4903      	ldr	r1, [pc, #12]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40023800 	.word	0x40023800
 8003a78:	08006134 	.word	0x08006134

08003a7c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a82:	f7fe fccf 	bl	8002424 <HAL_GetTick>
 8003a86:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a88:	4b72      	ldr	r3, [pc, #456]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a71      	ldr	r2, [pc, #452]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fe fcc5 	bl	8002424 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0d0      	b.n	8003c4a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003aa8:	4b6a      	ldr	r3, [pc, #424]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003ab4:	4b67      	ldr	r3, [pc, #412]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a66      	ldr	r2, [pc, #408]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003ac0:	f7fe fcb0 	bl	8002424 <HAL_GetTick>
 8003ac4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003ac6:	4b63      	ldr	r3, [pc, #396]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ace:	f7fe fca9 	bl	8002424 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0b2      	b.n	8003c4a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003ae4:	4b5b      	ldr	r3, [pc, #364]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ee      	bne.n	8003ace <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003af0:	f7fe fc98 	bl	8002424 <HAL_GetTick>
 8003af4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003af6:	4b57      	ldr	r3, [pc, #348]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a56      	ldr	r2, [pc, #344]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003afc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003b00:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe fc8e 	bl	8002424 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e099      	b.n	8003c4a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b16:	4b4f      	ldr	r3, [pc, #316]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b22:	f7fe fc7f 	bl	8002424 <HAL_GetTick>
 8003b26:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b28:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a49      	ldr	r2, [pc, #292]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b32:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fe fc75 	bl	8002424 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e080      	b.n	8003c4a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003b48:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f0      	bne.n	8003b36 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b54:	f7fe fc66 	bl	8002424 <HAL_GetTick>
 8003b58:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003b5a:	4b3e      	ldr	r3, [pc, #248]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a3d      	ldr	r2, [pc, #244]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003b60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b64:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b68:	f7fe fc5c 	bl	8002424 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e067      	b.n	8003c4a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003b7a:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b86:	f7fe fc4d 	bl	8002424 <HAL_GetTick>
 8003b8a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003b8c:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a30      	ldr	r2, [pc, #192]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b9a:	f7fe fc43 	bl	8002424 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e04e      	b.n	8003c4a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003bac:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003bb8:	4b26      	ldr	r3, [pc, #152]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003bba:	4a27      	ldr	r2, [pc, #156]	; (8003c58 <HAL_RCC_DeInit+0x1dc>)
 8003bbc:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003bbe:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003bc0:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <HAL_RCC_DeInit+0x1e0>)
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8003bc6:	4b23      	ldr	r3, [pc, #140]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003bc8:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <HAL_RCC_DeInit+0x1e0>)
 8003bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003bce:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003bd4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003bd8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003be4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8003be6:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003bf2:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003bf8:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003bfc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003bfe:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003c10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1a:	4a0e      	ldr	r2, [pc, #56]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	4a0b      	ldr	r2, [pc, #44]	; (8003c54 <HAL_RCC_DeInit+0x1d8>)
 8003c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c2c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <HAL_RCC_DeInit+0x1e4>)
 8003c30:	4a0c      	ldr	r2, [pc, #48]	; (8003c64 <HAL_RCC_DeInit+0x1e8>)
 8003c32:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <HAL_RCC_DeInit+0x1ec>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fbaf 	bl	800239c <HAL_InitTick>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003c48:	2300      	movs	r3, #0
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	04003010 	.word	0x04003010
 8003c5c:	24003000 	.word	0x24003000
 8003c60:	20000024 	.word	0x20000024
 8003c64:	00f42400 	.word	0x00f42400
 8003c68:	2000002c 	.word	0x2000002c

08003c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e041      	b.n	8003d02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd fea8 	bl	80019e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4610      	mov	r0, r2
 8003cac:	f000 f9fe 	bl	80040ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d001      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e04e      	b.n	8003dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a23      	ldr	r2, [pc, #140]	; (8003dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d022      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x80>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4e:	d01d      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x80>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d018      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x80>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d013      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x80>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00e      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x80>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d009      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x80>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x80>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d111      	bne.n	8003db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b06      	cmp	r3, #6
 8003d9c:	d010      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	e007      	b.n	8003dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40010000 	.word	0x40010000
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	40000800 	.word	0x40000800
 8003ddc:	40000c00 	.word	0x40000c00
 8003de0:	40010400 	.word	0x40010400
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40001800 	.word	0x40001800

08003dec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6a1a      	ldr	r2, [r3, #32]
 8003e0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10f      	bne.n	8003e34 <HAL_TIM_Base_Stop_IT+0x48>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6a1a      	ldr	r2, [r3, #32]
 8003e1a:	f240 4344 	movw	r3, #1092	; 0x444
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <HAL_TIM_Base_Stop_IT+0x48>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d122      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d11b      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0202 	mvn.w	r2, #2
 8003e76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8ee 	bl	800406e <HAL_TIM_IC_CaptureCallback>
 8003e92:	e005      	b.n	8003ea0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f8e0 	bl	800405a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f8f1 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d122      	bne.n	8003efa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d11b      	bne.n	8003efa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f06f 0204 	mvn.w	r2, #4
 8003eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f8c4 	bl	800406e <HAL_TIM_IC_CaptureCallback>
 8003ee6:	e005      	b.n	8003ef4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8b6 	bl	800405a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f8c7 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d122      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d11b      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f06f 0208 	mvn.w	r2, #8
 8003f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2204      	movs	r2, #4
 8003f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f89a 	bl	800406e <HAL_TIM_IC_CaptureCallback>
 8003f3a:	e005      	b.n	8003f48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f88c 	bl	800405a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f89d 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d122      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d11b      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f06f 0210 	mvn.w	r2, #16
 8003f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2208      	movs	r2, #8
 8003f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f870 	bl	800406e <HAL_TIM_IC_CaptureCallback>
 8003f8e:	e005      	b.n	8003f9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f862 	bl	800405a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f873 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d10e      	bne.n	8003fce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d107      	bne.n	8003fce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f06f 0201 	mvn.w	r2, #1
 8003fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fd fd35 	bl	8001a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d10e      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b80      	cmp	r3, #128	; 0x80
 8003fe8:	d107      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f97f 	bl	80042f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d10e      	bne.n	8004026 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d107      	bne.n	8004026 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800401e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f838 	bl	8004096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b20      	cmp	r3, #32
 8004032:	d10e      	bne.n	8004052 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	d107      	bne.n	8004052 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f06f 0220 	mvn.w	r2, #32
 800404a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f949 	bl	80042e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a40      	ldr	r2, [pc, #256]	; (80041c0 <TIM_Base_SetConfig+0x114>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d00f      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a3d      	ldr	r2, [pc, #244]	; (80041c4 <TIM_Base_SetConfig+0x118>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00b      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a3c      	ldr	r2, [pc, #240]	; (80041c8 <TIM_Base_SetConfig+0x11c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3b      	ldr	r2, [pc, #236]	; (80041cc <TIM_Base_SetConfig+0x120>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3a      	ldr	r2, [pc, #232]	; (80041d0 <TIM_Base_SetConfig+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d108      	bne.n	80040fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a2f      	ldr	r2, [pc, #188]	; (80041c0 <TIM_Base_SetConfig+0x114>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d02b      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d027      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2c      	ldr	r2, [pc, #176]	; (80041c4 <TIM_Base_SetConfig+0x118>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d023      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2b      	ldr	r2, [pc, #172]	; (80041c8 <TIM_Base_SetConfig+0x11c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01f      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2a      	ldr	r2, [pc, #168]	; (80041cc <TIM_Base_SetConfig+0x120>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01b      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <TIM_Base_SetConfig+0x124>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d017      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a28      	ldr	r2, [pc, #160]	; (80041d4 <TIM_Base_SetConfig+0x128>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a27      	ldr	r2, [pc, #156]	; (80041d8 <TIM_Base_SetConfig+0x12c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00f      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a26      	ldr	r2, [pc, #152]	; (80041dc <TIM_Base_SetConfig+0x130>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00b      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a25      	ldr	r2, [pc, #148]	; (80041e0 <TIM_Base_SetConfig+0x134>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a24      	ldr	r2, [pc, #144]	; (80041e4 <TIM_Base_SetConfig+0x138>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a23      	ldr	r2, [pc, #140]	; (80041e8 <TIM_Base_SetConfig+0x13c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d108      	bne.n	8004170 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a0a      	ldr	r2, [pc, #40]	; (80041c0 <TIM_Base_SetConfig+0x114>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_Base_SetConfig+0xf8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <TIM_Base_SetConfig+0x124>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d103      	bne.n	80041ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	615a      	str	r2, [r3, #20]
}
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40010000 	.word	0x40010000
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40000c00 	.word	0x40000c00
 80041d0:	40010400 	.word	0x40010400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800
 80041e0:	40001800 	.word	0x40001800
 80041e4:	40001c00 	.word	0x40001c00
 80041e8:	40002000 	.word	0x40002000

080041ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004200:	2302      	movs	r3, #2
 8004202:	e05a      	b.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d022      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004250:	d01d      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1d      	ldr	r2, [pc, #116]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d018      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00e      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d10c      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4313      	orrs	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40010400 	.word	0x40010400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40001800 	.word	0x40001800

080042e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e03f      	b.n	800439e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fd fc16 	bl	8001b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	; 0x24
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800434e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fe05 	bl	8004f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	4613      	mov	r3, r2
 80043b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d130      	bne.n	8004422 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_UART_Transmit_IT+0x26>
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e029      	b.n	8004424 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_UART_Transmit_IT+0x38>
 80043da:	2302      	movs	r3, #2
 80043dc:	e022      	b.n	8004424 <HAL_UART_Transmit_IT+0x7e>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	88fa      	ldrh	r2, [r7, #6]
 80043f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2221      	movs	r2, #33	; 0x21
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800441c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b20      	cmp	r3, #32
 8004448:	d11d      	bne.n	8004486 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_UART_Receive_IT+0x26>
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e016      	b.n	8004488 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_UART_Receive_IT+0x38>
 8004464:	2302      	movs	r3, #2
 8004466:	e00f      	b.n	8004488 <HAL_UART_Receive_IT+0x58>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	461a      	mov	r2, r3
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fb97 	bl	8004bb0 <UART_Start_Receive_IT>
 8004482:	4603      	mov	r3, r0
 8004484:	e000      	b.n	8004488 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b0a0      	sub	sp, #128	; 0x80
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80044a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044aa:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80044ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80044b8:	66ba      	str	r2, [r7, #104]	; 0x68
 80044ba:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80044be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80044c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3314      	adds	r3, #20
 80044d2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044ec:	657a      	str	r2, [r7, #84]	; 0x54
 80044ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80044f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	d119      	bne.n	800453c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	f023 0310 	bic.w	r3, r3, #16
 800451e:	677b      	str	r3, [r7, #116]	; 0x74
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004528:	643a      	str	r2, [r7, #64]	; 0x40
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800452e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d136      	bne.n	80045b8 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3314      	adds	r3, #20
 8004550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	61fb      	str	r3, [r7, #28]
   return(result);
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004560:	673b      	str	r3, [r7, #112]	; 0x70
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3314      	adds	r3, #20
 8004568:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800456a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e5      	bne.n	800454a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	2b00      	cmp	r3, #0
 8004584:	d018      	beq.n	80045b8 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	2200      	movs	r2, #0
 800458c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe f8b9 	bl	800270a <HAL_DMA_Abort>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe f943 	bl	800282e <HAL_DMA_GetError>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d104      	bne.n	80045b8 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2210      	movs	r2, #16
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e052      	b.n	800465e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b40      	cmp	r3, #64	; 0x40
 80045c4:	d136      	bne.n	8004634 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045e6:	61ba      	str	r2, [r7, #24]
 80045e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6979      	ldr	r1, [r7, #20]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	613b      	str	r3, [r7, #16]
   return(result);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e5      	bne.n	80045c6 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d018      	beq.n	8004634 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	2200      	movs	r2, #0
 8004608:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe f87b 	bl	800270a <HAL_DMA_Abort>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe f905 	bl	800282e <HAL_DMA_GetError>
 8004624:	4603      	mov	r3, r0
 8004626:	2b20      	cmp	r3, #32
 8004628:	d104      	bne.n	8004634 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2210      	movs	r2, #16
 800462e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e014      	b.n	800465e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3780      	adds	r7, #128	; 0x80
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b0ba      	sub	sp, #232	; 0xe8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_UART_IRQHandler+0x66>
 80046ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fb8f 	bl	8004dea <UART_Receive_IT>
      return;
 80046cc:	e256      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80de 	beq.w	8004894 <HAL_UART_IRQHandler+0x22c>
 80046d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80d1 	beq.w	8004894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <HAL_UART_IRQHandler+0xae>
 80046fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f043 0201 	orr.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_UART_IRQHandler+0xd2>
 8004722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f043 0202 	orr.w	r2, r3, #2
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_UART_IRQHandler+0xf6>
 8004746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_UART_IRQHandler+0x126>
 800476a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 81ed 	beq.w	8004b72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_UART_IRQHandler+0x14e>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fb1a 	bl	8004dea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_UART_IRQHandler+0x17a>
 80047da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04f      	beq.n	8004882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa22 	bl	8004c2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d141      	bne.n	800487a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800480c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800482e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800483a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1d9      	bne.n	80047f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	2b00      	cmp	r3, #0
 8004848:	d013      	beq.n	8004872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	4a7d      	ldr	r2, [pc, #500]	; (8004a44 <HAL_UART_IRQHandler+0x3dc>)
 8004850:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd ffc7 	bl	80027ea <HAL_DMA_Abort_IT>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800486c:	4610      	mov	r0, r2
 800486e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	e00e      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f986 	bl	8004b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e00a      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f982 	bl	8004b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e006      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f97e 	bl	8004b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800488e:	e170      	b.n	8004b72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	bf00      	nop
    return;
 8004892:	e16e      	b.n	8004b72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	f040 814a 	bne.w	8004b32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8143 	beq.w	8004b32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 813c 	beq.w	8004b32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	f040 80b4 	bne.w	8004a48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8140 	beq.w	8004b76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048fe:	429a      	cmp	r2, r3
 8004900:	f080 8139 	bcs.w	8004b76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800490a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004916:	f000 8088 	beq.w	8004a2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004946:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800494a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004952:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800495e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1d9      	bne.n	800491a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800498a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800498e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800499c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e1      	bne.n	8004966 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3314      	adds	r3, #20
 80049a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3314      	adds	r3, #20
 80049c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e3      	bne.n	80049a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fa:	f023 0310 	bic.w	r3, r3, #16
 80049fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e3      	bne.n	80049e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fd fe70 	bl	800270a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8ac 	bl	8004b98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a40:	e099      	b.n	8004b76 <HAL_UART_IRQHandler+0x50e>
 8004a42:	bf00      	nop
 8004a44:	08004cf3 	.word	0x08004cf3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 808b 	beq.w	8004b7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8086 	beq.w	8004b7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a92:	647a      	str	r2, [r7, #68]	; 0x44
 8004a94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e3      	bne.n	8004a6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3314      	adds	r3, #20
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004aca:	633a      	str	r2, [r7, #48]	; 0x30
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e3      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0310 	bic.w	r3, r3, #16
 8004b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b10:	61fa      	str	r2, [r7, #28]
 8004b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	69b9      	ldr	r1, [r7, #24]
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e3      	bne.n	8004aec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f834 	bl	8004b98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b30:	e023      	b.n	8004b7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HAL_UART_IRQHandler+0x4ea>
 8004b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8e5 	bl	8004d1a <UART_Transmit_IT>
    return;
 8004b50:	e014      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00e      	beq.n	8004b7c <HAL_UART_IRQHandler+0x514>
 8004b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f925 	bl	8004dba <UART_EndTransmit_IT>
    return;
 8004b70:	e004      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
    return;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
      return;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
      return;
 8004b7a:	bf00      	nop
  }
}
 8004b7c:	37e8      	adds	r7, #232	; 0xe8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop

08004b84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2222      	movs	r2, #34	; 0x22
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bfc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0220 	orr.w	r2, r2, #32
 8004c1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b095      	sub	sp, #84	; 0x54
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c54:	643a      	str	r2, [r7, #64]	; 0x40
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e5      	bne.n	8004c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f023 0301 	bic.w	r3, r3, #1
 8004c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3314      	adds	r3, #20
 8004c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e5      	bne.n	8004c68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d119      	bne.n	8004cd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	647b      	str	r3, [r7, #68]	; 0x44
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cc4:	61ba      	str	r2, [r7, #24]
 8004cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6979      	ldr	r1, [r7, #20]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e5      	bne.n	8004ca4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ce6:	bf00      	nop
 8004ce8:	3754      	adds	r7, #84	; 0x54
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff ff39 	bl	8004b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b21      	cmp	r3, #33	; 0x21
 8004d2c:	d13e      	bne.n	8004dac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	d114      	bne.n	8004d62 <UART_Transmit_IT+0x48>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d110      	bne.n	8004d62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	1c9a      	adds	r2, r3, #2
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	621a      	str	r2, [r3, #32]
 8004d60:	e008      	b.n	8004d74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	1c59      	adds	r1, r3, #1
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6211      	str	r1, [r2, #32]
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	4619      	mov	r1, r3
 8004d82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10f      	bne.n	8004da8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fc fe56 	bl	8001a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b08c      	sub	sp, #48	; 0x30
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b22      	cmp	r3, #34	; 0x22
 8004dfc:	f040 80ab 	bne.w	8004f56 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e08:	d117      	bne.n	8004e3a <UART_Receive_IT+0x50>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d113      	bne.n	8004e3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	1c9a      	adds	r2, r3, #2
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28
 8004e38:	e026      	b.n	8004e88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4c:	d007      	beq.n	8004e5e <UART_Receive_IT+0x74>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <UART_Receive_IT+0x82>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e008      	b.n	8004e7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4619      	mov	r1, r3
 8004e96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d15a      	bne.n	8004f52 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0220 	bic.w	r2, r2, #32
 8004eaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d135      	bne.n	8004f48 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f023 0310 	bic.w	r3, r3, #16
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f02:	623a      	str	r2, [r7, #32]
 8004f04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	69f9      	ldr	r1, [r7, #28]
 8004f08:	6a3a      	ldr	r2, [r7, #32]
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e5      	bne.n	8004ee2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d10a      	bne.n	8004f3a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff fe29 	bl	8004b98 <HAL_UARTEx_RxEventCallback>
 8004f46:	e002      	b.n	8004f4e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fc fdbf 	bl	8001acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e002      	b.n	8004f58 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e000      	b.n	8004f58 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
  }
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3730      	adds	r7, #48	; 0x30
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f64:	b0c0      	sub	sp, #256	; 0x100
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	68d9      	ldr	r1, [r3, #12]
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	ea40 0301 	orr.w	r3, r0, r1
 8004f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fb8:	f021 010c 	bic.w	r1, r1, #12
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fda:	6999      	ldr	r1, [r3, #24]
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	ea40 0301 	orr.w	r3, r0, r1
 8004fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b8f      	ldr	r3, [pc, #572]	; (800522c <UART_SetConfig+0x2cc>)
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d005      	beq.n	8005000 <UART_SetConfig+0xa0>
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b8d      	ldr	r3, [pc, #564]	; (8005230 <UART_SetConfig+0x2d0>)
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d104      	bne.n	800500a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005000:	f7fe fd28 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8005004:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005008:	e003      	b.n	8005012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800500a:	f7fe fd0f 	bl	8003a2c <HAL_RCC_GetPCLK1Freq>
 800500e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501c:	f040 810c 	bne.w	8005238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005024:	2200      	movs	r2, #0
 8005026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800502a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800502e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005032:	4622      	mov	r2, r4
 8005034:	462b      	mov	r3, r5
 8005036:	1891      	adds	r1, r2, r2
 8005038:	65b9      	str	r1, [r7, #88]	; 0x58
 800503a:	415b      	adcs	r3, r3
 800503c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800503e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005042:	4621      	mov	r1, r4
 8005044:	eb12 0801 	adds.w	r8, r2, r1
 8005048:	4629      	mov	r1, r5
 800504a:	eb43 0901 	adc.w	r9, r3, r1
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800505a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800505e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005062:	4690      	mov	r8, r2
 8005064:	4699      	mov	r9, r3
 8005066:	4623      	mov	r3, r4
 8005068:	eb18 0303 	adds.w	r3, r8, r3
 800506c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005070:	462b      	mov	r3, r5
 8005072:	eb49 0303 	adc.w	r3, r9, r3
 8005076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005086:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800508a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800508e:	460b      	mov	r3, r1
 8005090:	18db      	adds	r3, r3, r3
 8005092:	653b      	str	r3, [r7, #80]	; 0x50
 8005094:	4613      	mov	r3, r2
 8005096:	eb42 0303 	adc.w	r3, r2, r3
 800509a:	657b      	str	r3, [r7, #84]	; 0x54
 800509c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050a4:	f7fb f90c 	bl	80002c0 <__aeabi_uldivmod>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4b61      	ldr	r3, [pc, #388]	; (8005234 <UART_SetConfig+0x2d4>)
 80050ae:	fba3 2302 	umull	r2, r3, r3, r2
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	011c      	lsls	r4, r3, #4
 80050b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050c8:	4642      	mov	r2, r8
 80050ca:	464b      	mov	r3, r9
 80050cc:	1891      	adds	r1, r2, r2
 80050ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80050d0:	415b      	adcs	r3, r3
 80050d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050d8:	4641      	mov	r1, r8
 80050da:	eb12 0a01 	adds.w	sl, r2, r1
 80050de:	4649      	mov	r1, r9
 80050e0:	eb43 0b01 	adc.w	fp, r3, r1
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050f8:	4692      	mov	sl, r2
 80050fa:	469b      	mov	fp, r3
 80050fc:	4643      	mov	r3, r8
 80050fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005106:	464b      	mov	r3, r9
 8005108:	eb4b 0303 	adc.w	r3, fp, r3
 800510c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800511c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005124:	460b      	mov	r3, r1
 8005126:	18db      	adds	r3, r3, r3
 8005128:	643b      	str	r3, [r7, #64]	; 0x40
 800512a:	4613      	mov	r3, r2
 800512c:	eb42 0303 	adc.w	r3, r2, r3
 8005130:	647b      	str	r3, [r7, #68]	; 0x44
 8005132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800513a:	f7fb f8c1 	bl	80002c0 <__aeabi_uldivmod>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4611      	mov	r1, r2
 8005144:	4b3b      	ldr	r3, [pc, #236]	; (8005234 <UART_SetConfig+0x2d4>)
 8005146:	fba3 2301 	umull	r2, r3, r3, r1
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	2264      	movs	r2, #100	; 0x64
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	1acb      	subs	r3, r1, r3
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800515a:	4b36      	ldr	r3, [pc, #216]	; (8005234 <UART_SetConfig+0x2d4>)
 800515c:	fba3 2302 	umull	r2, r3, r3, r2
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005168:	441c      	add	r4, r3
 800516a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800516e:	2200      	movs	r2, #0
 8005170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005174:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	1891      	adds	r1, r2, r2
 8005182:	63b9      	str	r1, [r7, #56]	; 0x38
 8005184:	415b      	adcs	r3, r3
 8005186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800518c:	4641      	mov	r1, r8
 800518e:	1851      	adds	r1, r2, r1
 8005190:	6339      	str	r1, [r7, #48]	; 0x30
 8005192:	4649      	mov	r1, r9
 8005194:	414b      	adcs	r3, r1
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051a4:	4659      	mov	r1, fp
 80051a6:	00cb      	lsls	r3, r1, #3
 80051a8:	4651      	mov	r1, sl
 80051aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ae:	4651      	mov	r1, sl
 80051b0:	00ca      	lsls	r2, r1, #3
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	4603      	mov	r3, r0
 80051b8:	4642      	mov	r2, r8
 80051ba:	189b      	adds	r3, r3, r2
 80051bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051c0:	464b      	mov	r3, r9
 80051c2:	460a      	mov	r2, r1
 80051c4:	eb42 0303 	adc.w	r3, r2, r3
 80051c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051e0:	460b      	mov	r3, r1
 80051e2:	18db      	adds	r3, r3, r3
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e6:	4613      	mov	r3, r2
 80051e8:	eb42 0303 	adc.w	r3, r2, r3
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051f6:	f7fb f863 	bl	80002c0 <__aeabi_uldivmod>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <UART_SetConfig+0x2d4>)
 8005200:	fba3 1302 	umull	r1, r3, r3, r2
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	2164      	movs	r1, #100	; 0x64
 8005208:	fb01 f303 	mul.w	r3, r1, r3
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	3332      	adds	r3, #50	; 0x32
 8005212:	4a08      	ldr	r2, [pc, #32]	; (8005234 <UART_SetConfig+0x2d4>)
 8005214:	fba2 2303 	umull	r2, r3, r2, r3
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	f003 0207 	and.w	r2, r3, #7
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4422      	add	r2, r4
 8005226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005228:	e105      	b.n	8005436 <UART_SetConfig+0x4d6>
 800522a:	bf00      	nop
 800522c:	40011000 	.word	0x40011000
 8005230:	40011400 	.word	0x40011400
 8005234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523c:	2200      	movs	r2, #0
 800523e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005242:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800524a:	4642      	mov	r2, r8
 800524c:	464b      	mov	r3, r9
 800524e:	1891      	adds	r1, r2, r2
 8005250:	6239      	str	r1, [r7, #32]
 8005252:	415b      	adcs	r3, r3
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
 8005256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800525a:	4641      	mov	r1, r8
 800525c:	1854      	adds	r4, r2, r1
 800525e:	4649      	mov	r1, r9
 8005260:	eb43 0501 	adc.w	r5, r3, r1
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	00eb      	lsls	r3, r5, #3
 800526e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005272:	00e2      	lsls	r2, r4, #3
 8005274:	4614      	mov	r4, r2
 8005276:	461d      	mov	r5, r3
 8005278:	4643      	mov	r3, r8
 800527a:	18e3      	adds	r3, r4, r3
 800527c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005280:	464b      	mov	r3, r9
 8005282:	eb45 0303 	adc.w	r3, r5, r3
 8005286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005296:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052a6:	4629      	mov	r1, r5
 80052a8:	008b      	lsls	r3, r1, #2
 80052aa:	4621      	mov	r1, r4
 80052ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b0:	4621      	mov	r1, r4
 80052b2:	008a      	lsls	r2, r1, #2
 80052b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052b8:	f7fb f802 	bl	80002c0 <__aeabi_uldivmod>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4b60      	ldr	r3, [pc, #384]	; (8005444 <UART_SetConfig+0x4e4>)
 80052c2:	fba3 2302 	umull	r2, r3, r3, r2
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	011c      	lsls	r4, r3, #4
 80052ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052dc:	4642      	mov	r2, r8
 80052de:	464b      	mov	r3, r9
 80052e0:	1891      	adds	r1, r2, r2
 80052e2:	61b9      	str	r1, [r7, #24]
 80052e4:	415b      	adcs	r3, r3
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ec:	4641      	mov	r1, r8
 80052ee:	1851      	adds	r1, r2, r1
 80052f0:	6139      	str	r1, [r7, #16]
 80052f2:	4649      	mov	r1, r9
 80052f4:	414b      	adcs	r3, r1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005304:	4659      	mov	r1, fp
 8005306:	00cb      	lsls	r3, r1, #3
 8005308:	4651      	mov	r1, sl
 800530a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800530e:	4651      	mov	r1, sl
 8005310:	00ca      	lsls	r2, r1, #3
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	4603      	mov	r3, r0
 8005318:	4642      	mov	r2, r8
 800531a:	189b      	adds	r3, r3, r2
 800531c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005320:	464b      	mov	r3, r9
 8005322:	460a      	mov	r2, r1
 8005324:	eb42 0303 	adc.w	r3, r2, r3
 8005328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	67bb      	str	r3, [r7, #120]	; 0x78
 8005336:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005344:	4649      	mov	r1, r9
 8005346:	008b      	lsls	r3, r1, #2
 8005348:	4641      	mov	r1, r8
 800534a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800534e:	4641      	mov	r1, r8
 8005350:	008a      	lsls	r2, r1, #2
 8005352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005356:	f7fa ffb3 	bl	80002c0 <__aeabi_uldivmod>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4b39      	ldr	r3, [pc, #228]	; (8005444 <UART_SetConfig+0x4e4>)
 8005360:	fba3 1302 	umull	r1, r3, r3, r2
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	2164      	movs	r1, #100	; 0x64
 8005368:	fb01 f303 	mul.w	r3, r1, r3
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	3332      	adds	r3, #50	; 0x32
 8005372:	4a34      	ldr	r2, [pc, #208]	; (8005444 <UART_SetConfig+0x4e4>)
 8005374:	fba2 2303 	umull	r2, r3, r2, r3
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800537e:	441c      	add	r4, r3
 8005380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005384:	2200      	movs	r2, #0
 8005386:	673b      	str	r3, [r7, #112]	; 0x70
 8005388:	677a      	str	r2, [r7, #116]	; 0x74
 800538a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800538e:	4642      	mov	r2, r8
 8005390:	464b      	mov	r3, r9
 8005392:	1891      	adds	r1, r2, r2
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	415b      	adcs	r3, r3
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800539e:	4641      	mov	r1, r8
 80053a0:	1851      	adds	r1, r2, r1
 80053a2:	6039      	str	r1, [r7, #0]
 80053a4:	4649      	mov	r1, r9
 80053a6:	414b      	adcs	r3, r1
 80053a8:	607b      	str	r3, [r7, #4]
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053b6:	4659      	mov	r1, fp
 80053b8:	00cb      	lsls	r3, r1, #3
 80053ba:	4651      	mov	r1, sl
 80053bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c0:	4651      	mov	r1, sl
 80053c2:	00ca      	lsls	r2, r1, #3
 80053c4:	4610      	mov	r0, r2
 80053c6:	4619      	mov	r1, r3
 80053c8:	4603      	mov	r3, r0
 80053ca:	4642      	mov	r2, r8
 80053cc:	189b      	adds	r3, r3, r2
 80053ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d0:	464b      	mov	r3, r9
 80053d2:	460a      	mov	r2, r1
 80053d4:	eb42 0303 	adc.w	r3, r2, r3
 80053d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	663b      	str	r3, [r7, #96]	; 0x60
 80053e4:	667a      	str	r2, [r7, #100]	; 0x64
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053f2:	4649      	mov	r1, r9
 80053f4:	008b      	lsls	r3, r1, #2
 80053f6:	4641      	mov	r1, r8
 80053f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053fc:	4641      	mov	r1, r8
 80053fe:	008a      	lsls	r2, r1, #2
 8005400:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005404:	f7fa ff5c 	bl	80002c0 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <UART_SetConfig+0x4e4>)
 800540e:	fba3 1302 	umull	r1, r3, r3, r2
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	2164      	movs	r1, #100	; 0x64
 8005416:	fb01 f303 	mul.w	r3, r1, r3
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	3332      	adds	r3, #50	; 0x32
 8005420:	4a08      	ldr	r2, [pc, #32]	; (8005444 <UART_SetConfig+0x4e4>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	f003 020f 	and.w	r2, r3, #15
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4422      	add	r2, r4
 8005434:	609a      	str	r2, [r3, #8]
}
 8005436:	bf00      	nop
 8005438:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800543c:	46bd      	mov	sp, r7
 800543e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005442:	bf00      	nop
 8005444:	51eb851f 	.word	0x51eb851f

08005448 <__errno>:
 8005448:	4b01      	ldr	r3, [pc, #4]	; (8005450 <__errno+0x8>)
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	20000034 	.word	0x20000034

08005454 <__libc_init_array>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	4d0d      	ldr	r5, [pc, #52]	; (800548c <__libc_init_array+0x38>)
 8005458:	4c0d      	ldr	r4, [pc, #52]	; (8005490 <__libc_init_array+0x3c>)
 800545a:	1b64      	subs	r4, r4, r5
 800545c:	10a4      	asrs	r4, r4, #2
 800545e:	2600      	movs	r6, #0
 8005460:	42a6      	cmp	r6, r4
 8005462:	d109      	bne.n	8005478 <__libc_init_array+0x24>
 8005464:	4d0b      	ldr	r5, [pc, #44]	; (8005494 <__libc_init_array+0x40>)
 8005466:	4c0c      	ldr	r4, [pc, #48]	; (8005498 <__libc_init_array+0x44>)
 8005468:	f000 fd1a 	bl	8005ea0 <_init>
 800546c:	1b64      	subs	r4, r4, r5
 800546e:	10a4      	asrs	r4, r4, #2
 8005470:	2600      	movs	r6, #0
 8005472:	42a6      	cmp	r6, r4
 8005474:	d105      	bne.n	8005482 <__libc_init_array+0x2e>
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	f855 3b04 	ldr.w	r3, [r5], #4
 800547c:	4798      	blx	r3
 800547e:	3601      	adds	r6, #1
 8005480:	e7ee      	b.n	8005460 <__libc_init_array+0xc>
 8005482:	f855 3b04 	ldr.w	r3, [r5], #4
 8005486:	4798      	blx	r3
 8005488:	3601      	adds	r6, #1
 800548a:	e7f2      	b.n	8005472 <__libc_init_array+0x1e>
 800548c:	08006278 	.word	0x08006278
 8005490:	08006278 	.word	0x08006278
 8005494:	08006278 	.word	0x08006278
 8005498:	0800627c 	.word	0x0800627c

0800549c <malloc>:
 800549c:	4b02      	ldr	r3, [pc, #8]	; (80054a8 <malloc+0xc>)
 800549e:	4601      	mov	r1, r0
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	f000 b877 	b.w	8005594 <_malloc_r>
 80054a6:	bf00      	nop
 80054a8:	20000034 	.word	0x20000034

080054ac <memset>:
 80054ac:	4402      	add	r2, r0
 80054ae:	4603      	mov	r3, r0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d100      	bne.n	80054b6 <memset+0xa>
 80054b4:	4770      	bx	lr
 80054b6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ba:	e7f9      	b.n	80054b0 <memset+0x4>

080054bc <_free_r>:
 80054bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054be:	2900      	cmp	r1, #0
 80054c0:	d044      	beq.n	800554c <_free_r+0x90>
 80054c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054c6:	9001      	str	r0, [sp, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f1a1 0404 	sub.w	r4, r1, #4
 80054ce:	bfb8      	it	lt
 80054d0:	18e4      	addlt	r4, r4, r3
 80054d2:	f000 f987 	bl	80057e4 <__malloc_lock>
 80054d6:	4a1e      	ldr	r2, [pc, #120]	; (8005550 <_free_r+0x94>)
 80054d8:	9801      	ldr	r0, [sp, #4]
 80054da:	6813      	ldr	r3, [r2, #0]
 80054dc:	b933      	cbnz	r3, 80054ec <_free_r+0x30>
 80054de:	6063      	str	r3, [r4, #4]
 80054e0:	6014      	str	r4, [r2, #0]
 80054e2:	b003      	add	sp, #12
 80054e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054e8:	f000 b982 	b.w	80057f0 <__malloc_unlock>
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	d908      	bls.n	8005502 <_free_r+0x46>
 80054f0:	6825      	ldr	r5, [r4, #0]
 80054f2:	1961      	adds	r1, r4, r5
 80054f4:	428b      	cmp	r3, r1
 80054f6:	bf01      	itttt	eq
 80054f8:	6819      	ldreq	r1, [r3, #0]
 80054fa:	685b      	ldreq	r3, [r3, #4]
 80054fc:	1949      	addeq	r1, r1, r5
 80054fe:	6021      	streq	r1, [r4, #0]
 8005500:	e7ed      	b.n	80054de <_free_r+0x22>
 8005502:	461a      	mov	r2, r3
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	b10b      	cbz	r3, 800550c <_free_r+0x50>
 8005508:	42a3      	cmp	r3, r4
 800550a:	d9fa      	bls.n	8005502 <_free_r+0x46>
 800550c:	6811      	ldr	r1, [r2, #0]
 800550e:	1855      	adds	r5, r2, r1
 8005510:	42a5      	cmp	r5, r4
 8005512:	d10b      	bne.n	800552c <_free_r+0x70>
 8005514:	6824      	ldr	r4, [r4, #0]
 8005516:	4421      	add	r1, r4
 8005518:	1854      	adds	r4, r2, r1
 800551a:	42a3      	cmp	r3, r4
 800551c:	6011      	str	r1, [r2, #0]
 800551e:	d1e0      	bne.n	80054e2 <_free_r+0x26>
 8005520:	681c      	ldr	r4, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	6053      	str	r3, [r2, #4]
 8005526:	4421      	add	r1, r4
 8005528:	6011      	str	r1, [r2, #0]
 800552a:	e7da      	b.n	80054e2 <_free_r+0x26>
 800552c:	d902      	bls.n	8005534 <_free_r+0x78>
 800552e:	230c      	movs	r3, #12
 8005530:	6003      	str	r3, [r0, #0]
 8005532:	e7d6      	b.n	80054e2 <_free_r+0x26>
 8005534:	6825      	ldr	r5, [r4, #0]
 8005536:	1961      	adds	r1, r4, r5
 8005538:	428b      	cmp	r3, r1
 800553a:	bf04      	itt	eq
 800553c:	6819      	ldreq	r1, [r3, #0]
 800553e:	685b      	ldreq	r3, [r3, #4]
 8005540:	6063      	str	r3, [r4, #4]
 8005542:	bf04      	itt	eq
 8005544:	1949      	addeq	r1, r1, r5
 8005546:	6021      	streq	r1, [r4, #0]
 8005548:	6054      	str	r4, [r2, #4]
 800554a:	e7ca      	b.n	80054e2 <_free_r+0x26>
 800554c:	b003      	add	sp, #12
 800554e:	bd30      	pop	{r4, r5, pc}
 8005550:	2000045c 	.word	0x2000045c

08005554 <sbrk_aligned>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	4e0e      	ldr	r6, [pc, #56]	; (8005590 <sbrk_aligned+0x3c>)
 8005558:	460c      	mov	r4, r1
 800555a:	6831      	ldr	r1, [r6, #0]
 800555c:	4605      	mov	r5, r0
 800555e:	b911      	cbnz	r1, 8005566 <sbrk_aligned+0x12>
 8005560:	f000 f88c 	bl	800567c <_sbrk_r>
 8005564:	6030      	str	r0, [r6, #0]
 8005566:	4621      	mov	r1, r4
 8005568:	4628      	mov	r0, r5
 800556a:	f000 f887 	bl	800567c <_sbrk_r>
 800556e:	1c43      	adds	r3, r0, #1
 8005570:	d00a      	beq.n	8005588 <sbrk_aligned+0x34>
 8005572:	1cc4      	adds	r4, r0, #3
 8005574:	f024 0403 	bic.w	r4, r4, #3
 8005578:	42a0      	cmp	r0, r4
 800557a:	d007      	beq.n	800558c <sbrk_aligned+0x38>
 800557c:	1a21      	subs	r1, r4, r0
 800557e:	4628      	mov	r0, r5
 8005580:	f000 f87c 	bl	800567c <_sbrk_r>
 8005584:	3001      	adds	r0, #1
 8005586:	d101      	bne.n	800558c <sbrk_aligned+0x38>
 8005588:	f04f 34ff 	mov.w	r4, #4294967295
 800558c:	4620      	mov	r0, r4
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	20000460 	.word	0x20000460

08005594 <_malloc_r>:
 8005594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	1ccd      	adds	r5, r1, #3
 800559a:	f025 0503 	bic.w	r5, r5, #3
 800559e:	3508      	adds	r5, #8
 80055a0:	2d0c      	cmp	r5, #12
 80055a2:	bf38      	it	cc
 80055a4:	250c      	movcc	r5, #12
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	4607      	mov	r7, r0
 80055aa:	db01      	blt.n	80055b0 <_malloc_r+0x1c>
 80055ac:	42a9      	cmp	r1, r5
 80055ae:	d905      	bls.n	80055bc <_malloc_r+0x28>
 80055b0:	230c      	movs	r3, #12
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	2600      	movs	r6, #0
 80055b6:	4630      	mov	r0, r6
 80055b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055bc:	4e2e      	ldr	r6, [pc, #184]	; (8005678 <_malloc_r+0xe4>)
 80055be:	f000 f911 	bl	80057e4 <__malloc_lock>
 80055c2:	6833      	ldr	r3, [r6, #0]
 80055c4:	461c      	mov	r4, r3
 80055c6:	bb34      	cbnz	r4, 8005616 <_malloc_r+0x82>
 80055c8:	4629      	mov	r1, r5
 80055ca:	4638      	mov	r0, r7
 80055cc:	f7ff ffc2 	bl	8005554 <sbrk_aligned>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	4604      	mov	r4, r0
 80055d4:	d14d      	bne.n	8005672 <_malloc_r+0xde>
 80055d6:	6834      	ldr	r4, [r6, #0]
 80055d8:	4626      	mov	r6, r4
 80055da:	2e00      	cmp	r6, #0
 80055dc:	d140      	bne.n	8005660 <_malloc_r+0xcc>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	4631      	mov	r1, r6
 80055e2:	4638      	mov	r0, r7
 80055e4:	eb04 0803 	add.w	r8, r4, r3
 80055e8:	f000 f848 	bl	800567c <_sbrk_r>
 80055ec:	4580      	cmp	r8, r0
 80055ee:	d13a      	bne.n	8005666 <_malloc_r+0xd2>
 80055f0:	6821      	ldr	r1, [r4, #0]
 80055f2:	3503      	adds	r5, #3
 80055f4:	1a6d      	subs	r5, r5, r1
 80055f6:	f025 0503 	bic.w	r5, r5, #3
 80055fa:	3508      	adds	r5, #8
 80055fc:	2d0c      	cmp	r5, #12
 80055fe:	bf38      	it	cc
 8005600:	250c      	movcc	r5, #12
 8005602:	4629      	mov	r1, r5
 8005604:	4638      	mov	r0, r7
 8005606:	f7ff ffa5 	bl	8005554 <sbrk_aligned>
 800560a:	3001      	adds	r0, #1
 800560c:	d02b      	beq.n	8005666 <_malloc_r+0xd2>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	442b      	add	r3, r5
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	e00e      	b.n	8005634 <_malloc_r+0xa0>
 8005616:	6822      	ldr	r2, [r4, #0]
 8005618:	1b52      	subs	r2, r2, r5
 800561a:	d41e      	bmi.n	800565a <_malloc_r+0xc6>
 800561c:	2a0b      	cmp	r2, #11
 800561e:	d916      	bls.n	800564e <_malloc_r+0xba>
 8005620:	1961      	adds	r1, r4, r5
 8005622:	42a3      	cmp	r3, r4
 8005624:	6025      	str	r5, [r4, #0]
 8005626:	bf18      	it	ne
 8005628:	6059      	strne	r1, [r3, #4]
 800562a:	6863      	ldr	r3, [r4, #4]
 800562c:	bf08      	it	eq
 800562e:	6031      	streq	r1, [r6, #0]
 8005630:	5162      	str	r2, [r4, r5]
 8005632:	604b      	str	r3, [r1, #4]
 8005634:	4638      	mov	r0, r7
 8005636:	f104 060b 	add.w	r6, r4, #11
 800563a:	f000 f8d9 	bl	80057f0 <__malloc_unlock>
 800563e:	f026 0607 	bic.w	r6, r6, #7
 8005642:	1d23      	adds	r3, r4, #4
 8005644:	1af2      	subs	r2, r6, r3
 8005646:	d0b6      	beq.n	80055b6 <_malloc_r+0x22>
 8005648:	1b9b      	subs	r3, r3, r6
 800564a:	50a3      	str	r3, [r4, r2]
 800564c:	e7b3      	b.n	80055b6 <_malloc_r+0x22>
 800564e:	6862      	ldr	r2, [r4, #4]
 8005650:	42a3      	cmp	r3, r4
 8005652:	bf0c      	ite	eq
 8005654:	6032      	streq	r2, [r6, #0]
 8005656:	605a      	strne	r2, [r3, #4]
 8005658:	e7ec      	b.n	8005634 <_malloc_r+0xa0>
 800565a:	4623      	mov	r3, r4
 800565c:	6864      	ldr	r4, [r4, #4]
 800565e:	e7b2      	b.n	80055c6 <_malloc_r+0x32>
 8005660:	4634      	mov	r4, r6
 8005662:	6876      	ldr	r6, [r6, #4]
 8005664:	e7b9      	b.n	80055da <_malloc_r+0x46>
 8005666:	230c      	movs	r3, #12
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	4638      	mov	r0, r7
 800566c:	f000 f8c0 	bl	80057f0 <__malloc_unlock>
 8005670:	e7a1      	b.n	80055b6 <_malloc_r+0x22>
 8005672:	6025      	str	r5, [r4, #0]
 8005674:	e7de      	b.n	8005634 <_malloc_r+0xa0>
 8005676:	bf00      	nop
 8005678:	2000045c 	.word	0x2000045c

0800567c <_sbrk_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4d06      	ldr	r5, [pc, #24]	; (8005698 <_sbrk_r+0x1c>)
 8005680:	2300      	movs	r3, #0
 8005682:	4604      	mov	r4, r0
 8005684:	4608      	mov	r0, r1
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f7fc f930 	bl	80018ec <_sbrk>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_sbrk_r+0x1a>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_sbrk_r+0x1a>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	20000464 	.word	0x20000464

0800569c <siprintf>:
 800569c:	b40e      	push	{r1, r2, r3}
 800569e:	b500      	push	{lr}
 80056a0:	b09c      	sub	sp, #112	; 0x70
 80056a2:	ab1d      	add	r3, sp, #116	; 0x74
 80056a4:	9002      	str	r0, [sp, #8]
 80056a6:	9006      	str	r0, [sp, #24]
 80056a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056ac:	4809      	ldr	r0, [pc, #36]	; (80056d4 <siprintf+0x38>)
 80056ae:	9107      	str	r1, [sp, #28]
 80056b0:	9104      	str	r1, [sp, #16]
 80056b2:	4909      	ldr	r1, [pc, #36]	; (80056d8 <siprintf+0x3c>)
 80056b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056b8:	9105      	str	r1, [sp, #20]
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	a902      	add	r1, sp, #8
 80056c0:	f000 f8f8 	bl	80058b4 <_svfiprintf_r>
 80056c4:	9b02      	ldr	r3, [sp, #8]
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	b01c      	add	sp, #112	; 0x70
 80056cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d0:	b003      	add	sp, #12
 80056d2:	4770      	bx	lr
 80056d4:	20000034 	.word	0x20000034
 80056d8:	ffff0208 	.word	0xffff0208

080056dc <strcpy>:
 80056dc:	4603      	mov	r3, r0
 80056de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056e2:	f803 2b01 	strb.w	r2, [r3], #1
 80056e6:	2a00      	cmp	r2, #0
 80056e8:	d1f9      	bne.n	80056de <strcpy+0x2>
 80056ea:	4770      	bx	lr

080056ec <_strtoul_l.constprop.0>:
 80056ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056f0:	4f36      	ldr	r7, [pc, #216]	; (80057cc <_strtoul_l.constprop.0+0xe0>)
 80056f2:	4686      	mov	lr, r0
 80056f4:	460d      	mov	r5, r1
 80056f6:	4628      	mov	r0, r5
 80056f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056fc:	5de6      	ldrb	r6, [r4, r7]
 80056fe:	f016 0608 	ands.w	r6, r6, #8
 8005702:	d1f8      	bne.n	80056f6 <_strtoul_l.constprop.0+0xa>
 8005704:	2c2d      	cmp	r4, #45	; 0x2d
 8005706:	d12f      	bne.n	8005768 <_strtoul_l.constprop.0+0x7c>
 8005708:	782c      	ldrb	r4, [r5, #0]
 800570a:	2601      	movs	r6, #1
 800570c:	1c85      	adds	r5, r0, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d057      	beq.n	80057c2 <_strtoul_l.constprop.0+0xd6>
 8005712:	2b10      	cmp	r3, #16
 8005714:	d109      	bne.n	800572a <_strtoul_l.constprop.0+0x3e>
 8005716:	2c30      	cmp	r4, #48	; 0x30
 8005718:	d107      	bne.n	800572a <_strtoul_l.constprop.0+0x3e>
 800571a:	7828      	ldrb	r0, [r5, #0]
 800571c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005720:	2858      	cmp	r0, #88	; 0x58
 8005722:	d149      	bne.n	80057b8 <_strtoul_l.constprop.0+0xcc>
 8005724:	786c      	ldrb	r4, [r5, #1]
 8005726:	2310      	movs	r3, #16
 8005728:	3502      	adds	r5, #2
 800572a:	f04f 38ff 	mov.w	r8, #4294967295
 800572e:	2700      	movs	r7, #0
 8005730:	fbb8 f8f3 	udiv	r8, r8, r3
 8005734:	fb03 f908 	mul.w	r9, r3, r8
 8005738:	ea6f 0909 	mvn.w	r9, r9
 800573c:	4638      	mov	r0, r7
 800573e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005742:	f1bc 0f09 	cmp.w	ip, #9
 8005746:	d814      	bhi.n	8005772 <_strtoul_l.constprop.0+0x86>
 8005748:	4664      	mov	r4, ip
 800574a:	42a3      	cmp	r3, r4
 800574c:	dd22      	ble.n	8005794 <_strtoul_l.constprop.0+0xa8>
 800574e:	2f00      	cmp	r7, #0
 8005750:	db1d      	blt.n	800578e <_strtoul_l.constprop.0+0xa2>
 8005752:	4580      	cmp	r8, r0
 8005754:	d31b      	bcc.n	800578e <_strtoul_l.constprop.0+0xa2>
 8005756:	d101      	bne.n	800575c <_strtoul_l.constprop.0+0x70>
 8005758:	45a1      	cmp	r9, r4
 800575a:	db18      	blt.n	800578e <_strtoul_l.constprop.0+0xa2>
 800575c:	fb00 4003 	mla	r0, r0, r3, r4
 8005760:	2701      	movs	r7, #1
 8005762:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005766:	e7ea      	b.n	800573e <_strtoul_l.constprop.0+0x52>
 8005768:	2c2b      	cmp	r4, #43	; 0x2b
 800576a:	bf04      	itt	eq
 800576c:	782c      	ldrbeq	r4, [r5, #0]
 800576e:	1c85      	addeq	r5, r0, #2
 8005770:	e7cd      	b.n	800570e <_strtoul_l.constprop.0+0x22>
 8005772:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005776:	f1bc 0f19 	cmp.w	ip, #25
 800577a:	d801      	bhi.n	8005780 <_strtoul_l.constprop.0+0x94>
 800577c:	3c37      	subs	r4, #55	; 0x37
 800577e:	e7e4      	b.n	800574a <_strtoul_l.constprop.0+0x5e>
 8005780:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005784:	f1bc 0f19 	cmp.w	ip, #25
 8005788:	d804      	bhi.n	8005794 <_strtoul_l.constprop.0+0xa8>
 800578a:	3c57      	subs	r4, #87	; 0x57
 800578c:	e7dd      	b.n	800574a <_strtoul_l.constprop.0+0x5e>
 800578e:	f04f 37ff 	mov.w	r7, #4294967295
 8005792:	e7e6      	b.n	8005762 <_strtoul_l.constprop.0+0x76>
 8005794:	2f00      	cmp	r7, #0
 8005796:	da07      	bge.n	80057a8 <_strtoul_l.constprop.0+0xbc>
 8005798:	2322      	movs	r3, #34	; 0x22
 800579a:	f8ce 3000 	str.w	r3, [lr]
 800579e:	f04f 30ff 	mov.w	r0, #4294967295
 80057a2:	b932      	cbnz	r2, 80057b2 <_strtoul_l.constprop.0+0xc6>
 80057a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057a8:	b106      	cbz	r6, 80057ac <_strtoul_l.constprop.0+0xc0>
 80057aa:	4240      	negs	r0, r0
 80057ac:	2a00      	cmp	r2, #0
 80057ae:	d0f9      	beq.n	80057a4 <_strtoul_l.constprop.0+0xb8>
 80057b0:	b107      	cbz	r7, 80057b4 <_strtoul_l.constprop.0+0xc8>
 80057b2:	1e69      	subs	r1, r5, #1
 80057b4:	6011      	str	r1, [r2, #0]
 80057b6:	e7f5      	b.n	80057a4 <_strtoul_l.constprop.0+0xb8>
 80057b8:	2430      	movs	r4, #48	; 0x30
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1b5      	bne.n	800572a <_strtoul_l.constprop.0+0x3e>
 80057be:	2308      	movs	r3, #8
 80057c0:	e7b3      	b.n	800572a <_strtoul_l.constprop.0+0x3e>
 80057c2:	2c30      	cmp	r4, #48	; 0x30
 80057c4:	d0a9      	beq.n	800571a <_strtoul_l.constprop.0+0x2e>
 80057c6:	230a      	movs	r3, #10
 80057c8:	e7af      	b.n	800572a <_strtoul_l.constprop.0+0x3e>
 80057ca:	bf00      	nop
 80057cc:	0800613d 	.word	0x0800613d

080057d0 <strtoul>:
 80057d0:	4613      	mov	r3, r2
 80057d2:	460a      	mov	r2, r1
 80057d4:	4601      	mov	r1, r0
 80057d6:	4802      	ldr	r0, [pc, #8]	; (80057e0 <strtoul+0x10>)
 80057d8:	6800      	ldr	r0, [r0, #0]
 80057da:	f7ff bf87 	b.w	80056ec <_strtoul_l.constprop.0>
 80057de:	bf00      	nop
 80057e0:	20000034 	.word	0x20000034

080057e4 <__malloc_lock>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__malloc_lock+0x8>)
 80057e6:	f000 baf9 	b.w	8005ddc <__retarget_lock_acquire_recursive>
 80057ea:	bf00      	nop
 80057ec:	20000468 	.word	0x20000468

080057f0 <__malloc_unlock>:
 80057f0:	4801      	ldr	r0, [pc, #4]	; (80057f8 <__malloc_unlock+0x8>)
 80057f2:	f000 baf4 	b.w	8005dde <__retarget_lock_release_recursive>
 80057f6:	bf00      	nop
 80057f8:	20000468 	.word	0x20000468

080057fc <__ssputs_r>:
 80057fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005800:	688e      	ldr	r6, [r1, #8]
 8005802:	429e      	cmp	r6, r3
 8005804:	4682      	mov	sl, r0
 8005806:	460c      	mov	r4, r1
 8005808:	4690      	mov	r8, r2
 800580a:	461f      	mov	r7, r3
 800580c:	d838      	bhi.n	8005880 <__ssputs_r+0x84>
 800580e:	898a      	ldrh	r2, [r1, #12]
 8005810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005814:	d032      	beq.n	800587c <__ssputs_r+0x80>
 8005816:	6825      	ldr	r5, [r4, #0]
 8005818:	6909      	ldr	r1, [r1, #16]
 800581a:	eba5 0901 	sub.w	r9, r5, r1
 800581e:	6965      	ldr	r5, [r4, #20]
 8005820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005828:	3301      	adds	r3, #1
 800582a:	444b      	add	r3, r9
 800582c:	106d      	asrs	r5, r5, #1
 800582e:	429d      	cmp	r5, r3
 8005830:	bf38      	it	cc
 8005832:	461d      	movcc	r5, r3
 8005834:	0553      	lsls	r3, r2, #21
 8005836:	d531      	bpl.n	800589c <__ssputs_r+0xa0>
 8005838:	4629      	mov	r1, r5
 800583a:	f7ff feab 	bl	8005594 <_malloc_r>
 800583e:	4606      	mov	r6, r0
 8005840:	b950      	cbnz	r0, 8005858 <__ssputs_r+0x5c>
 8005842:	230c      	movs	r3, #12
 8005844:	f8ca 3000 	str.w	r3, [sl]
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005858:	6921      	ldr	r1, [r4, #16]
 800585a:	464a      	mov	r2, r9
 800585c:	f000 fac0 	bl	8005de0 <memcpy>
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	6126      	str	r6, [r4, #16]
 800586e:	6165      	str	r5, [r4, #20]
 8005870:	444e      	add	r6, r9
 8005872:	eba5 0509 	sub.w	r5, r5, r9
 8005876:	6026      	str	r6, [r4, #0]
 8005878:	60a5      	str	r5, [r4, #8]
 800587a:	463e      	mov	r6, r7
 800587c:	42be      	cmp	r6, r7
 800587e:	d900      	bls.n	8005882 <__ssputs_r+0x86>
 8005880:	463e      	mov	r6, r7
 8005882:	6820      	ldr	r0, [r4, #0]
 8005884:	4632      	mov	r2, r6
 8005886:	4641      	mov	r1, r8
 8005888:	f000 fab8 	bl	8005dfc <memmove>
 800588c:	68a3      	ldr	r3, [r4, #8]
 800588e:	1b9b      	subs	r3, r3, r6
 8005890:	60a3      	str	r3, [r4, #8]
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	4433      	add	r3, r6
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	2000      	movs	r0, #0
 800589a:	e7db      	b.n	8005854 <__ssputs_r+0x58>
 800589c:	462a      	mov	r2, r5
 800589e:	f000 fac7 	bl	8005e30 <_realloc_r>
 80058a2:	4606      	mov	r6, r0
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d1e1      	bne.n	800586c <__ssputs_r+0x70>
 80058a8:	6921      	ldr	r1, [r4, #16]
 80058aa:	4650      	mov	r0, sl
 80058ac:	f7ff fe06 	bl	80054bc <_free_r>
 80058b0:	e7c7      	b.n	8005842 <__ssputs_r+0x46>
	...

080058b4 <_svfiprintf_r>:
 80058b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	4698      	mov	r8, r3
 80058ba:	898b      	ldrh	r3, [r1, #12]
 80058bc:	061b      	lsls	r3, r3, #24
 80058be:	b09d      	sub	sp, #116	; 0x74
 80058c0:	4607      	mov	r7, r0
 80058c2:	460d      	mov	r5, r1
 80058c4:	4614      	mov	r4, r2
 80058c6:	d50e      	bpl.n	80058e6 <_svfiprintf_r+0x32>
 80058c8:	690b      	ldr	r3, [r1, #16]
 80058ca:	b963      	cbnz	r3, 80058e6 <_svfiprintf_r+0x32>
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	f7ff fe61 	bl	8005594 <_malloc_r>
 80058d2:	6028      	str	r0, [r5, #0]
 80058d4:	6128      	str	r0, [r5, #16]
 80058d6:	b920      	cbnz	r0, 80058e2 <_svfiprintf_r+0x2e>
 80058d8:	230c      	movs	r3, #12
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	e0d1      	b.n	8005a86 <_svfiprintf_r+0x1d2>
 80058e2:	2340      	movs	r3, #64	; 0x40
 80058e4:	616b      	str	r3, [r5, #20]
 80058e6:	2300      	movs	r3, #0
 80058e8:	9309      	str	r3, [sp, #36]	; 0x24
 80058ea:	2320      	movs	r3, #32
 80058ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f4:	2330      	movs	r3, #48	; 0x30
 80058f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005aa0 <_svfiprintf_r+0x1ec>
 80058fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058fe:	f04f 0901 	mov.w	r9, #1
 8005902:	4623      	mov	r3, r4
 8005904:	469a      	mov	sl, r3
 8005906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800590a:	b10a      	cbz	r2, 8005910 <_svfiprintf_r+0x5c>
 800590c:	2a25      	cmp	r2, #37	; 0x25
 800590e:	d1f9      	bne.n	8005904 <_svfiprintf_r+0x50>
 8005910:	ebba 0b04 	subs.w	fp, sl, r4
 8005914:	d00b      	beq.n	800592e <_svfiprintf_r+0x7a>
 8005916:	465b      	mov	r3, fp
 8005918:	4622      	mov	r2, r4
 800591a:	4629      	mov	r1, r5
 800591c:	4638      	mov	r0, r7
 800591e:	f7ff ff6d 	bl	80057fc <__ssputs_r>
 8005922:	3001      	adds	r0, #1
 8005924:	f000 80aa 	beq.w	8005a7c <_svfiprintf_r+0x1c8>
 8005928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800592a:	445a      	add	r2, fp
 800592c:	9209      	str	r2, [sp, #36]	; 0x24
 800592e:	f89a 3000 	ldrb.w	r3, [sl]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80a2 	beq.w	8005a7c <_svfiprintf_r+0x1c8>
 8005938:	2300      	movs	r3, #0
 800593a:	f04f 32ff 	mov.w	r2, #4294967295
 800593e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005942:	f10a 0a01 	add.w	sl, sl, #1
 8005946:	9304      	str	r3, [sp, #16]
 8005948:	9307      	str	r3, [sp, #28]
 800594a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800594e:	931a      	str	r3, [sp, #104]	; 0x68
 8005950:	4654      	mov	r4, sl
 8005952:	2205      	movs	r2, #5
 8005954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005958:	4851      	ldr	r0, [pc, #324]	; (8005aa0 <_svfiprintf_r+0x1ec>)
 800595a:	f7fa fc61 	bl	8000220 <memchr>
 800595e:	9a04      	ldr	r2, [sp, #16]
 8005960:	b9d8      	cbnz	r0, 800599a <_svfiprintf_r+0xe6>
 8005962:	06d0      	lsls	r0, r2, #27
 8005964:	bf44      	itt	mi
 8005966:	2320      	movmi	r3, #32
 8005968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800596c:	0711      	lsls	r1, r2, #28
 800596e:	bf44      	itt	mi
 8005970:	232b      	movmi	r3, #43	; 0x2b
 8005972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005976:	f89a 3000 	ldrb.w	r3, [sl]
 800597a:	2b2a      	cmp	r3, #42	; 0x2a
 800597c:	d015      	beq.n	80059aa <_svfiprintf_r+0xf6>
 800597e:	9a07      	ldr	r2, [sp, #28]
 8005980:	4654      	mov	r4, sl
 8005982:	2000      	movs	r0, #0
 8005984:	f04f 0c0a 	mov.w	ip, #10
 8005988:	4621      	mov	r1, r4
 800598a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800598e:	3b30      	subs	r3, #48	; 0x30
 8005990:	2b09      	cmp	r3, #9
 8005992:	d94e      	bls.n	8005a32 <_svfiprintf_r+0x17e>
 8005994:	b1b0      	cbz	r0, 80059c4 <_svfiprintf_r+0x110>
 8005996:	9207      	str	r2, [sp, #28]
 8005998:	e014      	b.n	80059c4 <_svfiprintf_r+0x110>
 800599a:	eba0 0308 	sub.w	r3, r0, r8
 800599e:	fa09 f303 	lsl.w	r3, r9, r3
 80059a2:	4313      	orrs	r3, r2
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	46a2      	mov	sl, r4
 80059a8:	e7d2      	b.n	8005950 <_svfiprintf_r+0x9c>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	1d19      	adds	r1, r3, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	9103      	str	r1, [sp, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bfbb      	ittet	lt
 80059b6:	425b      	neglt	r3, r3
 80059b8:	f042 0202 	orrlt.w	r2, r2, #2
 80059bc:	9307      	strge	r3, [sp, #28]
 80059be:	9307      	strlt	r3, [sp, #28]
 80059c0:	bfb8      	it	lt
 80059c2:	9204      	strlt	r2, [sp, #16]
 80059c4:	7823      	ldrb	r3, [r4, #0]
 80059c6:	2b2e      	cmp	r3, #46	; 0x2e
 80059c8:	d10c      	bne.n	80059e4 <_svfiprintf_r+0x130>
 80059ca:	7863      	ldrb	r3, [r4, #1]
 80059cc:	2b2a      	cmp	r3, #42	; 0x2a
 80059ce:	d135      	bne.n	8005a3c <_svfiprintf_r+0x188>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	9203      	str	r2, [sp, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfb8      	it	lt
 80059dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80059e0:	3402      	adds	r4, #2
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ab0 <_svfiprintf_r+0x1fc>
 80059e8:	7821      	ldrb	r1, [r4, #0]
 80059ea:	2203      	movs	r2, #3
 80059ec:	4650      	mov	r0, sl
 80059ee:	f7fa fc17 	bl	8000220 <memchr>
 80059f2:	b140      	cbz	r0, 8005a06 <_svfiprintf_r+0x152>
 80059f4:	2340      	movs	r3, #64	; 0x40
 80059f6:	eba0 000a 	sub.w	r0, r0, sl
 80059fa:	fa03 f000 	lsl.w	r0, r3, r0
 80059fe:	9b04      	ldr	r3, [sp, #16]
 8005a00:	4303      	orrs	r3, r0
 8005a02:	3401      	adds	r4, #1
 8005a04:	9304      	str	r3, [sp, #16]
 8005a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0a:	4826      	ldr	r0, [pc, #152]	; (8005aa4 <_svfiprintf_r+0x1f0>)
 8005a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a10:	2206      	movs	r2, #6
 8005a12:	f7fa fc05 	bl	8000220 <memchr>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d038      	beq.n	8005a8c <_svfiprintf_r+0x1d8>
 8005a1a:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <_svfiprintf_r+0x1f4>)
 8005a1c:	bb1b      	cbnz	r3, 8005a66 <_svfiprintf_r+0x1b2>
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	3307      	adds	r3, #7
 8005a22:	f023 0307 	bic.w	r3, r3, #7
 8005a26:	3308      	adds	r3, #8
 8005a28:	9303      	str	r3, [sp, #12]
 8005a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2c:	4433      	add	r3, r6
 8005a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a30:	e767      	b.n	8005902 <_svfiprintf_r+0x4e>
 8005a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a36:	460c      	mov	r4, r1
 8005a38:	2001      	movs	r0, #1
 8005a3a:	e7a5      	b.n	8005988 <_svfiprintf_r+0xd4>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	3401      	adds	r4, #1
 8005a40:	9305      	str	r3, [sp, #20]
 8005a42:	4619      	mov	r1, r3
 8005a44:	f04f 0c0a 	mov.w	ip, #10
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a4e:	3a30      	subs	r2, #48	; 0x30
 8005a50:	2a09      	cmp	r2, #9
 8005a52:	d903      	bls.n	8005a5c <_svfiprintf_r+0x1a8>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0c5      	beq.n	80059e4 <_svfiprintf_r+0x130>
 8005a58:	9105      	str	r1, [sp, #20]
 8005a5a:	e7c3      	b.n	80059e4 <_svfiprintf_r+0x130>
 8005a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a60:	4604      	mov	r4, r0
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7f0      	b.n	8005a48 <_svfiprintf_r+0x194>
 8005a66:	ab03      	add	r3, sp, #12
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	462a      	mov	r2, r5
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <_svfiprintf_r+0x1f8>)
 8005a6e:	a904      	add	r1, sp, #16
 8005a70:	4638      	mov	r0, r7
 8005a72:	f3af 8000 	nop.w
 8005a76:	1c42      	adds	r2, r0, #1
 8005a78:	4606      	mov	r6, r0
 8005a7a:	d1d6      	bne.n	8005a2a <_svfiprintf_r+0x176>
 8005a7c:	89ab      	ldrh	r3, [r5, #12]
 8005a7e:	065b      	lsls	r3, r3, #25
 8005a80:	f53f af2c 	bmi.w	80058dc <_svfiprintf_r+0x28>
 8005a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a86:	b01d      	add	sp, #116	; 0x74
 8005a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8c:	ab03      	add	r3, sp, #12
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	462a      	mov	r2, r5
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <_svfiprintf_r+0x1f8>)
 8005a94:	a904      	add	r1, sp, #16
 8005a96:	4638      	mov	r0, r7
 8005a98:	f000 f87a 	bl	8005b90 <_printf_i>
 8005a9c:	e7eb      	b.n	8005a76 <_svfiprintf_r+0x1c2>
 8005a9e:	bf00      	nop
 8005aa0:	0800623d 	.word	0x0800623d
 8005aa4:	08006247 	.word	0x08006247
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	080057fd 	.word	0x080057fd
 8005ab0:	08006243 	.word	0x08006243

08005ab4 <_printf_common>:
 8005ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	4616      	mov	r6, r2
 8005aba:	4699      	mov	r9, r3
 8005abc:	688a      	ldr	r2, [r1, #8]
 8005abe:	690b      	ldr	r3, [r1, #16]
 8005ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	bfb8      	it	lt
 8005ac8:	4613      	movlt	r3, r2
 8005aca:	6033      	str	r3, [r6, #0]
 8005acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	b10a      	cbz	r2, 8005ada <_printf_common+0x26>
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	6033      	str	r3, [r6, #0]
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	0699      	lsls	r1, r3, #26
 8005ade:	bf42      	ittt	mi
 8005ae0:	6833      	ldrmi	r3, [r6, #0]
 8005ae2:	3302      	addmi	r3, #2
 8005ae4:	6033      	strmi	r3, [r6, #0]
 8005ae6:	6825      	ldr	r5, [r4, #0]
 8005ae8:	f015 0506 	ands.w	r5, r5, #6
 8005aec:	d106      	bne.n	8005afc <_printf_common+0x48>
 8005aee:	f104 0a19 	add.w	sl, r4, #25
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	6832      	ldr	r2, [r6, #0]
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dc26      	bgt.n	8005b4a <_printf_common+0x96>
 8005afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b00:	1e13      	subs	r3, r2, #0
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	bf18      	it	ne
 8005b06:	2301      	movne	r3, #1
 8005b08:	0692      	lsls	r2, r2, #26
 8005b0a:	d42b      	bmi.n	8005b64 <_printf_common+0xb0>
 8005b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b10:	4649      	mov	r1, r9
 8005b12:	4638      	mov	r0, r7
 8005b14:	47c0      	blx	r8
 8005b16:	3001      	adds	r0, #1
 8005b18:	d01e      	beq.n	8005b58 <_printf_common+0xa4>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	68e5      	ldr	r5, [r4, #12]
 8005b1e:	6832      	ldr	r2, [r6, #0]
 8005b20:	f003 0306 	and.w	r3, r3, #6
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	bf08      	it	eq
 8005b28:	1aad      	subeq	r5, r5, r2
 8005b2a:	68a3      	ldr	r3, [r4, #8]
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	bf0c      	ite	eq
 8005b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b34:	2500      	movne	r5, #0
 8005b36:	4293      	cmp	r3, r2
 8005b38:	bfc4      	itt	gt
 8005b3a:	1a9b      	subgt	r3, r3, r2
 8005b3c:	18ed      	addgt	r5, r5, r3
 8005b3e:	2600      	movs	r6, #0
 8005b40:	341a      	adds	r4, #26
 8005b42:	42b5      	cmp	r5, r6
 8005b44:	d11a      	bne.n	8005b7c <_printf_common+0xc8>
 8005b46:	2000      	movs	r0, #0
 8005b48:	e008      	b.n	8005b5c <_printf_common+0xa8>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	4649      	mov	r1, r9
 8005b50:	4638      	mov	r0, r7
 8005b52:	47c0      	blx	r8
 8005b54:	3001      	adds	r0, #1
 8005b56:	d103      	bne.n	8005b60 <_printf_common+0xac>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b60:	3501      	adds	r5, #1
 8005b62:	e7c6      	b.n	8005af2 <_printf_common+0x3e>
 8005b64:	18e1      	adds	r1, r4, r3
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	2030      	movs	r0, #48	; 0x30
 8005b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b6e:	4422      	add	r2, r4
 8005b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b78:	3302      	adds	r3, #2
 8005b7a:	e7c7      	b.n	8005b0c <_printf_common+0x58>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4622      	mov	r2, r4
 8005b80:	4649      	mov	r1, r9
 8005b82:	4638      	mov	r0, r7
 8005b84:	47c0      	blx	r8
 8005b86:	3001      	adds	r0, #1
 8005b88:	d0e6      	beq.n	8005b58 <_printf_common+0xa4>
 8005b8a:	3601      	adds	r6, #1
 8005b8c:	e7d9      	b.n	8005b42 <_printf_common+0x8e>
	...

08005b90 <_printf_i>:
 8005b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b94:	7e0f      	ldrb	r7, [r1, #24]
 8005b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b98:	2f78      	cmp	r7, #120	; 0x78
 8005b9a:	4691      	mov	r9, r2
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	469a      	mov	sl, r3
 8005ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ba6:	d807      	bhi.n	8005bb8 <_printf_i+0x28>
 8005ba8:	2f62      	cmp	r7, #98	; 0x62
 8005baa:	d80a      	bhi.n	8005bc2 <_printf_i+0x32>
 8005bac:	2f00      	cmp	r7, #0
 8005bae:	f000 80d8 	beq.w	8005d62 <_printf_i+0x1d2>
 8005bb2:	2f58      	cmp	r7, #88	; 0x58
 8005bb4:	f000 80a3 	beq.w	8005cfe <_printf_i+0x16e>
 8005bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bc0:	e03a      	b.n	8005c38 <_printf_i+0xa8>
 8005bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bc6:	2b15      	cmp	r3, #21
 8005bc8:	d8f6      	bhi.n	8005bb8 <_printf_i+0x28>
 8005bca:	a101      	add	r1, pc, #4	; (adr r1, 8005bd0 <_printf_i+0x40>)
 8005bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bd0:	08005c29 	.word	0x08005c29
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005bb9 	.word	0x08005bb9
 8005bdc:	08005bb9 	.word	0x08005bb9
 8005be0:	08005bb9 	.word	0x08005bb9
 8005be4:	08005bb9 	.word	0x08005bb9
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005bb9 	.word	0x08005bb9
 8005bf0:	08005bb9 	.word	0x08005bb9
 8005bf4:	08005bb9 	.word	0x08005bb9
 8005bf8:	08005bb9 	.word	0x08005bb9
 8005bfc:	08005d49 	.word	0x08005d49
 8005c00:	08005c6d 	.word	0x08005c6d
 8005c04:	08005d2b 	.word	0x08005d2b
 8005c08:	08005bb9 	.word	0x08005bb9
 8005c0c:	08005bb9 	.word	0x08005bb9
 8005c10:	08005d6b 	.word	0x08005d6b
 8005c14:	08005bb9 	.word	0x08005bb9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005bb9 	.word	0x08005bb9
 8005c20:	08005bb9 	.word	0x08005bb9
 8005c24:	08005d33 	.word	0x08005d33
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	1d1a      	adds	r2, r3, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	602a      	str	r2, [r5, #0]
 8005c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0a3      	b.n	8005d84 <_printf_i+0x1f4>
 8005c3c:	6820      	ldr	r0, [r4, #0]
 8005c3e:	6829      	ldr	r1, [r5, #0]
 8005c40:	0606      	lsls	r6, r0, #24
 8005c42:	f101 0304 	add.w	r3, r1, #4
 8005c46:	d50a      	bpl.n	8005c5e <_printf_i+0xce>
 8005c48:	680e      	ldr	r6, [r1, #0]
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	2e00      	cmp	r6, #0
 8005c4e:	da03      	bge.n	8005c58 <_printf_i+0xc8>
 8005c50:	232d      	movs	r3, #45	; 0x2d
 8005c52:	4276      	negs	r6, r6
 8005c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c58:	485e      	ldr	r0, [pc, #376]	; (8005dd4 <_printf_i+0x244>)
 8005c5a:	230a      	movs	r3, #10
 8005c5c:	e019      	b.n	8005c92 <_printf_i+0x102>
 8005c5e:	680e      	ldr	r6, [r1, #0]
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c66:	bf18      	it	ne
 8005c68:	b236      	sxthne	r6, r6
 8005c6a:	e7ef      	b.n	8005c4c <_printf_i+0xbc>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	1d19      	adds	r1, r3, #4
 8005c72:	6029      	str	r1, [r5, #0]
 8005c74:	0601      	lsls	r1, r0, #24
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0xec>
 8005c78:	681e      	ldr	r6, [r3, #0]
 8005c7a:	e002      	b.n	8005c82 <_printf_i+0xf2>
 8005c7c:	0646      	lsls	r6, r0, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0xe8>
 8005c80:	881e      	ldrh	r6, [r3, #0]
 8005c82:	4854      	ldr	r0, [pc, #336]	; (8005dd4 <_printf_i+0x244>)
 8005c84:	2f6f      	cmp	r7, #111	; 0x6f
 8005c86:	bf0c      	ite	eq
 8005c88:	2308      	moveq	r3, #8
 8005c8a:	230a      	movne	r3, #10
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c92:	6865      	ldr	r5, [r4, #4]
 8005c94:	60a5      	str	r5, [r4, #8]
 8005c96:	2d00      	cmp	r5, #0
 8005c98:	bfa2      	ittt	ge
 8005c9a:	6821      	ldrge	r1, [r4, #0]
 8005c9c:	f021 0104 	bicge.w	r1, r1, #4
 8005ca0:	6021      	strge	r1, [r4, #0]
 8005ca2:	b90e      	cbnz	r6, 8005ca8 <_printf_i+0x118>
 8005ca4:	2d00      	cmp	r5, #0
 8005ca6:	d04d      	beq.n	8005d44 <_printf_i+0x1b4>
 8005ca8:	4615      	mov	r5, r2
 8005caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cae:	fb03 6711 	mls	r7, r3, r1, r6
 8005cb2:	5dc7      	ldrb	r7, [r0, r7]
 8005cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cb8:	4637      	mov	r7, r6
 8005cba:	42bb      	cmp	r3, r7
 8005cbc:	460e      	mov	r6, r1
 8005cbe:	d9f4      	bls.n	8005caa <_printf_i+0x11a>
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d10b      	bne.n	8005cdc <_printf_i+0x14c>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	07de      	lsls	r6, r3, #31
 8005cc8:	d508      	bpl.n	8005cdc <_printf_i+0x14c>
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	6861      	ldr	r1, [r4, #4]
 8005cce:	4299      	cmp	r1, r3
 8005cd0:	bfde      	ittt	le
 8005cd2:	2330      	movle	r3, #48	; 0x30
 8005cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cdc:	1b52      	subs	r2, r2, r5
 8005cde:	6122      	str	r2, [r4, #16]
 8005ce0:	f8cd a000 	str.w	sl, [sp]
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	aa03      	add	r2, sp, #12
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4640      	mov	r0, r8
 8005cec:	f7ff fee2 	bl	8005ab4 <_printf_common>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d14c      	bne.n	8005d8e <_printf_i+0x1fe>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	b004      	add	sp, #16
 8005cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfe:	4835      	ldr	r0, [pc, #212]	; (8005dd4 <_printf_i+0x244>)
 8005d00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d04:	6829      	ldr	r1, [r5, #0]
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d0c:	6029      	str	r1, [r5, #0]
 8005d0e:	061d      	lsls	r5, r3, #24
 8005d10:	d514      	bpl.n	8005d3c <_printf_i+0x1ac>
 8005d12:	07df      	lsls	r7, r3, #31
 8005d14:	bf44      	itt	mi
 8005d16:	f043 0320 	orrmi.w	r3, r3, #32
 8005d1a:	6023      	strmi	r3, [r4, #0]
 8005d1c:	b91e      	cbnz	r6, 8005d26 <_printf_i+0x196>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	f023 0320 	bic.w	r3, r3, #32
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	2310      	movs	r3, #16
 8005d28:	e7b0      	b.n	8005c8c <_printf_i+0xfc>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f043 0320 	orr.w	r3, r3, #32
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	2378      	movs	r3, #120	; 0x78
 8005d34:	4828      	ldr	r0, [pc, #160]	; (8005dd8 <_printf_i+0x248>)
 8005d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d3a:	e7e3      	b.n	8005d04 <_printf_i+0x174>
 8005d3c:	0659      	lsls	r1, r3, #25
 8005d3e:	bf48      	it	mi
 8005d40:	b2b6      	uxthmi	r6, r6
 8005d42:	e7e6      	b.n	8005d12 <_printf_i+0x182>
 8005d44:	4615      	mov	r5, r2
 8005d46:	e7bb      	b.n	8005cc0 <_printf_i+0x130>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	6826      	ldr	r6, [r4, #0]
 8005d4c:	6961      	ldr	r1, [r4, #20]
 8005d4e:	1d18      	adds	r0, r3, #4
 8005d50:	6028      	str	r0, [r5, #0]
 8005d52:	0635      	lsls	r5, r6, #24
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	d501      	bpl.n	8005d5c <_printf_i+0x1cc>
 8005d58:	6019      	str	r1, [r3, #0]
 8005d5a:	e002      	b.n	8005d62 <_printf_i+0x1d2>
 8005d5c:	0670      	lsls	r0, r6, #25
 8005d5e:	d5fb      	bpl.n	8005d58 <_printf_i+0x1c8>
 8005d60:	8019      	strh	r1, [r3, #0]
 8005d62:	2300      	movs	r3, #0
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	4615      	mov	r5, r2
 8005d68:	e7ba      	b.n	8005ce0 <_printf_i+0x150>
 8005d6a:	682b      	ldr	r3, [r5, #0]
 8005d6c:	1d1a      	adds	r2, r3, #4
 8005d6e:	602a      	str	r2, [r5, #0]
 8005d70:	681d      	ldr	r5, [r3, #0]
 8005d72:	6862      	ldr	r2, [r4, #4]
 8005d74:	2100      	movs	r1, #0
 8005d76:	4628      	mov	r0, r5
 8005d78:	f7fa fa52 	bl	8000220 <memchr>
 8005d7c:	b108      	cbz	r0, 8005d82 <_printf_i+0x1f2>
 8005d7e:	1b40      	subs	r0, r0, r5
 8005d80:	6060      	str	r0, [r4, #4]
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	6123      	str	r3, [r4, #16]
 8005d86:	2300      	movs	r3, #0
 8005d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8c:	e7a8      	b.n	8005ce0 <_printf_i+0x150>
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	462a      	mov	r2, r5
 8005d92:	4649      	mov	r1, r9
 8005d94:	4640      	mov	r0, r8
 8005d96:	47d0      	blx	sl
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d0ab      	beq.n	8005cf4 <_printf_i+0x164>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	079b      	lsls	r3, r3, #30
 8005da0:	d413      	bmi.n	8005dca <_printf_i+0x23a>
 8005da2:	68e0      	ldr	r0, [r4, #12]
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	4298      	cmp	r0, r3
 8005da8:	bfb8      	it	lt
 8005daa:	4618      	movlt	r0, r3
 8005dac:	e7a4      	b.n	8005cf8 <_printf_i+0x168>
 8005dae:	2301      	movs	r3, #1
 8005db0:	4632      	mov	r2, r6
 8005db2:	4649      	mov	r1, r9
 8005db4:	4640      	mov	r0, r8
 8005db6:	47d0      	blx	sl
 8005db8:	3001      	adds	r0, #1
 8005dba:	d09b      	beq.n	8005cf4 <_printf_i+0x164>
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	68e3      	ldr	r3, [r4, #12]
 8005dc0:	9903      	ldr	r1, [sp, #12]
 8005dc2:	1a5b      	subs	r3, r3, r1
 8005dc4:	42ab      	cmp	r3, r5
 8005dc6:	dcf2      	bgt.n	8005dae <_printf_i+0x21e>
 8005dc8:	e7eb      	b.n	8005da2 <_printf_i+0x212>
 8005dca:	2500      	movs	r5, #0
 8005dcc:	f104 0619 	add.w	r6, r4, #25
 8005dd0:	e7f5      	b.n	8005dbe <_printf_i+0x22e>
 8005dd2:	bf00      	nop
 8005dd4:	0800624e 	.word	0x0800624e
 8005dd8:	0800625f 	.word	0x0800625f

08005ddc <__retarget_lock_acquire_recursive>:
 8005ddc:	4770      	bx	lr

08005dde <__retarget_lock_release_recursive>:
 8005dde:	4770      	bx	lr

08005de0 <memcpy>:
 8005de0:	440a      	add	r2, r1
 8005de2:	4291      	cmp	r1, r2
 8005de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005de8:	d100      	bne.n	8005dec <memcpy+0xc>
 8005dea:	4770      	bx	lr
 8005dec:	b510      	push	{r4, lr}
 8005dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005df6:	4291      	cmp	r1, r2
 8005df8:	d1f9      	bne.n	8005dee <memcpy+0xe>
 8005dfa:	bd10      	pop	{r4, pc}

08005dfc <memmove>:
 8005dfc:	4288      	cmp	r0, r1
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	eb01 0402 	add.w	r4, r1, r2
 8005e04:	d902      	bls.n	8005e0c <memmove+0x10>
 8005e06:	4284      	cmp	r4, r0
 8005e08:	4623      	mov	r3, r4
 8005e0a:	d807      	bhi.n	8005e1c <memmove+0x20>
 8005e0c:	1e43      	subs	r3, r0, #1
 8005e0e:	42a1      	cmp	r1, r4
 8005e10:	d008      	beq.n	8005e24 <memmove+0x28>
 8005e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e1a:	e7f8      	b.n	8005e0e <memmove+0x12>
 8005e1c:	4402      	add	r2, r0
 8005e1e:	4601      	mov	r1, r0
 8005e20:	428a      	cmp	r2, r1
 8005e22:	d100      	bne.n	8005e26 <memmove+0x2a>
 8005e24:	bd10      	pop	{r4, pc}
 8005e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e2e:	e7f7      	b.n	8005e20 <memmove+0x24>

08005e30 <_realloc_r>:
 8005e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e34:	4680      	mov	r8, r0
 8005e36:	4614      	mov	r4, r2
 8005e38:	460e      	mov	r6, r1
 8005e3a:	b921      	cbnz	r1, 8005e46 <_realloc_r+0x16>
 8005e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e40:	4611      	mov	r1, r2
 8005e42:	f7ff bba7 	b.w	8005594 <_malloc_r>
 8005e46:	b92a      	cbnz	r2, 8005e54 <_realloc_r+0x24>
 8005e48:	f7ff fb38 	bl	80054bc <_free_r>
 8005e4c:	4625      	mov	r5, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e54:	f000 f81b 	bl	8005e8e <_malloc_usable_size_r>
 8005e58:	4284      	cmp	r4, r0
 8005e5a:	4607      	mov	r7, r0
 8005e5c:	d802      	bhi.n	8005e64 <_realloc_r+0x34>
 8005e5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e62:	d812      	bhi.n	8005e8a <_realloc_r+0x5a>
 8005e64:	4621      	mov	r1, r4
 8005e66:	4640      	mov	r0, r8
 8005e68:	f7ff fb94 	bl	8005594 <_malloc_r>
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d0ed      	beq.n	8005e4e <_realloc_r+0x1e>
 8005e72:	42bc      	cmp	r4, r7
 8005e74:	4622      	mov	r2, r4
 8005e76:	4631      	mov	r1, r6
 8005e78:	bf28      	it	cs
 8005e7a:	463a      	movcs	r2, r7
 8005e7c:	f7ff ffb0 	bl	8005de0 <memcpy>
 8005e80:	4631      	mov	r1, r6
 8005e82:	4640      	mov	r0, r8
 8005e84:	f7ff fb1a 	bl	80054bc <_free_r>
 8005e88:	e7e1      	b.n	8005e4e <_realloc_r+0x1e>
 8005e8a:	4635      	mov	r5, r6
 8005e8c:	e7df      	b.n	8005e4e <_realloc_r+0x1e>

08005e8e <_malloc_usable_size_r>:
 8005e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e92:	1f18      	subs	r0, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bfbc      	itt	lt
 8005e98:	580b      	ldrlt	r3, [r1, r0]
 8005e9a:	18c0      	addlt	r0, r0, r3
 8005e9c:	4770      	bx	lr
	...

08005ea0 <_init>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr

08005eac <_fini>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr
