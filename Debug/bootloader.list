
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004818  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f0  080049f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080049f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00010144  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200101bc  200101bc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e0f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003205  00000000  00000000  00031eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  000350c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f40  00000000  00000000  00036178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002531e  00000000  00000000  000370b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c7e  00000000  00000000  0005c3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da2e3  00000000  00000000  00071054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b337  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044d4  00000000  00000000  0014b388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000078 	.word	0x20000078
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080049ac 	.word	0x080049ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	080049ac 	.word	0x080049ac

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 80004fa:	200c      	movs	r0, #12
 80004fc:	f004 f994 	bl	8004828 <malloc>
 8000500:	4603      	mov	r3, r0
 8000502:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	4618      	mov	r0, r3
 8000508:	f004 f98e 	bl	8004828 <malloc>
 800050c:	4603      	mov	r3, r0
 800050e:	461a      	mov	r2, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	88fa      	ldrh	r2, [r7, #6]
 8000518:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	f000 f886 	bl	800062c <bufferClear>
    return buffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	460b      	mov	r3, r1
 8000534:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	889a      	ldrh	r2, [r3, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	88db      	ldrh	r3, [r3, #6]
 800053e:	429a      	cmp	r2, r3
 8000540:	d21f      	bcs.n	8000582 <bufferPush+0x58>
        disableInt();
 8000542:	f000 f8e7 	bl	8000714 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	8812      	ldrh	r2, [r2, #0]
 800054e:	4413      	add	r3, r2
 8000550:	78fa      	ldrb	r2, [r7, #3]
 8000552:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	88d2      	ldrh	r2, [r2, #6]
 800055e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000562:	fb01 f202 	mul.w	r2, r1, r2
 8000566:	1a9b      	subs	r3, r3, r2
 8000568:	b29a      	uxth	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	889b      	ldrh	r3, [r3, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	b29a      	uxth	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	809a      	strh	r2, [r3, #4]

        enableInt();
 800057a:	f000 f8df 	bl	800073c <enableInt>
        return 1;
 800057e:	2301      	movs	r3, #1
 8000580:	e000      	b.n	8000584 <bufferPush+0x5a>
    } else
        return 0;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	4613      	mov	r3, r2
 8000598:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 800059a:	2300      	movs	r3, #0
 800059c:	82fb      	strh	r3, [r7, #22]
 800059e:	e00f      	b.n	80005c0 <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 80005a0:	8afb      	ldrh	r3, [r7, #22]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	4413      	add	r3, r2
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	f7ff ffbd 	bl	800052a <bufferPush>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <bufferPushValues+0x2e>
            return pushed;
 80005b6:	8afb      	ldrh	r3, [r7, #22]
 80005b8:	e007      	b.n	80005ca <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 80005ba:	8afb      	ldrh	r3, [r7, #22]
 80005bc:	3301      	adds	r3, #1
 80005be:	82fb      	strh	r3, [r7, #22]
 80005c0:	8afa      	ldrh	r2, [r7, #22]
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d3eb      	bcc.n	80005a0 <bufferPushValues+0x14>
    }
    return pushed;
 80005c8:	8afb      	ldrh	r3, [r7, #22]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b084      	sub	sp, #16
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	889b      	ldrh	r3, [r3, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d101      	bne.n	80005e6 <bufferPop+0x14>
        return 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	e01e      	b.n	8000624 <bufferPop+0x52>

    disableInt();
 80005e6:	f000 f895 	bl	8000714 <disableInt>

    buffer->size--;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	889b      	ldrh	r3, [r3, #4]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	8852      	ldrh	r2, [r2, #2]
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	885b      	ldrh	r3, [r3, #2]
 8000608:	3301      	adds	r3, #1
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	88d2      	ldrh	r2, [r2, #6]
 800060e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000612:	fb01 f202 	mul.w	r2, r1, r2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	b29a      	uxth	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	805a      	strh	r2, [r3, #2]

    enableInt();
 800061e:	f000 f88d 	bl	800073c <enableInt>

    return value;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <bufferClear>:

uint8_t bufferPeek(const Buffer * const buffer) {
    return buffer->data[buffer->ptrOut];
}

void bufferClear(Buffer * const buffer) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    disableInt();
 8000634:	f000 f86e 	bl	8000714 <disableInt>
    buffer->size = 0;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	805a      	strh	r2, [r3, #2]
    enableInt();
 800064a:	f000 f877 	bl	800073c <enableInt>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	889b      	ldrh	r3, [r3, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf14      	ite	ne
 8000666:	2301      	movne	r3, #1
 8000668:	2300      	moveq	r3, #0
 800066a:	b2db      	uxtb	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b087      	sub	sp, #28
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	4613      	mov	r3, r2
 8000684:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f7ff ffe5 	bl	8000656 <bufferHasValues>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <bufferPopValues+0x1e>
        return 0;
 8000692:	2300      	movs	r3, #0
 8000694:	e01d      	b.n	80006d2 <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f000 f81f 	bl	80006da <bufferGetSize>
 800069c:	4603      	mov	r3, r0
 800069e:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 80006a0:	8afa      	ldrh	r2, [r7, #22]
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d901      	bls.n	80006ac <bufferPopValues+0x34>
        popSize = bufSize;
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	82bb      	strh	r3, [r7, #20]
 80006b0:	e00a      	b.n	80006c8 <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 80006b2:	8abb      	ldrh	r3, [r7, #20]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	18d4      	adds	r4, r2, r3
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff ff8a 	bl	80005d2 <bufferPop>
 80006be:	4603      	mov	r3, r0
 80006c0:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 80006c2:	8abb      	ldrh	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	82bb      	strh	r3, [r7, #20]
 80006c8:	8aba      	ldrh	r2, [r7, #20]
 80006ca:	8afb      	ldrh	r3, [r7, #22]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d3f0      	bcc.n	80006b2 <bufferPopValues+0x3a>
    return popSize;
 80006d0:	8afb      	ldrh	r3, [r7, #22]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	371c      	adds	r7, #28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd90      	pop	{r4, r7, pc}

080006da <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
    return buffer->size;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	889b      	ldrh	r3, [r3, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	88da      	ldrh	r2, [r3, #6]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	889b      	ldrh	r3, [r3, #4]
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	b29b      	uxth	r3, r3
}
 8000706:	4618      	mov	r0, r3
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <disableInt>:
		bufferPush(destination, var);
	}
	return 1;
}

static void disableInt() {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800071a:	f3ef 8310 	mrs	r3, PRIMASK
 800071e:	607b      	str	r3, [r7, #4]
  return(result);
 8000720:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <disableInt+0x24>)
 8000724:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000726:	b672      	cpsid	i
}
 8000728:	bf00      	nop
    __disable_irq();
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000094 	.word	0x20000094

0800073c <enableInt>:

static void enableInt() {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <enableInt+0x20>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f383 8810 	msr	PRIMASK, r3
}
 800074e:	bf00      	nop
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	20000094 	.word	0x20000094

08000760 <buttonInit>:
static uint16_t pin;
static buttonActionListener onClickHandler = NULL;

static uint8_t buttonIsPressed();

void buttonInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
	port = GPIOx;
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <buttonInit+0x2c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
    pin = GPIO_Pin;
 8000772:	4a07      	ldr	r2, [pc, #28]	; (8000790 <buttonInit+0x30>)
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	8013      	strh	r3, [r2, #0]
    onClickHandler = NULL;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <buttonInit+0x34>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000098 	.word	0x20000098
 8000790:	2000009c 	.word	0x2000009c
 8000794:	200000a0 	.word	0x200000a0

08000798 <buttonSetOnClick>:

void buttonSetOnClick(buttonActionListener actionListener) {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    onClickHandler = actionListener;
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <buttonSetOnClick+0x1c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	200000a0 	.word	0x200000a0

080007b8 <buttonUpdateState>:

static volatile uint32_t clickStart = 0;
void buttonUpdateState() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
    uint32_t time = HAL_GetTick();
 80007be:	f000 ffc1 	bl	8001744 <HAL_GetTick>
 80007c2:	6078      	str	r0, [r7, #4]
    uint8_t isPressed = buttonIsPressed();
 80007c4:	f000 f82e 	bl	8000824 <buttonIsPressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	70fb      	strb	r3, [r7, #3]

    if (!isPressed && clickStart > 0 && (time - clickStart) >= SHORT_CLICK) {
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d114      	bne.n	80007fc <buttonUpdateState+0x44>
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <buttonUpdateState+0x64>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d010      	beq.n	80007fc <buttonUpdateState+0x44>
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <buttonUpdateState+0x64>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	2b31      	cmp	r3, #49	; 0x31
 80007e4:	d90a      	bls.n	80007fc <buttonUpdateState+0x44>
        clickStart = 0;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <buttonUpdateState+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
        if (onClickHandler != NULL)
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <buttonUpdateState+0x68>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00e      	beq.n	8000812 <buttonUpdateState+0x5a>
            (*onClickHandler)();
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <buttonUpdateState+0x68>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4798      	blx	r3
        if (onClickHandler != NULL)
 80007fa:	e00a      	b.n	8000812 <buttonUpdateState+0x5a>
    } else if (isPressed && clickStart == 0) {
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d007      	beq.n	8000812 <buttonUpdateState+0x5a>
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <buttonUpdateState+0x64>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d103      	bne.n	8000812 <buttonUpdateState+0x5a>
        clickStart = time;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <buttonUpdateState+0x64>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6013      	str	r3, [r2, #0]
    }
}
 8000810:	e7ff      	b.n	8000812 <buttonUpdateState+0x5a>
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000a4 	.word	0x200000a4
 8000820:	200000a0 	.word	0x200000a0

08000824 <buttonIsPressed>:

static uint8_t buttonIsPressed() {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <buttonIsPressed+0x24>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <buttonIsPressed+0x28>)
 800082e:	8812      	ldrh	r2, [r2, #0]
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fe26 	bl	8002484 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
}
 8000844:	4618      	mov	r0, r3
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000098 	.word	0x20000098
 800084c:	2000009c 	.word	0x2000009c

08000850 <FlashWriteWord>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
	HAL_FLASH_Lock();
}

void FlashWriteWord(uint32_t Address, uint32_t Data) {
 8000850:	b5b0      	push	{r4, r5, r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800085a:	f001 f9b5 	bl	8001bc8 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	2200      	movs	r2, #0
 8000862:	461c      	mov	r4, r3
 8000864:	4615      	mov	r5, r2
 8000866:	4622      	mov	r2, r4
 8000868:	462b      	mov	r3, r5
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	2002      	movs	r0, #2
 800086e:	f001 f957 	bl	8001b20 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000872:	f001 f9cb 	bl	8001c0c <HAL_FLASH_Lock>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000880 <EraseSector>:
uint8_t FlashReadByte(uint32_t Address)
{
    return (*(__IO uint8_t*)Address);
}

void EraseSector(uint32_t Sector) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000888:	f001 f99e 	bl	8001bc8 <HAL_FLASH_Unlock>
	uint32_t SectorError;
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <EraseSector+0x3c>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Sector = Sector;
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <EraseSector+0x3c>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = 1 ;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <EraseSector+0x3c>)
 800089a:	2201      	movs	r2, #1
 800089c:	60da      	str	r2, [r3, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <EraseSector+0x3c>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <EraseSector+0x3c>)
 80008ac:	f001 fafe 	bl	8001eac <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80008b0:	f001 f9ac 	bl	8001c0c <HAL_FLASH_Lock>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000a8 	.word	0x200000a8

080008c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_GPIO_Init+0x8c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_GPIO_Init+0x8c>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_GPIO_Init+0x8c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_GPIO_Init+0x8c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a14      	ldr	r2, [pc, #80]	; (800094c <MX_GPIO_Init+0x8c>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0x8c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_GPIO_Init+0x8c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a0d      	ldr	r2, [pc, #52]	; (800094c <MX_GPIO_Init+0x8c>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_GPIO_Init+0x8c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800092a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x90>)
 8000940:	f001 fbf4 	bl	800212c <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020800 	.word	0x40020800

08000954 <asciiToHex>:
uint16_t address_data;//младшие 16 бит адреса
uint32_t program_data;//слово которое пишется во флеш
uint8_t calculation_check_sum = 0;//чек-сумма
uint8_t tempBuf[8];

void asciiToHex(uint8_t* buff, uint8_t count) {
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i=0; i<count;i++) {
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e023      	b.n	80009ae <asciiToHex+0x5a>
		if(buff[i] <= '9' && buff[i] >= '0' ) {
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b39      	cmp	r3, #57	; 0x39
 8000970:	d810      	bhi.n	8000994 <asciiToHex+0x40>
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b2f      	cmp	r3, #47	; 0x2f
 800097c:	d90a      	bls.n	8000994 <asciiToHex+0x40>
			buff[i] -= 0x30;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	440b      	add	r3, r1
 800098c:	3a30      	subs	r2, #48	; 0x30
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e009      	b.n	80009a8 <asciiToHex+0x54>
		}
		else {
			buff[i] = buff[i] - 0x41 + 10;
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	440b      	add	r3, r1
 80009a2:	3a37      	subs	r2, #55	; 0x37
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	701a      	strb	r2, [r3, #0]
	for(i=0; i<count;i++) {
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	3301      	adds	r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
 80009ae:	7bfa      	ldrb	r2, [r7, #15]
 80009b0:	78fb      	ldrb	r3, [r7, #3]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d3d7      	bcc.n	8000966 <asciiToHex+0x12>
		}
	}
}
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <fillBuffer>:

void fillBuffer(uint8_t* destination, uint8_t* source, uint16_t* startPtr, uint16_t count) {
 80009c4:	b480      	push	{r7}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	807b      	strh	r3, [r7, #2]
	for (int16_t i = 0; i < count; i++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	82fb      	strh	r3, [r7, #22]
 80009d6:	e014      	b.n	8000a02 <fillBuffer+0x3e>
		destination[i] = source[*startPtr + i];
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009e2:	4413      	add	r3, r2
 80009e4:	461a      	mov	r2, r3
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	441a      	add	r2, r3
 80009ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009ee:	68f9      	ldr	r1, [r7, #12]
 80009f0:	440b      	add	r3, r1
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	701a      	strb	r2, [r3, #0]
	for (int16_t i = 0; i < count; i++) {
 80009f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	3301      	adds	r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	82fb      	strh	r3, [r7, #22]
 8000a02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbe5      	blt.n	80009d8 <fillBuffer+0x14>
	}
	*startPtr += count;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	881a      	ldrh	r2, [r3, #0]
 8000a10:	887b      	ldrh	r3, [r7, #2]
 8000a12:	4413      	add	r3, r2
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	801a      	strh	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	371c      	adds	r7, #28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <flashHex>:

void flashHex(uint32_t sector, uint8_t* flashBuf, uint16_t size) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	80fb      	strh	r3, [r7, #6]
	EraseSector(sector);
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff ff22 	bl	8000880 <EraseSector>
	uint16_t ptr = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	82bb      	strh	r3, [r7, #20]
	while (ptr < size) {
 8000a40:	e160      	b.n	8000d04 <flashHex+0x2dc>
		if(flashBuf[ptr] == ':') {
 8000a42:	8abb      	ldrh	r3, [r7, #20]
 8000a44:	461a      	mov	r2, r3
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b3a      	cmp	r3, #58	; 0x3a
 8000a4e:	f040 8155 	bne.w	8000cfc <flashHex+0x2d4>
			ptr++;
 8000a52:	8abb      	ldrh	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	82bb      	strh	r3, [r7, #20]
			fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000a5a:	f107 0214 	add.w	r2, r7, #20
 8000a5e:	2308      	movs	r3, #8
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	489c      	ldr	r0, [pc, #624]	; (8000cd4 <flashHex+0x2ac>)
 8000a64:	f7ff ffae 	bl	80009c4 <fillBuffer>
			asciiToHex(tempBuf, 8);
 8000a68:	2108      	movs	r1, #8
 8000a6a:	489a      	ldr	r0, [pc, #616]	; (8000cd4 <flashHex+0x2ac>)
 8000a6c:	f7ff ff72 	bl	8000954 <asciiToHex>

			size_data = 2*(tempBuf[1] + 16*tempBuf[0]);//находим размер данных
 8000a70:	4b98      	ldr	r3, [pc, #608]	; (8000cd4 <flashHex+0x2ac>)
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b97      	ldr	r3, [pc, #604]	; (8000cd4 <flashHex+0x2ac>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b94      	ldr	r3, [pc, #592]	; (8000cd8 <flashHex+0x2b0>)
 8000a86:	701a      	strb	r2, [r3, #0]
			address_data = tempBuf[5] + 16*tempBuf[4] + 256*tempBuf[3] + 4096*tempBuf[2];//адрес
 8000a88:	4b92      	ldr	r3, [pc, #584]	; (8000cd4 <flashHex+0x2ac>)
 8000a8a:	795b      	ldrb	r3, [r3, #5]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	4b91      	ldr	r3, [pc, #580]	; (8000cd4 <flashHex+0x2ac>)
 8000a90:	78db      	ldrb	r3, [r3, #3]
 8000a92:	b299      	uxth	r1, r3
 8000a94:	4b8f      	ldr	r3, [pc, #572]	; (8000cd4 <flashHex+0x2ac>)
 8000a96:	789b      	ldrb	r3, [r3, #2]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	b299      	uxth	r1, r3
 8000aa6:	4b8b      	ldr	r3, [pc, #556]	; (8000cd4 <flashHex+0x2ac>)
 8000aa8:	791b      	ldrb	r3, [r3, #4]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	440b      	add	r3, r1
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b88      	ldr	r3, [pc, #544]	; (8000cdc <flashHex+0x2b4>)
 8000aba:	801a      	strh	r2, [r3, #0]
			type_data = tempBuf[7] + 16*tempBuf[6];//и тип
 8000abc:	4b85      	ldr	r3, [pc, #532]	; (8000cd4 <flashHex+0x2ac>)
 8000abe:	79da      	ldrb	r2, [r3, #7]
 8000ac0:	4b84      	ldr	r3, [pc, #528]	; (8000cd4 <flashHex+0x2ac>)
 8000ac2:	799b      	ldrb	r3, [r3, #6]
 8000ac4:	011b      	lsls	r3, r3, #4
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	4413      	add	r3, r2
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b84      	ldr	r3, [pc, #528]	; (8000ce0 <flashHex+0x2b8>)
 8000ace:	701a      	strb	r2, [r3, #0]

			calculation_check_sum = size_data/2 + (uint8_t)address_data + (uint8_t)(address_data>>8) + type_data;//считаем чек сумму
 8000ad0:	4b81      	ldr	r3, [pc, #516]	; (8000cd8 <flashHex+0x2b0>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b80      	ldr	r3, [pc, #512]	; (8000cdc <flashHex+0x2b4>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4413      	add	r3, r2
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b7e      	ldr	r3, [pc, #504]	; (8000cdc <flashHex+0x2b4>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4413      	add	r3, r2
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b7b      	ldr	r3, [pc, #492]	; (8000ce0 <flashHex+0x2b8>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b7a      	ldr	r3, [pc, #488]	; (8000ce4 <flashHex+0x2bc>)
 8000afa:	701a      	strb	r2, [r3, #0]

			if(type_data == 0x00) {
 8000afc:	4b78      	ldr	r3, [pc, #480]	; (8000ce0 <flashHex+0x2b8>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	f040 8090 	bne.w	8000c26 <flashHex+0x1fe>
				while(size_data > 0) {
 8000b06:	e06b      	b.n	8000be0 <flashHex+0x1b8>
					fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000b08:	f107 0214 	add.w	r2, r7, #20
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	4870      	ldr	r0, [pc, #448]	; (8000cd4 <flashHex+0x2ac>)
 8000b12:	f7ff ff57 	bl	80009c4 <fillBuffer>
					asciiToHex(tempBuf, 8);
 8000b16:	2108      	movs	r1, #8
 8000b18:	486e      	ldr	r0, [pc, #440]	; (8000cd4 <flashHex+0x2ac>)
 8000b1a:	f7ff ff1b 	bl	8000954 <asciiToHex>


					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 8000b1e:	2300      	movs	r3, #0
 8000b20:	75fb      	strb	r3, [r7, #23]
 8000b22:	e024      	b.n	8000b6e <flashHex+0x146>
						tempBuf[i] <<= 4;
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	4a6b      	ldr	r2, [pc, #428]	; (8000cd4 <flashHex+0x2ac>)
 8000b28:	5cd2      	ldrb	r2, [r2, r3]
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d1      	uxtb	r1, r2
 8000b30:	4a68      	ldr	r2, [pc, #416]	; (8000cd4 <flashHex+0x2ac>)
 8000b32:	54d1      	strb	r1, [r2, r3]
						tempBuf[i] = tempBuf[i] | tempBuf[i+1];
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	4a67      	ldr	r2, [pc, #412]	; (8000cd4 <flashHex+0x2ac>)
 8000b38:	5cd1      	ldrb	r1, [r2, r3]
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	4a65      	ldr	r2, [pc, #404]	; (8000cd4 <flashHex+0x2ac>)
 8000b40:	5cd2      	ldrb	r2, [r2, r3]
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	430a      	orrs	r2, r1
 8000b46:	b2d1      	uxtb	r1, r2
 8000b48:	4a62      	ldr	r2, [pc, #392]	; (8000cd4 <flashHex+0x2ac>)
 8000b4a:	54d1      	strb	r1, [r2, r3]
						program_data |= tempBuf[i] <<(i*4);
 8000b4c:	7dfb      	ldrb	r3, [r7, #23]
 8000b4e:	4a61      	ldr	r2, [pc, #388]	; (8000cd4 <flashHex+0x2ac>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	461a      	mov	r2, r3
 8000b54:	7dfb      	ldrb	r3, [r7, #23]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b62      	ldr	r3, [pc, #392]	; (8000ce8 <flashHex+0x2c0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	4a60      	ldr	r2, [pc, #384]	; (8000ce8 <flashHex+0x2c0>)
 8000b66:	6013      	str	r3, [r2, #0]
					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	75fb      	strb	r3, [r7, #23]
 8000b6e:	7dfb      	ldrb	r3, [r7, #23]
 8000b70:	2b07      	cmp	r3, #7
 8000b72:	d9d7      	bls.n	8000b24 <flashHex+0xfc>
					}

					FlashWriteWord(extented_linear_adress + address_data, program_data);
 8000b74:	4b59      	ldr	r3, [pc, #356]	; (8000cdc <flashHex+0x2b4>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b5c      	ldr	r3, [pc, #368]	; (8000cec <flashHex+0x2c4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a59      	ldr	r2, [pc, #356]	; (8000ce8 <flashHex+0x2c0>)
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fe62 	bl	8000850 <FlashWriteWord>
					calculation_check_sum += (uint8_t)program_data + (uint8_t)(program_data>>8) + (uint8_t)(program_data>>16) + (uint8_t)(program_data>>24);
 8000b8c:	4b56      	ldr	r3, [pc, #344]	; (8000ce8 <flashHex+0x2c0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b55      	ldr	r3, [pc, #340]	; (8000ce8 <flashHex+0x2c0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b52      	ldr	r3, [pc, #328]	; (8000ce8 <flashHex+0x2c0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	0c1b      	lsrs	r3, r3, #16
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b4f      	ldr	r3, [pc, #316]	; (8000ce8 <flashHex+0x2c0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	0e1b      	lsrs	r3, r3, #24
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b4b      	ldr	r3, [pc, #300]	; (8000ce4 <flashHex+0x2bc>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <flashHex+0x2bc>)
 8000bc0:	701a      	strb	r2, [r3, #0]
					size_data -= 8;
 8000bc2:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <flashHex+0x2b0>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	3b08      	subs	r3, #8
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <flashHex+0x2b0>)
 8000bcc:	701a      	strb	r2, [r3, #0]
					address_data += 4;
 8000bce:	4b43      	ldr	r3, [pc, #268]	; (8000cdc <flashHex+0x2b4>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b41      	ldr	r3, [pc, #260]	; (8000cdc <flashHex+0x2b4>)
 8000bd8:	801a      	strh	r2, [r3, #0]
					program_data = 0;
 8000bda:	4b43      	ldr	r3, [pc, #268]	; (8000ce8 <flashHex+0x2c0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
				while(size_data > 0) {
 8000be0:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <flashHex+0x2b0>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d18f      	bne.n	8000b08 <flashHex+0xe0>
				}
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8000be8:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <flashHex+0x2bc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	425b      	negs	r3, r3
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b3c      	ldr	r3, [pc, #240]	; (8000ce4 <flashHex+0x2bc>)
 8000bf2:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 8000bf4:	f107 0214 	add.w	r2, r7, #20
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	4835      	ldr	r0, [pc, #212]	; (8000cd4 <flashHex+0x2ac>)
 8000bfe:	f7ff fee1 	bl	80009c4 <fillBuffer>
				asciiToHex(tempBuf, 2);
 8000c02:	2102      	movs	r1, #2
 8000c04:	4833      	ldr	r0, [pc, #204]	; (8000cd4 <flashHex+0x2ac>)
 8000c06:	f7ff fea5 	bl	8000954 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <flashHex+0x2ac>)
 8000c0c:	785a      	ldrb	r2, [r3, #1]
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <flashHex+0x2ac>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4413      	add	r3, r2
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <flashHex+0x2c8>)
 8000c1c:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
					//uartTransmit("\n\rchecksum error 1\n\r", 20);
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <flashHex+0x2bc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e06a      	b.n	8000cfc <flashHex+0x2d4>

			} else if(type_data == 0x04) {//дополнительный адрес
 8000c26:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <flashHex+0x2b8>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d162      	bne.n	8000cf4 <flashHex+0x2cc>
				fillBuffer(tempBuf, flashBuf, &ptr, 4);
 8000c2e:	f107 0214 	add.w	r2, r7, #20
 8000c32:	2304      	movs	r3, #4
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	4827      	ldr	r0, [pc, #156]	; (8000cd4 <flashHex+0x2ac>)
 8000c38:	f7ff fec4 	bl	80009c4 <fillBuffer>
				asciiToHex(tempBuf, 4);
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <flashHex+0x2ac>)
 8000c40:	f7ff fe88 	bl	8000954 <asciiToHex>

				extented_linear_adress = (uint32_t)(tempBuf[0]<<28 | tempBuf[1]<<24 | tempBuf[2]<<20 | tempBuf[3]<<16 );//считаем адрес
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <flashHex+0x2ac>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	071a      	lsls	r2, r3, #28
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <flashHex+0x2ac>)
 8000c4c:	785b      	ldrb	r3, [r3, #1]
 8000c4e:	061b      	lsls	r3, r3, #24
 8000c50:	431a      	orrs	r2, r3
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <flashHex+0x2ac>)
 8000c54:	789b      	ldrb	r3, [r3, #2]
 8000c56:	051b      	lsls	r3, r3, #20
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <flashHex+0x2ac>)
 8000c5c:	78db      	ldrb	r3, [r3, #3]
 8000c5e:	041b      	lsls	r3, r3, #16
 8000c60:	4313      	orrs	r3, r2
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <flashHex+0x2c4>)
 8000c66:	601a      	str	r2, [r3, #0]


				calculation_check_sum +=  16*tempBuf[0] + tempBuf[1]+ 16*tempBuf[2] + tempBuf[3];
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <flashHex+0x2ac>)
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <flashHex+0x2ac>)
 8000c6e:	789b      	ldrb	r3, [r3, #2]
 8000c70:	4413      	add	r3, r2
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <flashHex+0x2ac>)
 8000c7a:	785b      	ldrb	r3, [r3, #1]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <flashHex+0x2ac>)
 8000c82:	78db      	ldrb	r3, [r3, #3]
 8000c84:	4413      	add	r3, r2
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <flashHex+0x2bc>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <flashHex+0x2bc>)
 8000c92:	701a      	strb	r2, [r3, #0]
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <flashHex+0x2bc>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	425b      	negs	r3, r3
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <flashHex+0x2bc>)
 8000c9e:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 8000ca0:	f107 0214 	add.w	r2, r7, #20
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	480a      	ldr	r0, [pc, #40]	; (8000cd4 <flashHex+0x2ac>)
 8000caa:	f7ff fe8b 	bl	80009c4 <fillBuffer>
				asciiToHex(tempBuf, 2);
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <flashHex+0x2ac>)
 8000cb2:	f7ff fe4f 	bl	8000954 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <flashHex+0x2ac>)
 8000cb8:	785a      	ldrb	r2, [r3, #1]
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <flashHex+0x2ac>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <flashHex+0x2c8>)
 8000cc8:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
					//uartTransmit("\n\rchecksum error 2\n\r", 20);
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <flashHex+0x2bc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	e014      	b.n	8000cfc <flashHex+0x2d4>
 8000cd2:	bf00      	nop
 8000cd4:	200000d0 	.word	0x200000d0
 8000cd8:	200000c0 	.word	0x200000c0
 8000cdc:	200000c4 	.word	0x200000c4
 8000ce0:	200000c1 	.word	0x200000c1
 8000ce4:	200000cc 	.word	0x200000cc
 8000ce8:	200000c8 	.word	0x200000c8
 8000cec:	200000bc 	.word	0x200000bc
 8000cf0:	200000c2 	.word	0x200000c2
			} else if(type_data == 0x01) {//конец файла
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <flashHex+0x2f4>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d009      	beq.n	8000d10 <flashHex+0x2e8>
				break;
			}
		}
		ptr++;
 8000cfc:	8abb      	ldrh	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	82bb      	strh	r3, [r7, #20]
	while (ptr < size) {
 8000d04:	8abb      	ldrh	r3, [r7, #20]
 8000d06:	88fa      	ldrh	r2, [r7, #6]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	f63f ae9a 	bhi.w	8000a42 <flashHex+0x1a>
	}
}
 8000d0e:	e000      	b.n	8000d12 <flashHex+0x2ea>
				break;
 8000d10:	bf00      	nop
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000c1 	.word	0x200000c1

08000d20 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_IWDG_Init+0x2c>)
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <MX_IWDG_Init+0x30>)
 8000d28:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_IWDG_Init+0x2c>)
 8000d2c:	2206      	movs	r2, #6
 8000d2e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 640;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_IWDG_Init+0x2c>)
 8000d32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000d36:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_IWDG_Init+0x2c>)
 8000d3a:	f001 fbbb 	bl	80024b4 <HAL_IWDG_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000d44:	f000 f92c 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200000d8 	.word	0x200000d8
 8000d50:	40003000 	.word	0x40003000

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f000 fc59 	bl	8001610 <HAL_Init>

  /* USER CODE BEGIN Init */
  uartInit();
 8000d5e:	f000 fb57 	bl	8001410 <uartInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d62:	f000 f857 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d66:	f7ff fdab 	bl	80008c0 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000d6a:	f000 fab3 	bl	80012d4 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8000d6e:	f000 f9cb 	bl	8001108 <MX_TIM6_Init>
  MX_IWDG_Init();
 8000d72:	f7ff ffd5 	bl	8000d20 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  uartEnableInterruption();
 8000d76:	f000 fb61 	bl	800143c <uartEnableInterruption>
  buttonInit(GPIOC, GPIO_PIN_15);
 8000d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7e:	481d      	ldr	r0, [pc, #116]	; (8000df4 <main+0xa0>)
 8000d80:	f7ff fcee 	bl	8000760 <buttonInit>
  buttonSetOnClick(&onButtonClick);
 8000d84:	481c      	ldr	r0, [pc, #112]	; (8000df8 <main+0xa4>)
 8000d86:	f7ff fd07 	bl	8000798 <buttonSetOnClick>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uartTransmit("started\n\r", 9);
 8000d8a:	2109      	movs	r1, #9
 8000d8c:	481b      	ldr	r0, [pc, #108]	; (8000dfc <main+0xa8>)
 8000d8e:	f000 fb1b 	bl	80013c8 <uartTransmit>
  while (!isRxStarted()) {
 8000d92:	e008      	b.n	8000da6 <main+0x52>
	  HAL_IWDG_Refresh(&hiwdg);
 8000d94:	481a      	ldr	r0, [pc, #104]	; (8000e00 <main+0xac>)
 8000d96:	f001 fbcf 	bl	8002538 <HAL_IWDG_Refresh>
	  buttonUpdateState();
 8000d9a:	f7ff fd0d 	bl	80007b8 <buttonUpdateState>
	  if (!loadApp) goto jumpToApp;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <main+0xb0>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d020      	beq.n	8000de8 <main+0x94>
  while (!isRxStarted()) {
 8000da6:	f000 fbfd 	bl	80015a4 <isRxStarted>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f1      	beq.n	8000d94 <main+0x40>
  }

  HAL_TIM_Base_Start_IT(&htim6);
 8000db0:	4815      	ldr	r0, [pc, #84]	; (8000e08 <main+0xb4>)
 8000db2:	f002 f971 	bl	8003098 <HAL_TIM_Base_Start_IT>
  resetRxDone();
 8000db6:	f000 fa05 	bl	80011c4 <resetRxDone>
  while (isRxDone() == 0) {
 8000dba:	e002      	b.n	8000dc2 <main+0x6e>
	  HAL_IWDG_Refresh(&hiwdg);
 8000dbc:	4810      	ldr	r0, [pc, #64]	; (8000e00 <main+0xac>)
 8000dbe:	f001 fbbb 	bl	8002538 <HAL_IWDG_Refresh>
  while (isRxDone() == 0) {
 8000dc2:	f000 fa0b 	bl	80011dc <isRxDone>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f7      	beq.n	8000dbc <main+0x68>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  uint16_t size = rxBufferGetSize();
 8000dcc:	f000 fbc6 	bl	800155c <rxBufferGetSize>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	80fb      	strh	r3, [r7, #6]
  rxBufToFlashBuf(flashBuf);
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <main+0xb8>)
 8000dd6:	f000 fbcd 	bl	8001574 <rxBufToFlashBuf>

  //EraseSector(FLASH_SECTOR_17);
  flashHex(FLASH_SECTOR_17, flashBuf, size);
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	490b      	ldr	r1, [pc, #44]	; (8000e0c <main+0xb8>)
 8000de0:	2011      	movs	r0, #17
 8000de2:	f7ff fe21 	bl	8000a28 <flashHex>
 8000de6:	e000      	b.n	8000dea <main+0x96>
	  if (!loadApp) goto jumpToApp;
 8000de8:	bf00      	nop


  jumpToApp:
  jumpToUserApp(SECTOR_17_ADDRESS);
 8000dea:	4809      	ldr	r0, [pc, #36]	; (8000e10 <main+0xbc>)
 8000dec:	f000 f874 	bl	8000ed8 <jumpToUserApp>
  while (1) {}
 8000df0:	e7fe      	b.n	8000df0 <main+0x9c>
 8000df2:	bf00      	nop
 8000df4:	40020800 	.word	0x40020800
 8000df8:	08000f89 	.word	0x08000f89
 8000dfc:	080049c4 	.word	0x080049c4
 8000e00:	200000d8 	.word	0x200000d8
 8000e04:	20000000 	.word	0x20000000
 8000e08:	200100ec 	.word	0x200100ec
 8000e0c:	200000e4 	.word	0x200000e4
 8000e10:	08120000 	.word	0x08120000

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b094      	sub	sp, #80	; 0x50
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	2230      	movs	r2, #48	; 0x30
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 fd08 	bl	8004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <SystemClock_Config+0xbc>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <SystemClock_Config+0xbc>)
 8000e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <SystemClock_Config+0xbc>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <SystemClock_Config+0xc0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e60:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <SystemClock_Config+0xc0>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <SystemClock_Config+0xc0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e74:	230a      	movs	r3, #10
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e80:	2301      	movs	r3, #1
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fb63 	bl	8002558 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e98:	f000 f882 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fdc6 	bl	8002a48 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ec2:	f000 f86d 	bl	8000fa0 <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3750      	adds	r7, #80	; 0x50
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <jumpToUserApp>:

/* USER CODE BEGIN 4 */
void jumpToUserApp(uint32_t address) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	  void(*app_reset_handler)();

	  //shut down any tasks remaining
	  HAL_TIM_Base_Stop_IT(&htim6);
 8000ee0:	4825      	ldr	r0, [pc, #148]	; (8000f78 <jumpToUserApp+0xa0>)
 8000ee2:	f002 f949 	bl	8003178 <HAL_TIM_Base_Stop_IT>
	  uartDisableInterruption();
 8000ee6:	f000 fabb 	bl	8001460 <uartDisableInterruption>

	  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <jumpToUserApp+0xa4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <jumpToUserApp+0xa4>)
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <jumpToUserApp+0xa4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <jumpToUserApp+0xa4>)
 8000efc:	f023 0308 	bic.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <jumpToUserApp+0xa4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <jumpToUserApp+0xa4>)
 8000f08:	f023 0302 	bic.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <jumpToUserApp+0xa4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <jumpToUserApp+0xa4>)
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 8000f1a:	f001 ff75 	bl	8002e08 <HAL_RCC_DeInit>
	  HAL_DeInit();// to disable all the peripherals
 8000f1e:	f000 fb99 	bl	8001654 <HAL_DeInit>

	  SysTick->CTRL = 0;//to turn off the systick
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <jumpToUserApp+0xa8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <jumpToUserApp+0xa8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <jumpToUserApp+0xa8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	2301      	movs	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f383 8810 	msr	PRIMASK, r3
}
 8000f3e:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop

	  //disable interrupts
	  __set_PRIMASK(1);
	  __disable_irq();

	  SCB->VTOR = address;//change this
 8000f44:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <jumpToUserApp+0xac>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6093      	str	r3, [r2, #8]

	  //configure the MSP by reading the value from the base address
	  uint32_t msp_value = *(__IO uint32_t*) address;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	f383 8808 	msr	MSP, r3
}
 8000f5a:	bf00      	nop

	  __set_MSP(msp_value);

	  uint32_t resethandler_address = *(__IO uint32_t*) (address + 4);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	61bb      	str	r3, [r7, #24]

	  //app_reset_handler = (void*)resethandler_address;
	  app_reset_handler = (void (*)(void)) (resethandler_address);
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f68:	b662      	cpsie	i
}
 8000f6a:	bf00      	nop

	  //jump to reset handler of the user app.
	  //NVIC_SystemReset(); //?????
	  __enable_irq();
	  app_reset_handler();
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	4798      	blx	r3
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200100ec 	.word	0x200100ec
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	e000e010 	.word	0xe000e010
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <onButtonClick>:

static void onButtonClick() {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
    loadApp = 0;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <onButtonClick+0x14>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 fb68 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <TIM6_DAC_IRQHandler+0x10>)
 8001056:	f002 f8be 	bl	80031d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200100ec 	.word	0x200100ec

08001064 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <USART6_IRQHandler+0x10>)
 800106a:	f002 fcc3 	bl	80039f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20010144 	.word	0x20010144

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f003 fb94 	bl	80047d4 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20030000 	.word	0x20030000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	200100e4 	.word	0x200100e4
 80010e0:	200101c0 	.word	0x200101c0

080010e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_TIM6_Init+0x64>)
 8001118:	4a15      	ldr	r2, [pc, #84]	; (8001170 <MX_TIM6_Init+0x68>)
 800111a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_TIM6_Init+0x64>)
 800111e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001122:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_TIM6_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_TIM6_Init+0x64>)
 800112c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001130:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_TIM6_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <MX_TIM6_Init+0x64>)
 800113a:	f001 ff5d 	bl	8002ff8 <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001144:	f7ff ff2c 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_TIM6_Init+0x64>)
 8001156:	f002 fa0f 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001160:	f7ff ff1e 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200100ec 	.word	0x200100ec
 8001170:	40001000 	.word	0x40001000

08001174 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_TIM_Base_MspInit+0x48>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d115      	bne.n	80011b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_TIM_Base_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <HAL_TIM_Base_MspInit+0x4c>)
 8001190:	f043 0310 	orr.w	r3, r3, #16
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_TIM_Base_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2036      	movs	r0, #54	; 0x36
 80011a8:	f000 fbd7 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ac:	2036      	movs	r0, #54	; 0x36
 80011ae:	f000 fbf0 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40001000 	.word	0x40001000
 80011c0:	40023800 	.word	0x40023800

080011c4 <resetRxDone>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void resetRxDone() {
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	rxDone = 0;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <resetRxDone+0x14>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	200100e8 	.word	0x200100e8

080011dc <isRxDone>:

uint8_t isRxDone() {
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	return rxDone;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <isRxDone+0x14>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200100e8 	.word	0x200100e8

080011f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a05      	ldr	r2, [pc, #20]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d102      	bne.n	800120c <HAL_TIM_PeriodElapsedCallback+0x18>
		rxDone = 1;
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
	}
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40001000 	.word	0x40001000
 800121c:	200100e8 	.word	0x200100e8

08001220 <uartHardwareTransmitInterrupt>:

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
}

void uartHardwareTransmitInterrupt(uint8_t buffer) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	usartHardwareTransmitBuffer = buffer;
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <uartHardwareTransmitInterrupt+0x28>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001230:	2047      	movs	r0, #71	; 0x47
 8001232:	f000 fbae 	bl	8001992 <HAL_NVIC_EnableIRQ>
	HAL_UART_Transmit_IT(&huart6, &usartHardwareTransmitBuffer, 1);
 8001236:	2201      	movs	r2, #1
 8001238:	4903      	ldr	r1, [pc, #12]	; (8001248 <uartHardwareTransmitInterrupt+0x28>)
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <uartHardwareTransmitInterrupt+0x2c>)
 800123c:	f002 fa79 	bl	8003732 <HAL_UART_Transmit_IT>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20010134 	.word	0x20010134
 800124c:	20010144 	.word	0x20010144

08001250 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_UART_TxCpltCallback+0x1c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d101      	bne.n	8001264 <HAL_UART_TxCpltCallback+0x14>
		uartTransmitIntCallback();
 8001260:	f000 f96a 	bl	8001538 <uartTransmitIntCallback>
	}
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20010144 	.word	0x20010144

08001270 <uartHardwareReceiveInterrupt>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
}

void uartHardwareReceiveInterrupt() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001274:	2047      	movs	r0, #71	; 0x47
 8001276:	f000 fb8c 	bl	8001992 <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart6, &usartHardwareReceiveBuffer, 1);
 800127a:	2201      	movs	r2, #1
 800127c:	4902      	ldr	r1, [pc, #8]	; (8001288 <uartHardwareReceiveInterrupt+0x18>)
 800127e:	4803      	ldr	r0, [pc, #12]	; (800128c <uartHardwareReceiveInterrupt+0x1c>)
 8001280:	f002 fa9c 	bl	80037bc <HAL_UART_Receive_IT>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20010135 	.word	0x20010135
 800128c:	20010144 	.word	0x20010144

08001290 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <HAL_UART_RxCpltCallback+0x24>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d104      	bne.n	80012aa <HAL_UART_RxCpltCallback+0x1a>
    	uartReceiveIntCallback(usartHardwareReceiveBuffer);
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_UART_RxCpltCallback+0x28>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f915 	bl	80014d4 <uartReceiveIntCallback>
    }
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20010144 	.word	0x20010144
 80012b8:	20010135 	.word	0x20010135

080012bc <uartHardwareDisableInterrupts>:

void uartHardwareDisableInterrupts() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart6);
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <uartHardwareDisableInterrupts+0x14>)
 80012c2:	f002 faab 	bl	800381c <HAL_UART_Abort>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80012c6:	2047      	movs	r0, #71	; 0x47
 80012c8:	f000 fb71 	bl	80019ae <HAL_NVIC_DisableIRQ>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20010144 	.word	0x20010144

080012d4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_USART6_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART6_UART_Init+0x4c>)
 800130c:	f002 f9c4 	bl	8003698 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f7ff fe43 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20010144 	.word	0x20010144
 8001324:	40011400 	.word	0x40011400

08001328 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <HAL_UART_MspInit+0x94>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d133      	bne.n	80013b2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_UART_MspInit+0x98>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <HAL_UART_MspInit+0x98>)
 8001354:	f043 0320 	orr.w	r3, r3, #32
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_UART_MspInit+0x98>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_UART_MspInit+0x98>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <HAL_UART_MspInit+0x98>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_UART_MspInit+0x98>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001392:	2308      	movs	r3, #8
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <HAL_UART_MspInit+0x9c>)
 800139e:	f000 fec5 	bl	800212c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2047      	movs	r0, #71	; 0x47
 80013a8:	f000 fad7 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013ac:	2047      	movs	r0, #71	; 0x47
 80013ae:	f000 faf0 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40011400 	.word	0x40011400
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800

080013c8 <uartTransmit>:
  }
}

/* USER CODE BEGIN 1 */

uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <uartTransmit+0x16>
        return 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	e010      	b.n	8001400 <uartTransmit+0x38>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <uartTransmit+0x40>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8d0 	bl	800058c <bufferPushValues>
 80013ec:	4603      	mov	r3, r0
 80013ee:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <uartTransmit+0x44>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <uartTransmit+0x36>
        hardwareTransmitIT();
 80013fa:	f000 f843 	bl	8001484 <hardwareTransmitIT>
    }
    return transmitted;
 80013fe:	89fb      	ldrh	r3, [r7, #14]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20010138 	.word	0x20010138
 800140c:	20010140 	.word	0x20010140

08001410 <uartInit>:

uint8_t uartHasNext() {
    return bufferHasValues(rxBuffer);
}

void uartInit() {
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001414:	2040      	movs	r0, #64	; 0x40
 8001416:	f7ff f86b 	bl	80004f0 <bufferCreate>
 800141a:	4603      	mov	r3, r0
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <uartInit+0x24>)
 800141e:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001420:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001424:	f7ff f864 	bl	80004f0 <bufferCreate>
 8001428:	4603      	mov	r3, r0
 800142a:	4a03      	ldr	r2, [pc, #12]	; (8001438 <uartInit+0x28>)
 800142c:	6013      	str	r3, [r2, #0]
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20010138 	.word	0x20010138
 8001438:	2001013c 	.word	0x2001013c

0800143c <uartEnableInterruption>:
        hardwareReceiveIT();
    }
    return received;
}

void uartEnableInterruption() {
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
    interruptionsEnabled = 1;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <uartEnableInterruption+0x1c>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
    transmitIntEnd = 1;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <uartEnableInterruption+0x20>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
    hardwareTransmitIT();
 800144c:	f000 f81a 	bl	8001484 <hardwareTransmitIT>
    hardwareReceiveIT();
 8001450:	f000 f812 	bl	8001478 <hardwareReceiveIT>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20010140 	.word	0x20010140
 800145c:	20000008 	.word	0x20000008

08001460 <uartDisableInterruption>:

void uartDisableInterruption() {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
    interruptionsEnabled = 0;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <uartDisableInterruption+0x14>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
    uartHardwareDisableInterrupts();
 800146a:	f7ff ff27 	bl	80012bc <uartHardwareDisableInterrupts>
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20010140 	.word	0x20010140

08001478 <hardwareReceiveIT>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareReceiveIT() {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    uartHardwareReceiveInterrupt();
 800147c:	f7ff fef8 	bl	8001270 <uartHardwareReceiveInterrupt>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <hardwareTransmitIT>:

static void hardwareTransmitIT() {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
    if (!transmitIntEnd)
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <hardwareTransmitIT+0x48>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d016      	beq.n	80014c2 <hardwareTransmitIT+0x3e>
        return;

    if (bufferHasValues(txBuffer)) {
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <hardwareTransmitIT+0x4c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f8dc 	bl	8000656 <bufferHasValues>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00f      	beq.n	80014c4 <hardwareTransmitIT+0x40>
        transmitIntEnd = 0;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <hardwareTransmitIT+0x48>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
        uint8_t data = bufferPop(txBuffer);
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <hardwareTransmitIT+0x4c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f88f 	bl	80005d2 <bufferPop>
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
        uartHardwareTransmitInterrupt(data);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff feb0 	bl	8001220 <uartHardwareTransmitInterrupt>
 80014c0:	e000      	b.n	80014c4 <hardwareTransmitIT+0x40>
        return;
 80014c2:	bf00      	nop
    }
}
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20010138 	.word	0x20010138

080014d4 <uartReceiveIntCallback>:
        if (uartHardwareTransmitPolling(byte, 5))
            bufferPop(txBuffer);
    }
}

extern void uartReceiveIntCallback(uint8_t data) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
    if (bufferGetFreeSize(rxBuffer) > 0) {
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <uartReceiveIntCallback+0x54>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f905 	bl	80006f2 <bufferGetFreeSize>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <uartReceiveIntCallback+0x28>
        bufferPush(rxBuffer, data);
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <uartReceiveIntCallback+0x54>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f817 	bl	800052a <bufferPush>
    }
    if (!isRxStarted()) rxStarted = 1;
 80014fc:	f000 f852 	bl	80015a4 <isRxStarted>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <uartReceiveIntCallback+0x38>
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <uartReceiveIntCallback+0x58>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
    TIM6->CNT = 0;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <uartReceiveIntCallback+0x5c>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24

    if (interruptionsEnabled)
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <uartReceiveIntCallback+0x60>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <uartReceiveIntCallback+0x4c>
        hardwareReceiveIT();
 800151c:	f7ff ffac 	bl	8001478 <hardwareReceiveIT>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2001013c 	.word	0x2001013c
 800152c:	20010141 	.word	0x20010141
 8001530:	40001000 	.word	0x40001000
 8001534:	20010140 	.word	0x20010140

08001538 <uartTransmitIntCallback>:

extern void uartTransmitIntCallback() {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
    transmitIntEnd = 1;
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <uartTransmitIntCallback+0x1c>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <uartTransmitIntCallback+0x20>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <uartTransmitIntCallback+0x18>
        hardwareTransmitIT();
 800154c:	f7ff ff9a 	bl	8001484 <hardwareTransmitIT>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000008 	.word	0x20000008
 8001558:	20010140 	.word	0x20010140

0800155c <rxBufferGetSize>:

uint16_t rxBufferGetSize() {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	return bufferGetSize(rxBuffer);
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <rxBufferGetSize+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f8b8 	bl	80006da <bufferGetSize>
 800156a:	4603      	mov	r3, r0
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2001013c 	.word	0x2001013c

08001574 <rxBufToFlashBuf>:

uint8_t rxBufferPop() {
	return bufferPop(rxBuffer);
}

uint16_t rxBufToFlashBuf(uint8_t* flashBuf) {
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	return bufferPopValues(rxBuffer, flashBuf, bufferGetSize(rxBuffer));
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <rxBufToFlashBuf+0x2c>)
 800157e:	681c      	ldr	r4, [r3, #0]
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <rxBufToFlashBuf+0x2c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff f8a8 	bl	80006da <bufferGetSize>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff f871 	bl	8000678 <bufferPopValues>
 8001596:	4603      	mov	r3, r0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	2001013c 	.word	0x2001013c

080015a4 <isRxStarted>:

uint8_t isRxStarted() {
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
	return rxStarted;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <isRxStarted+0x14>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20010141 	.word	0x20010141

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d8:	4c0b      	ldr	r4, [pc, #44]	; (8001608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e6:	f7ff fd7d 	bl	80010e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f003 f8f9 	bl	80047e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7ff fbb1 	bl	8000d54 <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001600:	080049f8 	.word	0x080049f8
  ldr r2, =_sbss
 8001604:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001608:	200101bc 	.word	0x200101bc

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_Init+0x40>)
 800161a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_Init+0x40>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x40>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f983 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	200f      	movs	r0, #15
 8001640:	f000 f83c 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fcb2 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_DeInit+0x54>)
 800165a:	f04f 32ff 	mov.w	r2, #4294967295
 800165e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_DeInit+0x54>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_DeInit+0x54>)
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_DeInit+0x54>)
 8001670:	2200      	movs	r2, #0
 8001672:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_DeInit+0x54>)
 8001676:	f04f 32ff 	mov.w	r2, #4294967295
 800167a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_DeInit+0x54>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_DeInit+0x54>)
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <HAL_DeInit+0x54>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_DeInit+0x54>)
 8001692:	f04f 32ff 	mov.w	r2, #4294967295
 8001696:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_DeInit+0x54>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800169e:	f000 f805 	bl	80016ac <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f975 	bl	80019ca <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f000 f92f 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x5c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000004 	.word	0x20000004
 8001714:	20000010 	.word	0x20000010
 8001718:	2000000c 	.word	0x2000000c

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000010 	.word	0x20000010
 8001740:	20010188 	.word	0x20010188

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20010188 	.word	0x20010188

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db12      	blt.n	8001834 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	490a      	ldr	r1, [pc, #40]	; (8001840 <__NVIC_DisableIRQ+0x44>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	3320      	adds	r3, #32
 8001824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001828:	f3bf 8f4f 	dsb	sy
}
 800182c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800182e:	f3bf 8f6f 	isb	sy
}
 8001832:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff05 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff1a 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff0d 	bl	80017c0 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff1d 	bl	80017fc <__NVIC_DisableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ff94 	bl	8001900 <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff fea8 	bl	8001744 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d008      	beq.n	8001a14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e052      	b.n	8001aba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0216 	bic.w	r2, r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d103      	bne.n	8001a44 <HAL_DMA_Abort+0x62>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0208 	bic.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a64:	e013      	b.n	8001a8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a66:	f7ff fe6d 	bl	8001744 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	d90c      	bls.n	8001a8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e015      	b.n	8001aba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e4      	bne.n	8001a66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	223f      	movs	r2, #63	; 0x3f
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d004      	beq.n	8001ae0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e00c      	b.n	8001afa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2205      	movs	r2, #5
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_FLASH_Program+0xa0>)
 8001b34:	7e1b      	ldrb	r3, [r3, #24]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_FLASH_Program+0x1e>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e03b      	b.n	8001bb6 <HAL_FLASH_Program+0x96>
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_FLASH_Program+0xa0>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b48:	f000 f870 	bl	8001c2c <FLASH_WaitForLastOperation>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d12b      	bne.n	8001bae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001b5c:	783b      	ldrb	r3, [r7, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	68b8      	ldr	r0, [r7, #8]
 8001b62:	f000 f91b 	bl	8001d9c <FLASH_Program_Byte>
 8001b66:	e016      	b.n	8001b96 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d105      	bne.n	8001b7a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001b6e:	883b      	ldrh	r3, [r7, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	68b8      	ldr	r0, [r7, #8]
 8001b74:	f000 f8ee 	bl	8001d54 <FLASH_Program_HalfWord>
 8001b78:	e00d      	b.n	8001b96 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d105      	bne.n	8001b8c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	68b8      	ldr	r0, [r7, #8]
 8001b86:	f000 f8c3 	bl	8001d10 <FLASH_Program_Word>
 8001b8a:	e004      	b.n	8001b96 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b90:	68b8      	ldr	r0, [r7, #8]
 8001b92:	f000 f88b 	bl	8001cac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b9a:	f000 f847 	bl	8001c2c <FLASH_WaitForLastOperation>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_FLASH_Program+0xa4>)
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_FLASH_Program+0xa4>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_FLASH_Program+0xa0>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2001018c 	.word	0x2001018c
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_FLASH_Unlock+0x38>)
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da0b      	bge.n	8001bf2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_FLASH_Unlock+0x38>)
 8001bdc:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_FLASH_Unlock+0x3c>)
 8001bde:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_FLASH_Unlock+0x38>)
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <HAL_FLASH_Unlock+0x40>)
 8001be4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_FLASH_Unlock+0x38>)
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da01      	bge.n	8001bf2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40023c00 	.word	0x40023c00
 8001c04:	45670123 	.word	0x45670123
 8001c08:	cdef89ab 	.word	0xcdef89ab

08001c0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_FLASH_Lock+0x1c>)
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_FLASH_Lock+0x1c>)
 8001c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c1a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <FLASH_WaitForLastOperation+0x78>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c3e:	f7ff fd81 	bl	8001744 <HAL_GetTick>
 8001c42:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c44:	e010      	b.n	8001c68 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d00c      	beq.n	8001c68 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <FLASH_WaitForLastOperation+0x38>
 8001c54:	f7ff fd76 	bl	8001744 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d201      	bcs.n	8001c68 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e019      	b.n	8001c9c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <FLASH_WaitForLastOperation+0x7c>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e8      	bne.n	8001c46 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <FLASH_WaitForLastOperation+0x7c>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <FLASH_WaitForLastOperation+0x7c>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <FLASH_WaitForLastOperation+0x7c>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c92:	f000 f8a5 	bl	8001de0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
  
}  
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2001018c 	.word	0x2001018c
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <FLASH_Program_DoubleWord+0x60>)
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <FLASH_Program_DoubleWord+0x60>)
 8001cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <FLASH_Program_DoubleWord+0x60>)
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <FLASH_Program_DoubleWord+0x60>)
 8001cca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001cce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <FLASH_Program_DoubleWord+0x60>)
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <FLASH_Program_DoubleWord+0x60>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001ce2:	f3bf 8f6f 	isb	sy
}
 8001ce6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	000a      	movs	r2, r1
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	68f9      	ldr	r1, [r7, #12]
 8001cfa:	3104      	adds	r1, #4
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40023c00 	.word	0x40023c00

08001d10 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <FLASH_Program_Word+0x40>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <FLASH_Program_Word+0x40>)
 8001d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <FLASH_Program_Word+0x40>)
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <FLASH_Program_Word+0x40>)
 8001d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <FLASH_Program_Word+0x40>)
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <FLASH_Program_Word+0x40>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	601a      	str	r2, [r3, #0]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40023c00 	.word	0x40023c00

08001d54 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <FLASH_Program_HalfWord+0x44>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <FLASH_Program_HalfWord+0x44>)
 8001d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <FLASH_Program_HalfWord+0x44>)
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <FLASH_Program_HalfWord+0x44>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <FLASH_Program_HalfWord+0x44>)
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <FLASH_Program_HalfWord+0x44>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	801a      	strh	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <FLASH_Program_Byte+0x40>)
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <FLASH_Program_Byte+0x40>)
 8001dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <FLASH_Program_Byte+0x40>)
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <FLASH_Program_Byte+0x40>)
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <FLASH_Program_Byte+0x40>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <FLASH_Program_Byte+0x40>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	78fa      	ldrb	r2, [r7, #3]
 8001dcc:	701a      	strb	r2, [r3, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00

08001de0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f043 0310 	orr.w	r3, r3, #16
 8001df8:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001dfa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001dfe:	2210      	movs	r2, #16
 8001e00:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001e02:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d008      	beq.n	8001e20 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f043 0308 	orr.w	r3, r3, #8
 8001e16:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001e18:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001e20:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001e36:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d008      	beq.n	8001e5c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001e54:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d009      	beq.n	8001e7c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001e72:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e7a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f043 0320 	orr.w	r3, r3, #32
 8001e90:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <FLASH_SetErrorCode+0xc8>)
 8001e92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <FLASH_SetErrorCode+0xc4>)
 8001e96:	2202      	movs	r2, #2
 8001e98:	60da      	str	r2, [r3, #12]
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40023c00 	.word	0x40023c00
 8001ea8:	2001018c 	.word	0x2001018c

08001eac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ebe:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <HAL_FLASHEx_Erase+0xdc>)
 8001ec0:	7e1b      	ldrb	r3, [r3, #24]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_FLASHEx_Erase+0x1e>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e05a      	b.n	8001f80 <HAL_FLASHEx_Erase+0xd4>
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_FLASHEx_Erase+0xdc>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ed0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ed4:	f7ff feaa 	bl	8001c2c <FLASH_WaitForLastOperation>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d14a      	bne.n	8001f78 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d117      	bne.n	8001f22 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f000 f846 	bl	8001f90 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f08:	f7ff fe90 	bl	8001c2c <FLASH_WaitForLastOperation>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_FLASHEx_Erase+0xe0>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_FLASHEx_Erase+0xe0>)
 8001f16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	6113      	str	r3, [r2, #16]
 8001f20:	e028      	b.n	8001f74 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	e01c      	b.n	8001f64 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4619      	mov	r1, r3
 8001f32:	68b8      	ldr	r0, [r7, #8]
 8001f34:	f000 f866 	bl	8002004 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f3c:	f7ff fe76 	bl	8001c2c <FLASH_WaitForLastOperation>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_FLASHEx_Erase+0xe0>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_FLASHEx_Erase+0xe0>)
 8001f4a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001f4e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	601a      	str	r2, [r3, #0]
          break;
 8001f5c:	e00a      	b.n	8001f74 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3da      	bcc.n	8001f2a <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001f74:	f000 f894 	bl	80020a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_FLASHEx_Erase+0xdc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	761a      	strb	r2, [r3, #24]

  return status;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	2001018c 	.word	0x2001018c
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <FLASH_MassErase+0x70>)
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <FLASH_MassErase+0x70>)
 8001fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa6:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d108      	bne.n	8001fc0 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <FLASH_MassErase+0x70>)
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	4a13      	ldr	r2, [pc, #76]	; (8002000 <FLASH_MassErase+0x70>)
 8001fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6113      	str	r3, [r2, #16]
 8001fbe:	e00f      	b.n	8001fe0 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d106      	bne.n	8001fd4 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <FLASH_MassErase+0x70>)
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <FLASH_MassErase+0x70>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	6113      	str	r3, [r2, #16]
 8001fd2:	e005      	b.n	8001fe0 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <FLASH_MassErase+0x70>)
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	4a09      	ldr	r2, [pc, #36]	; (8002000 <FLASH_MassErase+0x70>)
 8001fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fde:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <FLASH_MassErase+0x70>)
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <FLASH_MassErase+0x70>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6113      	str	r3, [r2, #16]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40023c00 	.word	0x40023c00

08002004 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	e010      	b.n	8002042 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d103      	bne.n	800202e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e009      	b.n	8002042 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d103      	bne.n	800203c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e002      	b.n	8002042 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800203c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002040:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0b      	cmp	r3, #11
 8002046:	d902      	bls.n	800204e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3304      	adds	r3, #4
 800204c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <FLASH_Erase_Sector+0x98>)
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <FLASH_Erase_Sector+0x98>)
 8002054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002058:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <FLASH_Erase_Sector+0x98>)
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	490f      	ldr	r1, [pc, #60]	; (800209c <FLASH_Erase_Sector+0x98>)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <FLASH_Erase_Sector+0x98>)
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	4a0c      	ldr	r2, [pc, #48]	; (800209c <FLASH_Erase_Sector+0x98>)
 800206c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002070:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <FLASH_Erase_Sector+0x98>)
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4313      	orrs	r3, r2
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <FLASH_Erase_Sector+0x98>)
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <FLASH_Erase_Sector+0x98>)
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <FLASH_Erase_Sector+0x98>)
 800208a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208e:	6113      	str	r3, [r2, #16]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40023c00 	.word	0x40023c00

080020a0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d017      	beq.n	80020e0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020ba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a19      	ldr	r2, [pc, #100]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a16      	ldr	r2, [pc, #88]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020d2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a13      	ldr	r2, [pc, #76]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020de:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d017      	beq.n	800211c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020f6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <FLASH_FlushCaches+0x88>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a07      	ldr	r2, [pc, #28]	; (8002128 <FLASH_FlushCaches+0x88>)
 800210a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800210e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <FLASH_FlushCaches+0x88>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <FLASH_FlushCaches+0x88>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211a:	6013      	str	r3, [r2, #0]
  }
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e177      	b.n	8002438 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	f040 8166 	bne.w	8002432 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d005      	beq.n	800217e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217a:	2b02      	cmp	r3, #2
 800217c:	d130      	bne.n	80021e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 0201 	and.w	r2, r3, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d017      	beq.n	800221c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d123      	bne.n	8002270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80c0 	beq.w	8002432 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b66      	ldr	r3, [pc, #408]	; (8002450 <HAL_GPIO_Init+0x324>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a65      	ldr	r2, [pc, #404]	; (8002450 <HAL_GPIO_Init+0x324>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_GPIO_Init+0x324>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ce:	4a61      	ldr	r2, [pc, #388]	; (8002454 <HAL_GPIO_Init+0x328>)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a58      	ldr	r2, [pc, #352]	; (8002458 <HAL_GPIO_Init+0x32c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d037      	beq.n	800236a <HAL_GPIO_Init+0x23e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a57      	ldr	r2, [pc, #348]	; (800245c <HAL_GPIO_Init+0x330>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d031      	beq.n	8002366 <HAL_GPIO_Init+0x23a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a56      	ldr	r2, [pc, #344]	; (8002460 <HAL_GPIO_Init+0x334>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d02b      	beq.n	8002362 <HAL_GPIO_Init+0x236>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a55      	ldr	r2, [pc, #340]	; (8002464 <HAL_GPIO_Init+0x338>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d025      	beq.n	800235e <HAL_GPIO_Init+0x232>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a54      	ldr	r2, [pc, #336]	; (8002468 <HAL_GPIO_Init+0x33c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01f      	beq.n	800235a <HAL_GPIO_Init+0x22e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a53      	ldr	r2, [pc, #332]	; (800246c <HAL_GPIO_Init+0x340>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d019      	beq.n	8002356 <HAL_GPIO_Init+0x22a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_GPIO_Init+0x344>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_GPIO_Init+0x226>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a51      	ldr	r2, [pc, #324]	; (8002474 <HAL_GPIO_Init+0x348>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00d      	beq.n	800234e <HAL_GPIO_Init+0x222>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a50      	ldr	r2, [pc, #320]	; (8002478 <HAL_GPIO_Init+0x34c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <HAL_GPIO_Init+0x21e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4f      	ldr	r2, [pc, #316]	; (800247c <HAL_GPIO_Init+0x350>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_GPIO_Init+0x21a>
 8002342:	2309      	movs	r3, #9
 8002344:	e012      	b.n	800236c <HAL_GPIO_Init+0x240>
 8002346:	230a      	movs	r3, #10
 8002348:	e010      	b.n	800236c <HAL_GPIO_Init+0x240>
 800234a:	2308      	movs	r3, #8
 800234c:	e00e      	b.n	800236c <HAL_GPIO_Init+0x240>
 800234e:	2307      	movs	r3, #7
 8002350:	e00c      	b.n	800236c <HAL_GPIO_Init+0x240>
 8002352:	2306      	movs	r3, #6
 8002354:	e00a      	b.n	800236c <HAL_GPIO_Init+0x240>
 8002356:	2305      	movs	r3, #5
 8002358:	e008      	b.n	800236c <HAL_GPIO_Init+0x240>
 800235a:	2304      	movs	r3, #4
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x240>
 800235e:	2303      	movs	r3, #3
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x240>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x240>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x240>
 800236a:	2300      	movs	r3, #0
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	f002 0203 	and.w	r2, r2, #3
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	4093      	lsls	r3, r2
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800237c:	4935      	ldr	r1, [pc, #212]	; (8002454 <HAL_GPIO_Init+0x328>)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3302      	adds	r3, #2
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_GPIO_Init+0x354>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ae:	4a34      	ldr	r2, [pc, #208]	; (8002480 <HAL_GPIO_Init+0x354>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b4:	4b32      	ldr	r3, [pc, #200]	; (8002480 <HAL_GPIO_Init+0x354>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d8:	4a29      	ldr	r2, [pc, #164]	; (8002480 <HAL_GPIO_Init+0x354>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023de:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_GPIO_Init+0x354>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002402:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_GPIO_Init+0x354>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_GPIO_Init+0x354>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_GPIO_Init+0x354>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b0f      	cmp	r3, #15
 800243c:	f67f ae84 	bls.w	8002148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40013800 	.word	0x40013800
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40021000 	.word	0x40021000
 800246c:	40021400 	.word	0x40021400
 8002470:	40021800 	.word	0x40021800
 8002474:	40021c00 	.word	0x40021c00
 8002478:	40022000 	.word	0x40022000
 800247c:	40022400 	.word	0x40022400
 8002480:	40013c00 	.word	0x40013c00

08002484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e001      	b.n	80024a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e034      	b.n	8002530 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80024ce:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f245 5255 	movw	r2, #21845	; 0x5555
 80024d8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6852      	ldr	r2, [r2, #4]
 80024e2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6892      	ldr	r2, [r2, #8]
 80024ec:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80024ee:	f7ff f929 	bl	8001744 <HAL_GetTick>
 80024f2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80024f4:	e00f      	b.n	8002516 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80024f6:	f7ff f925 	bl	8001744 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b31      	cmp	r3, #49	; 0x31
 8002502:	d908      	bls.n	8002516 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e00c      	b.n	8002530 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e8      	bne.n	80024f6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800252c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002548:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e267      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d075      	beq.n	8002662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d00c      	beq.n	800259c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b85      	ldr	r3, [pc, #532]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258a:	2b08      	cmp	r3, #8
 800258c:	d112      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258e:	4b82      	ldr	r3, [pc, #520]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800259a:	d10b      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	4b7e      	ldr	r3, [pc, #504]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d05b      	beq.n	8002660 <HAL_RCC_OscConfig+0x108>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d157      	bne.n	8002660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e242      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025bc:	d106      	bne.n	80025cc <HAL_RCC_OscConfig+0x74>
 80025be:	4b76      	ldr	r3, [pc, #472]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a75      	ldr	r2, [pc, #468]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e01d      	b.n	8002608 <HAL_RCC_OscConfig+0xb0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x98>
 80025d6:	4b70      	ldr	r3, [pc, #448]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6f      	ldr	r2, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b6d      	ldr	r3, [pc, #436]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6c      	ldr	r2, [pc, #432]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0xb0>
 80025f0:	4b69      	ldr	r3, [pc, #420]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a68      	ldr	r2, [pc, #416]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b66      	ldr	r3, [pc, #408]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a65      	ldr	r2, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d013      	beq.n	8002638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7ff f898 	bl	8001744 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002618:	f7ff f894 	bl	8001744 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e207      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0xc0>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7ff f884 	bl	8001744 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002640:	f7ff f880 	bl	8001744 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1f3      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	4b51      	ldr	r3, [pc, #324]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0xe8>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d063      	beq.n	8002736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266e:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002682:	2b08      	cmp	r3, #8
 8002684:	d11c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b44      	ldr	r3, [pc, #272]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RCC_OscConfig+0x152>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e1c7      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4937      	ldr	r1, [pc, #220]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	e03a      	b.n	8002736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c8:	4b34      	ldr	r3, [pc, #208]	; (800279c <HAL_RCC_OscConfig+0x244>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7ff f839 	bl	8001744 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d6:	f7ff f835 	bl	8001744 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e1a8      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4925      	ldr	r1, [pc, #148]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_RCC_OscConfig+0x244>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff f818 	bl	8001744 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002718:	f7ff f814 	bl	8001744 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e187      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d036      	beq.n	80027b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_RCC_OscConfig+0x248>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fff8 	bl	8001744 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7fe fff4 	bl	8001744 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e167      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_OscConfig+0x240>)
 800276c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x200>
 8002776:	e01b      	b.n	80027b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_OscConfig+0x248>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277e:	f7fe ffe1 	bl	8001744 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	e00e      	b.n	80027a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002786:	f7fe ffdd 	bl	8001744 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d907      	bls.n	80027a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e150      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
 8002798:	40023800 	.word	0x40023800
 800279c:	42470000 	.word	0x42470000
 80027a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	4b88      	ldr	r3, [pc, #544]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ea      	bne.n	8002786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8097 	beq.w	80028ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b81      	ldr	r3, [pc, #516]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b7d      	ldr	r3, [pc, #500]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a7c      	ldr	r2, [pc, #496]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b7a      	ldr	r3, [pc, #488]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b77      	ldr	r3, [pc, #476]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d118      	bne.n	800282c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fa:	4b74      	ldr	r3, [pc, #464]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a73      	ldr	r2, [pc, #460]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002806:	f7fe ff9d 	bl	8001744 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe ff99 	bl	8001744 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e10c      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <HAL_RCC_OscConfig+0x474>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x2ea>
 8002834:	4b64      	ldr	r3, [pc, #400]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4a63      	ldr	r2, [pc, #396]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	; 0x70
 8002840:	e01c      	b.n	800287c <HAL_RCC_OscConfig+0x324>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b05      	cmp	r3, #5
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x30c>
 800284a:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a5e      	ldr	r2, [pc, #376]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
 8002856:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a5b      	ldr	r2, [pc, #364]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0x324>
 8002864:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a57      	ldr	r2, [pc, #348]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	; 0x70
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a54      	ldr	r2, [pc, #336]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002876:	f023 0304 	bic.w	r3, r3, #4
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d015      	beq.n	80028b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe ff5e 	bl	8001744 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe ff5a 	bl	8001744 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0cb      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	4b49      	ldr	r3, [pc, #292]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ee      	beq.n	800288c <HAL_RCC_OscConfig+0x334>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fe ff48 	bl	8001744 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe ff44 	bl	8001744 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0b5      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ce:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ee      	bne.n	80028b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4a38      	ldr	r2, [pc, #224]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a1 	beq.w	8002a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f6:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d05c      	beq.n	80029bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d141      	bne.n	800298e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_RCC_OscConfig+0x478>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe ff18 	bl	8001744 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe ff14 	bl	8001744 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e087      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	491b      	ldr	r1, [pc, #108]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x478>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe feed 	bl	8001744 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296e:	f7fe fee9 	bl	8001744 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e05c      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x416>
 800298c:	e054      	b.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_RCC_OscConfig+0x478>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe fed6 	bl	8001744 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe fed2 	bl	8001744 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e045      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x470>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x444>
 80029ba:	e03d      	b.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e038      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40007000 	.word	0x40007000
 80029d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x4ec>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d028      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d121      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d11a      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a04:	4013      	ands	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d111      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800

08002a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0cc      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d90c      	bls.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0b8      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab4:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	494d      	ldr	r1, [pc, #308]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d044      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d119      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e07f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e06f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e067      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4934      	ldr	r1, [pc, #208]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fe04 	bl	8001744 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe fe00 	bl	8001744 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e04f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d20c      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e032      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4916      	ldr	r1, [pc, #88]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	490e      	ldr	r1, [pc, #56]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bce:	f000 f821 	bl	8002c14 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	490a      	ldr	r1, [pc, #40]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fd64 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00
 8002c04:	40023800 	.word	0x40023800
 8002c08:	080049d0 	.word	0x080049d0
 8002c0c:	20000004 	.word	0x20000004
 8002c10:	2000000c 	.word	0x2000000c

08002c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c18:	b090      	sub	sp, #64	; 0x40
 8002c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c20:	2300      	movs	r3, #0
 8002c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c24:	2300      	movs	r3, #0
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c2c:	4b59      	ldr	r3, [pc, #356]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d00d      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x40>
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	f200 80a1 	bhi.w	8002d80 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x34>
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c46:	e09b      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c4c:	e09b      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c4e:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c52:	e098      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c5e:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d028      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	2200      	movs	r2, #0
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	627a      	str	r2, [r7, #36]	; 0x24
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c80:	fb03 f201 	mul.w	r2, r3, r1
 8002c84:	2300      	movs	r3, #0
 8002c86:	fb00 f303 	mul.w	r3, r0, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4a43      	ldr	r2, [pc, #268]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c8e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c94:	460a      	mov	r2, r1
 8002c96:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9a:	4413      	add	r3, r2
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	61fa      	str	r2, [r7, #28]
 8002ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002caa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cae:	f7fd fa9d 	bl	80001ec <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cba:	e053      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbc:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	617a      	str	r2, [r7, #20]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cce:	f04f 0b00 	mov.w	fp, #0
 8002cd2:	4652      	mov	r2, sl
 8002cd4:	465b      	mov	r3, fp
 8002cd6:	f04f 0000 	mov.w	r0, #0
 8002cda:	f04f 0100 	mov.w	r1, #0
 8002cde:	0159      	lsls	r1, r3, #5
 8002ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce4:	0150      	lsls	r0, r2, #5
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	ebb2 080a 	subs.w	r8, r2, sl
 8002cee:	eb63 090b 	sbc.w	r9, r3, fp
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d06:	ebb2 0408 	subs.w	r4, r2, r8
 8002d0a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	00eb      	lsls	r3, r5, #3
 8002d18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d1c:	00e2      	lsls	r2, r4, #3
 8002d1e:	4614      	mov	r4, r2
 8002d20:	461d      	mov	r5, r3
 8002d22:	eb14 030a 	adds.w	r3, r4, sl
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	eb45 030b 	adc.w	r3, r5, fp
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	028b      	lsls	r3, r1, #10
 8002d3e:	4621      	mov	r1, r4
 8002d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d44:	4621      	mov	r1, r4
 8002d46:	028a      	lsls	r2, r1, #10
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	60fa      	str	r2, [r7, #12]
 8002d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d58:	f7fd fa48 	bl	80001ec <__aeabi_uldivmod>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4613      	mov	r3, r2
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3740      	adds	r7, #64	; 0x40
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	017d7840 	.word	0x017d7840

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0a9b      	lsrs	r3, r3, #10
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	080049e0 	.word	0x080049e0

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002de4:	f7ff ffdc 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0b5b      	lsrs	r3, r3, #13
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	080049e0 	.word	0x080049e0

08002e08 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e0e:	f7fe fc99 	bl	8001744 <HAL_GetTick>
 8002e12:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e14:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a71      	ldr	r2, [pc, #452]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e22:	f7fe fc8f 	bl	8001744 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0d0      	b.n	8002fd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002e34:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002e40:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a66      	ldr	r2, [pc, #408]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e4c:	f7fe fc7a 	bl	8001744 <HAL_GetTick>
 8002e50:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5a:	f7fe fc73 	bl	8001744 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e0b2      	b.n	8002fd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002e70:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ee      	bne.n	8002e5a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e7c:	f7fe fc62 	bl	8001744 <HAL_GetTick>
 8002e80:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002e82:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a56      	ldr	r2, [pc, #344]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002e88:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe fc58 	bl	8001744 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e099      	b.n	8002fd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002eae:	f7fe fc49 	bl	8001744 <HAL_GetTick>
 8002eb2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002eb4:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a49      	ldr	r2, [pc, #292]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fe fc3f 	bl	8001744 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e080      	b.n	8002fd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002ed4:	4b42      	ldr	r3, [pc, #264]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f0      	bne.n	8002ec2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ee0:	f7fe fc30 	bl	8001744 <HAL_GetTick>
 8002ee4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002ee6:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a3d      	ldr	r2, [pc, #244]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002eec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ef4:	f7fe fc26 	bl	8001744 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e067      	b.n	8002fd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f12:	f7fe fc17 	bl	8001744 <HAL_GetTick>
 8002f16:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a30      	ldr	r2, [pc, #192]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f22:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f26:	f7fe fc0d 	bl	8001744 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e04e      	b.n	8002fd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002f44:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f46:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <HAL_RCC_DeInit+0x1dc>)
 8002f48:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002f4a:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_RCC_DeInit+0x1e0>)
 8002f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8002f52:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f54:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <HAL_RCC_DeInit+0x1e0>)
 8002f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f60:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002f64:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002f66:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4a1a      	ldr	r2, [pc, #104]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f84:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002f88:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002f9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fa0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa6:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <HAL_RCC_DeInit+0x1d8>)
 8002fb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb8:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_RCC_DeInit+0x1e4>)
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_RCC_DeInit+0x1e8>)
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <HAL_RCC_DeInit+0x1ec>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe fb79 	bl	80016bc <HAL_InitTick>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	04003010 	.word	0x04003010
 8002fe8:	24003000 	.word	0x24003000
 8002fec:	20000004 	.word	0x20000004
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	2000000c 	.word	0x2000000c

08002ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e041      	b.n	800308e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe f8a8 	bl	8001174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 f9fe 	bl	8003438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d001      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e04e      	b.n	800314e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a23      	ldr	r2, [pc, #140]	; (800315c <HAL_TIM_Base_Start_IT+0xc4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d022      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x80>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d01d      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x80>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_TIM_Base_Start_IT+0xc8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d018      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x80>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_TIM_Base_Start_IT+0xcc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x80>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_TIM_Base_Start_IT+0xd0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00e      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x80>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1b      	ldr	r2, [pc, #108]	; (800316c <HAL_TIM_Base_Start_IT+0xd4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d009      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x80>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_TIM_Base_Start_IT+0xd8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x80>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_TIM_Base_Start_IT+0xdc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d111      	bne.n	800313c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b06      	cmp	r3, #6
 8003128:	d010      	beq.n	800314c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313a:	e007      	b.n	800314c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40010000 	.word	0x40010000
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40010400 	.word	0x40010400
 8003170:	40014000 	.word	0x40014000
 8003174:	40001800 	.word	0x40001800

08003178 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	f241 1311 	movw	r3, #4369	; 0x1111
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10f      	bne.n	80031c0 <HAL_TIM_Base_Stop_IT+0x48>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	f240 4344 	movw	r3, #1092	; 0x444
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_Base_Stop_IT+0x48>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d122      	bne.n	8003232 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d11b      	bne.n	8003232 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f06f 0202 	mvn.w	r2, #2
 8003202:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f8ee 	bl	80033fa <HAL_TIM_IC_CaptureCallback>
 800321e:	e005      	b.n	800322c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8e0 	bl	80033e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f8f1 	bl	800340e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b04      	cmp	r3, #4
 800323e:	d122      	bne.n	8003286 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d11b      	bne.n	8003286 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f06f 0204 	mvn.w	r2, #4
 8003256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f8c4 	bl	80033fa <HAL_TIM_IC_CaptureCallback>
 8003272:	e005      	b.n	8003280 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8b6 	bl	80033e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f8c7 	bl	800340e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b08      	cmp	r3, #8
 8003292:	d122      	bne.n	80032da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d11b      	bne.n	80032da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f06f 0208 	mvn.w	r2, #8
 80032aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2204      	movs	r2, #4
 80032b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f89a 	bl	80033fa <HAL_TIM_IC_CaptureCallback>
 80032c6:	e005      	b.n	80032d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f88c 	bl	80033e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f89d 	bl	800340e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d122      	bne.n	800332e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d11b      	bne.n	800332e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f06f 0210 	mvn.w	r2, #16
 80032fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2208      	movs	r2, #8
 8003304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f870 	bl	80033fa <HAL_TIM_IC_CaptureCallback>
 800331a:	e005      	b.n	8003328 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f862 	bl	80033e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f873 	bl	800340e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	d10e      	bne.n	800335a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f06f 0201 	mvn.w	r2, #1
 8003352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fd ff4d 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003364:	2b80      	cmp	r3, #128	; 0x80
 8003366:	d10e      	bne.n	8003386 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b80      	cmp	r3, #128	; 0x80
 8003374:	d107      	bne.n	8003386 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800337e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f97f 	bl	8003684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d10e      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d107      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f838 	bl	8003422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d10e      	bne.n	80033de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d107      	bne.n	80033de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0220 	mvn.w	r2, #32
 80033d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f949 	bl	8003670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a40      	ldr	r2, [pc, #256]	; (800354c <TIM_Base_SetConfig+0x114>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <TIM_Base_SetConfig+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003456:	d00f      	beq.n	8003478 <TIM_Base_SetConfig+0x40>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a3d      	ldr	r2, [pc, #244]	; (8003550 <TIM_Base_SetConfig+0x118>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00b      	beq.n	8003478 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a3c      	ldr	r2, [pc, #240]	; (8003554 <TIM_Base_SetConfig+0x11c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d007      	beq.n	8003478 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a3b      	ldr	r2, [pc, #236]	; (8003558 <TIM_Base_SetConfig+0x120>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d003      	beq.n	8003478 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3a      	ldr	r2, [pc, #232]	; (800355c <TIM_Base_SetConfig+0x124>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d108      	bne.n	800348a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2f      	ldr	r2, [pc, #188]	; (800354c <TIM_Base_SetConfig+0x114>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d02b      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d027      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2c      	ldr	r2, [pc, #176]	; (8003550 <TIM_Base_SetConfig+0x118>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d023      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <TIM_Base_SetConfig+0x11c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01f      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2a      	ldr	r2, [pc, #168]	; (8003558 <TIM_Base_SetConfig+0x120>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01b      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a29      	ldr	r2, [pc, #164]	; (800355c <TIM_Base_SetConfig+0x124>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d017      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a28      	ldr	r2, [pc, #160]	; (8003560 <TIM_Base_SetConfig+0x128>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a27      	ldr	r2, [pc, #156]	; (8003564 <TIM_Base_SetConfig+0x12c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00f      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a26      	ldr	r2, [pc, #152]	; (8003568 <TIM_Base_SetConfig+0x130>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00b      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a25      	ldr	r2, [pc, #148]	; (800356c <TIM_Base_SetConfig+0x134>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a24      	ldr	r2, [pc, #144]	; (8003570 <TIM_Base_SetConfig+0x138>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a23      	ldr	r2, [pc, #140]	; (8003574 <TIM_Base_SetConfig+0x13c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d108      	bne.n	80034fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a0a      	ldr	r2, [pc, #40]	; (800354c <TIM_Base_SetConfig+0x114>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_Base_SetConfig+0xf8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <TIM_Base_SetConfig+0x124>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d103      	bne.n	8003538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	615a      	str	r2, [r3, #20]
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40010400 	.word	0x40010400
 8003560:	40014000 	.word	0x40014000
 8003564:	40014400 	.word	0x40014400
 8003568:	40014800 	.word	0x40014800
 800356c:	40001800 	.word	0x40001800
 8003570:	40001c00 	.word	0x40001c00
 8003574:	40002000 	.word	0x40002000

08003578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800358c:	2302      	movs	r3, #2
 800358e:	e05a      	b.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d01d      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d018      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1b      	ldr	r2, [pc, #108]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d009      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a15      	ldr	r2, [pc, #84]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10c      	bne.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	4313      	orrs	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40010000 	.word	0x40010000
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800
 8003660:	40000c00 	.word	0x40000c00
 8003664:	40010400 	.word	0x40010400
 8003668:	40014000 	.word	0x40014000
 800366c:	40001800 	.word	0x40001800

08003670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e03f      	b.n	800372a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd fe32 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	; 0x24
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fe05 	bl	80042ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	4613      	mov	r3, r2
 800373e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b20      	cmp	r3, #32
 800374a:	d130      	bne.n	80037ae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Transmit_IT+0x26>
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e029      	b.n	80037b0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_UART_Transmit_IT+0x38>
 8003766:	2302      	movs	r3, #2
 8003768:	e022      	b.n	80037b0 <HAL_UART_Transmit_IT+0x7e>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	88fa      	ldrh	r2, [r7, #6]
 8003782:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2221      	movs	r2, #33	; 0x21
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d11d      	bne.n	8003812 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_UART_Receive_IT+0x26>
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e016      	b.n	8003814 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Receive_IT+0x38>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e00f      	b.n	8003814 <HAL_UART_Receive_IT+0x58>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	461a      	mov	r2, r3
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fb97 	bl	8003f3c <UART_Start_Receive_IT>
 800380e:	4603      	mov	r3, r0
 8003810:	e000      	b.n	8003814 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b0a0      	sub	sp, #128	; 0x80
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003836:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800383a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003844:	66ba      	str	r2, [r7, #104]	; 0x68
 8003846:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800384a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3314      	adds	r3, #20
 8003876:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003878:	657a      	str	r2, [r7, #84]	; 0x54
 800387a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800387e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e5      	bne.n	8003858 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	2b01      	cmp	r3, #1
 8003892:	d119      	bne.n	80038c8 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	e853 3f00 	ldrex	r3, [r3]
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	f023 0310 	bic.w	r3, r3, #16
 80038aa:	677b      	str	r3, [r7, #116]	; 0x74
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80038b4:	643a      	str	r2, [r7, #64]	; 0x40
 80038b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e5      	bne.n	8003894 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b80      	cmp	r3, #128	; 0x80
 80038d4:	d136      	bne.n	8003944 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3314      	adds	r3, #20
 80038dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ec:	673b      	str	r3, [r7, #112]	; 0x70
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3314      	adds	r3, #20
 80038f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e5      	bne.n	80038d6 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	2b00      	cmp	r3, #0
 8003910:	d018      	beq.n	8003944 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	2200      	movs	r2, #0
 8003918:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe f85f 	bl	80019e2 <HAL_DMA_Abort>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe f8e9 	bl	8001b06 <HAL_DMA_GetError>
 8003934:	4603      	mov	r3, r0
 8003936:	2b20      	cmp	r3, #32
 8003938:	d104      	bne.n	8003944 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2210      	movs	r2, #16
 800393e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e052      	b.n	80039ea <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d136      	bne.n	80039c0 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3314      	adds	r3, #20
 8003958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	60bb      	str	r3, [r7, #8]
   return(result);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3314      	adds	r3, #20
 8003970:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003972:	61ba      	str	r2, [r7, #24]
 8003974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	613b      	str	r3, [r7, #16]
   return(result);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e5      	bne.n	8003952 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	2b00      	cmp	r3, #0
 800398c:	d018      	beq.n	80039c0 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	2200      	movs	r2, #0
 8003994:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe f821 	bl	80019e2 <HAL_DMA_Abort>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00c      	beq.n	80039c0 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe f8ab 	bl	8001b06 <HAL_DMA_GetError>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d104      	bne.n	80039c0 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2210      	movs	r2, #16
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e014      	b.n	80039ea <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3780      	adds	r7, #128	; 0x80
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b0ba      	sub	sp, #232	; 0xe8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_UART_IRQHandler+0x66>
 8003a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fb8f 	bl	8004176 <UART_Receive_IT>
      return;
 8003a58:	e256      	b.n	8003f08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80de 	beq.w	8003c20 <HAL_UART_IRQHandler+0x22c>
 8003a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80d1 	beq.w	8003c20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_UART_IRQHandler+0xae>
 8003a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f043 0201 	orr.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xd2>
 8003aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f043 0202 	orr.w	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_UART_IRQHandler+0xf6>
 8003ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d011      	beq.n	8003b1a <HAL_UART_IRQHandler+0x126>
 8003af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d105      	bne.n	8003b0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f043 0208 	orr.w	r2, r3, #8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 81ed 	beq.w	8003efe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_UART_IRQHandler+0x14e>
 8003b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fb1a 	bl	8004176 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <HAL_UART_IRQHandler+0x17a>
 8003b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d04f      	beq.n	8003c0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa22 	bl	8003fb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d141      	bne.n	8003c06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3314      	adds	r3, #20
 8003b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3314      	adds	r3, #20
 8003baa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1d9      	bne.n	8003b82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d013      	beq.n	8003bfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	4a7d      	ldr	r2, [pc, #500]	; (8003dd0 <HAL_UART_IRQHandler+0x3dc>)
 8003bdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd ff6d 	bl	8001ac2 <HAL_DMA_Abort_IT>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	e00e      	b.n	8003c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f986 	bl	8003f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	e00a      	b.n	8003c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f982 	bl	8003f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	e006      	b.n	8003c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f97e 	bl	8003f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c1a:	e170      	b.n	8003efe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	bf00      	nop
    return;
 8003c1e:	e16e      	b.n	8003efe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	f040 814a 	bne.w	8003ebe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8143 	beq.w	8003ebe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 813c 	beq.w	8003ebe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	f040 80b4 	bne.w	8003dd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8140 	beq.w	8003f02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	f080 8139 	bcs.w	8003f02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca2:	f000 8088 	beq.w	8003db6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	330c      	adds	r3, #12
 8003cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1d9      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3314      	adds	r3, #20
 8003cf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3314      	adds	r3, #20
 8003d12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e1      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3314      	adds	r3, #20
 8003d34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e3      	bne.n	8003d2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d86:	f023 0310 	bic.w	r3, r3, #16
 8003d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d98:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e3      	bne.n	8003d74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fd fe16 	bl	80019e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f8ac 	bl	8003f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dcc:	e099      	b.n	8003f02 <HAL_UART_IRQHandler+0x50e>
 8003dce:	bf00      	nop
 8003dd0:	0800407f 	.word	0x0800407f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 808b 	beq.w	8003f06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8086 	beq.w	8003f06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e1e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e3      	bne.n	8003dfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3314      	adds	r3, #20
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	623b      	str	r3, [r7, #32]
   return(result);
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3314      	adds	r3, #20
 8003e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e56:	633a      	str	r2, [r7, #48]	; 0x30
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e3      	bne.n	8003e32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0310 	bic.w	r3, r3, #16
 8003e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e9c:	61fa      	str	r2, [r7, #28]
 8003e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	69b9      	ldr	r1, [r7, #24]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e3      	bne.n	8003e78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f834 	bl	8003f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ebc:	e023      	b.n	8003f06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_UART_IRQHandler+0x4ea>
 8003eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8e5 	bl	80040a6 <UART_Transmit_IT>
    return;
 8003edc:	e014      	b.n	8003f08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00e      	beq.n	8003f08 <HAL_UART_IRQHandler+0x514>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f925 	bl	8004146 <UART_EndTransmit_IT>
    return;
 8003efc:	e004      	b.n	8003f08 <HAL_UART_IRQHandler+0x514>
    return;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <HAL_UART_IRQHandler+0x514>
      return;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HAL_UART_IRQHandler+0x514>
      return;
 8003f06:	bf00      	nop
  }
}
 8003f08:	37e8      	adds	r7, #232	; 0xe8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop

08003f10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	4613      	mov	r3, r2
 8003f48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2222      	movs	r2, #34	; 0x22
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0220 	orr.w	r2, r2, #32
 8003fa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b095      	sub	sp, #84	; 0x54
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe0:	643a      	str	r2, [r7, #64]	; 0x40
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3314      	adds	r3, #20
 8003ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	61fb      	str	r3, [r7, #28]
   return(result);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3314      	adds	r3, #20
 8004012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800401a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e5      	bne.n	8003ff4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	2b01      	cmp	r3, #1
 800402e:	d119      	bne.n	8004064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	647b      	str	r3, [r7, #68]	; 0x44
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004050:	61ba      	str	r2, [r7, #24]
 8004052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	613b      	str	r3, [r7, #16]
   return(result);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e5      	bne.n	8004030 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004072:	bf00      	nop
 8004074:	3754      	adds	r7, #84	; 0x54
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ff39 	bl	8003f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b21      	cmp	r3, #33	; 0x21
 80040b8:	d13e      	bne.n	8004138 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c2:	d114      	bne.n	80040ee <UART_Transmit_IT+0x48>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d110      	bne.n	80040ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]
 80040ec:	e008      	b.n	8004100 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	1c59      	adds	r1, r3, #1
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6211      	str	r1, [r2, #32]
 80040f8:	781a      	ldrb	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29b      	uxth	r3, r3
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4619      	mov	r1, r3
 800410e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10f      	bne.n	8004134 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004122:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004132:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fd f872 	bl	8001250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b08c      	sub	sp, #48	; 0x30
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b22      	cmp	r3, #34	; 0x22
 8004188:	f040 80ab 	bne.w	80042e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004194:	d117      	bne.n	80041c6 <UART_Receive_IT+0x50>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d113      	bne.n	80041c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	1c9a      	adds	r2, r3, #2
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28
 80041c4:	e026      	b.n	8004214 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d007      	beq.n	80041ea <UART_Receive_IT+0x74>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <UART_Receive_IT+0x82>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e008      	b.n	800420a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004204:	b2da      	uxtb	r2, r3
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4619      	mov	r1, r3
 8004222:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004224:	2b00      	cmp	r3, #0
 8004226:	d15a      	bne.n	80042de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0220 	bic.w	r2, r2, #32
 8004236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	d135      	bne.n	80042d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	613b      	str	r3, [r7, #16]
   return(result);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f023 0310 	bic.w	r3, r3, #16
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428e:	623a      	str	r2, [r7, #32]
 8004290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	69f9      	ldr	r1, [r7, #28]
 8004294:	6a3a      	ldr	r2, [r7, #32]
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	61bb      	str	r3, [r7, #24]
   return(result);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e5      	bne.n	800426e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d10a      	bne.n	80042c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ca:	4619      	mov	r1, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff fe29 	bl	8003f24 <HAL_UARTEx_RxEventCallback>
 80042d2:	e002      	b.n	80042da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7fc ffdb 	bl	8001290 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e002      	b.n	80042e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e000      	b.n	80042e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3730      	adds	r7, #48	; 0x30
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b0c0      	sub	sp, #256	; 0x100
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004308:	68d9      	ldr	r1, [r3, #12]
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	ea40 0301 	orr.w	r3, r0, r1
 8004314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	431a      	orrs	r2, r3
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	431a      	orrs	r2, r3
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004344:	f021 010c 	bic.w	r1, r1, #12
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004352:	430b      	orrs	r3, r1
 8004354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004366:	6999      	ldr	r1, [r3, #24]
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	ea40 0301 	orr.w	r3, r0, r1
 8004372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b8f      	ldr	r3, [pc, #572]	; (80045b8 <UART_SetConfig+0x2cc>)
 800437c:	429a      	cmp	r2, r3
 800437e:	d005      	beq.n	800438c <UART_SetConfig+0xa0>
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4b8d      	ldr	r3, [pc, #564]	; (80045bc <UART_SetConfig+0x2d0>)
 8004388:	429a      	cmp	r2, r3
 800438a:	d104      	bne.n	8004396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800438c:	f7fe fd28 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8004390:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004394:	e003      	b.n	800439e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004396:	f7fe fd0f 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 800439a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a8:	f040 810c 	bne.w	80045c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043be:	4622      	mov	r2, r4
 80043c0:	462b      	mov	r3, r5
 80043c2:	1891      	adds	r1, r2, r2
 80043c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80043c6:	415b      	adcs	r3, r3
 80043c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043ce:	4621      	mov	r1, r4
 80043d0:	eb12 0801 	adds.w	r8, r2, r1
 80043d4:	4629      	mov	r1, r5
 80043d6:	eb43 0901 	adc.w	r9, r3, r1
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ee:	4690      	mov	r8, r2
 80043f0:	4699      	mov	r9, r3
 80043f2:	4623      	mov	r3, r4
 80043f4:	eb18 0303 	adds.w	r3, r8, r3
 80043f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043fc:	462b      	mov	r3, r5
 80043fe:	eb49 0303 	adc.w	r3, r9, r3
 8004402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004412:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800441a:	460b      	mov	r3, r1
 800441c:	18db      	adds	r3, r3, r3
 800441e:	653b      	str	r3, [r7, #80]	; 0x50
 8004420:	4613      	mov	r3, r2
 8004422:	eb42 0303 	adc.w	r3, r2, r3
 8004426:	657b      	str	r3, [r7, #84]	; 0x54
 8004428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800442c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004430:	f7fb fedc 	bl	80001ec <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4b61      	ldr	r3, [pc, #388]	; (80045c0 <UART_SetConfig+0x2d4>)
 800443a:	fba3 2302 	umull	r2, r3, r3, r2
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	011c      	lsls	r4, r3, #4
 8004442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800444c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	1891      	adds	r1, r2, r2
 800445a:	64b9      	str	r1, [r7, #72]	; 0x48
 800445c:	415b      	adcs	r3, r3
 800445e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004464:	4641      	mov	r1, r8
 8004466:	eb12 0a01 	adds.w	sl, r2, r1
 800446a:	4649      	mov	r1, r9
 800446c:	eb43 0b01 	adc.w	fp, r3, r1
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800447c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004484:	4692      	mov	sl, r2
 8004486:	469b      	mov	fp, r3
 8004488:	4643      	mov	r3, r8
 800448a:	eb1a 0303 	adds.w	r3, sl, r3
 800448e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004492:	464b      	mov	r3, r9
 8004494:	eb4b 0303 	adc.w	r3, fp, r3
 8004498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044b0:	460b      	mov	r3, r1
 80044b2:	18db      	adds	r3, r3, r3
 80044b4:	643b      	str	r3, [r7, #64]	; 0x40
 80044b6:	4613      	mov	r3, r2
 80044b8:	eb42 0303 	adc.w	r3, r2, r3
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
 80044be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044c6:	f7fb fe91 	bl	80001ec <__aeabi_uldivmod>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	4b3b      	ldr	r3, [pc, #236]	; (80045c0 <UART_SetConfig+0x2d4>)
 80044d2:	fba3 2301 	umull	r2, r3, r3, r1
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	2264      	movs	r2, #100	; 0x64
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	1acb      	subs	r3, r1, r3
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044e6:	4b36      	ldr	r3, [pc, #216]	; (80045c0 <UART_SetConfig+0x2d4>)
 80044e8:	fba3 2302 	umull	r2, r3, r3, r2
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044f4:	441c      	add	r4, r3
 80044f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004500:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	1891      	adds	r1, r2, r2
 800450e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004510:	415b      	adcs	r3, r3
 8004512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004518:	4641      	mov	r1, r8
 800451a:	1851      	adds	r1, r2, r1
 800451c:	6339      	str	r1, [r7, #48]	; 0x30
 800451e:	4649      	mov	r1, r9
 8004520:	414b      	adcs	r3, r1
 8004522:	637b      	str	r3, [r7, #52]	; 0x34
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004530:	4659      	mov	r1, fp
 8004532:	00cb      	lsls	r3, r1, #3
 8004534:	4651      	mov	r1, sl
 8004536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453a:	4651      	mov	r1, sl
 800453c:	00ca      	lsls	r2, r1, #3
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	4603      	mov	r3, r0
 8004544:	4642      	mov	r2, r8
 8004546:	189b      	adds	r3, r3, r2
 8004548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800454c:	464b      	mov	r3, r9
 800454e:	460a      	mov	r2, r1
 8004550:	eb42 0303 	adc.w	r3, r2, r3
 8004554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004564:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800456c:	460b      	mov	r3, r1
 800456e:	18db      	adds	r3, r3, r3
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
 8004572:	4613      	mov	r3, r2
 8004574:	eb42 0303 	adc.w	r3, r2, r3
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800457e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004582:	f7fb fe33 	bl	80001ec <__aeabi_uldivmod>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <UART_SetConfig+0x2d4>)
 800458c:	fba3 1302 	umull	r1, r3, r3, r2
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	2164      	movs	r1, #100	; 0x64
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	3332      	adds	r3, #50	; 0x32
 800459e:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <UART_SetConfig+0x2d4>)
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	f003 0207 	and.w	r2, r3, #7
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4422      	add	r2, r4
 80045b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045b4:	e105      	b.n	80047c2 <UART_SetConfig+0x4d6>
 80045b6:	bf00      	nop
 80045b8:	40011000 	.word	0x40011000
 80045bc:	40011400 	.word	0x40011400
 80045c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045d6:	4642      	mov	r2, r8
 80045d8:	464b      	mov	r3, r9
 80045da:	1891      	adds	r1, r2, r2
 80045dc:	6239      	str	r1, [r7, #32]
 80045de:	415b      	adcs	r3, r3
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045e6:	4641      	mov	r1, r8
 80045e8:	1854      	adds	r4, r2, r1
 80045ea:	4649      	mov	r1, r9
 80045ec:	eb43 0501 	adc.w	r5, r3, r1
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	00eb      	lsls	r3, r5, #3
 80045fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045fe:	00e2      	lsls	r2, r4, #3
 8004600:	4614      	mov	r4, r2
 8004602:	461d      	mov	r5, r3
 8004604:	4643      	mov	r3, r8
 8004606:	18e3      	adds	r3, r4, r3
 8004608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800460c:	464b      	mov	r3, r9
 800460e:	eb45 0303 	adc.w	r3, r5, r3
 8004612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004632:	4629      	mov	r1, r5
 8004634:	008b      	lsls	r3, r1, #2
 8004636:	4621      	mov	r1, r4
 8004638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800463c:	4621      	mov	r1, r4
 800463e:	008a      	lsls	r2, r1, #2
 8004640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004644:	f7fb fdd2 	bl	80001ec <__aeabi_uldivmod>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4b60      	ldr	r3, [pc, #384]	; (80047d0 <UART_SetConfig+0x4e4>)
 800464e:	fba3 2302 	umull	r2, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	011c      	lsls	r4, r3, #4
 8004656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004668:	4642      	mov	r2, r8
 800466a:	464b      	mov	r3, r9
 800466c:	1891      	adds	r1, r2, r2
 800466e:	61b9      	str	r1, [r7, #24]
 8004670:	415b      	adcs	r3, r3
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004678:	4641      	mov	r1, r8
 800467a:	1851      	adds	r1, r2, r1
 800467c:	6139      	str	r1, [r7, #16]
 800467e:	4649      	mov	r1, r9
 8004680:	414b      	adcs	r3, r1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004690:	4659      	mov	r1, fp
 8004692:	00cb      	lsls	r3, r1, #3
 8004694:	4651      	mov	r1, sl
 8004696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800469a:	4651      	mov	r1, sl
 800469c:	00ca      	lsls	r2, r1, #3
 800469e:	4610      	mov	r0, r2
 80046a0:	4619      	mov	r1, r3
 80046a2:	4603      	mov	r3, r0
 80046a4:	4642      	mov	r2, r8
 80046a6:	189b      	adds	r3, r3, r2
 80046a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046ac:	464b      	mov	r3, r9
 80046ae:	460a      	mov	r2, r1
 80046b0:	eb42 0303 	adc.w	r3, r2, r3
 80046b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80046c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046d0:	4649      	mov	r1, r9
 80046d2:	008b      	lsls	r3, r1, #2
 80046d4:	4641      	mov	r1, r8
 80046d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046da:	4641      	mov	r1, r8
 80046dc:	008a      	lsls	r2, r1, #2
 80046de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046e2:	f7fb fd83 	bl	80001ec <__aeabi_uldivmod>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <UART_SetConfig+0x4e4>)
 80046ec:	fba3 1302 	umull	r1, r3, r3, r2
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	2164      	movs	r1, #100	; 0x64
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	3332      	adds	r3, #50	; 0x32
 80046fe:	4a34      	ldr	r2, [pc, #208]	; (80047d0 <UART_SetConfig+0x4e4>)
 8004700:	fba2 2303 	umull	r2, r3, r2, r3
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800470a:	441c      	add	r4, r3
 800470c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004710:	2200      	movs	r2, #0
 8004712:	673b      	str	r3, [r7, #112]	; 0x70
 8004714:	677a      	str	r2, [r7, #116]	; 0x74
 8004716:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800471a:	4642      	mov	r2, r8
 800471c:	464b      	mov	r3, r9
 800471e:	1891      	adds	r1, r2, r2
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	415b      	adcs	r3, r3
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800472a:	4641      	mov	r1, r8
 800472c:	1851      	adds	r1, r2, r1
 800472e:	6039      	str	r1, [r7, #0]
 8004730:	4649      	mov	r1, r9
 8004732:	414b      	adcs	r3, r1
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004742:	4659      	mov	r1, fp
 8004744:	00cb      	lsls	r3, r1, #3
 8004746:	4651      	mov	r1, sl
 8004748:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474c:	4651      	mov	r1, sl
 800474e:	00ca      	lsls	r2, r1, #3
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	4603      	mov	r3, r0
 8004756:	4642      	mov	r2, r8
 8004758:	189b      	adds	r3, r3, r2
 800475a:	66bb      	str	r3, [r7, #104]	; 0x68
 800475c:	464b      	mov	r3, r9
 800475e:	460a      	mov	r2, r1
 8004760:	eb42 0303 	adc.w	r3, r2, r3
 8004764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	663b      	str	r3, [r7, #96]	; 0x60
 8004770:	667a      	str	r2, [r7, #100]	; 0x64
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800477e:	4649      	mov	r1, r9
 8004780:	008b      	lsls	r3, r1, #2
 8004782:	4641      	mov	r1, r8
 8004784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004788:	4641      	mov	r1, r8
 800478a:	008a      	lsls	r2, r1, #2
 800478c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004790:	f7fb fd2c 	bl	80001ec <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <UART_SetConfig+0x4e4>)
 800479a:	fba3 1302 	umull	r1, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2164      	movs	r1, #100	; 0x64
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	3332      	adds	r3, #50	; 0x32
 80047ac:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <UART_SetConfig+0x4e4>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	f003 020f 	and.w	r2, r3, #15
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4422      	add	r2, r4
 80047c0:	609a      	str	r2, [r3, #8]
}
 80047c2:	bf00      	nop
 80047c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047c8:	46bd      	mov	sp, r7
 80047ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ce:	bf00      	nop
 80047d0:	51eb851f 	.word	0x51eb851f

080047d4 <__errno>:
 80047d4:	4b01      	ldr	r3, [pc, #4]	; (80047dc <__errno+0x8>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000014 	.word	0x20000014

080047e0 <__libc_init_array>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	4d0d      	ldr	r5, [pc, #52]	; (8004818 <__libc_init_array+0x38>)
 80047e4:	4c0d      	ldr	r4, [pc, #52]	; (800481c <__libc_init_array+0x3c>)
 80047e6:	1b64      	subs	r4, r4, r5
 80047e8:	10a4      	asrs	r4, r4, #2
 80047ea:	2600      	movs	r6, #0
 80047ec:	42a6      	cmp	r6, r4
 80047ee:	d109      	bne.n	8004804 <__libc_init_array+0x24>
 80047f0:	4d0b      	ldr	r5, [pc, #44]	; (8004820 <__libc_init_array+0x40>)
 80047f2:	4c0c      	ldr	r4, [pc, #48]	; (8004824 <__libc_init_array+0x44>)
 80047f4:	f000 f8da 	bl	80049ac <_init>
 80047f8:	1b64      	subs	r4, r4, r5
 80047fa:	10a4      	asrs	r4, r4, #2
 80047fc:	2600      	movs	r6, #0
 80047fe:	42a6      	cmp	r6, r4
 8004800:	d105      	bne.n	800480e <__libc_init_array+0x2e>
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	f855 3b04 	ldr.w	r3, [r5], #4
 8004808:	4798      	blx	r3
 800480a:	3601      	adds	r6, #1
 800480c:	e7ee      	b.n	80047ec <__libc_init_array+0xc>
 800480e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004812:	4798      	blx	r3
 8004814:	3601      	adds	r6, #1
 8004816:	e7f2      	b.n	80047fe <__libc_init_array+0x1e>
 8004818:	080049f0 	.word	0x080049f0
 800481c:	080049f0 	.word	0x080049f0
 8004820:	080049f0 	.word	0x080049f0
 8004824:	080049f4 	.word	0x080049f4

08004828 <malloc>:
 8004828:	4b02      	ldr	r3, [pc, #8]	; (8004834 <malloc+0xc>)
 800482a:	4601      	mov	r1, r0
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	f000 b82b 	b.w	8004888 <_malloc_r>
 8004832:	bf00      	nop
 8004834:	20000014 	.word	0x20000014

08004838 <memset>:
 8004838:	4402      	add	r2, r0
 800483a:	4603      	mov	r3, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	d100      	bne.n	8004842 <memset+0xa>
 8004840:	4770      	bx	lr
 8004842:	f803 1b01 	strb.w	r1, [r3], #1
 8004846:	e7f9      	b.n	800483c <memset+0x4>

08004848 <sbrk_aligned>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	4e0e      	ldr	r6, [pc, #56]	; (8004884 <sbrk_aligned+0x3c>)
 800484c:	460c      	mov	r4, r1
 800484e:	6831      	ldr	r1, [r6, #0]
 8004850:	4605      	mov	r5, r0
 8004852:	b911      	cbnz	r1, 800485a <sbrk_aligned+0x12>
 8004854:	f000 f88c 	bl	8004970 <_sbrk_r>
 8004858:	6030      	str	r0, [r6, #0]
 800485a:	4621      	mov	r1, r4
 800485c:	4628      	mov	r0, r5
 800485e:	f000 f887 	bl	8004970 <_sbrk_r>
 8004862:	1c43      	adds	r3, r0, #1
 8004864:	d00a      	beq.n	800487c <sbrk_aligned+0x34>
 8004866:	1cc4      	adds	r4, r0, #3
 8004868:	f024 0403 	bic.w	r4, r4, #3
 800486c:	42a0      	cmp	r0, r4
 800486e:	d007      	beq.n	8004880 <sbrk_aligned+0x38>
 8004870:	1a21      	subs	r1, r4, r0
 8004872:	4628      	mov	r0, r5
 8004874:	f000 f87c 	bl	8004970 <_sbrk_r>
 8004878:	3001      	adds	r0, #1
 800487a:	d101      	bne.n	8004880 <sbrk_aligned+0x38>
 800487c:	f04f 34ff 	mov.w	r4, #4294967295
 8004880:	4620      	mov	r0, r4
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	200101b0 	.word	0x200101b0

08004888 <_malloc_r>:
 8004888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488c:	1ccd      	adds	r5, r1, #3
 800488e:	f025 0503 	bic.w	r5, r5, #3
 8004892:	3508      	adds	r5, #8
 8004894:	2d0c      	cmp	r5, #12
 8004896:	bf38      	it	cc
 8004898:	250c      	movcc	r5, #12
 800489a:	2d00      	cmp	r5, #0
 800489c:	4607      	mov	r7, r0
 800489e:	db01      	blt.n	80048a4 <_malloc_r+0x1c>
 80048a0:	42a9      	cmp	r1, r5
 80048a2:	d905      	bls.n	80048b0 <_malloc_r+0x28>
 80048a4:	230c      	movs	r3, #12
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	2600      	movs	r6, #0
 80048aa:	4630      	mov	r0, r6
 80048ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b0:	4e2e      	ldr	r6, [pc, #184]	; (800496c <_malloc_r+0xe4>)
 80048b2:	f000 f86d 	bl	8004990 <__malloc_lock>
 80048b6:	6833      	ldr	r3, [r6, #0]
 80048b8:	461c      	mov	r4, r3
 80048ba:	bb34      	cbnz	r4, 800490a <_malloc_r+0x82>
 80048bc:	4629      	mov	r1, r5
 80048be:	4638      	mov	r0, r7
 80048c0:	f7ff ffc2 	bl	8004848 <sbrk_aligned>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	4604      	mov	r4, r0
 80048c8:	d14d      	bne.n	8004966 <_malloc_r+0xde>
 80048ca:	6834      	ldr	r4, [r6, #0]
 80048cc:	4626      	mov	r6, r4
 80048ce:	2e00      	cmp	r6, #0
 80048d0:	d140      	bne.n	8004954 <_malloc_r+0xcc>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	4631      	mov	r1, r6
 80048d6:	4638      	mov	r0, r7
 80048d8:	eb04 0803 	add.w	r8, r4, r3
 80048dc:	f000 f848 	bl	8004970 <_sbrk_r>
 80048e0:	4580      	cmp	r8, r0
 80048e2:	d13a      	bne.n	800495a <_malloc_r+0xd2>
 80048e4:	6821      	ldr	r1, [r4, #0]
 80048e6:	3503      	adds	r5, #3
 80048e8:	1a6d      	subs	r5, r5, r1
 80048ea:	f025 0503 	bic.w	r5, r5, #3
 80048ee:	3508      	adds	r5, #8
 80048f0:	2d0c      	cmp	r5, #12
 80048f2:	bf38      	it	cc
 80048f4:	250c      	movcc	r5, #12
 80048f6:	4629      	mov	r1, r5
 80048f8:	4638      	mov	r0, r7
 80048fa:	f7ff ffa5 	bl	8004848 <sbrk_aligned>
 80048fe:	3001      	adds	r0, #1
 8004900:	d02b      	beq.n	800495a <_malloc_r+0xd2>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	442b      	add	r3, r5
 8004906:	6023      	str	r3, [r4, #0]
 8004908:	e00e      	b.n	8004928 <_malloc_r+0xa0>
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	1b52      	subs	r2, r2, r5
 800490e:	d41e      	bmi.n	800494e <_malloc_r+0xc6>
 8004910:	2a0b      	cmp	r2, #11
 8004912:	d916      	bls.n	8004942 <_malloc_r+0xba>
 8004914:	1961      	adds	r1, r4, r5
 8004916:	42a3      	cmp	r3, r4
 8004918:	6025      	str	r5, [r4, #0]
 800491a:	bf18      	it	ne
 800491c:	6059      	strne	r1, [r3, #4]
 800491e:	6863      	ldr	r3, [r4, #4]
 8004920:	bf08      	it	eq
 8004922:	6031      	streq	r1, [r6, #0]
 8004924:	5162      	str	r2, [r4, r5]
 8004926:	604b      	str	r3, [r1, #4]
 8004928:	4638      	mov	r0, r7
 800492a:	f104 060b 	add.w	r6, r4, #11
 800492e:	f000 f835 	bl	800499c <__malloc_unlock>
 8004932:	f026 0607 	bic.w	r6, r6, #7
 8004936:	1d23      	adds	r3, r4, #4
 8004938:	1af2      	subs	r2, r6, r3
 800493a:	d0b6      	beq.n	80048aa <_malloc_r+0x22>
 800493c:	1b9b      	subs	r3, r3, r6
 800493e:	50a3      	str	r3, [r4, r2]
 8004940:	e7b3      	b.n	80048aa <_malloc_r+0x22>
 8004942:	6862      	ldr	r2, [r4, #4]
 8004944:	42a3      	cmp	r3, r4
 8004946:	bf0c      	ite	eq
 8004948:	6032      	streq	r2, [r6, #0]
 800494a:	605a      	strne	r2, [r3, #4]
 800494c:	e7ec      	b.n	8004928 <_malloc_r+0xa0>
 800494e:	4623      	mov	r3, r4
 8004950:	6864      	ldr	r4, [r4, #4]
 8004952:	e7b2      	b.n	80048ba <_malloc_r+0x32>
 8004954:	4634      	mov	r4, r6
 8004956:	6876      	ldr	r6, [r6, #4]
 8004958:	e7b9      	b.n	80048ce <_malloc_r+0x46>
 800495a:	230c      	movs	r3, #12
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	4638      	mov	r0, r7
 8004960:	f000 f81c 	bl	800499c <__malloc_unlock>
 8004964:	e7a1      	b.n	80048aa <_malloc_r+0x22>
 8004966:	6025      	str	r5, [r4, #0]
 8004968:	e7de      	b.n	8004928 <_malloc_r+0xa0>
 800496a:	bf00      	nop
 800496c:	200101ac 	.word	0x200101ac

08004970 <_sbrk_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d06      	ldr	r5, [pc, #24]	; (800498c <_sbrk_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	f7fc fb7c 	bl	8001078 <_sbrk>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_sbrk_r+0x1a>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_sbrk_r+0x1a>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	200101b4 	.word	0x200101b4

08004990 <__malloc_lock>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__malloc_lock+0x8>)
 8004992:	f000 b809 	b.w	80049a8 <__retarget_lock_acquire_recursive>
 8004996:	bf00      	nop
 8004998:	200101b8 	.word	0x200101b8

0800499c <__malloc_unlock>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__malloc_unlock+0x8>)
 800499e:	f000 b804 	b.w	80049aa <__retarget_lock_release_recursive>
 80049a2:	bf00      	nop
 80049a4:	200101b8 	.word	0x200101b8

080049a8 <__retarget_lock_acquire_recursive>:
 80049a8:	4770      	bx	lr

080049aa <__retarget_lock_release_recursive>:
 80049aa:	4770      	bx	lr

080049ac <_init>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	bf00      	nop
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr

080049b8 <_fini>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	bf00      	nop
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr
