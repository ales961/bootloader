
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d6c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062d0  080062d0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080062d0  080062d0  000162d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d8  080062d8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080062e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000003d4  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000468  20000468  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001313c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003803  00000000  00000000  00033200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  00036a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001038  00000000  00000000  00037be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fad  00000000  00000000  00038c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a1d  00000000  00000000  0005ebcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dad6d  00000000  00000000  000755ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150357  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bd0  00000000  00000000  001503a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005f04 	.word	0x08005f04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08005f04 	.word	0x08005f04

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <getVersions>:
uint32_t firstBootFlagAddress2 = CONFIG_2_ADDRESS + 4;
uint32_t notValidFlagAddress2 = CONFIG_2_ADDRESS + 8;
uint32_t versionAddress2 = CONFIG_2_ADDRESS + 12;

static char versionBuf[128];
char* getVersions() { //TODO
 80005c4:	b598      	push	{r3, r4, r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	if (FlashReadWord(versionAddress1) == (uint32_t) 0xFFFF &&
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <getVersions+0xb4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fc25 	bl	8000e1c <FlashReadWord>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005d8:	4293      	cmp	r3, r2
 80005da:	d10b      	bne.n	80005f4 <getVersions+0x30>
			FlashReadWord(versionAddress2) == (uint32_t) 0xFFFF) {
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <getVersions+0xb8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fc1b 	bl	8000e1c <FlashReadWord>
 80005e6:	4603      	mov	r3, r0
	if (FlashReadWord(versionAddress1) == (uint32_t) 0xFFFF &&
 80005e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d101      	bne.n	80005f4 <getVersions+0x30>
		return "No applications in flash\n";
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <getVersions+0xbc>)
 80005f2:	e03f      	b.n	8000674 <getVersions+0xb0>
	} else if (FlashReadWord(versionAddress1) == (uint32_t) 0xFFFF) {
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <getVersions+0xb4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fc0f 	bl	8000e1c <FlashReadWord>
 80005fe:	4603      	mov	r3, r0
 8000600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000604:	4293      	cmp	r3, r2
 8000606:	d10c      	bne.n	8000622 <getVersions+0x5e>
		sprintf(versionBuf, "App 1 version: none\nApp 2 version: %"PRIu32"\n", FlashReadWord(versionAddress2));
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <getVersions+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fc05 	bl	8000e1c <FlashReadWord>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	491b      	ldr	r1, [pc, #108]	; (8000684 <getVersions+0xc0>)
 8000618:	481b      	ldr	r0, [pc, #108]	; (8000688 <getVersions+0xc4>)
 800061a:	f005 f871 	bl	8005700 <siprintf>
		return versionBuf;
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <getVersions+0xc4>)
 8000620:	e028      	b.n	8000674 <getVersions+0xb0>
	} else if (FlashReadWord(versionAddress2) == (uint32_t) 0xFFFF) {
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <getVersions+0xb8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fbf8 	bl	8000e1c <FlashReadWord>
 800062c:	4603      	mov	r3, r0
 800062e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000632:	4293      	cmp	r3, r2
 8000634:	d10c      	bne.n	8000650 <getVersions+0x8c>
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: none\n", FlashReadWord(versionAddress1));
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <getVersions+0xb4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fbee 	bl	8000e1c <FlashReadWord>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4911      	ldr	r1, [pc, #68]	; (800068c <getVersions+0xc8>)
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <getVersions+0xc4>)
 8000648:	f005 f85a 	bl	8005700 <siprintf>
		return versionBuf;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <getVersions+0xc4>)
 800064e:	e011      	b.n	8000674 <getVersions+0xb0>
	} else {
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: %"PRIu32"\n",
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <getVersions+0xb4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fbe1 	bl	8000e1c <FlashReadWord>
 800065a:	4604      	mov	r4, r0
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <getVersions+0xb8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fbdb 	bl	8000e1c <FlashReadWord>
 8000666:	4603      	mov	r3, r0
 8000668:	4622      	mov	r2, r4
 800066a:	4909      	ldr	r1, [pc, #36]	; (8000690 <getVersions+0xcc>)
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <getVersions+0xc4>)
 800066e:	f005 f847 	bl	8005700 <siprintf>
				FlashReadWord(versionAddress1), FlashReadWord(versionAddress2));
		return versionBuf;
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <getVersions+0xc4>)
	}
}
 8000674:	4618      	mov	r0, r3
 8000676:	bd98      	pop	{r3, r4, r7, pc}
 8000678:	2000000c 	.word	0x2000000c
 800067c:	2000001c 	.word	0x2000001c
 8000680:	08005f1c 	.word	0x08005f1c
 8000684:	08005f38 	.word	0x08005f38
 8000688:	200000b0 	.word	0x200000b0
 800068c:	08005f60 	.word	0x08005f60
 8000690:	08005f88 	.word	0x08005f88

08000694 <getLatestApplicationAddress>:

uint32_t getLatestApplicationAddress() {
 8000694:	b598      	push	{r3, r4, r7, lr}
 8000696:	af00      	add	r7, sp, #0
	if (FlashReadWord(seqAddress1) < FlashReadWord(seqAddress2)) {
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <getLatestApplicationAddress+0x4c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fbbd 	bl	8000e1c <FlashReadWord>
 80006a2:	4604      	mov	r4, r0
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <getLatestApplicationAddress+0x50>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fbb7 	bl	8000e1c <FlashReadWord>
 80006ae:	4603      	mov	r3, r0
 80006b0:	429c      	cmp	r4, r3
 80006b2:	d201      	bcs.n	80006b8 <getLatestApplicationAddress+0x24>
		return APP_1_ADDRESS;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <getLatestApplicationAddress+0x54>)
 80006b6:	e010      	b.n	80006da <getLatestApplicationAddress+0x46>
	} else if (FlashReadWord(seqAddress2) < FlashReadWord(seqAddress1)) {
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <getLatestApplicationAddress+0x50>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fbad 	bl	8000e1c <FlashReadWord>
 80006c2:	4604      	mov	r4, r0
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <getLatestApplicationAddress+0x4c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fba7 	bl	8000e1c <FlashReadWord>
 80006ce:	4603      	mov	r3, r0
 80006d0:	429c      	cmp	r4, r3
 80006d2:	d201      	bcs.n	80006d8 <getLatestApplicationAddress+0x44>
		return APP_2_ADDRESS;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <getLatestApplicationAddress+0x58>)
 80006d6:	e000      	b.n	80006da <getLatestApplicationAddress+0x46>
	} else {
		return 0;
 80006d8:	2300      	movs	r3, #0
	}
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd98      	pop	{r3, r4, r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000010 	.word	0x20000010
 80006e8:	0800c000 	.word	0x0800c000
 80006ec:	08104000 	.word	0x08104000

080006f0 <updateConfig>:

void updateConfig() {
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 80006f6:	f7ff ffcd 	bl	8000694 <getLatestApplicationAddress>
 80006fa:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_1_ADDRESS) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a21      	ldr	r2, [pc, #132]	; (8000784 <updateConfig+0x94>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d11d      	bne.n	8000740 <updateConfig+0x50>
		EraseSector(CONFIG_2_SECTOR);
 8000704:	200c      	movs	r0, #12
 8000706:	f000 fb95 	bl	8000e34 <EraseSector>
		FlashWriteWord(seqAddress2, FlashReadWord(seqAddress1) - 1);
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <updateConfig+0x98>)
 800070c:	681c      	ldr	r4, [r3, #0]
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <updateConfig+0x9c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fb82 	bl	8000e1c <FlashReadWord>
 8000718:	4603      	mov	r3, r0
 800071a:	3b01      	subs	r3, #1
 800071c:	4619      	mov	r1, r3
 800071e:	4620      	mov	r0, r4
 8000720:	f000 fb65 	bl	8000dee <FlashWriteWord>
		//FlashWriteWord(firstBootFlagAddress2, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress2, 0xFFFF); // FFFF - not valid (default)
		FlashWriteWord(versionAddress2, FlashReadWord(versionAddress1) + 1);
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <updateConfig+0xa0>)
 8000726:	681c      	ldr	r4, [r3, #0]
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <updateConfig+0xa4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fb75 	bl	8000e1c <FlashReadWord>
 8000732:	4603      	mov	r3, r0
 8000734:	3301      	adds	r3, #1
 8000736:	4619      	mov	r1, r3
 8000738:	4620      	mov	r0, r4
 800073a:	f000 fb58 	bl	8000dee <FlashWriteWord>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
		//FlashWriteWord(firstBootFlagAddress1, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress1, 0xFFFF); // FFFF - not valid (default)
		FlashWriteWord(versionAddress1, FlashReadWord(versionAddress2) + 1);
	}
}
 800073e:	e01c      	b.n	800077a <updateConfig+0x8a>
		EraseSector(CONFIG_1_SECTOR);
 8000740:	2002      	movs	r0, #2
 8000742:	f000 fb77 	bl	8000e34 <EraseSector>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <updateConfig+0x9c>)
 8000748:	681c      	ldr	r4, [r3, #0]
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <updateConfig+0x98>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fb64 	bl	8000e1c <FlashReadWord>
 8000754:	4603      	mov	r3, r0
 8000756:	3b01      	subs	r3, #1
 8000758:	4619      	mov	r1, r3
 800075a:	4620      	mov	r0, r4
 800075c:	f000 fb47 	bl	8000dee <FlashWriteWord>
		FlashWriteWord(versionAddress1, FlashReadWord(versionAddress2) + 1);
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <updateConfig+0xa4>)
 8000762:	681c      	ldr	r4, [r3, #0]
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <updateConfig+0xa0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fb57 	bl	8000e1c <FlashReadWord>
 800076e:	4603      	mov	r3, r0
 8000770:	3301      	adds	r3, #1
 8000772:	4619      	mov	r1, r3
 8000774:	4620      	mov	r0, r4
 8000776:	f000 fb3a 	bl	8000dee <FlashWriteWord>
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	bf00      	nop
 8000784:	0800c000 	.word	0x0800c000
 8000788:	20000010 	.word	0x20000010
 800078c:	20000000 	.word	0x20000000
 8000790:	2000001c 	.word	0x2000001c
 8000794:	2000000c 	.word	0x2000000c

08000798 <rollbackConfig>:

void rollbackConfig() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 800079e:	f7ff ff79 	bl	8000694 <getLatestApplicationAddress>
 80007a2:	6078      	str	r0, [r7, #4]
		if (latestAppAddress == APP_1_ADDRESS) EraseSector(CONFIG_1_SECTOR);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a09      	ldr	r2, [pc, #36]	; (80007cc <rollbackConfig+0x34>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d103      	bne.n	80007b4 <rollbackConfig+0x1c>
 80007ac:	2002      	movs	r0, #2
 80007ae:	f000 fb41 	bl	8000e34 <EraseSector>
		else if (latestAppAddress == APP_2_ADDRESS)	EraseSector(CONFIG_2_SECTOR);
}
 80007b2:	e006      	b.n	80007c2 <rollbackConfig+0x2a>
		else if (latestAppAddress == APP_2_ADDRESS)	EraseSector(CONFIG_2_SECTOR);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <rollbackConfig+0x38>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d102      	bne.n	80007c2 <rollbackConfig+0x2a>
 80007bc:	200c      	movs	r0, #12
 80007be:	f000 fb39 	bl	8000e34 <EraseSector>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	0800c000 	.word	0x0800c000
 80007d0:	08104000 	.word	0x08104000

080007d4 <validateApplications>:

void validateApplications() {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	if (FlashReadWord(notValidFlagAddress1) == (uint32_t) 0xFFFF &&
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <validateApplications+0x5c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fb1d 	bl	8000e1c <FlashReadWord>
 80007e2:	4603      	mov	r3, r0
 80007e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d10a      	bne.n	8000802 <validateApplications+0x2e>
			FlashReadWord(firstBootFlagAddress1) == 0) EraseSector(CONFIG_1_SECTOR);
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <validateApplications+0x60>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fb13 	bl	8000e1c <FlashReadWord>
 80007f6:	4603      	mov	r3, r0
	if (FlashReadWord(notValidFlagAddress1) == (uint32_t) 0xFFFF &&
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <validateApplications+0x2e>
			FlashReadWord(firstBootFlagAddress1) == 0) EraseSector(CONFIG_1_SECTOR);
 80007fc:	2002      	movs	r0, #2
 80007fe:	f000 fb19 	bl	8000e34 <EraseSector>
	if (FlashReadWord(notValidFlagAddress2) == (uint32_t) 0xFFFF &&
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <validateApplications+0x64>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fb08 	bl	8000e1c <FlashReadWord>
 800080c:	4603      	mov	r3, r0
 800080e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000812:	4293      	cmp	r3, r2
 8000814:	d10a      	bne.n	800082c <validateApplications+0x58>
			FlashReadWord(firstBootFlagAddress2) == 0) EraseSector(CONFIG_2_SECTOR);
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <validateApplications+0x68>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fafe 	bl	8000e1c <FlashReadWord>
 8000820:	4603      	mov	r3, r0
	if (FlashReadWord(notValidFlagAddress2) == (uint32_t) 0xFFFF &&
 8000822:	2b00      	cmp	r3, #0
 8000824:	d102      	bne.n	800082c <validateApplications+0x58>
			FlashReadWord(firstBootFlagAddress2) == 0) EraseSector(CONFIG_2_SECTOR);
 8000826:	200c      	movs	r0, #12
 8000828:	f000 fb04 	bl	8000e34 <EraseSector>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000008 	.word	0x20000008
 8000834:	20000004 	.word	0x20000004
 8000838:	20000018 	.word	0x20000018
 800083c:	20000014 	.word	0x20000014

08000840 <jumpToApp>:

void jumpToApp() {
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
	  uint32_t address = getLatestApplicationAddress();
 8000846:	f7ff ff25 	bl	8000694 <getLatestApplicationAddress>
 800084a:	6178      	str	r0, [r7, #20]
	  if (address == APP_1_ADDRESS) FlashWriteWord(firstBootFlagAddress1, 0);
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	4a30      	ldr	r2, [pc, #192]	; (8000910 <jumpToApp+0xd0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d106      	bne.n	8000862 <jumpToApp+0x22>
 8000854:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <jumpToApp+0xd4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fac7 	bl	8000dee <FlashWriteWord>
 8000860:	e009      	b.n	8000876 <jumpToApp+0x36>
	  else if (address == APP_2_ADDRESS) FlashWriteWord(firstBootFlagAddress2, 0);
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	4a2c      	ldr	r2, [pc, #176]	; (8000918 <jumpToApp+0xd8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d14e      	bne.n	8000908 <jumpToApp+0xc8>
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <jumpToApp+0xdc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fabc 	bl	8000dee <FlashWriteWord>
	  else return;

	  void(*app_reset_handler)();

	  //shut down any tasks remaining
	  HAL_TIM_Base_Stop_IT(&htim6);
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <jumpToApp+0xe0>)
 8000878:	f003 faea 	bl	8003e50 <HAL_TIM_Base_Stop_IT>
	  uartDisableInterruption();
 800087c:	f001 fa52 	bl	8001d24 <uartDisableInterruption>

	  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <jumpToApp+0xe4>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <jumpToApp+0xe4>)
 8000886:	f023 0304 	bic.w	r3, r3, #4
 800088a:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <jumpToApp+0xe4>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4a24      	ldr	r2, [pc, #144]	; (8000924 <jumpToApp+0xe4>)
 8000892:	f023 0308 	bic.w	r3, r3, #8
 8000896:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <jumpToApp+0xe4>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <jumpToApp+0xe4>)
 800089e:	f023 0302 	bic.w	r3, r3, #2
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <jumpToApp+0xe4>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <jumpToApp+0xe4>)
 80008aa:	f023 0301 	bic.w	r3, r3, #1
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 80008b0:	f003 f916 	bl	8003ae0 <HAL_RCC_DeInit>
	  HAL_DeInit();// to disable all the peripherals
 80008b4:	f001 fd2e 	bl	8002314 <HAL_DeInit>

	  SysTick->CTRL = 0;//to turn off the systick
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <jumpToApp+0xe8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <jumpToApp+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <jumpToApp+0xe8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	2301      	movs	r3, #1
 80008cc:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	f383 8810 	msr	PRIMASK, r3
}
 80008d4:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80008d6:	b672      	cpsid	i
}
 80008d8:	bf00      	nop
	  //disable interrupts
	  __set_PRIMASK(1);
	  __disable_irq();

	  //__DMB(); // Data Memory Barrier to ensure write to memory is completed
	  SCB->VTOR = address;//change this
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <jumpToApp+0xec>)
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	6093      	str	r3, [r2, #8]
      //__DSB(); // Data Synchronization Barrier to ensure all subsequence instructions use the new configuation

	  //configure the MSP by reading the value from the base address
	  uint32_t msp_value = *(__IO uint32_t*) address;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f383 8808 	msr	MSP, r3
}
 80008f0:	bf00      	nop

	  __set_MSP(msp_value);

	  uint32_t resethandler_address = *(__IO uint32_t*) (address + 4);
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3304      	adds	r3, #4
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]

	  //app_reset_handler = (void*)resethandler_address;
	  app_reset_handler = (void (*)(void)) (resethandler_address);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80008fe:	b662      	cpsie	i
}
 8000900:	bf00      	nop

	  //jump to reset handler of the user app.
	  //NVIC_SystemReset(); //?????
	  __enable_irq();
	  app_reset_handler();
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	4798      	blx	r3
 8000906:	e000      	b.n	800090a <jumpToApp+0xca>
	  else return;
 8000908:	bf00      	nop
}
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	0800c000 	.word	0x0800c000
 8000914:	20000004 	.word	0x20000004
 8000918:	08104000 	.word	0x08104000
 800091c:	20000014 	.word	0x20000014
 8000920:	20000210 	.word	0x20000210
 8000924:	40023800 	.word	0x40023800
 8000928:	e000e010 	.word	0xe000e010
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <eraseLogicalBank>:

void eraseLogicalBank() {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 8000936:	f7ff fead 	bl	8000694 <getLatestApplicationAddress>
 800093a:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_2_ADDRESS) eraseLogicalBank2();
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a06      	ldr	r2, [pc, #24]	; (8000958 <eraseLogicalBank+0x28>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d102      	bne.n	800094a <eraseLogicalBank+0x1a>
 8000944:	f000 f829 	bl	800099a <eraseLogicalBank2>
	else eraseLogicalBank1();
}
 8000948:	e001      	b.n	800094e <eraseLogicalBank+0x1e>
	else eraseLogicalBank1();
 800094a:	f000 f807 	bl	800095c <eraseLogicalBank1>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	08104000 	.word	0x08104000

0800095c <eraseLogicalBank1>:

void eraseLogicalBank1() {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	EraseSector(FLASH_SECTOR_3);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 fa67 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_4);
 8000966:	2004      	movs	r0, #4
 8000968:	f000 fa64 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_5);
 800096c:	2005      	movs	r0, #5
 800096e:	f000 fa61 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_6);
 8000972:	2006      	movs	r0, #6
 8000974:	f000 fa5e 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_7);
 8000978:	2007      	movs	r0, #7
 800097a:	f000 fa5b 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_8);
 800097e:	2008      	movs	r0, #8
 8000980:	f000 fa58 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_9);
 8000984:	2009      	movs	r0, #9
 8000986:	f000 fa55 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_10);
 800098a:	200a      	movs	r0, #10
 800098c:	f000 fa52 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_11);
 8000990:	200b      	movs	r0, #11
 8000992:	f000 fa4f 	bl	8000e34 <EraseSector>
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}

0800099a <eraseLogicalBank2>:

void eraseLogicalBank2() {
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
	EraseSector(FLASH_SECTOR_13);
 800099e:	200d      	movs	r0, #13
 80009a0:	f000 fa48 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_14);
 80009a4:	200e      	movs	r0, #14
 80009a6:	f000 fa45 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_15);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 fa42 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_16);
 80009b0:	2010      	movs	r0, #16
 80009b2:	f000 fa3f 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_17);
 80009b6:	2011      	movs	r0, #17
 80009b8:	f000 fa3c 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_18);
 80009bc:	2012      	movs	r0, #18
 80009be:	f000 fa39 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_19);
 80009c2:	2013      	movs	r0, #19
 80009c4:	f000 fa36 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_20);
 80009c8:	2014      	movs	r0, #20
 80009ca:	f000 fa33 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_21);
 80009ce:	2015      	movs	r0, #21
 80009d0:	f000 fa30 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_22);
 80009d4:	2016      	movs	r0, #22
 80009d6:	f000 fa2d 	bl	8000e34 <EraseSector>
	EraseSector(FLASH_SECTOR_23);
 80009da:	2017      	movs	r0, #23
 80009dc:	f000 fa2a 	bl	8000e34 <EraseSector>
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 80009ee:	200c      	movs	r0, #12
 80009f0:	f004 fd86 	bl	8005500 <malloc>
 80009f4:	4603      	mov	r3, r0
 80009f6:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 fd80 	bl	8005500 <malloc>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	88fa      	ldrh	r2, [r7, #6]
 8000a0c:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f886 	bl	8000b20 <bufferClear>
    return buffer;
 8000a14:	68fb      	ldr	r3, [r7, #12]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	460b      	mov	r3, r1
 8000a28:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	889a      	ldrh	r2, [r3, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	88db      	ldrh	r3, [r3, #6]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d21f      	bcs.n	8000a76 <bufferPush+0x58>
        disableInt();
 8000a36:	f000 f8e7 	bl	8000c08 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	8812      	ldrh	r2, [r2, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	78fa      	ldrb	r2, [r7, #3]
 8000a46:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	88d2      	ldrh	r2, [r2, #6]
 8000a52:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a56:	fb01 f202 	mul.w	r2, r1, r2
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	3301      	adds	r3, #1
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	809a      	strh	r2, [r3, #4]

        enableInt();
 8000a6e:	f000 f8df 	bl	8000c30 <enableInt>
        return 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <bufferPush+0x5a>
    } else
        return 0;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	82fb      	strh	r3, [r7, #22]
 8000a92:	e00f      	b.n	8000ab4 <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 8000a94:	8afb      	ldrh	r3, [r7, #22]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff ffbd 	bl	8000a1e <bufferPush>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <bufferPushValues+0x2e>
            return pushed;
 8000aaa:	8afb      	ldrh	r3, [r7, #22]
 8000aac:	e007      	b.n	8000abe <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8000aae:	8afb      	ldrh	r3, [r7, #22]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	82fb      	strh	r3, [r7, #22]
 8000ab4:	8afa      	ldrh	r2, [r7, #22]
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d3eb      	bcc.n	8000a94 <bufferPushValues+0x14>
    }
    return pushed;
 8000abc:	8afb      	ldrh	r3, [r7, #22]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	889b      	ldrh	r3, [r3, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <bufferPop+0x14>
        return 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e01e      	b.n	8000b18 <bufferPop+0x52>

    disableInt();
 8000ada:	f000 f895 	bl	8000c08 <disableInt>

    buffer->size--;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	889b      	ldrh	r3, [r3, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	8852      	ldrh	r2, [r2, #2]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	885b      	ldrh	r3, [r3, #2]
 8000afc:	3301      	adds	r3, #1
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	88d2      	ldrh	r2, [r2, #6]
 8000b02:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b06:	fb01 f202 	mul.w	r2, r1, r2
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	805a      	strh	r2, [r3, #2]

    enableInt();
 8000b12:	f000 f88d 	bl	8000c30 <enableInt>

    return value;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <bufferClear>:

uint8_t bufferPeek(const Buffer * const buffer) {
    return buffer->data[buffer->ptrOut];
}

void bufferClear(Buffer * const buffer) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    disableInt();
 8000b28:	f000 f86e 	bl	8000c08 <disableInt>
    buffer->size = 0;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	805a      	strh	r2, [r3, #2]
    enableInt();
 8000b3e:	f000 f877 	bl	8000c30 <enableInt>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	889b      	ldrh	r3, [r3, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	4613      	mov	r3, r2
 8000b78:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff ffe5 	bl	8000b4a <bufferHasValues>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <bufferPopValues+0x1e>
        return 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e01d      	b.n	8000bc6 <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f000 f81f 	bl	8000bce <bufferGetSize>
 8000b90:	4603      	mov	r3, r0
 8000b92:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 8000b94:	8afa      	ldrh	r2, [r7, #22]
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d901      	bls.n	8000ba0 <bufferPopValues+0x34>
        popSize = bufSize;
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	82bb      	strh	r3, [r7, #20]
 8000ba4:	e00a      	b.n	8000bbc <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 8000ba6:	8abb      	ldrh	r3, [r7, #20]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	18d4      	adds	r4, r2, r3
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f7ff ff8a 	bl	8000ac6 <bufferPop>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 8000bb6:	8abb      	ldrh	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	82bb      	strh	r3, [r7, #20]
 8000bbc:	8aba      	ldrh	r2, [r7, #20]
 8000bbe:	8afb      	ldrh	r3, [r7, #22]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d3f0      	bcc.n	8000ba6 <bufferPopValues+0x3a>
    return popSize;
 8000bc4:	8afb      	ldrh	r3, [r7, #22]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}

08000bce <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
    return buffer->size;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	889b      	ldrh	r3, [r3, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	88da      	ldrh	r2, [r3, #6]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	889b      	ldrh	r3, [r3, #4]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	b29b      	uxth	r3, r3
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <disableInt>:
		bufferPush(destination, var);
	}
	return 1;
}

static void disableInt() {
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8000c12:	607b      	str	r3, [r7, #4]
  return(result);
 8000c14:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <disableInt+0x24>)
 8000c18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1a:	b672      	cpsid	i
}
 8000c1c:	bf00      	nop
    __disable_irq();
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000130 	.word	0x20000130

08000c30 <enableInt>:

static void enableInt() {
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <enableInt+0x20>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f383 8810 	msr	PRIMASK, r3
}
 8000c42:	bf00      	nop
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	20000130 	.word	0x20000130

08000c54 <commandCreate>:
};

static uint8_t parseInt(const char *str, uint32_t *result);
static uint8_t parseOnOffStatus(const char *str, OnOffStatus *result);

Command * commandCreate(const char * const name, const CommandAction action, const CommandArgument argType) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	71fb      	strb	r3, [r7, #7]
    size_t nameLen = strlen(name);
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f7ff face 	bl	8000204 <strlen>
 8000c68:	61f8      	str	r0, [r7, #28]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 fc46 	bl	8005500 <malloc>
 8000c74:	4603      	mov	r3, r0
 8000c76:	61bb      	str	r3, [r7, #24]
    strcpy(nameCopy, name);
 8000c78:	68f9      	ldr	r1, [r7, #12]
 8000c7a:	69b8      	ldr	r0, [r7, #24]
 8000c7c:	f004 fd60 	bl	8005740 <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 8000c80:	200c      	movs	r0, #12
 8000c82:	f004 fc3d 	bl	8005500 <malloc>
 8000c86:	4603      	mov	r3, r0
 8000c88:	617b      	str	r3, [r7, #20]
    command->name = nameCopy;
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	601a      	str	r2, [r3, #0]
    command->action = action;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	605a      	str	r2, [r3, #4]
    command->argType = argType;
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	721a      	strb	r2, [r3, #8]
    return command;
 8000c9c:	697b      	ldr	r3, [r7, #20]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <commandExecute>:

const char * commandExecute(const Command * const command, const char * const argument) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
    if (command == NULL || command->action == NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <commandExecute+0x18>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <commandExecute+0x1c>
        return NULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e037      	b.n	8000d34 <commandExecute+0x8c>
    switch (command->argType) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7a1b      	ldrb	r3, [r3, #8]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d02c      	beq.n	8000d26 <commandExecute+0x7e>
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	dc30      	bgt.n	8000d32 <commandExecute+0x8a>
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <commandExecute+0x32>
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d013      	beq.n	8000d00 <commandExecute+0x58>
 8000cd8:	e02b      	b.n	8000d32 <commandExecute+0x8a>
        case INT:
        {
            uint32_t intArg;
            if (!parseInt(argument, &intArg))
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	6838      	ldr	r0, [r7, #0]
 8000ce2:	f000 f831 	bl	8000d48 <parseInt>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <commandExecute+0x48>
                return "The argument must be integer\n";
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <commandExecute+0x94>)
 8000cee:	e021      	b.n	8000d34 <commandExecute+0x8c>
            return (*command->action)(&intArg);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f107 020c 	add.w	r2, r7, #12
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4798      	blx	r3
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	e019      	b.n	8000d34 <commandExecute+0x8c>
        }
        case ON_OFF:
        {
            OnOffStatus statusArg;
            if (!parseOnOffStatus(argument, &statusArg))
 8000d00:	f107 030b 	add.w	r3, r7, #11
 8000d04:	4619      	mov	r1, r3
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f000 f83a 	bl	8000d80 <parseOnOffStatus>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <commandExecute+0x6e>
                return "The argument must be 'on' or 'off'\n";
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <commandExecute+0x98>)
 8000d14:	e00e      	b.n	8000d34 <commandExecute+0x8c>
            return (*command->action)(&statusArg);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f107 020b 	add.w	r2, r7, #11
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4798      	blx	r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	e006      	b.n	8000d34 <commandExecute+0x8c>
        }
        case NONE:
            return (*command->action)(NULL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	4798      	blx	r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	e000      	b.n	8000d34 <commandExecute+0x8c>
        default:
            return "Unknown argument type\n";
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <commandExecute+0x9c>)
    }
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	08005fb0 	.word	0x08005fb0
 8000d40:	08005fd0 	.word	0x08005fd0
 8000d44:	08005ff4 	.word	0x08005ff4

08000d48 <parseInt>:

static uint8_t parseInt(const char * const str, uint32_t * const result) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
    char *endPtr = NULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
    *result = strtoul(str, &(endPtr), 10);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	220a      	movs	r2, #10
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f004 fd68 	bl	8005834 <strtoul>
 8000d64:	4602      	mov	r2, r0
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	601a      	str	r2, [r3, #0]
    if (endPtr == str) {
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d101      	bne.n	8000d76 <parseInt+0x2e>
        return 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <parseInt+0x30>
    }
    return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <parseOnOffStatus>:

static uint8_t parseOnOffStatus(const char *str, OnOffStatus * const result) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
    if (strcmp(str, "on") == 0) {
 8000d8a:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <parseOnOffStatus+0x44>)
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fa2f 	bl	80001f0 <strcmp>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d104      	bne.n	8000da2 <parseOnOffStatus+0x22>
        *result = ON;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
        return 1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00c      	b.n	8000dbc <parseOnOffStatus+0x3c>
    } else if (strcmp(str, "off") == 0) {
 8000da2:	4909      	ldr	r1, [pc, #36]	; (8000dc8 <parseOnOffStatus+0x48>)
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fa23 	bl	80001f0 <strcmp>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d104      	bne.n	8000dba <parseOnOffStatus+0x3a>
        *result = OFF;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
        return 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <parseOnOffStatus+0x3c>
    }
    return 0;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	0800600c 	.word	0x0800600c
 8000dc8:	08006010 	.word	0x08006010

08000dcc <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <commandGetName+0x12>
        return NULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e001      	b.n	8000de2 <commandGetName+0x16>
    return command->name;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <FlashWriteWord>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
	HAL_FLASH_Lock();
}

void FlashWriteWord(uint32_t Address, uint32_t Data) {
 8000dee:	b5b0      	push	{r4, r5, r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8000df8:	f001 fd6a 	bl	80028d0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	461c      	mov	r4, r3
 8000e02:	4615      	mov	r5, r2
 8000e04:	4622      	mov	r2, r4
 8000e06:	462b      	mov	r3, r5
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f001 fd0c 	bl	8002828 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000e10:	f001 fd80 	bl	8002914 <HAL_FLASH_Lock>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}

08000e1c <FlashReadWord>:

uint8_t FlashReadByte(uint32_t Address) {
    return (*(__IO uint8_t*)Address);
}

uint32_t FlashReadWord(uint32_t Address) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    return (*(__IO uint32_t*)Address);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <EraseSector>:

void EraseSector(uint32_t Sector) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000e3c:	f001 fd48 	bl	80028d0 <HAL_FLASH_Unlock>
	uint32_t SectorError;
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <EraseSector+0x3c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Sector = Sector;
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <EraseSector+0x3c>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = 1 ;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <EraseSector+0x3c>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	60da      	str	r2, [r3, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <EraseSector+0x3c>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <EraseSector+0x3c>)
 8000e60:	f001 fea8 	bl	8002bb4 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000e64:	f001 fd56 	bl	8002914 <HAL_FLASH_Lock>
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000134 	.word	0x20000134

08000e74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_GPIO_Init+0x68>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <MX_GPIO_Init+0x68>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_GPIO_Init+0x68>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_GPIO_Init+0x68>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <MX_GPIO_Init+0x68>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_GPIO_Init+0x68>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_GPIO_Init+0x68>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <MX_GPIO_Init+0x68>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_GPIO_Init+0x68>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800

08000ee0 <asciiToHex>:
uint16_t address_data;//младшие 16 бит адреса
uint32_t program_data;//слово которое пишется во флеш
uint8_t calculation_check_sum = 0;//чек-сумма
uint8_t tempBuf[8];

void asciiToHex(uint8_t* buff, uint8_t count) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i=0; i<count;i++) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e023      	b.n	8000f3a <asciiToHex+0x5a>
		if(buff[i] <= '9' && buff[i] >= '0' ) {
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b39      	cmp	r3, #57	; 0x39
 8000efc:	d810      	bhi.n	8000f20 <asciiToHex+0x40>
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b2f      	cmp	r3, #47	; 0x2f
 8000f08:	d90a      	bls.n	8000f20 <asciiToHex+0x40>
			buff[i] -= 0x30;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	440b      	add	r3, r1
 8000f18:	3a30      	subs	r2, #48	; 0x30
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e009      	b.n	8000f34 <asciiToHex+0x54>
		}
		else {
			buff[i] = buff[i] - 0x41 + 10;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	440b      	add	r3, r1
 8000f2e:	3a37      	subs	r2, #55	; 0x37
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
	for(i=0; i<count;i++) {
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3301      	adds	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3d7      	bcc.n	8000ef2 <asciiToHex+0x12>
		}
	}
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <fillBuffer>:

void fillBuffer(uint8_t* destination, uint8_t* source, uint16_t* startPtr, uint16_t count) {
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	807b      	strh	r3, [r7, #2]
	for (int16_t i = 0; i < count; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	82fb      	strh	r3, [r7, #22]
 8000f62:	e014      	b.n	8000f8e <fillBuffer+0x3e>
		destination[i] = source[*startPtr + i];
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f6e:	4413      	add	r3, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	441a      	add	r2, r3
 8000f76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f7a:	68f9      	ldr	r1, [r7, #12]
 8000f7c:	440b      	add	r3, r1
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	701a      	strb	r2, [r3, #0]
	for (int16_t i = 0; i < count; i++) {
 8000f82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	82fb      	strh	r3, [r7, #22]
 8000f8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbe5      	blt.n	8000f64 <fillBuffer+0x14>
	}
	*startPtr += count;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	881a      	ldrh	r2, [r3, #0]
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	801a      	strh	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <flashHex>:

uint8_t flashHex(uint8_t* flashBuf, uint16_t size) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
	uint16_t ptr = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	81bb      	strh	r3, [r7, #12]
	while (ptr < size) {
 8000fc4:	e17b      	b.n	80012be <flashHex+0x30a>
		if(flashBuf[ptr] == ':') {
 8000fc6:	89bb      	ldrh	r3, [r7, #12]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b3a      	cmp	r3, #58	; 0x3a
 8000fd2:	f040 8170 	bne.w	80012b6 <flashHex+0x302>
			ptr++;
 8000fd6:	89bb      	ldrh	r3, [r7, #12]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	81bb      	strh	r3, [r7, #12]
			fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	488b      	ldr	r0, [pc, #556]	; (8001214 <flashHex+0x260>)
 8000fe8:	f7ff ffb2 	bl	8000f50 <fillBuffer>
			asciiToHex(tempBuf, 8);
 8000fec:	2108      	movs	r1, #8
 8000fee:	4889      	ldr	r0, [pc, #548]	; (8001214 <flashHex+0x260>)
 8000ff0:	f7ff ff76 	bl	8000ee0 <asciiToHex>

			size_data = 2*(tempBuf[1] + 16*tempBuf[0]);//находим размер данных
 8000ff4:	4b87      	ldr	r3, [pc, #540]	; (8001214 <flashHex+0x260>)
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b86      	ldr	r3, [pc, #536]	; (8001214 <flashHex+0x260>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	4413      	add	r3, r2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b83      	ldr	r3, [pc, #524]	; (8001218 <flashHex+0x264>)
 800100a:	701a      	strb	r2, [r3, #0]
			address_data = tempBuf[5] + 16*tempBuf[4] + 256*tempBuf[3] + 4096*tempBuf[2];//адрес
 800100c:	4b81      	ldr	r3, [pc, #516]	; (8001214 <flashHex+0x260>)
 800100e:	795b      	ldrb	r3, [r3, #5]
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b80      	ldr	r3, [pc, #512]	; (8001214 <flashHex+0x260>)
 8001014:	78db      	ldrb	r3, [r3, #3]
 8001016:	b299      	uxth	r1, r3
 8001018:	4b7e      	ldr	r3, [pc, #504]	; (8001214 <flashHex+0x260>)
 800101a:	789b      	ldrb	r3, [r3, #2]
 800101c:	b29b      	uxth	r3, r3
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	b29b      	uxth	r3, r3
 8001022:	440b      	add	r3, r1
 8001024:	b29b      	uxth	r3, r3
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	b299      	uxth	r1, r3
 800102a:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <flashHex+0x260>)
 800102c:	791b      	ldrb	r3, [r3, #4]
 800102e:	b29b      	uxth	r3, r3
 8001030:	440b      	add	r3, r1
 8001032:	b29b      	uxth	r3, r3
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	b29b      	uxth	r3, r3
 8001038:	4413      	add	r3, r2
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b77      	ldr	r3, [pc, #476]	; (800121c <flashHex+0x268>)
 800103e:	801a      	strh	r2, [r3, #0]
			type_data = tempBuf[7] + 16*tempBuf[6];//и тип
 8001040:	4b74      	ldr	r3, [pc, #464]	; (8001214 <flashHex+0x260>)
 8001042:	79da      	ldrb	r2, [r3, #7]
 8001044:	4b73      	ldr	r3, [pc, #460]	; (8001214 <flashHex+0x260>)
 8001046:	799b      	ldrb	r3, [r3, #6]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4413      	add	r3, r2
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b73      	ldr	r3, [pc, #460]	; (8001220 <flashHex+0x26c>)
 8001052:	701a      	strb	r2, [r3, #0]

			calculation_check_sum = size_data/2 + (uint8_t)address_data + (uint8_t)(address_data>>8) + type_data;//считаем чек сумму
 8001054:	4b70      	ldr	r3, [pc, #448]	; (8001218 <flashHex+0x264>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b6f      	ldr	r3, [pc, #444]	; (800121c <flashHex+0x268>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4413      	add	r3, r2
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b6d      	ldr	r3, [pc, #436]	; (800121c <flashHex+0x268>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	b29b      	uxth	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b6a      	ldr	r3, [pc, #424]	; (8001220 <flashHex+0x26c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4413      	add	r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b69      	ldr	r3, [pc, #420]	; (8001224 <flashHex+0x270>)
 800107e:	701a      	strb	r2, [r3, #0]

			if(type_data == 0x00) {
 8001080:	4b67      	ldr	r3, [pc, #412]	; (8001220 <flashHex+0x26c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	f040 8098 	bne.w	80011ba <flashHex+0x206>
				while(size_data > 0) {
 800108a:	e06b      	b.n	8001164 <flashHex+0x1b0>
					fillBuffer(tempBuf, flashBuf, &ptr, 8);
 800108c:	f107 020c 	add.w	r2, r7, #12
 8001090:	2308      	movs	r3, #8
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	485f      	ldr	r0, [pc, #380]	; (8001214 <flashHex+0x260>)
 8001096:	f7ff ff5b 	bl	8000f50 <fillBuffer>
					asciiToHex(tempBuf, 8);
 800109a:	2108      	movs	r1, #8
 800109c:	485d      	ldr	r0, [pc, #372]	; (8001214 <flashHex+0x260>)
 800109e:	f7ff ff1f 	bl	8000ee0 <asciiToHex>


					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e024      	b.n	80010f2 <flashHex+0x13e>
						tempBuf[i] <<= 4;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4a5a      	ldr	r2, [pc, #360]	; (8001214 <flashHex+0x260>)
 80010ac:	5cd2      	ldrb	r2, [r2, r3]
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d1      	uxtb	r1, r2
 80010b4:	4a57      	ldr	r2, [pc, #348]	; (8001214 <flashHex+0x260>)
 80010b6:	54d1      	strb	r1, [r2, r3]
						tempBuf[i] = tempBuf[i] | tempBuf[i+1];
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4a56      	ldr	r2, [pc, #344]	; (8001214 <flashHex+0x260>)
 80010bc:	5cd1      	ldrb	r1, [r2, r3]
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a54      	ldr	r2, [pc, #336]	; (8001214 <flashHex+0x260>)
 80010c4:	5cd2      	ldrb	r2, [r2, r3]
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	b2d1      	uxtb	r1, r2
 80010cc:	4a51      	ldr	r2, [pc, #324]	; (8001214 <flashHex+0x260>)
 80010ce:	54d1      	strb	r1, [r2, r3]
						program_data |= tempBuf[i] <<(i*4);
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	4a50      	ldr	r2, [pc, #320]	; (8001214 <flashHex+0x260>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	461a      	mov	r2, r3
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <flashHex+0x274>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <flashHex+0x274>)
 80010ea:	6013      	str	r3, [r2, #0]
					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	3302      	adds	r3, #2
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	d9d7      	bls.n	80010a8 <flashHex+0xf4>
					}

					FlashWriteWord(extented_linear_adress + address_data, program_data);
 80010f8:	4b48      	ldr	r3, [pc, #288]	; (800121c <flashHex+0x268>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b4b      	ldr	r3, [pc, #300]	; (800122c <flashHex+0x278>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a48      	ldr	r2, [pc, #288]	; (8001228 <flashHex+0x274>)
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe6f 	bl	8000dee <FlashWriteWord>
					calculation_check_sum += (uint8_t)program_data + (uint8_t)(program_data>>8) + (uint8_t)(program_data>>16) + (uint8_t)(program_data>>24);
 8001110:	4b45      	ldr	r3, [pc, #276]	; (8001228 <flashHex+0x274>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b44      	ldr	r3, [pc, #272]	; (8001228 <flashHex+0x274>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <flashHex+0x274>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	0c1b      	lsrs	r3, r3, #16
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4413      	add	r3, r2
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <flashHex+0x274>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	0e1b      	lsrs	r3, r3, #24
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <flashHex+0x270>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <flashHex+0x270>)
 8001144:	701a      	strb	r2, [r3, #0]
					size_data -= 8;
 8001146:	4b34      	ldr	r3, [pc, #208]	; (8001218 <flashHex+0x264>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	3b08      	subs	r3, #8
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <flashHex+0x264>)
 8001150:	701a      	strb	r2, [r3, #0]
					address_data += 4;
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <flashHex+0x268>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	3304      	adds	r3, #4
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b30      	ldr	r3, [pc, #192]	; (800121c <flashHex+0x268>)
 800115c:	801a      	strh	r2, [r3, #0]
					program_data = 0;
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <flashHex+0x274>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
				while(size_data > 0) {
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <flashHex+0x264>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d18f      	bne.n	800108c <flashHex+0xd8>
				}
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <flashHex+0x270>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	425b      	negs	r3, r3
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <flashHex+0x270>)
 8001176:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 8001178:	f107 020c 	add.w	r2, r7, #12
 800117c:	2302      	movs	r3, #2
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4824      	ldr	r0, [pc, #144]	; (8001214 <flashHex+0x260>)
 8001182:	f7ff fee5 	bl	8000f50 <fillBuffer>
				asciiToHex(tempBuf, 2);
 8001186:	2102      	movs	r1, #2
 8001188:	4822      	ldr	r0, [pc, #136]	; (8001214 <flashHex+0x260>)
 800118a:	f7ff fea9 	bl	8000ee0 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <flashHex+0x260>)
 8001190:	785a      	ldrb	r2, [r3, #1]
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <flashHex+0x260>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4413      	add	r3, r2
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <flashHex+0x27c>)
 80011a0:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <flashHex+0x270>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <flashHex+0x27c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d001      	beq.n	80011b2 <flashHex+0x1fe>
					return 0;//uartTransmit("\n\rchecksum error 1\n\r", 20);
 80011ae:	2300      	movs	r3, #0
 80011b0:	e08d      	b.n	80012ce <flashHex+0x31a>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <flashHex+0x270>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	e07d      	b.n	80012b6 <flashHex+0x302>

			} else if(type_data == 0x04) {//дополнительный адрес
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <flashHex+0x26c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d175      	bne.n	80012ae <flashHex+0x2fa>
				fillBuffer(tempBuf, flashBuf, &ptr, 4);
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	2304      	movs	r3, #4
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4812      	ldr	r0, [pc, #72]	; (8001214 <flashHex+0x260>)
 80011cc:	f7ff fec0 	bl	8000f50 <fillBuffer>
				asciiToHex(tempBuf, 4);
 80011d0:	2104      	movs	r1, #4
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <flashHex+0x260>)
 80011d4:	f7ff fe84 	bl	8000ee0 <asciiToHex>

				extented_linear_adress = (uint32_t)(tempBuf[0]<<28 | tempBuf[1]<<24 | tempBuf[2]<<20 | tempBuf[3]<<16 );//считаем адрес
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <flashHex+0x260>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	071a      	lsls	r2, r3, #28
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <flashHex+0x260>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	061b      	lsls	r3, r3, #24
 80011e4:	431a      	orrs	r2, r3
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <flashHex+0x260>)
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	051b      	lsls	r3, r3, #20
 80011ec:	431a      	orrs	r2, r3
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <flashHex+0x260>)
 80011f0:	78db      	ldrb	r3, [r3, #3]
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	4313      	orrs	r3, r2
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <flashHex+0x278>)
 80011fa:	601a      	str	r2, [r3, #0]
				if ((getLatestApplicationAddress() & 0xFFFF0000) != extented_linear_adress) return 2;//TODO
 80011fc:	f7ff fa4a 	bl	8000694 <getLatestApplicationAddress>
 8001200:	4603      	mov	r3, r0
 8001202:	0c1b      	lsrs	r3, r3, #16
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <flashHex+0x278>)
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	4293      	cmp	r3, r2
 800120c:	d012      	beq.n	8001234 <flashHex+0x280>
 800120e:	2302      	movs	r3, #2
 8001210:	e05d      	b.n	80012ce <flashHex+0x31a>
 8001212:	bf00      	nop
 8001214:	2000015c 	.word	0x2000015c
 8001218:	2000014c 	.word	0x2000014c
 800121c:	20000150 	.word	0x20000150
 8001220:	2000014d 	.word	0x2000014d
 8001224:	20000158 	.word	0x20000158
 8001228:	20000154 	.word	0x20000154
 800122c:	20000148 	.word	0x20000148
 8001230:	2000014e 	.word	0x2000014e

				calculation_check_sum +=  16*tempBuf[0] + tempBuf[1]+ 16*tempBuf[2] + tempBuf[3];
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <flashHex+0x324>)
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <flashHex+0x324>)
 800123a:	789b      	ldrb	r3, [r3, #2]
 800123c:	4413      	add	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <flashHex+0x324>)
 8001246:	785b      	ldrb	r3, [r3, #1]
 8001248:	4413      	add	r3, r2
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <flashHex+0x324>)
 800124e:	78db      	ldrb	r3, [r3, #3]
 8001250:	4413      	add	r3, r2
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <flashHex+0x328>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4413      	add	r3, r2
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <flashHex+0x328>)
 800125e:	701a      	strb	r2, [r3, #0]
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <flashHex+0x328>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	425b      	negs	r3, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <flashHex+0x328>)
 800126a:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 800126c:	f107 020c 	add.w	r2, r7, #12
 8001270:	2302      	movs	r3, #2
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4818      	ldr	r0, [pc, #96]	; (80012d8 <flashHex+0x324>)
 8001276:	f7ff fe6b 	bl	8000f50 <fillBuffer>
				asciiToHex(tempBuf, 2);
 800127a:	2102      	movs	r1, #2
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <flashHex+0x324>)
 800127e:	f7ff fe2f 	bl	8000ee0 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <flashHex+0x324>)
 8001284:	785a      	ldrb	r2, [r3, #1]
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <flashHex+0x324>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <flashHex+0x32c>)
 8001294:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <flashHex+0x328>)
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <flashHex+0x32c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d001      	beq.n	80012a6 <flashHex+0x2f2>
					return 0;//uartTransmit("\n\rchecksum error 2\n\r", 20);
 80012a2:	2300      	movs	r3, #0
 80012a4:	e013      	b.n	80012ce <flashHex+0x31a>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <flashHex+0x328>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e003      	b.n	80012b6 <flashHex+0x302>
			} else if(type_data == 0x01) {//конец файла
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <flashHex+0x330>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d009      	beq.n	80012ca <flashHex+0x316>
				break;
			}
		}
		ptr++;
 80012b6:	89bb      	ldrh	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	81bb      	strh	r3, [r7, #12]
	while (ptr < size) {
 80012be:	89bb      	ldrh	r3, [r7, #12]
 80012c0:	887a      	ldrh	r2, [r7, #2]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	f63f ae7f 	bhi.w	8000fc6 <flashHex+0x12>
 80012c8:	e000      	b.n	80012cc <flashHex+0x318>
				break;
 80012ca:	bf00      	nop
	}
	return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000015c 	.word	0x2000015c
 80012dc:	20000158 	.word	0x20000158
 80012e0:	2000014e 	.word	0x2000014e
 80012e4:	2000014d 	.word	0x2000014d

080012e8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_IWDG_Init+0x2c>)
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <MX_IWDG_Init+0x30>)
 80012f0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_IWDG_Init+0x2c>)
 80012f4:	2206      	movs	r2, #6
 80012f6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 640;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_IWDG_Init+0x2c>)
 80012fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80012fe:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_IWDG_Init+0x2c>)
 8001302:	f001 ff43 	bl	800318c <HAL_IWDG_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800130c:	f000 f98d 	bl	800162a <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000164 	.word	0x20000164
 8001318:	40003000 	.word	0x40003000

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  commands[0] = commandCreate("jump", (CommandAction) jumpToUserApp, NONE);
 8001322:	2202      	movs	r2, #2
 8001324:	4928      	ldr	r1, [pc, #160]	; (80013c8 <main+0xac>)
 8001326:	4829      	ldr	r0, [pc, #164]	; (80013cc <main+0xb0>)
 8001328:	f7ff fc94 	bl	8000c54 <commandCreate>
 800132c:	4603      	mov	r3, r0
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <main+0xb4>)
 8001330:	6013      	str	r3, [r2, #0]
  commands[1] = commandCreate("update", (CommandAction) downloadFirmware, NONE);
 8001332:	2202      	movs	r2, #2
 8001334:	4927      	ldr	r1, [pc, #156]	; (80013d4 <main+0xb8>)
 8001336:	4828      	ldr	r0, [pc, #160]	; (80013d8 <main+0xbc>)
 8001338:	f7ff fc8c 	bl	8000c54 <commandCreate>
 800133c:	4603      	mov	r3, r0
 800133e:	4a24      	ldr	r2, [pc, #144]	; (80013d0 <main+0xb4>)
 8001340:	6053      	str	r3, [r2, #4]
  commands[2] = commandCreate("version", (CommandAction) getAppVersions, NONE);//TODO
 8001342:	2202      	movs	r2, #2
 8001344:	4925      	ldr	r1, [pc, #148]	; (80013dc <main+0xc0>)
 8001346:	4826      	ldr	r0, [pc, #152]	; (80013e0 <main+0xc4>)
 8001348:	f7ff fc84 	bl	8000c54 <commandCreate>
 800134c:	4603      	mov	r3, r0
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <main+0xb4>)
 8001350:	6093      	str	r3, [r2, #8]
  commands[3] = commandCreate("help", (CommandAction) getHelpInfo, NONE);
 8001352:	2202      	movs	r2, #2
 8001354:	4923      	ldr	r1, [pc, #140]	; (80013e4 <main+0xc8>)
 8001356:	4824      	ldr	r0, [pc, #144]	; (80013e8 <main+0xcc>)
 8001358:	f7ff fc7c 	bl	8000c54 <commandCreate>
 800135c:	4603      	mov	r3, r0
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <main+0xb4>)
 8001360:	60d3      	str	r3, [r2, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001362:	f000 ffb5 	bl	80022d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  uartInit();
 8001366:	f000 fc95 	bl	8001c94 <uartInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136a:	f000 f849 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136e:	f7ff fd81 	bl	8000e74 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001372:	f000 fbc1 	bl	8001af8 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8001376:	f000 faf5 	bl	8001964 <MX_TIM6_Init>
  MX_IWDG_Init();
 800137a:	f7ff ffb5 	bl	80012e8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  uartEnableInterruption();
 800137e:	f000 fcbf 	bl	8001d00 <uartEnableInterruption>
  menuInit(commands, 4);
 8001382:	2104      	movs	r1, #4
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <main+0xb4>)
 8001386:	f000 f955 	bl	8001634 <menuInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_IWDG_Refresh(&hiwdg);
 800138a:	4818      	ldr	r0, [pc, #96]	; (80013ec <main+0xd0>)
 800138c:	f001 ff40 	bl	8003210 <HAL_IWDG_Refresh>

	  if (uartHasNext()) {
 8001390:	f000 fc74 	bl	8001c7c <uartHasNext>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <main+0x82>
		  receiveAndSendChar();
 800139a:	f000 f8e9 	bl	8001570 <receiveAndSendChar>
	  }

	  if (hasLine) {
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <main+0xd4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f1      	beq.n	800138a <main+0x6e>
		  uartBuf[uartBufLast] = '\0';
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <main+0xd8>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <main+0xdc>)
 80013ae:	2100      	movs	r1, #0
 80013b0:	5499      	strb	r1, [r3, r2]
		  const char* commandResult = menuExecuteCommand((char*) uartBuf);
 80013b2:	4811      	ldr	r0, [pc, #68]	; (80013f8 <main+0xdc>)
 80013b4:	f000 f972 	bl	800169c <menuExecuteCommand>
 80013b8:	6078      	str	r0, [r7, #4]
		  sendMessage("\n");
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <main+0xe0>)
 80013bc:	f000 f924 	bl	8001608 <sendMessage>
		  sendCommandResult(commandResult);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f905 	bl	80015d0 <sendCommandResult>
	  HAL_IWDG_Refresh(&hiwdg);
 80013c6:	e7e0      	b.n	800138a <main+0x6e>
 80013c8:	080014d9 	.word	0x080014d9
 80013cc:	08006014 	.word	0x08006014
 80013d0:	200001f4 	.word	0x200001f4
 80013d4:	08001515 	.word	0x08001515
 80013d8:	0800601c 	.word	0x0800601c
 80013dc:	0800155d 	.word	0x0800155d
 80013e0:	08006024 	.word	0x08006024
 80013e4:	08001501 	.word	0x08001501
 80013e8:	0800602c 	.word	0x0800602c
 80013ec:	20000164 	.word	0x20000164
 80013f0:	200001f1 	.word	0x200001f1
 80013f4:	200001f0 	.word	0x200001f0
 80013f8:	20000170 	.word	0x20000170
 80013fc:	08006034 	.word	0x08006034

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	; 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	2230      	movs	r2, #48	; 0x30
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f004 f87e 	bl	8005510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <SystemClock_Config+0xd0>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <SystemClock_Config+0xd0>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <SystemClock_Config+0xd0>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <SystemClock_Config+0xd4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <SystemClock_Config+0xd4>)
 800144e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <SystemClock_Config+0xd4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001460:	230a      	movs	r3, #10
 8001462:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001468:	2310      	movs	r3, #16
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001470:	2302      	movs	r3, #2
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001474:	2300      	movs	r3, #0
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001478:	2308      	movs	r3, #8
 800147a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800147c:	2340      	movs	r3, #64	; 0x40
 800147e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001480:	2302      	movs	r3, #2
 8001482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001484:	2304      	movs	r3, #4
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4618      	mov	r0, r3
 800148e:	f001 fecf 	bl	8003230 <HAL_RCC_OscConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001498:	f000 f8c7 	bl	800162a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149c:	230f      	movs	r3, #15
 800149e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a0:	2302      	movs	r3, #2
 80014a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80014a4:	2390      	movs	r3, #144	; 0x90
 80014a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 f932 	bl	8003720 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014c2:	f000 f8b2 	bl	800162a <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3750      	adds	r7, #80	; 0x50
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000

080014d8 <jumpToUserApp>:

/* USER CODE BEGIN 4 */
static char* jumpToUserApp() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	validateApplications();
 80014dc:	f7ff f97a 	bl	80007d4 <validateApplications>
	if (getLatestApplicationAddress() == 0) {
 80014e0:	f7ff f8d8 	bl	8000694 <getLatestApplicationAddress>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <jumpToUserApp+0x16>
		return "No valid application in flash\n";
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <jumpToUserApp+0x20>)
 80014ec:	e002      	b.n	80014f4 <jumpToUserApp+0x1c>
	} else {
		jumpToApp();
 80014ee:	f7ff f9a7 	bl	8000840 <jumpToApp>
		return "Done";
 80014f2:	4b02      	ldr	r3, [pc, #8]	; (80014fc <jumpToUserApp+0x24>)
	}
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	08006038 	.word	0x08006038
 80014fc:	08006058 	.word	0x08006058

08001500 <getHelpInfo>:

static char* getHelpInfo() {
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
    return "jump: jump to application\n 				\
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <getHelpInfo+0x10>)
    update: download firmware and jump to it\n			\
    version: get current version of application\n		\
    help: get information about commands\n";
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	08006060 	.word	0x08006060

08001514 <downloadFirmware>:

static char* downloadFirmware() {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	validateApplications();
 8001518:	f7ff f95c 	bl	80007d4 <validateApplications>
	updateConfig();
 800151c:	f7ff f8e8 	bl	80006f0 <updateConfig>
	eraseLogicalBank();
 8001520:	f7ff fa06 	bl	8000930 <eraseLogicalBank>
	if (xmodemReceive() == 1) {
 8001524:	f000 fc84 	bl	8001e30 <xmodemReceive>
 8001528:	4603      	mov	r3, r0
 800152a:	2b01      	cmp	r3, #1
 800152c:	d103      	bne.n	8001536 <downloadFirmware+0x22>
		return jumpToUserApp();
 800152e:	f7ff ffd3 	bl	80014d8 <jumpToUserApp>
 8001532:	4603      	mov	r3, r0
 8001534:	e00b      	b.n	800154e <downloadFirmware+0x3a>
	} else if (xmodemReceive() == 2) {
 8001536:	f000 fc7b 	bl	8001e30 <xmodemReceive>
 800153a:	4603      	mov	r3, r0
 800153c:	2b02      	cmp	r3, #2
 800153e:	d103      	bne.n	8001548 <downloadFirmware+0x34>
		rollbackConfig();
 8001540:	f7ff f92a 	bl	8000798 <rollbackConfig>
		return "Error. Choose firmware for another bank.\n";
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <downloadFirmware+0x40>)
 8001546:	e002      	b.n	800154e <downloadFirmware+0x3a>
	} else {
		rollbackConfig();
 8001548:	f7ff f926 	bl	8000798 <rollbackConfig>
		return "Error. Update aborted.\n";
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <downloadFirmware+0x44>)
	};
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	0800610c 	.word	0x0800610c
 8001558:	08006138 	.word	0x08006138

0800155c <getAppVersions>:

static char* getAppVersions() {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	validateApplications();
 8001560:	f7ff f938 	bl	80007d4 <validateApplications>
	return getVersions();
 8001564:	f7ff f82e 	bl	80005c4 <getVersions>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <receiveAndSendChar>:

static void receiveAndSendChar() {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
    if (uartReceive(uartBuf + uartBufLast, 1)) {
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <receiveAndSendChar+0x54>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <receiveAndSendChar+0x58>)
 800157e:	4413      	add	r3, r2
 8001580:	2101      	movs	r1, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fb9c 	bl	8001cc0 <uartReceive>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <receiveAndSendChar+0x4c>
        uint8_t received = uartBuf[uartBufLast];
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <receiveAndSendChar+0x54>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <receiveAndSendChar+0x58>)
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	71fb      	strb	r3, [r7, #7]
        uartBufLast++;
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <receiveAndSendChar+0x54>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <receiveAndSendChar+0x54>)
 80015a4:	701a      	strb	r2, [r3, #0]
        uartTransmit(&received, 1);
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fb1e 	bl	8001bec <uartTransmit>

        if (received == '\r')
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b0d      	cmp	r3, #13
 80015b4:	d102      	bne.n	80015bc <receiveAndSendChar+0x4c>
            hasLine = 1;
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <receiveAndSendChar+0x5c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
    }
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200001f0 	.word	0x200001f0
 80015c8:	20000170 	.word	0x20000170
 80015cc:	200001f1 	.word	0x200001f1

080015d0 <sendCommandResult>:

static void sendCommandResult(const char* commandResult) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7fe fe13 	bl	8000204 <strlen>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fb01 	bl	8001bec <uartTransmit>
    uartBufLast = 0;
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <sendCommandResult+0x30>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
    hasLine = 0;
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <sendCommandResult+0x34>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200001f0 	.word	0x200001f0
 8001604:	200001f1 	.word	0x200001f1

08001608 <sendMessage>:

static void sendMessage(const char* msg) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7fe fdf7 	bl	8000204 <strlen>
 8001616:	4603      	mov	r3, r0
 8001618:	b29b      	uxth	r3, r3
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fae5 	bl	8001bec <uartTransmit>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800162e:	b672      	cpsid	i
}
 8001630:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001632:	e7fe      	b.n	8001632 <Error_Handler+0x8>

08001634 <menuInit>:
uint16_t menuSize;

static int32_t commandSepNameFromArg(const char *commandNameWithArg);
static void strTrim(char *str);

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <menuInit+0x60>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d121      	bne.n	800168c <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4618      	mov	r0, r3
 800164e:	f003 ff57 	bl	8005500 <malloc>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <menuInit+0x60>)
 8001658:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	81fb      	strh	r3, [r7, #14]
 800165e:	e00d      	b.n	800167c <menuInit+0x48>
        menuCommands[i] = commands[i];
 8001660:	89fb      	ldrh	r3, [r7, #14]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	441a      	add	r2, r3
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <menuInit+0x60>)
 800166a:	6819      	ldr	r1, [r3, #0]
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	3301      	adds	r3, #1
 800167a:	81fb      	strh	r3, [r7, #14]
 800167c:	89fa      	ldrh	r2, [r7, #14]
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	429a      	cmp	r2, r3
 8001682:	d3ed      	bcc.n	8001660 <menuInit+0x2c>
    }
    menuSize = commandsSize;
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <menuInit+0x64>)
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	8013      	strh	r3, [r2, #0]
 800168a:	e000      	b.n	800168e <menuInit+0x5a>
        return;
 800168c:	bf00      	nop
}
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000204 	.word	0x20000204
 8001698:	20000208 	.word	0x20000208

0800169c <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandNameWithArg) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    strTrim(commandNameWithArg);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f866 	bl	8001776 <strTrim>
    const int32_t sep = commandSepNameFromArg(commandNameWithArg);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f88a 	bl	80017c4 <commandSepNameFromArg>
 80016b0:	6178      	str	r0, [r7, #20]
    const char *commandArg = NULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    if (sep != -1) {
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d009      	beq.n	80016d2 <menuExecuteCommand+0x36>
        commandNameWithArg[sep] = '\0';
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
        commandArg = commandNameWithArg + sep + 1;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	61fb      	str	r3, [r7, #28]
    }
    const char * const commandName = commandNameWithArg;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < menuSize; i++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	837b      	strh	r3, [r7, #26]
 80016da:	e020      	b.n	800171e <menuExecuteCommand+0x82>
        const Command * const command = menuCommands[i];
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <menuExecuteCommand+0x98>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	8b7b      	ldrh	r3, [r7, #26]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <menuExecuteCommand+0x98>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	8b7b      	ldrh	r3, [r7, #26]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fb68 	bl	8000dcc <commandGetName>
 80016fc:	4603      	mov	r3, r0
 80016fe:	6939      	ldr	r1, [r7, #16]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fd75 	bl	80001f0 <strcmp>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <menuExecuteCommand+0x7c>
            return commandExecute(command, commandArg);
 800170c:	69f9      	ldr	r1, [r7, #28]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7ff faca 	bl	8000ca8 <commandExecute>
 8001714:	4603      	mov	r3, r0
 8001716:	e008      	b.n	800172a <menuExecuteCommand+0x8e>
    for (uint16_t i = 0; i < menuSize; i++) {
 8001718:	8b7b      	ldrh	r3, [r7, #26]
 800171a:	3301      	adds	r3, #1
 800171c:	837b      	strh	r3, [r7, #26]
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <menuExecuteCommand+0x9c>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	8b7a      	ldrh	r2, [r7, #26]
 8001724:	429a      	cmp	r2, r3
 8001726:	d3d9      	bcc.n	80016dc <menuExecuteCommand+0x40>
        }
    }
    return "Command not found, print \"help\" for getting info\n";
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <menuExecuteCommand+0xa0>)
}
 800172a:	4618      	mov	r0, r3
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000204 	.word	0x20000204
 8001738:	20000208 	.word	0x20000208
 800173c:	08006150 	.word	0x08006150

08001740 <isSpaceChar>:

static uint8_t isSpaceChar(char ch) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
    return ch == '\n' || ch == ' ' || ch == '\t' || ch == '\r';
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b0a      	cmp	r3, #10
 800174e:	d008      	beq.n	8001762 <isSpaceChar+0x22>
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b20      	cmp	r3, #32
 8001754:	d005      	beq.n	8001762 <isSpaceChar+0x22>
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b09      	cmp	r3, #9
 800175a:	d002      	beq.n	8001762 <isSpaceChar+0x22>
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b0d      	cmp	r3, #13
 8001760:	d101      	bne.n	8001766 <isSpaceChar+0x26>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <isSpaceChar+0x28>
 8001766:	2300      	movs	r3, #0
 8001768:	b2db      	uxtb	r3, r3
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <strTrim>:

static void strTrim(char * const str) {
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(str);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7fe fd40 	bl	8000204 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3b01      	subs	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e011      	b.n	80017b4 <strTrim+0x3e>
        if (isSpaceChar(str[i])) {
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ffd1 	bl	8001740 <isSpaceChar>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00b      	beq.n	80017bc <strTrim+0x46>
            str[i] = '\0';
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
    for (int32_t i = len - 1; i >= 0; i--) {
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	daea      	bge.n	8001790 <strTrim+0x1a>
 80017ba:	e000      	b.n	80017be <strTrim+0x48>
        } else {
            return;
 80017bc:	bf00      	nop
        }
    }
}
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <commandSepNameFromArg>:

static int32_t commandSepNameFromArg(const char * const commandNameWithArg) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(commandNameWithArg);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7fe fd19 	bl	8000204 <strlen>
 80017d2:	4603      	mov	r3, r0
 80017d4:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e00a      	b.n	80017f4 <commandSepNameFromArg+0x30>
        if (commandNameWithArg[i] == ' ') {
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	d101      	bne.n	80017ee <commandSepNameFromArg+0x2a>
            return i;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	e007      	b.n	80017fe <commandSepNameFromArg+0x3a>
    for (int32_t i = len - 1; i >= 0; i--) {
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	daf1      	bge.n	80017de <commandSepNameFromArg+0x1a>
        }
    }
    return -1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_MspInit+0x4c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <HAL_MspInit+0x4c>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a08      	ldr	r2, [pc, #32]	; (8001854 <HAL_MspInit+0x4c>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800185c:	e7fe      	b.n	800185c <NMI_Handler+0x4>

0800185e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <MemManage_Handler+0x4>

0800186a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <UsageFault_Handler+0x4>

08001876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a4:	f000 fd9a 	bl	80023dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <TIM6_DAC_IRQHandler+0x10>)
 80018b2:	f002 fafc 	bl	8003eae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000210 	.word	0x20000210

080018c0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <USART6_IRQHandler+0x10>)
 80018c6:	f002 ff01 	bl	80046cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000268 	.word	0x20000268

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f003 fdd2 	bl	80054ac <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20030000 	.word	0x20030000
 8001934:	00000400 	.word	0x00000400
 8001938:	2000020c 	.word	0x2000020c
 800193c:	20000468 	.word	0x20000468

08001940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196a:	463b      	mov	r3, r7
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_TIM6_Init+0x64>)
 8001974:	4a15      	ldr	r2, [pc, #84]	; (80019cc <MX_TIM6_Init+0x68>)
 8001976:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44999;
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_TIM6_Init+0x64>)
 800197a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800197e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_TIM6_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <MX_TIM6_Init+0x64>)
 8001988:	f242 7210 	movw	r2, #10000	; 0x2710
 800198c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_TIM6_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <MX_TIM6_Init+0x64>)
 8001996:	f002 f99b 	bl	8003cd0 <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019a0:	f7ff fe43 	bl	800162a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_TIM6_Init+0x64>)
 80019b2:	f002 fc4d 	bl	8004250 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019bc:	f7ff fe35 	bl	800162a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000210 	.word	0x20000210
 80019cc:	40001000 	.word	0x40001000

080019d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_TIM_Base_MspInit+0x48>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d115      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2036      	movs	r0, #54	; 0x36
 8001a04:	f000 fe2d 	bl	8002662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a08:	2036      	movs	r0, #54	; 0x36
 8001a0a:	f000 fe46 	bl	800269a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40001000 	.word	0x40001000
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d102      	bne.n	8001a38 <HAL_TIM_PeriodElapsedCallback+0x18>
		uartTransmitChar(X_C);
 8001a32:	2043      	movs	r0, #67	; 0x43
 8001a34:	f000 f8fe 	bl	8001c34 <uartTransmitChar>
	}
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40001000 	.word	0x40001000

08001a44 <uartHardwareTransmitInterrupt>:

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
}

void uartHardwareTransmitInterrupt(uint8_t buffer) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
	usartHardwareTransmitBuffer = buffer;
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <uartHardwareTransmitInterrupt+0x28>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a54:	2047      	movs	r0, #71	; 0x47
 8001a56:	f000 fe20 	bl	800269a <HAL_NVIC_EnableIRQ>
	HAL_UART_Transmit_IT(&huart6, &usartHardwareTransmitBuffer, 1);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4903      	ldr	r1, [pc, #12]	; (8001a6c <uartHardwareTransmitInterrupt+0x28>)
 8001a5e:	4804      	ldr	r0, [pc, #16]	; (8001a70 <uartHardwareTransmitInterrupt+0x2c>)
 8001a60:	f002 fcd3 	bl	800440a <HAL_UART_Transmit_IT>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000258 	.word	0x20000258
 8001a70:	20000268 	.word	0x20000268

08001a74 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_UART_TxCpltCallback+0x1c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_UART_TxCpltCallback+0x14>
		uartTransmitIntCallback();
 8001a84:	f000 f9b6 	bl	8001df4 <uartTransmitIntCallback>
	}
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000268 	.word	0x20000268

08001a94 <uartHardwareReceiveInterrupt>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
}

void uartHardwareReceiveInterrupt() {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a98:	2047      	movs	r0, #71	; 0x47
 8001a9a:	f000 fdfe 	bl	800269a <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart6, &usartHardwareReceiveBuffer, 1);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4902      	ldr	r1, [pc, #8]	; (8001aac <uartHardwareReceiveInterrupt+0x18>)
 8001aa2:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <uartHardwareReceiveInterrupt+0x1c>)
 8001aa4:	f002 fcf6 	bl	8004494 <HAL_UART_Receive_IT>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000259 	.word	0x20000259
 8001ab0:	20000268 	.word	0x20000268

08001ab4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_UART_RxCpltCallback+0x24>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d104      	bne.n	8001ace <HAL_UART_RxCpltCallback+0x1a>
    	uartReceiveIntCallback(usartHardwareReceiveBuffer);
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_UART_RxCpltCallback+0x28>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 f965 	bl	8001d98 <uartReceiveIntCallback>
    }
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000268 	.word	0x20000268
 8001adc:	20000259 	.word	0x20000259

08001ae0 <uartHardwareDisableInterrupts>:

void uartHardwareDisableInterrupts() {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart6);
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <uartHardwareDisableInterrupts+0x14>)
 8001ae6:	f002 fd05 	bl	80044f4 <HAL_UART_Abort>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8001aea:	2047      	movs	r0, #71	; 0x47
 8001aec:	f000 fde3 	bl	80026b6 <HAL_NVIC_DisableIRQ>
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000268 	.word	0x20000268

08001af8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_USART6_UART_Init+0x50>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b30:	f002 fc1e 	bl	8004370 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b3a:	f7ff fd76 	bl	800162a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000268 	.word	0x20000268
 8001b48:	40011400 	.word	0x40011400

08001b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_UART_MspInit+0x94>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d133      	bne.n	8001bd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b78:	f043 0320 	orr.w	r3, r3, #32
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <HAL_UART_MspInit+0x9c>)
 8001bc2:	f001 f937 	bl	8002e34 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2047      	movs	r0, #71	; 0x47
 8001bcc:	f000 fd49 	bl	8002662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bd0:	2047      	movs	r0, #71	; 0x47
 8001bd2:	f000 fd62 	bl	800269a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40011400 	.word	0x40011400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020800 	.word	0x40020800

08001bec <uartTransmit>:
  }
}

/* USER CODE BEGIN 1 */

uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <uartTransmit+0x16>
        return 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e010      	b.n	8001c24 <uartTransmit+0x38>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <uartTransmit+0x40>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe ff38 	bl	8000a80 <bufferPushValues>
 8001c10:	4603      	mov	r3, r0
 8001c12:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <uartTransmit+0x44>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <uartTransmit+0x36>
        hardwareTransmitIT();
 8001c1e:	f000 f893 	bl	8001d48 <hardwareTransmitIT>
    }
    return transmitted;
 8001c22:	89fb      	ldrh	r3, [r7, #14]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000025c 	.word	0x2000025c
 8001c30:	20000264 	.word	0x20000264

08001c34 <uartTransmitChar>:

uint8_t uartTransmitChar(const uint8_t msg) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
    if (msg == NULL)
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <uartTransmitChar+0x14>
        return 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e010      	b.n	8001c6a <uartTransmitChar+0x36>
    const uint8_t transmitted = bufferPush(txBuffer, msg);
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <uartTransmitChar+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fee4 	bl	8000a1e <bufferPush>
 8001c56:	4603      	mov	r3, r0
 8001c58:	73fb      	strb	r3, [r7, #15]
    if (interruptionsEnabled) {
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <uartTransmitChar+0x44>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <uartTransmitChar+0x34>
        hardwareTransmitIT();
 8001c64:	f000 f870 	bl	8001d48 <hardwareTransmitIT>
    }
    return transmitted;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000025c 	.word	0x2000025c
 8001c78:	20000264 	.word	0x20000264

08001c7c <uartHasNext>:

uint8_t uartHasNext() {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
    return bufferHasValues(rxBuffer);
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <uartHasNext+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe ff60 	bl	8000b4a <bufferHasValues>
 8001c8a:	4603      	mov	r3, r0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000260 	.word	0x20000260

08001c94 <uartInit>:

void uartInit() {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001c98:	2040      	movs	r0, #64	; 0x40
 8001c9a:	f7fe fea3 	bl	80009e4 <bufferCreate>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <uartInit+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001ca4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ca8:	f7fe fe9c 	bl	80009e4 <bufferCreate>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a03      	ldr	r2, [pc, #12]	; (8001cbc <uartInit+0x28>)
 8001cb0:	6013      	str	r3, [r2, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000025c 	.word	0x2000025c
 8001cbc:	20000260 	.word	0x20000260

08001cc0 <uartReceive>:
        hardwareTransmit();
        hardwareReceive();
    }
}

uint16_t uartReceive(uint8_t * const buffer, const uint16_t size) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
    const uint16_t received = bufferPopValues(rxBuffer, buffer, size);
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <uartReceive+0x38>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	887a      	ldrh	r2, [r7, #2]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe ff49 	bl	8000b6c <bufferPopValues>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <uartReceive+0x3c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <uartReceive+0x2c>
        hardwareReceiveIT();
 8001ce8:	f000 f828 	bl	8001d3c <hardwareReceiveIT>
    }
    return received;
 8001cec:	89fb      	ldrh	r3, [r7, #14]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000260 	.word	0x20000260
 8001cfc:	20000264 	.word	0x20000264

08001d00 <uartEnableInterruption>:

void uartEnableInterruption() {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
    interruptionsEnabled = 1;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <uartEnableInterruption+0x1c>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
    transmitIntEnd = 1;
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <uartEnableInterruption+0x20>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
    hardwareTransmitIT();
 8001d10:	f000 f81a 	bl	8001d48 <hardwareTransmitIT>
    hardwareReceiveIT();
 8001d14:	f000 f812 	bl	8001d3c <hardwareReceiveIT>
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000264 	.word	0x20000264
 8001d20:	20000024 	.word	0x20000024

08001d24 <uartDisableInterruption>:

void uartDisableInterruption() {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
    interruptionsEnabled = 0;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <uartDisableInterruption+0x14>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
    uartHardwareDisableInterrupts();
 8001d2e:	f7ff fed7 	bl	8001ae0 <uartHardwareDisableInterrupts>
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000264 	.word	0x20000264

08001d3c <hardwareReceiveIT>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareReceiveIT() {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
    uartHardwareReceiveInterrupt();
 8001d40:	f7ff fea8 	bl	8001a94 <uartHardwareReceiveInterrupt>
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <hardwareTransmitIT>:

static void hardwareTransmitIT() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
    if (!transmitIntEnd)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <hardwareTransmitIT+0x48>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d016      	beq.n	8001d86 <hardwareTransmitIT+0x3e>
        return;

    if (bufferHasValues(txBuffer)) {
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <hardwareTransmitIT+0x4c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fef4 	bl	8000b4a <bufferHasValues>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00f      	beq.n	8001d88 <hardwareTransmitIT+0x40>
        transmitIntEnd = 0;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <hardwareTransmitIT+0x48>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
        uint8_t data = bufferPop(txBuffer);
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <hardwareTransmitIT+0x4c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fea7 	bl	8000ac6 <bufferPop>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
        uartHardwareTransmitInterrupt(data);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe60 	bl	8001a44 <uartHardwareTransmitInterrupt>
 8001d84:	e000      	b.n	8001d88 <hardwareTransmitIT+0x40>
        return;
 8001d86:	bf00      	nop
    }
}
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000024 	.word	0x20000024
 8001d94:	2000025c 	.word	0x2000025c

08001d98 <uartReceiveIntCallback>:
        if (uartHardwareTransmitPolling(byte, 5))
            bufferPop(txBuffer);
    }
}

extern void uartReceiveIntCallback(uint8_t data) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
    if (bufferGetFreeSize(rxBuffer) > 0) {
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <uartReceiveIntCallback+0x50>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ff1d 	bl	8000be6 <bufferGetFreeSize>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <uartReceiveIntCallback+0x28>
        bufferPush(rxBuffer, data);
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <uartReceiveIntCallback+0x50>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	79fa      	ldrb	r2, [r7, #7]
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fe2f 	bl	8000a1e <bufferPush>
    }
    if (!isRxStarted()) rxStarted = 1;
 8001dc0:	f000 f82a 	bl	8001e18 <isRxStarted>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <uartReceiveIntCallback+0x38>
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <uartReceiveIntCallback+0x54>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <uartReceiveIntCallback+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <uartReceiveIntCallback+0x46>
        hardwareReceiveIT();
 8001dda:	f7ff ffaf 	bl	8001d3c <hardwareReceiveIT>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000260 	.word	0x20000260
 8001dec:	20000265 	.word	0x20000265
 8001df0:	20000264 	.word	0x20000264

08001df4 <uartTransmitIntCallback>:

extern void uartTransmitIntCallback() {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
    transmitIntEnd = 1;
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <uartTransmitIntCallback+0x1c>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <uartTransmitIntCallback+0x20>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <uartTransmitIntCallback+0x18>
        hardwareTransmitIT();
 8001e08:	f7ff ff9e 	bl	8001d48 <hardwareTransmitIT>
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000024 	.word	0x20000024
 8001e14:	20000264 	.word	0x20000264

08001e18 <isRxStarted>:

uint16_t rxBufToProgBuf(uint8_t* buf) {
	return bufferPopValues(rxBuffer, buf, bufferGetSize(rxBuffer));
}

uint8_t isRxStarted() {
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	return rxStarted;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <isRxStarted+0x14>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000265 	.word	0x20000265

08001e30 <xmodemReceive>:
 * @brief   This function is the base of the Xmodem protocol.
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  uint8_t
 */
uint8_t xmodemReceive() {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	717b      	strb	r3, [r7, #5]
    uint8_t error_number = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	713b      	strb	r3, [r7, #4]
    uint8_t header = 0x00u;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	71fb      	strb	r3, [r7, #7]
    xmodemPacketNumber = 1u;
 8001e42:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <xmodemReceive+0x10c>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6); //send "C" every 10 sec
 8001e48:	483d      	ldr	r0, [pc, #244]	; (8001f40 <xmodemReceive+0x110>)
 8001e4a:	f001 ff91 	bl	8003d70 <HAL_TIM_Base_Start_IT>
    timerWorking = 1;
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <xmodemReceive+0x114>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
    /* Loop until there isn't any error or done. */
    while (status == X_OK) {
 8001e54:	e05d      	b.n	8001f12 <xmodemReceive+0xe2>
  	    WRITE_REG(IWDG->KR, 0x0000AAAAU);
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <xmodemReceive+0x118>)
 8001e58:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001e5c:	601a      	str	r2, [r3, #0]
	    xmodemBufSize = uartReceive(xmodemBuf, 1);
 8001e5e:	2101      	movs	r1, #1
 8001e60:	483a      	ldr	r0, [pc, #232]	; (8001f4c <xmodemReceive+0x11c>)
 8001e62:	f7ff ff2d 	bl	8001cc0 <uartReceive>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <xmodemReceive+0x120>)
 8001e6c:	801a      	strh	r2, [r3, #0]
	    if (xmodemBufSize != 1) continue;
 8001e6e:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <xmodemReceive+0x120>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d000      	beq.n	8001e78 <xmodemReceive+0x48>
 8001e76:	e04c      	b.n	8001f12 <xmodemReceive+0xe2>
	    if (timerWorking) {
 8001e78:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <xmodemReceive+0x114>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <xmodemReceive+0x5c>
	    	HAL_TIM_Base_Stop_IT(&htim6); //stop sending "C"
 8001e80:	482f      	ldr	r0, [pc, #188]	; (8001f40 <xmodemReceive+0x110>)
 8001e82:	f001 ffe5 	bl	8003e50 <HAL_TIM_Base_Stop_IT>
	    	timerWorking = 0;
 8001e86:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <xmodemReceive+0x114>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
	    }
    	HAL_Delay(100);
 8001e8c:	2064      	movs	r0, #100	; 0x64
 8001e8e:	f000 fac5 	bl	800241c <HAL_Delay>
        header = xmodemBuf[0];
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <xmodemReceive+0x11c>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]

        xmodem_status packet_status = X_ERROR;
 8001e98:	23ff      	movs	r3, #255	; 0xff
 8001e9a:	71bb      	strb	r3, [r7, #6]
        /* The header can be: SOH, STX, EOT and CAN. */
        switch (header) {
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	2b18      	cmp	r3, #24
 8001ea0:	d02c      	beq.n	8001efc <xmodemReceive+0xcc>
 8001ea2:	2b18      	cmp	r3, #24
 8001ea4:	dc2d      	bgt.n	8001f02 <xmodemReceive+0xd2>
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d002      	beq.n	8001eb0 <xmodemReceive+0x80>
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d020      	beq.n	8001ef0 <xmodemReceive+0xc0>
 8001eae:	e028      	b.n	8001f02 <xmodemReceive+0xd2>
            case X_SOH:
                packet_status = xmodem_handle_packet(header); //If the handling was successful, then send an ACK
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f888 	bl	8001fc8 <xmodem_handle_packet>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71bb      	strb	r3, [r7, #6]
                if (packet_status == X_OK) {
 8001ebc:	79bb      	ldrb	r3, [r7, #6]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <xmodemReceive+0x9a>
                	uartTransmitChar(X_ACK);
 8001ec2:	2006      	movs	r0, #6
 8001ec4:	f7ff feb6 	bl	8001c34 <uartTransmitChar>
 8001ec8:	e023      	b.n	8001f12 <xmodemReceive+0xe2>
                } else if (packet_status == X_WRONG_FIRMWARE) {
 8001eca:	79bb      	ldrb	r3, [r7, #6]
 8001ecc:	2b78      	cmp	r3, #120	; 0x78
 8001ece:	d107      	bne.n	8001ee0 <xmodemReceive+0xb0>
                	xmodem_error_handler(&error_number, 0);
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f903 	bl	80020e0 <xmodem_error_handler>
                	status = X_WRONG_FIRMWARE;
 8001eda:	2378      	movs	r3, #120	; 0x78
 8001edc:	717b      	strb	r3, [r7, #5]
 8001ede:	e018      	b.n	8001f12 <xmodemReceive+0xe2>
                } else {
                	status = xmodem_error_handler(&error_number, X_MAX_ERRORS); //Error while processing the packet, either send a NAK or do graceful abort
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2103      	movs	r1, #3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f8fb 	bl	80020e0 <xmodem_error_handler>
 8001eea:	4603      	mov	r3, r0
 8001eec:	717b      	strb	r3, [r7, #5]
                }
                break;
 8001eee:	e010      	b.n	8001f12 <xmodemReceive+0xe2>
            /* End of Transmission. */
            case X_EOT:
            	uartTransmitChar(X_ACK);
 8001ef0:	2006      	movs	r0, #6
 8001ef2:	f7ff fe9f 	bl	8001c34 <uartTransmitChar>
            	status = X_DONE;
 8001ef6:	23aa      	movs	r3, #170	; 0xaa
 8001ef8:	717b      	strb	r3, [r7, #5]
            	break;
 8001efa:	e00a      	b.n	8001f12 <xmodemReceive+0xe2>
            /* Abort from host. */
            case X_CAN:
           		status = X_ERROR;
 8001efc:	23ff      	movs	r3, #255	; 0xff
 8001efe:	717b      	strb	r3, [r7, #5]
           		break;
 8001f00:	e007      	b.n	8001f12 <xmodemReceive+0xe2>
            default:
            /* Wrong header. */
            	status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2103      	movs	r1, #3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f8ea 	bl	80020e0 <xmodem_error_handler>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	717b      	strb	r3, [r7, #5]
            	break;
 8001f10:	bf00      	nop
    while (status == X_OK) {
 8001f12:	797b      	ldrb	r3, [r7, #5]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d09d      	beq.n	8001e56 <xmodemReceive+0x26>
        }
    }
    if (status == X_DONE) return 1;
 8001f1a:	797b      	ldrb	r3, [r7, #5]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2baa      	cmp	r3, #170	; 0xaa
 8001f20:	d101      	bne.n	8001f26 <xmodemReceive+0xf6>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e006      	b.n	8001f34 <xmodemReceive+0x104>
    else if (status == X_WRONG_FIRMWARE) return 2;
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b78      	cmp	r3, #120	; 0x78
 8001f2c:	d101      	bne.n	8001f32 <xmodemReceive+0x102>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e000      	b.n	8001f34 <xmodemReceive+0x104>
    else return 0;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000025 	.word	0x20000025
 8001f40:	20000210 	.word	0x20000210
 8001f44:	20000432 	.word	0x20000432
 8001f48:	40003000 	.word	0x40003000
 8001f4c:	200002ac 	.word	0x200002ac
 8001f50:	200003ac 	.word	0x200003ac

08001f54 <xmodemCalcCrc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodemCalcCrc(uint8_t *data, uint16_t length)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8001f60:	2300      	movs	r3, #0
 8001f62:	81fb      	strh	r3, [r7, #14]
    while (length)
 8001f64:	e026      	b.n	8001fb4 <xmodemCalcCrc+0x60>
    {
        length--;
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f7c:	4053      	eors	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	737b      	strb	r3, [r7, #13]
 8001f86:	e012      	b.n	8001fae <xmodemCalcCrc+0x5a>
        {
            if (crc & 0x8000u)
 8001f88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da08      	bge.n	8001fa2 <xmodemCalcCrc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 8001f90:	89fb      	ldrh	r3, [r7, #14]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001f9a:	f083 0301 	eor.w	r3, r3, #1
 8001f9e:	81fb      	strh	r3, [r7, #14]
 8001fa0:	e002      	b.n	8001fa8 <xmodemCalcCrc+0x54>
            }
            else
            {
                crc = crc << 1u;
 8001fa2:	89fb      	ldrh	r3, [r7, #14]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8001fa8:	7b7b      	ldrb	r3, [r7, #13]
 8001faa:	3301      	adds	r3, #1
 8001fac:	737b      	strb	r3, [r7, #13]
 8001fae:	7b7b      	ldrb	r3, [r7, #13]
 8001fb0:	2b07      	cmp	r3, #7
 8001fb2:	d9e9      	bls.n	8001f88 <xmodemCalcCrc+0x34>
    while (length)
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1d5      	bne.n	8001f66 <xmodemCalcCrc+0x12>
            }
        }
    }
    return crc;
 8001fba:	89fb      	ldrh	r3, [r7, #14]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <xmodem_handle_packet>:
/**
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0a6      	sub	sp, #152	; 0x98
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	uint8_t dataTempBuf[128];
	uint8_t crcBuf[2];
    uint16_t size = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

    /* Receive packet number */
    size = uartReceive(xmodemBuf, 2);
 8001fd8:	2102      	movs	r1, #2
 8001fda:	483e      	ldr	r0, [pc, #248]	; (80020d4 <xmodem_handle_packet+0x10c>)
 8001fdc:	f7ff fe70 	bl	8001cc0 <uartReceive>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2) return X_ERROR_UART;
 8001fe6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d001      	beq.n	8001ff2 <xmodem_handle_packet+0x2a>
 8001fee:	2304      	movs	r3, #4
 8001ff0:	e06c      	b.n	80020cc <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] != xmodemPacketNumber) return X_ERROR_NUMBER;
 8001ff2:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <xmodem_handle_packet+0x10c>)
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <xmodem_handle_packet+0x110>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d001      	beq.n	8002002 <xmodem_handle_packet+0x3a>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e064      	b.n	80020cc <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] + xmodemBuf[1] != 255) return X_ERROR_NUMBER;
 8002002:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <xmodem_handle_packet+0x10c>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <xmodem_handle_packet+0x10c>)
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	4413      	add	r3, r2
 800200e:	2bff      	cmp	r3, #255	; 0xff
 8002010:	d001      	beq.n	8002016 <xmodem_handle_packet+0x4e>
 8002012:	2302      	movs	r3, #2
 8002014:	e05a      	b.n	80020cc <xmodem_handle_packet+0x104>

    /* Receive packet data */
    size = uartReceive(dataTempBuf, X_PACKET_128_SIZE);
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fe4f 	bl	8001cc0 <uartReceive>
 8002022:	4603      	mov	r3, r0
 8002024:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != X_PACKET_128_SIZE) return X_ERROR_UART;
 8002028:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800202c:	2b80      	cmp	r3, #128	; 0x80
 800202e:	d001      	beq.n	8002034 <xmodem_handle_packet+0x6c>
 8002030:	2304      	movs	r3, #4
 8002032:	e04b      	b.n	80020cc <xmodem_handle_packet+0x104>

    /* Receive CRC */
    size = uartReceive(crcBuf, 2);
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	2102      	movs	r1, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fe40 	bl	8001cc0 <uartReceive>
 8002040:	4603      	mov	r3, r0
 8002042:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2) return X_ERROR_UART;
 8002046:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800204a:	2b02      	cmp	r3, #2
 800204c:	d001      	beq.n	8002052 <xmodem_handle_packet+0x8a>
 800204e:	2304      	movs	r3, #4
 8002050:	e03c      	b.n	80020cc <xmodem_handle_packet+0x104>

    /* Check CRC */
    uint16_t crcMerged = ((uint16_t) crcBuf[0] << 8) | ((uint16_t) crcBuf[1]); //Merge the two bytes of CRC
 8002052:	7b3b      	ldrb	r3, [r7, #12]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b21a      	sxth	r2, r3
 8002058:	7b7b      	ldrb	r3, [r7, #13]
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b21b      	sxth	r3, r3
 8002060:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    uint16_t crcCalculated = xmodemCalcCrc(dataTempBuf, X_PACKET_128_SIZE);
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff72 	bl	8001f54 <xmodemCalcCrc>
 8002070:	4603      	mov	r3, r0
 8002072:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    if (crcMerged != crcCalculated) return X_ERROR_CRC;
 8002076:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800207a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <xmodem_handle_packet+0xbe>
 8002082:	2301      	movs	r3, #1
 8002084:	e022      	b.n	80020cc <xmodem_handle_packet+0x104>

    /* Add remaining data from previous packet to current data */
    addRemainingDataToCurrentBuf(dataTempBuf);
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f85e 	bl	800214c <addRemainingDataToCurrentBuf>

    /* Remove unfinished line from xmodemBuf and place it to remaining data */
    cutBuf();
 8002090:	f000 f8a6 	bl	80021e0 <cutBuf>

    /* Move data to flash */
    uint8_t flashHexCode = flashHex(xmodemBuf, xmodemBufSize);
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <xmodem_handle_packet+0x114>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	480e      	ldr	r0, [pc, #56]	; (80020d4 <xmodem_handle_packet+0x10c>)
 800209c:	f7fe ff8a 	bl	8000fb4 <flashHex>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
    if (flashHexCode == 0) return X_ERROR_FLASH;
 80020a6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <xmodem_handle_packet+0xea>
 80020ae:	2308      	movs	r3, #8
 80020b0:	e00c      	b.n	80020cc <xmodem_handle_packet+0x104>
    if (flashHexCode == 2) return X_WRONG_FIRMWARE;
 80020b2:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d101      	bne.n	80020be <xmodem_handle_packet+0xf6>
 80020ba:	2378      	movs	r3, #120	; 0x78
 80020bc:	e006      	b.n	80020cc <xmodem_handle_packet+0x104>

    xmodemPacketNumber++;
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <xmodem_handle_packet+0x110>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <xmodem_handle_packet+0x110>)
 80020c8:	701a      	strb	r2, [r3, #0]
    return X_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3798      	adds	r7, #152	; 0x98
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200002ac 	.word	0x200002ac
 80020d8:	20000025 	.word	0x20000025
 80020dc:	200003ac 	.word	0x200003ac

080020e0 <xmodem_error_handler>:
 *          Raises the error counter, then if the number of the errors reached critical, do a graceful abort, otherwise send a NAK.
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
	xmodem_status status = X_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
	/* Raise the error counter. */
	(*error_number)++;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	701a      	strb	r2, [r3, #0]
	/* If the counter reached the max value, then abort. */
	if ((*error_number) >= max_error_number) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	429a      	cmp	r2, r3
 8002104:	d808      	bhi.n	8002118 <xmodem_error_handler+0x38>
		/* Graceful abort. */
		uartTransmitChar(X_CAN);
 8002106:	2018      	movs	r0, #24
 8002108:	f7ff fd94 	bl	8001c34 <uartTransmitChar>
		uartTransmitChar(X_CAN);
 800210c:	2018      	movs	r0, #24
 800210e:	f7ff fd91 	bl	8001c34 <uartTransmitChar>
		status = X_ERROR;
 8002112:	23ff      	movs	r3, #255	; 0xff
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e004      	b.n	8002122 <xmodem_error_handler+0x42>
	} else { // Otherwise send a NAK for a repeat.
		uartTransmitChar(X_NAK);
 8002118:	2015      	movs	r0, #21
 800211a:	f7ff fd8b 	bl	8001c34 <uartTransmitChar>
		status = X_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
	}
	if (xmodemPacketNumber == 1) {
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <xmodem_error_handler+0x60>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d105      	bne.n	8002136 <xmodem_error_handler+0x56>
		HAL_TIM_Base_Start_IT(&htim6);
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <xmodem_error_handler+0x64>)
 800212c:	f001 fe20 	bl	8003d70 <HAL_TIM_Base_Start_IT>
		timerWorking = 1;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <xmodem_error_handler+0x68>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000025 	.word	0x20000025
 8002144:	20000210 	.word	0x20000210
 8002148:	20000432 	.word	0x20000432

0800214c <addRemainingDataToCurrentBuf>:


void addRemainingDataToCurrentBuf(uint8_t* receivedData) {
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (remainingDataSize != 0) {
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <addRemainingDataToCurrentBuf+0x84>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d011      	beq.n	8002180 <addRemainingDataToCurrentBuf+0x34>
		for (i = 0; i < remainingDataSize; i++) {
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e008      	b.n	8002174 <addRemainingDataToCurrentBuf+0x28>
			xmodemBuf[i] = remainingDataBuf[i];
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	491b      	ldr	r1, [pc, #108]	; (80021d4 <addRemainingDataToCurrentBuf+0x88>)
 8002168:	5c89      	ldrb	r1, [r1, r2]
 800216a:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <addRemainingDataToCurrentBuf+0x8c>)
 800216c:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < remainingDataSize; i++) {
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	3301      	adds	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	b29a      	uxth	r2, r3
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <addRemainingDataToCurrentBuf+0x84>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d3f0      	bcc.n	8002162 <addRemainingDataToCurrentBuf+0x16>
		}
	}
	xmodemBufSize = remainingDataSize;
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <addRemainingDataToCurrentBuf+0x84>)
 8002182:	881a      	ldrh	r2, [r3, #0]
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <addRemainingDataToCurrentBuf+0x90>)
 8002186:	801a      	strh	r2, [r3, #0]
	remainingDataSize = 0;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <addRemainingDataToCurrentBuf+0x84>)
 800218a:	2200      	movs	r2, #0
 800218c:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e00d      	b.n	80021b0 <addRemainingDataToCurrentBuf+0x64>
		xmodemBuf[xmodemBufSize + i] = receivedData[i];
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	441a      	add	r2, r3
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <addRemainingDataToCurrentBuf+0x90>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	440b      	add	r3, r1
 80021a4:	7811      	ldrb	r1, [r2, #0]
 80021a6:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <addRemainingDataToCurrentBuf+0x8c>)
 80021a8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	3301      	adds	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	daed      	bge.n	8002194 <addRemainingDataToCurrentBuf+0x48>
	}
	xmodemBufSize += X_PACKET_128_SIZE;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <addRemainingDataToCurrentBuf+0x90>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	3380      	adds	r3, #128	; 0x80
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <addRemainingDataToCurrentBuf+0x90>)
 80021c2:	801a      	strh	r2, [r3, #0]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	20000430 	.word	0x20000430
 80021d4:	200003b0 	.word	0x200003b0
 80021d8:	200002ac 	.word	0x200002ac
 80021dc:	200003ac 	.word	0x200003ac

080021e0 <cutBuf>:

void cutBuf() {
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t linePtr;

	for (i = xmodemBufSize - 1; i >= 0; i--) {
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <cutBuf+0x8c>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <cutBuf+0x90>)
 80021f4:	5cd3      	ldrb	r3, [r2, r3]
 80021f6:	2b0a      	cmp	r3, #10
 80021f8:	d111      	bne.n	800221e <cutBuf+0x3e>
			linePtr = i;
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	71bb      	strb	r3, [r7, #6]
			break;
 80021fe:	bf00      	nop
		}
	}
	remainingDataSize = xmodemBufSize - linePtr - 1;
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <cutBuf+0x8c>)
 8002202:	881a      	ldrh	r2, [r3, #0]
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	b29b      	uxth	r3, r3
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <cutBuf+0x94>)
 8002212:	801a      	strh	r2, [r3, #0]
	if (remainingDataSize == 0) return;
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <cutBuf+0x94>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d104      	bne.n	8002226 <cutBuf+0x46>
 800221c:	e020      	b.n	8002260 <cutBuf+0x80>
	for (i = xmodemBufSize - 1; i >= 0; i--) {
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	3b01      	subs	r3, #1
 8002222:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002224:	e7e4      	b.n	80021f0 <cutBuf+0x10>
	xmodemBufSize -= remainingDataSize;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <cutBuf+0x8c>)
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <cutBuf+0x94>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <cutBuf+0x8c>)
 8002234:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < remainingDataSize; i++) {
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	e00b      	b.n	8002254 <cutBuf+0x74>
		remainingDataBuf[i] = xmodemBuf[(linePtr + 1) + i];
 800223c:	79bb      	ldrb	r3, [r7, #6]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	441a      	add	r2, r3
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	490a      	ldr	r1, [pc, #40]	; (8002270 <cutBuf+0x90>)
 8002248:	5c89      	ldrb	r1, [r1, r2]
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <cutBuf+0x98>)
 800224c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < remainingDataSize; i++) {
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	3301      	adds	r3, #1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	b29a      	uxth	r2, r3
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <cutBuf+0x94>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d3ed      	bcc.n	800223c <cutBuf+0x5c>
	}
}
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	200003ac 	.word	0x200003ac
 8002270:	200002ac 	.word	0x200002ac
 8002274:	20000430 	.word	0x20000430
 8002278:	200003b0 	.word	0x200003b0

0800227c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800227c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002280:	480d      	ldr	r0, [pc, #52]	; (80022b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002282:	490e      	ldr	r1, [pc, #56]	; (80022bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002288:	e002      	b.n	8002290 <LoopCopyDataInit>

0800228a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800228c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228e:	3304      	adds	r3, #4

08002290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002294:	d3f9      	bcc.n	800228a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002296:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002298:	4c0b      	ldr	r4, [pc, #44]	; (80022c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800229c:	e001      	b.n	80022a2 <LoopFillZerobss>

0800229e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a0:	3204      	adds	r2, #4

080022a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a4:	d3fb      	bcc.n	800229e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022a6:	f7ff fb4b 	bl	8001940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022aa:	f003 f905 	bl	80054b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ae:	f7ff f835 	bl	800131c <main>
  bx  lr    
 80022b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80022c0:	080062e0 	.word	0x080062e0
  ldr r2, =_sbss
 80022c4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80022c8:	20000468 	.word	0x20000468

080022cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC_IRQHandler>
	...

080022d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_Init+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <HAL_Init+0x40>)
 80022da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_Init+0x40>)
 80022e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_Init+0x40>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f8:	2003      	movs	r0, #3
 80022fa:	f000 f9a7 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fe:	200f      	movs	r0, #15
 8002300:	f000 f83c 	bl	800237c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002304:	f7ff fa80 	bl	8001808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023c00 	.word	0x40023c00

08002314 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_DeInit+0x54>)
 800231a:	f04f 32ff 	mov.w	r2, #4294967295
 800231e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_DeInit+0x54>)
 8002322:	2200      	movs	r2, #0
 8002324:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_DeInit+0x54>)
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_DeInit+0x54>)
 8002330:	2200      	movs	r2, #0
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_DeInit+0x54>)
 8002336:	f04f 32ff 	mov.w	r2, #4294967295
 800233a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_DeInit+0x54>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_DeInit+0x54>)
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <HAL_DeInit+0x54>)
 800234c:	2200      	movs	r2, #0
 800234e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_DeInit+0x54>)
 8002352:	f04f 32ff 	mov.w	r2, #4294967295
 8002356:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_DeInit+0x54>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800235e:	f000 f805 	bl	800236c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800

0800236c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_InitTick+0x54>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002392:	fbb3 f3f1 	udiv	r3, r3, r1
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f999 	bl	80026d2 <HAL_SYSTICK_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00e      	b.n	80023c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b0f      	cmp	r3, #15
 80023ae:	d80a      	bhi.n	80023c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b0:	2200      	movs	r2, #0
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f000 f953 	bl	8002662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <HAL_InitTick+0x5c>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000020 	.word	0x20000020
 80023d4:	2000002c 	.word	0x2000002c
 80023d8:	20000028 	.word	0x20000028

080023dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x20>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x24>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_IncTick+0x24>)
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	2000002c 	.word	0x2000002c
 8002400:	20000434 	.word	0x20000434

08002404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return uwTick;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_GetTick+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000434 	.word	0x20000434

0800241c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff ffee 	bl	8002404 <HAL_GetTick>
 8002428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d005      	beq.n	8002442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_Delay+0x44>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002442:	bf00      	nop
 8002444:	f7ff ffde 	bl	8002404 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	429a      	cmp	r2, r3
 8002452:	d8f7      	bhi.n	8002444 <HAL_Delay+0x28>
  {
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000002c 	.word	0x2000002c

08002464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002480:	4013      	ands	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800248c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002496:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	60d3      	str	r3, [r2, #12]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <__NVIC_GetPriorityGrouping+0x18>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	f003 0307 	and.w	r3, r3, #7
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	db0b      	blt.n	80024f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	4907      	ldr	r1, [pc, #28]	; (8002500 <__NVIC_EnableIRQ+0x38>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	2001      	movs	r0, #1
 80024ea:	fa00 f202 	lsl.w	r2, r0, r2
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	2b00      	cmp	r3, #0
 8002514:	db12      	blt.n	800253c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	f003 021f 	and.w	r2, r3, #31
 800251c:	490a      	ldr	r1, [pc, #40]	; (8002548 <__NVIC_DisableIRQ+0x44>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	2001      	movs	r0, #1
 8002526:	fa00 f202 	lsl.w	r2, r0, r2
 800252a:	3320      	adds	r3, #32
 800252c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002530:	f3bf 8f4f 	dsb	sy
}
 8002534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002536:	f3bf 8f6f 	isb	sy
}
 800253a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000e100 	.word	0xe000e100

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
         );
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002618:	d301      	bcc.n	800261e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261a:	2301      	movs	r3, #1
 800261c:	e00f      	b.n	800263e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <SysTick_Config+0x40>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002626:	210f      	movs	r1, #15
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f7ff ff8e 	bl	800254c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <SysTick_Config+0x40>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SysTick_Config+0x40>)
 8002638:	2207      	movs	r2, #7
 800263a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff05 	bl	8002464 <__NVIC_SetPriorityGrouping>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff1a 	bl	80024ac <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ff8e 	bl	80025a0 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff5d 	bl	800254c <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff0d 	bl	80024c8 <__NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff1d 	bl	8002504 <__NVIC_DisableIRQ>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ff94 	bl	8002608 <SysTick_Config>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff fe84 	bl	8002404 <HAL_GetTick>
 80026fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d008      	beq.n	800271c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e052      	b.n	80027c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0216 	bic.w	r2, r2, #22
 800272a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d103      	bne.n	800274c <HAL_DMA_Abort+0x62>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0208 	bic.w	r2, r2, #8
 800275a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276c:	e013      	b.n	8002796 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800276e:	f7ff fe49 	bl	8002404 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b05      	cmp	r3, #5
 800277a:	d90c      	bls.n	8002796 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2203      	movs	r2, #3
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e015      	b.n	80027c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e4      	bne.n	800276e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	223f      	movs	r2, #63	; 0x3f
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d004      	beq.n	80027e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e00c      	b.n	8002802 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2205      	movs	r2, #5
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <HAL_FLASH_Program+0xa0>)
 800283c:	7e1b      	ldrb	r3, [r3, #24]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_FLASH_Program+0x1e>
 8002842:	2302      	movs	r3, #2
 8002844:	e03b      	b.n	80028be <HAL_FLASH_Program+0x96>
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_FLASH_Program+0xa0>)
 8002848:	2201      	movs	r2, #1
 800284a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800284c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002850:	f000 f870 	bl	8002934 <FLASH_WaitForLastOperation>
 8002854:	4603      	mov	r3, r0
 8002856:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d12b      	bne.n	80028b6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002864:	783b      	ldrb	r3, [r7, #0]
 8002866:	4619      	mov	r1, r3
 8002868:	68b8      	ldr	r0, [r7, #8]
 800286a:	f000 f91b 	bl	8002aa4 <FLASH_Program_Byte>
 800286e:	e016      	b.n	800289e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d105      	bne.n	8002882 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002876:	883b      	ldrh	r3, [r7, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	68b8      	ldr	r0, [r7, #8]
 800287c:	f000 f8ee 	bl	8002a5c <FLASH_Program_HalfWord>
 8002880:	e00d      	b.n	800289e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d105      	bne.n	8002894 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4619      	mov	r1, r3
 800288c:	68b8      	ldr	r0, [r7, #8]
 800288e:	f000 f8c3 	bl	8002a18 <FLASH_Program_Word>
 8002892:	e004      	b.n	800289e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002898:	68b8      	ldr	r0, [r7, #8]
 800289a:	f000 f88b 	bl	80029b4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800289e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028a2:	f000 f847 	bl	8002934 <FLASH_WaitForLastOperation>
 80028a6:	4603      	mov	r3, r0
 80028a8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_FLASH_Program+0xa4>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_FLASH_Program+0xa4>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <HAL_FLASH_Program+0xa0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	761a      	strb	r2, [r3, #24]
  
  return status;
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000438 	.word	0x20000438
 80028cc:	40023c00 	.word	0x40023c00

080028d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_FLASH_Unlock+0x38>)
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	da0b      	bge.n	80028fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_FLASH_Unlock+0x38>)
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_FLASH_Unlock+0x3c>)
 80028e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_FLASH_Unlock+0x38>)
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_FLASH_Unlock+0x40>)
 80028ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_FLASH_Unlock+0x38>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	da01      	bge.n	80028fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80028fa:	79fb      	ldrb	r3, [r7, #7]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40023c00 	.word	0x40023c00
 800290c:	45670123 	.word	0x45670123
 8002910:	cdef89ab 	.word	0xcdef89ab

08002914 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_FLASH_Lock+0x1c>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_FLASH_Lock+0x1c>)
 800291e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002922:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40023c00 	.word	0x40023c00

08002934 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <FLASH_WaitForLastOperation+0x78>)
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002946:	f7ff fd5d 	bl	8002404 <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800294c:	e010      	b.n	8002970 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d00c      	beq.n	8002970 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <FLASH_WaitForLastOperation+0x38>
 800295c:	f7ff fd52 	bl	8002404 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d201      	bcs.n	8002970 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e019      	b.n	80029a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <FLASH_WaitForLastOperation+0x7c>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e8      	bne.n	800294e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <FLASH_WaitForLastOperation+0x7c>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <FLASH_WaitForLastOperation+0x7c>)
 800298a:	2201      	movs	r2, #1
 800298c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <FLASH_WaitForLastOperation+0x7c>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800299a:	f000 f8a5 	bl	8002ae8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
  
}  
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000438 	.word	0x20000438
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <FLASH_Program_DoubleWord+0x60>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <FLASH_Program_DoubleWord+0x60>)
 80029c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <FLASH_Program_DoubleWord+0x60>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <FLASH_Program_DoubleWord+0x60>)
 80029d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <FLASH_Program_DoubleWord+0x60>)
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <FLASH_Program_DoubleWord+0x60>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80029ea:	f3bf 8f6f 	isb	sy
}
 80029ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80029f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	000a      	movs	r2, r1
 80029fe:	2300      	movs	r3, #0
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	3104      	adds	r1, #4
 8002a04:	4613      	mov	r3, r2
 8002a06:	600b      	str	r3, [r1, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	40023c00 	.word	0x40023c00

08002a18 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <FLASH_Program_Word+0x40>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <FLASH_Program_Word+0x40>)
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <FLASH_Program_Word+0x40>)
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <FLASH_Program_Word+0x40>)
 8002a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a3a:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <FLASH_Program_Word+0x40>)
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <FLASH_Program_Word+0x40>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	601a      	str	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40023c00 	.word	0x40023c00

08002a5c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <FLASH_Program_HalfWord+0x44>)
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <FLASH_Program_HalfWord+0x44>)
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <FLASH_Program_HalfWord+0x44>)
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <FLASH_Program_HalfWord+0x44>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <FLASH_Program_HalfWord+0x44>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	4a06      	ldr	r2, [pc, #24]	; (8002aa0 <FLASH_Program_HalfWord+0x44>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	801a      	strh	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00

08002aa4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <FLASH_Program_Byte+0x40>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <FLASH_Program_Byte+0x40>)
 8002ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <FLASH_Program_Byte+0x40>)
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <FLASH_Program_Byte+0x40>)
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <FLASH_Program_Byte+0x40>)
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <FLASH_Program_Byte+0x40>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	701a      	strb	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00

08002ae8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002aec:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002af8:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f043 0310 	orr.w	r3, r3, #16
 8002b00:	4a2b      	ldr	r2, [pc, #172]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b02:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002b04:	4b29      	ldr	r3, [pc, #164]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b06:	2210      	movs	r2, #16
 8002b08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002b0a:	4b28      	ldr	r3, [pc, #160]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f043 0308 	orr.w	r3, r3, #8
 8002b1e:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b20:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b24:	2220      	movs	r2, #32
 8002b26:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002b28:	4b20      	ldr	r3, [pc, #128]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002b34:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002b46:	4b19      	ldr	r3, [pc, #100]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f043 0302 	orr.w	r3, r3, #2
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b5c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b7a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b82:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f043 0320 	orr.w	r3, r3, #32
 8002b98:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <FLASH_SetErrorCode+0xc8>)
 8002b9a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <FLASH_SetErrorCode+0xc4>)
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	60da      	str	r2, [r3, #12]
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40023c00 	.word	0x40023c00
 8002bb0:	20000438 	.word	0x20000438

08002bb4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bc6:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_FLASHEx_Erase+0xdc>)
 8002bc8:	7e1b      	ldrb	r3, [r3, #24]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_FLASHEx_Erase+0x1e>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e05a      	b.n	8002c88 <HAL_FLASHEx_Erase+0xd4>
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <HAL_FLASHEx_Erase+0xdc>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bdc:	f7ff feaa 	bl	8002934 <FLASH_WaitForLastOperation>
 8002be0:	4603      	mov	r3, r0
 8002be2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d14a      	bne.n	8002c80 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d117      	bne.n	8002c2a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f000 f846 	bl	8002c98 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c10:	f7ff fe90 	bl	8002934 <FLASH_WaitForLastOperation>
 8002c14:	4603      	mov	r3, r0
 8002c16:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_FLASHEx_Erase+0xe0>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <HAL_FLASHEx_Erase+0xe0>)
 8002c1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	6113      	str	r3, [r2, #16]
 8002c28:	e028      	b.n	8002c7c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	e01c      	b.n	8002c6c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4619      	mov	r1, r3
 8002c3a:	68b8      	ldr	r0, [r7, #8]
 8002c3c:	f000 f866 	bl	8002d0c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c44:	f7ff fe76 	bl	8002934 <FLASH_WaitForLastOperation>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_FLASHEx_Erase+0xe0>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <HAL_FLASHEx_Erase+0xe0>)
 8002c52:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002c56:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	601a      	str	r2, [r3, #0]
          break;
 8002c64:	e00a      	b.n	8002c7c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4413      	add	r3, r2
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3da      	bcc.n	8002c32 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002c7c:	f000 f894 	bl	8002da8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_FLASHEx_Erase+0xdc>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	761a      	strb	r2, [r3, #24]

  return status;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000438 	.word	0x20000438
 8002c94:	40023c00 	.word	0x40023c00

08002c98 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <FLASH_MassErase+0x70>)
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <FLASH_MassErase+0x70>)
 8002caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cae:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d108      	bne.n	8002cc8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <FLASH_MassErase+0x70>)
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <FLASH_MassErase+0x70>)
 8002cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	6113      	str	r3, [r2, #16]
 8002cc6:	e00f      	b.n	8002ce8 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d106      	bne.n	8002cdc <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <FLASH_MassErase+0x70>)
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <FLASH_MassErase+0x70>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	6113      	str	r3, [r2, #16]
 8002cda:	e005      	b.n	8002ce8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <FLASH_MassErase+0x70>)
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <FLASH_MassErase+0x70>)
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <FLASH_MassErase+0x70>)
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	4a05      	ldr	r2, [pc, #20]	; (8002d08 <FLASH_MassErase+0x70>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6113      	str	r3, [r2, #16]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00

08002d0c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	e010      	b.n	8002d4a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d103      	bne.n	8002d36 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e009      	b.n	8002d4a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d103      	bne.n	8002d44 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	e002      	b.n	8002d4a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002d44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b0b      	cmp	r3, #11
 8002d4e:	d902      	bls.n	8002d56 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <FLASH_Erase_Sector+0x98>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <FLASH_Erase_Sector+0x98>)
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <FLASH_Erase_Sector+0x98>)
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	490f      	ldr	r1, [pc, #60]	; (8002da4 <FLASH_Erase_Sector+0x98>)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <FLASH_Erase_Sector+0x98>)
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <FLASH_Erase_Sector+0x98>)
 8002d74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <FLASH_Erase_Sector+0x98>)
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4313      	orrs	r3, r2
 8002d84:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <FLASH_Erase_Sector+0x98>)
 8002d86:	f043 0302 	orr.w	r3, r3, #2
 8002d8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <FLASH_Erase_Sector+0x98>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <FLASH_Erase_Sector+0x98>)
 8002d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d96:	6113      	str	r3, [r2, #16]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40023c00 	.word	0x40023c00

08002da8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002dbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dc2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002dca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dda:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d017      	beq.n	8002e24 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dfe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e16:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <FLASH_FlushCaches+0x88>)
 8002e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e22:	6013      	str	r3, [r2, #0]
  }
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023c00 	.word	0x40023c00

08002e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b089      	sub	sp, #36	; 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	e177      	b.n	8003140 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e50:	2201      	movs	r2, #1
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	f040 8166 	bne.w	800313a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d005      	beq.n	8002e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d130      	bne.n	8002ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2203      	movs	r2, #3
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 0201 	and.w	r2, r3, #1
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d017      	beq.n	8002f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2203      	movs	r2, #3
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d123      	bne.n	8002f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	08da      	lsrs	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3208      	adds	r2, #8
 8002f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	220f      	movs	r2, #15
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	08da      	lsrs	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3208      	adds	r2, #8
 8002f72:	69b9      	ldr	r1, [r7, #24]
 8002f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0203 	and.w	r2, r3, #3
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80c0 	beq.w	800313a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	4b66      	ldr	r3, [pc, #408]	; (8003158 <HAL_GPIO_Init+0x324>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	4a65      	ldr	r2, [pc, #404]	; (8003158 <HAL_GPIO_Init+0x324>)
 8002fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fca:	4b63      	ldr	r3, [pc, #396]	; (8003158 <HAL_GPIO_Init+0x324>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fd6:	4a61      	ldr	r2, [pc, #388]	; (800315c <HAL_GPIO_Init+0x328>)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	3302      	adds	r3, #2
 8002fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	220f      	movs	r2, #15
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a58      	ldr	r2, [pc, #352]	; (8003160 <HAL_GPIO_Init+0x32c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d037      	beq.n	8003072 <HAL_GPIO_Init+0x23e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a57      	ldr	r2, [pc, #348]	; (8003164 <HAL_GPIO_Init+0x330>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d031      	beq.n	800306e <HAL_GPIO_Init+0x23a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a56      	ldr	r2, [pc, #344]	; (8003168 <HAL_GPIO_Init+0x334>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d02b      	beq.n	800306a <HAL_GPIO_Init+0x236>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a55      	ldr	r2, [pc, #340]	; (800316c <HAL_GPIO_Init+0x338>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d025      	beq.n	8003066 <HAL_GPIO_Init+0x232>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a54      	ldr	r2, [pc, #336]	; (8003170 <HAL_GPIO_Init+0x33c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01f      	beq.n	8003062 <HAL_GPIO_Init+0x22e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a53      	ldr	r2, [pc, #332]	; (8003174 <HAL_GPIO_Init+0x340>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d019      	beq.n	800305e <HAL_GPIO_Init+0x22a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a52      	ldr	r2, [pc, #328]	; (8003178 <HAL_GPIO_Init+0x344>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <HAL_GPIO_Init+0x226>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a51      	ldr	r2, [pc, #324]	; (800317c <HAL_GPIO_Init+0x348>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00d      	beq.n	8003056 <HAL_GPIO_Init+0x222>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a50      	ldr	r2, [pc, #320]	; (8003180 <HAL_GPIO_Init+0x34c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d007      	beq.n	8003052 <HAL_GPIO_Init+0x21e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4f      	ldr	r2, [pc, #316]	; (8003184 <HAL_GPIO_Init+0x350>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d101      	bne.n	800304e <HAL_GPIO_Init+0x21a>
 800304a:	2309      	movs	r3, #9
 800304c:	e012      	b.n	8003074 <HAL_GPIO_Init+0x240>
 800304e:	230a      	movs	r3, #10
 8003050:	e010      	b.n	8003074 <HAL_GPIO_Init+0x240>
 8003052:	2308      	movs	r3, #8
 8003054:	e00e      	b.n	8003074 <HAL_GPIO_Init+0x240>
 8003056:	2307      	movs	r3, #7
 8003058:	e00c      	b.n	8003074 <HAL_GPIO_Init+0x240>
 800305a:	2306      	movs	r3, #6
 800305c:	e00a      	b.n	8003074 <HAL_GPIO_Init+0x240>
 800305e:	2305      	movs	r3, #5
 8003060:	e008      	b.n	8003074 <HAL_GPIO_Init+0x240>
 8003062:	2304      	movs	r3, #4
 8003064:	e006      	b.n	8003074 <HAL_GPIO_Init+0x240>
 8003066:	2303      	movs	r3, #3
 8003068:	e004      	b.n	8003074 <HAL_GPIO_Init+0x240>
 800306a:	2302      	movs	r3, #2
 800306c:	e002      	b.n	8003074 <HAL_GPIO_Init+0x240>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_GPIO_Init+0x240>
 8003072:	2300      	movs	r3, #0
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	f002 0203 	and.w	r2, r2, #3
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	4093      	lsls	r3, r2
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003084:	4935      	ldr	r1, [pc, #212]	; (800315c <HAL_GPIO_Init+0x328>)
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3302      	adds	r3, #2
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003092:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <HAL_GPIO_Init+0x354>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030b6:	4a34      	ldr	r2, [pc, #208]	; (8003188 <HAL_GPIO_Init+0x354>)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030bc:	4b32      	ldr	r3, [pc, #200]	; (8003188 <HAL_GPIO_Init+0x354>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e0:	4a29      	ldr	r2, [pc, #164]	; (8003188 <HAL_GPIO_Init+0x354>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030e6:	4b28      	ldr	r3, [pc, #160]	; (8003188 <HAL_GPIO_Init+0x354>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800310a:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <HAL_GPIO_Init+0x354>)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <HAL_GPIO_Init+0x354>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <HAL_GPIO_Init+0x354>)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3301      	adds	r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b0f      	cmp	r3, #15
 8003144:	f67f ae84 	bls.w	8002e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	40013800 	.word	0x40013800
 8003160:	40020000 	.word	0x40020000
 8003164:	40020400 	.word	0x40020400
 8003168:	40020800 	.word	0x40020800
 800316c:	40020c00 	.word	0x40020c00
 8003170:	40021000 	.word	0x40021000
 8003174:	40021400 	.word	0x40021400
 8003178:	40021800 	.word	0x40021800
 800317c:	40021c00 	.word	0x40021c00
 8003180:	40022000 	.word	0x40022000
 8003184:	40022400 	.word	0x40022400
 8003188:	40013c00 	.word	0x40013c00

0800318c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e034      	b.n	8003208 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80031a6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f245 5255 	movw	r2, #21845	; 0x5555
 80031b0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6852      	ldr	r2, [r2, #4]
 80031ba:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6892      	ldr	r2, [r2, #8]
 80031c4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80031c6:	f7ff f91d 	bl	8002404 <HAL_GetTick>
 80031ca:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031cc:	e00f      	b.n	80031ee <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80031ce:	f7ff f919 	bl	8002404 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b31      	cmp	r3, #49	; 0x31
 80031da:	d908      	bls.n	80031ee <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e00c      	b.n	8003208 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e8      	bne.n	80031ce <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003204:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003220:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e267      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d075      	beq.n	800333a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800324e:	4b88      	ldr	r3, [pc, #544]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b04      	cmp	r3, #4
 8003258:	d00c      	beq.n	8003274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325a:	4b85      	ldr	r3, [pc, #532]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003262:	2b08      	cmp	r3, #8
 8003264:	d112      	bne.n	800328c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003266:	4b82      	ldr	r3, [pc, #520]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003272:	d10b      	bne.n	800328c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	4b7e      	ldr	r3, [pc, #504]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d05b      	beq.n	8003338 <HAL_RCC_OscConfig+0x108>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d157      	bne.n	8003338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e242      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d106      	bne.n	80032a4 <HAL_RCC_OscConfig+0x74>
 8003296:	4b76      	ldr	r3, [pc, #472]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a75      	ldr	r2, [pc, #468]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e01d      	b.n	80032e0 <HAL_RCC_OscConfig+0xb0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x98>
 80032ae:	4b70      	ldr	r3, [pc, #448]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6f      	ldr	r2, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b6d      	ldr	r3, [pc, #436]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6c      	ldr	r2, [pc, #432]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0xb0>
 80032c8:	4b69      	ldr	r3, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a68      	ldr	r2, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a65      	ldr	r2, [pc, #404]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7ff f88c 	bl	8002404 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f0:	f7ff f888 	bl	8002404 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e207      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0xc0>
 800330e:	e014      	b.n	800333a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7ff f878 	bl	8002404 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff f874 	bl	8002404 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e1f3      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0xe8>
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d063      	beq.n	800340e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003346:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800335a:	2b08      	cmp	r3, #8
 800335c:	d11c      	bne.n	8003398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335e:	4b44      	ldr	r3, [pc, #272]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d116      	bne.n	8003398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	4b41      	ldr	r3, [pc, #260]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_RCC_OscConfig+0x152>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d001      	beq.n	8003382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e1c7      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003382:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4937      	ldr	r1, [pc, #220]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	e03a      	b.n	800340e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d020      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a0:	4b34      	ldr	r3, [pc, #208]	; (8003474 <HAL_RCC_OscConfig+0x244>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7ff f82d 	bl	8002404 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ae:	f7ff f829 	bl	8002404 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e1a8      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4925      	ldr	r1, [pc, #148]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
 80033e0:	e015      	b.n	800340e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e2:	4b24      	ldr	r3, [pc, #144]	; (8003474 <HAL_RCC_OscConfig+0x244>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7ff f80c 	bl	8002404 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f0:	f7ff f808 	bl	8002404 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e187      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d036      	beq.n	8003488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d016      	beq.n	8003450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <HAL_RCC_OscConfig+0x248>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fe ffec 	bl	8002404 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003430:	f7fe ffe8 	bl	8002404 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e167      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x200>
 800344e:	e01b      	b.n	8003488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCC_OscConfig+0x248>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003456:	f7fe ffd5 	bl	8002404 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	e00e      	b.n	800347c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800345e:	f7fe ffd1 	bl	8002404 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d907      	bls.n	800347c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e150      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
 8003470:	40023800 	.word	0x40023800
 8003474:	42470000 	.word	0x42470000
 8003478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347c:	4b88      	ldr	r3, [pc, #544]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800347e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1ea      	bne.n	800345e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8097 	beq.w	80035c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349a:	4b81      	ldr	r3, [pc, #516]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	4b7d      	ldr	r3, [pc, #500]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4a7c      	ldr	r2, [pc, #496]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b4:	6413      	str	r3, [r2, #64]	; 0x40
 80034b6:	4b7a      	ldr	r3, [pc, #488]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c6:	4b77      	ldr	r3, [pc, #476]	; (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d2:	4b74      	ldr	r3, [pc, #464]	; (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a73      	ldr	r2, [pc, #460]	; (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034de:	f7fe ff91 	bl	8002404 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fe ff8d 	bl	8002404 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e10c      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x2ea>
 800350c:	4b64      	ldr	r3, [pc, #400]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	4a63      	ldr	r2, [pc, #396]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
 8003518:	e01c      	b.n	8003554 <HAL_RCC_OscConfig+0x324>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b05      	cmp	r3, #5
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x30c>
 8003522:	4b5f      	ldr	r3, [pc, #380]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a5e      	ldr	r2, [pc, #376]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
 800352e:	4b5c      	ldr	r3, [pc, #368]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	4a5b      	ldr	r2, [pc, #364]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6713      	str	r3, [r2, #112]	; 0x70
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0x324>
 800353c:	4b58      	ldr	r3, [pc, #352]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	4a57      	ldr	r2, [pc, #348]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	6713      	str	r3, [r2, #112]	; 0x70
 8003548:	4b55      	ldr	r3, [pc, #340]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	4a54      	ldr	r2, [pc, #336]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800354e:	f023 0304 	bic.w	r3, r3, #4
 8003552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d015      	beq.n	8003588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe ff52 	bl	8002404 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fe ff4e 	bl	8002404 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0cb      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357a:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0ee      	beq.n	8003564 <HAL_RCC_OscConfig+0x334>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7fe ff3c 	bl	8002404 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fe ff38 	bl	8002404 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	; 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0b5      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a6:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ee      	bne.n	8003590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	4a38      	ldr	r2, [pc, #224]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a1 	beq.w	8003710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ce:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d05c      	beq.n	8003694 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d141      	bne.n	8003666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_RCC_OscConfig+0x478>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fe ff0c 	bl	8002404 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe ff08 	bl	8002404 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e087      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	3b01      	subs	r3, #1
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	491b      	ldr	r1, [pc, #108]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x478>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7fe fee1 	bl	8002404 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003646:	f7fe fedd 	bl	8002404 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e05c      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x416>
 8003664:	e054      	b.n	8003710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <HAL_RCC_OscConfig+0x478>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe feca 	bl	8002404 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fec6 	bl	8002404 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e045      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x444>
 8003692:	e03d      	b.n	8003710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d107      	bne.n	80036ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e038      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40007000 	.word	0x40007000
 80036a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x4ec>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d028      	beq.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d121      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d11a      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036dc:	4013      	ands	r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d111      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	3b01      	subs	r3, #1
 80036f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d107      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0cc      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b68      	ldr	r3, [pc, #416]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d90c      	bls.n	800375c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b8      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003774:	4b59      	ldr	r3, [pc, #356]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a52      	ldr	r2, [pc, #328]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4b50      	ldr	r3, [pc, #320]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	494d      	ldr	r1, [pc, #308]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d044      	beq.n	8003840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d119      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d003      	beq.n	80037de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e067      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fe:	4b37      	ldr	r3, [pc, #220]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4934      	ldr	r1, [pc, #208]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003810:	f7fe fdf8 	bl	8002404 <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003818:	f7fe fdf4 	bl	8002404 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e04f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 020c 	and.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	429a      	cmp	r2, r3
 800383e:	d1eb      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d20c      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4916      	ldr	r1, [pc, #88]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	490e      	ldr	r1, [pc, #56]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038a6:	f000 f821 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	490a      	ldr	r1, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	5ccb      	ldrb	r3, [r1, r3]
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fd58 	bl	800237c <HAL_InitTick>

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023c00 	.word	0x40023c00
 80038dc:	40023800 	.word	0x40023800
 80038e0:	08006184 	.word	0x08006184
 80038e4:	20000020 	.word	0x20000020
 80038e8:	20000028 	.word	0x20000028

080038ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f0:	b090      	sub	sp, #64	; 0x40
 80038f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
 80038f8:	2300      	movs	r3, #0
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038fc:	2300      	movs	r3, #0
 80038fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003904:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d00d      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x40>
 8003910:	2b08      	cmp	r3, #8
 8003912:	f200 80a1 	bhi.w	8003a58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x34>
 800391a:	2b04      	cmp	r3, #4
 800391c:	d003      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x3a>
 800391e:	e09b      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003922:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003924:	e09b      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003926:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003928:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800392a:	e098      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800392c:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003936:	4b4d      	ldr	r3, [pc, #308]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d028      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003942:	4b4a      	ldr	r3, [pc, #296]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	2200      	movs	r2, #0
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	627a      	str	r2, [r7, #36]	; 0x24
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003954:	2100      	movs	r1, #0
 8003956:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003958:	fb03 f201 	mul.w	r2, r3, r1
 800395c:	2300      	movs	r3, #0
 800395e:	fb00 f303 	mul.w	r3, r0, r3
 8003962:	4413      	add	r3, r2
 8003964:	4a43      	ldr	r2, [pc, #268]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003966:	fba0 1202 	umull	r1, r2, r0, r2
 800396a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800396c:	460a      	mov	r2, r1
 800396e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003972:	4413      	add	r3, r2
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	2200      	movs	r2, #0
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	61fa      	str	r2, [r7, #28]
 800397e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003986:	f7fc fc9b 	bl	80002c0 <__aeabi_uldivmod>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4613      	mov	r3, r2
 8003990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003992:	e053      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003994:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	2200      	movs	r2, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	617a      	str	r2, [r7, #20]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039a6:	f04f 0b00 	mov.w	fp, #0
 80039aa:	4652      	mov	r2, sl
 80039ac:	465b      	mov	r3, fp
 80039ae:	f04f 0000 	mov.w	r0, #0
 80039b2:	f04f 0100 	mov.w	r1, #0
 80039b6:	0159      	lsls	r1, r3, #5
 80039b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039bc:	0150      	lsls	r0, r2, #5
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	ebb2 080a 	subs.w	r8, r2, sl
 80039c6:	eb63 090b 	sbc.w	r9, r3, fp
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039de:	ebb2 0408 	subs.w	r4, r2, r8
 80039e2:	eb63 0509 	sbc.w	r5, r3, r9
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	00eb      	lsls	r3, r5, #3
 80039f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f4:	00e2      	lsls	r2, r4, #3
 80039f6:	4614      	mov	r4, r2
 80039f8:	461d      	mov	r5, r3
 80039fa:	eb14 030a 	adds.w	r3, r4, sl
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	eb45 030b 	adc.w	r3, r5, fp
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a12:	4629      	mov	r1, r5
 8003a14:	028b      	lsls	r3, r1, #10
 8003a16:	4621      	mov	r1, r4
 8003a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	028a      	lsls	r2, r1, #10
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a26:	2200      	movs	r2, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	60fa      	str	r2, [r7, #12]
 8003a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a30:	f7fc fc46 	bl	80002c0 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4613      	mov	r3, r2
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	3301      	adds	r3, #1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a56:	e002      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3740      	adds	r7, #64	; 0x40
 8003a64:	46bd      	mov	sp, r7
 8003a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	00f42400 	.word	0x00f42400
 8003a74:	017d7840 	.word	0x017d7840

08003a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000020 	.word	0x20000020

08003a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a94:	f7ff fff0 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0a9b      	lsrs	r3, r3, #10
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	08006194 	.word	0x08006194

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003abc:	f7ff ffdc 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0b5b      	lsrs	r3, r3, #13
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	08006194 	.word	0x08006194

08003ae0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003ae6:	f7fe fc8d 	bl	8002404 <HAL_GetTick>
 8003aea:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003aec:	4b72      	ldr	r3, [pc, #456]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a71      	ldr	r2, [pc, #452]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fe fc83 	bl	8002404 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0d0      	b.n	8003cae <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003b18:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a66      	ldr	r2, [pc, #408]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b24:	f7fe fc6e 	bl	8002404 <HAL_GetTick>
 8003b28:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003b2a:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b32:	f7fe fc67 	bl	8002404 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e0b2      	b.n	8003cae <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b48:	4b5b      	ldr	r3, [pc, #364]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ee      	bne.n	8003b32 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b54:	f7fe fc56 	bl	8002404 <HAL_GetTick>
 8003b58:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003b5a:	4b57      	ldr	r3, [pc, #348]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a56      	ldr	r2, [pc, #344]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003b60:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003b64:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fe fc4c 	bl	8002404 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e099      	b.n	8003cae <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b7a:	4b4f      	ldr	r3, [pc, #316]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b86:	f7fe fc3d 	bl	8002404 <HAL_GetTick>
 8003b8a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b8c:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a49      	ldr	r2, [pc, #292]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9a:	f7fe fc33 	bl	8002404 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e080      	b.n	8003cae <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003bac:	4b42      	ldr	r3, [pc, #264]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bb8:	f7fe fc24 	bl	8002404 <HAL_GetTick>
 8003bbc:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003bbe:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a3d      	ldr	r2, [pc, #244]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003bc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bcc:	f7fe fc1a 	bl	8002404 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e067      	b.n	8003cae <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bea:	f7fe fc0b 	bl	8002404 <HAL_GetTick>
 8003bee:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003bf0:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a30      	ldr	r2, [pc, #192]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bfe:	f7fe fc01 	bl	8002404 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e04e      	b.n	8003cae <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003c10:	4b29      	ldr	r3, [pc, #164]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f0      	bne.n	8003bfe <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003c1c:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c1e:	4a27      	ldr	r2, [pc, #156]	; (8003cbc <HAL_RCC_DeInit+0x1dc>)
 8003c20:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003c22:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c24:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <HAL_RCC_DeInit+0x1e0>)
 8003c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c2c:	4a24      	ldr	r2, [pc, #144]	; (8003cc0 <HAL_RCC_DeInit+0x1e0>)
 8003c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003c32:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c38:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c3c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	4a1a      	ldr	r2, [pc, #104]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c54:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c5c:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003c60:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c6c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4a11      	ldr	r2, [pc, #68]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <HAL_RCC_DeInit+0x1d8>)
 8003c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c90:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCC_DeInit+0x1e4>)
 8003c94:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <HAL_RCC_DeInit+0x1e8>)
 8003c96:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_RCC_DeInit+0x1ec>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe fb6d 	bl	800237c <HAL_InitTick>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	04003010 	.word	0x04003010
 8003cc0:	24003000 	.word	0x24003000
 8003cc4:	20000020 	.word	0x20000020
 8003cc8:	00f42400 	.word	0x00f42400
 8003ccc:	20000028 	.word	0x20000028

08003cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e041      	b.n	8003d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd fe6a 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f000 f9fe 	bl	8004110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d001      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e04e      	b.n	8003e26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <HAL_TIM_Base_Start_IT+0xc4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d022      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db2:	d01d      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HAL_TIM_Base_Start_IT+0xc8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d018      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_TIM_Base_Start_IT+0xcc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00e      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d111      	bne.n	8003e14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d010      	beq.n	8003e24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0201 	orr.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e12:	e007      	b.n	8003e24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40001800 	.word	0x40001800

08003e50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6a1a      	ldr	r2, [r3, #32]
 8003e6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10f      	bne.n	8003e98 <HAL_TIM_Base_Stop_IT+0x48>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	f240 4344 	movw	r3, #1092	; 0x444
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d107      	bne.n	8003e98 <HAL_TIM_Base_Stop_IT+0x48>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d122      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d11b      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f06f 0202 	mvn.w	r2, #2
 8003eda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8ee 	bl	80040d2 <HAL_TIM_IC_CaptureCallback>
 8003ef6:	e005      	b.n	8003f04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8e0 	bl	80040be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f8f1 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d122      	bne.n	8003f5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d11b      	bne.n	8003f5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f06f 0204 	mvn.w	r2, #4
 8003f2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8c4 	bl	80040d2 <HAL_TIM_IC_CaptureCallback>
 8003f4a:	e005      	b.n	8003f58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f8b6 	bl	80040be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8c7 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d122      	bne.n	8003fb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d11b      	bne.n	8003fb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f06f 0208 	mvn.w	r2, #8
 8003f82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2204      	movs	r2, #4
 8003f88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f89a 	bl	80040d2 <HAL_TIM_IC_CaptureCallback>
 8003f9e:	e005      	b.n	8003fac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f88c 	bl	80040be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f89d 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b10      	cmp	r3, #16
 8003fbe:	d122      	bne.n	8004006 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d11b      	bne.n	8004006 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f06f 0210 	mvn.w	r2, #16
 8003fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2208      	movs	r2, #8
 8003fdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f870 	bl	80040d2 <HAL_TIM_IC_CaptureCallback>
 8003ff2:	e005      	b.n	8004000 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f862 	bl	80040be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f873 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10e      	bne.n	8004032 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f06f 0201 	mvn.w	r2, #1
 800402a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fd fcf7 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403c:	2b80      	cmp	r3, #128	; 0x80
 800403e:	d10e      	bne.n	800405e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	2b80      	cmp	r3, #128	; 0x80
 800404c:	d107      	bne.n	800405e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f97f 	bl	800435c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d10e      	bne.n	800408a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d107      	bne.n	800408a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f838 	bl	80040fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b20      	cmp	r3, #32
 8004096:	d10e      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d107      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0220 	mvn.w	r2, #32
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f949 	bl	8004348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a40      	ldr	r2, [pc, #256]	; (8004224 <TIM_Base_SetConfig+0x114>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412e:	d00f      	beq.n	8004150 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a3d      	ldr	r2, [pc, #244]	; (8004228 <TIM_Base_SetConfig+0x118>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00b      	beq.n	8004150 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a3c      	ldr	r2, [pc, #240]	; (800422c <TIM_Base_SetConfig+0x11c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d007      	beq.n	8004150 <TIM_Base_SetConfig+0x40>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <TIM_Base_SetConfig+0x120>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_Base_SetConfig+0x40>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a3a      	ldr	r2, [pc, #232]	; (8004234 <TIM_Base_SetConfig+0x124>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d108      	bne.n	8004162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2f      	ldr	r2, [pc, #188]	; (8004224 <TIM_Base_SetConfig+0x114>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d02b      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004170:	d027      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2c      	ldr	r2, [pc, #176]	; (8004228 <TIM_Base_SetConfig+0x118>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d023      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2b      	ldr	r2, [pc, #172]	; (800422c <TIM_Base_SetConfig+0x11c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01f      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <TIM_Base_SetConfig+0x120>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01b      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a29      	ldr	r2, [pc, #164]	; (8004234 <TIM_Base_SetConfig+0x124>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d017      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a28      	ldr	r2, [pc, #160]	; (8004238 <TIM_Base_SetConfig+0x128>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a27      	ldr	r2, [pc, #156]	; (800423c <TIM_Base_SetConfig+0x12c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00f      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a26      	ldr	r2, [pc, #152]	; (8004240 <TIM_Base_SetConfig+0x130>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00b      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a25      	ldr	r2, [pc, #148]	; (8004244 <TIM_Base_SetConfig+0x134>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a24      	ldr	r2, [pc, #144]	; (8004248 <TIM_Base_SetConfig+0x138>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_Base_SetConfig+0xb2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a23      	ldr	r2, [pc, #140]	; (800424c <TIM_Base_SetConfig+0x13c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d108      	bne.n	80041d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <TIM_Base_SetConfig+0x114>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_Base_SetConfig+0xf8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <TIM_Base_SetConfig+0x124>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d103      	bne.n	8004210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	615a      	str	r2, [r3, #20]
}
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40010000 	.word	0x40010000
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800
 8004230:	40000c00 	.word	0x40000c00
 8004234:	40010400 	.word	0x40010400
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800
 8004244:	40001800 	.word	0x40001800
 8004248:	40001c00 	.word	0x40001c00
 800424c:	40002000 	.word	0x40002000

08004250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e05a      	b.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a21      	ldr	r2, [pc, #132]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d022      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b4:	d01d      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d018      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1a      	ldr	r2, [pc, #104]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a17      	ldr	r2, [pc, #92]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a15      	ldr	r2, [pc, #84]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d10c      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	4313      	orrs	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40000c00 	.word	0x40000c00
 800433c:	40010400 	.word	0x40010400
 8004340:	40014000 	.word	0x40014000
 8004344:	40001800 	.word	0x40001800

08004348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e03f      	b.n	8004402 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd fbd8 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fe05 	bl	8004fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	4613      	mov	r3, r2
 8004416:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b20      	cmp	r3, #32
 8004422:	d130      	bne.n	8004486 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_UART_Transmit_IT+0x26>
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e029      	b.n	8004488 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_UART_Transmit_IT+0x38>
 800443e:	2302      	movs	r3, #2
 8004440:	e022      	b.n	8004488 <HAL_UART_Transmit_IT+0x7e>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2221      	movs	r2, #33	; 0x21
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004480:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e000      	b.n	8004488 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d11d      	bne.n	80044ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_UART_Receive_IT+0x26>
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e016      	b.n	80044ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_UART_Receive_IT+0x38>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e00f      	b.n	80044ec <HAL_UART_Receive_IT+0x58>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	461a      	mov	r2, r3
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fb97 	bl	8004c14 <UART_Start_Receive_IT>
 80044e6:	4603      	mov	r3, r0
 80044e8:	e000      	b.n	80044ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b0a0      	sub	sp, #128	; 0x80
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800450c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8004512:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800451c:	66ba      	str	r2, [r7, #104]	; 0x68
 800451e:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004522:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800452a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3314      	adds	r3, #20
 8004536:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	67bb      	str	r3, [r7, #120]	; 0x78
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3314      	adds	r3, #20
 800454e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004550:	657a      	str	r2, [r7, #84]	; 0x54
 8004552:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004556:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800455e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e5      	bne.n	8004530 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	2b01      	cmp	r3, #1
 800456a:	d119      	bne.n	80045a0 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	f023 0310 	bic.w	r3, r3, #16
 8004582:	677b      	str	r3, [r7, #116]	; 0x74
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800458c:	643a      	str	r2, [r7, #64]	; 0x40
 800458e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e5      	bne.n	800456c <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d136      	bne.n	800461c <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3314      	adds	r3, #20
 80045b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c4:	673b      	str	r3, [r7, #112]	; 0x70
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80045ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e5      	bne.n	80045ae <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d018      	beq.n	800461c <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ee:	2200      	movs	r2, #0
 80045f0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe f877 	bl	80026ea <HAL_DMA_Abort>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00c      	beq.n	800461c <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe f901 	bl	800280e <HAL_DMA_GetError>
 800460c:	4603      	mov	r3, r0
 800460e:	2b20      	cmp	r3, #32
 8004610:	d104      	bne.n	800461c <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2210      	movs	r2, #16
 8004616:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e052      	b.n	80046c2 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b40      	cmp	r3, #64	; 0x40
 8004628:	d136      	bne.n	8004698 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	60bb      	str	r3, [r7, #8]
   return(result);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004640:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800464a:	61ba      	str	r2, [r7, #24]
 800464c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6979      	ldr	r1, [r7, #20]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	613b      	str	r3, [r7, #16]
   return(result);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e5      	bne.n	800462a <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	2b00      	cmp	r3, #0
 8004664:	d018      	beq.n	8004698 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	2200      	movs	r2, #0
 800466c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe f839 	bl	80026ea <HAL_DMA_Abort>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00c      	beq.n	8004698 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe f8c3 	bl	800280e <HAL_DMA_GetError>
 8004688:	4603      	mov	r3, r0
 800468a:	2b20      	cmp	r3, #32
 800468c:	d104      	bne.n	8004698 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2210      	movs	r2, #16
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e014      	b.n	80046c2 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3780      	adds	r7, #128	; 0x80
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b0ba      	sub	sp, #232	; 0xe8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800470a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10f      	bne.n	8004732 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_UART_IRQHandler+0x66>
 800471e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fb8f 	bl	8004e4e <UART_Receive_IT>
      return;
 8004730:	e256      	b.n	8004be0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80de 	beq.w	80048f8 <HAL_UART_IRQHandler+0x22c>
 800473c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80d1 	beq.w	80048f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_UART_IRQHandler+0xae>
 8004762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f043 0201 	orr.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <HAL_UART_IRQHandler+0xd2>
 8004786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f043 0202 	orr.w	r2, r3, #2
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_UART_IRQHandler+0xf6>
 80047aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f043 0204 	orr.w	r2, r3, #4
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <HAL_UART_IRQHandler+0x126>
 80047ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f043 0208 	orr.w	r2, r3, #8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 81ed 	beq.w	8004bd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_UART_IRQHandler+0x14e>
 8004808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fb1a 	bl	8004e4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <HAL_UART_IRQHandler+0x17a>
 800483e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d04f      	beq.n	80048e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa22 	bl	8004c90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d141      	bne.n	80048de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3314      	adds	r3, #20
 8004860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004886:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800488a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800489e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1d9      	bne.n	800485a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d013      	beq.n	80048d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	4a7d      	ldr	r2, [pc, #500]	; (8004aa8 <HAL_UART_IRQHandler+0x3dc>)
 80048b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fd ff85 	bl	80027ca <HAL_DMA_Abort_IT>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d016      	beq.n	80048f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048d0:	4610      	mov	r0, r2
 80048d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d4:	e00e      	b.n	80048f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f986 	bl	8004be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048dc:	e00a      	b.n	80048f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f982 	bl	8004be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e4:	e006      	b.n	80048f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f97e 	bl	8004be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048f2:	e170      	b.n	8004bd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f4:	bf00      	nop
    return;
 80048f6:	e16e      	b.n	8004bd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	f040 814a 	bne.w	8004b96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8143 	beq.w	8004b96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 813c 	beq.w	8004b96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	f040 80b4 	bne.w	8004aac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8140 	beq.w	8004bda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800495e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004962:	429a      	cmp	r2, r3
 8004964:	f080 8139 	bcs.w	8004bda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800496e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497a:	f000 8088 	beq.w	8004a8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800499c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1d9      	bne.n	800497e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e1      	bne.n	80049ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3314      	adds	r3, #20
 8004a0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e3      	bne.n	8004a06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	330c      	adds	r3, #12
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5e:	f023 0310 	bic.w	r3, r3, #16
 8004a62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a70:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e3      	bne.n	8004a4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fd fe2e 	bl	80026ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8ac 	bl	8004bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aa4:	e099      	b.n	8004bda <HAL_UART_IRQHandler+0x50e>
 8004aa6:	bf00      	nop
 8004aa8:	08004d57 	.word	0x08004d57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 808b 	beq.w	8004bde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8086 	beq.w	8004bde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004af6:	647a      	str	r2, [r7, #68]	; 0x44
 8004af8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e3      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	623b      	str	r3, [r7, #32]
   return(result);
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3314      	adds	r3, #20
 8004b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b2e:	633a      	str	r2, [r7, #48]	; 0x30
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e3      	bne.n	8004b0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0310 	bic.w	r3, r3, #16
 8004b66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b74:	61fa      	str	r2, [r7, #28]
 8004b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	69b9      	ldr	r1, [r7, #24]
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	617b      	str	r3, [r7, #20]
   return(result);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e3      	bne.n	8004b50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f834 	bl	8004bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b94:	e023      	b.n	8004bde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x4ea>
 8004ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8e5 	bl	8004d7e <UART_Transmit_IT>
    return;
 8004bb4:	e014      	b.n	8004be0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00e      	beq.n	8004be0 <HAL_UART_IRQHandler+0x514>
 8004bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f925 	bl	8004e1e <UART_EndTransmit_IT>
    return;
 8004bd4:	e004      	b.n	8004be0 <HAL_UART_IRQHandler+0x514>
    return;
 8004bd6:	bf00      	nop
 8004bd8:	e002      	b.n	8004be0 <HAL_UART_IRQHandler+0x514>
      return;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_UART_IRQHandler+0x514>
      return;
 8004bde:	bf00      	nop
  }
}
 8004be0:	37e8      	adds	r7, #232	; 0xe8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop

08004be8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2222      	movs	r2, #34	; 0x22
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c60:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695a      	ldr	r2, [r3, #20]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0220 	orr.w	r2, r2, #32
 8004c80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b095      	sub	sp, #84	; 0x54
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cb8:	643a      	str	r2, [r7, #64]	; 0x40
 8004cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e5      	bne.n	8004c98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3314      	adds	r3, #20
 8004cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e5      	bne.n	8004ccc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d119      	bne.n	8004d3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d28:	61ba      	str	r2, [r7, #24]
 8004d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6979      	ldr	r1, [r7, #20]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	613b      	str	r3, [r7, #16]
   return(result);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e5      	bne.n	8004d08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d4a:	bf00      	nop
 8004d4c:	3754      	adds	r7, #84	; 0x54
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff ff39 	bl	8004be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b21      	cmp	r3, #33	; 0x21
 8004d90:	d13e      	bne.n	8004e10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9a:	d114      	bne.n	8004dc6 <UART_Transmit_IT+0x48>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d110      	bne.n	8004dc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004db8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	621a      	str	r2, [r3, #32]
 8004dc4:	e008      	b.n	8004dd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	1c59      	adds	r1, r3, #1
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6211      	str	r1, [r2, #32]
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4619      	mov	r1, r3
 8004de6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10f      	bne.n	8004e0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dfa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e000      	b.n	8004e12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
  }
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fc fe18 	bl	8001a74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b08c      	sub	sp, #48	; 0x30
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b22      	cmp	r3, #34	; 0x22
 8004e60:	f040 80ab 	bne.w	8004fba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6c:	d117      	bne.n	8004e9e <UART_Receive_IT+0x50>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d113      	bne.n	8004e9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	1c9a      	adds	r2, r3, #2
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e9c:	e026      	b.n	8004eec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb0:	d007      	beq.n	8004ec2 <UART_Receive_IT+0x74>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <UART_Receive_IT+0x82>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e008      	b.n	8004ee2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d15a      	bne.n	8004fb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0220 	bic.w	r2, r2, #32
 8004f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695a      	ldr	r2, [r3, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0201 	bic.w	r2, r2, #1
 8004f2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d135      	bne.n	8004fac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	613b      	str	r3, [r7, #16]
   return(result);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f023 0310 	bic.w	r3, r3, #16
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f66:	623a      	str	r2, [r7, #32]
 8004f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	69f9      	ldr	r1, [r7, #28]
 8004f6c:	6a3a      	ldr	r2, [r7, #32]
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e5      	bne.n	8004f46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d10a      	bne.n	8004f9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fe29 	bl	8004bfc <HAL_UARTEx_RxEventCallback>
 8004faa:	e002      	b.n	8004fb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7fc fd81 	bl	8001ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e002      	b.n	8004fbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e000      	b.n	8004fbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
  }
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3730      	adds	r7, #48	; 0x30
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc8:	b0c0      	sub	sp, #256	; 0x100
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe0:	68d9      	ldr	r1, [r3, #12]
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	ea40 0301 	orr.w	r3, r0, r1
 8004fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	431a      	orrs	r2, r3
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800501c:	f021 010c 	bic.w	r1, r1, #12
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800502a:	430b      	orrs	r3, r1
 800502c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800503a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503e:	6999      	ldr	r1, [r3, #24]
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	ea40 0301 	orr.w	r3, r0, r1
 800504a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b8f      	ldr	r3, [pc, #572]	; (8005290 <UART_SetConfig+0x2cc>)
 8005054:	429a      	cmp	r2, r3
 8005056:	d005      	beq.n	8005064 <UART_SetConfig+0xa0>
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b8d      	ldr	r3, [pc, #564]	; (8005294 <UART_SetConfig+0x2d0>)
 8005060:	429a      	cmp	r2, r3
 8005062:	d104      	bne.n	800506e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005064:	f7fe fd28 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8005068:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800506c:	e003      	b.n	8005076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800506e:	f7fe fd0f 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 8005072:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005080:	f040 810c 	bne.w	800529c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005088:	2200      	movs	r2, #0
 800508a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800508e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005096:	4622      	mov	r2, r4
 8005098:	462b      	mov	r3, r5
 800509a:	1891      	adds	r1, r2, r2
 800509c:	65b9      	str	r1, [r7, #88]	; 0x58
 800509e:	415b      	adcs	r3, r3
 80050a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050a6:	4621      	mov	r1, r4
 80050a8:	eb12 0801 	adds.w	r8, r2, r1
 80050ac:	4629      	mov	r1, r5
 80050ae:	eb43 0901 	adc.w	r9, r3, r1
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050c6:	4690      	mov	r8, r2
 80050c8:	4699      	mov	r9, r3
 80050ca:	4623      	mov	r3, r4
 80050cc:	eb18 0303 	adds.w	r3, r8, r3
 80050d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050d4:	462b      	mov	r3, r5
 80050d6:	eb49 0303 	adc.w	r3, r9, r3
 80050da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050f2:	460b      	mov	r3, r1
 80050f4:	18db      	adds	r3, r3, r3
 80050f6:	653b      	str	r3, [r7, #80]	; 0x50
 80050f8:	4613      	mov	r3, r2
 80050fa:	eb42 0303 	adc.w	r3, r2, r3
 80050fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005108:	f7fb f8da 	bl	80002c0 <__aeabi_uldivmod>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4b61      	ldr	r3, [pc, #388]	; (8005298 <UART_SetConfig+0x2d4>)
 8005112:	fba3 2302 	umull	r2, r3, r3, r2
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	011c      	lsls	r4, r3, #4
 800511a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800511e:	2200      	movs	r2, #0
 8005120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005124:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800512c:	4642      	mov	r2, r8
 800512e:	464b      	mov	r3, r9
 8005130:	1891      	adds	r1, r2, r2
 8005132:	64b9      	str	r1, [r7, #72]	; 0x48
 8005134:	415b      	adcs	r3, r3
 8005136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800513c:	4641      	mov	r1, r8
 800513e:	eb12 0a01 	adds.w	sl, r2, r1
 8005142:	4649      	mov	r1, r9
 8005144:	eb43 0b01 	adc.w	fp, r3, r1
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800515c:	4692      	mov	sl, r2
 800515e:	469b      	mov	fp, r3
 8005160:	4643      	mov	r3, r8
 8005162:	eb1a 0303 	adds.w	r3, sl, r3
 8005166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800516a:	464b      	mov	r3, r9
 800516c:	eb4b 0303 	adc.w	r3, fp, r3
 8005170:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005180:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005188:	460b      	mov	r3, r1
 800518a:	18db      	adds	r3, r3, r3
 800518c:	643b      	str	r3, [r7, #64]	; 0x40
 800518e:	4613      	mov	r3, r2
 8005190:	eb42 0303 	adc.w	r3, r2, r3
 8005194:	647b      	str	r3, [r7, #68]	; 0x44
 8005196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800519a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800519e:	f7fb f88f 	bl	80002c0 <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4611      	mov	r1, r2
 80051a8:	4b3b      	ldr	r3, [pc, #236]	; (8005298 <UART_SetConfig+0x2d4>)
 80051aa:	fba3 2301 	umull	r2, r3, r3, r1
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	2264      	movs	r2, #100	; 0x64
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	1acb      	subs	r3, r1, r3
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051be:	4b36      	ldr	r3, [pc, #216]	; (8005298 <UART_SetConfig+0x2d4>)
 80051c0:	fba3 2302 	umull	r2, r3, r3, r2
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051cc:	441c      	add	r4, r3
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051e0:	4642      	mov	r2, r8
 80051e2:	464b      	mov	r3, r9
 80051e4:	1891      	adds	r1, r2, r2
 80051e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80051e8:	415b      	adcs	r3, r3
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051f0:	4641      	mov	r1, r8
 80051f2:	1851      	adds	r1, r2, r1
 80051f4:	6339      	str	r1, [r7, #48]	; 0x30
 80051f6:	4649      	mov	r1, r9
 80051f8:	414b      	adcs	r3, r1
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005208:	4659      	mov	r1, fp
 800520a:	00cb      	lsls	r3, r1, #3
 800520c:	4651      	mov	r1, sl
 800520e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005212:	4651      	mov	r1, sl
 8005214:	00ca      	lsls	r2, r1, #3
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	4603      	mov	r3, r0
 800521c:	4642      	mov	r2, r8
 800521e:	189b      	adds	r3, r3, r2
 8005220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005224:	464b      	mov	r3, r9
 8005226:	460a      	mov	r2, r1
 8005228:	eb42 0303 	adc.w	r3, r2, r3
 800522c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800523c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005244:	460b      	mov	r3, r1
 8005246:	18db      	adds	r3, r3, r3
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
 800524a:	4613      	mov	r3, r2
 800524c:	eb42 0303 	adc.w	r3, r2, r3
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800525a:	f7fb f831 	bl	80002c0 <__aeabi_uldivmod>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <UART_SetConfig+0x2d4>)
 8005264:	fba3 1302 	umull	r1, r3, r3, r2
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	2164      	movs	r1, #100	; 0x64
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	3332      	adds	r3, #50	; 0x32
 8005276:	4a08      	ldr	r2, [pc, #32]	; (8005298 <UART_SetConfig+0x2d4>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	f003 0207 	and.w	r2, r3, #7
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4422      	add	r2, r4
 800528a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800528c:	e105      	b.n	800549a <UART_SetConfig+0x4d6>
 800528e:	bf00      	nop
 8005290:	40011000 	.word	0x40011000
 8005294:	40011400 	.word	0x40011400
 8005298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800529c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052ae:	4642      	mov	r2, r8
 80052b0:	464b      	mov	r3, r9
 80052b2:	1891      	adds	r1, r2, r2
 80052b4:	6239      	str	r1, [r7, #32]
 80052b6:	415b      	adcs	r3, r3
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052be:	4641      	mov	r1, r8
 80052c0:	1854      	adds	r4, r2, r1
 80052c2:	4649      	mov	r1, r9
 80052c4:	eb43 0501 	adc.w	r5, r3, r1
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	00eb      	lsls	r3, r5, #3
 80052d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052d6:	00e2      	lsls	r2, r4, #3
 80052d8:	4614      	mov	r4, r2
 80052da:	461d      	mov	r5, r3
 80052dc:	4643      	mov	r3, r8
 80052de:	18e3      	adds	r3, r4, r3
 80052e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052e4:	464b      	mov	r3, r9
 80052e6:	eb45 0303 	adc.w	r3, r5, r3
 80052ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800530a:	4629      	mov	r1, r5
 800530c:	008b      	lsls	r3, r1, #2
 800530e:	4621      	mov	r1, r4
 8005310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005314:	4621      	mov	r1, r4
 8005316:	008a      	lsls	r2, r1, #2
 8005318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800531c:	f7fa ffd0 	bl	80002c0 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4b60      	ldr	r3, [pc, #384]	; (80054a8 <UART_SetConfig+0x4e4>)
 8005326:	fba3 2302 	umull	r2, r3, r3, r2
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	011c      	lsls	r4, r3, #4
 800532e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005332:	2200      	movs	r2, #0
 8005334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005338:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800533c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005340:	4642      	mov	r2, r8
 8005342:	464b      	mov	r3, r9
 8005344:	1891      	adds	r1, r2, r2
 8005346:	61b9      	str	r1, [r7, #24]
 8005348:	415b      	adcs	r3, r3
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005350:	4641      	mov	r1, r8
 8005352:	1851      	adds	r1, r2, r1
 8005354:	6139      	str	r1, [r7, #16]
 8005356:	4649      	mov	r1, r9
 8005358:	414b      	adcs	r3, r1
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005368:	4659      	mov	r1, fp
 800536a:	00cb      	lsls	r3, r1, #3
 800536c:	4651      	mov	r1, sl
 800536e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005372:	4651      	mov	r1, sl
 8005374:	00ca      	lsls	r2, r1, #3
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	4603      	mov	r3, r0
 800537c:	4642      	mov	r2, r8
 800537e:	189b      	adds	r3, r3, r2
 8005380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005384:	464b      	mov	r3, r9
 8005386:	460a      	mov	r2, r1
 8005388:	eb42 0303 	adc.w	r3, r2, r3
 800538c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	67bb      	str	r3, [r7, #120]	; 0x78
 800539a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053a8:	4649      	mov	r1, r9
 80053aa:	008b      	lsls	r3, r1, #2
 80053ac:	4641      	mov	r1, r8
 80053ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b2:	4641      	mov	r1, r8
 80053b4:	008a      	lsls	r2, r1, #2
 80053b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053ba:	f7fa ff81 	bl	80002c0 <__aeabi_uldivmod>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <UART_SetConfig+0x4e4>)
 80053c4:	fba3 1302 	umull	r1, r3, r3, r2
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	2164      	movs	r1, #100	; 0x64
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	3332      	adds	r3, #50	; 0x32
 80053d6:	4a34      	ldr	r2, [pc, #208]	; (80054a8 <UART_SetConfig+0x4e4>)
 80053d8:	fba2 2303 	umull	r2, r3, r2, r3
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e2:	441c      	add	r4, r3
 80053e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e8:	2200      	movs	r2, #0
 80053ea:	673b      	str	r3, [r7, #112]	; 0x70
 80053ec:	677a      	str	r2, [r7, #116]	; 0x74
 80053ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053f2:	4642      	mov	r2, r8
 80053f4:	464b      	mov	r3, r9
 80053f6:	1891      	adds	r1, r2, r2
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	415b      	adcs	r3, r3
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005402:	4641      	mov	r1, r8
 8005404:	1851      	adds	r1, r2, r1
 8005406:	6039      	str	r1, [r7, #0]
 8005408:	4649      	mov	r1, r9
 800540a:	414b      	adcs	r3, r1
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800541a:	4659      	mov	r1, fp
 800541c:	00cb      	lsls	r3, r1, #3
 800541e:	4651      	mov	r1, sl
 8005420:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005424:	4651      	mov	r1, sl
 8005426:	00ca      	lsls	r2, r1, #3
 8005428:	4610      	mov	r0, r2
 800542a:	4619      	mov	r1, r3
 800542c:	4603      	mov	r3, r0
 800542e:	4642      	mov	r2, r8
 8005430:	189b      	adds	r3, r3, r2
 8005432:	66bb      	str	r3, [r7, #104]	; 0x68
 8005434:	464b      	mov	r3, r9
 8005436:	460a      	mov	r2, r1
 8005438:	eb42 0303 	adc.w	r3, r2, r3
 800543c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	663b      	str	r3, [r7, #96]	; 0x60
 8005448:	667a      	str	r2, [r7, #100]	; 0x64
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	f04f 0300 	mov.w	r3, #0
 8005452:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005456:	4649      	mov	r1, r9
 8005458:	008b      	lsls	r3, r1, #2
 800545a:	4641      	mov	r1, r8
 800545c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005460:	4641      	mov	r1, r8
 8005462:	008a      	lsls	r2, r1, #2
 8005464:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005468:	f7fa ff2a 	bl	80002c0 <__aeabi_uldivmod>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <UART_SetConfig+0x4e4>)
 8005472:	fba3 1302 	umull	r1, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2164      	movs	r1, #100	; 0x64
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	3332      	adds	r3, #50	; 0x32
 8005484:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <UART_SetConfig+0x4e4>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4422      	add	r2, r4
 8005498:	609a      	str	r2, [r3, #8]
}
 800549a:	bf00      	nop
 800549c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054a0:	46bd      	mov	sp, r7
 80054a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054a6:	bf00      	nop
 80054a8:	51eb851f 	.word	0x51eb851f

080054ac <__errno>:
 80054ac:	4b01      	ldr	r3, [pc, #4]	; (80054b4 <__errno+0x8>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000030 	.word	0x20000030

080054b8 <__libc_init_array>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	4d0d      	ldr	r5, [pc, #52]	; (80054f0 <__libc_init_array+0x38>)
 80054bc:	4c0d      	ldr	r4, [pc, #52]	; (80054f4 <__libc_init_array+0x3c>)
 80054be:	1b64      	subs	r4, r4, r5
 80054c0:	10a4      	asrs	r4, r4, #2
 80054c2:	2600      	movs	r6, #0
 80054c4:	42a6      	cmp	r6, r4
 80054c6:	d109      	bne.n	80054dc <__libc_init_array+0x24>
 80054c8:	4d0b      	ldr	r5, [pc, #44]	; (80054f8 <__libc_init_array+0x40>)
 80054ca:	4c0c      	ldr	r4, [pc, #48]	; (80054fc <__libc_init_array+0x44>)
 80054cc:	f000 fd1a 	bl	8005f04 <_init>
 80054d0:	1b64      	subs	r4, r4, r5
 80054d2:	10a4      	asrs	r4, r4, #2
 80054d4:	2600      	movs	r6, #0
 80054d6:	42a6      	cmp	r6, r4
 80054d8:	d105      	bne.n	80054e6 <__libc_init_array+0x2e>
 80054da:	bd70      	pop	{r4, r5, r6, pc}
 80054dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e0:	4798      	blx	r3
 80054e2:	3601      	adds	r6, #1
 80054e4:	e7ee      	b.n	80054c4 <__libc_init_array+0xc>
 80054e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ea:	4798      	blx	r3
 80054ec:	3601      	adds	r6, #1
 80054ee:	e7f2      	b.n	80054d6 <__libc_init_array+0x1e>
 80054f0:	080062d8 	.word	0x080062d8
 80054f4:	080062d8 	.word	0x080062d8
 80054f8:	080062d8 	.word	0x080062d8
 80054fc:	080062dc 	.word	0x080062dc

08005500 <malloc>:
 8005500:	4b02      	ldr	r3, [pc, #8]	; (800550c <malloc+0xc>)
 8005502:	4601      	mov	r1, r0
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	f000 b877 	b.w	80055f8 <_malloc_r>
 800550a:	bf00      	nop
 800550c:	20000030 	.word	0x20000030

08005510 <memset>:
 8005510:	4402      	add	r2, r0
 8005512:	4603      	mov	r3, r0
 8005514:	4293      	cmp	r3, r2
 8005516:	d100      	bne.n	800551a <memset+0xa>
 8005518:	4770      	bx	lr
 800551a:	f803 1b01 	strb.w	r1, [r3], #1
 800551e:	e7f9      	b.n	8005514 <memset+0x4>

08005520 <_free_r>:
 8005520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005522:	2900      	cmp	r1, #0
 8005524:	d044      	beq.n	80055b0 <_free_r+0x90>
 8005526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800552a:	9001      	str	r0, [sp, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f1a1 0404 	sub.w	r4, r1, #4
 8005532:	bfb8      	it	lt
 8005534:	18e4      	addlt	r4, r4, r3
 8005536:	f000 f987 	bl	8005848 <__malloc_lock>
 800553a:	4a1e      	ldr	r2, [pc, #120]	; (80055b4 <_free_r+0x94>)
 800553c:	9801      	ldr	r0, [sp, #4]
 800553e:	6813      	ldr	r3, [r2, #0]
 8005540:	b933      	cbnz	r3, 8005550 <_free_r+0x30>
 8005542:	6063      	str	r3, [r4, #4]
 8005544:	6014      	str	r4, [r2, #0]
 8005546:	b003      	add	sp, #12
 8005548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800554c:	f000 b982 	b.w	8005854 <__malloc_unlock>
 8005550:	42a3      	cmp	r3, r4
 8005552:	d908      	bls.n	8005566 <_free_r+0x46>
 8005554:	6825      	ldr	r5, [r4, #0]
 8005556:	1961      	adds	r1, r4, r5
 8005558:	428b      	cmp	r3, r1
 800555a:	bf01      	itttt	eq
 800555c:	6819      	ldreq	r1, [r3, #0]
 800555e:	685b      	ldreq	r3, [r3, #4]
 8005560:	1949      	addeq	r1, r1, r5
 8005562:	6021      	streq	r1, [r4, #0]
 8005564:	e7ed      	b.n	8005542 <_free_r+0x22>
 8005566:	461a      	mov	r2, r3
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b10b      	cbz	r3, 8005570 <_free_r+0x50>
 800556c:	42a3      	cmp	r3, r4
 800556e:	d9fa      	bls.n	8005566 <_free_r+0x46>
 8005570:	6811      	ldr	r1, [r2, #0]
 8005572:	1855      	adds	r5, r2, r1
 8005574:	42a5      	cmp	r5, r4
 8005576:	d10b      	bne.n	8005590 <_free_r+0x70>
 8005578:	6824      	ldr	r4, [r4, #0]
 800557a:	4421      	add	r1, r4
 800557c:	1854      	adds	r4, r2, r1
 800557e:	42a3      	cmp	r3, r4
 8005580:	6011      	str	r1, [r2, #0]
 8005582:	d1e0      	bne.n	8005546 <_free_r+0x26>
 8005584:	681c      	ldr	r4, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	6053      	str	r3, [r2, #4]
 800558a:	4421      	add	r1, r4
 800558c:	6011      	str	r1, [r2, #0]
 800558e:	e7da      	b.n	8005546 <_free_r+0x26>
 8005590:	d902      	bls.n	8005598 <_free_r+0x78>
 8005592:	230c      	movs	r3, #12
 8005594:	6003      	str	r3, [r0, #0]
 8005596:	e7d6      	b.n	8005546 <_free_r+0x26>
 8005598:	6825      	ldr	r5, [r4, #0]
 800559a:	1961      	adds	r1, r4, r5
 800559c:	428b      	cmp	r3, r1
 800559e:	bf04      	itt	eq
 80055a0:	6819      	ldreq	r1, [r3, #0]
 80055a2:	685b      	ldreq	r3, [r3, #4]
 80055a4:	6063      	str	r3, [r4, #4]
 80055a6:	bf04      	itt	eq
 80055a8:	1949      	addeq	r1, r1, r5
 80055aa:	6021      	streq	r1, [r4, #0]
 80055ac:	6054      	str	r4, [r2, #4]
 80055ae:	e7ca      	b.n	8005546 <_free_r+0x26>
 80055b0:	b003      	add	sp, #12
 80055b2:	bd30      	pop	{r4, r5, pc}
 80055b4:	20000458 	.word	0x20000458

080055b8 <sbrk_aligned>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4e0e      	ldr	r6, [pc, #56]	; (80055f4 <sbrk_aligned+0x3c>)
 80055bc:	460c      	mov	r4, r1
 80055be:	6831      	ldr	r1, [r6, #0]
 80055c0:	4605      	mov	r5, r0
 80055c2:	b911      	cbnz	r1, 80055ca <sbrk_aligned+0x12>
 80055c4:	f000 f88c 	bl	80056e0 <_sbrk_r>
 80055c8:	6030      	str	r0, [r6, #0]
 80055ca:	4621      	mov	r1, r4
 80055cc:	4628      	mov	r0, r5
 80055ce:	f000 f887 	bl	80056e0 <_sbrk_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	d00a      	beq.n	80055ec <sbrk_aligned+0x34>
 80055d6:	1cc4      	adds	r4, r0, #3
 80055d8:	f024 0403 	bic.w	r4, r4, #3
 80055dc:	42a0      	cmp	r0, r4
 80055de:	d007      	beq.n	80055f0 <sbrk_aligned+0x38>
 80055e0:	1a21      	subs	r1, r4, r0
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f87c 	bl	80056e0 <_sbrk_r>
 80055e8:	3001      	adds	r0, #1
 80055ea:	d101      	bne.n	80055f0 <sbrk_aligned+0x38>
 80055ec:	f04f 34ff 	mov.w	r4, #4294967295
 80055f0:	4620      	mov	r0, r4
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	2000045c 	.word	0x2000045c

080055f8 <_malloc_r>:
 80055f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055fc:	1ccd      	adds	r5, r1, #3
 80055fe:	f025 0503 	bic.w	r5, r5, #3
 8005602:	3508      	adds	r5, #8
 8005604:	2d0c      	cmp	r5, #12
 8005606:	bf38      	it	cc
 8005608:	250c      	movcc	r5, #12
 800560a:	2d00      	cmp	r5, #0
 800560c:	4607      	mov	r7, r0
 800560e:	db01      	blt.n	8005614 <_malloc_r+0x1c>
 8005610:	42a9      	cmp	r1, r5
 8005612:	d905      	bls.n	8005620 <_malloc_r+0x28>
 8005614:	230c      	movs	r3, #12
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	2600      	movs	r6, #0
 800561a:	4630      	mov	r0, r6
 800561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005620:	4e2e      	ldr	r6, [pc, #184]	; (80056dc <_malloc_r+0xe4>)
 8005622:	f000 f911 	bl	8005848 <__malloc_lock>
 8005626:	6833      	ldr	r3, [r6, #0]
 8005628:	461c      	mov	r4, r3
 800562a:	bb34      	cbnz	r4, 800567a <_malloc_r+0x82>
 800562c:	4629      	mov	r1, r5
 800562e:	4638      	mov	r0, r7
 8005630:	f7ff ffc2 	bl	80055b8 <sbrk_aligned>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	4604      	mov	r4, r0
 8005638:	d14d      	bne.n	80056d6 <_malloc_r+0xde>
 800563a:	6834      	ldr	r4, [r6, #0]
 800563c:	4626      	mov	r6, r4
 800563e:	2e00      	cmp	r6, #0
 8005640:	d140      	bne.n	80056c4 <_malloc_r+0xcc>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	4631      	mov	r1, r6
 8005646:	4638      	mov	r0, r7
 8005648:	eb04 0803 	add.w	r8, r4, r3
 800564c:	f000 f848 	bl	80056e0 <_sbrk_r>
 8005650:	4580      	cmp	r8, r0
 8005652:	d13a      	bne.n	80056ca <_malloc_r+0xd2>
 8005654:	6821      	ldr	r1, [r4, #0]
 8005656:	3503      	adds	r5, #3
 8005658:	1a6d      	subs	r5, r5, r1
 800565a:	f025 0503 	bic.w	r5, r5, #3
 800565e:	3508      	adds	r5, #8
 8005660:	2d0c      	cmp	r5, #12
 8005662:	bf38      	it	cc
 8005664:	250c      	movcc	r5, #12
 8005666:	4629      	mov	r1, r5
 8005668:	4638      	mov	r0, r7
 800566a:	f7ff ffa5 	bl	80055b8 <sbrk_aligned>
 800566e:	3001      	adds	r0, #1
 8005670:	d02b      	beq.n	80056ca <_malloc_r+0xd2>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	442b      	add	r3, r5
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	e00e      	b.n	8005698 <_malloc_r+0xa0>
 800567a:	6822      	ldr	r2, [r4, #0]
 800567c:	1b52      	subs	r2, r2, r5
 800567e:	d41e      	bmi.n	80056be <_malloc_r+0xc6>
 8005680:	2a0b      	cmp	r2, #11
 8005682:	d916      	bls.n	80056b2 <_malloc_r+0xba>
 8005684:	1961      	adds	r1, r4, r5
 8005686:	42a3      	cmp	r3, r4
 8005688:	6025      	str	r5, [r4, #0]
 800568a:	bf18      	it	ne
 800568c:	6059      	strne	r1, [r3, #4]
 800568e:	6863      	ldr	r3, [r4, #4]
 8005690:	bf08      	it	eq
 8005692:	6031      	streq	r1, [r6, #0]
 8005694:	5162      	str	r2, [r4, r5]
 8005696:	604b      	str	r3, [r1, #4]
 8005698:	4638      	mov	r0, r7
 800569a:	f104 060b 	add.w	r6, r4, #11
 800569e:	f000 f8d9 	bl	8005854 <__malloc_unlock>
 80056a2:	f026 0607 	bic.w	r6, r6, #7
 80056a6:	1d23      	adds	r3, r4, #4
 80056a8:	1af2      	subs	r2, r6, r3
 80056aa:	d0b6      	beq.n	800561a <_malloc_r+0x22>
 80056ac:	1b9b      	subs	r3, r3, r6
 80056ae:	50a3      	str	r3, [r4, r2]
 80056b0:	e7b3      	b.n	800561a <_malloc_r+0x22>
 80056b2:	6862      	ldr	r2, [r4, #4]
 80056b4:	42a3      	cmp	r3, r4
 80056b6:	bf0c      	ite	eq
 80056b8:	6032      	streq	r2, [r6, #0]
 80056ba:	605a      	strne	r2, [r3, #4]
 80056bc:	e7ec      	b.n	8005698 <_malloc_r+0xa0>
 80056be:	4623      	mov	r3, r4
 80056c0:	6864      	ldr	r4, [r4, #4]
 80056c2:	e7b2      	b.n	800562a <_malloc_r+0x32>
 80056c4:	4634      	mov	r4, r6
 80056c6:	6876      	ldr	r6, [r6, #4]
 80056c8:	e7b9      	b.n	800563e <_malloc_r+0x46>
 80056ca:	230c      	movs	r3, #12
 80056cc:	603b      	str	r3, [r7, #0]
 80056ce:	4638      	mov	r0, r7
 80056d0:	f000 f8c0 	bl	8005854 <__malloc_unlock>
 80056d4:	e7a1      	b.n	800561a <_malloc_r+0x22>
 80056d6:	6025      	str	r5, [r4, #0]
 80056d8:	e7de      	b.n	8005698 <_malloc_r+0xa0>
 80056da:	bf00      	nop
 80056dc:	20000458 	.word	0x20000458

080056e0 <_sbrk_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4d06      	ldr	r5, [pc, #24]	; (80056fc <_sbrk_r+0x1c>)
 80056e4:	2300      	movs	r3, #0
 80056e6:	4604      	mov	r4, r0
 80056e8:	4608      	mov	r0, r1
 80056ea:	602b      	str	r3, [r5, #0]
 80056ec:	f7fc f8f2 	bl	80018d4 <_sbrk>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_sbrk_r+0x1a>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_sbrk_r+0x1a>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	20000460 	.word	0x20000460

08005700 <siprintf>:
 8005700:	b40e      	push	{r1, r2, r3}
 8005702:	b500      	push	{lr}
 8005704:	b09c      	sub	sp, #112	; 0x70
 8005706:	ab1d      	add	r3, sp, #116	; 0x74
 8005708:	9002      	str	r0, [sp, #8]
 800570a:	9006      	str	r0, [sp, #24]
 800570c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005710:	4809      	ldr	r0, [pc, #36]	; (8005738 <siprintf+0x38>)
 8005712:	9107      	str	r1, [sp, #28]
 8005714:	9104      	str	r1, [sp, #16]
 8005716:	4909      	ldr	r1, [pc, #36]	; (800573c <siprintf+0x3c>)
 8005718:	f853 2b04 	ldr.w	r2, [r3], #4
 800571c:	9105      	str	r1, [sp, #20]
 800571e:	6800      	ldr	r0, [r0, #0]
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	a902      	add	r1, sp, #8
 8005724:	f000 f8f8 	bl	8005918 <_svfiprintf_r>
 8005728:	9b02      	ldr	r3, [sp, #8]
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	b01c      	add	sp, #112	; 0x70
 8005730:	f85d eb04 	ldr.w	lr, [sp], #4
 8005734:	b003      	add	sp, #12
 8005736:	4770      	bx	lr
 8005738:	20000030 	.word	0x20000030
 800573c:	ffff0208 	.word	0xffff0208

08005740 <strcpy>:
 8005740:	4603      	mov	r3, r0
 8005742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005746:	f803 2b01 	strb.w	r2, [r3], #1
 800574a:	2a00      	cmp	r2, #0
 800574c:	d1f9      	bne.n	8005742 <strcpy+0x2>
 800574e:	4770      	bx	lr

08005750 <_strtoul_l.constprop.0>:
 8005750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005754:	4f36      	ldr	r7, [pc, #216]	; (8005830 <_strtoul_l.constprop.0+0xe0>)
 8005756:	4686      	mov	lr, r0
 8005758:	460d      	mov	r5, r1
 800575a:	4628      	mov	r0, r5
 800575c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005760:	5de6      	ldrb	r6, [r4, r7]
 8005762:	f016 0608 	ands.w	r6, r6, #8
 8005766:	d1f8      	bne.n	800575a <_strtoul_l.constprop.0+0xa>
 8005768:	2c2d      	cmp	r4, #45	; 0x2d
 800576a:	d12f      	bne.n	80057cc <_strtoul_l.constprop.0+0x7c>
 800576c:	782c      	ldrb	r4, [r5, #0]
 800576e:	2601      	movs	r6, #1
 8005770:	1c85      	adds	r5, r0, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d057      	beq.n	8005826 <_strtoul_l.constprop.0+0xd6>
 8005776:	2b10      	cmp	r3, #16
 8005778:	d109      	bne.n	800578e <_strtoul_l.constprop.0+0x3e>
 800577a:	2c30      	cmp	r4, #48	; 0x30
 800577c:	d107      	bne.n	800578e <_strtoul_l.constprop.0+0x3e>
 800577e:	7828      	ldrb	r0, [r5, #0]
 8005780:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005784:	2858      	cmp	r0, #88	; 0x58
 8005786:	d149      	bne.n	800581c <_strtoul_l.constprop.0+0xcc>
 8005788:	786c      	ldrb	r4, [r5, #1]
 800578a:	2310      	movs	r3, #16
 800578c:	3502      	adds	r5, #2
 800578e:	f04f 38ff 	mov.w	r8, #4294967295
 8005792:	2700      	movs	r7, #0
 8005794:	fbb8 f8f3 	udiv	r8, r8, r3
 8005798:	fb03 f908 	mul.w	r9, r3, r8
 800579c:	ea6f 0909 	mvn.w	r9, r9
 80057a0:	4638      	mov	r0, r7
 80057a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80057a6:	f1bc 0f09 	cmp.w	ip, #9
 80057aa:	d814      	bhi.n	80057d6 <_strtoul_l.constprop.0+0x86>
 80057ac:	4664      	mov	r4, ip
 80057ae:	42a3      	cmp	r3, r4
 80057b0:	dd22      	ble.n	80057f8 <_strtoul_l.constprop.0+0xa8>
 80057b2:	2f00      	cmp	r7, #0
 80057b4:	db1d      	blt.n	80057f2 <_strtoul_l.constprop.0+0xa2>
 80057b6:	4580      	cmp	r8, r0
 80057b8:	d31b      	bcc.n	80057f2 <_strtoul_l.constprop.0+0xa2>
 80057ba:	d101      	bne.n	80057c0 <_strtoul_l.constprop.0+0x70>
 80057bc:	45a1      	cmp	r9, r4
 80057be:	db18      	blt.n	80057f2 <_strtoul_l.constprop.0+0xa2>
 80057c0:	fb00 4003 	mla	r0, r0, r3, r4
 80057c4:	2701      	movs	r7, #1
 80057c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057ca:	e7ea      	b.n	80057a2 <_strtoul_l.constprop.0+0x52>
 80057cc:	2c2b      	cmp	r4, #43	; 0x2b
 80057ce:	bf04      	itt	eq
 80057d0:	782c      	ldrbeq	r4, [r5, #0]
 80057d2:	1c85      	addeq	r5, r0, #2
 80057d4:	e7cd      	b.n	8005772 <_strtoul_l.constprop.0+0x22>
 80057d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80057da:	f1bc 0f19 	cmp.w	ip, #25
 80057de:	d801      	bhi.n	80057e4 <_strtoul_l.constprop.0+0x94>
 80057e0:	3c37      	subs	r4, #55	; 0x37
 80057e2:	e7e4      	b.n	80057ae <_strtoul_l.constprop.0+0x5e>
 80057e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80057e8:	f1bc 0f19 	cmp.w	ip, #25
 80057ec:	d804      	bhi.n	80057f8 <_strtoul_l.constprop.0+0xa8>
 80057ee:	3c57      	subs	r4, #87	; 0x57
 80057f0:	e7dd      	b.n	80057ae <_strtoul_l.constprop.0+0x5e>
 80057f2:	f04f 37ff 	mov.w	r7, #4294967295
 80057f6:	e7e6      	b.n	80057c6 <_strtoul_l.constprop.0+0x76>
 80057f8:	2f00      	cmp	r7, #0
 80057fa:	da07      	bge.n	800580c <_strtoul_l.constprop.0+0xbc>
 80057fc:	2322      	movs	r3, #34	; 0x22
 80057fe:	f8ce 3000 	str.w	r3, [lr]
 8005802:	f04f 30ff 	mov.w	r0, #4294967295
 8005806:	b932      	cbnz	r2, 8005816 <_strtoul_l.constprop.0+0xc6>
 8005808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800580c:	b106      	cbz	r6, 8005810 <_strtoul_l.constprop.0+0xc0>
 800580e:	4240      	negs	r0, r0
 8005810:	2a00      	cmp	r2, #0
 8005812:	d0f9      	beq.n	8005808 <_strtoul_l.constprop.0+0xb8>
 8005814:	b107      	cbz	r7, 8005818 <_strtoul_l.constprop.0+0xc8>
 8005816:	1e69      	subs	r1, r5, #1
 8005818:	6011      	str	r1, [r2, #0]
 800581a:	e7f5      	b.n	8005808 <_strtoul_l.constprop.0+0xb8>
 800581c:	2430      	movs	r4, #48	; 0x30
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1b5      	bne.n	800578e <_strtoul_l.constprop.0+0x3e>
 8005822:	2308      	movs	r3, #8
 8005824:	e7b3      	b.n	800578e <_strtoul_l.constprop.0+0x3e>
 8005826:	2c30      	cmp	r4, #48	; 0x30
 8005828:	d0a9      	beq.n	800577e <_strtoul_l.constprop.0+0x2e>
 800582a:	230a      	movs	r3, #10
 800582c:	e7af      	b.n	800578e <_strtoul_l.constprop.0+0x3e>
 800582e:	bf00      	nop
 8005830:	0800619d 	.word	0x0800619d

08005834 <strtoul>:
 8005834:	4613      	mov	r3, r2
 8005836:	460a      	mov	r2, r1
 8005838:	4601      	mov	r1, r0
 800583a:	4802      	ldr	r0, [pc, #8]	; (8005844 <strtoul+0x10>)
 800583c:	6800      	ldr	r0, [r0, #0]
 800583e:	f7ff bf87 	b.w	8005750 <_strtoul_l.constprop.0>
 8005842:	bf00      	nop
 8005844:	20000030 	.word	0x20000030

08005848 <__malloc_lock>:
 8005848:	4801      	ldr	r0, [pc, #4]	; (8005850 <__malloc_lock+0x8>)
 800584a:	f000 baf9 	b.w	8005e40 <__retarget_lock_acquire_recursive>
 800584e:	bf00      	nop
 8005850:	20000464 	.word	0x20000464

08005854 <__malloc_unlock>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__malloc_unlock+0x8>)
 8005856:	f000 baf4 	b.w	8005e42 <__retarget_lock_release_recursive>
 800585a:	bf00      	nop
 800585c:	20000464 	.word	0x20000464

08005860 <__ssputs_r>:
 8005860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	688e      	ldr	r6, [r1, #8]
 8005866:	429e      	cmp	r6, r3
 8005868:	4682      	mov	sl, r0
 800586a:	460c      	mov	r4, r1
 800586c:	4690      	mov	r8, r2
 800586e:	461f      	mov	r7, r3
 8005870:	d838      	bhi.n	80058e4 <__ssputs_r+0x84>
 8005872:	898a      	ldrh	r2, [r1, #12]
 8005874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005878:	d032      	beq.n	80058e0 <__ssputs_r+0x80>
 800587a:	6825      	ldr	r5, [r4, #0]
 800587c:	6909      	ldr	r1, [r1, #16]
 800587e:	eba5 0901 	sub.w	r9, r5, r1
 8005882:	6965      	ldr	r5, [r4, #20]
 8005884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800588c:	3301      	adds	r3, #1
 800588e:	444b      	add	r3, r9
 8005890:	106d      	asrs	r5, r5, #1
 8005892:	429d      	cmp	r5, r3
 8005894:	bf38      	it	cc
 8005896:	461d      	movcc	r5, r3
 8005898:	0553      	lsls	r3, r2, #21
 800589a:	d531      	bpl.n	8005900 <__ssputs_r+0xa0>
 800589c:	4629      	mov	r1, r5
 800589e:	f7ff feab 	bl	80055f8 <_malloc_r>
 80058a2:	4606      	mov	r6, r0
 80058a4:	b950      	cbnz	r0, 80058bc <__ssputs_r+0x5c>
 80058a6:	230c      	movs	r3, #12
 80058a8:	f8ca 3000 	str.w	r3, [sl]
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058bc:	6921      	ldr	r1, [r4, #16]
 80058be:	464a      	mov	r2, r9
 80058c0:	f000 fac0 	bl	8005e44 <memcpy>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	6126      	str	r6, [r4, #16]
 80058d2:	6165      	str	r5, [r4, #20]
 80058d4:	444e      	add	r6, r9
 80058d6:	eba5 0509 	sub.w	r5, r5, r9
 80058da:	6026      	str	r6, [r4, #0]
 80058dc:	60a5      	str	r5, [r4, #8]
 80058de:	463e      	mov	r6, r7
 80058e0:	42be      	cmp	r6, r7
 80058e2:	d900      	bls.n	80058e6 <__ssputs_r+0x86>
 80058e4:	463e      	mov	r6, r7
 80058e6:	6820      	ldr	r0, [r4, #0]
 80058e8:	4632      	mov	r2, r6
 80058ea:	4641      	mov	r1, r8
 80058ec:	f000 fab8 	bl	8005e60 <memmove>
 80058f0:	68a3      	ldr	r3, [r4, #8]
 80058f2:	1b9b      	subs	r3, r3, r6
 80058f4:	60a3      	str	r3, [r4, #8]
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	4433      	add	r3, r6
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	2000      	movs	r0, #0
 80058fe:	e7db      	b.n	80058b8 <__ssputs_r+0x58>
 8005900:	462a      	mov	r2, r5
 8005902:	f000 fac7 	bl	8005e94 <_realloc_r>
 8005906:	4606      	mov	r6, r0
 8005908:	2800      	cmp	r0, #0
 800590a:	d1e1      	bne.n	80058d0 <__ssputs_r+0x70>
 800590c:	6921      	ldr	r1, [r4, #16]
 800590e:	4650      	mov	r0, sl
 8005910:	f7ff fe06 	bl	8005520 <_free_r>
 8005914:	e7c7      	b.n	80058a6 <__ssputs_r+0x46>
	...

08005918 <_svfiprintf_r>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	4698      	mov	r8, r3
 800591e:	898b      	ldrh	r3, [r1, #12]
 8005920:	061b      	lsls	r3, r3, #24
 8005922:	b09d      	sub	sp, #116	; 0x74
 8005924:	4607      	mov	r7, r0
 8005926:	460d      	mov	r5, r1
 8005928:	4614      	mov	r4, r2
 800592a:	d50e      	bpl.n	800594a <_svfiprintf_r+0x32>
 800592c:	690b      	ldr	r3, [r1, #16]
 800592e:	b963      	cbnz	r3, 800594a <_svfiprintf_r+0x32>
 8005930:	2140      	movs	r1, #64	; 0x40
 8005932:	f7ff fe61 	bl	80055f8 <_malloc_r>
 8005936:	6028      	str	r0, [r5, #0]
 8005938:	6128      	str	r0, [r5, #16]
 800593a:	b920      	cbnz	r0, 8005946 <_svfiprintf_r+0x2e>
 800593c:	230c      	movs	r3, #12
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	f04f 30ff 	mov.w	r0, #4294967295
 8005944:	e0d1      	b.n	8005aea <_svfiprintf_r+0x1d2>
 8005946:	2340      	movs	r3, #64	; 0x40
 8005948:	616b      	str	r3, [r5, #20]
 800594a:	2300      	movs	r3, #0
 800594c:	9309      	str	r3, [sp, #36]	; 0x24
 800594e:	2320      	movs	r3, #32
 8005950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005954:	f8cd 800c 	str.w	r8, [sp, #12]
 8005958:	2330      	movs	r3, #48	; 0x30
 800595a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b04 <_svfiprintf_r+0x1ec>
 800595e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005962:	f04f 0901 	mov.w	r9, #1
 8005966:	4623      	mov	r3, r4
 8005968:	469a      	mov	sl, r3
 800596a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800596e:	b10a      	cbz	r2, 8005974 <_svfiprintf_r+0x5c>
 8005970:	2a25      	cmp	r2, #37	; 0x25
 8005972:	d1f9      	bne.n	8005968 <_svfiprintf_r+0x50>
 8005974:	ebba 0b04 	subs.w	fp, sl, r4
 8005978:	d00b      	beq.n	8005992 <_svfiprintf_r+0x7a>
 800597a:	465b      	mov	r3, fp
 800597c:	4622      	mov	r2, r4
 800597e:	4629      	mov	r1, r5
 8005980:	4638      	mov	r0, r7
 8005982:	f7ff ff6d 	bl	8005860 <__ssputs_r>
 8005986:	3001      	adds	r0, #1
 8005988:	f000 80aa 	beq.w	8005ae0 <_svfiprintf_r+0x1c8>
 800598c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800598e:	445a      	add	r2, fp
 8005990:	9209      	str	r2, [sp, #36]	; 0x24
 8005992:	f89a 3000 	ldrb.w	r3, [sl]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80a2 	beq.w	8005ae0 <_svfiprintf_r+0x1c8>
 800599c:	2300      	movs	r3, #0
 800599e:	f04f 32ff 	mov.w	r2, #4294967295
 80059a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059a6:	f10a 0a01 	add.w	sl, sl, #1
 80059aa:	9304      	str	r3, [sp, #16]
 80059ac:	9307      	str	r3, [sp, #28]
 80059ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059b2:	931a      	str	r3, [sp, #104]	; 0x68
 80059b4:	4654      	mov	r4, sl
 80059b6:	2205      	movs	r2, #5
 80059b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059bc:	4851      	ldr	r0, [pc, #324]	; (8005b04 <_svfiprintf_r+0x1ec>)
 80059be:	f7fa fc2f 	bl	8000220 <memchr>
 80059c2:	9a04      	ldr	r2, [sp, #16]
 80059c4:	b9d8      	cbnz	r0, 80059fe <_svfiprintf_r+0xe6>
 80059c6:	06d0      	lsls	r0, r2, #27
 80059c8:	bf44      	itt	mi
 80059ca:	2320      	movmi	r3, #32
 80059cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d0:	0711      	lsls	r1, r2, #28
 80059d2:	bf44      	itt	mi
 80059d4:	232b      	movmi	r3, #43	; 0x2b
 80059d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059da:	f89a 3000 	ldrb.w	r3, [sl]
 80059de:	2b2a      	cmp	r3, #42	; 0x2a
 80059e0:	d015      	beq.n	8005a0e <_svfiprintf_r+0xf6>
 80059e2:	9a07      	ldr	r2, [sp, #28]
 80059e4:	4654      	mov	r4, sl
 80059e6:	2000      	movs	r0, #0
 80059e8:	f04f 0c0a 	mov.w	ip, #10
 80059ec:	4621      	mov	r1, r4
 80059ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f2:	3b30      	subs	r3, #48	; 0x30
 80059f4:	2b09      	cmp	r3, #9
 80059f6:	d94e      	bls.n	8005a96 <_svfiprintf_r+0x17e>
 80059f8:	b1b0      	cbz	r0, 8005a28 <_svfiprintf_r+0x110>
 80059fa:	9207      	str	r2, [sp, #28]
 80059fc:	e014      	b.n	8005a28 <_svfiprintf_r+0x110>
 80059fe:	eba0 0308 	sub.w	r3, r0, r8
 8005a02:	fa09 f303 	lsl.w	r3, r9, r3
 8005a06:	4313      	orrs	r3, r2
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	46a2      	mov	sl, r4
 8005a0c:	e7d2      	b.n	80059b4 <_svfiprintf_r+0x9c>
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	1d19      	adds	r1, r3, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	9103      	str	r1, [sp, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bfbb      	ittet	lt
 8005a1a:	425b      	neglt	r3, r3
 8005a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a20:	9307      	strge	r3, [sp, #28]
 8005a22:	9307      	strlt	r3, [sp, #28]
 8005a24:	bfb8      	it	lt
 8005a26:	9204      	strlt	r2, [sp, #16]
 8005a28:	7823      	ldrb	r3, [r4, #0]
 8005a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a2c:	d10c      	bne.n	8005a48 <_svfiprintf_r+0x130>
 8005a2e:	7863      	ldrb	r3, [r4, #1]
 8005a30:	2b2a      	cmp	r3, #42	; 0x2a
 8005a32:	d135      	bne.n	8005aa0 <_svfiprintf_r+0x188>
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	1d1a      	adds	r2, r3, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	9203      	str	r2, [sp, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bfb8      	it	lt
 8005a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a44:	3402      	adds	r4, #2
 8005a46:	9305      	str	r3, [sp, #20]
 8005a48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b14 <_svfiprintf_r+0x1fc>
 8005a4c:	7821      	ldrb	r1, [r4, #0]
 8005a4e:	2203      	movs	r2, #3
 8005a50:	4650      	mov	r0, sl
 8005a52:	f7fa fbe5 	bl	8000220 <memchr>
 8005a56:	b140      	cbz	r0, 8005a6a <_svfiprintf_r+0x152>
 8005a58:	2340      	movs	r3, #64	; 0x40
 8005a5a:	eba0 000a 	sub.w	r0, r0, sl
 8005a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8005a62:	9b04      	ldr	r3, [sp, #16]
 8005a64:	4303      	orrs	r3, r0
 8005a66:	3401      	adds	r4, #1
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a6e:	4826      	ldr	r0, [pc, #152]	; (8005b08 <_svfiprintf_r+0x1f0>)
 8005a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a74:	2206      	movs	r2, #6
 8005a76:	f7fa fbd3 	bl	8000220 <memchr>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d038      	beq.n	8005af0 <_svfiprintf_r+0x1d8>
 8005a7e:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <_svfiprintf_r+0x1f4>)
 8005a80:	bb1b      	cbnz	r3, 8005aca <_svfiprintf_r+0x1b2>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	3307      	adds	r3, #7
 8005a86:	f023 0307 	bic.w	r3, r3, #7
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	4433      	add	r3, r6
 8005a92:	9309      	str	r3, [sp, #36]	; 0x24
 8005a94:	e767      	b.n	8005966 <_svfiprintf_r+0x4e>
 8005a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	e7a5      	b.n	80059ec <_svfiprintf_r+0xd4>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	3401      	adds	r4, #1
 8005aa4:	9305      	str	r3, [sp, #20]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f04f 0c0a 	mov.w	ip, #10
 8005aac:	4620      	mov	r0, r4
 8005aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ab2:	3a30      	subs	r2, #48	; 0x30
 8005ab4:	2a09      	cmp	r2, #9
 8005ab6:	d903      	bls.n	8005ac0 <_svfiprintf_r+0x1a8>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0c5      	beq.n	8005a48 <_svfiprintf_r+0x130>
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	e7c3      	b.n	8005a48 <_svfiprintf_r+0x130>
 8005ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e7f0      	b.n	8005aac <_svfiprintf_r+0x194>
 8005aca:	ab03      	add	r3, sp, #12
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	462a      	mov	r2, r5
 8005ad0:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <_svfiprintf_r+0x1f8>)
 8005ad2:	a904      	add	r1, sp, #16
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	f3af 8000 	nop.w
 8005ada:	1c42      	adds	r2, r0, #1
 8005adc:	4606      	mov	r6, r0
 8005ade:	d1d6      	bne.n	8005a8e <_svfiprintf_r+0x176>
 8005ae0:	89ab      	ldrh	r3, [r5, #12]
 8005ae2:	065b      	lsls	r3, r3, #25
 8005ae4:	f53f af2c 	bmi.w	8005940 <_svfiprintf_r+0x28>
 8005ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aea:	b01d      	add	sp, #116	; 0x74
 8005aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af0:	ab03      	add	r3, sp, #12
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	462a      	mov	r2, r5
 8005af6:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <_svfiprintf_r+0x1f8>)
 8005af8:	a904      	add	r1, sp, #16
 8005afa:	4638      	mov	r0, r7
 8005afc:	f000 f87a 	bl	8005bf4 <_printf_i>
 8005b00:	e7eb      	b.n	8005ada <_svfiprintf_r+0x1c2>
 8005b02:	bf00      	nop
 8005b04:	0800629d 	.word	0x0800629d
 8005b08:	080062a7 	.word	0x080062a7
 8005b0c:	00000000 	.word	0x00000000
 8005b10:	08005861 	.word	0x08005861
 8005b14:	080062a3 	.word	0x080062a3

08005b18 <_printf_common>:
 8005b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	4699      	mov	r9, r3
 8005b20:	688a      	ldr	r2, [r1, #8]
 8005b22:	690b      	ldr	r3, [r1, #16]
 8005b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	bfb8      	it	lt
 8005b2c:	4613      	movlt	r3, r2
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b34:	4607      	mov	r7, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	b10a      	cbz	r2, 8005b3e <_printf_common+0x26>
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	6033      	str	r3, [r6, #0]
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	0699      	lsls	r1, r3, #26
 8005b42:	bf42      	ittt	mi
 8005b44:	6833      	ldrmi	r3, [r6, #0]
 8005b46:	3302      	addmi	r3, #2
 8005b48:	6033      	strmi	r3, [r6, #0]
 8005b4a:	6825      	ldr	r5, [r4, #0]
 8005b4c:	f015 0506 	ands.w	r5, r5, #6
 8005b50:	d106      	bne.n	8005b60 <_printf_common+0x48>
 8005b52:	f104 0a19 	add.w	sl, r4, #25
 8005b56:	68e3      	ldr	r3, [r4, #12]
 8005b58:	6832      	ldr	r2, [r6, #0]
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	42ab      	cmp	r3, r5
 8005b5e:	dc26      	bgt.n	8005bae <_printf_common+0x96>
 8005b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b64:	1e13      	subs	r3, r2, #0
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	bf18      	it	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	0692      	lsls	r2, r2, #26
 8005b6e:	d42b      	bmi.n	8005bc8 <_printf_common+0xb0>
 8005b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b74:	4649      	mov	r1, r9
 8005b76:	4638      	mov	r0, r7
 8005b78:	47c0      	blx	r8
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d01e      	beq.n	8005bbc <_printf_common+0xa4>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	68e5      	ldr	r5, [r4, #12]
 8005b82:	6832      	ldr	r2, [r6, #0]
 8005b84:	f003 0306 	and.w	r3, r3, #6
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	bf08      	it	eq
 8005b8c:	1aad      	subeq	r5, r5, r2
 8005b8e:	68a3      	ldr	r3, [r4, #8]
 8005b90:	6922      	ldr	r2, [r4, #16]
 8005b92:	bf0c      	ite	eq
 8005b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b98:	2500      	movne	r5, #0
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	bfc4      	itt	gt
 8005b9e:	1a9b      	subgt	r3, r3, r2
 8005ba0:	18ed      	addgt	r5, r5, r3
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	341a      	adds	r4, #26
 8005ba6:	42b5      	cmp	r5, r6
 8005ba8:	d11a      	bne.n	8005be0 <_printf_common+0xc8>
 8005baa:	2000      	movs	r0, #0
 8005bac:	e008      	b.n	8005bc0 <_printf_common+0xa8>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	47c0      	blx	r8
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d103      	bne.n	8005bc4 <_printf_common+0xac>
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	e7c6      	b.n	8005b56 <_printf_common+0x3e>
 8005bc8:	18e1      	adds	r1, r4, r3
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	2030      	movs	r0, #48	; 0x30
 8005bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bd2:	4422      	add	r2, r4
 8005bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bdc:	3302      	adds	r3, #2
 8005bde:	e7c7      	b.n	8005b70 <_printf_common+0x58>
 8005be0:	2301      	movs	r3, #1
 8005be2:	4622      	mov	r2, r4
 8005be4:	4649      	mov	r1, r9
 8005be6:	4638      	mov	r0, r7
 8005be8:	47c0      	blx	r8
 8005bea:	3001      	adds	r0, #1
 8005bec:	d0e6      	beq.n	8005bbc <_printf_common+0xa4>
 8005bee:	3601      	adds	r6, #1
 8005bf0:	e7d9      	b.n	8005ba6 <_printf_common+0x8e>
	...

08005bf4 <_printf_i>:
 8005bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	7e0f      	ldrb	r7, [r1, #24]
 8005bfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bfc:	2f78      	cmp	r7, #120	; 0x78
 8005bfe:	4691      	mov	r9, r2
 8005c00:	4680      	mov	r8, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	469a      	mov	sl, r3
 8005c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c0a:	d807      	bhi.n	8005c1c <_printf_i+0x28>
 8005c0c:	2f62      	cmp	r7, #98	; 0x62
 8005c0e:	d80a      	bhi.n	8005c26 <_printf_i+0x32>
 8005c10:	2f00      	cmp	r7, #0
 8005c12:	f000 80d8 	beq.w	8005dc6 <_printf_i+0x1d2>
 8005c16:	2f58      	cmp	r7, #88	; 0x58
 8005c18:	f000 80a3 	beq.w	8005d62 <_printf_i+0x16e>
 8005c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c24:	e03a      	b.n	8005c9c <_printf_i+0xa8>
 8005c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c2a:	2b15      	cmp	r3, #21
 8005c2c:	d8f6      	bhi.n	8005c1c <_printf_i+0x28>
 8005c2e:	a101      	add	r1, pc, #4	; (adr r1, 8005c34 <_printf_i+0x40>)
 8005c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c34:	08005c8d 	.word	0x08005c8d
 8005c38:	08005ca1 	.word	0x08005ca1
 8005c3c:	08005c1d 	.word	0x08005c1d
 8005c40:	08005c1d 	.word	0x08005c1d
 8005c44:	08005c1d 	.word	0x08005c1d
 8005c48:	08005c1d 	.word	0x08005c1d
 8005c4c:	08005ca1 	.word	0x08005ca1
 8005c50:	08005c1d 	.word	0x08005c1d
 8005c54:	08005c1d 	.word	0x08005c1d
 8005c58:	08005c1d 	.word	0x08005c1d
 8005c5c:	08005c1d 	.word	0x08005c1d
 8005c60:	08005dad 	.word	0x08005dad
 8005c64:	08005cd1 	.word	0x08005cd1
 8005c68:	08005d8f 	.word	0x08005d8f
 8005c6c:	08005c1d 	.word	0x08005c1d
 8005c70:	08005c1d 	.word	0x08005c1d
 8005c74:	08005dcf 	.word	0x08005dcf
 8005c78:	08005c1d 	.word	0x08005c1d
 8005c7c:	08005cd1 	.word	0x08005cd1
 8005c80:	08005c1d 	.word	0x08005c1d
 8005c84:	08005c1d 	.word	0x08005c1d
 8005c88:	08005d97 	.word	0x08005d97
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	602a      	str	r2, [r5, #0]
 8005c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0a3      	b.n	8005de8 <_printf_i+0x1f4>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	6829      	ldr	r1, [r5, #0]
 8005ca4:	0606      	lsls	r6, r0, #24
 8005ca6:	f101 0304 	add.w	r3, r1, #4
 8005caa:	d50a      	bpl.n	8005cc2 <_printf_i+0xce>
 8005cac:	680e      	ldr	r6, [r1, #0]
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	2e00      	cmp	r6, #0
 8005cb2:	da03      	bge.n	8005cbc <_printf_i+0xc8>
 8005cb4:	232d      	movs	r3, #45	; 0x2d
 8005cb6:	4276      	negs	r6, r6
 8005cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cbc:	485e      	ldr	r0, [pc, #376]	; (8005e38 <_printf_i+0x244>)
 8005cbe:	230a      	movs	r3, #10
 8005cc0:	e019      	b.n	8005cf6 <_printf_i+0x102>
 8005cc2:	680e      	ldr	r6, [r1, #0]
 8005cc4:	602b      	str	r3, [r5, #0]
 8005cc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cca:	bf18      	it	ne
 8005ccc:	b236      	sxthne	r6, r6
 8005cce:	e7ef      	b.n	8005cb0 <_printf_i+0xbc>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	6820      	ldr	r0, [r4, #0]
 8005cd4:	1d19      	adds	r1, r3, #4
 8005cd6:	6029      	str	r1, [r5, #0]
 8005cd8:	0601      	lsls	r1, r0, #24
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0xec>
 8005cdc:	681e      	ldr	r6, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0xf2>
 8005ce0:	0646      	lsls	r6, r0, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0xe8>
 8005ce4:	881e      	ldrh	r6, [r3, #0]
 8005ce6:	4854      	ldr	r0, [pc, #336]	; (8005e38 <_printf_i+0x244>)
 8005ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8005cea:	bf0c      	ite	eq
 8005cec:	2308      	moveq	r3, #8
 8005cee:	230a      	movne	r3, #10
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cf6:	6865      	ldr	r5, [r4, #4]
 8005cf8:	60a5      	str	r5, [r4, #8]
 8005cfa:	2d00      	cmp	r5, #0
 8005cfc:	bfa2      	ittt	ge
 8005cfe:	6821      	ldrge	r1, [r4, #0]
 8005d00:	f021 0104 	bicge.w	r1, r1, #4
 8005d04:	6021      	strge	r1, [r4, #0]
 8005d06:	b90e      	cbnz	r6, 8005d0c <_printf_i+0x118>
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	d04d      	beq.n	8005da8 <_printf_i+0x1b4>
 8005d0c:	4615      	mov	r5, r2
 8005d0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d12:	fb03 6711 	mls	r7, r3, r1, r6
 8005d16:	5dc7      	ldrb	r7, [r0, r7]
 8005d18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d1c:	4637      	mov	r7, r6
 8005d1e:	42bb      	cmp	r3, r7
 8005d20:	460e      	mov	r6, r1
 8005d22:	d9f4      	bls.n	8005d0e <_printf_i+0x11a>
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d10b      	bne.n	8005d40 <_printf_i+0x14c>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	07de      	lsls	r6, r3, #31
 8005d2c:	d508      	bpl.n	8005d40 <_printf_i+0x14c>
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	6861      	ldr	r1, [r4, #4]
 8005d32:	4299      	cmp	r1, r3
 8005d34:	bfde      	ittt	le
 8005d36:	2330      	movle	r3, #48	; 0x30
 8005d38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d40:	1b52      	subs	r2, r2, r5
 8005d42:	6122      	str	r2, [r4, #16]
 8005d44:	f8cd a000 	str.w	sl, [sp]
 8005d48:	464b      	mov	r3, r9
 8005d4a:	aa03      	add	r2, sp, #12
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f7ff fee2 	bl	8005b18 <_printf_common>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d14c      	bne.n	8005df2 <_printf_i+0x1fe>
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	b004      	add	sp, #16
 8005d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d62:	4835      	ldr	r0, [pc, #212]	; (8005e38 <_printf_i+0x244>)
 8005d64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d68:	6829      	ldr	r1, [r5, #0]
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d70:	6029      	str	r1, [r5, #0]
 8005d72:	061d      	lsls	r5, r3, #24
 8005d74:	d514      	bpl.n	8005da0 <_printf_i+0x1ac>
 8005d76:	07df      	lsls	r7, r3, #31
 8005d78:	bf44      	itt	mi
 8005d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d7e:	6023      	strmi	r3, [r4, #0]
 8005d80:	b91e      	cbnz	r6, 8005d8a <_printf_i+0x196>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	f023 0320 	bic.w	r3, r3, #32
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	e7b0      	b.n	8005cf0 <_printf_i+0xfc>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	f043 0320 	orr.w	r3, r3, #32
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	2378      	movs	r3, #120	; 0x78
 8005d98:	4828      	ldr	r0, [pc, #160]	; (8005e3c <_printf_i+0x248>)
 8005d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d9e:	e7e3      	b.n	8005d68 <_printf_i+0x174>
 8005da0:	0659      	lsls	r1, r3, #25
 8005da2:	bf48      	it	mi
 8005da4:	b2b6      	uxthmi	r6, r6
 8005da6:	e7e6      	b.n	8005d76 <_printf_i+0x182>
 8005da8:	4615      	mov	r5, r2
 8005daa:	e7bb      	b.n	8005d24 <_printf_i+0x130>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	6826      	ldr	r6, [r4, #0]
 8005db0:	6961      	ldr	r1, [r4, #20]
 8005db2:	1d18      	adds	r0, r3, #4
 8005db4:	6028      	str	r0, [r5, #0]
 8005db6:	0635      	lsls	r5, r6, #24
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	d501      	bpl.n	8005dc0 <_printf_i+0x1cc>
 8005dbc:	6019      	str	r1, [r3, #0]
 8005dbe:	e002      	b.n	8005dc6 <_printf_i+0x1d2>
 8005dc0:	0670      	lsls	r0, r6, #25
 8005dc2:	d5fb      	bpl.n	8005dbc <_printf_i+0x1c8>
 8005dc4:	8019      	strh	r1, [r3, #0]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6123      	str	r3, [r4, #16]
 8005dca:	4615      	mov	r5, r2
 8005dcc:	e7ba      	b.n	8005d44 <_printf_i+0x150>
 8005dce:	682b      	ldr	r3, [r5, #0]
 8005dd0:	1d1a      	adds	r2, r3, #4
 8005dd2:	602a      	str	r2, [r5, #0]
 8005dd4:	681d      	ldr	r5, [r3, #0]
 8005dd6:	6862      	ldr	r2, [r4, #4]
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f7fa fa20 	bl	8000220 <memchr>
 8005de0:	b108      	cbz	r0, 8005de6 <_printf_i+0x1f2>
 8005de2:	1b40      	subs	r0, r0, r5
 8005de4:	6060      	str	r0, [r4, #4]
 8005de6:	6863      	ldr	r3, [r4, #4]
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	2300      	movs	r3, #0
 8005dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df0:	e7a8      	b.n	8005d44 <_printf_i+0x150>
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	462a      	mov	r2, r5
 8005df6:	4649      	mov	r1, r9
 8005df8:	4640      	mov	r0, r8
 8005dfa:	47d0      	blx	sl
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d0ab      	beq.n	8005d58 <_printf_i+0x164>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	079b      	lsls	r3, r3, #30
 8005e04:	d413      	bmi.n	8005e2e <_printf_i+0x23a>
 8005e06:	68e0      	ldr	r0, [r4, #12]
 8005e08:	9b03      	ldr	r3, [sp, #12]
 8005e0a:	4298      	cmp	r0, r3
 8005e0c:	bfb8      	it	lt
 8005e0e:	4618      	movlt	r0, r3
 8005e10:	e7a4      	b.n	8005d5c <_printf_i+0x168>
 8005e12:	2301      	movs	r3, #1
 8005e14:	4632      	mov	r2, r6
 8005e16:	4649      	mov	r1, r9
 8005e18:	4640      	mov	r0, r8
 8005e1a:	47d0      	blx	sl
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d09b      	beq.n	8005d58 <_printf_i+0x164>
 8005e20:	3501      	adds	r5, #1
 8005e22:	68e3      	ldr	r3, [r4, #12]
 8005e24:	9903      	ldr	r1, [sp, #12]
 8005e26:	1a5b      	subs	r3, r3, r1
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	dcf2      	bgt.n	8005e12 <_printf_i+0x21e>
 8005e2c:	e7eb      	b.n	8005e06 <_printf_i+0x212>
 8005e2e:	2500      	movs	r5, #0
 8005e30:	f104 0619 	add.w	r6, r4, #25
 8005e34:	e7f5      	b.n	8005e22 <_printf_i+0x22e>
 8005e36:	bf00      	nop
 8005e38:	080062ae 	.word	0x080062ae
 8005e3c:	080062bf 	.word	0x080062bf

08005e40 <__retarget_lock_acquire_recursive>:
 8005e40:	4770      	bx	lr

08005e42 <__retarget_lock_release_recursive>:
 8005e42:	4770      	bx	lr

08005e44 <memcpy>:
 8005e44:	440a      	add	r2, r1
 8005e46:	4291      	cmp	r1, r2
 8005e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e4c:	d100      	bne.n	8005e50 <memcpy+0xc>
 8005e4e:	4770      	bx	lr
 8005e50:	b510      	push	{r4, lr}
 8005e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e5a:	4291      	cmp	r1, r2
 8005e5c:	d1f9      	bne.n	8005e52 <memcpy+0xe>
 8005e5e:	bd10      	pop	{r4, pc}

08005e60 <memmove>:
 8005e60:	4288      	cmp	r0, r1
 8005e62:	b510      	push	{r4, lr}
 8005e64:	eb01 0402 	add.w	r4, r1, r2
 8005e68:	d902      	bls.n	8005e70 <memmove+0x10>
 8005e6a:	4284      	cmp	r4, r0
 8005e6c:	4623      	mov	r3, r4
 8005e6e:	d807      	bhi.n	8005e80 <memmove+0x20>
 8005e70:	1e43      	subs	r3, r0, #1
 8005e72:	42a1      	cmp	r1, r4
 8005e74:	d008      	beq.n	8005e88 <memmove+0x28>
 8005e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e7e:	e7f8      	b.n	8005e72 <memmove+0x12>
 8005e80:	4402      	add	r2, r0
 8005e82:	4601      	mov	r1, r0
 8005e84:	428a      	cmp	r2, r1
 8005e86:	d100      	bne.n	8005e8a <memmove+0x2a>
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e92:	e7f7      	b.n	8005e84 <memmove+0x24>

08005e94 <_realloc_r>:
 8005e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e98:	4680      	mov	r8, r0
 8005e9a:	4614      	mov	r4, r2
 8005e9c:	460e      	mov	r6, r1
 8005e9e:	b921      	cbnz	r1, 8005eaa <_realloc_r+0x16>
 8005ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	f7ff bba7 	b.w	80055f8 <_malloc_r>
 8005eaa:	b92a      	cbnz	r2, 8005eb8 <_realloc_r+0x24>
 8005eac:	f7ff fb38 	bl	8005520 <_free_r>
 8005eb0:	4625      	mov	r5, r4
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb8:	f000 f81b 	bl	8005ef2 <_malloc_usable_size_r>
 8005ebc:	4284      	cmp	r4, r0
 8005ebe:	4607      	mov	r7, r0
 8005ec0:	d802      	bhi.n	8005ec8 <_realloc_r+0x34>
 8005ec2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ec6:	d812      	bhi.n	8005eee <_realloc_r+0x5a>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	4640      	mov	r0, r8
 8005ecc:	f7ff fb94 	bl	80055f8 <_malloc_r>
 8005ed0:	4605      	mov	r5, r0
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d0ed      	beq.n	8005eb2 <_realloc_r+0x1e>
 8005ed6:	42bc      	cmp	r4, r7
 8005ed8:	4622      	mov	r2, r4
 8005eda:	4631      	mov	r1, r6
 8005edc:	bf28      	it	cs
 8005ede:	463a      	movcs	r2, r7
 8005ee0:	f7ff ffb0 	bl	8005e44 <memcpy>
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	f7ff fb1a 	bl	8005520 <_free_r>
 8005eec:	e7e1      	b.n	8005eb2 <_realloc_r+0x1e>
 8005eee:	4635      	mov	r5, r6
 8005ef0:	e7df      	b.n	8005eb2 <_realloc_r+0x1e>

08005ef2 <_malloc_usable_size_r>:
 8005ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef6:	1f18      	subs	r0, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bfbc      	itt	lt
 8005efc:	580b      	ldrlt	r3, [r1, r0]
 8005efe:	18c0      	addlt	r0, r0, r3
 8005f00:	4770      	bx	lr
	...

08005f04 <_init>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	bf00      	nop
 8005f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0a:	bc08      	pop	{r3}
 8005f0c:	469e      	mov	lr, r3
 8005f0e:	4770      	bx	lr

08005f10 <_fini>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr
