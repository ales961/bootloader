
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f9c  0801389c  0801389c  0002389c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016838  08016838  00030120  2**0
                  CONTENTS
  4 .ARM          00000008  08016838  08016838  00026838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016840  08016840  00030120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016840  08016840  00026840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016844  08016844  00026844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08016848  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030120  2**0
                  CONTENTS
 10 .bss          00008080  20000120  20000120  00030120  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  200081a0  200081a0  00030120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029a24  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000076aa  00000000  00000000  00059b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002020  00000000  00000000  00061220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e50  00000000  00000000  00063240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000331e2  00000000  00000000  00065090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033601  00000000  00000000  00098272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2bea  00000000  00000000  000cb873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001be45d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008bcc  00000000  00000000  001be4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000120 	.word	0x20000120
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013884 	.word	0x08013884

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000124 	.word	0x20000124
 80001ec:	08013884 	.word	0x08013884

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <getVersions>:
uint32_t notValidFlagAddress2 = CONFIG_2_ADDRESS + 8;
uint32_t versionAddress2 = CONFIG_2_ADDRESS + 12;
uint32_t notCorrectUpdateFlagAddress2 = CONFIG_2_ADDRESS + 16;

static char versionBuf[128];
char* getVersions() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	uint32_t ver1 = FlashReadWord(versionAddress1);
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <getVersions+0x74>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fbf6 	bl	8000dc0 <FlashReadWord>
 80005d4:	6078      	str	r0, [r7, #4]
	uint32_t ver2 = FlashReadWord(versionAddress2);
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <getVersions+0x78>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fbf0 	bl	8000dc0 <FlashReadWord>
 80005e0:	6038      	str	r0, [r7, #0]
	if (ver1 == EMPTY && ver2 == EMPTY) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d105      	bne.n	80005f6 <getVersions+0x32>
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f0:	d101      	bne.n	80005f6 <getVersions+0x32>
		return "No applications in flash\n";
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <getVersions+0x7c>)
 80005f4:	e01c      	b.n	8000630 <getVersions+0x6c>
	} else if (ver1 == EMPTY) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fc:	d106      	bne.n	800060c <getVersions+0x48>
		sprintf(versionBuf, "App 1 version: none\nApp 2 version: %"PRIu32"\n", ver2);
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	4910      	ldr	r1, [pc, #64]	; (8000644 <getVersions+0x80>)
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <getVersions+0x84>)
 8000604:	f012 f804 	bl	8012610 <siprintf>
		return versionBuf;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <getVersions+0x84>)
 800060a:	e011      	b.n	8000630 <getVersions+0x6c>
	} else if (ver2 == EMPTY) {
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000612:	d106      	bne.n	8000622 <getVersions+0x5e>
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: none\n", ver1);
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <getVersions+0x88>)
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <getVersions+0x84>)
 800061a:	f011 fff9 	bl	8012610 <siprintf>
		return versionBuf;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <getVersions+0x84>)
 8000620:	e006      	b.n	8000630 <getVersions+0x6c>
	} else {
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: %"PRIu32"\n", ver1, ver2);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	490a      	ldr	r1, [pc, #40]	; (8000650 <getVersions+0x8c>)
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <getVersions+0x84>)
 800062a:	f011 fff1 	bl	8012610 <siprintf>
		return versionBuf;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <getVersions+0x84>)
	}
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000006c 	.word	0x2000006c
 800063c:	20000080 	.word	0x20000080
 8000640:	0801389c 	.word	0x0801389c
 8000644:	080138b8 	.word	0x080138b8
 8000648:	2000013c 	.word	0x2000013c
 800064c:	080138e0 	.word	0x080138e0
 8000650:	08013908 	.word	0x08013908

08000654 <getLatestApplicationAddress>:

uint32_t getLatestApplicationAddress() {
 8000654:	b598      	push	{r3, r4, r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if (FlashReadWord(seqAddress1) < FlashReadWord(seqAddress2)) {
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <getLatestApplicationAddress+0x4c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fbaf 	bl	8000dc0 <FlashReadWord>
 8000662:	4604      	mov	r4, r0
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <getLatestApplicationAddress+0x50>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fba9 	bl	8000dc0 <FlashReadWord>
 800066e:	4603      	mov	r3, r0
 8000670:	429c      	cmp	r4, r3
 8000672:	d201      	bcs.n	8000678 <getLatestApplicationAddress+0x24>
		return APP_1_ADDRESS;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <getLatestApplicationAddress+0x54>)
 8000676:	e010      	b.n	800069a <getLatestApplicationAddress+0x46>
	} else if (FlashReadWord(seqAddress2) < FlashReadWord(seqAddress1)) {
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <getLatestApplicationAddress+0x50>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fb9f 	bl	8000dc0 <FlashReadWord>
 8000682:	4604      	mov	r4, r0
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <getLatestApplicationAddress+0x4c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fb99 	bl	8000dc0 <FlashReadWord>
 800068e:	4603      	mov	r3, r0
 8000690:	429c      	cmp	r4, r3
 8000692:	d201      	bcs.n	8000698 <getLatestApplicationAddress+0x44>
		return APP_2_ADDRESS;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <getLatestApplicationAddress+0x58>)
 8000696:	e000      	b.n	800069a <getLatestApplicationAddress+0x46>
	} else {
		return 0;
 8000698:	2300      	movs	r3, #0
	}
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd98      	pop	{r3, r4, r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000060 	.word	0x20000060
 80006a4:	20000074 	.word	0x20000074
 80006a8:	08020000 	.word	0x08020000
 80006ac:	08110000 	.word	0x08110000

080006b0 <updateConfig>:

void updateConfig() {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 80006b6:	f7ff ffcd 	bl	8000654 <getLatestApplicationAddress>
 80006ba:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_1_ADDRESS) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <updateConfig+0x60>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d110      	bne.n	80006e6 <updateConfig+0x36>
		EraseSector(CONFIG_2_SECTOR);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fb87 	bl	8000dd8 <EraseSector>
		FlashWriteWord(seqAddress2, FlashReadWord(seqAddress1) - 1);
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <updateConfig+0x64>)
 80006cc:	681c      	ldr	r4, [r3, #0]
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <updateConfig+0x68>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fb74 	bl	8000dc0 <FlashReadWord>
 80006d8:	4603      	mov	r3, r0
 80006da:	3b01      	subs	r3, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	4620      	mov	r0, r4
 80006e0:	f000 fb4f 	bl	8000d82 <FlashWriteWord>
		EraseSector(CONFIG_1_SECTOR);
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
		//FlashWriteWord(firstBootFlagAddress1, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress1, 0xFFFF); // FFFF - not valid (default)
	}
}
 80006e4:	e00f      	b.n	8000706 <updateConfig+0x56>
		EraseSector(CONFIG_1_SECTOR);
 80006e6:	200e      	movs	r0, #14
 80006e8:	f000 fb76 	bl	8000dd8 <EraseSector>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <updateConfig+0x68>)
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <updateConfig+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fb63 	bl	8000dc0 <FlashReadWord>
 80006fa:	4603      	mov	r3, r0
 80006fc:	3b01      	subs	r3, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	4620      	mov	r0, r4
 8000702:	f000 fb3e 	bl	8000d82 <FlashWriteWord>
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bd90      	pop	{r4, r7, pc}
 800070e:	bf00      	nop
 8000710:	08020000 	.word	0x08020000
 8000714:	20000074 	.word	0x20000074
 8000718:	20000060 	.word	0x20000060

0800071c <setAppVersion>:

void setAppVersion(uint32_t version) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	uint32_t latestAppAddress = getLatestApplicationAddress();
 8000724:	f7ff ff96 	bl	8000654 <getLatestApplicationAddress>
 8000728:	60f8      	str	r0, [r7, #12]
		if (latestAppAddress == APP_1_ADDRESS) {
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <setAppVersion+0x38>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <setAppVersion+0x24>
			FlashWriteWord(versionAddress1, version);
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <setAppVersion+0x3c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fb22 	bl	8000d82 <FlashWriteWord>
		} else {
			FlashWriteWord(versionAddress2, version);
		}
}
 800073e:	e005      	b.n	800074c <setAppVersion+0x30>
			FlashWriteWord(versionAddress2, version);
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <setAppVersion+0x40>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fb1b 	bl	8000d82 <FlashWriteWord>
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	08020000 	.word	0x08020000
 8000758:	2000006c 	.word	0x2000006c
 800075c:	20000080 	.word	0x20000080

08000760 <setCorrectUpdateFlag>:

void setCorrectUpdateFlag() {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 8000766:	f7ff ff75 	bl	8000654 <getLatestApplicationAddress>
 800076a:	6078      	str	r0, [r7, #4]
		if (latestAppAddress == APP_1_ADDRESS) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <setCorrectUpdateFlag+0x38>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d106      	bne.n	8000782 <setCorrectUpdateFlag+0x22>
			FlashWriteWord(notCorrectUpdateFlagAddress1, 0);
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <setCorrectUpdateFlag+0x3c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fb01 	bl	8000d82 <FlashWriteWord>
		} else {
			FlashWriteWord(notCorrectUpdateFlagAddress2, 0);
		}
}
 8000780:	e005      	b.n	800078e <setCorrectUpdateFlag+0x2e>
			FlashWriteWord(notCorrectUpdateFlagAddress2, 0);
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <setCorrectUpdateFlag+0x40>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fafa 	bl	8000d82 <FlashWriteWord>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08020000 	.word	0x08020000
 800079c:	20000070 	.word	0x20000070
 80007a0:	20000084 	.word	0x20000084

080007a4 <validateApplications>:

void validateApplications() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
	uint32_t nValid1 = FlashReadWord(notValidFlagAddress1);
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <validateApplications+0x8c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fb06 	bl	8000dc0 <FlashReadWord>
 80007b4:	6178      	str	r0, [r7, #20]
	uint32_t firstBoot1 = FlashReadWord(firstBootFlagAddress1);
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <validateApplications+0x90>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fb00 	bl	8000dc0 <FlashReadWord>
 80007c0:	6138      	str	r0, [r7, #16]
	uint32_t nCorrect1 = FlashReadWord(notCorrectUpdateFlagAddress1);
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <validateApplications+0x94>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fafa 	bl	8000dc0 <FlashReadWord>
 80007cc:	60f8      	str	r0, [r7, #12]
	uint32_t nValid2 = FlashReadWord(notValidFlagAddress2);
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <validateApplications+0x98>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 faf4 	bl	8000dc0 <FlashReadWord>
 80007d8:	60b8      	str	r0, [r7, #8]
	uint32_t firstBoot2 = FlashReadWord(firstBootFlagAddress2);
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <validateApplications+0x9c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 faee 	bl	8000dc0 <FlashReadWord>
 80007e4:	6078      	str	r0, [r7, #4]
	uint32_t nCorrect2 = FlashReadWord(notCorrectUpdateFlagAddress2);
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <validateApplications+0xa0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fae8 	bl	8000dc0 <FlashReadWord>
 80007f0:	6038      	str	r0, [r7, #0]
	if ((nValid1 == EMPTY && firstBoot1 == 0) || nCorrect1 != 0)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f8:	d102      	bne.n	8000800 <validateApplications+0x5c>
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <validateApplications+0x62>
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <validateApplications+0x68>
		EraseSector(CONFIG_1_SECTOR);
 8000806:	200e      	movs	r0, #14
 8000808:	f000 fae6 	bl	8000dd8 <EraseSector>
	if ((nValid2 == EMPTY && firstBoot2 == 0) || nCorrect2 != 0)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000812:	d102      	bne.n	800081a <validateApplications+0x76>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <validateApplications+0x7c>
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <validateApplications+0x82>
		EraseSector(CONFIG_2_SECTOR);
 8000820:	200f      	movs	r0, #15
 8000822:	f000 fad9 	bl	8000dd8 <EraseSector>
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000068 	.word	0x20000068
 8000834:	20000064 	.word	0x20000064
 8000838:	20000070 	.word	0x20000070
 800083c:	2000007c 	.word	0x2000007c
 8000840:	20000078 	.word	0x20000078
 8000844:	20000084 	.word	0x20000084

08000848 <jumpToApp>:

void jumpToApp() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
	  uint32_t address = getLatestApplicationAddress();
 800084e:	f7ff ff01 	bl	8000654 <getLatestApplicationAddress>
 8000852:	6178      	str	r0, [r7, #20]
	  if (address == APP_1_ADDRESS)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	4a30      	ldr	r2, [pc, #192]	; (8000918 <jumpToApp+0xd0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <jumpToApp+0x22>
		  FlashWriteWord(firstBootFlagAddress1, 0);
 800085c:	4b2f      	ldr	r3, [pc, #188]	; (800091c <jumpToApp+0xd4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fa8d 	bl	8000d82 <FlashWriteWord>
 8000868:	e009      	b.n	800087e <jumpToApp+0x36>
	  else if (address == APP_2_ADDRESS)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <jumpToApp+0xd8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d105      	bne.n	800087e <jumpToApp+0x36>
		  FlashWriteWord(firstBootFlagAddress2, 0);
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <jumpToApp+0xdc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fa82 	bl	8000d82 <FlashWriteWord>

	  void(*app_reset_handler)();

	  //shut down any tasks remaining
	  HAL_TIM_Base_Stop_IT(&htim6);
 800087e:	482a      	ldr	r0, [pc, #168]	; (8000928 <jumpToApp+0xe0>)
 8000880:	f005 f814 	bl	80058ac <HAL_TIM_Base_Stop_IT>
	  uartDisableInterruption();
 8000884:	f001 fbde 	bl	8002044 <uartDisableInterruption>

	  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <jumpToApp+0xe4>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a27      	ldr	r2, [pc, #156]	; (800092c <jumpToApp+0xe4>)
 800088e:	f023 0304 	bic.w	r3, r3, #4
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <jumpToApp+0xe4>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a24      	ldr	r2, [pc, #144]	; (800092c <jumpToApp+0xe4>)
 800089a:	f023 0308 	bic.w	r3, r3, #8
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <jumpToApp+0xe4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a21      	ldr	r2, [pc, #132]	; (800092c <jumpToApp+0xe4>)
 80008a6:	f023 0302 	bic.w	r3, r3, #2
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <jumpToApp+0xe4>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	4a1e      	ldr	r2, [pc, #120]	; (800092c <jumpToApp+0xe4>)
 80008b2:	f023 0301 	bic.w	r3, r3, #1
 80008b6:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 80008b8:	f004 fe40 	bl	800553c <HAL_RCC_DeInit>
	  HAL_DeInit();// to disable all the peripherals
 80008bc:	f002 f81e 	bl	80028fc <HAL_DeInit>

	  SysTick->CTRL = 0;//to turn off the systick
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <jumpToApp+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <jumpToApp+0xe8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <jumpToApp+0xe8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	2301      	movs	r3, #1
 80008d4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	f383 8810 	msr	PRIMASK, r3
}
 80008dc:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80008de:	b672      	cpsid	i
}
 80008e0:	bf00      	nop
	  //disable interrupts
	  __set_PRIMASK(1);
	  __disable_irq();

	  //__DMB(); // Data Memory Barrier to ensure write to memory is completed
	  SCB->VTOR = address;//change this
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <jumpToApp+0xec>)
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	6093      	str	r3, [r2, #8]
      //__DSB(); // Data Synchronization Barrier to ensure all subsequence instructions use the new configuation

	  //configure the MSP by reading the value from the base address
	  uint32_t msp_value = *(__IO uint32_t*) address;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f383 8808 	msr	MSP, r3
}
 80008f8:	bf00      	nop

	  __set_MSP(msp_value);

	  uint32_t resethandler_address = *(__IO uint32_t*) (address + 4);
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3304      	adds	r3, #4
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]

	  app_reset_handler = (void (*)(void)) (resethandler_address);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000906:	b662      	cpsie	i
}
 8000908:	bf00      	nop

	  //jump to reset handler of the user app.
	  __enable_irq();
	  app_reset_handler();
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	4798      	blx	r3
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	08020000 	.word	0x08020000
 800091c:	20000064 	.word	0x20000064
 8000920:	08110000 	.word	0x08110000
 8000924:	20000078 	.word	0x20000078
 8000928:	200002a8 	.word	0x200002a8
 800092c:	40023800 	.word	0x40023800
 8000930:	e000e010 	.word	0xe000e010
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <EraseNecessarySectors>:

void EraseNecessarySectors(uint32_t address, uint8_t* sector) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	if (address == sectorAddresses[*sector]) {
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <EraseNecessarySectors+0x3c>)
 800094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	d10a      	bne.n	800096a <EraseNecessarySectors+0x32>
		EraseSector(*sector);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fa3d 	bl	8000dd8 <EraseSector>
		(*sector)++;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	701a      	strb	r2, [r3, #0]
	}
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000000 	.word	0x20000000

08000978 <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 8000982:	200c      	movs	r0, #12
 8000984:	f011 fcb6 	bl	80122f4 <malloc>
 8000988:	4603      	mov	r3, r0
 800098a:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4618      	mov	r0, r3
 8000990:	f011 fcb0 	bl	80122f4 <malloc>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	88fa      	ldrh	r2, [r7, #6]
 80009a0:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f000 f886 	bl	8000ab4 <bufferClear>
    return buffer;
 80009a8:	68fb      	ldr	r3, [r7, #12]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	889a      	ldrh	r2, [r3, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	88db      	ldrh	r3, [r3, #6]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d21f      	bcs.n	8000a0a <bufferPush+0x58>
        disableInt();
 80009ca:	f000 f8e7 	bl	8000b9c <disableInt>

        buffer->data[buffer->ptrIn] = value;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	8812      	ldrh	r2, [r2, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	78fa      	ldrb	r2, [r7, #3]
 80009da:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	88d2      	ldrh	r2, [r2, #6]
 80009e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80009ea:	fb01 f202 	mul.w	r2, r1, r2
 80009ee:	1a9b      	subs	r3, r3, r2
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	889b      	ldrh	r3, [r3, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	809a      	strh	r2, [r3, #4]

        enableInt();
 8000a02:	f000 f8df 	bl	8000bc4 <enableInt>
        return 1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <bufferPush+0x5a>
    } else
        return 0;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	82fb      	strh	r3, [r7, #22]
 8000a26:	e00f      	b.n	8000a48 <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 8000a28:	8afb      	ldrh	r3, [r7, #22]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ffbd 	bl	80009b2 <bufferPush>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <bufferPushValues+0x2e>
            return pushed;
 8000a3e:	8afb      	ldrh	r3, [r7, #22]
 8000a40:	e007      	b.n	8000a52 <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8000a42:	8afb      	ldrh	r3, [r7, #22]
 8000a44:	3301      	adds	r3, #1
 8000a46:	82fb      	strh	r3, [r7, #22]
 8000a48:	8afa      	ldrh	r2, [r7, #22]
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d3eb      	bcc.n	8000a28 <bufferPushValues+0x14>
    }
    return pushed;
 8000a50:	8afb      	ldrh	r3, [r7, #22]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <bufferPop+0x14>
        return 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e01e      	b.n	8000aac <bufferPop+0x52>

    disableInt();
 8000a6e:	f000 f895 	bl	8000b9c <disableInt>

    buffer->size--;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	8852      	ldrh	r2, [r2, #2]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	885b      	ldrh	r3, [r3, #2]
 8000a90:	3301      	adds	r3, #1
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	88d2      	ldrh	r2, [r2, #6]
 8000a96:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a9a:	fb01 f202 	mul.w	r2, r1, r2
 8000a9e:	1a9b      	subs	r3, r3, r2
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	805a      	strh	r2, [r3, #2]

    enableInt();
 8000aa6:	f000 f88d 	bl	8000bc4 <enableInt>

    return value;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <bufferClear>:

uint8_t bufferPeek(const Buffer * const buffer) {
    return buffer->data[buffer->ptrOut];
}

void bufferClear(Buffer * const buffer) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    disableInt();
 8000abc:	f000 f86e 	bl	8000b9c <disableInt>
    buffer->size = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	805a      	strh	r2, [r3, #2]
    enableInt();
 8000ad2:	f000 f877 	bl	8000bc4 <enableInt>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff ffe5 	bl	8000ade <bufferHasValues>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <bufferPopValues+0x1e>
        return 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e01d      	b.n	8000b5a <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f81f 	bl	8000b62 <bufferGetSize>
 8000b24:	4603      	mov	r3, r0
 8000b26:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 8000b28:	8afa      	ldrh	r2, [r7, #22]
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d901      	bls.n	8000b34 <bufferPopValues+0x34>
        popSize = bufSize;
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	82bb      	strh	r3, [r7, #20]
 8000b38:	e00a      	b.n	8000b50 <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 8000b3a:	8abb      	ldrh	r3, [r7, #20]
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	18d4      	adds	r4, r2, r3
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f7ff ff8a 	bl	8000a5a <bufferPop>
 8000b46:	4603      	mov	r3, r0
 8000b48:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 8000b4a:	8abb      	ldrh	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	82bb      	strh	r3, [r7, #20]
 8000b50:	8aba      	ldrh	r2, [r7, #20]
 8000b52:	8afb      	ldrh	r3, [r7, #22]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d3f0      	bcc.n	8000b3a <bufferPopValues+0x3a>
    return popSize;
 8000b58:	8afb      	ldrh	r3, [r7, #22]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}

08000b62 <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
    return buffer->size;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	889b      	ldrh	r3, [r3, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	88da      	ldrh	r2, [r3, #6]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	889b      	ldrh	r3, [r3, #4]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	b29b      	uxth	r3, r3
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <disableInt>:
		bufferPush(destination, var);
	}
	return 1;
}

static void disableInt() {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8000ba6:	607b      	str	r3, [r7, #4]
  return(result);
 8000ba8:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <disableInt+0x24>)
 8000bac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bae:	b672      	cpsid	i
}
 8000bb0:	bf00      	nop
    __disable_irq();
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200001bc 	.word	0x200001bc

08000bc4 <enableInt>:

static void enableInt() {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <enableInt+0x20>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f383 8810 	msr	PRIMASK, r3
}
 8000bd6:	bf00      	nop
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200001bc 	.word	0x200001bc

08000be8 <commandCreate>:
};

static uint8_t parseInt(const char *str, uint32_t *result);
static uint8_t parseOnOffStatus(const char *str, OnOffStatus *result);

Command * commandCreate(const char * const name, const CommandAction action, const CommandArgument argType) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	71fb      	strb	r3, [r7, #7]
    size_t nameLen = strlen(name);
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f7ff fb04 	bl	8000204 <strlen>
 8000bfc:	61f8      	str	r0, [r7, #28]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4618      	mov	r0, r3
 8000c04:	f011 fb76 	bl	80122f4 <malloc>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	61bb      	str	r3, [r7, #24]
    strcpy(nameCopy, name);
 8000c0c:	68f9      	ldr	r1, [r7, #12]
 8000c0e:	69b8      	ldr	r0, [r7, #24]
 8000c10:	f011 fd1e 	bl	8012650 <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 8000c14:	200c      	movs	r0, #12
 8000c16:	f011 fb6d 	bl	80122f4 <malloc>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	617b      	str	r3, [r7, #20]
    command->name = nameCopy;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	601a      	str	r2, [r3, #0]
    command->action = action;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	605a      	str	r2, [r3, #4]
    command->argType = argType;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	79fa      	ldrb	r2, [r7, #7]
 8000c2e:	721a      	strb	r2, [r3, #8]
    return command;
 8000c30:	697b      	ldr	r3, [r7, #20]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <commandExecute>:

const char * commandExecute(const Command * const command, const char * const argument) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
    if (command == NULL || command->action == NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <commandExecute+0x18>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <commandExecute+0x1c>
        return NULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	e037      	b.n	8000cc8 <commandExecute+0x8c>
    switch (command->argType) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7a1b      	ldrb	r3, [r3, #8]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d02c      	beq.n	8000cba <commandExecute+0x7e>
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	dc30      	bgt.n	8000cc6 <commandExecute+0x8a>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <commandExecute+0x32>
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d013      	beq.n	8000c94 <commandExecute+0x58>
 8000c6c:	e02b      	b.n	8000cc6 <commandExecute+0x8a>
        case INT:
        {
            uint32_t intArg;
            if (!parseInt(argument, &intArg))
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	6838      	ldr	r0, [r7, #0]
 8000c76:	f000 f831 	bl	8000cdc <parseInt>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <commandExecute+0x48>
                return "The argument must be integer\n";
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <commandExecute+0x94>)
 8000c82:	e021      	b.n	8000cc8 <commandExecute+0x8c>
            return (*command->action)(&intArg);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f107 020c 	add.w	r2, r7, #12
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	4798      	blx	r3
 8000c90:	4603      	mov	r3, r0
 8000c92:	e019      	b.n	8000cc8 <commandExecute+0x8c>
        }
        case ON_OFF:
        {
            OnOffStatus statusArg;
            if (!parseOnOffStatus(argument, &statusArg))
 8000c94:	f107 030b 	add.w	r3, r7, #11
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6838      	ldr	r0, [r7, #0]
 8000c9c:	f000 f83a 	bl	8000d14 <parseOnOffStatus>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <commandExecute+0x6e>
                return "The argument must be 'on' or 'off'\n";
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <commandExecute+0x98>)
 8000ca8:	e00e      	b.n	8000cc8 <commandExecute+0x8c>
            return (*command->action)(&statusArg);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f107 020b 	add.w	r2, r7, #11
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4798      	blx	r3
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	e006      	b.n	8000cc8 <commandExecute+0x8c>
        }
        case NONE:
            return (*command->action)(NULL);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	4798      	blx	r3
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	e000      	b.n	8000cc8 <commandExecute+0x8c>
        default:
            return "Unknown argument type\n";
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <commandExecute+0x9c>)
    }
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	08013930 	.word	0x08013930
 8000cd4:	08013950 	.word	0x08013950
 8000cd8:	08013974 	.word	0x08013974

08000cdc <parseInt>:

static uint8_t parseInt(const char * const str, uint32_t * const result) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
    char *endPtr = NULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
    *result = strtoul(str, &(endPtr), 10);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	220a      	movs	r2, #10
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f011 fd26 	bl	8012744 <strtoul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	601a      	str	r2, [r3, #0]
    if (endPtr == str) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d101      	bne.n	8000d0a <parseInt+0x2e>
        return 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <parseInt+0x30>
    }
    return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <parseOnOffStatus>:

static uint8_t parseOnOffStatus(const char *str, OnOffStatus * const result) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
    if (strcmp(str, "on") == 0) {
 8000d1e:	490e      	ldr	r1, [pc, #56]	; (8000d58 <parseOnOffStatus+0x44>)
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fa65 	bl	80001f0 <strcmp>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d104      	bne.n	8000d36 <parseOnOffStatus+0x22>
        *result = ON;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
        return 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00c      	b.n	8000d50 <parseOnOffStatus+0x3c>
    } else if (strcmp(str, "off") == 0) {
 8000d36:	4909      	ldr	r1, [pc, #36]	; (8000d5c <parseOnOffStatus+0x48>)
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fa59 	bl	80001f0 <strcmp>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d104      	bne.n	8000d4e <parseOnOffStatus+0x3a>
        *result = OFF;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
        return 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <parseOnOffStatus+0x3c>
    }
    return 0;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	0801398c 	.word	0x0801398c
 8000d5c:	08013990 	.word	0x08013990

08000d60 <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <commandGetName+0x12>
        return NULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e001      	b.n	8000d76 <commandGetName+0x16>
    return command->name;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <FlashWriteWord>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
	HAL_FLASH_Lock();
}

void FlashWriteWord(uint32_t Address, uint32_t Data) {
 8000d82:	b5b0      	push	{r4, r5, r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 8000d90:	f003 fa7c 	bl	800428c <HAL_FLASH_Unlock>
	while (status != HAL_OK)
 8000d94:	e00b      	b.n	8000dae <FlashWriteWord+0x2c>
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	461c      	mov	r4, r3
 8000d9c:	4615      	mov	r5, r2
 8000d9e:	4622      	mov	r2, r4
 8000da0:	462b      	mov	r3, r5
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	2002      	movs	r0, #2
 8000da6:	f003 fa1d 	bl	80041e4 <HAL_FLASH_Program>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f0      	bne.n	8000d96 <FlashWriteWord+0x14>
	HAL_FLASH_Lock();
 8000db4:	f003 fa8c 	bl	80042d0 <HAL_FLASH_Lock>
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bdb0      	pop	{r4, r5, r7, pc}

08000dc0 <FlashReadWord>:

uint8_t FlashReadByte(uint32_t Address) {
    return (*(__IO uint8_t*)Address);
}

uint32_t FlashReadWord(uint32_t Address) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
    return (*(__IO uint32_t*)Address);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <EraseSector>:

void EraseSector(uint32_t Sector) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 8000de4:	f003 fa52 	bl	800428c <HAL_FLASH_Unlock>
	uint32_t SectorError;
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <EraseSector+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Sector = Sector;
 8000dee:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <EraseSector+0x4c>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = 1 ;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <EraseSector+0x4c>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	60da      	str	r2, [r3, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <EraseSector+0x4c>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	611a      	str	r2, [r3, #16]
	while (status != HAL_OK)
 8000e00:	e007      	b.n	8000e12 <EraseSector+0x3a>
		status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	4619      	mov	r1, r3
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <EraseSector+0x4c>)
 8000e0a:	f003 fbb1 	bl	8004570 <HAL_FLASHEx_Erase>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f4      	bne.n	8000e02 <EraseSector+0x2a>
	HAL_FLASH_Lock();
 8000e18:	f003 fa5a 	bl	80042d0 <HAL_FLASH_Lock>
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200001c0 	.word	0x200001c0

08000e28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_GPIO_Init+0x84>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <asciiToHex>:
uint8_t tempBuf[8];

uint8_t firstFirmwarePlaceCheck = 1;
uint8_t current_sector = 0;

void asciiToHex(uint8_t* buff, uint8_t count) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i=0; i<count;i++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e023      	b.n	8000f0a <asciiToHex+0x5a>
		if(buff[i] <= '9' && buff[i] >= '0' ) {
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b39      	cmp	r3, #57	; 0x39
 8000ecc:	d810      	bhi.n	8000ef0 <asciiToHex+0x40>
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ed8:	d90a      	bls.n	8000ef0 <asciiToHex+0x40>
			buff[i] -= 0x30;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	440b      	add	r3, r1
 8000ee8:	3a30      	subs	r2, #48	; 0x30
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e009      	b.n	8000f04 <asciiToHex+0x54>
		}
		else {
			buff[i] = buff[i] - 0x41 + 10;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	440b      	add	r3, r1
 8000efe:	3a37      	subs	r2, #55	; 0x37
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
	for(i=0; i<count;i++) {
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	3301      	adds	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3d7      	bcc.n	8000ec2 <asciiToHex+0x12>
		}
	}
}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <fillBuffer>:

void fillBuffer(uint8_t* destination, uint8_t* source, uint16_t* startPtr, uint16_t count) {
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	807b      	strh	r3, [r7, #2]
	for (int16_t i = 0; i < count; i++) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	82fb      	strh	r3, [r7, #22]
 8000f32:	e014      	b.n	8000f5e <fillBuffer+0x3e>
		destination[i] = source[*startPtr + i];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f3e:	4413      	add	r3, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	441a      	add	r2, r3
 8000f46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f4a:	68f9      	ldr	r1, [r7, #12]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	701a      	strb	r2, [r3, #0]
	for (int16_t i = 0; i < count; i++) {
 8000f52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	82fb      	strh	r3, [r7, #22]
 8000f5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dbe5      	blt.n	8000f34 <fillBuffer+0x14>
	}
	*startPtr += count;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	881a      	ldrh	r2, [r3, #0]
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	801a      	strh	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <flashHex>:

uint8_t flashHex(uint8_t* flashBuf, uint16_t size) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
	uint16_t ptr = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	81fb      	strh	r3, [r7, #14]
	while (ptr < size) {
 8000f94:	e19f      	b.n	80012d6 <flashHex+0x352>
		if(flashBuf[ptr] == ':') {
 8000f96:	89fb      	ldrh	r3, [r7, #14]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b3a      	cmp	r3, #58	; 0x3a
 8000fa2:	f040 8194 	bne.w	80012ce <flashHex+0x34a>
			ptr++;
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	81fb      	strh	r3, [r7, #14]
			fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000fae:	f107 020e 	add.w	r2, r7, #14
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4897      	ldr	r0, [pc, #604]	; (8001214 <flashHex+0x290>)
 8000fb8:	f7ff ffb2 	bl	8000f20 <fillBuffer>
			asciiToHex(tempBuf, 8);
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	4895      	ldr	r0, [pc, #596]	; (8001214 <flashHex+0x290>)
 8000fc0:	f7ff ff76 	bl	8000eb0 <asciiToHex>

			size_data = 2*(tempBuf[1] + 16*tempBuf[0]);//находим размер данных
 8000fc4:	4b93      	ldr	r3, [pc, #588]	; (8001214 <flashHex+0x290>)
 8000fc6:	785b      	ldrb	r3, [r3, #1]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b92      	ldr	r3, [pc, #584]	; (8001214 <flashHex+0x290>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b8f      	ldr	r3, [pc, #572]	; (8001218 <flashHex+0x294>)
 8000fda:	701a      	strb	r2, [r3, #0]
			address_data = tempBuf[5] + 16*tempBuf[4] + 256*tempBuf[3] + 4096*tempBuf[2];//адрес
 8000fdc:	4b8d      	ldr	r3, [pc, #564]	; (8001214 <flashHex+0x290>)
 8000fde:	795b      	ldrb	r3, [r3, #5]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b8c      	ldr	r3, [pc, #560]	; (8001214 <flashHex+0x290>)
 8000fe4:	78db      	ldrb	r3, [r3, #3]
 8000fe6:	b299      	uxth	r1, r3
 8000fe8:	4b8a      	ldr	r3, [pc, #552]	; (8001214 <flashHex+0x290>)
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	b299      	uxth	r1, r3
 8000ffa:	4b86      	ldr	r3, [pc, #536]	; (8001214 <flashHex+0x290>)
 8000ffc:	791b      	ldrb	r3, [r3, #4]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	440b      	add	r3, r1
 8001002:	b29b      	uxth	r3, r3
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	b29b      	uxth	r3, r3
 8001008:	4413      	add	r3, r2
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b83      	ldr	r3, [pc, #524]	; (800121c <flashHex+0x298>)
 800100e:	801a      	strh	r2, [r3, #0]
			type_data = tempBuf[7] + 16*tempBuf[6];//и тип
 8001010:	4b80      	ldr	r3, [pc, #512]	; (8001214 <flashHex+0x290>)
 8001012:	79da      	ldrb	r2, [r3, #7]
 8001014:	4b7f      	ldr	r3, [pc, #508]	; (8001214 <flashHex+0x290>)
 8001016:	799b      	ldrb	r3, [r3, #6]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4413      	add	r3, r2
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b7f      	ldr	r3, [pc, #508]	; (8001220 <flashHex+0x29c>)
 8001022:	701a      	strb	r2, [r3, #0]

			calculation_check_sum = size_data/2 + (uint8_t)address_data + (uint8_t)(address_data>>8) + type_data;//считаем чек сумму
 8001024:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <flashHex+0x294>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	085b      	lsrs	r3, r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b7b      	ldr	r3, [pc, #492]	; (800121c <flashHex+0x298>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4413      	add	r3, r2
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b79      	ldr	r3, [pc, #484]	; (800121c <flashHex+0x298>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	b29b      	uxth	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4413      	add	r3, r2
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b76      	ldr	r3, [pc, #472]	; (8001220 <flashHex+0x29c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4413      	add	r3, r2
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b75      	ldr	r3, [pc, #468]	; (8001224 <flashHex+0x2a0>)
 800104e:	701a      	strb	r2, [r3, #0]

			if(type_data == 0x00) {
 8001050:	4b73      	ldr	r3, [pc, #460]	; (8001220 <flashHex+0x29c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	f040 80a2 	bne.w	800119e <flashHex+0x21a>
				while(size_data > 0) {
 800105a:	e075      	b.n	8001148 <flashHex+0x1c4>
					fillBuffer(tempBuf, flashBuf, &ptr, 8);
 800105c:	f107 020e 	add.w	r2, r7, #14
 8001060:	2308      	movs	r3, #8
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	486b      	ldr	r0, [pc, #428]	; (8001214 <flashHex+0x290>)
 8001066:	f7ff ff5b 	bl	8000f20 <fillBuffer>
					asciiToHex(tempBuf, 8);
 800106a:	2108      	movs	r1, #8
 800106c:	4869      	ldr	r0, [pc, #420]	; (8001214 <flashHex+0x290>)
 800106e:	f7ff ff1f 	bl	8000eb0 <asciiToHex>


					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 8001072:	2300      	movs	r3, #0
 8001074:	75fb      	strb	r3, [r7, #23]
 8001076:	e024      	b.n	80010c2 <flashHex+0x13e>
						tempBuf[i] <<= 4;
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	4a66      	ldr	r2, [pc, #408]	; (8001214 <flashHex+0x290>)
 800107c:	5cd2      	ldrb	r2, [r2, r3]
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d1      	uxtb	r1, r2
 8001084:	4a63      	ldr	r2, [pc, #396]	; (8001214 <flashHex+0x290>)
 8001086:	54d1      	strb	r1, [r2, r3]
						tempBuf[i] = tempBuf[i] | tempBuf[i+1];
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	4a62      	ldr	r2, [pc, #392]	; (8001214 <flashHex+0x290>)
 800108c:	5cd1      	ldrb	r1, [r2, r3]
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	3301      	adds	r3, #1
 8001092:	4a60      	ldr	r2, [pc, #384]	; (8001214 <flashHex+0x290>)
 8001094:	5cd2      	ldrb	r2, [r2, r3]
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	430a      	orrs	r2, r1
 800109a:	b2d1      	uxtb	r1, r2
 800109c:	4a5d      	ldr	r2, [pc, #372]	; (8001214 <flashHex+0x290>)
 800109e:	54d1      	strb	r1, [r2, r3]
						program_data |= tempBuf[i] <<(i*4);
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	4a5c      	ldr	r2, [pc, #368]	; (8001214 <flashHex+0x290>)
 80010a4:	5cd3      	ldrb	r3, [r2, r3]
 80010a6:	461a      	mov	r2, r3
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <flashHex+0x2a4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	4a5b      	ldr	r2, [pc, #364]	; (8001228 <flashHex+0x2a4>)
 80010ba:	6013      	str	r3, [r2, #0]
					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	3302      	adds	r3, #2
 80010c0:	75fb      	strb	r3, [r7, #23]
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	2b07      	cmp	r3, #7
 80010c6:	d9d7      	bls.n	8001078 <flashHex+0xf4>
					}

					EraseNecessarySectors(extented_linear_adress + address_data, &current_sector);
 80010c8:	4b54      	ldr	r3, [pc, #336]	; (800121c <flashHex+0x298>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b57      	ldr	r3, [pc, #348]	; (800122c <flashHex+0x2a8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4956      	ldr	r1, [pc, #344]	; (8001230 <flashHex+0x2ac>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fc2e 	bl	8000938 <EraseNecessarySectors>
					FlashWriteWord(extented_linear_adress + address_data, program_data);
 80010dc:	4b4f      	ldr	r3, [pc, #316]	; (800121c <flashHex+0x298>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b52      	ldr	r3, [pc, #328]	; (800122c <flashHex+0x2a8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <flashHex+0x2a4>)
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe47 	bl	8000d82 <FlashWriteWord>
					calculation_check_sum += (uint8_t)program_data + (uint8_t)(program_data>>8) + (uint8_t)(program_data>>16) + (uint8_t)(program_data>>24);
 80010f4:	4b4c      	ldr	r3, [pc, #304]	; (8001228 <flashHex+0x2a4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <flashHex+0x2a4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4413      	add	r3, r2
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <flashHex+0x2a4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0c1b      	lsrs	r3, r3, #16
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4413      	add	r3, r2
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b45      	ldr	r3, [pc, #276]	; (8001228 <flashHex+0x2a4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0e1b      	lsrs	r3, r3, #24
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4413      	add	r3, r2
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b41      	ldr	r3, [pc, #260]	; (8001224 <flashHex+0x2a0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <flashHex+0x2a0>)
 8001128:	701a      	strb	r2, [r3, #0]
					size_data -= 8;
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <flashHex+0x294>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3b08      	subs	r3, #8
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b39      	ldr	r3, [pc, #228]	; (8001218 <flashHex+0x294>)
 8001134:	701a      	strb	r2, [r3, #0]
					address_data += 4;
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <flashHex+0x298>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	3304      	adds	r3, #4
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b37      	ldr	r3, [pc, #220]	; (800121c <flashHex+0x298>)
 8001140:	801a      	strh	r2, [r3, #0]
					program_data = 0;
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <flashHex+0x2a4>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
				while(size_data > 0) {
 8001148:	4b33      	ldr	r3, [pc, #204]	; (8001218 <flashHex+0x294>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d185      	bne.n	800105c <flashHex+0xd8>
				}
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <flashHex+0x2a0>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	425b      	negs	r3, r3
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b32      	ldr	r3, [pc, #200]	; (8001224 <flashHex+0x2a0>)
 800115a:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 800115c:	f107 020e 	add.w	r2, r7, #14
 8001160:	2302      	movs	r3, #2
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	482b      	ldr	r0, [pc, #172]	; (8001214 <flashHex+0x290>)
 8001166:	f7ff fedb 	bl	8000f20 <fillBuffer>
				asciiToHex(tempBuf, 2);
 800116a:	2102      	movs	r1, #2
 800116c:	4829      	ldr	r0, [pc, #164]	; (8001214 <flashHex+0x290>)
 800116e:	f7ff fe9f 	bl	8000eb0 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <flashHex+0x290>)
 8001174:	785a      	ldrb	r2, [r3, #1]
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <flashHex+0x290>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4413      	add	r3, r2
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <flashHex+0x2b0>)
 8001184:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8001186:	4b27      	ldr	r3, [pc, #156]	; (8001224 <flashHex+0x2a0>)
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <flashHex+0x2b0>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d001      	beq.n	8001196 <flashHex+0x212>
					return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	e0a7      	b.n	80012e6 <flashHex+0x362>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <flashHex+0x2a0>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e097      	b.n	80012ce <flashHex+0x34a>

			} else if(type_data == 0x04) {//дополнительный адрес
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <flashHex+0x29c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	f040 808f 	bne.w	80012c6 <flashHex+0x342>
				fillBuffer(tempBuf, flashBuf, &ptr, 4);
 80011a8:	f107 020e 	add.w	r2, r7, #14
 80011ac:	2304      	movs	r3, #4
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4818      	ldr	r0, [pc, #96]	; (8001214 <flashHex+0x290>)
 80011b2:	f7ff feb5 	bl	8000f20 <fillBuffer>
				asciiToHex(tempBuf, 4);
 80011b6:	2104      	movs	r1, #4
 80011b8:	4816      	ldr	r0, [pc, #88]	; (8001214 <flashHex+0x290>)
 80011ba:	f7ff fe79 	bl	8000eb0 <asciiToHex>

				extented_linear_adress = (uint32_t)(tempBuf[0]<<28 | tempBuf[1]<<24 | tempBuf[2]<<20 | tempBuf[3]<<16 );//считаем адрес
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <flashHex+0x290>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	071a      	lsls	r2, r3, #28
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <flashHex+0x290>)
 80011c6:	785b      	ldrb	r3, [r3, #1]
 80011c8:	061b      	lsls	r3, r3, #24
 80011ca:	431a      	orrs	r2, r3
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <flashHex+0x290>)
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	051b      	lsls	r3, r3, #20
 80011d2:	431a      	orrs	r2, r3
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <flashHex+0x290>)
 80011d6:	78db      	ldrb	r3, [r3, #3]
 80011d8:	041b      	lsls	r3, r3, #16
 80011da:	4313      	orrs	r3, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <flashHex+0x2a8>)
 80011e0:	601a      	str	r2, [r3, #0]

				if (firstFirmwarePlaceCheck) {
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <flashHex+0x2b4>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d030      	beq.n	800124c <flashHex+0x2c8>
					uint32_t latest_app_address = getLatestApplicationAddress();
 80011ea:	f7ff fa33 	bl	8000654 <getLatestApplicationAddress>
 80011ee:	6138      	str	r0, [r7, #16]
					if ((latest_app_address & 0xFFFF0000) != extented_linear_adress)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	0c1b      	lsrs	r3, r3, #16
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	4a0d      	ldr	r2, [pc, #52]	; (800122c <flashHex+0x2a8>)
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d001      	beq.n	8001202 <flashHex+0x27e>
						return 2;
 80011fe:	2302      	movs	r3, #2
 8001200:	e071      	b.n	80012e6 <flashHex+0x362>

					if (latest_app_address == APP_1_ADDRESS) current_sector = APP_1_SECTOR;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <flashHex+0x2b8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d11a      	bne.n	8001240 <flashHex+0x2bc>
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <flashHex+0x2ac>)
 800120c:	2205      	movs	r2, #5
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e019      	b.n	8001246 <flashHex+0x2c2>
 8001212:	bf00      	nop
 8001214:	200001e8 	.word	0x200001e8
 8001218:	200001d8 	.word	0x200001d8
 800121c:	200001dc 	.word	0x200001dc
 8001220:	200001d9 	.word	0x200001d9
 8001224:	200001e4 	.word	0x200001e4
 8001228:	200001e0 	.word	0x200001e0
 800122c:	200001d4 	.word	0x200001d4
 8001230:	200001f0 	.word	0x200001f0
 8001234:	200001da 	.word	0x200001da
 8001238:	20000088 	.word	0x20000088
 800123c:	08020000 	.word	0x08020000
					else current_sector = APP_2_SECTOR;
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <flashHex+0x36c>)
 8001242:	2210      	movs	r2, #16
 8001244:	701a      	strb	r2, [r3, #0]

					firstFirmwarePlaceCheck = 0;
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <flashHex+0x370>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
				}

				calculation_check_sum +=  16*tempBuf[0] + tempBuf[1] + 16*tempBuf[2] + tempBuf[3];
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <flashHex+0x374>)
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <flashHex+0x374>)
 8001252:	789b      	ldrb	r3, [r3, #2]
 8001254:	4413      	add	r3, r2
 8001256:	b2db      	uxtb	r3, r3
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <flashHex+0x374>)
 800125e:	785b      	ldrb	r3, [r3, #1]
 8001260:	4413      	add	r3, r2
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <flashHex+0x374>)
 8001266:	78db      	ldrb	r3, [r3, #3]
 8001268:	4413      	add	r3, r2
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <flashHex+0x378>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4413      	add	r3, r2
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <flashHex+0x378>)
 8001276:	701a      	strb	r2, [r3, #0]
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <flashHex+0x378>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	425b      	negs	r3, r3
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <flashHex+0x378>)
 8001282:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 8001284:	f107 020e 	add.w	r2, r7, #14
 8001288:	2302      	movs	r3, #2
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	481a      	ldr	r0, [pc, #104]	; (80012f8 <flashHex+0x374>)
 800128e:	f7ff fe47 	bl	8000f20 <fillBuffer>
				asciiToHex(tempBuf, 2);
 8001292:	2102      	movs	r1, #2
 8001294:	4818      	ldr	r0, [pc, #96]	; (80012f8 <flashHex+0x374>)
 8001296:	f7ff fe0b 	bl	8000eb0 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <flashHex+0x374>)
 800129c:	785a      	ldrb	r2, [r3, #1]
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <flashHex+0x374>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4413      	add	r3, r2
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <flashHex+0x37c>)
 80012ac:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <flashHex+0x378>)
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <flashHex+0x37c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d001      	beq.n	80012be <flashHex+0x33a>
					return 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e013      	b.n	80012e6 <flashHex+0x362>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <flashHex+0x378>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e003      	b.n	80012ce <flashHex+0x34a>
			} else if(type_data == 0x01) {//конец файла
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <flashHex+0x380>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d009      	beq.n	80012e2 <flashHex+0x35e>
				break;
			}
		}
		ptr++;
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	3301      	adds	r3, #1
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	81fb      	strh	r3, [r7, #14]
	while (ptr < size) {
 80012d6:	89fb      	ldrh	r3, [r7, #14]
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	429a      	cmp	r2, r3
 80012dc:	f63f ae5b 	bhi.w	8000f96 <flashHex+0x12>
 80012e0:	e000      	b.n	80012e4 <flashHex+0x360>
				break;
 80012e2:	bf00      	nop
	}
	return 1;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001f0 	.word	0x200001f0
 80012f4:	20000088 	.word	0x20000088
 80012f8:	200001e8 	.word	0x200001e8
 80012fc:	200001e4 	.word	0x200001e4
 8001300:	200001da 	.word	0x200001da
 8001304:	200001d9 	.word	0x200001d9

08001308 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_IWDG_Init+0x2c>)
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <MX_IWDG_Init+0x30>)
 8001310:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_IWDG_Init+0x2c>)
 8001314:	2206      	movs	r2, #6
 8001316:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 640;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_IWDG_Init+0x2c>)
 800131a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800131e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_IWDG_Init+0x2c>)
 8001322:	f003 fc11 	bl	8004b48 <HAL_IWDG_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800132c:	f000 fa6f 	bl	800180e <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001f4 	.word	0x200001f4
 8001338:	40003000 	.word	0x40003000

0800133c <tcp_recv_callback>:
#include "lwip_callbacks.h"
#include "usart.h"


err_t tcp_recv_callback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	70fb      	strb	r3, [r7, #3]
	uint16_t data_len = p->len;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	895b      	ldrh	r3, [r3, #10]
 800134e:	82fb      	strh	r3, [r7, #22]
	tcp_write(tpcb, p->payload, data_len, 0);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	8afa      	ldrh	r2, [r7, #22]
 8001356:	2300      	movs	r3, #0
 8001358:	68b8      	ldr	r0, [r7, #8]
 800135a:	f00c fc57 	bl	800dc0c <tcp_write>
	uartTransmit(p->payload, data_len);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	8afa      	ldrh	r2, [r7, #22]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fdd0 	bl	8001f0c <uartTransmit>
	tcp_recved(tpcb, data_len); //ret = tcp_recved(tpcb, data_len);
 800136c:	8afb      	ldrh	r3, [r7, #22]
 800136e:	4619      	mov	r1, r3
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f008 fe5b 	bl	800a02c <tcp_recved>
	//    char data[] = "Hello, world!";
	//    tcp_write(tcp_pcb, data, sizeof(data), 1);
	//}

	/* Free the packet buffer */
	pbuf_free(p);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f007 fef6 	bl	8009168 <pbuf_free>

	return ERR_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <tcp_error_callback>:

void tcp_error_callback(void *arg, err_t err) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
	uartTransmit("error tcp", 9);
 8001394:	2109      	movs	r1, #9
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <tcp_error_callback+0x1c>)
 8001398:	f000 fdb8 	bl	8001f0c <uartTransmit>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08013994 	.word	0x08013994

080013a8 <tcp_poll_callback>:

err_t tcp_poll_callback(void *arg, struct tcp_pcb *tpcb) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
	return ERR_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <tcp_sent_callback>:

err_t tcp_sent_callback(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
	//tpcb->snd_buf = NULL;
	return ERR_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <tcp_accept_callback>:

err_t tcp_accept_callback(void* arg, struct tcp_pcb* newpcb, err_t err) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	4613      	mov	r3, r2
 80013e8:	71fb      	strb	r3, [r7, #7]
	/* initialize lwIP tcp_recv callback function for newpcb */
	tcp_recv(newpcb, tcp_recv_callback);
 80013ea:	490b      	ldr	r1, [pc, #44]	; (8001418 <tcp_accept_callback+0x3c>)
 80013ec:	68b8      	ldr	r0, [r7, #8]
 80013ee:	f009 fcdd 	bl	800adac <tcp_recv>
	/* initialize lwIP tcp_err callback function for newpcb */
	tcp_err(newpcb, tcp_error_callback);
 80013f2:	490a      	ldr	r1, [pc, #40]	; (800141c <tcp_accept_callback+0x40>)
 80013f4:	68b8      	ldr	r0, [r7, #8]
 80013f6:	f009 fd1d 	bl	800ae34 <tcp_err>
	/* initialize lwIP tcp_poll callback function for newpcb */
	tcp_poll(newpcb, tcp_poll_callback, 1);
 80013fa:	2201      	movs	r2, #1
 80013fc:	4908      	ldr	r1, [pc, #32]	; (8001420 <tcp_accept_callback+0x44>)
 80013fe:	68b8      	ldr	r0, [r7, #8]
 8001400:	f009 fd52 	bl	800aea8 <tcp_poll>
	/* initialize lwIP tcp_sent callback function for newpcb */
	tcp_sent(newpcb, tcp_sent_callback);
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <tcp_accept_callback+0x48>)
 8001406:	68b8      	ldr	r0, [r7, #8]
 8001408:	f009 fcf2 	bl	800adf0 <tcp_sent>
	return ERR_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	0800133d 	.word	0x0800133d
 800141c:	08001389 	.word	0x08001389
 8001420:	080013a9 	.word	0x080013a9
 8001424:	080013c1 	.word	0x080013c1

08001428 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800142c:	f3bf 8f4f 	dsb	sy
}
 8001430:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <__NVIC_SystemReset+0x24>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800143a:	4904      	ldr	r1, [pc, #16]	; (800144c <__NVIC_SystemReset+0x24>)
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_SystemReset+0x28>)
 800143e:	4313      	orrs	r3, r2
 8001440:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001442:	f3bf 8f4f 	dsb	sy
}
 8001446:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <__NVIC_SystemReset+0x20>
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	05fa0004 	.word	0x05fa0004

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  commands[0] = commandCreate("jump", (CommandAction) jumpToUserApp, NONE);
 800145a:	2202      	movs	r2, #2
 800145c:	493f      	ldr	r1, [pc, #252]	; (800155c <main+0x108>)
 800145e:	4840      	ldr	r0, [pc, #256]	; (8001560 <main+0x10c>)
 8001460:	f7ff fbc2 	bl	8000be8 <commandCreate>
 8001464:	4603      	mov	r3, r0
 8001466:	4a3f      	ldr	r2, [pc, #252]	; (8001564 <main+0x110>)
 8001468:	6013      	str	r3, [r2, #0]
  commands[1] = commandCreate("update", (CommandAction) downloadFirmware, INT);
 800146a:	2200      	movs	r2, #0
 800146c:	493e      	ldr	r1, [pc, #248]	; (8001568 <main+0x114>)
 800146e:	483f      	ldr	r0, [pc, #252]	; (800156c <main+0x118>)
 8001470:	f7ff fbba 	bl	8000be8 <commandCreate>
 8001474:	4603      	mov	r3, r0
 8001476:	4a3b      	ldr	r2, [pc, #236]	; (8001564 <main+0x110>)
 8001478:	6053      	str	r3, [r2, #4]
  commands[2] = commandCreate("version", (CommandAction) getAppVersions, NONE);
 800147a:	2202      	movs	r2, #2
 800147c:	493c      	ldr	r1, [pc, #240]	; (8001570 <main+0x11c>)
 800147e:	483d      	ldr	r0, [pc, #244]	; (8001574 <main+0x120>)
 8001480:	f7ff fbb2 	bl	8000be8 <commandCreate>
 8001484:	4603      	mov	r3, r0
 8001486:	4a37      	ldr	r2, [pc, #220]	; (8001564 <main+0x110>)
 8001488:	6093      	str	r3, [r2, #8]
  commands[3] = commandCreate("help", (CommandAction) getHelpInfo, NONE);
 800148a:	2202      	movs	r2, #2
 800148c:	493a      	ldr	r1, [pc, #232]	; (8001578 <main+0x124>)
 800148e:	483b      	ldr	r0, [pc, #236]	; (800157c <main+0x128>)
 8001490:	f7ff fbaa 	bl	8000be8 <commandCreate>
 8001494:	4603      	mov	r3, r0
 8001496:	4a33      	ldr	r2, [pc, #204]	; (8001564 <main+0x110>)
 8001498:	60d3      	str	r3, [r2, #12]
  commands[4] = commandCreate("clear", (CommandAction) eraseConfigs, NONE);
 800149a:	2202      	movs	r2, #2
 800149c:	4938      	ldr	r1, [pc, #224]	; (8001580 <main+0x12c>)
 800149e:	4839      	ldr	r0, [pc, #228]	; (8001584 <main+0x130>)
 80014a0:	f7ff fba2 	bl	8000be8 <commandCreate>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <main+0x110>)
 80014a8:	6113      	str	r3, [r2, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014aa:	f001 fa05 	bl	80028b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  uartInit();
 80014ae:	f000 fd81 	bl	8001fb4 <uartInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b2:	f000 f879 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b6:	f7ff fcb7 	bl	8000e28 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80014ba:	f000 fcad 	bl	8001e18 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80014be:	f000 fbe1 	bl	8001c84 <MX_TIM6_Init>
  MX_IWDG_Init();
 80014c2:	f7ff ff21 	bl	8001308 <MX_IWDG_Init>
  MX_LWIP_Init();
 80014c6:	f005 fd1f 	bl	8006f08 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  uartEnableInterruption();
 80014ca:	f000 fda9 	bl	8002020 <uartEnableInterruption>
  menuInit(commands, 5);
 80014ce:	2105      	movs	r1, #5
 80014d0:	4824      	ldr	r0, [pc, #144]	; (8001564 <main+0x110>)
 80014d2:	f000 f9a1 	bl	8001818 <menuInit>


  struct tcp_pcb* tcp_pcb = tcp_new();
 80014d6:	f009 fc61 	bl	800ad9c <tcp_new>
 80014da:	60f8      	str	r0, [r7, #12]
  if(tcp_pcb != NULL) {
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01b      	beq.n	800151a <main+0xc6>
	  err_t err;
	  IP4_ADDR(&ip_addr, 192, 168, 1, 193);
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <main+0x134>)
 80014e4:	4a29      	ldr	r2, [pc, #164]	; (800158c <main+0x138>)
 80014e6:	601a      	str	r2, [r3, #0]
	  err = tcp_bind(tcp_pcb, &ip_addr, 80);
 80014e8:	2250      	movs	r2, #80	; 0x50
 80014ea:	4927      	ldr	r1, [pc, #156]	; (8001588 <main+0x134>)
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f008 fbcf 	bl	8009c90 <tcp_bind>
 80014f2:	4603      	mov	r3, r0
 80014f4:	72fb      	strb	r3, [r7, #11]
	  if (err == ERR_OK) {
 80014f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <main+0xbe>
		  tcp_pcb = tcp_listen(tcp_pcb);
 80014fe:	21ff      	movs	r1, #255	; 0xff
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f008 fc7d 	bl	8009e00 <tcp_listen_with_backlog>
 8001506:	60f8      	str	r0, [r7, #12]
		  tcp_accept(tcp_pcb, tcp_accept_callback);
 8001508:	4921      	ldr	r1, [pc, #132]	; (8001590 <main+0x13c>)
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f009 fcb4 	bl	800ae78 <tcp_accept>
 8001510:	e003      	b.n	800151a <main+0xc6>
	  } else {
		  memp_free(MEMP_TCP_PCB, tcp_pcb);
 8001512:	68f9      	ldr	r1, [r7, #12]
 8001514:	2001      	movs	r0, #1
 8001516:	f006 ffb1 	bl	800847c <memp_free>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_IWDG_Refresh(&hiwdg);
 800151a:	481e      	ldr	r0, [pc, #120]	; (8001594 <main+0x140>)
 800151c:	f003 fb56 	bl	8004bcc <HAL_IWDG_Refresh>
	  MX_LWIP_Process(); // ethernetif_input(&gnetif) + sys_check_timeouts()
 8001520:	f005 fe3e 	bl	80071a0 <MX_LWIP_Process>

	  if (uartHasNext()) {
 8001524:	f000 fd3a 	bl	8001f9c <uartHasNext>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <main+0xde>
		  receiveAndSendChar();
 800152e:	f000 f911 	bl	8001754 <receiveAndSendChar>
	  }

	  if (hasLine) {
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <main+0x144>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0ef      	beq.n	800151a <main+0xc6>
		  uartBuf[uartBufLast] = '\0';
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <main+0x148>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <main+0x14c>)
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]
		  const char* commandResult = menuExecuteCommand((char*) uartBuf);
 8001546:	4816      	ldr	r0, [pc, #88]	; (80015a0 <main+0x14c>)
 8001548:	f000 f99a 	bl	8001880 <menuExecuteCommand>
 800154c:	6078      	str	r0, [r7, #4]
		  sendMessage("\n");
 800154e:	4815      	ldr	r0, [pc, #84]	; (80015a4 <main+0x150>)
 8001550:	f000 f94c 	bl	80017ec <sendMessage>
		  sendCommandResult(commandResult);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f92d 	bl	80017b4 <sendCommandResult>
	  HAL_IWDG_Refresh(&hiwdg);
 800155a:	e7de      	b.n	800151a <main+0xc6>
 800155c:	0800168d 	.word	0x0800168d
 8001560:	080139a0 	.word	0x080139a0
 8001564:	20000284 	.word	0x20000284
 8001568:	080016c9 	.word	0x080016c9
 800156c:	080139a8 	.word	0x080139a8
 8001570:	08001725 	.word	0x08001725
 8001574:	080139b0 	.word	0x080139b0
 8001578:	080016b5 	.word	0x080016b5
 800157c:	080139b8 	.word	0x080139b8
 8001580:	08001739 	.word	0x08001739
 8001584:	080139c0 	.word	0x080139c0
 8001588:	20000298 	.word	0x20000298
 800158c:	c101a8c0 	.word	0xc101a8c0
 8001590:	080013dd 	.word	0x080013dd
 8001594:	200001f4 	.word	0x200001f4
 8001598:	20000281 	.word	0x20000281
 800159c:	20000280 	.word	0x20000280
 80015a0:	20000200 	.word	0x20000200
 80015a4:	080139c8 	.word	0x080139c8

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	; 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2230      	movs	r2, #48	; 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f010 fedc 	bl	8012374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <SystemClock_Config+0xdc>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <SystemClock_Config+0xdc>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <SystemClock_Config+0xdc>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <SystemClock_Config+0xe0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a25      	ldr	r2, [pc, #148]	; (8001688 <SystemClock_Config+0xe0>)
 80015f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <SystemClock_Config+0xe0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001604:	230a      	movs	r3, #10
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001608:	2301      	movs	r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160c:	2310      	movs	r3, #16
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001610:	2301      	movs	r3, #1
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001614:	2302      	movs	r3, #2
 8001616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001618:	2300      	movs	r3, #0
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800161c:	2308      	movs	r3, #8
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001620:	23b4      	movs	r3, #180	; 0xb4
 8001622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f003 fb2b 	bl	8004c8c <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800163c:	f000 f8e7 	bl	800180e <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001640:	f003 fad4 	bl	8004bec <HAL_PWREx_EnableOverDrive>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800164a:	f000 f8e0 	bl	800180e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164e:	230f      	movs	r3, #15
 8001650:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001652:	2302      	movs	r3, #2
 8001654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800165a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800165e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2105      	movs	r1, #5
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fd85 	bl	800517c <HAL_RCC_ClockConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001678:	f000 f8c9 	bl	800180e <Error_Handler>
  }
}
 800167c:	bf00      	nop
 800167e:	3750      	adds	r7, #80	; 0x50
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <jumpToUserApp>:

/* USER CODE BEGIN 4 */
static char* jumpToUserApp() {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	validateApplications();
 8001690:	f7ff f888 	bl	80007a4 <validateApplications>
	if (getLatestApplicationAddress() == 0) {
 8001694:	f7fe ffde 	bl	8000654 <getLatestApplicationAddress>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <jumpToUserApp+0x16>
		return "No valid application in flash\n";
 800169e:	4b03      	ldr	r3, [pc, #12]	; (80016ac <jumpToUserApp+0x20>)
 80016a0:	e002      	b.n	80016a8 <jumpToUserApp+0x1c>
	} else {
		jumpToApp();
 80016a2:	f7ff f8d1 	bl	8000848 <jumpToApp>
		return "Done";
 80016a6:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <jumpToUserApp+0x24>)
	}
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	080139cc 	.word	0x080139cc
 80016b0:	080139ec 	.word	0x080139ec

080016b4 <getHelpInfo>:

static char* getHelpInfo() {
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
    return "jump: jump to application\n\
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <getHelpInfo+0x10>)
update <version>: download firmware and jump to it\n\
version: get current version of application\n\
help: get information about commands\n\
clear: erase configs\n";
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	080139f4 	.word	0x080139f4

080016c8 <downloadFirmware>:

static char* downloadFirmware(uint32_t* version) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	validateApplications();
 80016d0:	f7ff f868 	bl	80007a4 <validateApplications>
	updateConfig();
 80016d4:	f7fe ffec 	bl	80006b0 <updateConfig>
	setAppVersion(*version);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff f81d 	bl	800071c <setAppVersion>
	sendMessage("Send hex file via XMODEM\n");
 80016e2:	480f      	ldr	r0, [pc, #60]	; (8001720 <downloadFirmware+0x58>)
 80016e4:	f000 f882 	bl	80017ec <sendMessage>
	HAL_Delay(100);
 80016e8:	2064      	movs	r0, #100	; 0x64
 80016ea:	f001 f98b 	bl	8002a04 <HAL_Delay>
	uint8_t xmodemStatus = xmodemReceive();
 80016ee:	f000 fd2f 	bl	8002150 <xmodemReceive>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]
	if (xmodemStatus == 1) {
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <downloadFirmware+0x40>
		setCorrectUpdateFlag();
 80016fc:	f7ff f830 	bl	8000760 <setCorrectUpdateFlag>
		return jumpToUserApp();
 8001700:	f7ff ffc4 	bl	800168c <jumpToUserApp>
 8001704:	4603      	mov	r3, r0
 8001706:	e006      	b.n	8001716 <downloadFirmware+0x4e>
	} else if (xmodemStatus == 2) {
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d101      	bne.n	8001712 <downloadFirmware+0x4a>
		NVIC_SystemReset(); //TODO
 800170e:	f7ff fe8b 	bl	8001428 <__NVIC_SystemReset>
		return "Error. Choose firmware for another bank.\n";
	} else {
		NVIC_SystemReset(); //TODO
 8001712:	f7ff fe89 	bl	8001428 <__NVIC_SystemReset>
		return "Error. Update aborted.\n";
	};
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	08013aa8 	.word	0x08013aa8

08001724 <getAppVersions>:

static char* getAppVersions() {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	validateApplications();
 8001728:	f7ff f83c 	bl	80007a4 <validateApplications>
	return getVersions();
 800172c:	f7fe ff4a 	bl	80005c4 <getVersions>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <eraseConfigs>:

static char* eraseConfigs() {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	EraseSector(CONFIG_1_SECTOR);
 800173c:	200e      	movs	r0, #14
 800173e:	f7ff fb4b 	bl	8000dd8 <EraseSector>
	EraseSector(CONFIG_2_SECTOR);
 8001742:	200f      	movs	r0, #15
 8001744:	f7ff fb48 	bl	8000dd8 <EraseSector>
	return "Configs erased\n";
 8001748:	4b01      	ldr	r3, [pc, #4]	; (8001750 <eraseConfigs+0x18>)
}
 800174a:	4618      	mov	r0, r3
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08013ac4 	.word	0x08013ac4

08001754 <receiveAndSendChar>:

static void receiveAndSendChar() {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
    if (uartReceive(uartBuf + uartBufLast, 1)) {
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <receiveAndSendChar+0x54>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <receiveAndSendChar+0x58>)
 8001762:	4413      	add	r3, r2
 8001764:	2101      	movs	r1, #1
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fc3a 	bl	8001fe0 <uartReceive>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d016      	beq.n	80017a0 <receiveAndSendChar+0x4c>
        uint8_t received = uartBuf[uartBufLast];
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <receiveAndSendChar+0x54>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <receiveAndSendChar+0x58>)
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	71fb      	strb	r3, [r7, #7]
        uartBufLast++;
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <receiveAndSendChar+0x54>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <receiveAndSendChar+0x54>)
 8001788:	701a      	strb	r2, [r3, #0]
        uartTransmit(&received, 1);
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	2101      	movs	r1, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fbbc 	bl	8001f0c <uartTransmit>

        if (received == '\r')
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	2b0d      	cmp	r3, #13
 8001798:	d102      	bne.n	80017a0 <receiveAndSendChar+0x4c>
            hasLine = 1;
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <receiveAndSendChar+0x5c>)
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
    }
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000280 	.word	0x20000280
 80017ac:	20000200 	.word	0x20000200
 80017b0:	20000281 	.word	0x20000281

080017b4 <sendCommandResult>:

static void sendCommandResult(const char* commandResult) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fd21 	bl	8000204 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fb9f 	bl	8001f0c <uartTransmit>
    uartBufLast = 0;
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <sendCommandResult+0x30>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
    hasLine = 0;
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <sendCommandResult+0x34>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000280 	.word	0x20000280
 80017e8:	20000281 	.word	0x20000281

080017ec <sendMessage>:

static void sendMessage(const char* msg) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7fe fd05 	bl	8000204 <strlen>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4619      	mov	r1, r3
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fb83 	bl	8001f0c <uartTransmit>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001812:	b672      	cpsid	i
}
 8001814:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001816:	e7fe      	b.n	8001816 <Error_Handler+0x8>

08001818 <menuInit>:
uint16_t menuSize;

static int32_t commandSepNameFromArg(const char *commandNameWithArg);
static void strTrim(char *str);

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <menuInit+0x60>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d121      	bne.n	8001870 <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4618      	mov	r0, r3
 8001832:	f010 fd5f 	bl	80122f4 <malloc>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <menuInit+0x60>)
 800183c:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 800183e:	2300      	movs	r3, #0
 8001840:	81fb      	strh	r3, [r7, #14]
 8001842:	e00d      	b.n	8001860 <menuInit+0x48>
        menuCommands[i] = commands[i];
 8001844:	89fb      	ldrh	r3, [r7, #14]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	441a      	add	r2, r3
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <menuInit+0x60>)
 800184e:	6819      	ldr	r1, [r3, #0]
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 800185a:	89fb      	ldrh	r3, [r7, #14]
 800185c:	3301      	adds	r3, #1
 800185e:	81fb      	strh	r3, [r7, #14]
 8001860:	89fa      	ldrh	r2, [r7, #14]
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3ed      	bcc.n	8001844 <menuInit+0x2c>
    }
    menuSize = commandsSize;
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <menuInit+0x64>)
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	8013      	strh	r3, [r2, #0]
 800186e:	e000      	b.n	8001872 <menuInit+0x5a>
        return;
 8001870:	bf00      	nop
}
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000029c 	.word	0x2000029c
 800187c:	200002a0 	.word	0x200002a0

08001880 <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandNameWithArg) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    strTrim(commandNameWithArg);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f866 	bl	800195a <strTrim>
    const int32_t sep = commandSepNameFromArg(commandNameWithArg);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f88a 	bl	80019a8 <commandSepNameFromArg>
 8001894:	6178      	str	r0, [r7, #20]
    const char *commandArg = NULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    if (sep != -1) {
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d009      	beq.n	80018b6 <menuExecuteCommand+0x36>
        commandNameWithArg[sep] = '\0';
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
        commandArg = commandNameWithArg + sep + 1;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	61fb      	str	r3, [r7, #28]
    }
    const char * const commandName = commandNameWithArg;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < menuSize; i++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	837b      	strh	r3, [r7, #26]
 80018be:	e020      	b.n	8001902 <menuExecuteCommand+0x82>
        const Command * const command = menuCommands[i];
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <menuExecuteCommand+0x98>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	8b7b      	ldrh	r3, [r7, #26]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <menuExecuteCommand+0x98>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	8b7b      	ldrh	r3, [r7, #26]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fa40 	bl	8000d60 <commandGetName>
 80018e0:	4603      	mov	r3, r0
 80018e2:	6939      	ldr	r1, [r7, #16]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fc83 	bl	80001f0 <strcmp>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <menuExecuteCommand+0x7c>
            return commandExecute(command, commandArg);
 80018f0:	69f9      	ldr	r1, [r7, #28]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff f9a2 	bl	8000c3c <commandExecute>
 80018f8:	4603      	mov	r3, r0
 80018fa:	e008      	b.n	800190e <menuExecuteCommand+0x8e>
    for (uint16_t i = 0; i < menuSize; i++) {
 80018fc:	8b7b      	ldrh	r3, [r7, #26]
 80018fe:	3301      	adds	r3, #1
 8001900:	837b      	strh	r3, [r7, #26]
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <menuExecuteCommand+0x9c>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	8b7a      	ldrh	r2, [r7, #26]
 8001908:	429a      	cmp	r2, r3
 800190a:	d3d9      	bcc.n	80018c0 <menuExecuteCommand+0x40>
        }
    }
    return "Command not found, print \"help\" for getting info\n";
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <menuExecuteCommand+0xa0>)
}
 800190e:	4618      	mov	r0, r3
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000029c 	.word	0x2000029c
 800191c:	200002a0 	.word	0x200002a0
 8001920:	08013ad4 	.word	0x08013ad4

08001924 <isSpaceChar>:

static uint8_t isSpaceChar(char ch) {
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
    return ch == '\n' || ch == ' ' || ch == '\t' || ch == '\r';
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b0a      	cmp	r3, #10
 8001932:	d008      	beq.n	8001946 <isSpaceChar+0x22>
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	2b20      	cmp	r3, #32
 8001938:	d005      	beq.n	8001946 <isSpaceChar+0x22>
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b09      	cmp	r3, #9
 800193e:	d002      	beq.n	8001946 <isSpaceChar+0x22>
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b0d      	cmp	r3, #13
 8001944:	d101      	bne.n	800194a <isSpaceChar+0x26>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <isSpaceChar+0x28>
 800194a:	2300      	movs	r3, #0
 800194c:	b2db      	uxtb	r3, r3
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <strTrim>:

static void strTrim(char * const str) {
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(str);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7fe fc4e 	bl	8000204 <strlen>
 8001968:	4603      	mov	r3, r0
 800196a:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	3b01      	subs	r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e011      	b.n	8001998 <strTrim+0x3e>
        if (isSpaceChar(str[i])) {
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ffd1 	bl	8001924 <isSpaceChar>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00b      	beq.n	80019a0 <strTrim+0x46>
            str[i] = '\0';
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
    for (int32_t i = len - 1; i >= 0; i--) {
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3b01      	subs	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	daea      	bge.n	8001974 <strTrim+0x1a>
 800199e:	e000      	b.n	80019a2 <strTrim+0x48>
        } else {
            return;
 80019a0:	bf00      	nop
        }
    }
}
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <commandSepNameFromArg>:

static int32_t commandSepNameFromArg(const char * const commandNameWithArg) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(commandNameWithArg);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7fe fc27 	bl	8000204 <strlen>
 80019b6:	4603      	mov	r3, r0
 80019b8:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3b01      	subs	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e00a      	b.n	80019d8 <commandSepNameFromArg+0x30>
        if (commandNameWithArg[i] == ' ') {
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d101      	bne.n	80019d2 <commandSepNameFromArg+0x2a>
            return i;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	e007      	b.n	80019e2 <commandSepNameFromArg+0x3a>
    for (int32_t i = len - 1; i >= 0; i--) {
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	daf1      	bge.n	80019c2 <commandSepNameFromArg+0x1a>
        }
    }
    return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <HAL_MspInit+0x4c>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <NMI_Handler+0x4>

08001a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <MemManage_Handler+0x4>

08001a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a88:	f000 ff9c 	bl	80029c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM6_DAC_IRQHandler+0x10>)
 8001a96:	f003 ff38 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200002a8 	.word	0x200002a8

08001aa4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <ETH_IRQHandler+0x10>)
 8001aaa:	f001 fcb3 	bl	8003414 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20005010 	.word	0x20005010

08001ab8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <USART6_IRQHandler+0x10>)
 8001abe:	f004 fb33 	bl	8006128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000300 	.word	0x20000300

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_kill>:

int _kill(int pid, int sig)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <_kill+0x20>)
 8001ae8:	2216      	movs	r2, #22
 8001aea:	601a      	str	r2, [r3, #0]
	return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	20008198 	.word	0x20008198

08001b00 <_exit>:

void _exit (int status)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffe5 	bl	8001adc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b12:	e7fe      	b.n	8001b12 <_exit+0x12>

08001b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e00a      	b.n	8001b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b26:	f3af 8000 	nop.w
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbf0      	blt.n	8001b26 <_read+0x12>
	}

return len;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e009      	b.n	8001b74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf1      	blt.n	8001b60 <_write+0x12>
	}
	return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_close>:

int _close(int file)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bae:	605a      	str	r2, [r3, #4]
	return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_isatty>:

int _isatty(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	return 1;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
	return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d205      	bcs.n	8001c2c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <_sbrk+0x6c>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20030000 	.word	0x20030000
 8001c50:	00004000 	.word	0x00004000
 8001c54:	200002a4 	.word	0x200002a4
 8001c58:	200081a0 	.word	0x200081a0
 8001c5c:	20008198 	.word	0x20008198

08001c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001c94:	4a15      	ldr	r2, [pc, #84]	; (8001cec <MX_TIM6_Init+0x68>)
 8001c96:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44999;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001c9a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001c9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001ca8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001cb6:	f003 fd39 	bl	800572c <HAL_TIM_Base_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001cc0:	f7ff fda5 	bl	800180e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_TIM6_Init+0x64>)
 8001cd2:	f003 ffeb 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001cdc:	f7ff fd97 	bl	800180e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200002a8 	.word	0x200002a8
 8001cec:	40001000 	.word	0x40001000

08001cf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <HAL_TIM_Base_MspInit+0x48>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d115      	bne.n	8001d2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_TIM_Base_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <HAL_TIM_Base_MspInit+0x4c>)
 8001d0c:	f043 0310 	orr.w	r3, r3, #16
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_TIM_Base_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2036      	movs	r0, #54	; 0x36
 8001d24:	f000 ff91 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d28:	2036      	movs	r0, #54	; 0x36
 8001d2a:	f000 ffaa 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40001000 	.word	0x40001000
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d102      	bne.n	8001d58 <HAL_TIM_PeriodElapsedCallback+0x18>
		uartTransmitChar(X_C);
 8001d52:	2043      	movs	r0, #67	; 0x43
 8001d54:	f000 f8fe 	bl	8001f54 <uartTransmitChar>
	}
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40001000 	.word	0x40001000

08001d64 <uartHardwareTransmitInterrupt>:

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
}

void uartHardwareTransmitInterrupt(uint8_t buffer) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	usartHardwareTransmitBuffer = buffer;
 8001d6e:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <uartHardwareTransmitInterrupt+0x28>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d74:	2047      	movs	r0, #71	; 0x47
 8001d76:	f000 ff84 	bl	8002c82 <HAL_NVIC_EnableIRQ>
	HAL_UART_Transmit_IT(&huart6, &usartHardwareTransmitBuffer, 1);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4903      	ldr	r1, [pc, #12]	; (8001d8c <uartHardwareTransmitInterrupt+0x28>)
 8001d7e:	4804      	ldr	r0, [pc, #16]	; (8001d90 <uartHardwareTransmitInterrupt+0x2c>)
 8001d80:	f004 f871 	bl	8005e66 <HAL_UART_Transmit_IT>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200002f0 	.word	0x200002f0
 8001d90:	20000300 	.word	0x20000300

08001d94 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <HAL_UART_TxCpltCallback+0x1c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_UART_TxCpltCallback+0x14>
		uartTransmitIntCallback();
 8001da4:	f000 f9b6 	bl	8002114 <uartTransmitIntCallback>
	}
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000300 	.word	0x20000300

08001db4 <uartHardwareReceiveInterrupt>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
}

void uartHardwareReceiveInterrupt() {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001db8:	2047      	movs	r0, #71	; 0x47
 8001dba:	f000 ff62 	bl	8002c82 <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart6, &usartHardwareReceiveBuffer, 1);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4902      	ldr	r1, [pc, #8]	; (8001dcc <uartHardwareReceiveInterrupt+0x18>)
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <uartHardwareReceiveInterrupt+0x1c>)
 8001dc4:	f004 f894 	bl	8005ef0 <HAL_UART_Receive_IT>
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200002f1 	.word	0x200002f1
 8001dd0:	20000300 	.word	0x20000300

08001dd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <HAL_UART_RxCpltCallback+0x24>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d104      	bne.n	8001dee <HAL_UART_RxCpltCallback+0x1a>
    	uartReceiveIntCallback(usartHardwareReceiveBuffer);
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_UART_RxCpltCallback+0x28>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f965 	bl	80020b8 <uartReceiveIntCallback>
    }
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000300 	.word	0x20000300
 8001dfc:	200002f1 	.word	0x200002f1

08001e00 <uartHardwareDisableInterrupts>:

void uartHardwareDisableInterrupts() {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart6);
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <uartHardwareDisableInterrupts+0x14>)
 8001e06:	f004 f8a3 	bl	8005f50 <HAL_UART_Abort>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8001e0a:	2047      	movs	r0, #71	; 0x47
 8001e0c:	f000 ff47 	bl	8002c9e <HAL_NVIC_DisableIRQ>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000300 	.word	0x20000300

08001e18 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_USART6_UART_Init+0x4c>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <MX_USART6_UART_Init+0x50>)
 8001e20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <MX_USART6_UART_Init+0x4c>)
 8001e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_USART6_UART_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_USART6_UART_Init+0x4c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <MX_USART6_UART_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_USART6_UART_Init+0x4c>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <MX_USART6_UART_Init+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <MX_USART6_UART_Init+0x4c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <MX_USART6_UART_Init+0x4c>)
 8001e50:	f003 ffbc 	bl	8005dcc <HAL_UART_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e5a:	f7ff fcd8 	bl	800180e <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000300 	.word	0x20000300
 8001e68:	40011400 	.word	0x40011400

08001e6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <HAL_UART_MspInit+0x94>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d133      	bne.n	8001ef6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <HAL_UART_MspInit+0x98>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_UART_MspInit+0x98>)
 8001e98:	f043 0320 	orr.w	r3, r3, #32
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_UART_MspInit+0x98>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_UART_MspInit+0x98>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a14      	ldr	r2, [pc, #80]	; (8001f04 <HAL_UART_MspInit+0x98>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_UART_MspInit+0x98>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ec6:	23c0      	movs	r3, #192	; 0xc0
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4809      	ldr	r0, [pc, #36]	; (8001f08 <HAL_UART_MspInit+0x9c>)
 8001ee2:	f002 fc85 	bl	80047f0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2047      	movs	r0, #71	; 0x47
 8001eec:	f000 fead 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ef0:	2047      	movs	r0, #71	; 0x47
 8001ef2:	f000 fec6 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40011400 	.word	0x40011400
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020800 	.word	0x40020800

08001f0c <uartTransmit>:
  }
}

/* USER CODE BEGIN 1 */

uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <uartTransmit+0x16>
        return 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e010      	b.n	8001f44 <uartTransmit+0x38>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <uartTransmit+0x40>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fd72 	bl	8000a14 <bufferPushValues>
 8001f30:	4603      	mov	r3, r0
 8001f32:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <uartTransmit+0x44>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <uartTransmit+0x36>
        hardwareTransmitIT();
 8001f3e:	f000 f893 	bl	8002068 <hardwareTransmitIT>
    }
    return transmitted;
 8001f42:	89fb      	ldrh	r3, [r7, #14]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200002f4 	.word	0x200002f4
 8001f50:	200002fc 	.word	0x200002fc

08001f54 <uartTransmitChar>:

uint8_t uartTransmitChar(const uint8_t msg) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
    if (msg == NULL)
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <uartTransmitChar+0x14>
        return 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e010      	b.n	8001f8a <uartTransmitChar+0x36>
    const uint8_t transmitted = bufferPush(txBuffer, msg);
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <uartTransmitChar+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fd1e 	bl	80009b2 <bufferPush>
 8001f76:	4603      	mov	r3, r0
 8001f78:	73fb      	strb	r3, [r7, #15]
    if (interruptionsEnabled) {
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <uartTransmitChar+0x44>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <uartTransmitChar+0x34>
        hardwareTransmitIT();
 8001f84:	f000 f870 	bl	8002068 <hardwareTransmitIT>
    }
    return transmitted;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200002f4 	.word	0x200002f4
 8001f98:	200002fc 	.word	0x200002fc

08001f9c <uartHasNext>:

uint8_t uartHasNext() {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
    return bufferHasValues(rxBuffer);
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <uartHasNext+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fd9a 	bl	8000ade <bufferHasValues>
 8001faa:	4603      	mov	r3, r0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200002f8 	.word	0x200002f8

08001fb4 <uartInit>:

void uartInit() {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001fb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fbc:	f7fe fcdc 	bl	8000978 <bufferCreate>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <uartInit+0x24>)
 8001fc4:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001fc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fca:	f7fe fcd5 	bl	8000978 <bufferCreate>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4a02      	ldr	r2, [pc, #8]	; (8001fdc <uartInit+0x28>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200002f4 	.word	0x200002f4
 8001fdc:	200002f8 	.word	0x200002f8

08001fe0 <uartReceive>:
        hardwareTransmit();
        hardwareReceive();
    }
}

uint16_t uartReceive(uint8_t * const buffer, const uint16_t size) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
    const uint16_t received = bufferPopValues(rxBuffer, buffer, size);
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <uartReceive+0x38>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	887a      	ldrh	r2, [r7, #2]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fd83 	bl	8000b00 <bufferPopValues>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <uartReceive+0x3c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <uartReceive+0x2c>
        hardwareReceiveIT();
 8002008:	f000 f828 	bl	800205c <hardwareReceiveIT>
    }
    return received;
 800200c:	89fb      	ldrh	r3, [r7, #14]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200002f8 	.word	0x200002f8
 800201c:	200002fc 	.word	0x200002fc

08002020 <uartEnableInterruption>:

void uartEnableInterruption() {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
    interruptionsEnabled = 1;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <uartEnableInterruption+0x1c>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
    transmitIntEnd = 1;
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <uartEnableInterruption+0x20>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
    hardwareTransmitIT();
 8002030:	f000 f81a 	bl	8002068 <hardwareTransmitIT>
    hardwareReceiveIT();
 8002034:	f000 f812 	bl	800205c <hardwareReceiveIT>
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200002fc 	.word	0x200002fc
 8002040:	20000090 	.word	0x20000090

08002044 <uartDisableInterruption>:

void uartDisableInterruption() {
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
    interruptionsEnabled = 0;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <uartDisableInterruption+0x14>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
    uartHardwareDisableInterrupts();
 800204e:	f7ff fed7 	bl	8001e00 <uartHardwareDisableInterrupts>
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200002fc 	.word	0x200002fc

0800205c <hardwareReceiveIT>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareReceiveIT() {
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
    uartHardwareReceiveInterrupt();
 8002060:	f7ff fea8 	bl	8001db4 <uartHardwareReceiveInterrupt>
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <hardwareTransmitIT>:

static void hardwareTransmitIT() {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
    if (!transmitIntEnd)
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <hardwareTransmitIT+0x48>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d016      	beq.n	80020a6 <hardwareTransmitIT+0x3e>
        return;

    if (bufferHasValues(txBuffer)) {
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <hardwareTransmitIT+0x4c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fd2e 	bl	8000ade <bufferHasValues>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00f      	beq.n	80020a8 <hardwareTransmitIT+0x40>
        transmitIntEnd = 0;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <hardwareTransmitIT+0x48>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
        uint8_t data = bufferPop(txBuffer);
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <hardwareTransmitIT+0x4c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fce1 	bl	8000a5a <bufferPop>
 8002098:	4603      	mov	r3, r0
 800209a:	71fb      	strb	r3, [r7, #7]
        uartHardwareTransmitInterrupt(data);
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fe60 	bl	8001d64 <uartHardwareTransmitInterrupt>
 80020a4:	e000      	b.n	80020a8 <hardwareTransmitIT+0x40>
        return;
 80020a6:	bf00      	nop
    }
}
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000090 	.word	0x20000090
 80020b4:	200002f4 	.word	0x200002f4

080020b8 <uartReceiveIntCallback>:
        if (uartHardwareTransmitPolling(byte, 5))
            bufferPop(txBuffer);
    }
}

extern void uartReceiveIntCallback(uint8_t data) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
    if (bufferGetFreeSize(rxBuffer) > 0) {
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <uartReceiveIntCallback+0x50>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fd57 	bl	8000b7a <bufferGetFreeSize>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <uartReceiveIntCallback+0x28>
        bufferPush(rxBuffer, data);
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <uartReceiveIntCallback+0x50>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	79fa      	ldrb	r2, [r7, #7]
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fc69 	bl	80009b2 <bufferPush>
    }
    if (!isRxStarted()) rxStarted = 1;
 80020e0:	f000 f82a 	bl	8002138 <isRxStarted>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <uartReceiveIntCallback+0x38>
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <uartReceiveIntCallback+0x54>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <uartReceiveIntCallback+0x58>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <uartReceiveIntCallback+0x46>
        hardwareReceiveIT();
 80020fa:	f7ff ffaf 	bl	800205c <hardwareReceiveIT>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200002f8 	.word	0x200002f8
 800210c:	200002fd 	.word	0x200002fd
 8002110:	200002fc 	.word	0x200002fc

08002114 <uartTransmitIntCallback>:

extern void uartTransmitIntCallback() {
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
    transmitIntEnd = 1;
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <uartTransmitIntCallback+0x1c>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <uartTransmitIntCallback+0x20>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <uartTransmitIntCallback+0x18>
        hardwareTransmitIT();
 8002128:	f7ff ff9e 	bl	8002068 <hardwareTransmitIT>
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000090 	.word	0x20000090
 8002134:	200002fc 	.word	0x200002fc

08002138 <isRxStarted>:

uint16_t rxBufToProgBuf(uint8_t* buf) {
	return bufferPopValues(rxBuffer, buf, bufferGetSize(rxBuffer));
}

uint8_t isRxStarted() {
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	return rxStarted;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <isRxStarted+0x14>)
 800213e:	781b      	ldrb	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	200002fd 	.word	0x200002fd

08002150 <xmodemReceive>:
 * @brief   This function is the base of the Xmodem protocol.
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  uint8_t
 */
uint8_t xmodemReceive() {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	717b      	strb	r3, [r7, #5]
    uint8_t error_number = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	713b      	strb	r3, [r7, #4]
    uint8_t header = 0x00u;
 800215e:	2300      	movs	r3, #0
 8002160:	71fb      	strb	r3, [r7, #7]
    xmodemPacketNumber = 1u;
 8002162:	4b3e      	ldr	r3, [pc, #248]	; (800225c <xmodemReceive+0x10c>)
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6); //send "C" every 10 sec
 8002168:	483d      	ldr	r0, [pc, #244]	; (8002260 <xmodemReceive+0x110>)
 800216a:	f003 fb2f 	bl	80057cc <HAL_TIM_Base_Start_IT>
    timerWorking = 1;
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <xmodemReceive+0x114>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
    /* Loop until there isn't any error or done. */
    while (status == X_OK) {
 8002174:	e05d      	b.n	8002232 <xmodemReceive+0xe2>
  	    WRITE_REG(IWDG->KR, 0x0000AAAAU);
 8002176:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <xmodemReceive+0x118>)
 8002178:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800217c:	601a      	str	r2, [r3, #0]
	    xmodemBufSize = uartReceive(xmodemBuf, 1);
 800217e:	2101      	movs	r1, #1
 8002180:	483a      	ldr	r0, [pc, #232]	; (800226c <xmodemReceive+0x11c>)
 8002182:	f7ff ff2d 	bl	8001fe0 <uartReceive>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <xmodemReceive+0x120>)
 800218c:	801a      	strh	r2, [r3, #0]
	    if (xmodemBufSize != 1) continue;
 800218e:	4b38      	ldr	r3, [pc, #224]	; (8002270 <xmodemReceive+0x120>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d000      	beq.n	8002198 <xmodemReceive+0x48>
 8002196:	e04c      	b.n	8002232 <xmodemReceive+0xe2>
	    if (timerWorking) {
 8002198:	4b32      	ldr	r3, [pc, #200]	; (8002264 <xmodemReceive+0x114>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <xmodemReceive+0x5c>
	    	HAL_TIM_Base_Stop_IT(&htim6); //stop sending "C"
 80021a0:	482f      	ldr	r0, [pc, #188]	; (8002260 <xmodemReceive+0x110>)
 80021a2:	f003 fb83 	bl	80058ac <HAL_TIM_Base_Stop_IT>
	    	timerWorking = 0;
 80021a6:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <xmodemReceive+0x114>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
	    }
    	HAL_Delay(100);
 80021ac:	2064      	movs	r0, #100	; 0x64
 80021ae:	f000 fc29 	bl	8002a04 <HAL_Delay>
        header = xmodemBuf[0];
 80021b2:	4b2e      	ldr	r3, [pc, #184]	; (800226c <xmodemReceive+0x11c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]

        xmodem_status packet_status = X_ERROR;
 80021b8:	23ff      	movs	r3, #255	; 0xff
 80021ba:	71bb      	strb	r3, [r7, #6]
        /* The header can be: SOH, STX, EOT and CAN. */
        switch (header) {
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b18      	cmp	r3, #24
 80021c0:	d02c      	beq.n	800221c <xmodemReceive+0xcc>
 80021c2:	2b18      	cmp	r3, #24
 80021c4:	dc2d      	bgt.n	8002222 <xmodemReceive+0xd2>
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d002      	beq.n	80021d0 <xmodemReceive+0x80>
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d020      	beq.n	8002210 <xmodemReceive+0xc0>
 80021ce:	e028      	b.n	8002222 <xmodemReceive+0xd2>
            case X_SOH:
                packet_status = xmodem_handle_packet(header); //If the handling was successful, then send an ACK
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f888 	bl	80022e8 <xmodem_handle_packet>
 80021d8:	4603      	mov	r3, r0
 80021da:	71bb      	strb	r3, [r7, #6]
                if (packet_status == X_OK) {
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <xmodemReceive+0x9a>
                	uartTransmitChar(X_ACK);
 80021e2:	2006      	movs	r0, #6
 80021e4:	f7ff feb6 	bl	8001f54 <uartTransmitChar>
 80021e8:	e023      	b.n	8002232 <xmodemReceive+0xe2>
                } else if (packet_status == X_WRONG_FIRMWARE) {
 80021ea:	79bb      	ldrb	r3, [r7, #6]
 80021ec:	2b78      	cmp	r3, #120	; 0x78
 80021ee:	d107      	bne.n	8002200 <xmodemReceive+0xb0>
                	xmodem_error_handler(&error_number, 0);
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f903 	bl	8002400 <xmodem_error_handler>
                	status = X_WRONG_FIRMWARE;
 80021fa:	2378      	movs	r3, #120	; 0x78
 80021fc:	717b      	strb	r3, [r7, #5]
 80021fe:	e018      	b.n	8002232 <xmodemReceive+0xe2>
                } else {
                	status = xmodem_error_handler(&error_number, X_MAX_ERRORS); //Error while processing the packet, either send a NAK or do graceful abort
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2103      	movs	r1, #3
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f8fb 	bl	8002400 <xmodem_error_handler>
 800220a:	4603      	mov	r3, r0
 800220c:	717b      	strb	r3, [r7, #5]
                }
                break;
 800220e:	e010      	b.n	8002232 <xmodemReceive+0xe2>
            /* End of Transmission. */
            case X_EOT:
            	uartTransmitChar(X_ACK);
 8002210:	2006      	movs	r0, #6
 8002212:	f7ff fe9f 	bl	8001f54 <uartTransmitChar>
            	status = X_DONE;
 8002216:	23aa      	movs	r3, #170	; 0xaa
 8002218:	717b      	strb	r3, [r7, #5]
            	break;
 800221a:	e00a      	b.n	8002232 <xmodemReceive+0xe2>
            /* Abort from host. */
            case X_CAN:
           		status = X_ERROR;
 800221c:	23ff      	movs	r3, #255	; 0xff
 800221e:	717b      	strb	r3, [r7, #5]
           		break;
 8002220:	e007      	b.n	8002232 <xmodemReceive+0xe2>
            default:
            /* Wrong header. */
            	status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2103      	movs	r1, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f8ea 	bl	8002400 <xmodem_error_handler>
 800222c:	4603      	mov	r3, r0
 800222e:	717b      	strb	r3, [r7, #5]
            	break;
 8002230:	bf00      	nop
    while (status == X_OK) {
 8002232:	797b      	ldrb	r3, [r7, #5]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d09d      	beq.n	8002176 <xmodemReceive+0x26>
        }
    }
    if (status == X_DONE) return 1;
 800223a:	797b      	ldrb	r3, [r7, #5]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2baa      	cmp	r3, #170	; 0xaa
 8002240:	d101      	bne.n	8002246 <xmodemReceive+0xf6>
 8002242:	2301      	movs	r3, #1
 8002244:	e006      	b.n	8002254 <xmodemReceive+0x104>
    else if (status == X_WRONG_FIRMWARE) return 2;
 8002246:	797b      	ldrb	r3, [r7, #5]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b78      	cmp	r3, #120	; 0x78
 800224c:	d101      	bne.n	8002252 <xmodemReceive+0x102>
 800224e:	2302      	movs	r3, #2
 8002250:	e000      	b.n	8002254 <xmodemReceive+0x104>
    else return 0;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000091 	.word	0x20000091
 8002260:	200002a8 	.word	0x200002a8
 8002264:	200004ca 	.word	0x200004ca
 8002268:	40003000 	.word	0x40003000
 800226c:	20000344 	.word	0x20000344
 8002270:	20000444 	.word	0x20000444

08002274 <xmodemCalcCrc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodemCalcCrc(uint8_t *data, uint16_t length)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8002280:	2300      	movs	r3, #0
 8002282:	81fb      	strh	r3, [r7, #14]
    while (length)
 8002284:	e026      	b.n	80022d4 <xmodemCalcCrc+0x60>
    {
        length--;
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	3b01      	subs	r3, #1
 800228a:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21a      	sxth	r2, r3
 8002298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800229c:	4053      	eors	r3, r2
 800229e:	b21b      	sxth	r3, r3
 80022a0:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	737b      	strb	r3, [r7, #13]
 80022a6:	e012      	b.n	80022ce <xmodemCalcCrc+0x5a>
        {
            if (crc & 0x8000u)
 80022a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	da08      	bge.n	80022c2 <xmodemCalcCrc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 80022b0:	89fb      	ldrh	r3, [r7, #14]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80022ba:	f083 0301 	eor.w	r3, r3, #1
 80022be:	81fb      	strh	r3, [r7, #14]
 80022c0:	e002      	b.n	80022c8 <xmodemCalcCrc+0x54>
            }
            else
            {
                crc = crc << 1u;
 80022c2:	89fb      	ldrh	r3, [r7, #14]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 80022c8:	7b7b      	ldrb	r3, [r7, #13]
 80022ca:	3301      	adds	r3, #1
 80022cc:	737b      	strb	r3, [r7, #13]
 80022ce:	7b7b      	ldrb	r3, [r7, #13]
 80022d0:	2b07      	cmp	r3, #7
 80022d2:	d9e9      	bls.n	80022a8 <xmodemCalcCrc+0x34>
    while (length)
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1d5      	bne.n	8002286 <xmodemCalcCrc+0x12>
            }
        }
    }
    return crc;
 80022da:	89fb      	ldrh	r3, [r7, #14]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <xmodem_handle_packet>:
/**
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b0a6      	sub	sp, #152	; 0x98
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
	uint8_t dataTempBuf[128];
	uint8_t crcBuf[2];
    uint16_t size = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

    /* Receive packet number */
    size = uartReceive(xmodemBuf, 2);
 80022f8:	2102      	movs	r1, #2
 80022fa:	483e      	ldr	r0, [pc, #248]	; (80023f4 <xmodem_handle_packet+0x10c>)
 80022fc:	f7ff fe70 	bl	8001fe0 <uartReceive>
 8002300:	4603      	mov	r3, r0
 8002302:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2)
 8002306:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800230a:	2b02      	cmp	r3, #2
 800230c:	d001      	beq.n	8002312 <xmodem_handle_packet+0x2a>
    	return X_ERROR_UART;
 800230e:	2304      	movs	r3, #4
 8002310:	e06c      	b.n	80023ec <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] != xmodemPacketNumber)
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <xmodem_handle_packet+0x10c>)
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <xmodem_handle_packet+0x110>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <xmodem_handle_packet+0x3a>
    	return X_ERROR_NUMBER;
 800231e:	2302      	movs	r3, #2
 8002320:	e064      	b.n	80023ec <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] + xmodemBuf[1] != 255)
 8002322:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <xmodem_handle_packet+0x10c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <xmodem_handle_packet+0x10c>)
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	4413      	add	r3, r2
 800232e:	2bff      	cmp	r3, #255	; 0xff
 8002330:	d001      	beq.n	8002336 <xmodem_handle_packet+0x4e>
    	return X_ERROR_NUMBER;
 8002332:	2302      	movs	r3, #2
 8002334:	e05a      	b.n	80023ec <xmodem_handle_packet+0x104>

    /* Receive packet data */
    size = uartReceive(dataTempBuf, X_PACKET_128_SIZE);
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	2180      	movs	r1, #128	; 0x80
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fe4f 	bl	8001fe0 <uartReceive>
 8002342:	4603      	mov	r3, r0
 8002344:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != X_PACKET_128_SIZE)
 8002348:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800234c:	2b80      	cmp	r3, #128	; 0x80
 800234e:	d001      	beq.n	8002354 <xmodem_handle_packet+0x6c>
    	return X_ERROR_UART;
 8002350:	2304      	movs	r3, #4
 8002352:	e04b      	b.n	80023ec <xmodem_handle_packet+0x104>

    /* Receive CRC */
    size = uartReceive(crcBuf, 2);
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	2102      	movs	r1, #2
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fe40 	bl	8001fe0 <uartReceive>
 8002360:	4603      	mov	r3, r0
 8002362:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2)
 8002366:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800236a:	2b02      	cmp	r3, #2
 800236c:	d001      	beq.n	8002372 <xmodem_handle_packet+0x8a>
    	return X_ERROR_UART;
 800236e:	2304      	movs	r3, #4
 8002370:	e03c      	b.n	80023ec <xmodem_handle_packet+0x104>

    /* Check CRC */
    uint16_t crcMerged = ((uint16_t) crcBuf[0] << 8) | ((uint16_t) crcBuf[1]); //Merge the two bytes of CRC
 8002372:	7b3b      	ldrb	r3, [r7, #12]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	b21a      	sxth	r2, r3
 8002378:	7b7b      	ldrb	r3, [r7, #13]
 800237a:	b21b      	sxth	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b21b      	sxth	r3, r3
 8002380:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    uint16_t crcCalculated = xmodemCalcCrc(dataTempBuf, X_PACKET_128_SIZE);
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff72 	bl	8002274 <xmodemCalcCrc>
 8002390:	4603      	mov	r3, r0
 8002392:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    if (crcMerged != crcCalculated)
 8002396:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800239a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <xmodem_handle_packet+0xbe>
    	return X_ERROR_CRC;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e022      	b.n	80023ec <xmodem_handle_packet+0x104>

    /* Add remaining data from previous packet to current data */
    addRemainingDataToCurrentBuf(dataTempBuf);
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f862 	bl	8002474 <addRemainingDataToCurrentBuf>

    /* Remove unfinished line from xmodemBuf and place it to remaining data */
    cutBuf();
 80023b0:	f000 f8aa 	bl	8002508 <cutBuf>

    /* Move data to flash */
    uint8_t flashHexCode = flashHex(xmodemBuf, xmodemBufSize);
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <xmodem_handle_packet+0x114>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	480e      	ldr	r0, [pc, #56]	; (80023f4 <xmodem_handle_packet+0x10c>)
 80023bc:	f7fe fde2 	bl	8000f84 <flashHex>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
    if (flashHexCode == 0)
 80023c6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <xmodem_handle_packet+0xea>
    	return X_ERROR_FLASH;
 80023ce:	2308      	movs	r3, #8
 80023d0:	e00c      	b.n	80023ec <xmodem_handle_packet+0x104>
    if (flashHexCode == 2)
 80023d2:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d101      	bne.n	80023de <xmodem_handle_packet+0xf6>
    	return X_WRONG_FIRMWARE;
 80023da:	2378      	movs	r3, #120	; 0x78
 80023dc:	e006      	b.n	80023ec <xmodem_handle_packet+0x104>

    xmodemPacketNumber++;
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <xmodem_handle_packet+0x110>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <xmodem_handle_packet+0x110>)
 80023e8:	701a      	strb	r2, [r3, #0]
    return X_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3798      	adds	r7, #152	; 0x98
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000344 	.word	0x20000344
 80023f8:	20000091 	.word	0x20000091
 80023fc:	20000444 	.word	0x20000444

08002400 <xmodem_error_handler>:
 *          Raises the error counter, then if the number of the errors reached critical, do a graceful abort, otherwise send a NAK.
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
	xmodem_status status = X_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
	/* Raise the error counter. */
	(*error_number)++;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	b2da      	uxtb	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	701a      	strb	r2, [r3, #0]
	/* If the counter reached the max value, then abort. */
	if ((*error_number) >= max_error_number) {
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	429a      	cmp	r2, r3
 8002424:	d808      	bhi.n	8002438 <xmodem_error_handler+0x38>
		/* Graceful abort. */
		uartTransmitChar(X_CAN);
 8002426:	2018      	movs	r0, #24
 8002428:	f7ff fd94 	bl	8001f54 <uartTransmitChar>
		uartTransmitChar(X_CAN);
 800242c:	2018      	movs	r0, #24
 800242e:	f7ff fd91 	bl	8001f54 <uartTransmitChar>
		status = X_ERROR;
 8002432:	23ff      	movs	r3, #255	; 0xff
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	e004      	b.n	8002442 <xmodem_error_handler+0x42>
	} else { // Otherwise send a NAK for a repeat.
		uartTransmitChar(X_NAK);
 8002438:	2015      	movs	r0, #21
 800243a:	f7ff fd8b 	bl	8001f54 <uartTransmitChar>
		status = X_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
	}
	if (xmodemPacketNumber == 1 && status == X_OK) {
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <xmodem_error_handler+0x68>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d108      	bne.n	800245c <xmodem_error_handler+0x5c>
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <xmodem_error_handler+0x5c>
		HAL_TIM_Base_Start_IT(&htim6);
 8002450:	4806      	ldr	r0, [pc, #24]	; (800246c <xmodem_error_handler+0x6c>)
 8002452:	f003 f9bb 	bl	80057cc <HAL_TIM_Base_Start_IT>
		timerWorking = 1;
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <xmodem_error_handler+0x70>)
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000091 	.word	0x20000091
 800246c:	200002a8 	.word	0x200002a8
 8002470:	200004ca 	.word	0x200004ca

08002474 <addRemainingDataToCurrentBuf>:


void addRemainingDataToCurrentBuf(uint8_t* receivedData) {
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (remainingDataSize != 0) {
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <addRemainingDataToCurrentBuf+0x84>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d011      	beq.n	80024a8 <addRemainingDataToCurrentBuf+0x34>
		for (i = 0; i < remainingDataSize; i++) {
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e008      	b.n	800249c <addRemainingDataToCurrentBuf+0x28>
			xmodemBuf[i] = remainingDataBuf[i];
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	491b      	ldr	r1, [pc, #108]	; (80024fc <addRemainingDataToCurrentBuf+0x88>)
 8002490:	5c89      	ldrb	r1, [r1, r2]
 8002492:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <addRemainingDataToCurrentBuf+0x8c>)
 8002494:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < remainingDataSize; i++) {
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	3301      	adds	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	b29a      	uxth	r2, r3
 80024a0:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <addRemainingDataToCurrentBuf+0x84>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d3f0      	bcc.n	800248a <addRemainingDataToCurrentBuf+0x16>
		}
	}
	xmodemBufSize = remainingDataSize;
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <addRemainingDataToCurrentBuf+0x84>)
 80024aa:	881a      	ldrh	r2, [r3, #0]
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <addRemainingDataToCurrentBuf+0x90>)
 80024ae:	801a      	strh	r2, [r3, #0]
	remainingDataSize = 0;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <addRemainingDataToCurrentBuf+0x84>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e00d      	b.n	80024d8 <addRemainingDataToCurrentBuf+0x64>
		xmodemBuf[xmodemBufSize + i] = receivedData[i];
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	441a      	add	r2, r3
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <addRemainingDataToCurrentBuf+0x90>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	440b      	add	r3, r1
 80024cc:	7811      	ldrb	r1, [r2, #0]
 80024ce:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <addRemainingDataToCurrentBuf+0x8c>)
 80024d0:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	daed      	bge.n	80024bc <addRemainingDataToCurrentBuf+0x48>
	}
	xmodemBufSize += X_PACKET_128_SIZE;
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <addRemainingDataToCurrentBuf+0x90>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	3380      	adds	r3, #128	; 0x80
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <addRemainingDataToCurrentBuf+0x90>)
 80024ea:	801a      	strh	r2, [r3, #0]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	200004c8 	.word	0x200004c8
 80024fc:	20000448 	.word	0x20000448
 8002500:	20000344 	.word	0x20000344
 8002504:	20000444 	.word	0x20000444

08002508 <cutBuf>:

void cutBuf() {
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t linePtr;

	for (i = xmodemBufSize - 1; i >= 0; i--) {
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <cutBuf+0x8c>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <cutBuf+0x90>)
 800251c:	5cd3      	ldrb	r3, [r2, r3]
 800251e:	2b0a      	cmp	r3, #10
 8002520:	d111      	bne.n	8002546 <cutBuf+0x3e>
			linePtr = i;
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	71bb      	strb	r3, [r7, #6]
			break;
 8002526:	bf00      	nop
		}
	}
	remainingDataSize = xmodemBufSize - linePtr - 1;
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <cutBuf+0x8c>)
 800252a:	881a      	ldrh	r2, [r3, #0]
 800252c:	79bb      	ldrb	r3, [r7, #6]
 800252e:	b29b      	uxth	r3, r3
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <cutBuf+0x94>)
 800253a:	801a      	strh	r2, [r3, #0]
	if (remainingDataSize == 0) return;
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <cutBuf+0x94>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d104      	bne.n	800254e <cutBuf+0x46>
 8002544:	e020      	b.n	8002588 <cutBuf+0x80>
	for (i = xmodemBufSize - 1; i >= 0; i--) {
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	3b01      	subs	r3, #1
 800254a:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 800254c:	e7e4      	b.n	8002518 <cutBuf+0x10>
	xmodemBufSize -= remainingDataSize;
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <cutBuf+0x8c>)
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <cutBuf+0x94>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <cutBuf+0x8c>)
 800255c:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < remainingDataSize; i++) {
 800255e:	2300      	movs	r3, #0
 8002560:	71fb      	strb	r3, [r7, #7]
 8002562:	e00b      	b.n	800257c <cutBuf+0x74>
		remainingDataBuf[i] = xmodemBuf[(linePtr + 1) + i];
 8002564:	79bb      	ldrb	r3, [r7, #6]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	441a      	add	r2, r3
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	490a      	ldr	r1, [pc, #40]	; (8002598 <cutBuf+0x90>)
 8002570:	5c89      	ldrb	r1, [r1, r2]
 8002572:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <cutBuf+0x98>)
 8002574:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < remainingDataSize; i++) {
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	3301      	adds	r3, #1
 800257a:	71fb      	strb	r3, [r7, #7]
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	b29a      	uxth	r2, r3
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <cutBuf+0x94>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d3ed      	bcc.n	8002564 <cutBuf+0x5c>
	}
}
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000444 	.word	0x20000444
 8002598:	20000344 	.word	0x20000344
 800259c:	200004c8 	.word	0x200004c8
 80025a0:	20000448 	.word	0x20000448

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a8:	480d      	ldr	r0, [pc, #52]	; (80025e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025aa:	490e      	ldr	r1, [pc, #56]	; (80025e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c0:	4c0b      	ldr	r4, [pc, #44]	; (80025f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ce:	f7ff fb47 	bl	8001c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d2:	f00f fe6b 	bl	80122ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7fe ff3d 	bl	8001454 <main>
  bx  lr    
 80025da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 80025e8:	08016848 	.word	0x08016848
  ldr r2, =_sbss
 80025ec:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 80025f0:	200081a0 	.word	0x200081a0

080025f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC_IRQHandler>

080025f6 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <DP83848_RegisterBusIO+0x28>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <DP83848_RegisterBusIO+0x28>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <DP83848_RegisterBusIO+0x28>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	e014      	b.n	800264e <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d17c      	bne.n	8002774 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e01c      	b.n	80026ce <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f107 0208 	add.w	r2, r7, #8
 800269c:	2119      	movs	r1, #25
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	4798      	blx	r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da03      	bge.n	80026b0 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 80026a8:	f06f 0304 	mvn.w	r3, #4
 80026ac:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80026ae:	e00b      	b.n	80026c8 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d105      	bne.n	80026c8 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
         break;
 80026c6:	e005      	b.n	80026d4 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b1f      	cmp	r3, #31
 80026d2:	d9df      	bls.n	8002694 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b1f      	cmp	r3, #31
 80026da:	d902      	bls.n	80026e2 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80026dc:	f06f 0302 	mvn.w	r3, #2
 80026e0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d145      	bne.n	8002774 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6810      	ldr	r0, [r2, #0]
 80026f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026f4:	2100      	movs	r1, #0
 80026f6:	4798      	blx	r3
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db37      	blt.n	800276e <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6810      	ldr	r0, [r2, #0]
 8002706:	f107 0208 	add.w	r2, r7, #8
 800270a:	2100      	movs	r1, #0
 800270c:	4798      	blx	r3
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	db28      	blt.n	8002766 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4798      	blx	r3
 800271a:	4603      	mov	r3, r0
 800271c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800271e:	e01c      	b.n	800275a <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4798      	blx	r3
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002732:	d80e      	bhi.n	8002752 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6810      	ldr	r0, [r2, #0]
 800273c:	f107 0208 	add.w	r2, r7, #8
 8002740:	2100      	movs	r1, #0
 8002742:	4798      	blx	r3
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	da07      	bge.n	800275a <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 800274a:	f06f 0304 	mvn.w	r3, #4
 800274e:	613b      	str	r3, [r7, #16]
                 break;
 8002750:	e010      	b.n	8002774 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8002752:	f06f 0301 	mvn.w	r3, #1
 8002756:	613b      	str	r3, [r7, #16]
               break;
 8002758:	e00c      	b.n	8002774 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1dd      	bne.n	8002720 <DP83848_Init+0xc6>
 8002764:	e006      	b.n	8002774 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8002766:	f06f 0304 	mvn.w	r3, #4
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e002      	b.n	8002774 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 800276e:	f06f 0303 	mvn.w	r3, #3
 8002772:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d112      	bne.n	80027a0 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	4798      	blx	r3
 8002780:	4603      	mov	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8002784:	bf00      	nop
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4798      	blx	r3
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002798:	d9f5      	bls.n	8002786 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	605a      	str	r2, [r3, #4]
   }

   return status;
 80027a0:	693b      	ldr	r3, [r7, #16]
 }
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6810      	ldr	r0, [r2, #0]
 80027be:	f107 020c 	add.w	r2, r7, #12
 80027c2:	2101      	movs	r1, #1
 80027c4:	4798      	blx	r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da02      	bge.n	80027d2 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80027cc:	f06f 0304 	mvn.w	r3, #4
 80027d0:	e06e      	b.n	80028b0 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6810      	ldr	r0, [r2, #0]
 80027da:	f107 020c 	add.w	r2, r7, #12
 80027de:	2101      	movs	r1, #1
 80027e0:	4798      	blx	r3
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	da02      	bge.n	80027ee <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80027e8:	f06f 0304 	mvn.w	r3, #4
 80027ec:	e060      	b.n	80028b0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e059      	b.n	80028b0 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6810      	ldr	r0, [r2, #0]
 8002804:	f107 020c 	add.w	r2, r7, #12
 8002808:	2100      	movs	r1, #0
 800280a:	4798      	blx	r3
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	da02      	bge.n	8002818 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8002812:	f06f 0304 	mvn.w	r3, #4
 8002816:	e04b      	b.n	80028b0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11b      	bne.n	800285a <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <DP83848_GetLinkState+0x90>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8002836:	2302      	movs	r3, #2
 8002838:	e03a      	b.n	80028b0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8002844:	2303      	movs	r3, #3
 8002846:	e033      	b.n	80028b0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8002852:	2304      	movs	r3, #4
 8002854:	e02c      	b.n	80028b0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8002856:	2305      	movs	r3, #5
 8002858:	e02a      	b.n	80028b0 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6810      	ldr	r0, [r2, #0]
 8002862:	f107 020c 	add.w	r2, r7, #12
 8002866:	2110      	movs	r1, #16
 8002868:	4798      	blx	r3
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	da02      	bge.n	8002876 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8002870:	f06f 0304 	mvn.w	r3, #4
 8002874:	e01c      	b.n	80028b0 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8002880:	2306      	movs	r3, #6
 8002882:	e015      	b.n	80028b0 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0306 	and.w	r3, r3, #6
 800288a:	2b04      	cmp	r3, #4
 800288c:	d101      	bne.n	8002892 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800288e:	2302      	movs	r3, #2
 8002890:	e00e      	b.n	80028b0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0306 	and.w	r3, r3, #6
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800289c:	2303      	movs	r3, #3
 800289e:	e007      	b.n	80028b0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0306 	and.w	r3, r3, #6
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d101      	bne.n	80028ae <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80028aa:	2304      	movs	r3, #4
 80028ac:	e000      	b.n	80028b0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80028ae:	2305      	movs	r3, #5
    }
  }
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <HAL_Init+0x40>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <HAL_Init+0x40>)
 80028c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_Init+0x40>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <HAL_Init+0x40>)
 80028ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <HAL_Init+0x40>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <HAL_Init+0x40>)
 80028da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e0:	2003      	movs	r0, #3
 80028e2:	f000 f9a7 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e6:	200f      	movs	r0, #15
 80028e8:	f000 f83c 	bl	8002964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028ec:	f7ff f87e 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023c00 	.word	0x40023c00

080028fc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_DeInit+0x54>)
 8002902:	f04f 32ff 	mov.w	r2, #4294967295
 8002906:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_DeInit+0x54>)
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_DeInit+0x54>)
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_DeInit+0x54>)
 8002918:	2200      	movs	r2, #0
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <HAL_DeInit+0x54>)
 800291e:	f04f 32ff 	mov.w	r2, #4294967295
 8002922:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_DeInit+0x54>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_DeInit+0x54>)
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_DeInit+0x54>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_DeInit+0x54>)
 800293a:	f04f 32ff 	mov.w	r2, #4294967295
 800293e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_DeInit+0x54>)
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002946:	f000 f805 	bl	8002954 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_InitTick+0x54>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_InitTick+0x58>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297a:	fbb3 f3f1 	udiv	r3, r3, r1
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f999 	bl	8002cba <HAL_SYSTICK_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e00e      	b.n	80029b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b0f      	cmp	r3, #15
 8002996:	d80a      	bhi.n	80029ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002998:	2200      	movs	r2, #0
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f000 f953 	bl	8002c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a4:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <HAL_InitTick+0x5c>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	2000008c 	.word	0x2000008c
 80029bc:	20000098 	.word	0x20000098
 80029c0:	20000094 	.word	0x20000094

080029c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_IncTick+0x20>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_IncTick+0x24>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_IncTick+0x24>)
 80029d6:	6013      	str	r3, [r2, #0]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000098 	.word	0x20000098
 80029e8:	200004cc 	.word	0x200004cc

080029ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	200004cc 	.word	0x200004cc

08002a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff ffee 	bl	80029ec <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d005      	beq.n	8002a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_Delay+0x44>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a2a:	bf00      	nop
 8002a2c:	f7ff ffde 	bl	80029ec <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d8f7      	bhi.n	8002a2c <HAL_Delay+0x28>
  {
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000098 	.word	0x20000098

08002a4c <__NVIC_SetPriorityGrouping>:
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_GetPriorityGrouping>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_DisableIRQ>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db12      	blt.n	8002b24 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	490a      	ldr	r1, [pc, #40]	; (8002b30 <__NVIC_DisableIRQ+0x44>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b12:	3320      	adds	r3, #32
 8002b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b18:	f3bf 8f4f 	dsb	sy
}
 8002b1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b1e:	f3bf 8f6f 	isb	sy
}
 8002b22:	bf00      	nop
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPriority>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <NVIC_EncodePriority>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	bf28      	it	cs
 8002ba6:	2304      	movcs	r3, #4
 8002ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d902      	bls.n	8002bb8 <NVIC_EncodePriority+0x30>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3b03      	subs	r3, #3
 8002bb6:	e000      	b.n	8002bba <NVIC_EncodePriority+0x32>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	401a      	ands	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	4313      	orrs	r3, r2
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	; 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c00:	d301      	bcc.n	8002c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00f      	b.n	8002c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <SysTick_Config+0x40>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0e:	210f      	movs	r1, #15
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295
 8002c14:	f7ff ff8e 	bl	8002b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <SysTick_Config+0x40>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <SysTick_Config+0x40>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff05 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c5c:	f7ff ff1a 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f7ff ff8e 	bl	8002b88 <NVIC_EncodePriority>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff5d 	bl	8002b34 <__NVIC_SetPriority>
}
 8002c7a:	bf00      	nop
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff0d 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff1d 	bl	8002aec <__NVIC_DisableIRQ>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ff94 	bl	8002bf0 <SysTick_Config>
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7ff fe84 	bl	80029ec <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d008      	beq.n	8002d04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2280      	movs	r2, #128	; 0x80
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e052      	b.n	8002daa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0216 	bic.w	r2, r2, #22
 8002d12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <HAL_DMA_Abort+0x62>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0208 	bic.w	r2, r2, #8
 8002d42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d54:	e013      	b.n	8002d7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d56:	f7ff fe49 	bl	80029ec <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d90c      	bls.n	8002d7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e015      	b.n	8002daa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e4      	bne.n	8002d56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	223f      	movs	r2, #63	; 0x3f
 8002d92:	409a      	lsls	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e00c      	b.n	8002dea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2205      	movs	r2, #5
 8002dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e06c      	b.n	8002efc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2223      	movs	r2, #35	; 0x23
 8002e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f004 fb69 	bl	800750c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_ETH_Init+0xf4>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	4a30      	ldr	r2, [pc, #192]	; (8002f04 <HAL_ETH_Init+0xf4>)
 8002e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e48:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <HAL_ETH_Init+0xf4>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e56:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <HAL_ETH_Init+0xf8>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a2b      	ldr	r2, [pc, #172]	; (8002f08 <HAL_ETH_Init+0xf8>)
 8002e5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e60:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_ETH_Init+0xf8>)
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4927      	ldr	r1, [pc, #156]	; (8002f08 <HAL_ETH_Init+0xf8>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <HAL_ETH_Init+0xf8>)
 8002e72:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e8c:	f7ff fdae 	bl	80029ec <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e92:	e011      	b.n	8002eb8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e94:	f7ff fdaa 	bl	80029ec <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ea2:	d909      	bls.n	8002eb8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	22e0      	movs	r2, #224	; 0xe0
 8002eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e021      	b.n	8002efc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e4      	bne.n	8002e94 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fee4 	bl	8003c98 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 ff8b 	bl	8003dec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 ffe1 	bl	8003e9e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 ff49 	bl	8003d7c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40013800 	.word	0x40013800

08002f0c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d150      	bne.n	8002fc0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2223      	movs	r2, #35	; 0x23
 8002f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f9fd 	bl	800332c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0208 	orr.w	r2, r2, #8
 8002f40:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f7ff fd5a 	bl	8002a04 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0204 	orr.w	r2, r2, #4
 8002f66:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f7ff fd47 	bl	8002a04 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fd2a 	bl	80039d8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f9a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fb2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2223      	movs	r2, #35	; 0x23
 8002fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e000      	b.n	8002fc2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd8:	2b23      	cmp	r3, #35	; 0x23
 8002fda:	d14a      	bne.n	8003072 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2223      	movs	r2, #35	; 0x23
 8002fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ff6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ffa:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	f023 0302 	bic.w	r3, r3, #2
 800300e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003012:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0204 	bic.w	r2, r2, #4
 8003022:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800302c:	2001      	movs	r0, #1
 800302e:	f7ff fce9 	bl	8002a04 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fccc 	bl	80039d8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0208 	bic.w	r2, r2, #8
 800304e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003058:	2001      	movs	r0, #1
 800305a:	f7ff fcd3 	bl	8002a04 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2210      	movs	r2, #16
 800306a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07c      	b.n	800319c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a8:	2b23      	cmp	r3, #35	; 0x23
 80030aa:	d176      	bne.n	800319a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80030ac:	2200      	movs	r2, #0
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 ff61 	bl	8003f78 <ETH_Prepare_Tx_Descriptors>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f043 0202 	orr.w	r2, r3, #2
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e065      	b.n	800319c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80030d0:	f3bf 8f4f 	dsb	sy
}
 80030d4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3206      	adds	r2, #6
 80030de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d904      	bls.n	8003100 <HAL_ETH_Transmit+0x84>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	1f1a      	subs	r2, r3, #4
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3106      	adds	r1, #6
 800310c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003110:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003114:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003116:	f7ff fc69 	bl	80029ec <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800311c:	e037      	b.n	800318e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d011      	beq.n	8003154 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f043 0208 	orr.w	r2, r3, #8
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e023      	b.n	800319c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d018      	beq.n	800318e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800315c:	f7ff fc46 	bl	80029ec <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <HAL_ETH_Transmit+0xf6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f043 0204 	orr.w	r2, r3, #4
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003188:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e006      	b.n	800319c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	dbc3      	blt.n	800311e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e000      	b.n	800319c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f043 0201 	orr.w	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0a8      	b.n	8003322 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d6:	2b23      	cmp	r3, #35	; 0x23
 80031d8:	d001      	beq.n	80031de <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0a1      	b.n	8003322 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	3212      	adds	r2, #18
 80031ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ee:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f4:	f1c3 0304 	rsb	r3, r3, #4
 80031f8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80031fa:	e06a      	b.n	80032d2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d007      	beq.n	8003218 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <HAL_ETH_ReadData+0x88>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d040      	beq.n	80032ae <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00c      	beq.n	8003270 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	0c1b      	lsrs	r3, r3, #16
 800325c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003260:	3b04      	subs	r3, #4
 8003262:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003288:	461a      	mov	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	b29b      	uxth	r3, r3
 800328e:	f004 fb15 	bl	80078bc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	441a      	add	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2200      	movs	r2, #0
 80032ac:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3301      	adds	r3, #1
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d902      	bls.n	80032c0 <HAL_ETH_ReadData+0x11c>
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3b04      	subs	r3, #4
 80032be:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	3212      	adds	r2, #18
 80032c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ca:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3301      	adds	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db06      	blt.n	80032e8 <HAL_ETH_ReadData+0x144>
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d202      	bcs.n	80032e8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d089      	beq.n	80031fc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	441a      	add	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f815 	bl	800332c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d108      	bne.n	8003320 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003340:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	3212      	adds	r2, #18
 8003348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800334c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003352:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003354:	e040      	b.n	80033d8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d112      	bne.n	8003384 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800335e:	f107 030c 	add.w	r3, r7, #12
 8003362:	4618      	mov	r0, r3
 8003364:	f004 fa7a 	bl	800785c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	74fb      	strb	r3, [r7, #19]
 8003372:	e007      	b.n	8003384 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	461a      	mov	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	461a      	mov	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d026      	beq.n	80033d8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	2b00      	cmp	r3, #0
 8003390:	d103      	bne.n	800339a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <ETH_UpdateDescriptor+0xe4>)
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	e003      	b.n	80033a2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80033a0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80033a2:	f3bf 8f5f 	dmb	sy
}
 80033a6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	3301      	adds	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d902      	bls.n	80033c6 <ETH_UpdateDescriptor+0x9a>
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	3b04      	subs	r3, #4
 80033c4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	3212      	adds	r2, #18
 80033cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d0:	617b      	str	r3, [r7, #20]
      desccount--;
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <ETH_UpdateDescriptor+0xb8>
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1b8      	bne.n	8003356 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d00c      	beq.n	8003408 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f6:	461a      	mov	r2, r3
 80033f8:	2300      	movs	r3, #0
 80033fa:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003408:	bf00      	nop
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	800045f8 	.word	0x800045f8

08003414 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d112      	bne.n	8003454 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d109      	bne.n	8003454 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003448:	461a      	mov	r2, r3
 800344a:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_ETH_IRQHandler+0x178>)
 800344c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8ac 	bl	80035ac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d113      	bne.n	800348e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10a      	bne.n	800348e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003480:	461a      	mov	r2, r3
 8003482:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003486:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f885 	bl	8003598 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a0:	d14c      	bne.n	800353c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b4:	d142      	bne.n	800353c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034bc:	f043 0208 	orr.w	r2, r3, #8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d8:	d11a      	bne.n	8003510 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <HAL_ETH_IRQHandler+0x17c>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003500:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003504:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	22e0      	movs	r2, #224	; 0xe0
 800350a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800350e:	e012      	b.n	8003536 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	f248 6380 	movw	r3, #34432	; 0x8680
 800351e:	4013      	ands	r3, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800352e:	461a      	mov	r2, r3
 8003530:	f248 6380 	movw	r3, #34432	; 0x8680
 8003534:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f842 	bl	80035c0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b08      	cmp	r3, #8
 8003548:	d10e      	bne.n	8003568 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f83a 	bl	80035d4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <HAL_ETH_IRQHandler+0x180>)
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d006      	beq.n	8003582 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <HAL_ETH_IRQHandler+0x180>)
 8003576:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800357a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f833 	bl	80035e8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	00010040 	.word	0x00010040
 8003590:	007e2000 	.word	0x007e2000
 8003594:	40013c00 	.word	0x40013c00

08003598 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 031c 	and.w	r3, r3, #28
 8003618:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	02db      	lsls	r3, r3, #11
 800361e:	b29b      	uxth	r3, r3
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	019b      	lsls	r3, r3, #6
 800362a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0302 	bic.w	r3, r3, #2
 800363a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800364c:	f7ff f9ce 	bl	80029ec <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003652:	e00d      	b.n	8003670 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003654:	f7ff f9ca 	bl	80029ec <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003662:	d301      	bcc.n	8003668 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e010      	b.n	800368a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ec      	bne.n	8003654 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	b29b      	uxth	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 031c 	and.w	r3, r3, #28
 80036ae:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	02db      	lsls	r3, r3, #11
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	019b      	lsls	r3, r3, #6
 80036c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ec:	f7ff f97e 	bl	80029ec <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036f2:	e00d      	b.n	8003710 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80036f4:	f7ff f97a 	bl	80029ec <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003702:	d301      	bcc.n	8003708 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e009      	b.n	800371c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ec      	bne.n	80036f4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0d9      	b.n	80038ec <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf14      	ite	ne
 8003852:	2301      	movne	r3, #1
 8003854:	2300      	moveq	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf14      	ite	ne
 800386c:	2301      	movne	r3, #1
 800386e:	2300      	moveq	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	0c1b      	lsrs	r3, r3, #16
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf14      	ite	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	2300      	moveq	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e00b      	b.n	8003924 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003912:	2b10      	cmp	r3, #16
 8003914:	d105      	bne.n	8003922 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003916:	6839      	ldr	r1, [r7, #0]
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f883 	bl	8003a24 <ETH_SetMACConfig>

    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 031c 	bic.w	r3, r3, #28
 8003942:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003944:	f001 fdc6 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 8003948:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d908      	bls.n	8003964 <HAL_ETH_SetMDIOClockRange+0x38>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d804      	bhi.n	8003964 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f043 0308 	orr.w	r3, r3, #8
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e027      	b.n	80039b4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d908      	bls.n	800397e <HAL_ETH_SetMDIOClockRange+0x52>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4a17      	ldr	r2, [pc, #92]	; (80039cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d204      	bcs.n	800397e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f043 030c 	orr.w	r3, r3, #12
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e01a      	b.n	80039b4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4a12      	ldr	r2, [pc, #72]	; (80039cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d303      	bcc.n	800398e <HAL_ETH_SetMDIOClockRange+0x62>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d911      	bls.n	80039b2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4a0f      	ldr	r2, [pc, #60]	; (80039d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d908      	bls.n	80039a8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d804      	bhi.n	80039a8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e005      	b.n	80039b4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f043 0310 	orr.w	r3, r3, #16
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	e000      	b.n	80039b4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80039b2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	611a      	str	r2, [r3, #16]
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	01312cff 	.word	0x01312cff
 80039c8:	02160ebf 	.word	0x02160ebf
 80039cc:	03938700 	.word	0x03938700
 80039d0:	05f5e0ff 	.word	0x05f5e0ff
 80039d4:	08f0d17f 	.word	0x08f0d17f

080039d8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039fa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a08:	2001      	movs	r0, #1
 8003a0a:	f7fe fffb 	bl	8002a04 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a18:	6193      	str	r3, [r2, #24]
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4b51      	ldr	r3, [pc, #324]	; (8003b80 <ETH_SetMACConfig+0x15c>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	7c1b      	ldrb	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <ETH_SetMACConfig+0x28>
 8003a46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003a4a:	e000      	b.n	8003a4e <ETH_SetMACConfig+0x2a>
 8003a4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	7c5b      	ldrb	r3, [r3, #17]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <ETH_SetMACConfig+0x38>
 8003a56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a5a:	e000      	b.n	8003a5e <ETH_SetMACConfig+0x3a>
 8003a5c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	7fdb      	ldrb	r3, [r3, #31]
 8003a6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003a6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	7f92      	ldrb	r2, [r2, #30]
 8003a78:	2a00      	cmp	r2, #0
 8003a7a:	d102      	bne.n	8003a82 <ETH_SetMACConfig+0x5e>
 8003a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a80:	e000      	b.n	8003a84 <ETH_SetMACConfig+0x60>
 8003a82:	2200      	movs	r2, #0
                        macconf->Speed |
 8003a84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	7f1b      	ldrb	r3, [r3, #28]
 8003a8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003a8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003a92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	791b      	ldrb	r3, [r3, #4]
 8003a98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003a9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003aa2:	2a00      	cmp	r2, #0
 8003aa4:	d102      	bne.n	8003aac <ETH_SetMACConfig+0x88>
 8003aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aaa:	e000      	b.n	8003aae <ETH_SetMACConfig+0x8a>
 8003aac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003aae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	7bdb      	ldrb	r3, [r3, #15]
 8003ab4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ab6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003abc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ade:	2001      	movs	r0, #1
 8003ae0:	f7fe ff90 	bl	8002a04 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003b0a:	2a00      	cmp	r2, #0
 8003b0c:	d101      	bne.n	8003b12 <ETH_SetMACConfig+0xee>
 8003b0e:	2280      	movs	r2, #128	; 0x80
 8003b10:	e000      	b.n	8003b14 <ETH_SetMACConfig+0xf0>
 8003b12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003b22:	2a01      	cmp	r2, #1
 8003b24:	d101      	bne.n	8003b2a <ETH_SetMACConfig+0x106>
 8003b26:	2208      	movs	r2, #8
 8003b28:	e000      	b.n	8003b2c <ETH_SetMACConfig+0x108>
 8003b2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003b2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003b34:	2a01      	cmp	r2, #1
 8003b36:	d101      	bne.n	8003b3c <ETH_SetMACConfig+0x118>
 8003b38:	2204      	movs	r2, #4
 8003b3a:	e000      	b.n	8003b3e <ETH_SetMACConfig+0x11a>
 8003b3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003b46:	2a01      	cmp	r2, #1
 8003b48:	d101      	bne.n	8003b4e <ETH_SetMACConfig+0x12a>
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	e000      	b.n	8003b50 <ETH_SetMACConfig+0x12c>
 8003b4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b50:	4313      	orrs	r3, r2
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f7fe ff4b 	bl	8002a04 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	619a      	str	r2, [r3, #24]
}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	ff20810f 	.word	0xff20810f

08003b84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <ETH_SetDMAConfig+0x110>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	7b1b      	ldrb	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <ETH_SetDMAConfig+0x2c>
 8003baa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003bae:	e000      	b.n	8003bb2 <ETH_SetDMAConfig+0x2e>
 8003bb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	7b5b      	ldrb	r3, [r3, #13]
 8003bb6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bb8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	7f52      	ldrb	r2, [r2, #29]
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	d102      	bne.n	8003bc8 <ETH_SetDMAConfig+0x44>
 8003bc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bc6:	e000      	b.n	8003bca <ETH_SetDMAConfig+0x46>
 8003bc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003bca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	7b9b      	ldrb	r3, [r3, #14]
 8003bd0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003bd2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003bd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	7f1b      	ldrb	r3, [r3, #28]
 8003bde:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003be0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	7f9b      	ldrb	r3, [r3, #30]
 8003be6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003be8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003bee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bf6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f7fe fef2 	bl	8002a04 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	791b      	ldrb	r3, [r3, #4]
 8003c32:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c38:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003c3e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c44:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c4c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003c4e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c56:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c5c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c6a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f7fe fec3 	bl	8002a04 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6013      	str	r3, [r2, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	f8de3f23 	.word	0xf8de3f23

08003c98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b0a6      	sub	sp, #152	; 0x98
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003cac:	2300      	movs	r3, #0
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003cfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003d0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff fe86 	bl	8003a24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d4c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003d68:	f107 0308 	add.w	r3, r7, #8
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ff08 	bl	8003b84 <ETH_SetDMAConfig>
}
 8003d74:	bf00      	nop
 8003d76:	3798      	adds	r7, #152	; 0x98
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3305      	adds	r3, #5
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	3204      	adds	r2, #4
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <ETH_MACAddressConfig+0x68>)
 8003d9e:	4413      	add	r3, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3303      	adds	r3, #3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	061a      	lsls	r2, r3, #24
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3302      	adds	r3, #2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <ETH_MACAddressConfig+0x6c>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	6013      	str	r3, [r2, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40028040 	.word	0x40028040
 8003de8:	40028044 	.word	0x40028044

08003dec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e03e      	b.n	8003e78 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68d9      	ldr	r1, [r3, #12]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	440b      	add	r3, r1
 8003e0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2200      	movs	r2, #0
 8003e22:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	3206      	adds	r2, #6
 8003e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d80c      	bhi.n	8003e5c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68d9      	ldr	r1, [r3, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	440b      	add	r3, r1
 8003e54:	461a      	mov	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	e004      	b.n	8003e66 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d9bd      	bls.n	8003dfa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e90:	611a      	str	r2, [r3, #16]
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e046      	b.n	8003f3a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6919      	ldr	r1, [r3, #16]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	440b      	add	r3, r1
 8003ebc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ee8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003ef0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	3212      	adds	r2, #18
 8003f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d80c      	bhi.n	8003f2a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6919      	ldr	r1, [r3, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	440b      	add	r3, r1
 8003f22:	461a      	mov	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	60da      	str	r2, [r3, #12]
 8003f28:	e004      	b.n	8003f34 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3301      	adds	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d9b5      	bls.n	8003eac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6a:	60da      	str	r2, [r3, #12]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b08d      	sub	sp, #52	; 0x34
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3318      	adds	r3, #24
 8003f88:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fba:	d007      	beq.n	8003fcc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e103      	b.n	80041d8 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003fe8:	f023 031f 	bic.w	r3, r3, #31
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	6852      	ldr	r2, [r2, #4]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	431a      	orrs	r2, r3
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	431a      	orrs	r2, r3
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004056:	f3bf 8f5f 	dmb	sy
}
 800405a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004068:	e084      	b.n	8004174 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d006      	beq.n	800408a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e005      	b.n	8004096 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	3301      	adds	r3, #1
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d902      	bls.n	80040a8 <ETH_Prepare_Tx_Descriptors+0x130>
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	3b04      	subs	r3, #4
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ca:	d007      	beq.n	80040dc <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	3304      	adds	r3, #4
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d029      	beq.n	8004130 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ee:	e019      	b.n	8004124 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80040f0:	f3bf 8f5f 	dmb	sy
}
 80040f4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	3301      	adds	r3, #1
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b03      	cmp	r3, #3
 800410c:	d902      	bls.n	8004114 <ETH_Prepare_Tx_Descriptors+0x19c>
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	3b04      	subs	r3, #4
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	3301      	adds	r3, #1
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
 8004124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	429a      	cmp	r2, r3
 800412a:	d3e1      	bcc.n	80040f0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800412c:	2302      	movs	r3, #2
 800412e:	e053      	b.n	80041d8 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	3301      	adds	r3, #1
 8004134:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800414e:	f023 031f 	bic.w	r3, r3, #31
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	6852      	ldr	r2, [r2, #4]
 8004156:	431a      	orrs	r2, r3
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	3301      	adds	r3, #1
 8004160:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004162:	f3bf 8f5f 	dmb	sy
}
 8004166:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f af76 	bne.w	800406a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d006      	beq.n	8004192 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e005      	b.n	800419e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ae:	6979      	ldr	r1, [r7, #20]
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	3304      	adds	r3, #4
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041be:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80041c0:	b672      	cpsid	i
}
 80041c2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80041d2:	b662      	cpsie	i
}
 80041d4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3734      	adds	r7, #52	; 0x34
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <HAL_FLASH_Program+0xa0>)
 80041f8:	7e1b      	ldrb	r3, [r3, #24]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_FLASH_Program+0x1e>
 80041fe:	2302      	movs	r3, #2
 8004200:	e03b      	b.n	800427a <HAL_FLASH_Program+0x96>
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_FLASH_Program+0xa0>)
 8004204:	2201      	movs	r2, #1
 8004206:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800420c:	f000 f870 	bl	80042f0 <FLASH_WaitForLastOperation>
 8004210:	4603      	mov	r3, r0
 8004212:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d12b      	bne.n	8004272 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d105      	bne.n	800422c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004220:	783b      	ldrb	r3, [r7, #0]
 8004222:	4619      	mov	r1, r3
 8004224:	68b8      	ldr	r0, [r7, #8]
 8004226:	f000 f91b 	bl	8004460 <FLASH_Program_Byte>
 800422a:	e016      	b.n	800425a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004232:	883b      	ldrh	r3, [r7, #0]
 8004234:	4619      	mov	r1, r3
 8004236:	68b8      	ldr	r0, [r7, #8]
 8004238:	f000 f8ee 	bl	8004418 <FLASH_Program_HalfWord>
 800423c:	e00d      	b.n	800425a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d105      	bne.n	8004250 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	4619      	mov	r1, r3
 8004248:	68b8      	ldr	r0, [r7, #8]
 800424a:	f000 f8c3 	bl	80043d4 <FLASH_Program_Word>
 800424e:	e004      	b.n	800425a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004254:	68b8      	ldr	r0, [r7, #8]
 8004256:	f000 f88b 	bl	8004370 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800425a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800425e:	f000 f847 	bl	80042f0 <FLASH_WaitForLastOperation>
 8004262:	4603      	mov	r3, r0
 8004264:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <HAL_FLASH_Program+0xa4>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4a07      	ldr	r2, [pc, #28]	; (8004288 <HAL_FLASH_Program+0xa4>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_FLASH_Program+0xa0>)
 8004274:	2200      	movs	r2, #0
 8004276:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	200004d0 	.word	0x200004d0
 8004288:	40023c00 	.word	0x40023c00

0800428c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_FLASH_Unlock+0x38>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	da0b      	bge.n	80042b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_FLASH_Unlock+0x38>)
 80042a0:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <HAL_FLASH_Unlock+0x3c>)
 80042a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <HAL_FLASH_Unlock+0x38>)
 80042a6:	4a09      	ldr	r2, [pc, #36]	; (80042cc <HAL_FLASH_Unlock+0x40>)
 80042a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_FLASH_Unlock+0x38>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	da01      	bge.n	80042b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80042b6:	79fb      	ldrb	r3, [r7, #7]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40023c00 	.word	0x40023c00
 80042c8:	45670123 	.word	0x45670123
 80042cc:	cdef89ab 	.word	0xcdef89ab

080042d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_FLASH_Lock+0x1c>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	4a04      	ldr	r2, [pc, #16]	; (80042ec <HAL_FLASH_Lock+0x1c>)
 80042da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40023c00 	.word	0x40023c00

080042f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <FLASH_WaitForLastOperation+0x78>)
 80042fe:	2200      	movs	r2, #0
 8004300:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004302:	f7fe fb73 	bl	80029ec <HAL_GetTick>
 8004306:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004308:	e010      	b.n	800432c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d00c      	beq.n	800432c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <FLASH_WaitForLastOperation+0x38>
 8004318:	f7fe fb68 	bl	80029ec <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d201      	bcs.n	800432c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e019      	b.n	8004360 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <FLASH_WaitForLastOperation+0x7c>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e8      	bne.n	800430a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <FLASH_WaitForLastOperation+0x7c>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004344:	4b09      	ldr	r3, [pc, #36]	; (800436c <FLASH_WaitForLastOperation+0x7c>)
 8004346:	2201      	movs	r2, #1
 8004348:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <FLASH_WaitForLastOperation+0x7c>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004356:	f000 f8a5 	bl	80044a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
  
}  
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	200004d0 	.word	0x200004d0
 800436c:	40023c00 	.word	0x40023c00

08004370 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 8004382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004386:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 800438e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004394:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	4a0d      	ldr	r2, [pc, #52]	; (80043d0 <FLASH_Program_DoubleWord+0x60>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80043a6:	f3bf 8f6f 	isb	sy
}
 80043aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80043ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	000a      	movs	r2, r1
 80043ba:	2300      	movs	r3, #0
 80043bc:	68f9      	ldr	r1, [r7, #12]
 80043be:	3104      	adds	r1, #4
 80043c0:	4613      	mov	r3, r2
 80043c2:	600b      	str	r3, [r1, #0]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40023c00 	.word	0x40023c00

080043d4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <FLASH_Program_Word+0x40>)
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <FLASH_Program_Word+0x40>)
 80043e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <FLASH_Program_Word+0x40>)
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <FLASH_Program_Word+0x40>)
 80043f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <FLASH_Program_Word+0x40>)
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	4a06      	ldr	r2, [pc, #24]	; (8004414 <FLASH_Program_Word+0x40>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	601a      	str	r2, [r3, #0]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40023c00 	.word	0x40023c00

08004418 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004424:	4b0d      	ldr	r3, [pc, #52]	; (800445c <FLASH_Program_HalfWord+0x44>)
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	4a0c      	ldr	r2, [pc, #48]	; (800445c <FLASH_Program_HalfWord+0x44>)
 800442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <FLASH_Program_HalfWord+0x44>)
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	4a09      	ldr	r2, [pc, #36]	; (800445c <FLASH_Program_HalfWord+0x44>)
 8004436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <FLASH_Program_HalfWord+0x44>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	4a06      	ldr	r2, [pc, #24]	; (800445c <FLASH_Program_HalfWord+0x44>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	801a      	strh	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40023c00 	.word	0x40023c00

08004460 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <FLASH_Program_Byte+0x40>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <FLASH_Program_Byte+0x40>)
 8004472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <FLASH_Program_Byte+0x40>)
 800447a:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <FLASH_Program_Byte+0x40>)
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <FLASH_Program_Byte+0x40>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	4a06      	ldr	r2, [pc, #24]	; (80044a0 <FLASH_Program_Byte+0x40>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	701a      	strb	r2, [r3, #0]
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40023c00 	.word	0x40023c00

080044a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80044a8:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f043 0310 	orr.w	r3, r3, #16
 80044bc:	4a2b      	ldr	r2, [pc, #172]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044be:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80044c0:	4b29      	ldr	r3, [pc, #164]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044c2:	2210      	movs	r2, #16
 80044c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80044c6:	4b28      	ldr	r3, [pc, #160]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80044d2:	4b26      	ldr	r3, [pc, #152]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f043 0308 	orr.w	r3, r3, #8
 80044da:	4a24      	ldr	r2, [pc, #144]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044dc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80044de:	4b22      	ldr	r3, [pc, #136]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044e0:	2220      	movs	r2, #32
 80044e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	4a1c      	ldr	r2, [pc, #112]	; (800456c <FLASH_SetErrorCode+0xc8>)
 80044fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80044fc:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 80044fe:	2240      	movs	r2, #64	; 0x40
 8004500:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004502:	4b19      	ldr	r3, [pc, #100]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800450e:	4b17      	ldr	r3, [pc, #92]	; (800456c <FLASH_SetErrorCode+0xc8>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <FLASH_SetErrorCode+0xc8>)
 8004518:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800451a:	4b13      	ldr	r3, [pc, #76]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <FLASH_SetErrorCode+0xc8>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	4a0d      	ldr	r2, [pc, #52]	; (800456c <FLASH_SetErrorCode+0xc8>)
 8004536:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 800453a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800453e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <FLASH_SetErrorCode+0xc8>)
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f043 0320 	orr.w	r3, r3, #32
 8004554:	4a05      	ldr	r2, [pc, #20]	; (800456c <FLASH_SetErrorCode+0xc8>)
 8004556:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004558:	4b03      	ldr	r3, [pc, #12]	; (8004568 <FLASH_SetErrorCode+0xc4>)
 800455a:	2202      	movs	r2, #2
 800455c:	60da      	str	r2, [r3, #12]
  }
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40023c00 	.word	0x40023c00
 800456c:	200004d0 	.word	0x200004d0

08004570 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004582:	4b32      	ldr	r3, [pc, #200]	; (800464c <HAL_FLASHEx_Erase+0xdc>)
 8004584:	7e1b      	ldrb	r3, [r3, #24]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_FLASHEx_Erase+0x1e>
 800458a:	2302      	movs	r3, #2
 800458c:	e05a      	b.n	8004644 <HAL_FLASHEx_Erase+0xd4>
 800458e:	4b2f      	ldr	r3, [pc, #188]	; (800464c <HAL_FLASHEx_Erase+0xdc>)
 8004590:	2201      	movs	r2, #1
 8004592:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004594:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004598:	f7ff feaa 	bl	80042f0 <FLASH_WaitForLastOperation>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d14a      	bne.n	800463c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f04f 32ff 	mov.w	r2, #4294967295
 80045ac:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d117      	bne.n	80045e6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f000 f846 	bl	8004654 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045cc:	f7ff fe90 	bl	80042f0 <FLASH_WaitForLastOperation>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80045d4:	4b1e      	ldr	r3, [pc, #120]	; (8004650 <HAL_FLASHEx_Erase+0xe0>)
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	4a1d      	ldr	r2, [pc, #116]	; (8004650 <HAL_FLASHEx_Erase+0xe0>)
 80045da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	6113      	str	r3, [r2, #16]
 80045e4:	e028      	b.n	8004638 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	e01c      	b.n	8004628 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	4619      	mov	r1, r3
 80045f6:	68b8      	ldr	r0, [r7, #8]
 80045f8:	f000 f866 	bl	80046c8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004600:	f7ff fe76 	bl	80042f0 <FLASH_WaitForLastOperation>
 8004604:	4603      	mov	r3, r0
 8004606:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004608:	4b11      	ldr	r3, [pc, #68]	; (8004650 <HAL_FLASHEx_Erase+0xe0>)
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	4a10      	ldr	r2, [pc, #64]	; (8004650 <HAL_FLASHEx_Erase+0xe0>)
 800460e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004612:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	601a      	str	r2, [r3, #0]
          break;
 8004620:	e00a      	b.n	8004638 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3301      	adds	r3, #1
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4413      	add	r3, r2
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d3da      	bcc.n	80045ee <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004638:	f000 f894 	bl	8004764 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <HAL_FLASHEx_Erase+0xdc>)
 800463e:	2200      	movs	r2, #0
 8004640:	761a      	strb	r2, [r3, #24]

  return status;
 8004642:	7bfb      	ldrb	r3, [r7, #15]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200004d0 	.word	0x200004d0
 8004650:	40023c00 	.word	0x40023c00

08004654 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004660:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <FLASH_MassErase+0x70>)
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <FLASH_MassErase+0x70>)
 8004666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466a:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d108      	bne.n	8004684 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <FLASH_MassErase+0x70>)
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <FLASH_MassErase+0x70>)
 8004678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467c:	f043 0304 	orr.w	r3, r3, #4
 8004680:	6113      	str	r3, [r2, #16]
 8004682:	e00f      	b.n	80046a4 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d106      	bne.n	8004698 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800468a:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <FLASH_MassErase+0x70>)
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <FLASH_MassErase+0x70>)
 8004690:	f043 0304 	orr.w	r3, r3, #4
 8004694:	6113      	str	r3, [r2, #16]
 8004696:	e005      	b.n	80046a4 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <FLASH_MassErase+0x70>)
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <FLASH_MassErase+0x70>)
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <FLASH_MassErase+0x70>)
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	4313      	orrs	r3, r2
 80046ae:	4a05      	ldr	r2, [pc, #20]	; (80046c4 <FLASH_MassErase+0x70>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	6113      	str	r3, [r2, #16]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40023c00 	.word	0x40023c00

080046c8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e010      	b.n	8004706 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d103      	bne.n	80046f2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80046ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e009      	b.n	8004706 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d103      	bne.n	8004700 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80046f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	e002      	b.n	8004706 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004700:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004704:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b0b      	cmp	r3, #11
 800470a:	d902      	bls.n	8004712 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004712:	4b13      	ldr	r3, [pc, #76]	; (8004760 <FLASH_Erase_Sector+0x98>)
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	4a12      	ldr	r2, [pc, #72]	; (8004760 <FLASH_Erase_Sector+0x98>)
 8004718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800471e:	4b10      	ldr	r3, [pc, #64]	; (8004760 <FLASH_Erase_Sector+0x98>)
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	490f      	ldr	r1, [pc, #60]	; (8004760 <FLASH_Erase_Sector+0x98>)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800472a:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <FLASH_Erase_Sector+0x98>)
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	4a0c      	ldr	r2, [pc, #48]	; (8004760 <FLASH_Erase_Sector+0x98>)
 8004730:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004734:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <FLASH_Erase_Sector+0x98>)
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4313      	orrs	r3, r2
 8004740:	4a07      	ldr	r2, [pc, #28]	; (8004760 <FLASH_Erase_Sector+0x98>)
 8004742:	f043 0302 	orr.w	r3, r3, #2
 8004746:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <FLASH_Erase_Sector+0x98>)
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	4a04      	ldr	r2, [pc, #16]	; (8004760 <FLASH_Erase_Sector+0x98>)
 800474e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004752:	6113      	str	r3, [r2, #16]
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	40023c00 	.word	0x40023c00

08004764 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004768:	4b20      	ldr	r3, [pc, #128]	; (80047ec <FLASH_FlushCaches+0x88>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004770:	2b00      	cmp	r3, #0
 8004772:	d017      	beq.n	80047a4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <FLASH_FlushCaches+0x88>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <FLASH_FlushCaches+0x88>)
 800477a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800477e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <FLASH_FlushCaches+0x88>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a19      	ldr	r2, [pc, #100]	; (80047ec <FLASH_FlushCaches+0x88>)
 8004786:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b17      	ldr	r3, [pc, #92]	; (80047ec <FLASH_FlushCaches+0x88>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a16      	ldr	r2, [pc, #88]	; (80047ec <FLASH_FlushCaches+0x88>)
 8004792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004796:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <FLASH_FlushCaches+0x88>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a13      	ldr	r2, [pc, #76]	; (80047ec <FLASH_FlushCaches+0x88>)
 800479e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <FLASH_FlushCaches+0x88>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d017      	beq.n	80047e0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80047b0:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <FLASH_FlushCaches+0x88>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <FLASH_FlushCaches+0x88>)
 80047b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <FLASH_FlushCaches+0x88>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <FLASH_FlushCaches+0x88>)
 80047c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	4b08      	ldr	r3, [pc, #32]	; (80047ec <FLASH_FlushCaches+0x88>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a07      	ldr	r2, [pc, #28]	; (80047ec <FLASH_FlushCaches+0x88>)
 80047ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <FLASH_FlushCaches+0x88>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a04      	ldr	r2, [pc, #16]	; (80047ec <FLASH_FlushCaches+0x88>)
 80047da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047de:	6013      	str	r3, [r2, #0]
  }
}
 80047e0:	bf00      	nop
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40023c00 	.word	0x40023c00

080047f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	e177      	b.n	8004afc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800480c:	2201      	movs	r2, #1
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4013      	ands	r3, r2
 800481e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	429a      	cmp	r2, r3
 8004826:	f040 8166 	bne.w	8004af6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d005      	beq.n	8004842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800483e:	2b02      	cmp	r3, #2
 8004840:	d130      	bne.n	80048a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	2203      	movs	r2, #3
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4313      	orrs	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004878:	2201      	movs	r2, #1
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 0201 	and.w	r2, r3, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d017      	beq.n	80048e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	2203      	movs	r2, #3
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d123      	bne.n	8004934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	08da      	lsrs	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3208      	adds	r2, #8
 80048f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	220f      	movs	r2, #15
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	08da      	lsrs	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3208      	adds	r2, #8
 800492e:	69b9      	ldr	r1, [r7, #24]
 8004930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	2203      	movs	r2, #3
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 0203 	and.w	r2, r3, #3
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80c0 	beq.w	8004af6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	4b66      	ldr	r3, [pc, #408]	; (8004b14 <HAL_GPIO_Init+0x324>)
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	4a65      	ldr	r2, [pc, #404]	; (8004b14 <HAL_GPIO_Init+0x324>)
 8004980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004984:	6453      	str	r3, [r2, #68]	; 0x44
 8004986:	4b63      	ldr	r3, [pc, #396]	; (8004b14 <HAL_GPIO_Init+0x324>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004992:	4a61      	ldr	r2, [pc, #388]	; (8004b18 <HAL_GPIO_Init+0x328>)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	089b      	lsrs	r3, r3, #2
 8004998:	3302      	adds	r3, #2
 800499a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	220f      	movs	r2, #15
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a58      	ldr	r2, [pc, #352]	; (8004b1c <HAL_GPIO_Init+0x32c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d037      	beq.n	8004a2e <HAL_GPIO_Init+0x23e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a57      	ldr	r2, [pc, #348]	; (8004b20 <HAL_GPIO_Init+0x330>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d031      	beq.n	8004a2a <HAL_GPIO_Init+0x23a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a56      	ldr	r2, [pc, #344]	; (8004b24 <HAL_GPIO_Init+0x334>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d02b      	beq.n	8004a26 <HAL_GPIO_Init+0x236>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a55      	ldr	r2, [pc, #340]	; (8004b28 <HAL_GPIO_Init+0x338>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d025      	beq.n	8004a22 <HAL_GPIO_Init+0x232>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a54      	ldr	r2, [pc, #336]	; (8004b2c <HAL_GPIO_Init+0x33c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01f      	beq.n	8004a1e <HAL_GPIO_Init+0x22e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a53      	ldr	r2, [pc, #332]	; (8004b30 <HAL_GPIO_Init+0x340>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d019      	beq.n	8004a1a <HAL_GPIO_Init+0x22a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a52      	ldr	r2, [pc, #328]	; (8004b34 <HAL_GPIO_Init+0x344>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <HAL_GPIO_Init+0x226>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a51      	ldr	r2, [pc, #324]	; (8004b38 <HAL_GPIO_Init+0x348>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00d      	beq.n	8004a12 <HAL_GPIO_Init+0x222>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a50      	ldr	r2, [pc, #320]	; (8004b3c <HAL_GPIO_Init+0x34c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <HAL_GPIO_Init+0x21e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a4f      	ldr	r2, [pc, #316]	; (8004b40 <HAL_GPIO_Init+0x350>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d101      	bne.n	8004a0a <HAL_GPIO_Init+0x21a>
 8004a06:	2309      	movs	r3, #9
 8004a08:	e012      	b.n	8004a30 <HAL_GPIO_Init+0x240>
 8004a0a:	230a      	movs	r3, #10
 8004a0c:	e010      	b.n	8004a30 <HAL_GPIO_Init+0x240>
 8004a0e:	2308      	movs	r3, #8
 8004a10:	e00e      	b.n	8004a30 <HAL_GPIO_Init+0x240>
 8004a12:	2307      	movs	r3, #7
 8004a14:	e00c      	b.n	8004a30 <HAL_GPIO_Init+0x240>
 8004a16:	2306      	movs	r3, #6
 8004a18:	e00a      	b.n	8004a30 <HAL_GPIO_Init+0x240>
 8004a1a:	2305      	movs	r3, #5
 8004a1c:	e008      	b.n	8004a30 <HAL_GPIO_Init+0x240>
 8004a1e:	2304      	movs	r3, #4
 8004a20:	e006      	b.n	8004a30 <HAL_GPIO_Init+0x240>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e004      	b.n	8004a30 <HAL_GPIO_Init+0x240>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e002      	b.n	8004a30 <HAL_GPIO_Init+0x240>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <HAL_GPIO_Init+0x240>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	f002 0203 	and.w	r2, r2, #3
 8004a36:	0092      	lsls	r2, r2, #2
 8004a38:	4093      	lsls	r3, r2
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a40:	4935      	ldr	r1, [pc, #212]	; (8004b18 <HAL_GPIO_Init+0x328>)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	3302      	adds	r3, #2
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a4e:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <HAL_GPIO_Init+0x354>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a72:	4a34      	ldr	r2, [pc, #208]	; (8004b44 <HAL_GPIO_Init+0x354>)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a78:	4b32      	ldr	r3, [pc, #200]	; (8004b44 <HAL_GPIO_Init+0x354>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a9c:	4a29      	ldr	r2, [pc, #164]	; (8004b44 <HAL_GPIO_Init+0x354>)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aa2:	4b28      	ldr	r3, [pc, #160]	; (8004b44 <HAL_GPIO_Init+0x354>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ac6:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_GPIO_Init+0x354>)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_GPIO_Init+0x354>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004af0:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <HAL_GPIO_Init+0x354>)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3301      	adds	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b0f      	cmp	r3, #15
 8004b00:	f67f ae84 	bls.w	800480c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	3724      	adds	r7, #36	; 0x24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40013800 	.word	0x40013800
 8004b1c:	40020000 	.word	0x40020000
 8004b20:	40020400 	.word	0x40020400
 8004b24:	40020800 	.word	0x40020800
 8004b28:	40020c00 	.word	0x40020c00
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40021400 	.word	0x40021400
 8004b34:	40021800 	.word	0x40021800
 8004b38:	40021c00 	.word	0x40021c00
 8004b3c:	40022000 	.word	0x40022000
 8004b40:	40022400 	.word	0x40022400
 8004b44:	40013c00 	.word	0x40013c00

08004b48 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e034      	b.n	8004bc4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004b62:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f245 5255 	movw	r2, #21845	; 0x5555
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6852      	ldr	r2, [r2, #4]
 8004b76:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6892      	ldr	r2, [r2, #8]
 8004b80:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004b82:	f7fd ff33 	bl	80029ec <HAL_GetTick>
 8004b86:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004b88:	e00f      	b.n	8004baa <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004b8a:	f7fd ff2f 	bl	80029ec <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b31      	cmp	r3, #49	; 0x31
 8004b96:	d908      	bls.n	8004baa <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e00c      	b.n	8004bc4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e8      	bne.n	8004b8a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004bc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_PWREx_EnableOverDrive+0x90>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <HAL_PWREx_EnableOverDrive+0x90>)
 8004c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c04:	6413      	str	r3, [r2, #64]	; 0x40
 8004c06:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <HAL_PWREx_EnableOverDrive+0x90>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c12:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <HAL_PWREx_EnableOverDrive+0x94>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c18:	f7fd fee8 	bl	80029ec <HAL_GetTick>
 8004c1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c1e:	e009      	b.n	8004c34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c20:	f7fd fee4 	bl	80029ec <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c2e:	d901      	bls.n	8004c34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e01f      	b.n	8004c74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c34:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c40:	d1ee      	bne.n	8004c20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c42:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c48:	f7fd fed0 	bl	80029ec <HAL_GetTick>
 8004c4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c4e:	e009      	b.n	8004c64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c50:	f7fd fecc 	bl	80029ec <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c5e:	d901      	bls.n	8004c64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e007      	b.n	8004c74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c70:	d1ee      	bne.n	8004c50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	420e0040 	.word	0x420e0040
 8004c84:	40007000 	.word	0x40007000
 8004c88:	420e0044 	.word	0x420e0044

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e267      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d075      	beq.n	8004d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004caa:	4b88      	ldr	r3, [pc, #544]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4b85      	ldr	r3, [pc, #532]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d112      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc2:	4b82      	ldr	r3, [pc, #520]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cce:	d10b      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d157      	bne.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e242      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCC_OscConfig+0x74>
 8004cf2:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x98>
 8004d0a:	4b70      	ldr	r3, [pc, #448]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6f      	ldr	r2, [pc, #444]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b6d      	ldr	r3, [pc, #436]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6c      	ldr	r2, [pc, #432]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d24:	4b69      	ldr	r3, [pc, #420]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a68      	ldr	r2, [pc, #416]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b66      	ldr	r3, [pc, #408]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fd fe52 	bl	80029ec <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fd fe4e 	bl	80029ec <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e207      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b5b      	ldr	r3, [pc, #364]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fd fe3e 	bl	80029ec <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fd fe3a 	bl	80029ec <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1f3      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004da2:	4b4a      	ldr	r3, [pc, #296]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dba:	4b44      	ldr	r3, [pc, #272]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	4b41      	ldr	r3, [pc, #260]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e1c7      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4937      	ldr	r1, [pc, #220]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	e03a      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fd fdf3 	bl	80029ec <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fd fdef 	bl	80029ec <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1a8      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b28      	ldr	r3, [pc, #160]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4925      	ldr	r1, [pc, #148]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	e015      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fd fdd2 	bl	80029ec <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fd fdce 	bl	80029ec <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e187      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fd fdb2 	bl	80029ec <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8c:	f7fd fdae 	bl	80029ec <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e167      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x200>
 8004eaa:	e01b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fd fd9b 	bl	80029ec <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	e00e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eba:	f7fd fd97 	bl	80029ec <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d907      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e150      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	42470000 	.word	0x42470000
 8004ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	4b88      	ldr	r3, [pc, #544]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ea      	bne.n	8004eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8097 	beq.w	8005020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef6:	4b81      	ldr	r3, [pc, #516]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	4b7d      	ldr	r3, [pc, #500]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	; 0x40
 8004f12:	4b7a      	ldr	r3, [pc, #488]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b77      	ldr	r3, [pc, #476]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4b74      	ldr	r3, [pc, #464]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a73      	ldr	r2, [pc, #460]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fd fd57 	bl	80029ec <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fd fd53 	bl	80029ec <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e10c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b6a      	ldr	r3, [pc, #424]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2ea>
 8004f68:	4b64      	ldr	r3, [pc, #400]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a63      	ldr	r2, [pc, #396]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x30c>
 8004f7e:	4b5f      	ldr	r3, [pc, #380]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	4a5e      	ldr	r2, [pc, #376]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8a:	4b5c      	ldr	r3, [pc, #368]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	4a5b      	ldr	r2, [pc, #364]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	; 0x70
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f98:	4b58      	ldr	r3, [pc, #352]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a57      	ldr	r2, [pc, #348]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa4:	4b55      	ldr	r3, [pc, #340]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4a54      	ldr	r2, [pc, #336]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fd fd18 	bl	80029ec <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fd fd14 	bl	80029ec <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0cb      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	4b49      	ldr	r3, [pc, #292]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe4:	f7fd fd02 	bl	80029ec <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fd fcfe 	bl	80029ec <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0b5      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	4b3e      	ldr	r3, [pc, #248]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005014:	4b39      	ldr	r3, [pc, #228]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	4a38      	ldr	r2, [pc, #224]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a1 	beq.w	800516c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502a:	4b34      	ldr	r3, [pc, #208]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d05c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d141      	bne.n	80050c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <HAL_RCC_OscConfig+0x478>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd fcd2 	bl	80029ec <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fd fcce 	bl	80029ec <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e087      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b27      	ldr	r3, [pc, #156]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	491b      	ldr	r1, [pc, #108]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <HAL_RCC_OscConfig+0x478>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fd fca7 	bl	80029ec <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fd fca3 	bl	80029ec <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e05c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	4b11      	ldr	r3, [pc, #68]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x416>
 80050c0:	e054      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <HAL_RCC_OscConfig+0x478>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fd fc90 	bl	80029ec <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fd fc8c 	bl	80029ec <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e045      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x444>
 80050ee:	e03d      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e038      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
 8005104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005108:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <HAL_RCC_OscConfig+0x4ec>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d028      	beq.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d121      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d11a      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800513e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d111      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cc      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b68      	ldr	r3, [pc, #416]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b65      	ldr	r3, [pc, #404]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3f      	ldr	r3, [pc, #252]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e067      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b37      	ldr	r3, [pc, #220]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4934      	ldr	r1, [pc, #208]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fd fbbe 	bl	80029ec <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fd fbba 	bl	80029ec <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b22      	ldr	r3, [pc, #136]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fd fb1e 	bl	8002964 <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	080164e8 	.word	0x080164e8
 8005340:	2000008c 	.word	0x2000008c
 8005344:	20000094 	.word	0x20000094

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b090      	sub	sp, #64	; 0x40
 800534e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	637b      	str	r3, [r7, #52]	; 0x34
 8005354:	2300      	movs	r3, #0
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005358:	2300      	movs	r3, #0
 800535a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005360:	4b59      	ldr	r3, [pc, #356]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00d      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800536c:	2b08      	cmp	r3, #8
 800536e:	f200 80a1 	bhi.w	80054b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
 8005376:	2b04      	cmp	r3, #4
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800537a:	e09b      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_GetSysClockFreq+0x184>)
 800537e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005380:	e09b      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b53      	ldr	r3, [pc, #332]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005386:	e098      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005388:	4b4f      	ldr	r3, [pc, #316]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005392:	4b4d      	ldr	r3, [pc, #308]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d028      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b4a      	ldr	r3, [pc, #296]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	627a      	str	r2, [r7, #36]	; 0x24
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053b0:	2100      	movs	r1, #0
 80053b2:	4b47      	ldr	r3, [pc, #284]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053b4:	fb03 f201 	mul.w	r2, r3, r1
 80053b8:	2300      	movs	r3, #0
 80053ba:	fb00 f303 	mul.w	r3, r0, r3
 80053be:	4413      	add	r3, r2
 80053c0:	4a43      	ldr	r2, [pc, #268]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053c2:	fba0 1202 	umull	r1, r2, r0, r2
 80053c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053c8:	460a      	mov	r2, r1
 80053ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80053cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ce:	4413      	add	r3, r2
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	2200      	movs	r2, #0
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	61fa      	str	r2, [r7, #28]
 80053da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053e2:	f7fa ff6d 	bl	80002c0 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4613      	mov	r3, r2
 80053ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ee:	e053      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f0:	4b35      	ldr	r3, [pc, #212]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	2200      	movs	r2, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	617a      	str	r2, [r7, #20]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005402:	f04f 0b00 	mov.w	fp, #0
 8005406:	4652      	mov	r2, sl
 8005408:	465b      	mov	r3, fp
 800540a:	f04f 0000 	mov.w	r0, #0
 800540e:	f04f 0100 	mov.w	r1, #0
 8005412:	0159      	lsls	r1, r3, #5
 8005414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005418:	0150      	lsls	r0, r2, #5
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	ebb2 080a 	subs.w	r8, r2, sl
 8005422:	eb63 090b 	sbc.w	r9, r3, fp
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005432:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005436:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800543a:	ebb2 0408 	subs.w	r4, r2, r8
 800543e:	eb63 0509 	sbc.w	r5, r3, r9
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	00eb      	lsls	r3, r5, #3
 800544c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005450:	00e2      	lsls	r2, r4, #3
 8005452:	4614      	mov	r4, r2
 8005454:	461d      	mov	r5, r3
 8005456:	eb14 030a 	adds.w	r3, r4, sl
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	eb45 030b 	adc.w	r3, r5, fp
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800546e:	4629      	mov	r1, r5
 8005470:	028b      	lsls	r3, r1, #10
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005478:	4621      	mov	r1, r4
 800547a:	028a      	lsls	r2, r1, #10
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005482:	2200      	movs	r2, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800548c:	f7fa ff18 	bl	80002c0 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	3301      	adds	r3, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80054a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_RCC_GetSysClockFreq+0x184>)
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3740      	adds	r7, #64	; 0x40
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	017d7840 	.word	0x017d7840

080054d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	2000008c 	.word	0x2000008c

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054f0:	f7ff fff0 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0a9b      	lsrs	r3, r3, #10
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	; (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	080164f8 	.word	0x080164f8

08005514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005518:	f7ff ffdc 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	0b5b      	lsrs	r3, r3, #13
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4903      	ldr	r1, [pc, #12]	; (8005538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40023800 	.word	0x40023800
 8005538:	080164f8 	.word	0x080164f8

0800553c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005542:	f7fd fa53 	bl	80029ec <HAL_GetTick>
 8005546:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005548:	4b72      	ldr	r3, [pc, #456]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a71      	ldr	r2, [pc, #452]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005556:	f7fd fa49 	bl	80029ec <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e0d0      	b.n	800570a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005568:	4b6a      	ldr	r3, [pc, #424]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f0      	beq.n	8005556 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8005574:	4b67      	ldr	r3, [pc, #412]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a66      	ldr	r2, [pc, #408]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800557a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005580:	f7fd fa34 	bl	80029ec <HAL_GetTick>
 8005584:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8005586:	4b63      	ldr	r3, [pc, #396]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 8005588:	2200      	movs	r2, #0
 800558a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558e:	f7fd fa2d 	bl	80029ec <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	; 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e0b2      	b.n	800570a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80055a4:	4b5b      	ldr	r3, [pc, #364]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ee      	bne.n	800558e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80055b0:	f7fd fa1c 	bl	80029ec <HAL_GetTick>
 80055b4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80055b6:	4b57      	ldr	r3, [pc, #348]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a56      	ldr	r2, [pc, #344]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80055bc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80055c0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c4:	f7fd fa12 	bl	80029ec <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	; 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e099      	b.n	800570a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80055d6:	4b4f      	ldr	r3, [pc, #316]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80055e2:	f7fd fa03 	bl	80029ec <HAL_GetTick>
 80055e6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80055e8:	4b4a      	ldr	r3, [pc, #296]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a49      	ldr	r2, [pc, #292]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80055ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055f2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f6:	f7fd f9f9 	bl	80029ec <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e080      	b.n	800570a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005608:	4b42      	ldr	r3, [pc, #264]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f0      	bne.n	80055f6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005614:	f7fd f9ea 	bl	80029ec <HAL_GetTick>
 8005618:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800561a:	4b3e      	ldr	r3, [pc, #248]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a3d      	ldr	r2, [pc, #244]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 8005620:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005624:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005628:	f7fd f9e0 	bl	80029ec <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e067      	b.n	800570a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800563a:	4b36      	ldr	r3, [pc, #216]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005646:	f7fd f9d1 	bl	80029ec <HAL_GetTick>
 800564a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 800564c:	4b31      	ldr	r3, [pc, #196]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a30      	ldr	r2, [pc, #192]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 8005652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005656:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800565a:	f7fd f9c7 	bl	80029ec <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e04e      	b.n	800570a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 800566c:	4b29      	ldr	r3, [pc, #164]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f0      	bne.n	800565a <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8005678:	4b26      	ldr	r3, [pc, #152]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800567a:	4a27      	ldr	r2, [pc, #156]	; (8005718 <HAL_RCC_DeInit+0x1dc>)
 800567c:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800567e:	4b25      	ldr	r3, [pc, #148]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 8005680:	4a26      	ldr	r2, [pc, #152]	; (800571c <HAL_RCC_DeInit+0x1e0>)
 8005682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8005686:	4b23      	ldr	r3, [pc, #140]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 8005688:	4a24      	ldr	r2, [pc, #144]	; (800571c <HAL_RCC_DeInit+0x1e0>)
 800568a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800568e:	4b21      	ldr	r3, [pc, #132]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	4a20      	ldr	r2, [pc, #128]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 8005694:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005698:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800569a:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80056a6:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80056b2:	4b18      	ldr	r3, [pc, #96]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4a17      	ldr	r2, [pc, #92]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056b8:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80056bc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80056be:	4b15      	ldr	r3, [pc, #84]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	4a14      	ldr	r2, [pc, #80]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	4a11      	ldr	r2, [pc, #68]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056da:	4a0e      	ldr	r2, [pc, #56]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80056e2:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	4a0b      	ldr	r2, [pc, #44]	; (8005714 <HAL_RCC_DeInit+0x1d8>)
 80056e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ec:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <HAL_RCC_DeInit+0x1e4>)
 80056f0:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <HAL_RCC_DeInit+0x1e8>)
 80056f2:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <HAL_RCC_DeInit+0x1ec>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fd f933 	bl	8002964 <HAL_InitTick>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8005708:	2300      	movs	r3, #0
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40023800 	.word	0x40023800
 8005718:	04003010 	.word	0x04003010
 800571c:	24003000 	.word	0x24003000
 8005720:	2000008c 	.word	0x2000008c
 8005724:	00f42400 	.word	0x00f42400
 8005728:	20000094 	.word	0x20000094

0800572c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e041      	b.n	80057c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fc facc 	bl	8001cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f000 f9fe 	bl	8005b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d001      	beq.n	80057e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e04e      	b.n	8005882 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a23      	ldr	r2, [pc, #140]	; (8005890 <HAL_TIM_Base_Start_IT+0xc4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d022      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580e:	d01d      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <HAL_TIM_Base_Start_IT+0xc8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d018      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <HAL_TIM_Base_Start_IT+0xcc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1c      	ldr	r2, [pc, #112]	; (800589c <HAL_TIM_Base_Start_IT+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00e      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d111      	bne.n	8005870 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b06      	cmp	r3, #6
 800585c:	d010      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586e:	e007      	b.n	8005880 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40010400 	.word	0x40010400
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40001800 	.word	0x40001800

080058ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0201 	bic.w	r2, r2, #1
 80058c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6a1a      	ldr	r2, [r3, #32]
 80058ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10f      	bne.n	80058f4 <HAL_TIM_Base_Stop_IT+0x48>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6a1a      	ldr	r2, [r3, #32]
 80058da:	f240 4344 	movw	r3, #1092	; 0x444
 80058de:	4013      	ands	r3, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d107      	bne.n	80058f4 <HAL_TIM_Base_Stop_IT+0x48>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d122      	bne.n	8005966 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b02      	cmp	r3, #2
 800592c:	d11b      	bne.n	8005966 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f06f 0202 	mvn.w	r2, #2
 8005936:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f8ee 	bl	8005b2e <HAL_TIM_IC_CaptureCallback>
 8005952:	e005      	b.n	8005960 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8e0 	bl	8005b1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f8f1 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b04      	cmp	r3, #4
 8005972:	d122      	bne.n	80059ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b04      	cmp	r3, #4
 8005980:	d11b      	bne.n	80059ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f06f 0204 	mvn.w	r2, #4
 800598a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f8c4 	bl	8005b2e <HAL_TIM_IC_CaptureCallback>
 80059a6:	e005      	b.n	80059b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f8b6 	bl	8005b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f8c7 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d122      	bne.n	8005a0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d11b      	bne.n	8005a0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f06f 0208 	mvn.w	r2, #8
 80059de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2204      	movs	r2, #4
 80059e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f89a 	bl	8005b2e <HAL_TIM_IC_CaptureCallback>
 80059fa:	e005      	b.n	8005a08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f88c 	bl	8005b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f89d 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d122      	bne.n	8005a62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b10      	cmp	r3, #16
 8005a28:	d11b      	bne.n	8005a62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f06f 0210 	mvn.w	r2, #16
 8005a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2208      	movs	r2, #8
 8005a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f870 	bl	8005b2e <HAL_TIM_IC_CaptureCallback>
 8005a4e:	e005      	b.n	8005a5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f862 	bl	8005b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f873 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d10e      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d107      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f06f 0201 	mvn.w	r2, #1
 8005a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7fc f959 	bl	8001d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	2b80      	cmp	r3, #128	; 0x80
 8005a9a:	d10e      	bne.n	8005aba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d107      	bne.n	8005aba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f97f 	bl	8005db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d10e      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d107      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f838 	bl	8005b56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d10e      	bne.n	8005b12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d107      	bne.n	8005b12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f06f 0220 	mvn.w	r2, #32
 8005b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f949 	bl	8005da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a40      	ldr	r2, [pc, #256]	; (8005c80 <TIM_Base_SetConfig+0x114>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d013      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8a:	d00f      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a3d      	ldr	r2, [pc, #244]	; (8005c84 <TIM_Base_SetConfig+0x118>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00b      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3c      	ldr	r2, [pc, #240]	; (8005c88 <TIM_Base_SetConfig+0x11c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d007      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3b      	ldr	r2, [pc, #236]	; (8005c8c <TIM_Base_SetConfig+0x120>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3a      	ldr	r2, [pc, #232]	; (8005c90 <TIM_Base_SetConfig+0x124>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d108      	bne.n	8005bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2f      	ldr	r2, [pc, #188]	; (8005c80 <TIM_Base_SetConfig+0x114>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d02b      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bcc:	d027      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2c      	ldr	r2, [pc, #176]	; (8005c84 <TIM_Base_SetConfig+0x118>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d023      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2b      	ldr	r2, [pc, #172]	; (8005c88 <TIM_Base_SetConfig+0x11c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01f      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2a      	ldr	r2, [pc, #168]	; (8005c8c <TIM_Base_SetConfig+0x120>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01b      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a29      	ldr	r2, [pc, #164]	; (8005c90 <TIM_Base_SetConfig+0x124>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d017      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a28      	ldr	r2, [pc, #160]	; (8005c94 <TIM_Base_SetConfig+0x128>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a27      	ldr	r2, [pc, #156]	; (8005c98 <TIM_Base_SetConfig+0x12c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00f      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a26      	ldr	r2, [pc, #152]	; (8005c9c <TIM_Base_SetConfig+0x130>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00b      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a25      	ldr	r2, [pc, #148]	; (8005ca0 <TIM_Base_SetConfig+0x134>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d007      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a24      	ldr	r2, [pc, #144]	; (8005ca4 <TIM_Base_SetConfig+0x138>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a23      	ldr	r2, [pc, #140]	; (8005ca8 <TIM_Base_SetConfig+0x13c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d108      	bne.n	8005c30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <TIM_Base_SetConfig+0x114>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0xf8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a0c      	ldr	r2, [pc, #48]	; (8005c90 <TIM_Base_SetConfig+0x124>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d103      	bne.n	8005c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	615a      	str	r2, [r3, #20]
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	40010400 	.word	0x40010400
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40014400 	.word	0x40014400
 8005c9c:	40014800 	.word	0x40014800
 8005ca0:	40001800 	.word	0x40001800
 8005ca4:	40001c00 	.word	0x40001c00
 8005ca8:	40002000 	.word	0x40002000

08005cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e05a      	b.n	8005d7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d022      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d10:	d01d      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d018      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d10c      	bne.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800
 8005d94:	40000c00 	.word	0x40000c00
 8005d98:	40010400 	.word	0x40010400
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	40001800 	.word	0x40001800

08005da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e03f      	b.n	8005e5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fc f83a 	bl	8001e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2224      	movs	r2, #36	; 0x24
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fe05 	bl	8006a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695a      	ldr	r2, [r3, #20]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	4613      	mov	r3, r2
 8005e72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d130      	bne.n	8005ee2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_UART_Transmit_IT+0x26>
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e029      	b.n	8005ee4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Transmit_IT+0x38>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e022      	b.n	8005ee4 <HAL_UART_Transmit_IT+0x7e>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	88fa      	ldrh	r2, [r7, #6]
 8005eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2221      	movs	r2, #33	; 0x21
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005edc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e000      	b.n	8005ee4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005ee2:	2302      	movs	r3, #2
  }
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	4613      	mov	r3, r2
 8005efc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d11d      	bne.n	8005f46 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_UART_Receive_IT+0x26>
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e016      	b.n	8005f48 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_UART_Receive_IT+0x38>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e00f      	b.n	8005f48 <HAL_UART_Receive_IT+0x58>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fb97 	bl	8006670 <UART_Start_Receive_IT>
 8005f42:	4603      	mov	r3, r0
 8005f44:	e000      	b.n	8005f48 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f46:	2302      	movs	r3, #2
  }
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b0a0      	sub	sp, #128	; 0x80
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f6a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8005f6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f78:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f7a:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005f7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f80:	e841 2300 	strex	r3, r2, [r1]
 8005f84:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e5      	bne.n	8005f58 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3314      	adds	r3, #20
 8005f92:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3314      	adds	r3, #20
 8005faa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fac:	657a      	str	r2, [r7, #84]	; 0x54
 8005fae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e5      	bne.n	8005f8c <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d119      	bne.n	8005ffc <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	f023 0310 	bic.w	r3, r3, #16
 8005fde:	677b      	str	r3, [r7, #116]	; 0x74
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	330c      	adds	r3, #12
 8005fe6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005fe8:	643a      	str	r2, [r7, #64]	; 0x40
 8005fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e5      	bne.n	8005fc8 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b80      	cmp	r3, #128	; 0x80
 8006008:	d136      	bne.n	8006078 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3314      	adds	r3, #20
 8006010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	61fb      	str	r3, [r7, #28]
   return(result);
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006020:	673b      	str	r3, [r7, #112]	; 0x70
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800602a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e5      	bne.n	800600a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006042:	2b00      	cmp	r3, #0
 8006044:	d018      	beq.n	8006078 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	2200      	movs	r2, #0
 800604c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	4618      	mov	r0, r3
 8006054:	f7fc fe3d 	bl	8002cd2 <HAL_DMA_Abort>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00c      	beq.n	8006078 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	4618      	mov	r0, r3
 8006064:	f7fc fec7 	bl	8002df6 <HAL_DMA_GetError>
 8006068:	4603      	mov	r3, r0
 800606a:	2b20      	cmp	r3, #32
 800606c:	d104      	bne.n	8006078 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2210      	movs	r2, #16
 8006072:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e052      	b.n	800611e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d136      	bne.n	80060f4 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3314      	adds	r3, #20
 800608c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	60bb      	str	r3, [r7, #8]
   return(result);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3314      	adds	r3, #20
 80060a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060a6:	61ba      	str	r2, [r7, #24]
 80060a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	613b      	str	r3, [r7, #16]
   return(result);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e5      	bne.n	8006086 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d018      	beq.n	80060f4 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	2200      	movs	r2, #0
 80060c8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fc fdff 	bl	8002cd2 <HAL_DMA_Abort>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00c      	beq.n	80060f4 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fc fe89 	bl	8002df6 <HAL_DMA_GetError>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d104      	bne.n	80060f4 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2210      	movs	r2, #16
 80060ee:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e014      	b.n	800611e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3780      	adds	r7, #128	; 0x80
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b0ba      	sub	sp, #232	; 0xe8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800614e:	2300      	movs	r3, #0
 8006150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10f      	bne.n	800618e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_UART_IRQHandler+0x66>
 800617a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fb8f 	bl	80068aa <UART_Receive_IT>
      return;
 800618c:	e256      	b.n	800663c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800618e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80de 	beq.w	8006354 <HAL_UART_IRQHandler+0x22c>
 8006198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80d1 	beq.w	8006354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00b      	beq.n	80061d6 <HAL_UART_IRQHandler+0xae>
 80061be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f043 0201 	orr.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <HAL_UART_IRQHandler+0xd2>
 80061e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f043 0202 	orr.w	r2, r3, #2
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <HAL_UART_IRQHandler+0xf6>
 8006206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	f043 0204 	orr.w	r2, r3, #4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800621e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d011      	beq.n	800624e <HAL_UART_IRQHandler+0x126>
 800622a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d105      	bne.n	8006242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0208 	orr.w	r2, r3, #8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 81ed 	beq.w	8006632 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_UART_IRQHandler+0x14e>
 8006264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fb1a 	bl	80068aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <HAL_UART_IRQHandler+0x17a>
 800629a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d04f      	beq.n	8006342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa22 	bl	80066ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d141      	bne.n	800633a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3314      	adds	r3, #20
 80062bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3314      	adds	r3, #20
 80062de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1d9      	bne.n	80062b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	2b00      	cmp	r3, #0
 8006308:	d013      	beq.n	8006332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	4a7d      	ldr	r2, [pc, #500]	; (8006504 <HAL_UART_IRQHandler+0x3dc>)
 8006310:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	4618      	mov	r0, r3
 8006318:	f7fc fd4b 	bl	8002db2 <HAL_DMA_Abort_IT>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d016      	beq.n	8006350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800632c:	4610      	mov	r0, r2
 800632e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	e00e      	b.n	8006350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f986 	bl	8006644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	e00a      	b.n	8006350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f982 	bl	8006644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	e006      	b.n	8006350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f97e 	bl	8006644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800634e:	e170      	b.n	8006632 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006350:	bf00      	nop
    return;
 8006352:	e16e      	b.n	8006632 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	2b01      	cmp	r3, #1
 800635a:	f040 814a 	bne.w	80065f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800635e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 8143 	beq.w	80065f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800636c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 813c 	beq.w	80065f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639a:	2b40      	cmp	r3, #64	; 0x40
 800639c:	f040 80b4 	bne.w	8006508 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8140 	beq.w	8006636 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063be:	429a      	cmp	r2, r3
 80063c0:	f080 8139 	bcs.w	8006636 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d6:	f000 8088 	beq.w	80064ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006406:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800640a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800641e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1d9      	bne.n	80063da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3314      	adds	r3, #20
 800642c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3314      	adds	r3, #20
 8006446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800644a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800644e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800645c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e1      	bne.n	8006426 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3314      	adds	r3, #20
 8006482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006486:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006488:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800648c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e3      	bne.n	8006462 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ba:	f023 0310 	bic.w	r3, r3, #16
 80064be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80064ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e3      	bne.n	80064a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fc fbf4 	bl	8002cd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8ac 	bl	8006658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006500:	e099      	b.n	8006636 <HAL_UART_IRQHandler+0x50e>
 8006502:	bf00      	nop
 8006504:	080067b3 	.word	0x080067b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006510:	b29b      	uxth	r3, r3
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 808b 	beq.w	800663a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 8086 	beq.w	800663a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330c      	adds	r3, #12
 8006534:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006544:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006552:	647a      	str	r2, [r7, #68]	; 0x44
 8006554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e3      	bne.n	800652e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3314      	adds	r3, #20
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	623b      	str	r3, [r7, #32]
   return(result);
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	f023 0301 	bic.w	r3, r3, #1
 800657c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3314      	adds	r3, #20
 8006586:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800658a:	633a      	str	r2, [r7, #48]	; 0x30
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e3      	bne.n	8006566 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0310 	bic.w	r3, r3, #16
 80065c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065d0:	61fa      	str	r2, [r7, #28]
 80065d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	69b9      	ldr	r1, [r7, #24]
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	617b      	str	r3, [r7, #20]
   return(result);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e3      	bne.n	80065ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f834 	bl	8006658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065f0:	e023      	b.n	800663a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <HAL_UART_IRQHandler+0x4ea>
 80065fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8e5 	bl	80067da <UART_Transmit_IT>
    return;
 8006610:	e014      	b.n	800663c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00e      	beq.n	800663c <HAL_UART_IRQHandler+0x514>
 800661e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d008      	beq.n	800663c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f925 	bl	800687a <UART_EndTransmit_IT>
    return;
 8006630:	e004      	b.n	800663c <HAL_UART_IRQHandler+0x514>
    return;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <HAL_UART_IRQHandler+0x514>
      return;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <HAL_UART_IRQHandler+0x514>
      return;
 800663a:	bf00      	nop
  }
}
 800663c:	37e8      	adds	r7, #232	; 0xe8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop

08006644 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	88fa      	ldrh	r2, [r7, #6]
 8006688:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	88fa      	ldrh	r2, [r7, #6]
 800668e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2222      	movs	r2, #34	; 0x22
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695a      	ldr	r2, [r3, #20]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0201 	orr.w	r2, r2, #1
 80066cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 0220 	orr.w	r2, r2, #32
 80066dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b095      	sub	sp, #84	; 0x54
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	330c      	adds	r3, #12
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800670a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006714:	643a      	str	r2, [r7, #64]	; 0x40
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800671a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e5      	bne.n	80066f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3314      	adds	r3, #20
 800672e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	61fb      	str	r3, [r7, #28]
   return(result);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f023 0301 	bic.w	r3, r3, #1
 800673e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3314      	adds	r3, #20
 8006746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006748:	62fa      	str	r2, [r7, #44]	; 0x2c
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800674e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e5      	bne.n	8006728 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	2b01      	cmp	r3, #1
 8006762:	d119      	bne.n	8006798 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	60bb      	str	r3, [r7, #8]
   return(result);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f023 0310 	bic.w	r3, r3, #16
 800677a:	647b      	str	r3, [r7, #68]	; 0x44
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006784:	61ba      	str	r2, [r7, #24]
 8006786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6979      	ldr	r1, [r7, #20]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	613b      	str	r3, [r7, #16]
   return(result);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e5      	bne.n	8006764 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067a6:	bf00      	nop
 80067a8:	3754      	adds	r7, #84	; 0x54
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff ff39 	bl	8006644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b21      	cmp	r3, #33	; 0x21
 80067ec:	d13e      	bne.n	800686c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f6:	d114      	bne.n	8006822 <UART_Transmit_IT+0x48>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d110      	bne.n	8006822 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006814:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	1c9a      	adds	r2, r3, #2
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	621a      	str	r2, [r3, #32]
 8006820:	e008      	b.n	8006834 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	1c59      	adds	r1, r3, #1
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6211      	str	r1, [r2, #32]
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006838:	b29b      	uxth	r3, r3
 800683a:	3b01      	subs	r3, #1
 800683c:	b29b      	uxth	r3, r3
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	4619      	mov	r1, r3
 8006842:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10f      	bne.n	8006868 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006856:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006866:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	e000      	b.n	800686e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800686c:	2302      	movs	r3, #2
  }
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006890:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fb fa7a 	bl	8001d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b08c      	sub	sp, #48	; 0x30
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b22      	cmp	r3, #34	; 0x22
 80068bc:	f040 80ab 	bne.w	8006a16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c8:	d117      	bne.n	80068fa <UART_Receive_IT+0x50>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d113      	bne.n	80068fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	1c9a      	adds	r2, r3, #2
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	629a      	str	r2, [r3, #40]	; 0x28
 80068f8:	e026      	b.n	8006948 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690c:	d007      	beq.n	800691e <UART_Receive_IT+0x74>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <UART_Receive_IT+0x82>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	b2da      	uxtb	r2, r3
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	e008      	b.n	800693e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006938:	b2da      	uxtb	r2, r3
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29b      	uxth	r3, r3
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4619      	mov	r1, r3
 8006956:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006958:	2b00      	cmp	r3, #0
 800695a:	d15a      	bne.n	8006a12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0220 	bic.w	r2, r2, #32
 800696a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800697a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695a      	ldr	r2, [r3, #20]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0201 	bic.w	r2, r2, #1
 800698a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006998:	2b01      	cmp	r3, #1
 800699a:	d135      	bne.n	8006a08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	613b      	str	r3, [r7, #16]
   return(result);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f023 0310 	bic.w	r3, r3, #16
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	330c      	adds	r3, #12
 80069c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c2:	623a      	str	r2, [r7, #32]
 80069c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	69f9      	ldr	r1, [r7, #28]
 80069c8:	6a3a      	ldr	r2, [r7, #32]
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e5      	bne.n	80069a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	d10a      	bne.n	80069fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fe29 	bl	8006658 <HAL_UARTEx_RxEventCallback>
 8006a06:	e002      	b.n	8006a0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7fb f9e3 	bl	8001dd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e002      	b.n	8006a18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e000      	b.n	8006a18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a16:	2302      	movs	r3, #2
  }
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3730      	adds	r7, #48	; 0x30
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a24:	b0c0      	sub	sp, #256	; 0x100
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	68d9      	ldr	r1, [r3, #12]
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	ea40 0301 	orr.w	r3, r0, r1
 8006a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a78:	f021 010c 	bic.w	r1, r1, #12
 8006a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a86:	430b      	orrs	r3, r1
 8006a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9a:	6999      	ldr	r1, [r3, #24]
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	ea40 0301 	orr.w	r3, r0, r1
 8006aa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4b8f      	ldr	r3, [pc, #572]	; (8006cec <UART_SetConfig+0x2cc>)
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d005      	beq.n	8006ac0 <UART_SetConfig+0xa0>
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b8d      	ldr	r3, [pc, #564]	; (8006cf0 <UART_SetConfig+0x2d0>)
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d104      	bne.n	8006aca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ac0:	f7fe fd28 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 8006ac4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ac8:	e003      	b.n	8006ad2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006aca:	f7fe fd0f 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8006ace:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006adc:	f040 810c 	bne.w	8006cf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006aea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006aee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006af2:	4622      	mov	r2, r4
 8006af4:	462b      	mov	r3, r5
 8006af6:	1891      	adds	r1, r2, r2
 8006af8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006afa:	415b      	adcs	r3, r3
 8006afc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006afe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b02:	4621      	mov	r1, r4
 8006b04:	eb12 0801 	adds.w	r8, r2, r1
 8006b08:	4629      	mov	r1, r5
 8006b0a:	eb43 0901 	adc.w	r9, r3, r1
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b22:	4690      	mov	r8, r2
 8006b24:	4699      	mov	r9, r3
 8006b26:	4623      	mov	r3, r4
 8006b28:	eb18 0303 	adds.w	r3, r8, r3
 8006b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b30:	462b      	mov	r3, r5
 8006b32:	eb49 0303 	adc.w	r3, r9, r3
 8006b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b4e:	460b      	mov	r3, r1
 8006b50:	18db      	adds	r3, r3, r3
 8006b52:	653b      	str	r3, [r7, #80]	; 0x50
 8006b54:	4613      	mov	r3, r2
 8006b56:	eb42 0303 	adc.w	r3, r2, r3
 8006b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b64:	f7f9 fbac 	bl	80002c0 <__aeabi_uldivmod>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4b61      	ldr	r3, [pc, #388]	; (8006cf4 <UART_SetConfig+0x2d4>)
 8006b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	011c      	lsls	r4, r3, #4
 8006b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b88:	4642      	mov	r2, r8
 8006b8a:	464b      	mov	r3, r9
 8006b8c:	1891      	adds	r1, r2, r2
 8006b8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b90:	415b      	adcs	r3, r3
 8006b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b98:	4641      	mov	r1, r8
 8006b9a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006bb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bb8:	4692      	mov	sl, r2
 8006bba:	469b      	mov	fp, r3
 8006bbc:	4643      	mov	r3, r8
 8006bbe:	eb1a 0303 	adds.w	r3, sl, r3
 8006bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bc6:	464b      	mov	r3, r9
 8006bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8006bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006be0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006be4:	460b      	mov	r3, r1
 8006be6:	18db      	adds	r3, r3, r3
 8006be8:	643b      	str	r3, [r7, #64]	; 0x40
 8006bea:	4613      	mov	r3, r2
 8006bec:	eb42 0303 	adc.w	r3, r2, r3
 8006bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006bfa:	f7f9 fb61 	bl	80002c0 <__aeabi_uldivmod>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4611      	mov	r1, r2
 8006c04:	4b3b      	ldr	r3, [pc, #236]	; (8006cf4 <UART_SetConfig+0x2d4>)
 8006c06:	fba3 2301 	umull	r2, r3, r3, r1
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	2264      	movs	r2, #100	; 0x64
 8006c0e:	fb02 f303 	mul.w	r3, r2, r3
 8006c12:	1acb      	subs	r3, r1, r3
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c1a:	4b36      	ldr	r3, [pc, #216]	; (8006cf4 <UART_SetConfig+0x2d4>)
 8006c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c28:	441c      	add	r4, r3
 8006c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	464b      	mov	r3, r9
 8006c40:	1891      	adds	r1, r2, r2
 8006c42:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c44:	415b      	adcs	r3, r3
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c4c:	4641      	mov	r1, r8
 8006c4e:	1851      	adds	r1, r2, r1
 8006c50:	6339      	str	r1, [r7, #48]	; 0x30
 8006c52:	4649      	mov	r1, r9
 8006c54:	414b      	adcs	r3, r1
 8006c56:	637b      	str	r3, [r7, #52]	; 0x34
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c64:	4659      	mov	r1, fp
 8006c66:	00cb      	lsls	r3, r1, #3
 8006c68:	4651      	mov	r1, sl
 8006c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c6e:	4651      	mov	r1, sl
 8006c70:	00ca      	lsls	r2, r1, #3
 8006c72:	4610      	mov	r0, r2
 8006c74:	4619      	mov	r1, r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	4642      	mov	r2, r8
 8006c7a:	189b      	adds	r3, r3, r2
 8006c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c80:	464b      	mov	r3, r9
 8006c82:	460a      	mov	r2, r1
 8006c84:	eb42 0303 	adc.w	r3, r2, r3
 8006c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	18db      	adds	r3, r3, r3
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	eb42 0303 	adc.w	r3, r2, r3
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006cb6:	f7f9 fb03 	bl	80002c0 <__aeabi_uldivmod>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <UART_SetConfig+0x2d4>)
 8006cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	2164      	movs	r1, #100	; 0x64
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	3332      	adds	r3, #50	; 0x32
 8006cd2:	4a08      	ldr	r2, [pc, #32]	; (8006cf4 <UART_SetConfig+0x2d4>)
 8006cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	f003 0207 	and.w	r2, r3, #7
 8006cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4422      	add	r2, r4
 8006ce6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ce8:	e105      	b.n	8006ef6 <UART_SetConfig+0x4d6>
 8006cea:	bf00      	nop
 8006cec:	40011000 	.word	0x40011000
 8006cf0:	40011400 	.word	0x40011400
 8006cf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d0a:	4642      	mov	r2, r8
 8006d0c:	464b      	mov	r3, r9
 8006d0e:	1891      	adds	r1, r2, r2
 8006d10:	6239      	str	r1, [r7, #32]
 8006d12:	415b      	adcs	r3, r3
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
 8006d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d1a:	4641      	mov	r1, r8
 8006d1c:	1854      	adds	r4, r2, r1
 8006d1e:	4649      	mov	r1, r9
 8006d20:	eb43 0501 	adc.w	r5, r3, r1
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	00eb      	lsls	r3, r5, #3
 8006d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d32:	00e2      	lsls	r2, r4, #3
 8006d34:	4614      	mov	r4, r2
 8006d36:	461d      	mov	r5, r3
 8006d38:	4643      	mov	r3, r8
 8006d3a:	18e3      	adds	r3, r4, r3
 8006d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d40:	464b      	mov	r3, r9
 8006d42:	eb45 0303 	adc.w	r3, r5, r3
 8006d46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d66:	4629      	mov	r1, r5
 8006d68:	008b      	lsls	r3, r1, #2
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d70:	4621      	mov	r1, r4
 8006d72:	008a      	lsls	r2, r1, #2
 8006d74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d78:	f7f9 faa2 	bl	80002c0 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4b60      	ldr	r3, [pc, #384]	; (8006f04 <UART_SetConfig+0x4e4>)
 8006d82:	fba3 2302 	umull	r2, r3, r3, r2
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	011c      	lsls	r4, r3, #4
 8006d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	1891      	adds	r1, r2, r2
 8006da2:	61b9      	str	r1, [r7, #24]
 8006da4:	415b      	adcs	r3, r3
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dac:	4641      	mov	r1, r8
 8006dae:	1851      	adds	r1, r2, r1
 8006db0:	6139      	str	r1, [r7, #16]
 8006db2:	4649      	mov	r1, r9
 8006db4:	414b      	adcs	r3, r1
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	00cb      	lsls	r3, r1, #3
 8006dc8:	4651      	mov	r1, sl
 8006dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dce:	4651      	mov	r1, sl
 8006dd0:	00ca      	lsls	r2, r1, #3
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	4642      	mov	r2, r8
 8006dda:	189b      	adds	r3, r3, r2
 8006ddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006de0:	464b      	mov	r3, r9
 8006de2:	460a      	mov	r2, r1
 8006de4:	eb42 0303 	adc.w	r3, r2, r3
 8006de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006df6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e04:	4649      	mov	r1, r9
 8006e06:	008b      	lsls	r3, r1, #2
 8006e08:	4641      	mov	r1, r8
 8006e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e0e:	4641      	mov	r1, r8
 8006e10:	008a      	lsls	r2, r1, #2
 8006e12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e16:	f7f9 fa53 	bl	80002c0 <__aeabi_uldivmod>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4b39      	ldr	r3, [pc, #228]	; (8006f04 <UART_SetConfig+0x4e4>)
 8006e20:	fba3 1302 	umull	r1, r3, r3, r2
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	2164      	movs	r1, #100	; 0x64
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	3332      	adds	r3, #50	; 0x32
 8006e32:	4a34      	ldr	r2, [pc, #208]	; (8006f04 <UART_SetConfig+0x4e4>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e3e:	441c      	add	r4, r3
 8006e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e44:	2200      	movs	r2, #0
 8006e46:	673b      	str	r3, [r7, #112]	; 0x70
 8006e48:	677a      	str	r2, [r7, #116]	; 0x74
 8006e4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e4e:	4642      	mov	r2, r8
 8006e50:	464b      	mov	r3, r9
 8006e52:	1891      	adds	r1, r2, r2
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	415b      	adcs	r3, r3
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e5e:	4641      	mov	r1, r8
 8006e60:	1851      	adds	r1, r2, r1
 8006e62:	6039      	str	r1, [r7, #0]
 8006e64:	4649      	mov	r1, r9
 8006e66:	414b      	adcs	r3, r1
 8006e68:	607b      	str	r3, [r7, #4]
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e76:	4659      	mov	r1, fp
 8006e78:	00cb      	lsls	r3, r1, #3
 8006e7a:	4651      	mov	r1, sl
 8006e7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e80:	4651      	mov	r1, sl
 8006e82:	00ca      	lsls	r2, r1, #3
 8006e84:	4610      	mov	r0, r2
 8006e86:	4619      	mov	r1, r3
 8006e88:	4603      	mov	r3, r0
 8006e8a:	4642      	mov	r2, r8
 8006e8c:	189b      	adds	r3, r3, r2
 8006e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e90:	464b      	mov	r3, r9
 8006e92:	460a      	mov	r2, r1
 8006e94:	eb42 0303 	adc.w	r3, r2, r3
 8006e98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ea4:	667a      	str	r2, [r7, #100]	; 0x64
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	f04f 0300 	mov.w	r3, #0
 8006eae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	008b      	lsls	r3, r1, #2
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	008a      	lsls	r2, r1, #2
 8006ec0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ec4:	f7f9 f9fc 	bl	80002c0 <__aeabi_uldivmod>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <UART_SetConfig+0x4e4>)
 8006ece:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	2164      	movs	r1, #100	; 0x64
 8006ed6:	fb01 f303 	mul.w	r3, r1, r3
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	3332      	adds	r3, #50	; 0x32
 8006ee0:	4a08      	ldr	r2, [pc, #32]	; (8006f04 <UART_SetConfig+0x4e4>)
 8006ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	f003 020f 	and.w	r2, r3, #15
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4422      	add	r2, r4
 8006ef4:	609a      	str	r2, [r3, #8]
}
 8006ef6:	bf00      	nop
 8006ef8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006efc:	46bd      	mov	sp, r7
 8006efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f02:	bf00      	nop
 8006f04:	51eb851f 	.word	0x51eb851f

08006f08 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 198;
 8006f0e:	4b8d      	ldr	r3, [pc, #564]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f10:	22c6      	movs	r2, #198	; 0xc6
 8006f12:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 162;
 8006f14:	4b8b      	ldr	r3, [pc, #556]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f16:	22a2      	movs	r2, #162	; 0xa2
 8006f18:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8006f1a:	4b8a      	ldr	r3, [pc, #552]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 193;
 8006f20:	4b88      	ldr	r3, [pc, #544]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f22:	22c1      	movs	r2, #193	; 0xc1
 8006f24:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006f26:	4b88      	ldr	r3, [pc, #544]	; (8007148 <MX_LWIP_Init+0x240>)
 8006f28:	22ff      	movs	r2, #255	; 0xff
 8006f2a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006f2c:	4b86      	ldr	r3, [pc, #536]	; (8007148 <MX_LWIP_Init+0x240>)
 8006f2e:	22ff      	movs	r2, #255	; 0xff
 8006f30:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006f32:	4b85      	ldr	r3, [pc, #532]	; (8007148 <MX_LWIP_Init+0x240>)
 8006f34:	22ff      	movs	r2, #255	; 0xff
 8006f36:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006f38:	4b83      	ldr	r3, [pc, #524]	; (8007148 <MX_LWIP_Init+0x240>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006f3e:	4b83      	ldr	r3, [pc, #524]	; (800714c <MX_LWIP_Init+0x244>)
 8006f40:	22c0      	movs	r2, #192	; 0xc0
 8006f42:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006f44:	4b81      	ldr	r3, [pc, #516]	; (800714c <MX_LWIP_Init+0x244>)
 8006f46:	22a8      	movs	r2, #168	; 0xa8
 8006f48:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8006f4a:	4b80      	ldr	r3, [pc, #512]	; (800714c <MX_LWIP_Init+0x244>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006f50:	4b7e      	ldr	r3, [pc, #504]	; (800714c <MX_LWIP_Init+0x244>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006f56:	f000 fddb 	bl	8007b10 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006f5a:	4b7a      	ldr	r3, [pc, #488]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	061a      	lsls	r2, r3, #24
 8006f60:	4b78      	ldr	r3, [pc, #480]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f62:	785b      	ldrb	r3, [r3, #1]
 8006f64:	041b      	lsls	r3, r3, #16
 8006f66:	431a      	orrs	r2, r3
 8006f68:	4b76      	ldr	r3, [pc, #472]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f6a:	789b      	ldrb	r3, [r3, #2]
 8006f6c:	021b      	lsls	r3, r3, #8
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	4a74      	ldr	r2, [pc, #464]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f72:	78d2      	ldrb	r2, [r2, #3]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	061a      	lsls	r2, r3, #24
 8006f78:	4b72      	ldr	r3, [pc, #456]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	0619      	lsls	r1, r3, #24
 8006f7e:	4b71      	ldr	r3, [pc, #452]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	041b      	lsls	r3, r3, #16
 8006f84:	4319      	orrs	r1, r3
 8006f86:	4b6f      	ldr	r3, [pc, #444]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f88:	789b      	ldrb	r3, [r3, #2]
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	496d      	ldr	r1, [pc, #436]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f90:	78c9      	ldrb	r1, [r1, #3]
 8006f92:	430b      	orrs	r3, r1
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	4b69      	ldr	r3, [pc, #420]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	0619      	lsls	r1, r3, #24
 8006fa2:	4b68      	ldr	r3, [pc, #416]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	041b      	lsls	r3, r3, #16
 8006fa8:	4319      	orrs	r1, r3
 8006faa:	4b66      	ldr	r3, [pc, #408]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006fac:	789b      	ldrb	r3, [r3, #2]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	4964      	ldr	r1, [pc, #400]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006fb4:	78c9      	ldrb	r1, [r1, #3]
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	0a1b      	lsrs	r3, r3, #8
 8006fba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	4b60      	ldr	r3, [pc, #384]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	0619      	lsls	r1, r3, #24
 8006fc6:	4b5f      	ldr	r3, [pc, #380]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	041b      	lsls	r3, r3, #16
 8006fcc:	4319      	orrs	r1, r3
 8006fce:	4b5d      	ldr	r3, [pc, #372]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006fd0:	789b      	ldrb	r3, [r3, #2]
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	495b      	ldr	r1, [pc, #364]	; (8007144 <MX_LWIP_Init+0x23c>)
 8006fd8:	78c9      	ldrb	r1, [r1, #3]
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	0e1b      	lsrs	r3, r3, #24
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	4a5b      	ldr	r2, [pc, #364]	; (8007150 <MX_LWIP_Init+0x248>)
 8006fe2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006fe4:	4b58      	ldr	r3, [pc, #352]	; (8007148 <MX_LWIP_Init+0x240>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	061a      	lsls	r2, r3, #24
 8006fea:	4b57      	ldr	r3, [pc, #348]	; (8007148 <MX_LWIP_Init+0x240>)
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	041b      	lsls	r3, r3, #16
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	4b55      	ldr	r3, [pc, #340]	; (8007148 <MX_LWIP_Init+0x240>)
 8006ff4:	789b      	ldrb	r3, [r3, #2]
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	4a53      	ldr	r2, [pc, #332]	; (8007148 <MX_LWIP_Init+0x240>)
 8006ffc:	78d2      	ldrb	r2, [r2, #3]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	061a      	lsls	r2, r3, #24
 8007002:	4b51      	ldr	r3, [pc, #324]	; (8007148 <MX_LWIP_Init+0x240>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	0619      	lsls	r1, r3, #24
 8007008:	4b4f      	ldr	r3, [pc, #316]	; (8007148 <MX_LWIP_Init+0x240>)
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	4319      	orrs	r1, r3
 8007010:	4b4d      	ldr	r3, [pc, #308]	; (8007148 <MX_LWIP_Init+0x240>)
 8007012:	789b      	ldrb	r3, [r3, #2]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	430b      	orrs	r3, r1
 8007018:	494b      	ldr	r1, [pc, #300]	; (8007148 <MX_LWIP_Init+0x240>)
 800701a:	78c9      	ldrb	r1, [r1, #3]
 800701c:	430b      	orrs	r3, r1
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007024:	431a      	orrs	r2, r3
 8007026:	4b48      	ldr	r3, [pc, #288]	; (8007148 <MX_LWIP_Init+0x240>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	0619      	lsls	r1, r3, #24
 800702c:	4b46      	ldr	r3, [pc, #280]	; (8007148 <MX_LWIP_Init+0x240>)
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	041b      	lsls	r3, r3, #16
 8007032:	4319      	orrs	r1, r3
 8007034:	4b44      	ldr	r3, [pc, #272]	; (8007148 <MX_LWIP_Init+0x240>)
 8007036:	789b      	ldrb	r3, [r3, #2]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	430b      	orrs	r3, r1
 800703c:	4942      	ldr	r1, [pc, #264]	; (8007148 <MX_LWIP_Init+0x240>)
 800703e:	78c9      	ldrb	r1, [r1, #3]
 8007040:	430b      	orrs	r3, r1
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007048:	431a      	orrs	r2, r3
 800704a:	4b3f      	ldr	r3, [pc, #252]	; (8007148 <MX_LWIP_Init+0x240>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	0619      	lsls	r1, r3, #24
 8007050:	4b3d      	ldr	r3, [pc, #244]	; (8007148 <MX_LWIP_Init+0x240>)
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	041b      	lsls	r3, r3, #16
 8007056:	4319      	orrs	r1, r3
 8007058:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <MX_LWIP_Init+0x240>)
 800705a:	789b      	ldrb	r3, [r3, #2]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	430b      	orrs	r3, r1
 8007060:	4939      	ldr	r1, [pc, #228]	; (8007148 <MX_LWIP_Init+0x240>)
 8007062:	78c9      	ldrb	r1, [r1, #3]
 8007064:	430b      	orrs	r3, r1
 8007066:	0e1b      	lsrs	r3, r3, #24
 8007068:	4313      	orrs	r3, r2
 800706a:	4a3a      	ldr	r2, [pc, #232]	; (8007154 <MX_LWIP_Init+0x24c>)
 800706c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800706e:	4b37      	ldr	r3, [pc, #220]	; (800714c <MX_LWIP_Init+0x244>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	061a      	lsls	r2, r3, #24
 8007074:	4b35      	ldr	r3, [pc, #212]	; (800714c <MX_LWIP_Init+0x244>)
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	431a      	orrs	r2, r3
 800707c:	4b33      	ldr	r3, [pc, #204]	; (800714c <MX_LWIP_Init+0x244>)
 800707e:	789b      	ldrb	r3, [r3, #2]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	4313      	orrs	r3, r2
 8007084:	4a31      	ldr	r2, [pc, #196]	; (800714c <MX_LWIP_Init+0x244>)
 8007086:	78d2      	ldrb	r2, [r2, #3]
 8007088:	4313      	orrs	r3, r2
 800708a:	061a      	lsls	r2, r3, #24
 800708c:	4b2f      	ldr	r3, [pc, #188]	; (800714c <MX_LWIP_Init+0x244>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	0619      	lsls	r1, r3, #24
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <MX_LWIP_Init+0x244>)
 8007094:	785b      	ldrb	r3, [r3, #1]
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	4319      	orrs	r1, r3
 800709a:	4b2c      	ldr	r3, [pc, #176]	; (800714c <MX_LWIP_Init+0x244>)
 800709c:	789b      	ldrb	r3, [r3, #2]
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	430b      	orrs	r3, r1
 80070a2:	492a      	ldr	r1, [pc, #168]	; (800714c <MX_LWIP_Init+0x244>)
 80070a4:	78c9      	ldrb	r1, [r1, #3]
 80070a6:	430b      	orrs	r3, r1
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070ae:	431a      	orrs	r2, r3
 80070b0:	4b26      	ldr	r3, [pc, #152]	; (800714c <MX_LWIP_Init+0x244>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	0619      	lsls	r1, r3, #24
 80070b6:	4b25      	ldr	r3, [pc, #148]	; (800714c <MX_LWIP_Init+0x244>)
 80070b8:	785b      	ldrb	r3, [r3, #1]
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	4319      	orrs	r1, r3
 80070be:	4b23      	ldr	r3, [pc, #140]	; (800714c <MX_LWIP_Init+0x244>)
 80070c0:	789b      	ldrb	r3, [r3, #2]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	430b      	orrs	r3, r1
 80070c6:	4921      	ldr	r1, [pc, #132]	; (800714c <MX_LWIP_Init+0x244>)
 80070c8:	78c9      	ldrb	r1, [r1, #3]
 80070ca:	430b      	orrs	r3, r1
 80070cc:	0a1b      	lsrs	r3, r3, #8
 80070ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070d2:	431a      	orrs	r2, r3
 80070d4:	4b1d      	ldr	r3, [pc, #116]	; (800714c <MX_LWIP_Init+0x244>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	0619      	lsls	r1, r3, #24
 80070da:	4b1c      	ldr	r3, [pc, #112]	; (800714c <MX_LWIP_Init+0x244>)
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	4319      	orrs	r1, r3
 80070e2:	4b1a      	ldr	r3, [pc, #104]	; (800714c <MX_LWIP_Init+0x244>)
 80070e4:	789b      	ldrb	r3, [r3, #2]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	430b      	orrs	r3, r1
 80070ea:	4918      	ldr	r1, [pc, #96]	; (800714c <MX_LWIP_Init+0x244>)
 80070ec:	78c9      	ldrb	r1, [r1, #3]
 80070ee:	430b      	orrs	r3, r1
 80070f0:	0e1b      	lsrs	r3, r3, #24
 80070f2:	4313      	orrs	r3, r2
 80070f4:	4a18      	ldr	r2, [pc, #96]	; (8007158 <MX_LWIP_Init+0x250>)
 80070f6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80070f8:	4b18      	ldr	r3, [pc, #96]	; (800715c <MX_LWIP_Init+0x254>)
 80070fa:	9302      	str	r3, [sp, #8]
 80070fc:	4b18      	ldr	r3, [pc, #96]	; (8007160 <MX_LWIP_Init+0x258>)
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	2300      	movs	r3, #0
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	4b14      	ldr	r3, [pc, #80]	; (8007158 <MX_LWIP_Init+0x250>)
 8007106:	4a13      	ldr	r2, [pc, #76]	; (8007154 <MX_LWIP_Init+0x24c>)
 8007108:	4911      	ldr	r1, [pc, #68]	; (8007150 <MX_LWIP_Init+0x248>)
 800710a:	4816      	ldr	r0, [pc, #88]	; (8007164 <MX_LWIP_Init+0x25c>)
 800710c:	f001 f9e8 	bl	80084e0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007110:	4814      	ldr	r0, [pc, #80]	; (8007164 <MX_LWIP_Init+0x25c>)
 8007112:	f001 fb97 	bl	8008844 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007116:	4b13      	ldr	r3, [pc, #76]	; (8007164 <MX_LWIP_Init+0x25c>)
 8007118:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800711c:	089b      	lsrs	r3, r3, #2
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007128:	480e      	ldr	r0, [pc, #56]	; (8007164 <MX_LWIP_Init+0x25c>)
 800712a:	f001 fb9b 	bl	8008864 <netif_set_up>
 800712e:	e002      	b.n	8007136 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007130:	480c      	ldr	r0, [pc, #48]	; (8007164 <MX_LWIP_Init+0x25c>)
 8007132:	f001 fc03 	bl	800893c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007136:	490c      	ldr	r1, [pc, #48]	; (8007168 <MX_LWIP_Init+0x260>)
 8007138:	480a      	ldr	r0, [pc, #40]	; (8007164 <MX_LWIP_Init+0x25c>)
 800713a:	f001 fc95 	bl	8008a68 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800713e:	bf00      	nop
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000534 	.word	0x20000534
 8007148:	20000538 	.word	0x20000538
 800714c:	2000053c 	.word	0x2000053c
 8007150:	20000528 	.word	0x20000528
 8007154:	2000052c 	.word	0x2000052c
 8007158:	20000530 	.word	0x20000530
 800715c:	08012101 	.word	0x08012101
 8007160:	08007465 	.word	0x08007465
 8007164:	200004f4 	.word	0x200004f4
 8007168:	080071bd 	.word	0x080071bd

0800716c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8007174:	f7fb fc3a 	bl	80029ec <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	4b08      	ldr	r3, [pc, #32]	; (800719c <Ethernet_Link_Periodic_Handle+0x30>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b63      	cmp	r3, #99	; 0x63
 8007182:	d907      	bls.n	8007194 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8007184:	f7fb fc32 	bl	80029ec <HAL_GetTick>
 8007188:	4603      	mov	r3, r0
 800718a:	4a04      	ldr	r2, [pc, #16]	; (800719c <Ethernet_Link_Periodic_Handle+0x30>)
 800718c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fad8 	bl	8007744 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	200004f0 	.word	0x200004f0

080071a0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80071a4:	4804      	ldr	r0, [pc, #16]	; (80071b8 <MX_LWIP_Process+0x18>)
 80071a6:	f000 f93d 	bl	8007424 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80071aa:	f008 fb97 	bl	800f8dc <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80071ae:	4802      	ldr	r0, [pc, #8]	; (80071b8 <MX_LWIP_Process+0x18>)
 80071b0:	f7ff ffdc 	bl	800716c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80071b4:	bf00      	nop
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	200004f4 	.word	0x200004f4

080071bc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80071dc:	4b3f      	ldr	r3, [pc, #252]	; (80072dc <low_level_init+0x10c>)
 80071de:	4a40      	ldr	r2, [pc, #256]	; (80072e0 <low_level_init+0x110>)
 80071e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80071e2:	2300      	movs	r3, #0
 80071e4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80071e6:	2380      	movs	r3, #128	; 0x80
 80071e8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80071ea:	23e1      	movs	r3, #225	; 0xe1
 80071ec:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80071ee:	2300      	movs	r3, #0
 80071f0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80071f2:	2300      	movs	r3, #0
 80071f4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80071f6:	2300      	movs	r3, #0
 80071f8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80071fa:	4a38      	ldr	r2, [pc, #224]	; (80072dc <low_level_init+0x10c>)
 80071fc:	f107 0308 	add.w	r3, r7, #8
 8007200:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8007202:	4b36      	ldr	r3, [pc, #216]	; (80072dc <low_level_init+0x10c>)
 8007204:	2200      	movs	r2, #0
 8007206:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007208:	4b34      	ldr	r3, [pc, #208]	; (80072dc <low_level_init+0x10c>)
 800720a:	4a36      	ldr	r2, [pc, #216]	; (80072e4 <low_level_init+0x114>)
 800720c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800720e:	4b33      	ldr	r3, [pc, #204]	; (80072dc <low_level_init+0x10c>)
 8007210:	4a35      	ldr	r2, [pc, #212]	; (80072e8 <low_level_init+0x118>)
 8007212:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007214:	4b31      	ldr	r3, [pc, #196]	; (80072dc <low_level_init+0x10c>)
 8007216:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800721a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800721c:	482f      	ldr	r0, [pc, #188]	; (80072dc <low_level_init+0x10c>)
 800721e:	f7fb fdf7 	bl	8002e10 <HAL_ETH_Init>
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007226:	2238      	movs	r2, #56	; 0x38
 8007228:	2100      	movs	r1, #0
 800722a:	4830      	ldr	r0, [pc, #192]	; (80072ec <low_level_init+0x11c>)
 800722c:	f00b f8a2 	bl	8012374 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007230:	4b2e      	ldr	r3, [pc, #184]	; (80072ec <low_level_init+0x11c>)
 8007232:	2221      	movs	r2, #33	; 0x21
 8007234:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007236:	4b2d      	ldr	r3, [pc, #180]	; (80072ec <low_level_init+0x11c>)
 8007238:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800723c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800723e:	4b2b      	ldr	r3, [pc, #172]	; (80072ec <low_level_init+0x11c>)
 8007240:	2200      	movs	r2, #0
 8007242:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007244:	482a      	ldr	r0, [pc, #168]	; (80072f0 <low_level_init+0x120>)
 8007246:	f001 f813 	bl	8008270 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2206      	movs	r2, #6
 800724e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007252:	4b22      	ldr	r3, [pc, #136]	; (80072dc <low_level_init+0x10c>)
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	781a      	ldrb	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800725e:	4b1f      	ldr	r3, [pc, #124]	; (80072dc <low_level_init+0x10c>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	785a      	ldrb	r2, [r3, #1]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800726a:	4b1c      	ldr	r3, [pc, #112]	; (80072dc <low_level_init+0x10c>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	789a      	ldrb	r2, [r3, #2]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007276:	4b19      	ldr	r3, [pc, #100]	; (80072dc <low_level_init+0x10c>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	78da      	ldrb	r2, [r3, #3]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007282:	4b16      	ldr	r3, [pc, #88]	; (80072dc <low_level_init+0x10c>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	791a      	ldrb	r2, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800728e:	4b13      	ldr	r3, [pc, #76]	; (80072dc <low_level_init+0x10c>)
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	795a      	ldrb	r2, [r3, #5]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80072a0:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072a8:	f043 030a 	orr.w	r3, r3, #10
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80072b4:	490f      	ldr	r1, [pc, #60]	; (80072f4 <low_level_init+0x124>)
 80072b6:	4810      	ldr	r0, [pc, #64]	; (80072f8 <low_level_init+0x128>)
 80072b8:	f7fb f99d 	bl	80025f6 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80072bc:	480e      	ldr	r0, [pc, #56]	; (80072f8 <low_level_init+0x128>)
 80072be:	f7fb f9cc 	bl	800265a <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d103      	bne.n	80072d0 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fa3b 	bl	8007744 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80072ce:	e001      	b.n	80072d4 <low_level_init+0x104>
    Error_Handler();
 80072d0:	f7fa fa9d 	bl	800180e <Error_Handler>
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20005010 	.word	0x20005010
 80072e0:	40028000 	.word	0x40028000
 80072e4:	20004f70 	.word	0x20004f70
 80072e8:	20004ed0 	.word	0x20004ed0
 80072ec:	200050c0 	.word	0x200050c0
 80072f0:	08016500 	.word	0x08016500
 80072f4:	2000009c 	.word	0x2000009c
 80072f8:	200050f8 	.word	0x200050f8

080072fc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b092      	sub	sp, #72	; 0x48
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800730a:	2300      	movs	r3, #0
 800730c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007314:	f107 030c 	add.w	r3, r7, #12
 8007318:	2230      	movs	r2, #48	; 0x30
 800731a:	2100      	movs	r1, #0
 800731c:	4618      	mov	r0, r3
 800731e:	f00b f829 	bl	8012374 <memset>

  for(q = p; q != NULL; q = q->next)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	643b      	str	r3, [r7, #64]	; 0x40
 8007326:	e045      	b.n	80073b4 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800732a:	2b03      	cmp	r3, #3
 800732c:	d902      	bls.n	8007334 <low_level_output+0x38>
      return ERR_IF;
 800732e:	f06f 030b 	mvn.w	r3, #11
 8007332:	e055      	b.n	80073e0 <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 8007334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007336:	6859      	ldr	r1, [r3, #4]
 8007338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800733a:	4613      	mov	r3, r2
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	3348      	adds	r3, #72	; 0x48
 8007344:	443b      	add	r3, r7
 8007346:	3b3c      	subs	r3, #60	; 0x3c
 8007348:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800734a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800734c:	895b      	ldrh	r3, [r3, #10]
 800734e:	4619      	mov	r1, r3
 8007350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007352:	4613      	mov	r3, r2
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	3348      	adds	r3, #72	; 0x48
 800735c:	443b      	add	r3, r7
 800735e:	3b38      	subs	r3, #56	; 0x38
 8007360:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007364:	2b00      	cmp	r3, #0
 8007366:	d011      	beq.n	800738c <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800736a:	1e5a      	subs	r2, r3, #1
 800736c:	f107 000c 	add.w	r0, r7, #12
 8007370:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007372:	460b      	mov	r3, r1
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	440b      	add	r3, r1
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	18c1      	adds	r1, r0, r3
 800737c:	4613      	mov	r3, r2
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	3348      	adds	r3, #72	; 0x48
 8007386:	443b      	add	r3, r7
 8007388:	3b34      	subs	r3, #52	; 0x34
 800738a:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800738c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8007394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007396:	4613      	mov	r3, r2
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	3348      	adds	r3, #72	; 0x48
 80073a0:	443b      	add	r3, r7
 80073a2:	3b34      	subs	r3, #52	; 0x34
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
    }

    i++;
 80073a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073aa:	3301      	adds	r3, #1
 80073ac:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80073ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	643b      	str	r3, [r7, #64]	; 0x40
 80073b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1b6      	bne.n	8007328 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	891b      	ldrh	r3, [r3, #8]
 80073be:	461a      	mov	r2, r3
 80073c0:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <low_level_output+0xec>)
 80073c2:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80073c4:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <low_level_output+0xec>)
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80073cc:	4a06      	ldr	r2, [pc, #24]	; (80073e8 <low_level_output+0xec>)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80073d2:	2214      	movs	r2, #20
 80073d4:	4904      	ldr	r1, [pc, #16]	; (80073e8 <low_level_output+0xec>)
 80073d6:	4805      	ldr	r0, [pc, #20]	; (80073ec <low_level_output+0xf0>)
 80073d8:	f7fb fe50 	bl	800307c <HAL_ETH_Transmit>

  return errval;
 80073dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3748      	adds	r7, #72	; 0x48
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	200050c0 	.word	0x200050c0
 80073ec:	20005010 	.word	0x20005010

080073f0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80073fc:	4b07      	ldr	r3, [pc, #28]	; (800741c <low_level_input+0x2c>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d105      	bne.n	8007410 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007404:	f107 030c 	add.w	r3, r7, #12
 8007408:	4619      	mov	r1, r3
 800740a:	4805      	ldr	r0, [pc, #20]	; (8007420 <low_level_input+0x30>)
 800740c:	f7fb feca 	bl	80031a4 <HAL_ETH_ReadData>
  }

  return p;
 8007410:	68fb      	ldr	r3, [r7, #12]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	20004ec8 	.word	0x20004ec8
 8007420:	20005010 	.word	0x20005010

08007424 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff ffdd 	bl	80073f0 <low_level_input>
 8007436:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	4798      	blx	r3
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f001 fe8a 	bl	8009168 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1ea      	bne.n	8007430 <ethernetif_input+0xc>
}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <ethernetif_init+0x1c>
 8007472:	4b0e      	ldr	r3, [pc, #56]	; (80074ac <ethernetif_init+0x48>)
 8007474:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007478:	490d      	ldr	r1, [pc, #52]	; (80074b0 <ethernetif_init+0x4c>)
 800747a:	480e      	ldr	r0, [pc, #56]	; (80074b4 <ethernetif_init+0x50>)
 800747c:	f00b f862 	bl	8012544 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2273      	movs	r2, #115	; 0x73
 8007484:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2274      	movs	r2, #116	; 0x74
 800748c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a09      	ldr	r2, [pc, #36]	; (80074b8 <ethernetif_init+0x54>)
 8007494:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a08      	ldr	r2, [pc, #32]	; (80074bc <ethernetif_init+0x58>)
 800749a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff fe97 	bl	80071d0 <low_level_init>

  return ERR_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	08013b08 	.word	0x08013b08
 80074b0:	08013b24 	.word	0x08013b24
 80074b4:	08013b34 	.word	0x08013b34
 80074b8:	0801056d 	.word	0x0801056d
 80074bc:	080072fd 	.word	0x080072fd

080074c0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80074cc:	68f9      	ldr	r1, [r7, #12]
 80074ce:	4808      	ldr	r0, [pc, #32]	; (80074f0 <pbuf_free_custom+0x30>)
 80074d0:	f000 ffb0 	bl	8008434 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80074d4:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <pbuf_free_custom+0x34>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d105      	bne.n	80074e8 <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <pbuf_free_custom+0x34>)
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 80074e2:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <pbuf_free_custom+0x38>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	601a      	str	r2, [r3, #0]
  }
}
 80074e8:	bf00      	nop
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	08016500 	.word	0x08016500
 80074f4:	20004ec8 	.word	0x20004ec8
 80074f8:	20004ecc 	.word	0x20004ecc

080074fc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007500:	f7fb fa74 	bl	80029ec <HAL_GetTick>
 8007504:	4603      	mov	r3, r0
}
 8007506:	4618      	mov	r0, r3
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08e      	sub	sp, #56	; 0x38
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	605a      	str	r2, [r3, #4]
 800751e:	609a      	str	r2, [r3, #8]
 8007520:	60da      	str	r2, [r3, #12]
 8007522:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a59      	ldr	r2, [pc, #356]	; (8007690 <HAL_ETH_MspInit+0x184>)
 800752a:	4293      	cmp	r3, r2
 800752c:	f040 80ab 	bne.w	8007686 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007530:	2300      	movs	r3, #0
 8007532:	623b      	str	r3, [r7, #32]
 8007534:	4b57      	ldr	r3, [pc, #348]	; (8007694 <HAL_ETH_MspInit+0x188>)
 8007536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007538:	4a56      	ldr	r2, [pc, #344]	; (8007694 <HAL_ETH_MspInit+0x188>)
 800753a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800753e:	6313      	str	r3, [r2, #48]	; 0x30
 8007540:	4b54      	ldr	r3, [pc, #336]	; (8007694 <HAL_ETH_MspInit+0x188>)
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007548:	623b      	str	r3, [r7, #32]
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	4b50      	ldr	r3, [pc, #320]	; (8007694 <HAL_ETH_MspInit+0x188>)
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	4a4f      	ldr	r2, [pc, #316]	; (8007694 <HAL_ETH_MspInit+0x188>)
 8007556:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800755a:	6313      	str	r3, [r2, #48]	; 0x30
 800755c:	4b4d      	ldr	r3, [pc, #308]	; (8007694 <HAL_ETH_MspInit+0x188>)
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	2300      	movs	r3, #0
 800756a:	61bb      	str	r3, [r7, #24]
 800756c:	4b49      	ldr	r3, [pc, #292]	; (8007694 <HAL_ETH_MspInit+0x188>)
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	4a48      	ldr	r2, [pc, #288]	; (8007694 <HAL_ETH_MspInit+0x188>)
 8007572:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007576:	6313      	str	r3, [r2, #48]	; 0x30
 8007578:	4b46      	ldr	r3, [pc, #280]	; (8007694 <HAL_ETH_MspInit+0x188>)
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	4b42      	ldr	r3, [pc, #264]	; (8007694 <HAL_ETH_MspInit+0x188>)
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	4a41      	ldr	r2, [pc, #260]	; (8007694 <HAL_ETH_MspInit+0x188>)
 800758e:	f043 0310 	orr.w	r3, r3, #16
 8007592:	6313      	str	r3, [r2, #48]	; 0x30
 8007594:	4b3f      	ldr	r3, [pc, #252]	; (8007694 <HAL_ETH_MspInit+0x188>)
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075a0:	2300      	movs	r3, #0
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	4b3b      	ldr	r3, [pc, #236]	; (8007694 <HAL_ETH_MspInit+0x188>)
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	4a3a      	ldr	r2, [pc, #232]	; (8007694 <HAL_ETH_MspInit+0x188>)
 80075aa:	f043 0304 	orr.w	r3, r3, #4
 80075ae:	6313      	str	r3, [r2, #48]	; 0x30
 80075b0:	4b38      	ldr	r3, [pc, #224]	; (8007694 <HAL_ETH_MspInit+0x188>)
 80075b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	4b34      	ldr	r3, [pc, #208]	; (8007694 <HAL_ETH_MspInit+0x188>)
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	4a33      	ldr	r2, [pc, #204]	; (8007694 <HAL_ETH_MspInit+0x188>)
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	6313      	str	r3, [r2, #48]	; 0x30
 80075cc:	4b31      	ldr	r3, [pc, #196]	; (8007694 <HAL_ETH_MspInit+0x188>)
 80075ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075d8:	2300      	movs	r3, #0
 80075da:	60bb      	str	r3, [r7, #8]
 80075dc:	4b2d      	ldr	r3, [pc, #180]	; (8007694 <HAL_ETH_MspInit+0x188>)
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	4a2c      	ldr	r2, [pc, #176]	; (8007694 <HAL_ETH_MspInit+0x188>)
 80075e2:	f043 0302 	orr.w	r3, r3, #2
 80075e6:	6313      	str	r3, [r2, #48]	; 0x30
 80075e8:	4b2a      	ldr	r3, [pc, #168]	; (8007694 <HAL_ETH_MspInit+0x188>)
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	60bb      	str	r3, [r7, #8]
 80075f2:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ETH_RXD3
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80075f4:	2304      	movs	r3, #4
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f8:	2302      	movs	r3, #2
 80075fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007600:	2303      	movs	r3, #3
 8007602:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007604:	230b      	movs	r3, #11
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800760c:	4619      	mov	r1, r3
 800760e:	4822      	ldr	r0, [pc, #136]	; (8007698 <HAL_ETH_MspInit+0x18c>)
 8007610:	f7fd f8ee 	bl	80047f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8007614:	233e      	movs	r3, #62	; 0x3e
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007618:	2302      	movs	r3, #2
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761c:	2300      	movs	r3, #0
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007620:	2303      	movs	r3, #3
 8007622:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007624:	230b      	movs	r3, #11
 8007626:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800762c:	4619      	mov	r1, r3
 800762e:	481b      	ldr	r0, [pc, #108]	; (800769c <HAL_ETH_MspInit+0x190>)
 8007630:	f7fd f8de 	bl	80047f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007634:	238f      	movs	r3, #143	; 0x8f
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007638:	2302      	movs	r3, #2
 800763a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763c:	2300      	movs	r3, #0
 800763e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007640:	2303      	movs	r3, #3
 8007642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007644:	230b      	movs	r3, #11
 8007646:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800764c:	4619      	mov	r1, r3
 800764e:	4814      	ldr	r0, [pc, #80]	; (80076a0 <HAL_ETH_MspInit+0x194>)
 8007650:	f7fd f8ce 	bl	80047f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8007654:	f643 0303 	movw	r3, #14339	; 0x3803
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800765a:	2302      	movs	r3, #2
 800765c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765e:	2300      	movs	r3, #0
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007662:	2303      	movs	r3, #3
 8007664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007666:	230b      	movs	r3, #11
 8007668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800766a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800766e:	4619      	mov	r1, r3
 8007670:	480c      	ldr	r0, [pc, #48]	; (80076a4 <HAL_ETH_MspInit+0x198>)
 8007672:	f7fd f8bd 	bl	80047f0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8007676:	2200      	movs	r2, #0
 8007678:	2100      	movs	r1, #0
 800767a:	203d      	movs	r0, #61	; 0x3d
 800767c:	f7fb fae5 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007680:	203d      	movs	r0, #61	; 0x3d
 8007682:	f7fb fafe 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007686:	bf00      	nop
 8007688:	3738      	adds	r7, #56	; 0x38
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40028000 	.word	0x40028000
 8007694:	40023800 	.word	0x40023800
 8007698:	40021000 	.word	0x40021000
 800769c:	40020800 	.word	0x40020800
 80076a0:	40020000 	.word	0x40020000
 80076a4:	40020400 	.word	0x40020400

080076a8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80076ac:	4802      	ldr	r0, [pc, #8]	; (80076b8 <ETH_PHY_IO_Init+0x10>)
 80076ae:	f7fc f93d 	bl	800392c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20005010 	.word	0x20005010

080076bc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
  return 0;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	68f9      	ldr	r1, [r7, #12]
 80076de:	4807      	ldr	r0, [pc, #28]	; (80076fc <ETH_PHY_IO_ReadReg+0x30>)
 80076e0:	f7fb ff8c 	bl	80035fc <HAL_ETH_ReadPHYRegister>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80076ea:	f04f 33ff 	mov.w	r3, #4294967295
 80076ee:	e000      	b.n	80076f2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20005010 	.word	0x20005010

08007700 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	68f9      	ldr	r1, [r7, #12]
 8007712:	4807      	ldr	r0, [pc, #28]	; (8007730 <ETH_PHY_IO_WriteReg+0x30>)
 8007714:	f7fb ffbd 	bl	8003692 <HAL_ETH_WritePHYRegister>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800771e:	f04f 33ff 	mov.w	r3, #4294967295
 8007722:	e000      	b.n	8007726 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20005010 	.word	0x20005010

08007734 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007738:	f7fb f958 	bl	80029ec <HAL_GetTick>
 800773c:	4603      	mov	r3, r0
}
 800773e:	4618      	mov	r0, r3
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b0a0      	sub	sp, #128	; 0x80
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800774c:	f107 030c 	add.w	r3, r7, #12
 8007750:	2264      	movs	r2, #100	; 0x64
 8007752:	2100      	movs	r1, #0
 8007754:	4618      	mov	r0, r3
 8007756:	f00a fe0d 	bl	8012374 <memset>
  int32_t PHYLinkState = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007762:	2300      	movs	r3, #0
 8007764:	67bb      	str	r3, [r7, #120]	; 0x78
 8007766:	2300      	movs	r3, #0
 8007768:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800776a:	483a      	ldr	r0, [pc, #232]	; (8007854 <ethernet_link_check_state+0x110>)
 800776c:	f7fb f81d 	bl	80027aa <DP83848_GetLinkState>
 8007770:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007778:	089b      	lsrs	r3, r3, #2
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00c      	beq.n	800779e <ethernet_link_check_state+0x5a>
 8007784:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007786:	2b01      	cmp	r3, #1
 8007788:	dc09      	bgt.n	800779e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800778a:	4833      	ldr	r0, [pc, #204]	; (8007858 <ethernet_link_check_state+0x114>)
 800778c:	f7fb fc1d 	bl	8002fca <HAL_ETH_Stop>
    netif_set_down(netif);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f8d3 	bl	800893c <netif_set_down>
    netif_set_link_down(netif);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 f936 	bl	8008a08 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800779c:	e055      	b.n	800784a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d14e      	bne.n	800784a <ethernet_link_check_state+0x106>
 80077ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	dd4b      	ble.n	800784a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80077b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077b4:	3b02      	subs	r3, #2
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d82a      	bhi.n	8007810 <ethernet_link_check_state+0xcc>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <ethernet_link_check_state+0x7c>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077d1 	.word	0x080077d1
 80077c4:	080077e3 	.word	0x080077e3
 80077c8:	080077f3 	.word	0x080077f3
 80077cc:	08007803 	.word	0x08007803
      duplex = ETH_FULLDUPLEX_MODE;
 80077d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80077d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80077dc:	2301      	movs	r3, #1
 80077de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80077e0:	e017      	b.n	8007812 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80077e2:	2300      	movs	r3, #0
 80077e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80077e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80077ec:	2301      	movs	r3, #1
 80077ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80077f0:	e00f      	b.n	8007812 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80077f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077f6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80077f8:	2300      	movs	r3, #0
 80077fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80077fc:	2301      	movs	r3, #1
 80077fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007800:	e007      	b.n	8007812 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007802:	2300      	movs	r3, #0
 8007804:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007806:	2300      	movs	r3, #0
 8007808:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800780a:	2301      	movs	r3, #1
 800780c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800780e:	e000      	b.n	8007812 <ethernet_link_check_state+0xce>
      break;
 8007810:	bf00      	nop
    if(linkchanged)
 8007812:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d018      	beq.n	800784a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007818:	f107 030c 	add.w	r3, r7, #12
 800781c:	4619      	mov	r1, r3
 800781e:	480e      	ldr	r0, [pc, #56]	; (8007858 <ethernet_link_check_state+0x114>)
 8007820:	f7fb ff80 	bl	8003724 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800782a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800782c:	f107 030c 	add.w	r3, r7, #12
 8007830:	4619      	mov	r1, r3
 8007832:	4809      	ldr	r0, [pc, #36]	; (8007858 <ethernet_link_check_state+0x114>)
 8007834:	f7fc f860 	bl	80038f8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007838:	4807      	ldr	r0, [pc, #28]	; (8007858 <ethernet_link_check_state+0x114>)
 800783a:	f7fb fb67 	bl	8002f0c <HAL_ETH_Start>
      netif_set_up(netif);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 f810 	bl	8008864 <netif_set_up>
      netif_set_link_up(netif);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 f8ab 	bl	80089a0 <netif_set_link_up>
}
 800784a:	bf00      	nop
 800784c:	3780      	adds	r7, #128	; 0x80
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	200050f8 	.word	0x200050f8
 8007858:	20005010 	.word	0x20005010

0800785c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af02      	add	r7, sp, #8
 8007862:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007864:	4812      	ldr	r0, [pc, #72]	; (80078b0 <HAL_ETH_RxAllocateCallback+0x54>)
 8007866:	f000 fd77 	bl	8008358 <memp_malloc_pool>
 800786a:	60f8      	str	r0, [r7, #12]
  if (p)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d014      	beq.n	800789c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f103 0220 	add.w	r2, r3, #32
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4a0d      	ldr	r2, [pc, #52]	; (80078b4 <HAL_ETH_RxAllocateCallback+0x58>)
 8007880:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800788a:	9201      	str	r2, [sp, #4]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2241      	movs	r2, #65	; 0x41
 8007892:	2100      	movs	r1, #0
 8007894:	2000      	movs	r0, #0
 8007896:	f001 faad 	bl	8008df4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800789a:	e005      	b.n	80078a8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800789e:	2201      	movs	r2, #1
 80078a0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
}
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	08016500 	.word	0x08016500
 80078b4:	080074c1 	.word	0x080074c1
 80078b8:	20004ec8 	.word	0x20004ec8

080078bc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80078bc:	b480      	push	{r7}
 80078be:	b089      	sub	sp, #36	; 0x24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3b20      	subs	r3, #32
 80078da:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	2200      	movs	r2, #0
 80078e6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	887a      	ldrh	r2, [r7, #2]
 80078ec:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d103      	bne.n	80078fe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	e003      	b.n	8007906 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	69fa      	ldr	r2, [r7, #28]
 800790a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	61fb      	str	r3, [r7, #28]
 8007912:	e009      	b.n	8007928 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	891a      	ldrh	r2, [r3, #8]
 8007918:	887b      	ldrh	r3, [r7, #2]
 800791a:	4413      	add	r3, r2
 800791c:	b29a      	uxth	r2, r3
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	61fb      	str	r3, [r7, #28]
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f2      	bne.n	8007914 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	3724      	adds	r7, #36	; 0x24
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	b21a      	sxth	r2, r3
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	b29b      	uxth	r3, r3
 8007952:	b21b      	sxth	r3, r3
 8007954:	4313      	orrs	r3, r2
 8007956:	b21b      	sxth	r3, r3
 8007958:	b29b      	uxth	r3, r3
}
 800795a:	4618      	mov	r0, r3
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	061a      	lsls	r2, r3, #24
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	0a1b      	lsrs	r3, r3, #8
 8007980:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007984:	431a      	orrs	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	0e1b      	lsrs	r3, r3, #24
 800798a:	4313      	orrs	r3, r2
}
 800798c:	4618      	mov	r0, r3
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8007998:	b480      	push	{r7}
 800799a:	b089      	sub	sp, #36	; 0x24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00d      	beq.n	80079d8 <lwip_standard_chksum+0x40>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dd0a      	ble.n	80079d8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	1c53      	adds	r3, r2, #1
 80079c6:	61fb      	str	r3, [r7, #28]
 80079c8:	f107 030e 	add.w	r3, r7, #14
 80079cc:	3301      	adds	r3, #1
 80079ce:	7812      	ldrb	r2, [r2, #0]
 80079d0:	701a      	strb	r2, [r3, #0]
    len--;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80079dc:	e00a      	b.n	80079f4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	1c9a      	adds	r2, r3, #2
 80079e2:	61ba      	str	r2, [r7, #24]
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	4413      	add	r3, r2
 80079ec:	617b      	str	r3, [r7, #20]
    len -= 2;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	3b02      	subs	r3, #2
 80079f2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	dcf1      	bgt.n	80079de <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dd04      	ble.n	8007a0a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8007a00:	f107 030e 	add.w	r3, r7, #14
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8007a0a:	89fb      	ldrh	r3, [r7, #14]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	4413      	add	r3, r2
 8007a12:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	0c1a      	lsrs	r2, r3, #16
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	0c1a      	lsrs	r2, r3, #16
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4413      	add	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	021b      	lsls	r3, r3, #8
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	b29b      	uxth	r3, r3
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3724      	adds	r7, #36	; 0x24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8007a5e:	887b      	ldrh	r3, [r7, #2]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff ff98 	bl	8007998 <lwip_standard_chksum>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	43db      	mvns	r3, r3
 8007a6c:	b29b      	uxth	r3, r3
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8007a82:	2300      	movs	r3, #0
 8007a84:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	613b      	str	r3, [r7, #16]
 8007a8a:	e02b      	b.n	8007ae4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	895b      	ldrh	r3, [r3, #10]
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f7ff ff7e 	bl	8007998 <lwip_standard_chksum>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	0c1a      	lsrs	r2, r3, #16
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4413      	add	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	895b      	ldrh	r3, [r3, #10]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00e      	beq.n	8007ade <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf0c      	ite	eq
 8007ac6:	2301      	moveq	r3, #1
 8007ac8:	2300      	movne	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	0a1b      	lsrs	r3, r3, #8
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	4313      	orrs	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	613b      	str	r3, [r7, #16]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1d0      	bne.n	8007a8c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	0a1b      	lsrs	r3, r3, #8
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	43db      	mvns	r3, r3
 8007b06:	b29b      	uxth	r3, r3
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007b1a:	f000 f8d5 	bl	8007cc8 <mem_init>
  memp_init();
 8007b1e:	f000 fbd7 	bl	80082d0 <memp_init>
  pbuf_init();
  netif_init();
 8007b22:	f000 fcd5 	bl	80084d0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007b26:	f007 ff1b 	bl	800f960 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007b2a:	f001 fdab 	bl	8009684 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007b2e:	f007 fe8d 	bl	800f84c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007b46:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <ptr_to_mem+0x20>)
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	88fb      	ldrh	r3, [r7, #6]
 8007b4c:	4413      	add	r3, r2
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20005130 	.word	0x20005130

08007b60 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007b68:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <mem_to_ptr+0x20>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	b29b      	uxth	r3, r3
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	20005130 	.word	0x20005130

08007b84 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007b84:	b590      	push	{r4, r7, lr}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007b8c:	4b45      	ldr	r3, [pc, #276]	; (8007ca4 <plug_holes+0x120>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d206      	bcs.n	8007ba4 <plug_holes+0x20>
 8007b96:	4b44      	ldr	r3, [pc, #272]	; (8007ca8 <plug_holes+0x124>)
 8007b98:	f240 12df 	movw	r2, #479	; 0x1df
 8007b9c:	4943      	ldr	r1, [pc, #268]	; (8007cac <plug_holes+0x128>)
 8007b9e:	4844      	ldr	r0, [pc, #272]	; (8007cb0 <plug_holes+0x12c>)
 8007ba0:	f00a fcd0 	bl	8012544 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007ba4:	4b43      	ldr	r3, [pc, #268]	; (8007cb4 <plug_holes+0x130>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d306      	bcc.n	8007bbc <plug_holes+0x38>
 8007bae:	4b3e      	ldr	r3, [pc, #248]	; (8007ca8 <plug_holes+0x124>)
 8007bb0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007bb4:	4940      	ldr	r1, [pc, #256]	; (8007cb8 <plug_holes+0x134>)
 8007bb6:	483e      	ldr	r0, [pc, #248]	; (8007cb0 <plug_holes+0x12c>)
 8007bb8:	f00a fcc4 	bl	8012544 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	791b      	ldrb	r3, [r3, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d006      	beq.n	8007bd2 <plug_holes+0x4e>
 8007bc4:	4b38      	ldr	r3, [pc, #224]	; (8007ca8 <plug_holes+0x124>)
 8007bc6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007bca:	493c      	ldr	r1, [pc, #240]	; (8007cbc <plug_holes+0x138>)
 8007bcc:	4838      	ldr	r0, [pc, #224]	; (8007cb0 <plug_holes+0x12c>)
 8007bce:	f00a fcb9 	bl	8012544 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007bda:	d906      	bls.n	8007bea <plug_holes+0x66>
 8007bdc:	4b32      	ldr	r3, [pc, #200]	; (8007ca8 <plug_holes+0x124>)
 8007bde:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007be2:	4937      	ldr	r1, [pc, #220]	; (8007cc0 <plug_holes+0x13c>)
 8007be4:	4832      	ldr	r0, [pc, #200]	; (8007cb0 <plug_holes+0x12c>)
 8007be6:	f00a fcad 	bl	8012544 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff ffa4 	bl	8007b3c <ptr_to_mem>
 8007bf4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d024      	beq.n	8007c48 <plug_holes+0xc4>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	791b      	ldrb	r3, [r3, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d120      	bne.n	8007c48 <plug_holes+0xc4>
 8007c06:	4b2b      	ldr	r3, [pc, #172]	; (8007cb4 <plug_holes+0x130>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d01b      	beq.n	8007c48 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007c10:	4b2c      	ldr	r3, [pc, #176]	; (8007cc4 <plug_holes+0x140>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d102      	bne.n	8007c20 <plug_holes+0x9c>
      lfree = mem;
 8007c1a:	4a2a      	ldr	r2, [pc, #168]	; (8007cc4 <plug_holes+0x140>)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	881a      	ldrh	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c30:	d00a      	beq.n	8007c48 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7ff ff80 	bl	8007b3c <ptr_to_mem>
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff ff8e 	bl	8007b60 <mem_to_ptr>
 8007c44:	4603      	mov	r3, r0
 8007c46:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	885b      	ldrh	r3, [r3, #2]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff ff75 	bl	8007b3c <ptr_to_mem>
 8007c52:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d01f      	beq.n	8007c9c <plug_holes+0x118>
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	791b      	ldrb	r3, [r3, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d11b      	bne.n	8007c9c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007c64:	4b17      	ldr	r3, [pc, #92]	; (8007cc4 <plug_holes+0x140>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d102      	bne.n	8007c74 <plug_holes+0xf0>
      lfree = pmem;
 8007c6e:	4a15      	ldr	r2, [pc, #84]	; (8007cc4 <plug_holes+0x140>)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	881a      	ldrh	r2, [r3, #0]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c84:	d00a      	beq.n	8007c9c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff ff56 	bl	8007b3c <ptr_to_mem>
 8007c90:	4604      	mov	r4, r0
 8007c92:	68b8      	ldr	r0, [r7, #8]
 8007c94:	f7ff ff64 	bl	8007b60 <mem_to_ptr>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd90      	pop	{r4, r7, pc}
 8007ca4:	20005130 	.word	0x20005130
 8007ca8:	08013b5c 	.word	0x08013b5c
 8007cac:	08013b8c 	.word	0x08013b8c
 8007cb0:	08013ba4 	.word	0x08013ba4
 8007cb4:	20005134 	.word	0x20005134
 8007cb8:	08013bcc 	.word	0x08013bcc
 8007cbc:	08013be8 	.word	0x08013be8
 8007cc0:	08013c04 	.word	0x08013c04
 8007cc4:	20005138 	.word	0x20005138

08007cc8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007cce:	4b16      	ldr	r3, [pc, #88]	; (8007d28 <mem_init+0x60>)
 8007cd0:	4a16      	ldr	r2, [pc, #88]	; (8007d2c <mem_init+0x64>)
 8007cd2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007cd4:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <mem_init+0x60>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007ce0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007cee:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007cf2:	f7ff ff23 	bl	8007b3c <ptr_to_mem>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4a0d      	ldr	r2, [pc, #52]	; (8007d30 <mem_init+0x68>)
 8007cfa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <mem_init+0x68>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2201      	movs	r2, #1
 8007d02:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007d04:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <mem_init+0x68>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007d0c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007d0e:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <mem_init+0x68>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007d16:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007d18:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <mem_init+0x60>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a05      	ldr	r2, [pc, #20]	; (8007d34 <mem_init+0x6c>)
 8007d1e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20005130 	.word	0x20005130
 8007d2c:	30044000 	.word	0x30044000
 8007d30:	20005134 	.word	0x20005134
 8007d34:	20005138 	.word	0x20005138

08007d38 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ff0d 	bl	8007b60 <mem_to_ptr>
 8007d46:	4603      	mov	r3, r0
 8007d48:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff fef4 	bl	8007b3c <ptr_to_mem>
 8007d54:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	885b      	ldrh	r3, [r3, #2]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff feee 	bl	8007b3c <ptr_to_mem>
 8007d60:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d6a:	d818      	bhi.n	8007d9e <mem_link_valid+0x66>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	885b      	ldrh	r3, [r3, #2]
 8007d70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d74:	d813      	bhi.n	8007d9e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007d7a:	8afa      	ldrh	r2, [r7, #22]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d004      	beq.n	8007d8a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	8afa      	ldrh	r2, [r7, #22]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d109      	bne.n	8007d9e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007d8a:	4b08      	ldr	r3, [pc, #32]	; (8007dac <mem_link_valid+0x74>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d006      	beq.n	8007da2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	885b      	ldrh	r3, [r3, #2]
 8007d98:	8afa      	ldrh	r2, [r7, #22]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d001      	beq.n	8007da2 <mem_link_valid+0x6a>
    return 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e000      	b.n	8007da4 <mem_link_valid+0x6c>
  }
  return 1;
 8007da2:	2301      	movs	r3, #1
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20005134 	.word	0x20005134

08007db0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d04c      	beq.n	8007e58 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007dc8:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <mem_free+0xb0>)
 8007dca:	f240 2273 	movw	r2, #627	; 0x273
 8007dce:	4925      	ldr	r1, [pc, #148]	; (8007e64 <mem_free+0xb4>)
 8007dd0:	4825      	ldr	r0, [pc, #148]	; (8007e68 <mem_free+0xb8>)
 8007dd2:	f00a fbb7 	bl	8012544 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007dd6:	e040      	b.n	8007e5a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3b08      	subs	r3, #8
 8007ddc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007dde:	4b23      	ldr	r3, [pc, #140]	; (8007e6c <mem_free+0xbc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d306      	bcc.n	8007df6 <mem_free+0x46>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f103 020c 	add.w	r2, r3, #12
 8007dee:	4b20      	ldr	r3, [pc, #128]	; (8007e70 <mem_free+0xc0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d907      	bls.n	8007e06 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007df6:	4b1a      	ldr	r3, [pc, #104]	; (8007e60 <mem_free+0xb0>)
 8007df8:	f240 227f 	movw	r2, #639	; 0x27f
 8007dfc:	491d      	ldr	r1, [pc, #116]	; (8007e74 <mem_free+0xc4>)
 8007dfe:	481a      	ldr	r0, [pc, #104]	; (8007e68 <mem_free+0xb8>)
 8007e00:	f00a fba0 	bl	8012544 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007e04:	e029      	b.n	8007e5a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	791b      	ldrb	r3, [r3, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d107      	bne.n	8007e1e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007e0e:	4b14      	ldr	r3, [pc, #80]	; (8007e60 <mem_free+0xb0>)
 8007e10:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007e14:	4918      	ldr	r1, [pc, #96]	; (8007e78 <mem_free+0xc8>)
 8007e16:	4814      	ldr	r0, [pc, #80]	; (8007e68 <mem_free+0xb8>)
 8007e18:	f00a fb94 	bl	8012544 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007e1c:	e01d      	b.n	8007e5a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff ff8a 	bl	8007d38 <mem_link_valid>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d107      	bne.n	8007e3a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <mem_free+0xb0>)
 8007e2c:	f240 2295 	movw	r2, #661	; 0x295
 8007e30:	4912      	ldr	r1, [pc, #72]	; (8007e7c <mem_free+0xcc>)
 8007e32:	480d      	ldr	r0, [pc, #52]	; (8007e68 <mem_free+0xb8>)
 8007e34:	f00a fb86 	bl	8012544 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007e38:	e00f      	b.n	8007e5a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007e40:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <mem_free+0xd0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d202      	bcs.n	8007e50 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007e4a:	4a0d      	ldr	r2, [pc, #52]	; (8007e80 <mem_free+0xd0>)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff fe97 	bl	8007b84 <plug_holes>
 8007e56:	e000      	b.n	8007e5a <mem_free+0xaa>
    return;
 8007e58:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	08013b5c 	.word	0x08013b5c
 8007e64:	08013c30 	.word	0x08013c30
 8007e68:	08013ba4 	.word	0x08013ba4
 8007e6c:	20005130 	.word	0x20005130
 8007e70:	20005134 	.word	0x20005134
 8007e74:	08013c54 	.word	0x08013c54
 8007e78:	08013c70 	.word	0x08013c70
 8007e7c:	08013c98 	.word	0x08013c98
 8007e80:	20005138 	.word	0x20005138

08007e84 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007e90:	887b      	ldrh	r3, [r7, #2]
 8007e92:	3303      	adds	r3, #3
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f023 0303 	bic.w	r3, r3, #3
 8007e9a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007e9c:	8bfb      	ldrh	r3, [r7, #30]
 8007e9e:	2b0b      	cmp	r3, #11
 8007ea0:	d801      	bhi.n	8007ea6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007ea6:	8bfb      	ldrh	r3, [r7, #30]
 8007ea8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007eac:	d803      	bhi.n	8007eb6 <mem_trim+0x32>
 8007eae:	8bfa      	ldrh	r2, [r7, #30]
 8007eb0:	887b      	ldrh	r3, [r7, #2]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d201      	bcs.n	8007eba <mem_trim+0x36>
    return NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e0cc      	b.n	8008054 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007eba:	4b68      	ldr	r3, [pc, #416]	; (800805c <mem_trim+0x1d8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d304      	bcc.n	8007ece <mem_trim+0x4a>
 8007ec4:	4b66      	ldr	r3, [pc, #408]	; (8008060 <mem_trim+0x1dc>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d306      	bcc.n	8007edc <mem_trim+0x58>
 8007ece:	4b65      	ldr	r3, [pc, #404]	; (8008064 <mem_trim+0x1e0>)
 8007ed0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007ed4:	4964      	ldr	r1, [pc, #400]	; (8008068 <mem_trim+0x1e4>)
 8007ed6:	4865      	ldr	r0, [pc, #404]	; (800806c <mem_trim+0x1e8>)
 8007ed8:	f00a fb34 	bl	8012544 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007edc:	4b5f      	ldr	r3, [pc, #380]	; (800805c <mem_trim+0x1d8>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d304      	bcc.n	8007ef0 <mem_trim+0x6c>
 8007ee6:	4b5e      	ldr	r3, [pc, #376]	; (8008060 <mem_trim+0x1dc>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d301      	bcc.n	8007ef4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	e0af      	b.n	8008054 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3b08      	subs	r3, #8
 8007ef8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007efa:	69b8      	ldr	r0, [r7, #24]
 8007efc:	f7ff fe30 	bl	8007b60 <mem_to_ptr>
 8007f00:	4603      	mov	r3, r0
 8007f02:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	881a      	ldrh	r2, [r3, #0]
 8007f08:	8afb      	ldrh	r3, [r7, #22]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	3b08      	subs	r3, #8
 8007f10:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007f12:	8bfa      	ldrh	r2, [r7, #30]
 8007f14:	8abb      	ldrh	r3, [r7, #20]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d906      	bls.n	8007f28 <mem_trim+0xa4>
 8007f1a:	4b52      	ldr	r3, [pc, #328]	; (8008064 <mem_trim+0x1e0>)
 8007f1c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007f20:	4953      	ldr	r1, [pc, #332]	; (8008070 <mem_trim+0x1ec>)
 8007f22:	4852      	ldr	r0, [pc, #328]	; (800806c <mem_trim+0x1e8>)
 8007f24:	f00a fb0e 	bl	8012544 <iprintf>
  if (newsize > size) {
 8007f28:	8bfa      	ldrh	r2, [r7, #30]
 8007f2a:	8abb      	ldrh	r3, [r7, #20]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d901      	bls.n	8007f34 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	e08f      	b.n	8008054 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007f34:	8bfa      	ldrh	r2, [r7, #30]
 8007f36:	8abb      	ldrh	r3, [r7, #20]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d101      	bne.n	8007f40 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	e089      	b.n	8008054 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff fdf9 	bl	8007b3c <ptr_to_mem>
 8007f4a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	791b      	ldrb	r3, [r3, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d13f      	bne.n	8007fd4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007f5c:	d106      	bne.n	8007f6c <mem_trim+0xe8>
 8007f5e:	4b41      	ldr	r3, [pc, #260]	; (8008064 <mem_trim+0x1e0>)
 8007f60:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007f64:	4943      	ldr	r1, [pc, #268]	; (8008074 <mem_trim+0x1f0>)
 8007f66:	4841      	ldr	r0, [pc, #260]	; (800806c <mem_trim+0x1e8>)
 8007f68:	f00a faec 	bl	8012544 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007f72:	8afa      	ldrh	r2, [r7, #22]
 8007f74:	8bfb      	ldrh	r3, [r7, #30]
 8007f76:	4413      	add	r3, r2
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007f7e:	4b3e      	ldr	r3, [pc, #248]	; (8008078 <mem_trim+0x1f4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d106      	bne.n	8007f96 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7ff fdd6 	bl	8007b3c <ptr_to_mem>
 8007f90:	4603      	mov	r3, r0
 8007f92:	4a39      	ldr	r2, [pc, #228]	; (8008078 <mem_trim+0x1f4>)
 8007f94:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007f96:	89fb      	ldrh	r3, [r7, #14]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff fdcf 	bl	8007b3c <ptr_to_mem>
 8007f9e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	89ba      	ldrh	r2, [r7, #12]
 8007faa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	8afa      	ldrh	r2, [r7, #22]
 8007fb0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	89fa      	ldrh	r2, [r7, #14]
 8007fb6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007fc0:	d047      	beq.n	8008052 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff fdb8 	bl	8007b3c <ptr_to_mem>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	89fb      	ldrh	r3, [r7, #14]
 8007fd0:	8053      	strh	r3, [r2, #2]
 8007fd2:	e03e      	b.n	8008052 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007fd4:	8bfb      	ldrh	r3, [r7, #30]
 8007fd6:	f103 0214 	add.w	r2, r3, #20
 8007fda:	8abb      	ldrh	r3, [r7, #20]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d838      	bhi.n	8008052 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007fe0:	8afa      	ldrh	r2, [r7, #22]
 8007fe2:	8bfb      	ldrh	r3, [r7, #30]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	3308      	adds	r3, #8
 8007fea:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ff4:	d106      	bne.n	8008004 <mem_trim+0x180>
 8007ff6:	4b1b      	ldr	r3, [pc, #108]	; (8008064 <mem_trim+0x1e0>)
 8007ff8:	f240 3216 	movw	r2, #790	; 0x316
 8007ffc:	491d      	ldr	r1, [pc, #116]	; (8008074 <mem_trim+0x1f0>)
 8007ffe:	481b      	ldr	r0, [pc, #108]	; (800806c <mem_trim+0x1e8>)
 8008000:	f00a faa0 	bl	8012544 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008004:	89fb      	ldrh	r3, [r7, #14]
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fd98 	bl	8007b3c <ptr_to_mem>
 800800c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800800e:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <mem_trim+0x1f4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	429a      	cmp	r2, r3
 8008016:	d202      	bcs.n	800801e <mem_trim+0x19a>
      lfree = mem2;
 8008018:	4a17      	ldr	r2, [pc, #92]	; (8008078 <mem_trim+0x1f4>)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2200      	movs	r2, #0
 8008022:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	881a      	ldrh	r2, [r3, #0]
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	8afa      	ldrh	r2, [r7, #22]
 8008030:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	89fa      	ldrh	r2, [r7, #14]
 8008036:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008040:	d007      	beq.n	8008052 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff fd78 	bl	8007b3c <ptr_to_mem>
 800804c:	4602      	mov	r2, r0
 800804e:	89fb      	ldrh	r3, [r7, #14]
 8008050:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008052:	687b      	ldr	r3, [r7, #4]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3720      	adds	r7, #32
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20005130 	.word	0x20005130
 8008060:	20005134 	.word	0x20005134
 8008064:	08013b5c 	.word	0x08013b5c
 8008068:	08013ccc 	.word	0x08013ccc
 800806c:	08013ba4 	.word	0x08013ba4
 8008070:	08013ce4 	.word	0x08013ce4
 8008074:	08013d04 	.word	0x08013d04
 8008078:	20005138 	.word	0x20005138

0800807c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <mem_malloc+0x14>
    return NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	e0d9      	b.n	8008244 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	3303      	adds	r3, #3
 8008094:	b29b      	uxth	r3, r3
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800809c:	8bbb      	ldrh	r3, [r7, #28]
 800809e:	2b0b      	cmp	r3, #11
 80080a0:	d801      	bhi.n	80080a6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80080a2:	230c      	movs	r3, #12
 80080a4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80080a6:	8bbb      	ldrh	r3, [r7, #28]
 80080a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80080ac:	d803      	bhi.n	80080b6 <mem_malloc+0x3a>
 80080ae:	8bba      	ldrh	r2, [r7, #28]
 80080b0:	88fb      	ldrh	r3, [r7, #6]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d201      	bcs.n	80080ba <mem_malloc+0x3e>
    return NULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e0c4      	b.n	8008244 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80080ba:	4b64      	ldr	r3, [pc, #400]	; (800824c <mem_malloc+0x1d0>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff fd4e 	bl	8007b60 <mem_to_ptr>
 80080c4:	4603      	mov	r3, r0
 80080c6:	83fb      	strh	r3, [r7, #30]
 80080c8:	e0b4      	b.n	8008234 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80080ca:	8bfb      	ldrh	r3, [r7, #30]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fd35 	bl	8007b3c <ptr_to_mem>
 80080d2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	791b      	ldrb	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f040 80a4 	bne.w	8008226 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	8bfb      	ldrh	r3, [r7, #30]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	f1a3 0208 	sub.w	r2, r3, #8
 80080ec:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80080ee:	429a      	cmp	r2, r3
 80080f0:	f0c0 8099 	bcc.w	8008226 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	461a      	mov	r2, r3
 80080fa:	8bfb      	ldrh	r3, [r7, #30]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	f1a3 0208 	sub.w	r2, r3, #8
 8008102:	8bbb      	ldrh	r3, [r7, #28]
 8008104:	3314      	adds	r3, #20
 8008106:	429a      	cmp	r2, r3
 8008108:	d333      	bcc.n	8008172 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800810a:	8bfa      	ldrh	r2, [r7, #30]
 800810c:	8bbb      	ldrh	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	b29b      	uxth	r3, r3
 8008112:	3308      	adds	r3, #8
 8008114:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008116:	8a7b      	ldrh	r3, [r7, #18]
 8008118:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800811c:	d106      	bne.n	800812c <mem_malloc+0xb0>
 800811e:	4b4c      	ldr	r3, [pc, #304]	; (8008250 <mem_malloc+0x1d4>)
 8008120:	f240 3287 	movw	r2, #903	; 0x387
 8008124:	494b      	ldr	r1, [pc, #300]	; (8008254 <mem_malloc+0x1d8>)
 8008126:	484c      	ldr	r0, [pc, #304]	; (8008258 <mem_malloc+0x1dc>)
 8008128:	f00a fa0c 	bl	8012544 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800812c:	8a7b      	ldrh	r3, [r7, #18]
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff fd04 	bl	8007b3c <ptr_to_mem>
 8008134:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	881a      	ldrh	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8bfa      	ldrh	r2, [r7, #30]
 8008148:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	8a7a      	ldrh	r2, [r7, #18]
 800814e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2201      	movs	r2, #1
 8008154:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800815e:	d00b      	beq.n	8008178 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff fce9 	bl	8007b3c <ptr_to_mem>
 800816a:	4602      	mov	r2, r0
 800816c:	8a7b      	ldrh	r3, [r7, #18]
 800816e:	8053      	strh	r3, [r2, #2]
 8008170:	e002      	b.n	8008178 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2201      	movs	r2, #1
 8008176:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008178:	4b34      	ldr	r3, [pc, #208]	; (800824c <mem_malloc+0x1d0>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	429a      	cmp	r2, r3
 8008180:	d127      	bne.n	80081d2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008182:	4b32      	ldr	r3, [pc, #200]	; (800824c <mem_malloc+0x1d0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008188:	e005      	b.n	8008196 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fcd4 	bl	8007b3c <ptr_to_mem>
 8008194:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	791b      	ldrb	r3, [r3, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <mem_malloc+0x12c>
 800819e:	4b2f      	ldr	r3, [pc, #188]	; (800825c <mem_malloc+0x1e0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d1f0      	bne.n	800818a <mem_malloc+0x10e>
          }
          lfree = cur;
 80081a8:	4a28      	ldr	r2, [pc, #160]	; (800824c <mem_malloc+0x1d0>)
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80081ae:	4b27      	ldr	r3, [pc, #156]	; (800824c <mem_malloc+0x1d0>)
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	4b2a      	ldr	r3, [pc, #168]	; (800825c <mem_malloc+0x1e0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d00b      	beq.n	80081d2 <mem_malloc+0x156>
 80081ba:	4b24      	ldr	r3, [pc, #144]	; (800824c <mem_malloc+0x1d0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	791b      	ldrb	r3, [r3, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d006      	beq.n	80081d2 <mem_malloc+0x156>
 80081c4:	4b22      	ldr	r3, [pc, #136]	; (8008250 <mem_malloc+0x1d4>)
 80081c6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80081ca:	4925      	ldr	r1, [pc, #148]	; (8008260 <mem_malloc+0x1e4>)
 80081cc:	4822      	ldr	r0, [pc, #136]	; (8008258 <mem_malloc+0x1dc>)
 80081ce:	f00a f9b9 	bl	8012544 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80081d2:	8bba      	ldrh	r2, [r7, #28]
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	4413      	add	r3, r2
 80081d8:	3308      	adds	r3, #8
 80081da:	4a20      	ldr	r2, [pc, #128]	; (800825c <mem_malloc+0x1e0>)
 80081dc:	6812      	ldr	r2, [r2, #0]
 80081de:	4293      	cmp	r3, r2
 80081e0:	d906      	bls.n	80081f0 <mem_malloc+0x174>
 80081e2:	4b1b      	ldr	r3, [pc, #108]	; (8008250 <mem_malloc+0x1d4>)
 80081e4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80081e8:	491e      	ldr	r1, [pc, #120]	; (8008264 <mem_malloc+0x1e8>)
 80081ea:	481b      	ldr	r0, [pc, #108]	; (8008258 <mem_malloc+0x1dc>)
 80081ec:	f00a f9aa 	bl	8012544 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f003 0303 	and.w	r3, r3, #3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d006      	beq.n	8008208 <mem_malloc+0x18c>
 80081fa:	4b15      	ldr	r3, [pc, #84]	; (8008250 <mem_malloc+0x1d4>)
 80081fc:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008200:	4919      	ldr	r1, [pc, #100]	; (8008268 <mem_malloc+0x1ec>)
 8008202:	4815      	ldr	r0, [pc, #84]	; (8008258 <mem_malloc+0x1dc>)
 8008204:	f00a f99e 	bl	8012544 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d006      	beq.n	8008220 <mem_malloc+0x1a4>
 8008212:	4b0f      	ldr	r3, [pc, #60]	; (8008250 <mem_malloc+0x1d4>)
 8008214:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008218:	4914      	ldr	r1, [pc, #80]	; (800826c <mem_malloc+0x1f0>)
 800821a:	480f      	ldr	r0, [pc, #60]	; (8008258 <mem_malloc+0x1dc>)
 800821c:	f00a f992 	bl	8012544 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	3308      	adds	r3, #8
 8008224:	e00e      	b.n	8008244 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008226:	8bfb      	ldrh	r3, [r7, #30]
 8008228:	4618      	mov	r0, r3
 800822a:	f7ff fc87 	bl	8007b3c <ptr_to_mem>
 800822e:	4603      	mov	r3, r0
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008234:	8bfa      	ldrh	r2, [r7, #30]
 8008236:	8bbb      	ldrh	r3, [r7, #28]
 8008238:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800823c:	429a      	cmp	r2, r3
 800823e:	f4ff af44 	bcc.w	80080ca <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3720      	adds	r7, #32
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	20005138 	.word	0x20005138
 8008250:	08013b5c 	.word	0x08013b5c
 8008254:	08013d04 	.word	0x08013d04
 8008258:	08013ba4 	.word	0x08013ba4
 800825c:	20005134 	.word	0x20005134
 8008260:	08013d18 	.word	0x08013d18
 8008264:	08013d34 	.word	0x08013d34
 8008268:	08013d64 	.word	0x08013d64
 800826c:	08013d94 	.word	0x08013d94

08008270 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	3303      	adds	r3, #3
 8008286:	f023 0303 	bic.w	r3, r3, #3
 800828a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800828c:	2300      	movs	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e011      	b.n	80082b6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	4413      	add	r3, r2
 80082ae:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	3301      	adds	r3, #1
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	885b      	ldrh	r3, [r3, #2]
 80082ba:	461a      	mov	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4293      	cmp	r3, r2
 80082c0:	dbe7      	blt.n	8008292 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80082c2:	bf00      	nop
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80082d6:	2300      	movs	r3, #0
 80082d8:	80fb      	strh	r3, [r7, #6]
 80082da:	e009      	b.n	80082f0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	4a08      	ldr	r2, [pc, #32]	; (8008300 <memp_init+0x30>)
 80082e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff ffc3 	bl	8008270 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	3301      	adds	r3, #1
 80082ee:	80fb      	strh	r3, [r7, #6]
 80082f0:	88fb      	ldrh	r3, [r7, #6]
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d9f2      	bls.n	80082dc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	08016578 	.word	0x08016578

08008304 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d012      	beq.n	8008340 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d006      	beq.n	800833c <do_memp_malloc_pool+0x38>
 800832e:	4b07      	ldr	r3, [pc, #28]	; (800834c <do_memp_malloc_pool+0x48>)
 8008330:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008334:	4906      	ldr	r1, [pc, #24]	; (8008350 <do_memp_malloc_pool+0x4c>)
 8008336:	4807      	ldr	r0, [pc, #28]	; (8008354 <do_memp_malloc_pool+0x50>)
 8008338:	f00a f904 	bl	8012544 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	e000      	b.n	8008342 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	08013db8 	.word	0x08013db8
 8008350:	08013de8 	.word	0x08013de8
 8008354:	08013e0c 	.word	0x08013e0c

08008358 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d106      	bne.n	8008374 <memp_malloc_pool+0x1c>
 8008366:	4b0a      	ldr	r3, [pc, #40]	; (8008390 <memp_malloc_pool+0x38>)
 8008368:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800836c:	4909      	ldr	r1, [pc, #36]	; (8008394 <memp_malloc_pool+0x3c>)
 800836e:	480a      	ldr	r0, [pc, #40]	; (8008398 <memp_malloc_pool+0x40>)
 8008370:	f00a f8e8 	bl	8012544 <iprintf>
  if (desc == NULL) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <memp_malloc_pool+0x26>
    return NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	e003      	b.n	8008386 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff ffc0 	bl	8008304 <do_memp_malloc_pool>
 8008384:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	08013db8 	.word	0x08013db8
 8008394:	08013e34 	.word	0x08013e34
 8008398:	08013e0c 	.word	0x08013e0c

0800839c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d908      	bls.n	80083be <memp_malloc+0x22>
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <memp_malloc+0x3c>)
 80083ae:	f240 1257 	movw	r2, #343	; 0x157
 80083b2:	490a      	ldr	r1, [pc, #40]	; (80083dc <memp_malloc+0x40>)
 80083b4:	480a      	ldr	r0, [pc, #40]	; (80083e0 <memp_malloc+0x44>)
 80083b6:	f00a f8c5 	bl	8012544 <iprintf>
 80083ba:	2300      	movs	r3, #0
 80083bc:	e008      	b.n	80083d0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <memp_malloc+0x48>)
 80083c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff ff9c 	bl	8008304 <do_memp_malloc_pool>
 80083cc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80083ce:	68fb      	ldr	r3, [r7, #12]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	08013db8 	.word	0x08013db8
 80083dc:	08013e48 	.word	0x08013e48
 80083e0:	08013e0c 	.word	0x08013e0c
 80083e4:	08016578 	.word	0x08016578

080083e8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d006      	beq.n	800840a <do_memp_free_pool+0x22>
 80083fc:	4b0a      	ldr	r3, [pc, #40]	; (8008428 <do_memp_free_pool+0x40>)
 80083fe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008402:	490a      	ldr	r1, [pc, #40]	; (800842c <do_memp_free_pool+0x44>)
 8008404:	480a      	ldr	r0, [pc, #40]	; (8008430 <do_memp_free_pool+0x48>)
 8008406:	f00a f89d 	bl	8012544 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008420:	bf00      	nop
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	08013db8 	.word	0x08013db8
 800842c:	08013e68 	.word	0x08013e68
 8008430:	08013e0c 	.word	0x08013e0c

08008434 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <memp_free_pool+0x1e>
 8008444:	4b0a      	ldr	r3, [pc, #40]	; (8008470 <memp_free_pool+0x3c>)
 8008446:	f240 1295 	movw	r2, #405	; 0x195
 800844a:	490a      	ldr	r1, [pc, #40]	; (8008474 <memp_free_pool+0x40>)
 800844c:	480a      	ldr	r0, [pc, #40]	; (8008478 <memp_free_pool+0x44>)
 800844e:	f00a f879 	bl	8012544 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <memp_free_pool+0x34>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d004      	beq.n	8008468 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff ffc1 	bl	80083e8 <do_memp_free_pool>
 8008466:	e000      	b.n	800846a <memp_free_pool+0x36>
    return;
 8008468:	bf00      	nop
}
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	08013db8 	.word	0x08013db8
 8008474:	08013e34 	.word	0x08013e34
 8008478:	08013e0c 	.word	0x08013e0c

0800847c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	4603      	mov	r3, r0
 8008484:	6039      	str	r1, [r7, #0]
 8008486:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	2b08      	cmp	r3, #8
 800848c:	d907      	bls.n	800849e <memp_free+0x22>
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <memp_free+0x44>)
 8008490:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008494:	490b      	ldr	r1, [pc, #44]	; (80084c4 <memp_free+0x48>)
 8008496:	480c      	ldr	r0, [pc, #48]	; (80084c8 <memp_free+0x4c>)
 8008498:	f00a f854 	bl	8012544 <iprintf>
 800849c:	e00c      	b.n	80084b8 <memp_free+0x3c>

  if (mem == NULL) {
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d008      	beq.n	80084b6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	4a09      	ldr	r2, [pc, #36]	; (80084cc <memp_free+0x50>)
 80084a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff ff9a 	bl	80083e8 <do_memp_free_pool>
 80084b4:	e000      	b.n	80084b8 <memp_free+0x3c>
    return;
 80084b6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	08013db8 	.word	0x08013db8
 80084c4:	08013e88 	.word	0x08013e88
 80084c8:	08013e0c 	.word	0x08013e0c
 80084cc:	08016578 	.word	0x08016578

080084d0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
	...

080084e0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d108      	bne.n	8008506 <netif_add+0x26>
 80084f4:	4b57      	ldr	r3, [pc, #348]	; (8008654 <netif_add+0x174>)
 80084f6:	f240 1227 	movw	r2, #295	; 0x127
 80084fa:	4957      	ldr	r1, [pc, #348]	; (8008658 <netif_add+0x178>)
 80084fc:	4857      	ldr	r0, [pc, #348]	; (800865c <netif_add+0x17c>)
 80084fe:	f00a f821 	bl	8012544 <iprintf>
 8008502:	2300      	movs	r3, #0
 8008504:	e0a2      	b.n	800864c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	2b00      	cmp	r3, #0
 800850a:	d108      	bne.n	800851e <netif_add+0x3e>
 800850c:	4b51      	ldr	r3, [pc, #324]	; (8008654 <netif_add+0x174>)
 800850e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008512:	4953      	ldr	r1, [pc, #332]	; (8008660 <netif_add+0x180>)
 8008514:	4851      	ldr	r0, [pc, #324]	; (800865c <netif_add+0x17c>)
 8008516:	f00a f815 	bl	8012544 <iprintf>
 800851a:	2300      	movs	r3, #0
 800851c:	e096      	b.n	800864c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008524:	4b4f      	ldr	r3, [pc, #316]	; (8008664 <netif_add+0x184>)
 8008526:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800852e:	4b4d      	ldr	r3, [pc, #308]	; (8008664 <netif_add+0x184>)
 8008530:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008538:	4b4a      	ldr	r3, [pc, #296]	; (8008664 <netif_add+0x184>)
 800853a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4a45      	ldr	r2, [pc, #276]	; (8008668 <netif_add+0x188>)
 8008552:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a3a      	ldr	r2, [r7, #32]
 800856c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800856e:	4b3f      	ldr	r3, [pc, #252]	; (800866c <netif_add+0x18c>)
 8008570:	781a      	ldrb	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800857c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 f913 	bl	80087b0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	4798      	blx	r3
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <netif_add+0xba>
    return NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	e058      	b.n	800864c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085a0:	2bff      	cmp	r3, #255	; 0xff
 80085a2:	d103      	bne.n	80085ac <netif_add+0xcc>
        netif->num = 0;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80085b0:	4b2f      	ldr	r3, [pc, #188]	; (8008670 <netif_add+0x190>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	e02b      	b.n	8008610 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d106      	bne.n	80085ce <netif_add+0xee>
 80085c0:	4b24      	ldr	r3, [pc, #144]	; (8008654 <netif_add+0x174>)
 80085c2:	f240 128b 	movw	r2, #395	; 0x18b
 80085c6:	492b      	ldr	r1, [pc, #172]	; (8008674 <netif_add+0x194>)
 80085c8:	4824      	ldr	r0, [pc, #144]	; (800865c <netif_add+0x17c>)
 80085ca:	f009 ffbb 	bl	8012544 <iprintf>
        num_netifs++;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	3301      	adds	r3, #1
 80085d2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2bff      	cmp	r3, #255	; 0xff
 80085d8:	dd06      	ble.n	80085e8 <netif_add+0x108>
 80085da:	4b1e      	ldr	r3, [pc, #120]	; (8008654 <netif_add+0x174>)
 80085dc:	f240 128d 	movw	r2, #397	; 0x18d
 80085e0:	4925      	ldr	r1, [pc, #148]	; (8008678 <netif_add+0x198>)
 80085e2:	481e      	ldr	r0, [pc, #120]	; (800865c <netif_add+0x17c>)
 80085e4:	f009 ffae 	bl	8012544 <iprintf>
        if (netif2->num == netif->num) {
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d108      	bne.n	800860a <netif_add+0x12a>
          netif->num++;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085fe:	3301      	adds	r3, #1
 8008600:	b2da      	uxtb	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008608:	e005      	b.n	8008616 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1d0      	bne.n	80085b8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1be      	bne.n	800859a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008622:	2bfe      	cmp	r3, #254	; 0xfe
 8008624:	d103      	bne.n	800862e <netif_add+0x14e>
    netif_num = 0;
 8008626:	4b11      	ldr	r3, [pc, #68]	; (800866c <netif_add+0x18c>)
 8008628:	2200      	movs	r2, #0
 800862a:	701a      	strb	r2, [r3, #0]
 800862c:	e006      	b.n	800863c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008634:	3301      	adds	r3, #1
 8008636:	b2da      	uxtb	r2, r3
 8008638:	4b0c      	ldr	r3, [pc, #48]	; (800866c <netif_add+0x18c>)
 800863a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800863c:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <netif_add+0x190>)
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008644:	4a0a      	ldr	r2, [pc, #40]	; (8008670 <netif_add+0x190>)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800864a:	68fb      	ldr	r3, [r7, #12]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	08013ea4 	.word	0x08013ea4
 8008658:	08013f38 	.word	0x08013f38
 800865c:	08013ef4 	.word	0x08013ef4
 8008660:	08013f54 	.word	0x08013f54
 8008664:	080165dc 	.word	0x080165dc
 8008668:	08008a8b 	.word	0x08008a8b
 800866c:	20008030 	.word	0x20008030
 8008670:	20008028 	.word	0x20008028
 8008674:	08013f78 	.word	0x08013f78
 8008678:	08013f8c 	.word	0x08013f8c

0800867c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f002 fdb3 	bl	800b1f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f007 faef 	bl	800fc74 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008696:	bf00      	nop
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d106      	bne.n	80086c0 <netif_do_set_ipaddr+0x20>
 80086b2:	4b1d      	ldr	r3, [pc, #116]	; (8008728 <netif_do_set_ipaddr+0x88>)
 80086b4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80086b8:	491c      	ldr	r1, [pc, #112]	; (800872c <netif_do_set_ipaddr+0x8c>)
 80086ba:	481d      	ldr	r0, [pc, #116]	; (8008730 <netif_do_set_ipaddr+0x90>)
 80086bc:	f009 ff42 	bl	8012544 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d106      	bne.n	80086d4 <netif_do_set_ipaddr+0x34>
 80086c6:	4b18      	ldr	r3, [pc, #96]	; (8008728 <netif_do_set_ipaddr+0x88>)
 80086c8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80086cc:	4917      	ldr	r1, [pc, #92]	; (800872c <netif_do_set_ipaddr+0x8c>)
 80086ce:	4818      	ldr	r0, [pc, #96]	; (8008730 <netif_do_set_ipaddr+0x90>)
 80086d0:	f009 ff38 	bl	8012544 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3304      	adds	r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d01c      	beq.n	800871c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3304      	adds	r3, #4
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80086f2:	f107 0314 	add.w	r3, r7, #20
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff ffbf 	bl	800867c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <netif_do_set_ipaddr+0x6a>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	e000      	b.n	800870c <netif_do_set_ipaddr+0x6c>
 800870a:	2300      	movs	r3, #0
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008710:	2101      	movs	r1, #1
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 f8d2 	bl	80088bc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008718:	2301      	movs	r3, #1
 800871a:	e000      	b.n	800871e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	08013ea4 	.word	0x08013ea4
 800872c:	08013fbc 	.word	0x08013fbc
 8008730:	08013ef4 	.word	0x08013ef4

08008734 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3308      	adds	r3, #8
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d00a      	beq.n	8008764 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <netif_do_set_netmask+0x26>
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	e000      	b.n	800875c <netif_do_set_netmask+0x28>
 800875a:	2300      	movs	r3, #0
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008760:	2301      	movs	r3, #1
 8008762:	e000      	b.n	8008766 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	330c      	adds	r3, #12
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d00a      	beq.n	80087a2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <netif_do_set_gw+0x26>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	e000      	b.n	800879a <netif_do_set_gw+0x28>
 8008798:	2300      	movs	r3, #0
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800879e:	2301      	movs	r3, #1
 80087a0:	e000      	b.n	80087a4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80087cc:	4b1c      	ldr	r3, [pc, #112]	; (8008840 <netif_set_addr+0x90>)
 80087ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80087d6:	4b1a      	ldr	r3, [pc, #104]	; (8008840 <netif_set_addr+0x90>)
 80087d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80087e0:	4b17      	ldr	r3, [pc, #92]	; (8008840 <netif_set_addr+0x90>)
 80087e2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <netif_set_addr+0x42>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <netif_set_addr+0x46>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <netif_set_addr+0x48>
 80087f6:	2300      	movs	r3, #0
 80087f8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d006      	beq.n	800880e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008800:	f107 0310 	add.w	r3, r7, #16
 8008804:	461a      	mov	r2, r3
 8008806:	68b9      	ldr	r1, [r7, #8]
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f7ff ff49 	bl	80086a0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f7ff ff8e 	bl	8008734 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7ff ffa8 	bl	8008772 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d106      	bne.n	8008836 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008828:	f107 0310 	add.w	r3, r7, #16
 800882c:	461a      	mov	r2, r3
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f7ff ff35 	bl	80086a0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008836:	bf00      	nop
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	080165dc 	.word	0x080165dc

08008844 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800884c:	4a04      	ldr	r2, [pc, #16]	; (8008860 <netif_set_default+0x1c>)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	2000802c 	.word	0x2000802c

08008864 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d107      	bne.n	8008882 <netif_set_up+0x1e>
 8008872:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <netif_set_up+0x4c>)
 8008874:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008878:	490e      	ldr	r1, [pc, #56]	; (80088b4 <netif_set_up+0x50>)
 800887a:	480f      	ldr	r0, [pc, #60]	; (80088b8 <netif_set_up+0x54>)
 800887c:	f009 fe62 	bl	8012544 <iprintf>
 8008880:	e013      	b.n	80088aa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10c      	bne.n	80088aa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008896:	f043 0301 	orr.w	r3, r3, #1
 800889a:	b2da      	uxtb	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80088a2:	2103      	movs	r1, #3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f809 	bl	80088bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	08013ea4 	.word	0x08013ea4
 80088b4:	0801402c 	.word	0x0801402c
 80088b8:	08013ef4 	.word	0x08013ef4

080088bc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <netif_issue_reports+0x20>
 80088ce:	4b18      	ldr	r3, [pc, #96]	; (8008930 <netif_issue_reports+0x74>)
 80088d0:	f240 326d 	movw	r2, #877	; 0x36d
 80088d4:	4917      	ldr	r1, [pc, #92]	; (8008934 <netif_issue_reports+0x78>)
 80088d6:	4818      	ldr	r0, [pc, #96]	; (8008938 <netif_issue_reports+0x7c>)
 80088d8:	f009 fe34 	bl	8012544 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088e2:	f003 0304 	and.w	r3, r3, #4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d01e      	beq.n	8008928 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088f0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d017      	beq.n	8008928 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d013      	beq.n	800892a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3304      	adds	r3, #4
 8008906:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00e      	beq.n	800892a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d007      	beq.n	800892a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3304      	adds	r3, #4
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f008 f911 	bl	8010b48 <etharp_request>
 8008926:	e000      	b.n	800892a <netif_issue_reports+0x6e>
    return;
 8008928:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	08013ea4 	.word	0x08013ea4
 8008934:	08014048 	.word	0x08014048
 8008938:	08013ef4 	.word	0x08013ef4

0800893c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d107      	bne.n	800895a <netif_set_down+0x1e>
 800894a:	4b12      	ldr	r3, [pc, #72]	; (8008994 <netif_set_down+0x58>)
 800894c:	f240 329b 	movw	r2, #923	; 0x39b
 8008950:	4911      	ldr	r1, [pc, #68]	; (8008998 <netif_set_down+0x5c>)
 8008952:	4812      	ldr	r0, [pc, #72]	; (800899c <netif_set_down+0x60>)
 8008954:	f009 fdf6 	bl	8012544 <iprintf>
 8008958:	e019      	b.n	800898e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	d012      	beq.n	800898e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800896e:	f023 0301 	bic.w	r3, r3, #1
 8008972:	b2da      	uxtb	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f007 fc9b 	bl	80102c4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	08013ea4 	.word	0x08013ea4
 8008998:	0801406c 	.word	0x0801406c
 800899c:	08013ef4 	.word	0x08013ef4

080089a0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d107      	bne.n	80089be <netif_set_link_up+0x1e>
 80089ae:	4b13      	ldr	r3, [pc, #76]	; (80089fc <netif_set_link_up+0x5c>)
 80089b0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80089b4:	4912      	ldr	r1, [pc, #72]	; (8008a00 <netif_set_link_up+0x60>)
 80089b6:	4813      	ldr	r0, [pc, #76]	; (8008a04 <netif_set_link_up+0x64>)
 80089b8:	f009 fdc4 	bl	8012544 <iprintf>
 80089bc:	e01b      	b.n	80089f6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d114      	bne.n	80089f6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089d2:	f043 0304 	orr.w	r3, r3, #4
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80089de:	2103      	movs	r1, #3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff ff6b 	bl	80088bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <netif_set_link_up+0x56>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	08013ea4 	.word	0x08013ea4
 8008a00:	0801408c 	.word	0x0801408c
 8008a04:	08013ef4 	.word	0x08013ef4

08008a08 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d107      	bne.n	8008a26 <netif_set_link_down+0x1e>
 8008a16:	4b11      	ldr	r3, [pc, #68]	; (8008a5c <netif_set_link_down+0x54>)
 8008a18:	f240 4206 	movw	r2, #1030	; 0x406
 8008a1c:	4910      	ldr	r1, [pc, #64]	; (8008a60 <netif_set_link_down+0x58>)
 8008a1e:	4811      	ldr	r0, [pc, #68]	; (8008a64 <netif_set_link_down+0x5c>)
 8008a20:	f009 fd90 	bl	8012544 <iprintf>
 8008a24:	e017      	b.n	8008a56 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d010      	beq.n	8008a56 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a3a:	f023 0304 	bic.w	r3, r3, #4
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <netif_set_link_down+0x4e>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	08013ea4 	.word	0x08013ea4
 8008a60:	080140b0 	.word	0x080140b0
 8008a64:	08013ef4 	.word	0x08013ef4

08008a68 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	61da      	str	r2, [r3, #28]
  }
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b085      	sub	sp, #20
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008a96:	f06f 030b 	mvn.w	r3, #11
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d013      	beq.n	8008ae0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008ab8:	4b0d      	ldr	r3, [pc, #52]	; (8008af0 <netif_get_by_index+0x48>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	e00c      	b.n	8008ada <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	79fa      	ldrb	r2, [r7, #7]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d101      	bne.n	8008ad4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	e006      	b.n	8008ae2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1ef      	bne.n	8008ac0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20008028 	.word	0x20008028

08008af4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008afa:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <pbuf_free_ooseq+0x38>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b00:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <pbuf_free_ooseq+0x3c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	607b      	str	r3, [r7, #4]
 8008b06:	e00a      	b.n	8008b1e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f002 fbad 	bl	800b270 <tcp_free_ooseq>
      return;
 8008b16:	e005      	b.n	8008b24 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	607b      	str	r3, [r7, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1f1      	bne.n	8008b08 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20008031 	.word	0x20008031
 8008b30:	20008040 	.word	0x20008040

08008b34 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008b38:	4b03      	ldr	r3, [pc, #12]	; (8008b48 <pbuf_pool_is_empty+0x14>)
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008b3e:	bf00      	nop
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	20008031 	.word	0x20008031

08008b4c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4611      	mov	r1, r2
 8008b58:	461a      	mov	r2, r3
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	80fb      	strh	r3, [r7, #6]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	88fa      	ldrh	r2, [r7, #6]
 8008b72:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	88ba      	ldrh	r2, [r7, #4]
 8008b78:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008b7a:	8b3b      	ldrh	r3, [r7, #24]
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	7f3a      	ldrb	r2, [r7, #28]
 8008b86:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	73da      	strb	r2, [r3, #15]
}
 8008b94:	bf00      	nop
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b08c      	sub	sp, #48	; 0x30
 8008ba4:	af02      	add	r7, sp, #8
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	71fb      	strb	r3, [r7, #7]
 8008baa:	460b      	mov	r3, r1
 8008bac:	80bb      	strh	r3, [r7, #4]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008bb6:	887b      	ldrh	r3, [r7, #2]
 8008bb8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008bbc:	d07f      	beq.n	8008cbe <pbuf_alloc+0x11e>
 8008bbe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008bc2:	f300 80c8 	bgt.w	8008d56 <pbuf_alloc+0x1b6>
 8008bc6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008bca:	d010      	beq.n	8008bee <pbuf_alloc+0x4e>
 8008bcc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008bd0:	f300 80c1 	bgt.w	8008d56 <pbuf_alloc+0x1b6>
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d002      	beq.n	8008bde <pbuf_alloc+0x3e>
 8008bd8:	2b41      	cmp	r3, #65	; 0x41
 8008bda:	f040 80bc 	bne.w	8008d56 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008bde:	887a      	ldrh	r2, [r7, #2]
 8008be0:	88bb      	ldrh	r3, [r7, #4]
 8008be2:	4619      	mov	r1, r3
 8008be4:	2000      	movs	r0, #0
 8008be6:	f000 f8d1 	bl	8008d8c <pbuf_alloc_reference>
 8008bea:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008bec:	e0bd      	b.n	8008d6a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008bf6:	88bb      	ldrh	r3, [r7, #4]
 8008bf8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008bfa:	2008      	movs	r0, #8
 8008bfc:	f7ff fbce 	bl	800839c <memp_malloc>
 8008c00:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d109      	bne.n	8008c1c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008c08:	f7ff ff94 	bl	8008b34 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <pbuf_alloc+0x78>
            pbuf_free(p);
 8008c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c14:	f000 faa8 	bl	8009168 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e0a7      	b.n	8008d6c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008c1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c1e:	3303      	adds	r3, #3
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	f023 0303 	bic.w	r3, r3, #3
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	8b7a      	ldrh	r2, [r7, #26]
 8008c30:	4293      	cmp	r3, r2
 8008c32:	bf28      	it	cs
 8008c34:	4613      	movcs	r3, r2
 8008c36:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008c38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c3a:	3310      	adds	r3, #16
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	4413      	add	r3, r2
 8008c40:	3303      	adds	r3, #3
 8008c42:	f023 0303 	bic.w	r3, r3, #3
 8008c46:	4618      	mov	r0, r3
 8008c48:	89f9      	ldrh	r1, [r7, #14]
 8008c4a:	8b7a      	ldrh	r2, [r7, #26]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	9301      	str	r3, [sp, #4]
 8008c50:	887b      	ldrh	r3, [r7, #2]
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	460b      	mov	r3, r1
 8008c56:	4601      	mov	r1, r0
 8008c58:	6938      	ldr	r0, [r7, #16]
 8008c5a:	f7ff ff77 	bl	8008b4c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <pbuf_alloc+0xd8>
 8008c6a:	4b42      	ldr	r3, [pc, #264]	; (8008d74 <pbuf_alloc+0x1d4>)
 8008c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c70:	4941      	ldr	r1, [pc, #260]	; (8008d78 <pbuf_alloc+0x1d8>)
 8008c72:	4842      	ldr	r0, [pc, #264]	; (8008d7c <pbuf_alloc+0x1dc>)
 8008c74:	f009 fc66 	bl	8012544 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008c78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c7a:	3303      	adds	r3, #3
 8008c7c:	f023 0303 	bic.w	r3, r3, #3
 8008c80:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008c84:	d106      	bne.n	8008c94 <pbuf_alloc+0xf4>
 8008c86:	4b3b      	ldr	r3, [pc, #236]	; (8008d74 <pbuf_alloc+0x1d4>)
 8008c88:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008c8c:	493c      	ldr	r1, [pc, #240]	; (8008d80 <pbuf_alloc+0x1e0>)
 8008c8e:	483b      	ldr	r0, [pc, #236]	; (8008d7c <pbuf_alloc+0x1dc>)
 8008c90:	f009 fc58 	bl	8012544 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9e:	e002      	b.n	8008ca6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008caa:	8b7a      	ldrh	r2, [r7, #26]
 8008cac:	89fb      	ldrh	r3, [r7, #14]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008cb6:	8b7b      	ldrh	r3, [r7, #26]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d19e      	bne.n	8008bfa <pbuf_alloc+0x5a>
      break;
 8008cbc:	e055      	b.n	8008d6a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008cbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008cc0:	3303      	adds	r3, #3
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	f023 0303 	bic.w	r3, r3, #3
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	88bb      	ldrh	r3, [r7, #4]
 8008ccc:	3303      	adds	r3, #3
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	f023 0303 	bic.w	r3, r3, #3
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	4413      	add	r3, r2
 8008cd8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008cda:	8b3b      	ldrh	r3, [r7, #24]
 8008cdc:	3310      	adds	r3, #16
 8008cde:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008ce0:	8b3a      	ldrh	r2, [r7, #24]
 8008ce2:	88bb      	ldrh	r3, [r7, #4]
 8008ce4:	3303      	adds	r3, #3
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d306      	bcc.n	8008cfc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008cee:	8afa      	ldrh	r2, [r7, #22]
 8008cf0:	88bb      	ldrh	r3, [r7, #4]
 8008cf2:	3303      	adds	r3, #3
 8008cf4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d201      	bcs.n	8008d00 <pbuf_alloc+0x160>
        return NULL;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e035      	b.n	8008d6c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008d00:	8afb      	ldrh	r3, [r7, #22]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff f9ba 	bl	800807c <mem_malloc>
 8008d08:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <pbuf_alloc+0x174>
        return NULL;
 8008d10:	2300      	movs	r3, #0
 8008d12:	e02b      	b.n	8008d6c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008d14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d16:	3310      	adds	r3, #16
 8008d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1a:	4413      	add	r3, r2
 8008d1c:	3303      	adds	r3, #3
 8008d1e:	f023 0303 	bic.w	r3, r3, #3
 8008d22:	4618      	mov	r0, r3
 8008d24:	88b9      	ldrh	r1, [r7, #4]
 8008d26:	88ba      	ldrh	r2, [r7, #4]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	887b      	ldrh	r3, [r7, #2]
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	460b      	mov	r3, r1
 8008d32:	4601      	mov	r1, r0
 8008d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d36:	f7ff ff09 	bl	8008b4c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d010      	beq.n	8008d68 <pbuf_alloc+0x1c8>
 8008d46:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <pbuf_alloc+0x1d4>)
 8008d48:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008d4c:	490d      	ldr	r1, [pc, #52]	; (8008d84 <pbuf_alloc+0x1e4>)
 8008d4e:	480b      	ldr	r0, [pc, #44]	; (8008d7c <pbuf_alloc+0x1dc>)
 8008d50:	f009 fbf8 	bl	8012544 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008d54:	e008      	b.n	8008d68 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008d56:	4b07      	ldr	r3, [pc, #28]	; (8008d74 <pbuf_alloc+0x1d4>)
 8008d58:	f240 1227 	movw	r2, #295	; 0x127
 8008d5c:	490a      	ldr	r1, [pc, #40]	; (8008d88 <pbuf_alloc+0x1e8>)
 8008d5e:	4807      	ldr	r0, [pc, #28]	; (8008d7c <pbuf_alloc+0x1dc>)
 8008d60:	f009 fbf0 	bl	8012544 <iprintf>
      return NULL;
 8008d64:	2300      	movs	r3, #0
 8008d66:	e001      	b.n	8008d6c <pbuf_alloc+0x1cc>
      break;
 8008d68:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3728      	adds	r7, #40	; 0x28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	080140d4 	.word	0x080140d4
 8008d78:	08014104 	.word	0x08014104
 8008d7c:	08014134 	.word	0x08014134
 8008d80:	0801415c 	.word	0x0801415c
 8008d84:	08014190 	.word	0x08014190
 8008d88:	080141bc 	.word	0x080141bc

08008d8c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	807b      	strh	r3, [r7, #2]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008d9c:	883b      	ldrh	r3, [r7, #0]
 8008d9e:	2b41      	cmp	r3, #65	; 0x41
 8008da0:	d009      	beq.n	8008db6 <pbuf_alloc_reference+0x2a>
 8008da2:	883b      	ldrh	r3, [r7, #0]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d006      	beq.n	8008db6 <pbuf_alloc_reference+0x2a>
 8008da8:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <pbuf_alloc_reference+0x5c>)
 8008daa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008dae:	490f      	ldr	r1, [pc, #60]	; (8008dec <pbuf_alloc_reference+0x60>)
 8008db0:	480f      	ldr	r0, [pc, #60]	; (8008df0 <pbuf_alloc_reference+0x64>)
 8008db2:	f009 fbc7 	bl	8012544 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008db6:	2007      	movs	r0, #7
 8008db8:	f7ff faf0 	bl	800839c <memp_malloc>
 8008dbc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e00b      	b.n	8008de0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008dc8:	8879      	ldrh	r1, [r7, #2]
 8008dca:	887a      	ldrh	r2, [r7, #2]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	883b      	ldrh	r3, [r7, #0]
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f7ff feb7 	bl	8008b4c <pbuf_init_alloced_pbuf>
  return p;
 8008dde:	68fb      	ldr	r3, [r7, #12]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	080140d4 	.word	0x080140d4
 8008dec:	080141d8 	.word	0x080141d8
 8008df0:	08014134 	.word	0x08014134

08008df4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	607b      	str	r3, [r7, #4]
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]
 8008e00:	460b      	mov	r3, r1
 8008e02:	81bb      	strh	r3, [r7, #12]
 8008e04:	4613      	mov	r3, r2
 8008e06:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008e0c:	8a7b      	ldrh	r3, [r7, #18]
 8008e0e:	3303      	adds	r3, #3
 8008e10:	f023 0203 	bic.w	r2, r3, #3
 8008e14:	89bb      	ldrh	r3, [r7, #12]
 8008e16:	441a      	add	r2, r3
 8008e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d901      	bls.n	8008e22 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e018      	b.n	8008e54 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d007      	beq.n	8008e38 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008e28:	8a7b      	ldrh	r3, [r7, #18]
 8008e2a:	3303      	adds	r3, #3
 8008e2c:	f023 0303 	bic.w	r3, r3, #3
 8008e30:	6a3a      	ldr	r2, [r7, #32]
 8008e32:	4413      	add	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]
 8008e36:	e001      	b.n	8008e3c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	89b9      	ldrh	r1, [r7, #12]
 8008e40:	89ba      	ldrh	r2, [r7, #12]
 8008e42:	2302      	movs	r3, #2
 8008e44:	9301      	str	r3, [sp, #4]
 8008e46:	897b      	ldrh	r3, [r7, #10]
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	6979      	ldr	r1, [r7, #20]
 8008e4e:	f7ff fe7d 	bl	8008b4c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008e52:	687b      	ldr	r3, [r7, #4]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d106      	bne.n	8008e7c <pbuf_realloc+0x20>
 8008e6e:	4b3a      	ldr	r3, [pc, #232]	; (8008f58 <pbuf_realloc+0xfc>)
 8008e70:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008e74:	4939      	ldr	r1, [pc, #228]	; (8008f5c <pbuf_realloc+0x100>)
 8008e76:	483a      	ldr	r0, [pc, #232]	; (8008f60 <pbuf_realloc+0x104>)
 8008e78:	f009 fb64 	bl	8012544 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	891b      	ldrh	r3, [r3, #8]
 8008e80:	887a      	ldrh	r2, [r7, #2]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d263      	bcs.n	8008f4e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	891a      	ldrh	r2, [r3, #8]
 8008e8a:	887b      	ldrh	r3, [r7, #2]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008e90:	887b      	ldrh	r3, [r7, #2]
 8008e92:	817b      	strh	r3, [r7, #10]
  q = p;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008e98:	e018      	b.n	8008ecc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	895b      	ldrh	r3, [r3, #10]
 8008e9e:	897a      	ldrh	r2, [r7, #10]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	891a      	ldrh	r2, [r3, #8]
 8008ea8:	893b      	ldrh	r3, [r7, #8]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d106      	bne.n	8008ecc <pbuf_realloc+0x70>
 8008ebe:	4b26      	ldr	r3, [pc, #152]	; (8008f58 <pbuf_realloc+0xfc>)
 8008ec0:	f240 12af 	movw	r2, #431	; 0x1af
 8008ec4:	4927      	ldr	r1, [pc, #156]	; (8008f64 <pbuf_realloc+0x108>)
 8008ec6:	4826      	ldr	r0, [pc, #152]	; (8008f60 <pbuf_realloc+0x104>)
 8008ec8:	f009 fb3c 	bl	8012544 <iprintf>
  while (rem_len > q->len) {
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	895b      	ldrh	r3, [r3, #10]
 8008ed0:	897a      	ldrh	r2, [r7, #10]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d8e1      	bhi.n	8008e9a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	7b1b      	ldrb	r3, [r3, #12]
 8008eda:	f003 030f 	and.w	r3, r3, #15
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d121      	bne.n	8008f26 <pbuf_realloc+0xca>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	895b      	ldrh	r3, [r3, #10]
 8008ee6:	897a      	ldrh	r2, [r7, #10]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d01c      	beq.n	8008f26 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	7b5b      	ldrb	r3, [r3, #13]
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d116      	bne.n	8008f26 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	897b      	ldrh	r3, [r7, #10]
 8008f04:	4413      	add	r3, r2
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	4619      	mov	r1, r3
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f7fe ffba 	bl	8007e84 <mem_trim>
 8008f10:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d106      	bne.n	8008f26 <pbuf_realloc+0xca>
 8008f18:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <pbuf_realloc+0xfc>)
 8008f1a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008f1e:	4912      	ldr	r1, [pc, #72]	; (8008f68 <pbuf_realloc+0x10c>)
 8008f20:	480f      	ldr	r0, [pc, #60]	; (8008f60 <pbuf_realloc+0x104>)
 8008f22:	f009 fb0f 	bl	8012544 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	897a      	ldrh	r2, [r7, #10]
 8008f2a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	895a      	ldrh	r2, [r3, #10]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d004      	beq.n	8008f46 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 f911 	bl	8009168 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	e000      	b.n	8008f50 <pbuf_realloc+0xf4>
    return;
 8008f4e:	bf00      	nop

}
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	080140d4 	.word	0x080140d4
 8008f5c:	080141ec 	.word	0x080141ec
 8008f60:	08014134 	.word	0x08014134
 8008f64:	08014204 	.word	0x08014204
 8008f68:	0801421c 	.word	0x0801421c

08008f6c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4613      	mov	r3, r2
 8008f78:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <pbuf_add_header_impl+0x22>
 8008f80:	4b2b      	ldr	r3, [pc, #172]	; (8009030 <pbuf_add_header_impl+0xc4>)
 8008f82:	f240 12df 	movw	r2, #479	; 0x1df
 8008f86:	492b      	ldr	r1, [pc, #172]	; (8009034 <pbuf_add_header_impl+0xc8>)
 8008f88:	482b      	ldr	r0, [pc, #172]	; (8009038 <pbuf_add_header_impl+0xcc>)
 8008f8a:	f009 fadb 	bl	8012544 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <pbuf_add_header_impl+0x30>
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9a:	d301      	bcc.n	8008fa0 <pbuf_add_header_impl+0x34>
    return 1;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e043      	b.n	8009028 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <pbuf_add_header_impl+0x3e>
    return 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e03e      	b.n	8009028 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	891a      	ldrh	r2, [r3, #8]
 8008fb2:	8a7b      	ldrh	r3, [r7, #18]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	8a7a      	ldrh	r2, [r7, #18]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d901      	bls.n	8008fc2 <pbuf_add_header_impl+0x56>
    return 1;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e032      	b.n	8009028 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	7b1b      	ldrb	r3, [r3, #12]
 8008fc6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008fc8:	8a3b      	ldrh	r3, [r7, #16]
 8008fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00c      	beq.n	8008fec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	425b      	negs	r3, r3
 8008fda:	4413      	add	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3310      	adds	r3, #16
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d20d      	bcs.n	8009004 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e01d      	b.n	8009028 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d006      	beq.n	8009000 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	425b      	negs	r3, r3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e001      	b.n	8009004 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009000:	2301      	movs	r3, #1
 8009002:	e011      	b.n	8009028 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	895a      	ldrh	r2, [r3, #10]
 800900e:	8a7b      	ldrh	r3, [r7, #18]
 8009010:	4413      	add	r3, r2
 8009012:	b29a      	uxth	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	891a      	ldrh	r2, [r3, #8]
 800901c:	8a7b      	ldrh	r3, [r7, #18]
 800901e:	4413      	add	r3, r2
 8009020:	b29a      	uxth	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	811a      	strh	r2, [r3, #8]


  return 0;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	080140d4 	.word	0x080140d4
 8009034:	08014238 	.word	0x08014238
 8009038:	08014134 	.word	0x08014134

0800903c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009046:	2200      	movs	r2, #0
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff ff8e 	bl	8008f6c <pbuf_add_header_impl>
 8009050:	4603      	mov	r3, r0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d106      	bne.n	800907a <pbuf_remove_header+0x1e>
 800906c:	4b20      	ldr	r3, [pc, #128]	; (80090f0 <pbuf_remove_header+0x94>)
 800906e:	f240 224b 	movw	r2, #587	; 0x24b
 8009072:	4920      	ldr	r1, [pc, #128]	; (80090f4 <pbuf_remove_header+0x98>)
 8009074:	4820      	ldr	r0, [pc, #128]	; (80090f8 <pbuf_remove_header+0x9c>)
 8009076:	f009 fa65 	bl	8012544 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <pbuf_remove_header+0x2c>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009086:	d301      	bcc.n	800908c <pbuf_remove_header+0x30>
    return 1;
 8009088:	2301      	movs	r3, #1
 800908a:	e02c      	b.n	80090e6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <pbuf_remove_header+0x3a>
    return 0;
 8009092:	2300      	movs	r3, #0
 8009094:	e027      	b.n	80090e6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	895b      	ldrh	r3, [r3, #10]
 800909e:	89fa      	ldrh	r2, [r7, #14]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d908      	bls.n	80090b6 <pbuf_remove_header+0x5a>
 80090a4:	4b12      	ldr	r3, [pc, #72]	; (80090f0 <pbuf_remove_header+0x94>)
 80090a6:	f240 2255 	movw	r2, #597	; 0x255
 80090aa:	4914      	ldr	r1, [pc, #80]	; (80090fc <pbuf_remove_header+0xa0>)
 80090ac:	4812      	ldr	r0, [pc, #72]	; (80090f8 <pbuf_remove_header+0x9c>)
 80090ae:	f009 fa49 	bl	8012544 <iprintf>
 80090b2:	2301      	movs	r3, #1
 80090b4:	e017      	b.n	80090e6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685a      	ldr	r2, [r3, #4]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	441a      	add	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	895a      	ldrh	r2, [r3, #10]
 80090cc:	89fb      	ldrh	r3, [r7, #14]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	891a      	ldrh	r2, [r3, #8]
 80090da:	89fb      	ldrh	r3, [r7, #14]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	b29a      	uxth	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	080140d4 	.word	0x080140d4
 80090f4:	08014238 	.word	0x08014238
 80090f8:	08014134 	.word	0x08014134
 80090fc:	08014244 	.word	0x08014244

08009100 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	807b      	strh	r3, [r7, #2]
 800910c:	4613      	mov	r3, r2
 800910e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009110:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009114:	2b00      	cmp	r3, #0
 8009116:	da08      	bge.n	800912a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009118:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800911c:	425b      	negs	r3, r3
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff ff9b 	bl	800905c <pbuf_remove_header>
 8009126:	4603      	mov	r3, r0
 8009128:	e007      	b.n	800913a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800912a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800912e:	787a      	ldrb	r2, [r7, #1]
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7ff ff1a 	bl	8008f6c <pbuf_add_header_impl>
 8009138:	4603      	mov	r3, r0
  }
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b082      	sub	sp, #8
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	460b      	mov	r3, r1
 800914c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800914e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009152:	2201      	movs	r2, #1
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff ffd2 	bl	8009100 <pbuf_header_impl>
 800915c:	4603      	mov	r3, r0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10b      	bne.n	800918e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d106      	bne.n	800918a <pbuf_free+0x22>
 800917c:	4b38      	ldr	r3, [pc, #224]	; (8009260 <pbuf_free+0xf8>)
 800917e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009182:	4938      	ldr	r1, [pc, #224]	; (8009264 <pbuf_free+0xfc>)
 8009184:	4838      	ldr	r0, [pc, #224]	; (8009268 <pbuf_free+0x100>)
 8009186:	f009 f9dd 	bl	8012544 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800918a:	2300      	movs	r3, #0
 800918c:	e063      	b.n	8009256 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009192:	e05c      	b.n	800924e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	7b9b      	ldrb	r3, [r3, #14]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d106      	bne.n	80091aa <pbuf_free+0x42>
 800919c:	4b30      	ldr	r3, [pc, #192]	; (8009260 <pbuf_free+0xf8>)
 800919e:	f240 22f1 	movw	r2, #753	; 0x2f1
 80091a2:	4932      	ldr	r1, [pc, #200]	; (800926c <pbuf_free+0x104>)
 80091a4:	4830      	ldr	r0, [pc, #192]	; (8009268 <pbuf_free+0x100>)
 80091a6:	f009 f9cd 	bl	8012544 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7b9b      	ldrb	r3, [r3, #14]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	739a      	strb	r2, [r3, #14]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	7b9b      	ldrb	r3, [r3, #14]
 80091ba:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80091bc:	7dbb      	ldrb	r3, [r7, #22]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d143      	bne.n	800924a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	7b1b      	ldrb	r3, [r3, #12]
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	7b5b      	ldrb	r3, [r3, #13]
 80091d6:	f003 0302 	and.w	r3, r3, #2
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d011      	beq.n	8009202 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <pbuf_free+0x90>
 80091ea:	4b1d      	ldr	r3, [pc, #116]	; (8009260 <pbuf_free+0xf8>)
 80091ec:	f240 22ff 	movw	r2, #767	; 0x2ff
 80091f0:	491f      	ldr	r1, [pc, #124]	; (8009270 <pbuf_free+0x108>)
 80091f2:	481d      	ldr	r0, [pc, #116]	; (8009268 <pbuf_free+0x100>)
 80091f4:	f009 f9a6 	bl	8012544 <iprintf>
        pc->custom_free_function(p);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4798      	blx	r3
 8009200:	e01d      	b.n	800923e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	2b02      	cmp	r3, #2
 8009206:	d104      	bne.n	8009212 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	2008      	movs	r0, #8
 800920c:	f7ff f936 	bl	800847c <memp_free>
 8009210:	e015      	b.n	800923e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d104      	bne.n	8009222 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	2007      	movs	r0, #7
 800921c:	f7ff f92e 	bl	800847c <memp_free>
 8009220:	e00d      	b.n	800923e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d103      	bne.n	8009230 <pbuf_free+0xc8>
          mem_free(p);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7fe fdc1 	bl	8007db0 <mem_free>
 800922e:	e006      	b.n	800923e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009230:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <pbuf_free+0xf8>)
 8009232:	f240 320f 	movw	r2, #783	; 0x30f
 8009236:	490f      	ldr	r1, [pc, #60]	; (8009274 <pbuf_free+0x10c>)
 8009238:	480b      	ldr	r0, [pc, #44]	; (8009268 <pbuf_free+0x100>)
 800923a:	f009 f983 	bl	8012544 <iprintf>
        }
      }
      count++;
 800923e:	7dfb      	ldrb	r3, [r7, #23]
 8009240:	3301      	adds	r3, #1
 8009242:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	607b      	str	r3, [r7, #4]
 8009248:	e001      	b.n	800924e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d19f      	bne.n	8009194 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009254:	7dfb      	ldrb	r3, [r7, #23]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	080140d4 	.word	0x080140d4
 8009264:	08014238 	.word	0x08014238
 8009268:	08014134 	.word	0x08014134
 800926c:	08014264 	.word	0x08014264
 8009270:	0801427c 	.word	0x0801427c
 8009274:	080142a0 	.word	0x080142a0

08009278 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009284:	e005      	b.n	8009292 <pbuf_clen+0x1a>
    ++len;
 8009286:	89fb      	ldrh	r3, [r7, #14]
 8009288:	3301      	adds	r3, #1
 800928a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1f6      	bne.n	8009286 <pbuf_clen+0xe>
  }
  return len;
 8009298:	89fb      	ldrh	r3, [r7, #14]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
	...

080092a8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d010      	beq.n	80092d8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	7b9b      	ldrb	r3, [r3, #14]
 80092ba:	3301      	adds	r3, #1
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	7b9b      	ldrb	r3, [r3, #14]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d106      	bne.n	80092d8 <pbuf_ref+0x30>
 80092ca:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <pbuf_ref+0x38>)
 80092cc:	f240 3242 	movw	r2, #834	; 0x342
 80092d0:	4904      	ldr	r1, [pc, #16]	; (80092e4 <pbuf_ref+0x3c>)
 80092d2:	4805      	ldr	r0, [pc, #20]	; (80092e8 <pbuf_ref+0x40>)
 80092d4:	f009 f936 	bl	8012544 <iprintf>
  }
}
 80092d8:	bf00      	nop
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	080140d4 	.word	0x080140d4
 80092e4:	080142b4 	.word	0x080142b4
 80092e8:	08014134 	.word	0x08014134

080092ec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <pbuf_cat+0x16>
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d107      	bne.n	8009312 <pbuf_cat+0x26>
 8009302:	4b20      	ldr	r3, [pc, #128]	; (8009384 <pbuf_cat+0x98>)
 8009304:	f240 3259 	movw	r2, #857	; 0x359
 8009308:	491f      	ldr	r1, [pc, #124]	; (8009388 <pbuf_cat+0x9c>)
 800930a:	4820      	ldr	r0, [pc, #128]	; (800938c <pbuf_cat+0xa0>)
 800930c:	f009 f91a 	bl	8012544 <iprintf>
 8009310:	e034      	b.n	800937c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	60fb      	str	r3, [r7, #12]
 8009316:	e00a      	b.n	800932e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	891a      	ldrh	r2, [r3, #8]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	891b      	ldrh	r3, [r3, #8]
 8009320:	4413      	add	r3, r2
 8009322:	b29a      	uxth	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1f0      	bne.n	8009318 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	891a      	ldrh	r2, [r3, #8]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	895b      	ldrh	r3, [r3, #10]
 800933e:	429a      	cmp	r2, r3
 8009340:	d006      	beq.n	8009350 <pbuf_cat+0x64>
 8009342:	4b10      	ldr	r3, [pc, #64]	; (8009384 <pbuf_cat+0x98>)
 8009344:	f240 3262 	movw	r2, #866	; 0x362
 8009348:	4911      	ldr	r1, [pc, #68]	; (8009390 <pbuf_cat+0xa4>)
 800934a:	4810      	ldr	r0, [pc, #64]	; (800938c <pbuf_cat+0xa0>)
 800934c:	f009 f8fa 	bl	8012544 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d006      	beq.n	8009366 <pbuf_cat+0x7a>
 8009358:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <pbuf_cat+0x98>)
 800935a:	f240 3263 	movw	r2, #867	; 0x363
 800935e:	490d      	ldr	r1, [pc, #52]	; (8009394 <pbuf_cat+0xa8>)
 8009360:	480a      	ldr	r0, [pc, #40]	; (800938c <pbuf_cat+0xa0>)
 8009362:	f009 f8ef 	bl	8012544 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	891a      	ldrh	r2, [r3, #8]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	891b      	ldrh	r3, [r3, #8]
 800936e:	4413      	add	r3, r2
 8009370:	b29a      	uxth	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	080140d4 	.word	0x080140d4
 8009388:	080142c8 	.word	0x080142c8
 800938c:	08014134 	.word	0x08014134
 8009390:	08014300 	.word	0x08014300
 8009394:	08014330 	.word	0x08014330

08009398 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80093a2:	2300      	movs	r3, #0
 80093a4:	617b      	str	r3, [r7, #20]
 80093a6:	2300      	movs	r3, #0
 80093a8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d008      	beq.n	80093c2 <pbuf_copy+0x2a>
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <pbuf_copy+0x2a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	891a      	ldrh	r2, [r3, #8]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	891b      	ldrh	r3, [r3, #8]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d209      	bcs.n	80093d6 <pbuf_copy+0x3e>
 80093c2:	4b57      	ldr	r3, [pc, #348]	; (8009520 <pbuf_copy+0x188>)
 80093c4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80093c8:	4956      	ldr	r1, [pc, #344]	; (8009524 <pbuf_copy+0x18c>)
 80093ca:	4857      	ldr	r0, [pc, #348]	; (8009528 <pbuf_copy+0x190>)
 80093cc:	f009 f8ba 	bl	8012544 <iprintf>
 80093d0:	f06f 030f 	mvn.w	r3, #15
 80093d4:	e09f      	b.n	8009516 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	895b      	ldrh	r3, [r3, #10]
 80093da:	461a      	mov	r2, r3
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	1ad2      	subs	r2, r2, r3
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	895b      	ldrh	r3, [r3, #10]
 80093e4:	4619      	mov	r1, r3
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	1acb      	subs	r3, r1, r3
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d306      	bcc.n	80093fc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	895b      	ldrh	r3, [r3, #10]
 80093f2:	461a      	mov	r2, r3
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	60fb      	str	r3, [r7, #12]
 80093fa:	e005      	b.n	8009408 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	895b      	ldrh	r3, [r3, #10]
 8009400:	461a      	mov	r2, r3
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	18d0      	adds	r0, r2, r3
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	4413      	add	r3, r2
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4619      	mov	r1, r3
 800941c:	f008 ff82 	bl	8012324 <memcpy>
    offset_to += len;
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4413      	add	r3, r2
 8009426:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	4413      	add	r3, r2
 800942e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	895b      	ldrh	r3, [r3, #10]
 8009434:	461a      	mov	r2, r3
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	4293      	cmp	r3, r2
 800943a:	d906      	bls.n	800944a <pbuf_copy+0xb2>
 800943c:	4b38      	ldr	r3, [pc, #224]	; (8009520 <pbuf_copy+0x188>)
 800943e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009442:	493a      	ldr	r1, [pc, #232]	; (800952c <pbuf_copy+0x194>)
 8009444:	4838      	ldr	r0, [pc, #224]	; (8009528 <pbuf_copy+0x190>)
 8009446:	f009 f87d 	bl	8012544 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	895b      	ldrh	r3, [r3, #10]
 800944e:	461a      	mov	r2, r3
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	4293      	cmp	r3, r2
 8009454:	d906      	bls.n	8009464 <pbuf_copy+0xcc>
 8009456:	4b32      	ldr	r3, [pc, #200]	; (8009520 <pbuf_copy+0x188>)
 8009458:	f240 32da 	movw	r2, #986	; 0x3da
 800945c:	4934      	ldr	r1, [pc, #208]	; (8009530 <pbuf_copy+0x198>)
 800945e:	4832      	ldr	r0, [pc, #200]	; (8009528 <pbuf_copy+0x190>)
 8009460:	f009 f870 	bl	8012544 <iprintf>
    if (offset_from >= p_from->len) {
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	895b      	ldrh	r3, [r3, #10]
 8009468:	461a      	mov	r2, r3
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	4293      	cmp	r3, r2
 800946e:	d304      	bcc.n	800947a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	895b      	ldrh	r3, [r3, #10]
 800947e:	461a      	mov	r2, r3
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	4293      	cmp	r3, r2
 8009484:	d114      	bne.n	80094b0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10c      	bne.n	80094b0 <pbuf_copy+0x118>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d009      	beq.n	80094b0 <pbuf_copy+0x118>
 800949c:	4b20      	ldr	r3, [pc, #128]	; (8009520 <pbuf_copy+0x188>)
 800949e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80094a2:	4924      	ldr	r1, [pc, #144]	; (8009534 <pbuf_copy+0x19c>)
 80094a4:	4820      	ldr	r0, [pc, #128]	; (8009528 <pbuf_copy+0x190>)
 80094a6:	f009 f84d 	bl	8012544 <iprintf>
 80094aa:	f06f 030f 	mvn.w	r3, #15
 80094ae:	e032      	b.n	8009516 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d013      	beq.n	80094de <pbuf_copy+0x146>
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	895a      	ldrh	r2, [r3, #10]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	891b      	ldrh	r3, [r3, #8]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d10d      	bne.n	80094de <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d009      	beq.n	80094de <pbuf_copy+0x146>
 80094ca:	4b15      	ldr	r3, [pc, #84]	; (8009520 <pbuf_copy+0x188>)
 80094cc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80094d0:	4919      	ldr	r1, [pc, #100]	; (8009538 <pbuf_copy+0x1a0>)
 80094d2:	4815      	ldr	r0, [pc, #84]	; (8009528 <pbuf_copy+0x190>)
 80094d4:	f009 f836 	bl	8012544 <iprintf>
 80094d8:	f06f 0305 	mvn.w	r3, #5
 80094dc:	e01b      	b.n	8009516 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d013      	beq.n	800950c <pbuf_copy+0x174>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	895a      	ldrh	r2, [r3, #10]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	891b      	ldrh	r3, [r3, #8]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d10d      	bne.n	800950c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d009      	beq.n	800950c <pbuf_copy+0x174>
 80094f8:	4b09      	ldr	r3, [pc, #36]	; (8009520 <pbuf_copy+0x188>)
 80094fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80094fe:	490e      	ldr	r1, [pc, #56]	; (8009538 <pbuf_copy+0x1a0>)
 8009500:	4809      	ldr	r0, [pc, #36]	; (8009528 <pbuf_copy+0x190>)
 8009502:	f009 f81f 	bl	8012544 <iprintf>
 8009506:	f06f 0305 	mvn.w	r3, #5
 800950a:	e004      	b.n	8009516 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	f47f af61 	bne.w	80093d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	080140d4 	.word	0x080140d4
 8009524:	0801437c 	.word	0x0801437c
 8009528:	08014134 	.word	0x08014134
 800952c:	080143ac 	.word	0x080143ac
 8009530:	080143c4 	.word	0x080143c4
 8009534:	080143e0 	.word	0x080143e0
 8009538:	080143f0 	.word	0x080143f0

0800953c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4611      	mov	r1, r2
 8009548:	461a      	mov	r2, r3
 800954a:	460b      	mov	r3, r1
 800954c:	80fb      	strh	r3, [r7, #6]
 800954e:	4613      	mov	r3, r2
 8009550:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d108      	bne.n	8009572 <pbuf_copy_partial+0x36>
 8009560:	4b2b      	ldr	r3, [pc, #172]	; (8009610 <pbuf_copy_partial+0xd4>)
 8009562:	f240 420a 	movw	r2, #1034	; 0x40a
 8009566:	492b      	ldr	r1, [pc, #172]	; (8009614 <pbuf_copy_partial+0xd8>)
 8009568:	482b      	ldr	r0, [pc, #172]	; (8009618 <pbuf_copy_partial+0xdc>)
 800956a:	f008 ffeb 	bl	8012544 <iprintf>
 800956e:	2300      	movs	r3, #0
 8009570:	e04a      	b.n	8009608 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d108      	bne.n	800958a <pbuf_copy_partial+0x4e>
 8009578:	4b25      	ldr	r3, [pc, #148]	; (8009610 <pbuf_copy_partial+0xd4>)
 800957a:	f240 420b 	movw	r2, #1035	; 0x40b
 800957e:	4927      	ldr	r1, [pc, #156]	; (800961c <pbuf_copy_partial+0xe0>)
 8009580:	4825      	ldr	r0, [pc, #148]	; (8009618 <pbuf_copy_partial+0xdc>)
 8009582:	f008 ffdf 	bl	8012544 <iprintf>
 8009586:	2300      	movs	r3, #0
 8009588:	e03e      	b.n	8009608 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	61fb      	str	r3, [r7, #28]
 800958e:	e034      	b.n	80095fa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009590:	88bb      	ldrh	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <pbuf_copy_partial+0x70>
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	895b      	ldrh	r3, [r3, #10]
 800959a:	88ba      	ldrh	r2, [r7, #4]
 800959c:	429a      	cmp	r2, r3
 800959e:	d305      	bcc.n	80095ac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	895b      	ldrh	r3, [r3, #10]
 80095a4:	88ba      	ldrh	r2, [r7, #4]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	80bb      	strh	r3, [r7, #4]
 80095aa:	e023      	b.n	80095f4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	895a      	ldrh	r2, [r3, #10]
 80095b0:	88bb      	ldrh	r3, [r7, #4]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80095b6:	8b3a      	ldrh	r2, [r7, #24]
 80095b8:	88fb      	ldrh	r3, [r7, #6]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d901      	bls.n	80095c2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80095be:	88fb      	ldrh	r3, [r7, #6]
 80095c0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80095c2:	8b7b      	ldrh	r3, [r7, #26]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	18d0      	adds	r0, r2, r3
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	88bb      	ldrh	r3, [r7, #4]
 80095ce:	4413      	add	r3, r2
 80095d0:	8b3a      	ldrh	r2, [r7, #24]
 80095d2:	4619      	mov	r1, r3
 80095d4:	f008 fea6 	bl	8012324 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80095d8:	8afa      	ldrh	r2, [r7, #22]
 80095da:	8b3b      	ldrh	r3, [r7, #24]
 80095dc:	4413      	add	r3, r2
 80095de:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80095e0:	8b7a      	ldrh	r2, [r7, #26]
 80095e2:	8b3b      	ldrh	r3, [r7, #24]
 80095e4:	4413      	add	r3, r2
 80095e6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80095e8:	88fa      	ldrh	r2, [r7, #6]
 80095ea:	8b3b      	ldrh	r3, [r7, #24]
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	61fb      	str	r3, [r7, #28]
 80095fa:	88fb      	ldrh	r3, [r7, #6]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <pbuf_copy_partial+0xca>
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1c4      	bne.n	8009590 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009606:	8afb      	ldrh	r3, [r7, #22]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	080140d4 	.word	0x080140d4
 8009614:	0801441c 	.word	0x0801441c
 8009618:	08014134 	.word	0x08014134
 800961c:	0801443c 	.word	0x0801443c

08009620 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	603a      	str	r2, [r7, #0]
 800962a:	71fb      	strb	r3, [r7, #7]
 800962c:	460b      	mov	r3, r1
 800962e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	8919      	ldrh	r1, [r3, #8]
 8009634:	88ba      	ldrh	r2, [r7, #4]
 8009636:	79fb      	ldrb	r3, [r7, #7]
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff fab1 	bl	8008ba0 <pbuf_alloc>
 800963e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <pbuf_clone+0x2a>
    return NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	e011      	b.n	800966e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff fea3 	bl	8009398 <pbuf_copy>
 8009652:	4603      	mov	r3, r0
 8009654:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009656:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d006      	beq.n	800966c <pbuf_clone+0x4c>
 800965e:	4b06      	ldr	r3, [pc, #24]	; (8009678 <pbuf_clone+0x58>)
 8009660:	f240 5224 	movw	r2, #1316	; 0x524
 8009664:	4905      	ldr	r1, [pc, #20]	; (800967c <pbuf_clone+0x5c>)
 8009666:	4806      	ldr	r0, [pc, #24]	; (8009680 <pbuf_clone+0x60>)
 8009668:	f008 ff6c 	bl	8012544 <iprintf>
  return q;
 800966c:	68fb      	ldr	r3, [r7, #12]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	080140d4 	.word	0x080140d4
 800967c:	08014548 	.word	0x08014548
 8009680:	08014134 	.word	0x08014134

08009684 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009688:	f008 ff74 	bl	8012574 <rand>
 800968c:	4603      	mov	r3, r0
 800968e:	b29b      	uxth	r3, r3
 8009690:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009694:	b29b      	uxth	r3, r3
 8009696:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800969a:	b29a      	uxth	r2, r3
 800969c:	4b01      	ldr	r3, [pc, #4]	; (80096a4 <tcp_init+0x20>)
 800969e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80096a0:	bf00      	nop
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	200000b0 	.word	0x200000b0

080096a8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	7d1b      	ldrb	r3, [r3, #20]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d105      	bne.n	80096c4 <tcp_free+0x1c>
 80096b8:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <tcp_free+0x2c>)
 80096ba:	22d4      	movs	r2, #212	; 0xd4
 80096bc:	4906      	ldr	r1, [pc, #24]	; (80096d8 <tcp_free+0x30>)
 80096be:	4807      	ldr	r0, [pc, #28]	; (80096dc <tcp_free+0x34>)
 80096c0:	f008 ff40 	bl	8012544 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	2001      	movs	r0, #1
 80096c8:	f7fe fed8 	bl	800847c <memp_free>
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	080145d4 	.word	0x080145d4
 80096d8:	08014604 	.word	0x08014604
 80096dc:	08014618 	.word	0x08014618

080096e0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	7d1b      	ldrb	r3, [r3, #20]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d105      	bne.n	80096fc <tcp_free_listen+0x1c>
 80096f0:	4b06      	ldr	r3, [pc, #24]	; (800970c <tcp_free_listen+0x2c>)
 80096f2:	22df      	movs	r2, #223	; 0xdf
 80096f4:	4906      	ldr	r1, [pc, #24]	; (8009710 <tcp_free_listen+0x30>)
 80096f6:	4807      	ldr	r0, [pc, #28]	; (8009714 <tcp_free_listen+0x34>)
 80096f8:	f008 ff24 	bl	8012544 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	2002      	movs	r0, #2
 8009700:	f7fe febc 	bl	800847c <memp_free>
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	080145d4 	.word	0x080145d4
 8009710:	08014640 	.word	0x08014640
 8009714:	08014618 	.word	0x08014618

08009718 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800971c:	f001 f85c 	bl	800a7d8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <tcp_tmr+0x28>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	b2da      	uxtb	r2, r3
 8009728:	4b05      	ldr	r3, [pc, #20]	; (8009740 <tcp_tmr+0x28>)
 800972a:	701a      	strb	r2, [r3, #0]
 800972c:	4b04      	ldr	r3, [pc, #16]	; (8009740 <tcp_tmr+0x28>)
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009738:	f000 fd0e 	bl	800a158 <tcp_slowtmr>
  }
}
 800973c:	bf00      	nop
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20008049 	.word	0x20008049

08009744 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d105      	bne.n	8009760 <tcp_remove_listener+0x1c>
 8009754:	4b0d      	ldr	r3, [pc, #52]	; (800978c <tcp_remove_listener+0x48>)
 8009756:	22ff      	movs	r2, #255	; 0xff
 8009758:	490d      	ldr	r1, [pc, #52]	; (8009790 <tcp_remove_listener+0x4c>)
 800975a:	480e      	ldr	r0, [pc, #56]	; (8009794 <tcp_remove_listener+0x50>)
 800975c:	f008 fef2 	bl	8012544 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	e00a      	b.n	800977c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	429a      	cmp	r2, r3
 800976e:	d102      	bne.n	8009776 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1f1      	bne.n	8009766 <tcp_remove_listener+0x22>
    }
  }
}
 8009782:	bf00      	nop
 8009784:	bf00      	nop
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	080145d4 	.word	0x080145d4
 8009790:	0801465c 	.word	0x0801465c
 8009794:	08014618 	.word	0x08014618

08009798 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <tcp_listen_closed+0x1c>
 80097a6:	4b14      	ldr	r3, [pc, #80]	; (80097f8 <tcp_listen_closed+0x60>)
 80097a8:	f240 1211 	movw	r2, #273	; 0x111
 80097ac:	4913      	ldr	r1, [pc, #76]	; (80097fc <tcp_listen_closed+0x64>)
 80097ae:	4814      	ldr	r0, [pc, #80]	; (8009800 <tcp_listen_closed+0x68>)
 80097b0:	f008 fec8 	bl	8012544 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7d1b      	ldrb	r3, [r3, #20]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d006      	beq.n	80097ca <tcp_listen_closed+0x32>
 80097bc:	4b0e      	ldr	r3, [pc, #56]	; (80097f8 <tcp_listen_closed+0x60>)
 80097be:	f44f 7289 	mov.w	r2, #274	; 0x112
 80097c2:	4910      	ldr	r1, [pc, #64]	; (8009804 <tcp_listen_closed+0x6c>)
 80097c4:	480e      	ldr	r0, [pc, #56]	; (8009800 <tcp_listen_closed+0x68>)
 80097c6:	f008 febd 	bl	8012544 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80097ca:	2301      	movs	r3, #1
 80097cc:	60fb      	str	r3, [r7, #12]
 80097ce:	e00b      	b.n	80097e8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80097d0:	4a0d      	ldr	r2, [pc, #52]	; (8009808 <tcp_listen_closed+0x70>)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	4618      	mov	r0, r3
 80097de:	f7ff ffb1 	bl	8009744 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d9f0      	bls.n	80097d0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80097ee:	bf00      	nop
 80097f0:	bf00      	nop
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	080145d4 	.word	0x080145d4
 80097fc:	08014684 	.word	0x08014684
 8009800:	08014618 	.word	0x08014618
 8009804:	08014690 	.word	0x08014690
 8009808:	080165b4 	.word	0x080165b4

0800980c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800980c:	b5b0      	push	{r4, r5, r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af04      	add	r7, sp, #16
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d106      	bne.n	800982c <tcp_close_shutdown+0x20>
 800981e:	4b63      	ldr	r3, [pc, #396]	; (80099ac <tcp_close_shutdown+0x1a0>)
 8009820:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009824:	4962      	ldr	r1, [pc, #392]	; (80099b0 <tcp_close_shutdown+0x1a4>)
 8009826:	4863      	ldr	r0, [pc, #396]	; (80099b4 <tcp_close_shutdown+0x1a8>)
 8009828:	f008 fe8c 	bl	8012544 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800982c:	78fb      	ldrb	r3, [r7, #3]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d066      	beq.n	8009900 <tcp_close_shutdown+0xf4>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	7d1b      	ldrb	r3, [r3, #20]
 8009836:	2b04      	cmp	r3, #4
 8009838:	d003      	beq.n	8009842 <tcp_close_shutdown+0x36>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	7d1b      	ldrb	r3, [r3, #20]
 800983e:	2b07      	cmp	r3, #7
 8009840:	d15e      	bne.n	8009900 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <tcp_close_shutdown+0x48>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800984e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009852:	d055      	beq.n	8009900 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	8b5b      	ldrh	r3, [r3, #26]
 8009858:	f003 0310 	and.w	r3, r3, #16
 800985c:	2b00      	cmp	r3, #0
 800985e:	d106      	bne.n	800986e <tcp_close_shutdown+0x62>
 8009860:	4b52      	ldr	r3, [pc, #328]	; (80099ac <tcp_close_shutdown+0x1a0>)
 8009862:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009866:	4954      	ldr	r1, [pc, #336]	; (80099b8 <tcp_close_shutdown+0x1ac>)
 8009868:	4852      	ldr	r0, [pc, #328]	; (80099b4 <tcp_close_shutdown+0x1a8>)
 800986a:	f008 fe6b 	bl	8012544 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009876:	687d      	ldr	r5, [r7, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3304      	adds	r3, #4
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	8ad2      	ldrh	r2, [r2, #22]
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	8b09      	ldrh	r1, [r1, #24]
 8009884:	9102      	str	r1, [sp, #8]
 8009886:	9201      	str	r2, [sp, #4]
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	462b      	mov	r3, r5
 800988c:	4622      	mov	r2, r4
 800988e:	4601      	mov	r1, r0
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f005 fd59 	bl	800f348 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f001 fb36 	bl	800af08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800989c:	4b47      	ldr	r3, [pc, #284]	; (80099bc <tcp_close_shutdown+0x1b0>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d105      	bne.n	80098b2 <tcp_close_shutdown+0xa6>
 80098a6:	4b45      	ldr	r3, [pc, #276]	; (80099bc <tcp_close_shutdown+0x1b0>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	4a43      	ldr	r2, [pc, #268]	; (80099bc <tcp_close_shutdown+0x1b0>)
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	e013      	b.n	80098da <tcp_close_shutdown+0xce>
 80098b2:	4b42      	ldr	r3, [pc, #264]	; (80099bc <tcp_close_shutdown+0x1b0>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	e00c      	b.n	80098d4 <tcp_close_shutdown+0xc8>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d104      	bne.n	80098ce <tcp_close_shutdown+0xc2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68da      	ldr	r2, [r3, #12]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	60da      	str	r2, [r3, #12]
 80098cc:	e005      	b.n	80098da <tcp_close_shutdown+0xce>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1ef      	bne.n	80098ba <tcp_close_shutdown+0xae>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	60da      	str	r2, [r3, #12]
 80098e0:	4b37      	ldr	r3, [pc, #220]	; (80099c0 <tcp_close_shutdown+0x1b4>)
 80098e2:	2201      	movs	r2, #1
 80098e4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80098e6:	4b37      	ldr	r3, [pc, #220]	; (80099c4 <tcp_close_shutdown+0x1b8>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d102      	bne.n	80098f6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80098f0:	f003 ffce 	bl	800d890 <tcp_trigger_input_pcb_close>
 80098f4:	e002      	b.n	80098fc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7ff fed6 	bl	80096a8 <tcp_free>
      }
      return ERR_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	e050      	b.n	80099a2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	7d1b      	ldrb	r3, [r3, #20]
 8009904:	2b02      	cmp	r3, #2
 8009906:	d03b      	beq.n	8009980 <tcp_close_shutdown+0x174>
 8009908:	2b02      	cmp	r3, #2
 800990a:	dc44      	bgt.n	8009996 <tcp_close_shutdown+0x18a>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <tcp_close_shutdown+0x10a>
 8009910:	2b01      	cmp	r3, #1
 8009912:	d02a      	beq.n	800996a <tcp_close_shutdown+0x15e>
 8009914:	e03f      	b.n	8009996 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	8adb      	ldrh	r3, [r3, #22]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d021      	beq.n	8009962 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800991e:	4b2a      	ldr	r3, [pc, #168]	; (80099c8 <tcp_close_shutdown+0x1bc>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	429a      	cmp	r2, r3
 8009926:	d105      	bne.n	8009934 <tcp_close_shutdown+0x128>
 8009928:	4b27      	ldr	r3, [pc, #156]	; (80099c8 <tcp_close_shutdown+0x1bc>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	4a26      	ldr	r2, [pc, #152]	; (80099c8 <tcp_close_shutdown+0x1bc>)
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	e013      	b.n	800995c <tcp_close_shutdown+0x150>
 8009934:	4b24      	ldr	r3, [pc, #144]	; (80099c8 <tcp_close_shutdown+0x1bc>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60bb      	str	r3, [r7, #8]
 800993a:	e00c      	b.n	8009956 <tcp_close_shutdown+0x14a>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	429a      	cmp	r2, r3
 8009944:	d104      	bne.n	8009950 <tcp_close_shutdown+0x144>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	60da      	str	r2, [r3, #12]
 800994e:	e005      	b.n	800995c <tcp_close_shutdown+0x150>
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	60bb      	str	r3, [r7, #8]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1ef      	bne.n	800993c <tcp_close_shutdown+0x130>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff fea0 	bl	80096a8 <tcp_free>
      break;
 8009968:	e01a      	b.n	80099a0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7ff ff14 	bl	8009798 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4816      	ldr	r0, [pc, #88]	; (80099cc <tcp_close_shutdown+0x1c0>)
 8009974:	f001 fb18 	bl	800afa8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff feb1 	bl	80096e0 <tcp_free_listen>
      break;
 800997e:	e00f      	b.n	80099a0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	480e      	ldr	r0, [pc, #56]	; (80099bc <tcp_close_shutdown+0x1b0>)
 8009984:	f001 fb10 	bl	800afa8 <tcp_pcb_remove>
 8009988:	4b0d      	ldr	r3, [pc, #52]	; (80099c0 <tcp_close_shutdown+0x1b4>)
 800998a:	2201      	movs	r2, #1
 800998c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff fe8a 	bl	80096a8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009994:	e004      	b.n	80099a0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f81a 	bl	80099d0 <tcp_close_shutdown_fin>
 800999c:	4603      	mov	r3, r0
 800999e:	e000      	b.n	80099a2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bdb0      	pop	{r4, r5, r7, pc}
 80099aa:	bf00      	nop
 80099ac:	080145d4 	.word	0x080145d4
 80099b0:	080146a8 	.word	0x080146a8
 80099b4:	08014618 	.word	0x08014618
 80099b8:	080146c8 	.word	0x080146c8
 80099bc:	20008040 	.word	0x20008040
 80099c0:	20008048 	.word	0x20008048
 80099c4:	20008080 	.word	0x20008080
 80099c8:	20008038 	.word	0x20008038
 80099cc:	2000803c 	.word	0x2000803c

080099d0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <tcp_close_shutdown_fin+0x1c>
 80099de:	4b2e      	ldr	r3, [pc, #184]	; (8009a98 <tcp_close_shutdown_fin+0xc8>)
 80099e0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80099e4:	492d      	ldr	r1, [pc, #180]	; (8009a9c <tcp_close_shutdown_fin+0xcc>)
 80099e6:	482e      	ldr	r0, [pc, #184]	; (8009aa0 <tcp_close_shutdown_fin+0xd0>)
 80099e8:	f008 fdac 	bl	8012544 <iprintf>

  switch (pcb->state) {
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	7d1b      	ldrb	r3, [r3, #20]
 80099f0:	2b07      	cmp	r3, #7
 80099f2:	d020      	beq.n	8009a36 <tcp_close_shutdown_fin+0x66>
 80099f4:	2b07      	cmp	r3, #7
 80099f6:	dc2b      	bgt.n	8009a50 <tcp_close_shutdown_fin+0x80>
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d002      	beq.n	8009a02 <tcp_close_shutdown_fin+0x32>
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d00d      	beq.n	8009a1c <tcp_close_shutdown_fin+0x4c>
 8009a00:	e026      	b.n	8009a50 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f004 fdae 	bl	800e564 <tcp_send_fin>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d11f      	bne.n	8009a54 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2205      	movs	r2, #5
 8009a18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a1a:	e01b      	b.n	8009a54 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f004 fda1 	bl	800e564 <tcp_send_fin>
 8009a22:	4603      	mov	r3, r0
 8009a24:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d114      	bne.n	8009a58 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2205      	movs	r2, #5
 8009a32:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a34:	e010      	b.n	8009a58 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f004 fd94 	bl	800e564 <tcp_send_fin>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d109      	bne.n	8009a5c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2209      	movs	r2, #9
 8009a4c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a4e:	e005      	b.n	8009a5c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	e01c      	b.n	8009a8e <tcp_close_shutdown_fin+0xbe>
      break;
 8009a54:	bf00      	nop
 8009a56:	e002      	b.n	8009a5e <tcp_close_shutdown_fin+0x8e>
      break;
 8009a58:	bf00      	nop
 8009a5a:	e000      	b.n	8009a5e <tcp_close_shutdown_fin+0x8e>
      break;
 8009a5c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d103      	bne.n	8009a6e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f004 feba 	bl	800e7e0 <tcp_output>
 8009a6c:	e00d      	b.n	8009a8a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a76:	d108      	bne.n	8009a8a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	8b5b      	ldrh	r3, [r3, #26]
 8009a7c:	f043 0308 	orr.w	r3, r3, #8
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	e001      	b.n	8009a8e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	080145d4 	.word	0x080145d4
 8009a9c:	08014684 	.word	0x08014684
 8009aa0:	08014618 	.word	0x08014618

08009aa4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d109      	bne.n	8009ac6 <tcp_close+0x22>
 8009ab2:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <tcp_close+0x4c>)
 8009ab4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009ab8:	490e      	ldr	r1, [pc, #56]	; (8009af4 <tcp_close+0x50>)
 8009aba:	480f      	ldr	r0, [pc, #60]	; (8009af8 <tcp_close+0x54>)
 8009abc:	f008 fd42 	bl	8012544 <iprintf>
 8009ac0:	f06f 030f 	mvn.w	r3, #15
 8009ac4:	e00f      	b.n	8009ae6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	7d1b      	ldrb	r3, [r3, #20]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d006      	beq.n	8009adc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	8b5b      	ldrh	r3, [r3, #26]
 8009ad2:	f043 0310 	orr.w	r3, r3, #16
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009adc:	2101      	movs	r1, #1
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7ff fe94 	bl	800980c <tcp_close_shutdown>
 8009ae4:	4603      	mov	r3, r0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	080145d4 	.word	0x080145d4
 8009af4:	080146e4 	.word	0x080146e4
 8009af8:	08014618 	.word	0x08014618

08009afc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08e      	sub	sp, #56	; 0x38
 8009b00:	af04      	add	r7, sp, #16
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d107      	bne.n	8009b1c <tcp_abandon+0x20>
 8009b0c:	4b52      	ldr	r3, [pc, #328]	; (8009c58 <tcp_abandon+0x15c>)
 8009b0e:	f240 223d 	movw	r2, #573	; 0x23d
 8009b12:	4952      	ldr	r1, [pc, #328]	; (8009c5c <tcp_abandon+0x160>)
 8009b14:	4852      	ldr	r0, [pc, #328]	; (8009c60 <tcp_abandon+0x164>)
 8009b16:	f008 fd15 	bl	8012544 <iprintf>
 8009b1a:	e099      	b.n	8009c50 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	7d1b      	ldrb	r3, [r3, #20]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d106      	bne.n	8009b32 <tcp_abandon+0x36>
 8009b24:	4b4c      	ldr	r3, [pc, #304]	; (8009c58 <tcp_abandon+0x15c>)
 8009b26:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009b2a:	494e      	ldr	r1, [pc, #312]	; (8009c64 <tcp_abandon+0x168>)
 8009b2c:	484c      	ldr	r0, [pc, #304]	; (8009c60 <tcp_abandon+0x164>)
 8009b2e:	f008 fd09 	bl	8012544 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	7d1b      	ldrb	r3, [r3, #20]
 8009b36:	2b0a      	cmp	r3, #10
 8009b38:	d107      	bne.n	8009b4a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	484a      	ldr	r0, [pc, #296]	; (8009c68 <tcp_abandon+0x16c>)
 8009b3e:	f001 fa33 	bl	800afa8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff fdb0 	bl	80096a8 <tcp_free>
 8009b48:	e082      	b.n	8009c50 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b56:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b64:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	7d1b      	ldrb	r3, [r3, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d126      	bne.n	8009bc2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	8adb      	ldrh	r3, [r3, #22]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d02e      	beq.n	8009bda <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b7c:	4b3b      	ldr	r3, [pc, #236]	; (8009c6c <tcp_abandon+0x170>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d105      	bne.n	8009b92 <tcp_abandon+0x96>
 8009b86:	4b39      	ldr	r3, [pc, #228]	; (8009c6c <tcp_abandon+0x170>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	4a37      	ldr	r2, [pc, #220]	; (8009c6c <tcp_abandon+0x170>)
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	e013      	b.n	8009bba <tcp_abandon+0xbe>
 8009b92:	4b36      	ldr	r3, [pc, #216]	; (8009c6c <tcp_abandon+0x170>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	61fb      	str	r3, [r7, #28]
 8009b98:	e00c      	b.n	8009bb4 <tcp_abandon+0xb8>
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d104      	bne.n	8009bae <tcp_abandon+0xb2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68da      	ldr	r2, [r3, #12]
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	60da      	str	r2, [r3, #12]
 8009bac:	e005      	b.n	8009bba <tcp_abandon+0xbe>
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	61fb      	str	r3, [r7, #28]
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1ef      	bne.n	8009b9a <tcp_abandon+0x9e>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	60da      	str	r2, [r3, #12]
 8009bc0:	e00b      	b.n	8009bda <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	8adb      	ldrh	r3, [r3, #22]
 8009bca:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	4828      	ldr	r0, [pc, #160]	; (8009c70 <tcp_abandon+0x174>)
 8009bd0:	f001 f9ea 	bl	800afa8 <tcp_pcb_remove>
 8009bd4:	4b27      	ldr	r3, [pc, #156]	; (8009c74 <tcp_abandon+0x178>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d004      	beq.n	8009bec <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fed6 	bl	800a998 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d004      	beq.n	8009bfe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 fecd 	bl	800a998 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d004      	beq.n	8009c10 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fec4 	bl	800a998 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00e      	beq.n	8009c34 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	8b12      	ldrh	r2, [r2, #24]
 8009c20:	9202      	str	r2, [sp, #8]
 8009c22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009c24:	9201      	str	r2, [sp, #4]
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	69b9      	ldr	r1, [r7, #24]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f005 fb8a 	bl	800f348 <tcp_rst>
    }
    last_state = pcb->state;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	7d1b      	ldrb	r3, [r3, #20]
 8009c38:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7ff fd34 	bl	80096a8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d004      	beq.n	8009c50 <tcp_abandon+0x154>
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f06f 010c 	mvn.w	r1, #12
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	4798      	blx	r3
  }
}
 8009c50:	3728      	adds	r7, #40	; 0x28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	080145d4 	.word	0x080145d4
 8009c5c:	08014718 	.word	0x08014718
 8009c60:	08014618 	.word	0x08014618
 8009c64:	08014734 	.word	0x08014734
 8009c68:	20008044 	.word	0x20008044
 8009c6c:	20008038 	.word	0x20008038
 8009c70:	20008040 	.word	0x20008040
 8009c74:	20008048 	.word	0x20008048

08009c78 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009c80:	2101      	movs	r1, #1
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7ff ff3a 	bl	8009afc <tcp_abandon>
}
 8009c88:	bf00      	nop
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009c9e:	2304      	movs	r3, #4
 8009ca0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009ca8:	4b3e      	ldr	r3, [pc, #248]	; (8009da4 <tcp_bind+0x114>)
 8009caa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d109      	bne.n	8009cc6 <tcp_bind+0x36>
 8009cb2:	4b3d      	ldr	r3, [pc, #244]	; (8009da8 <tcp_bind+0x118>)
 8009cb4:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009cb8:	493c      	ldr	r1, [pc, #240]	; (8009dac <tcp_bind+0x11c>)
 8009cba:	483d      	ldr	r0, [pc, #244]	; (8009db0 <tcp_bind+0x120>)
 8009cbc:	f008 fc42 	bl	8012544 <iprintf>
 8009cc0:	f06f 030f 	mvn.w	r3, #15
 8009cc4:	e06a      	b.n	8009d9c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	7d1b      	ldrb	r3, [r3, #20]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d009      	beq.n	8009ce2 <tcp_bind+0x52>
 8009cce:	4b36      	ldr	r3, [pc, #216]	; (8009da8 <tcp_bind+0x118>)
 8009cd0:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009cd4:	4937      	ldr	r1, [pc, #220]	; (8009db4 <tcp_bind+0x124>)
 8009cd6:	4836      	ldr	r0, [pc, #216]	; (8009db0 <tcp_bind+0x120>)
 8009cd8:	f008 fc34 	bl	8012544 <iprintf>
 8009cdc:	f06f 0305 	mvn.w	r3, #5
 8009ce0:	e05c      	b.n	8009d9c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8009ce2:	88fb      	ldrh	r3, [r7, #6]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d109      	bne.n	8009cfc <tcp_bind+0x6c>
    port = tcp_new_port();
 8009ce8:	f000 f9f0 	bl	800a0cc <tcp_new_port>
 8009cec:	4603      	mov	r3, r0
 8009cee:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009cf0:	88fb      	ldrh	r3, [r7, #6]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d135      	bne.n	8009d62 <tcp_bind+0xd2>
      return ERR_BUF;
 8009cf6:	f06f 0301 	mvn.w	r3, #1
 8009cfa:	e04f      	b.n	8009d9c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
 8009d00:	e02b      	b.n	8009d5a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009d02:	4a2d      	ldr	r2, [pc, #180]	; (8009db8 <tcp_bind+0x128>)
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	61bb      	str	r3, [r7, #24]
 8009d0e:	e01e      	b.n	8009d4e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	8adb      	ldrh	r3, [r3, #22]
 8009d14:	88fa      	ldrh	r2, [r7, #6]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d116      	bne.n	8009d48 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009d1a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d010      	beq.n	8009d42 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00c      	beq.n	8009d42 <tcp_bind+0xb2>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d005      	beq.n	8009d42 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d102      	bne.n	8009d48 <tcp_bind+0xb8>
              return ERR_USE;
 8009d42:	f06f 0307 	mvn.w	r3, #7
 8009d46:	e029      	b.n	8009d9c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	61bb      	str	r3, [r7, #24]
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1dd      	bne.n	8009d10 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	3301      	adds	r3, #1
 8009d58:	61fb      	str	r3, [r7, #28]
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	dbcf      	blt.n	8009d02 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00c      	beq.n	8009d82 <tcp_bind+0xf2>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d008      	beq.n	8009d82 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d002      	beq.n	8009d7c <tcp_bind+0xec>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	e000      	b.n	8009d7e <tcp_bind+0xee>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	88fa      	ldrh	r2, [r7, #6]
 8009d86:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009d88:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <tcp_bind+0x12c>)
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	60da      	str	r2, [r3, #12]
 8009d90:	4a0a      	ldr	r2, [pc, #40]	; (8009dbc <tcp_bind+0x12c>)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6013      	str	r3, [r2, #0]
 8009d96:	f005 fc99 	bl	800f6cc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3720      	adds	r7, #32
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	080165dc 	.word	0x080165dc
 8009da8:	080145d4 	.word	0x080145d4
 8009dac:	08014768 	.word	0x08014768
 8009db0:	08014618 	.word	0x08014618
 8009db4:	08014780 	.word	0x08014780
 8009db8:	080165b4 	.word	0x080165b4
 8009dbc:	20008038 	.word	0x20008038

08009dc0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d106      	bne.n	8009de2 <tcp_accept_null+0x22>
 8009dd4:	4b07      	ldr	r3, [pc, #28]	; (8009df4 <tcp_accept_null+0x34>)
 8009dd6:	f240 320f 	movw	r2, #783	; 0x30f
 8009dda:	4907      	ldr	r1, [pc, #28]	; (8009df8 <tcp_accept_null+0x38>)
 8009ddc:	4807      	ldr	r0, [pc, #28]	; (8009dfc <tcp_accept_null+0x3c>)
 8009dde:	f008 fbb1 	bl	8012544 <iprintf>

  tcp_abort(pcb);
 8009de2:	68b8      	ldr	r0, [r7, #8]
 8009de4:	f7ff ff48 	bl	8009c78 <tcp_abort>

  return ERR_ABRT;
 8009de8:	f06f 030c 	mvn.w	r3, #12
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	080145d4 	.word	0x080145d4
 8009df8:	080147a8 	.word	0x080147a8
 8009dfc:	08014618 	.word	0x08014618

08009e00 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f806 	bl	8009e24 <tcp_listen_with_backlog_and_err>
 8009e18:	4603      	mov	r3, r0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b088      	sub	sp, #32
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009e32:	2300      	movs	r3, #0
 8009e34:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d109      	bne.n	8009e50 <tcp_listen_with_backlog_and_err+0x2c>
 8009e3c:	4b47      	ldr	r3, [pc, #284]	; (8009f5c <tcp_listen_with_backlog_and_err+0x138>)
 8009e3e:	f240 3259 	movw	r2, #857	; 0x359
 8009e42:	4947      	ldr	r1, [pc, #284]	; (8009f60 <tcp_listen_with_backlog_and_err+0x13c>)
 8009e44:	4847      	ldr	r0, [pc, #284]	; (8009f64 <tcp_listen_with_backlog_and_err+0x140>)
 8009e46:	f008 fb7d 	bl	8012544 <iprintf>
 8009e4a:	23f0      	movs	r3, #240	; 0xf0
 8009e4c:	76fb      	strb	r3, [r7, #27]
 8009e4e:	e079      	b.n	8009f44 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	7d1b      	ldrb	r3, [r3, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d009      	beq.n	8009e6c <tcp_listen_with_backlog_and_err+0x48>
 8009e58:	4b40      	ldr	r3, [pc, #256]	; (8009f5c <tcp_listen_with_backlog_and_err+0x138>)
 8009e5a:	f240 325a 	movw	r2, #858	; 0x35a
 8009e5e:	4942      	ldr	r1, [pc, #264]	; (8009f68 <tcp_listen_with_backlog_and_err+0x144>)
 8009e60:	4840      	ldr	r0, [pc, #256]	; (8009f64 <tcp_listen_with_backlog_and_err+0x140>)
 8009e62:	f008 fb6f 	bl	8012544 <iprintf>
 8009e66:	23f1      	movs	r3, #241	; 0xf1
 8009e68:	76fb      	strb	r3, [r7, #27]
 8009e6a:	e06b      	b.n	8009f44 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	7d1b      	ldrb	r3, [r3, #20]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d104      	bne.n	8009e7e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009e78:	23f7      	movs	r3, #247	; 0xf7
 8009e7a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009e7c:	e062      	b.n	8009f44 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009e7e:	2002      	movs	r0, #2
 8009e80:	f7fe fa8c 	bl	800839c <memp_malloc>
 8009e84:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009e8c:	23ff      	movs	r3, #255	; 0xff
 8009e8e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009e90:	e058      	b.n	8009f44 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	691a      	ldr	r2, [r3, #16]
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	8ada      	ldrh	r2, [r3, #22]
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	7d5a      	ldrb	r2, [r3, #21]
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	7a5a      	ldrb	r2, [r3, #9]
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	7ada      	ldrb	r2, [r3, #11]
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	7a9a      	ldrb	r2, [r3, #10]
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8adb      	ldrh	r3, [r3, #22]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d021      	beq.n	8009f22 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009ede:	4b23      	ldr	r3, [pc, #140]	; (8009f6c <tcp_listen_with_backlog_and_err+0x148>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d105      	bne.n	8009ef4 <tcp_listen_with_backlog_and_err+0xd0>
 8009ee8:	4b20      	ldr	r3, [pc, #128]	; (8009f6c <tcp_listen_with_backlog_and_err+0x148>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	4a1f      	ldr	r2, [pc, #124]	; (8009f6c <tcp_listen_with_backlog_and_err+0x148>)
 8009ef0:	6013      	str	r3, [r2, #0]
 8009ef2:	e013      	b.n	8009f1c <tcp_listen_with_backlog_and_err+0xf8>
 8009ef4:	4b1d      	ldr	r3, [pc, #116]	; (8009f6c <tcp_listen_with_backlog_and_err+0x148>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	e00c      	b.n	8009f16 <tcp_listen_with_backlog_and_err+0xf2>
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d104      	bne.n	8009f10 <tcp_listen_with_backlog_and_err+0xec>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	68da      	ldr	r2, [r3, #12]
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	60da      	str	r2, [r3, #12]
 8009f0e:	e005      	b.n	8009f1c <tcp_listen_with_backlog_and_err+0xf8>
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1ef      	bne.n	8009efc <tcp_listen_with_backlog_and_err+0xd8>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f7ff fbc0 	bl	80096a8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	4a11      	ldr	r2, [pc, #68]	; (8009f70 <tcp_listen_with_backlog_and_err+0x14c>)
 8009f2c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009f2e:	4b11      	ldr	r3, [pc, #68]	; (8009f74 <tcp_listen_with_backlog_and_err+0x150>)
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	60da      	str	r2, [r3, #12]
 8009f36:	4a0f      	ldr	r2, [pc, #60]	; (8009f74 <tcp_listen_with_backlog_and_err+0x150>)
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	f005 fbc6 	bl	800f6cc <tcp_timer_needed>
  res = ERR_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	7efa      	ldrb	r2, [r7, #27]
 8009f4e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009f50:	69fb      	ldr	r3, [r7, #28]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3720      	adds	r7, #32
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	080145d4 	.word	0x080145d4
 8009f60:	080147c8 	.word	0x080147c8
 8009f64:	08014618 	.word	0x08014618
 8009f68:	080147f8 	.word	0x080147f8
 8009f6c:	20008038 	.word	0x20008038
 8009f70:	08009dc1 	.word	0x08009dc1
 8009f74:	2000803c 	.word	0x2000803c

08009f78 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <tcp_update_rcv_ann_wnd+0x1c>
 8009f86:	4b25      	ldr	r3, [pc, #148]	; (800a01c <tcp_update_rcv_ann_wnd+0xa4>)
 8009f88:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009f8c:	4924      	ldr	r1, [pc, #144]	; (800a020 <tcp_update_rcv_ann_wnd+0xa8>)
 8009f8e:	4825      	ldr	r0, [pc, #148]	; (800a024 <tcp_update_rcv_ann_wnd+0xac>)
 8009f90:	f008 fad8 	bl	8012544 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009f9c:	4413      	add	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009fa8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009fac:	bf28      	it	cs
 8009fae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009fb2:	b292      	uxth	r2, r2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	db08      	blt.n	8009fd0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	e020      	b.n	800a012 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	dd03      	ble.n	8009fe6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009fe4:	e014      	b.n	800a010 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ff8:	d306      	bcc.n	800a008 <tcp_update_rcv_ann_wnd+0x90>
 8009ffa:	4b08      	ldr	r3, [pc, #32]	; (800a01c <tcp_update_rcv_ann_wnd+0xa4>)
 8009ffc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a000:	4909      	ldr	r1, [pc, #36]	; (800a028 <tcp_update_rcv_ann_wnd+0xb0>)
 800a002:	4808      	ldr	r0, [pc, #32]	; (800a024 <tcp_update_rcv_ann_wnd+0xac>)
 800a004:	f008 fa9e 	bl	8012544 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a010:	2300      	movs	r3, #0
  }
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	080145d4 	.word	0x080145d4
 800a020:	08014830 	.word	0x08014830
 800a024:	08014618 	.word	0x08014618
 800a028:	08014854 	.word	0x08014854

0800a02c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d107      	bne.n	800a04e <tcp_recved+0x22>
 800a03e:	4b1f      	ldr	r3, [pc, #124]	; (800a0bc <tcp_recved+0x90>)
 800a040:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a044:	491e      	ldr	r1, [pc, #120]	; (800a0c0 <tcp_recved+0x94>)
 800a046:	481f      	ldr	r0, [pc, #124]	; (800a0c4 <tcp_recved+0x98>)
 800a048:	f008 fa7c 	bl	8012544 <iprintf>
 800a04c:	e032      	b.n	800a0b4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	7d1b      	ldrb	r3, [r3, #20]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d106      	bne.n	800a064 <tcp_recved+0x38>
 800a056:	4b19      	ldr	r3, [pc, #100]	; (800a0bc <tcp_recved+0x90>)
 800a058:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a05c:	491a      	ldr	r1, [pc, #104]	; (800a0c8 <tcp_recved+0x9c>)
 800a05e:	4819      	ldr	r0, [pc, #100]	; (800a0c4 <tcp_recved+0x98>)
 800a060:	f008 fa70 	bl	8012544 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a068:	887b      	ldrh	r3, [r7, #2]
 800a06a:	4413      	add	r3, r2
 800a06c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a06e:	89fb      	ldrh	r3, [r7, #14]
 800a070:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a074:	d804      	bhi.n	800a080 <tcp_recved+0x54>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a07a:	89fa      	ldrh	r2, [r7, #14]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d204      	bcs.n	800a08a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a086:	851a      	strh	r2, [r3, #40]	; 0x28
 800a088:	e002      	b.n	800a090 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	89fa      	ldrh	r2, [r7, #14]
 800a08e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff ff71 	bl	8009f78 <tcp_update_rcv_ann_wnd>
 800a096:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a09e:	d309      	bcc.n	800a0b4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	8b5b      	ldrh	r3, [r3, #26]
 800a0a4:	f043 0302 	orr.w	r3, r3, #2
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f004 fb96 	bl	800e7e0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	080145d4 	.word	0x080145d4
 800a0c0:	08014870 	.word	0x08014870
 800a0c4:	08014618 	.word	0x08014618
 800a0c8:	08014888 	.word	0x08014888

0800a0cc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800a0d6:	4b1e      	ldr	r3, [pc, #120]	; (800a150 <tcp_new_port+0x84>)
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	4b1c      	ldr	r3, [pc, #112]	; (800a150 <tcp_new_port+0x84>)
 800a0e0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a0e2:	4b1b      	ldr	r3, [pc, #108]	; (800a150 <tcp_new_port+0x84>)
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d103      	bne.n	800a0f6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a0ee:	4b18      	ldr	r3, [pc, #96]	; (800a150 <tcp_new_port+0x84>)
 800a0f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a0f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	71fb      	strb	r3, [r7, #7]
 800a0fa:	e01e      	b.n	800a13a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	4a15      	ldr	r2, [pc, #84]	; (800a154 <tcp_new_port+0x88>)
 800a100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	e011      	b.n	800a12e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	8ada      	ldrh	r2, [r3, #22]
 800a10e:	4b10      	ldr	r3, [pc, #64]	; (800a150 <tcp_new_port+0x84>)
 800a110:	881b      	ldrh	r3, [r3, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d108      	bne.n	800a128 <tcp_new_port+0x5c>
        n++;
 800a116:	88bb      	ldrh	r3, [r7, #4]
 800a118:	3301      	adds	r3, #1
 800a11a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a11c:	88bb      	ldrh	r3, [r7, #4]
 800a11e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a122:	d3d8      	bcc.n	800a0d6 <tcp_new_port+0xa>
          return 0;
 800a124:	2300      	movs	r3, #0
 800a126:	e00d      	b.n	800a144 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	603b      	str	r3, [r7, #0]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1ea      	bne.n	800a10a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	3301      	adds	r3, #1
 800a138:	71fb      	strb	r3, [r7, #7]
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d9dd      	bls.n	800a0fc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a140:	4b03      	ldr	r3, [pc, #12]	; (800a150 <tcp_new_port+0x84>)
 800a142:	881b      	ldrh	r3, [r3, #0]
}
 800a144:	4618      	mov	r0, r3
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	200000b0 	.word	0x200000b0
 800a154:	080165b4 	.word	0x080165b4

0800a158 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a158:	b5b0      	push	{r4, r5, r7, lr}
 800a15a:	b090      	sub	sp, #64	; 0x40
 800a15c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a164:	4b94      	ldr	r3, [pc, #592]	; (800a3b8 <tcp_slowtmr+0x260>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3301      	adds	r3, #1
 800a16a:	4a93      	ldr	r2, [pc, #588]	; (800a3b8 <tcp_slowtmr+0x260>)
 800a16c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a16e:	4b93      	ldr	r3, [pc, #588]	; (800a3bc <tcp_slowtmr+0x264>)
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	b2da      	uxtb	r2, r3
 800a176:	4b91      	ldr	r3, [pc, #580]	; (800a3bc <tcp_slowtmr+0x264>)
 800a178:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a17e:	4b90      	ldr	r3, [pc, #576]	; (800a3c0 <tcp_slowtmr+0x268>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a184:	e29f      	b.n	800a6c6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	7d1b      	ldrb	r3, [r3, #20]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d106      	bne.n	800a19c <tcp_slowtmr+0x44>
 800a18e:	4b8d      	ldr	r3, [pc, #564]	; (800a3c4 <tcp_slowtmr+0x26c>)
 800a190:	f240 42be 	movw	r2, #1214	; 0x4be
 800a194:	498c      	ldr	r1, [pc, #560]	; (800a3c8 <tcp_slowtmr+0x270>)
 800a196:	488d      	ldr	r0, [pc, #564]	; (800a3cc <tcp_slowtmr+0x274>)
 800a198:	f008 f9d4 	bl	8012544 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d106      	bne.n	800a1b2 <tcp_slowtmr+0x5a>
 800a1a4:	4b87      	ldr	r3, [pc, #540]	; (800a3c4 <tcp_slowtmr+0x26c>)
 800a1a6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a1aa:	4989      	ldr	r1, [pc, #548]	; (800a3d0 <tcp_slowtmr+0x278>)
 800a1ac:	4887      	ldr	r0, [pc, #540]	; (800a3cc <tcp_slowtmr+0x274>)
 800a1ae:	f008 f9c9 	bl	8012544 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	7d1b      	ldrb	r3, [r3, #20]
 800a1b6:	2b0a      	cmp	r3, #10
 800a1b8:	d106      	bne.n	800a1c8 <tcp_slowtmr+0x70>
 800a1ba:	4b82      	ldr	r3, [pc, #520]	; (800a3c4 <tcp_slowtmr+0x26c>)
 800a1bc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a1c0:	4984      	ldr	r1, [pc, #528]	; (800a3d4 <tcp_slowtmr+0x27c>)
 800a1c2:	4882      	ldr	r0, [pc, #520]	; (800a3cc <tcp_slowtmr+0x274>)
 800a1c4:	f008 f9be 	bl	8012544 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ca:	7f9a      	ldrb	r2, [r3, #30]
 800a1cc:	4b7b      	ldr	r3, [pc, #492]	; (800a3bc <tcp_slowtmr+0x264>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d105      	bne.n	800a1e0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a1de:	e272      	b.n	800a6c6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a1e0:	4b76      	ldr	r3, [pc, #472]	; (800a3bc <tcp_slowtmr+0x264>)
 800a1e2:	781a      	ldrb	r2, [r3, #0]
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	7d1b      	ldrb	r3, [r3, #20]
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d10a      	bne.n	800a212 <tcp_slowtmr+0xba>
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a202:	2b05      	cmp	r3, #5
 800a204:	d905      	bls.n	800a212 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a20a:	3301      	adds	r3, #1
 800a20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a210:	e11e      	b.n	800a450 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a218:	2b0b      	cmp	r3, #11
 800a21a:	d905      	bls.n	800a228 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a220:	3301      	adds	r3, #1
 800a222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a226:	e113      	b.n	800a450 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d075      	beq.n	800a31e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a236:	2b00      	cmp	r3, #0
 800a238:	d006      	beq.n	800a248 <tcp_slowtmr+0xf0>
 800a23a:	4b62      	ldr	r3, [pc, #392]	; (800a3c4 <tcp_slowtmr+0x26c>)
 800a23c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a240:	4965      	ldr	r1, [pc, #404]	; (800a3d8 <tcp_slowtmr+0x280>)
 800a242:	4862      	ldr	r0, [pc, #392]	; (800a3cc <tcp_slowtmr+0x274>)
 800a244:	f008 f97e 	bl	8012544 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <tcp_slowtmr+0x106>
 800a250:	4b5c      	ldr	r3, [pc, #368]	; (800a3c4 <tcp_slowtmr+0x26c>)
 800a252:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a256:	4961      	ldr	r1, [pc, #388]	; (800a3dc <tcp_slowtmr+0x284>)
 800a258:	485c      	ldr	r0, [pc, #368]	; (800a3cc <tcp_slowtmr+0x274>)
 800a25a:	f008 f973 	bl	8012544 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a260:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a264:	2b0b      	cmp	r3, #11
 800a266:	d905      	bls.n	800a274 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a26c:	3301      	adds	r3, #1
 800a26e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a272:	e0ed      	b.n	800a450 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a276:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a27a:	3b01      	subs	r3, #1
 800a27c:	4a58      	ldr	r2, [pc, #352]	; (800a3e0 <tcp_slowtmr+0x288>)
 800a27e:	5cd3      	ldrb	r3, [r2, r3]
 800a280:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a284:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a288:	7c7a      	ldrb	r2, [r7, #17]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d907      	bls.n	800a29e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a290:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a294:	3301      	adds	r3, #1
 800a296:	b2da      	uxtb	r2, r3
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a2a4:	7c7a      	ldrb	r2, [r7, #17]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	f200 80d2 	bhi.w	800a450 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d108      	bne.n	800a2cc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a2ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2bc:	f005 f938 	bl	800f530 <tcp_zero_window_probe>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d014      	beq.n	800a2f0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	623b      	str	r3, [r7, #32]
 800a2ca:	e011      	b.n	800a2f0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2d6:	f003 fffd 	bl	800e2d4 <tcp_split_unsent_seg>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d107      	bne.n	800a2f0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a2e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2e2:	f004 fa7d 	bl	800e7e0 <tcp_output>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 80ac 	beq.w	800a450 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a302:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a306:	2b06      	cmp	r3, #6
 800a308:	f200 80a2 	bhi.w	800a450 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a312:	3301      	adds	r3, #1
 800a314:	b2da      	uxtb	r2, r3
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a31c:	e098      	b.n	800a450 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a320:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a324:	2b00      	cmp	r3, #0
 800a326:	db0f      	blt.n	800a348 <tcp_slowtmr+0x1f0>
 800a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a32e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a332:	4293      	cmp	r3, r2
 800a334:	d008      	beq.n	800a348 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	3301      	adds	r3, #1
 800a340:	b29b      	uxth	r3, r3
 800a342:	b21a      	sxth	r2, r3
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a354:	429a      	cmp	r2, r3
 800a356:	db7b      	blt.n	800a450 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a358:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a35a:	f004 fd33 	bl	800edc4 <tcp_rexmit_rto_prepare>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d007      	beq.n	800a374 <tcp_slowtmr+0x21c>
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d171      	bne.n	800a450 <tcp_slowtmr+0x2f8>
 800a36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a370:	2b00      	cmp	r3, #0
 800a372:	d06d      	beq.n	800a450 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	7d1b      	ldrb	r3, [r3, #20]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d03a      	beq.n	800a3f2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a382:	2b0c      	cmp	r3, #12
 800a384:	bf28      	it	cs
 800a386:	230c      	movcs	r3, #12
 800a388:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a390:	10db      	asrs	r3, r3, #3
 800a392:	b21b      	sxth	r3, r3
 800a394:	461a      	mov	r2, r3
 800a396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a398:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a39c:	4413      	add	r3, r2
 800a39e:	7efa      	ldrb	r2, [r7, #27]
 800a3a0:	4910      	ldr	r1, [pc, #64]	; (800a3e4 <tcp_slowtmr+0x28c>)
 800a3a2:	5c8a      	ldrb	r2, [r1, r2]
 800a3a4:	4093      	lsls	r3, r2
 800a3a6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	dc1a      	bgt.n	800a3e8 <tcp_slowtmr+0x290>
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	b21a      	sxth	r2, r3
 800a3b6:	e019      	b.n	800a3ec <tcp_slowtmr+0x294>
 800a3b8:	20008034 	.word	0x20008034
 800a3bc:	2000804a 	.word	0x2000804a
 800a3c0:	20008040 	.word	0x20008040
 800a3c4:	080145d4 	.word	0x080145d4
 800a3c8:	08014918 	.word	0x08014918
 800a3cc:	08014618 	.word	0x08014618
 800a3d0:	08014944 	.word	0x08014944
 800a3d4:	08014970 	.word	0x08014970
 800a3d8:	080149a0 	.word	0x080149a0
 800a3dc:	080149d4 	.word	0x080149d4
 800a3e0:	080165ac 	.word	0x080165ac
 800a3e4:	0801659c 	.word	0x0801659c
 800a3e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a400:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a404:	4293      	cmp	r3, r2
 800a406:	bf28      	it	cs
 800a408:	4613      	movcs	r3, r2
 800a40a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a40c:	8a7b      	ldrh	r3, [r7, #18]
 800a40e:	085b      	lsrs	r3, r3, #1
 800a410:	b29a      	uxth	r2, r3
 800a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a414:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a422:	005b      	lsls	r3, r3, #1
 800a424:	b29b      	uxth	r3, r3
 800a426:	429a      	cmp	r2, r3
 800a428:	d206      	bcs.n	800a438 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a42e:	005b      	lsls	r3, r3, #1
 800a430:	b29a      	uxth	r2, r3
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	2200      	movs	r2, #0
 800a446:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a44a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a44c:	f004 fd2a 	bl	800eea4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	7d1b      	ldrb	r3, [r3, #20]
 800a454:	2b06      	cmp	r3, #6
 800a456:	d111      	bne.n	800a47c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45a:	8b5b      	ldrh	r3, [r3, #26]
 800a45c:	f003 0310 	and.w	r3, r3, #16
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00b      	beq.n	800a47c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a464:	4b9d      	ldr	r3, [pc, #628]	; (800a6dc <tcp_slowtmr+0x584>)
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46a:	6a1b      	ldr	r3, [r3, #32]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	2b28      	cmp	r3, #40	; 0x28
 800a470:	d904      	bls.n	800a47c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a476:	3301      	adds	r3, #1
 800a478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47e:	7a5b      	ldrb	r3, [r3, #9]
 800a480:	f003 0308 	and.w	r3, r3, #8
 800a484:	2b00      	cmp	r3, #0
 800a486:	d04c      	beq.n	800a522 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a48c:	2b04      	cmp	r3, #4
 800a48e:	d003      	beq.n	800a498 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a494:	2b07      	cmp	r3, #7
 800a496:	d144      	bne.n	800a522 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a498:	4b90      	ldr	r3, [pc, #576]	; (800a6dc <tcp_slowtmr+0x584>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	6a1b      	ldr	r3, [r3, #32]
 800a4a0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4a8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a4ac:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a4b0:	498b      	ldr	r1, [pc, #556]	; (800a6e0 <tcp_slowtmr+0x588>)
 800a4b2:	fba1 1303 	umull	r1, r3, r1, r3
 800a4b6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d90a      	bls.n	800a4d2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a4c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a4d0:	e027      	b.n	800a522 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4d2:	4b82      	ldr	r3, [pc, #520]	; (800a6dc <tcp_slowtmr+0x584>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	4b7e      	ldr	r3, [pc, #504]	; (800a6e4 <tcp_slowtmr+0x58c>)
 800a4ec:	fb00 f303 	mul.w	r3, r0, r3
 800a4f0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a4f2:	497b      	ldr	r1, [pc, #492]	; (800a6e0 <tcp_slowtmr+0x588>)
 800a4f4:	fba1 1303 	umull	r1, r3, r1, r3
 800a4f8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d911      	bls.n	800a522 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a4fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a500:	f004 ffd6 	bl	800f4b0 <tcp_keepalive>
 800a504:	4603      	mov	r3, r0
 800a506:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a50a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d107      	bne.n	800a522 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a514:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a518:	3301      	adds	r3, #1
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a526:	2b00      	cmp	r3, #0
 800a528:	d011      	beq.n	800a54e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a52a:	4b6c      	ldr	r3, [pc, #432]	; (800a6dc <tcp_slowtmr+0x584>)
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	1ad2      	subs	r2, r2, r3
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a53a:	4619      	mov	r1, r3
 800a53c:	460b      	mov	r3, r1
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	440b      	add	r3, r1
 800a542:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a544:	429a      	cmp	r2, r3
 800a546:	d302      	bcc.n	800a54e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a54a:	f000 fe91 	bl	800b270 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a550:	7d1b      	ldrb	r3, [r3, #20]
 800a552:	2b03      	cmp	r3, #3
 800a554:	d10b      	bne.n	800a56e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a556:	4b61      	ldr	r3, [pc, #388]	; (800a6dc <tcp_slowtmr+0x584>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	2b28      	cmp	r3, #40	; 0x28
 800a562:	d904      	bls.n	800a56e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a568:	3301      	adds	r3, #1
 800a56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	7d1b      	ldrb	r3, [r3, #20]
 800a572:	2b09      	cmp	r3, #9
 800a574:	d10b      	bne.n	800a58e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a576:	4b59      	ldr	r3, [pc, #356]	; (800a6dc <tcp_slowtmr+0x584>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	2bf0      	cmp	r3, #240	; 0xf0
 800a582:	d904      	bls.n	800a58e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a588:	3301      	adds	r3, #1
 800a58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a58e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a592:	2b00      	cmp	r3, #0
 800a594:	d060      	beq.n	800a658 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a59c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a59e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5a0:	f000 fcb2 	bl	800af08 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d010      	beq.n	800a5cc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a5aa:	4b4f      	ldr	r3, [pc, #316]	; (800a6e8 <tcp_slowtmr+0x590>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d106      	bne.n	800a5c2 <tcp_slowtmr+0x46a>
 800a5b4:	4b4d      	ldr	r3, [pc, #308]	; (800a6ec <tcp_slowtmr+0x594>)
 800a5b6:	f240 526d 	movw	r2, #1389	; 0x56d
 800a5ba:	494d      	ldr	r1, [pc, #308]	; (800a6f0 <tcp_slowtmr+0x598>)
 800a5bc:	484d      	ldr	r0, [pc, #308]	; (800a6f4 <tcp_slowtmr+0x59c>)
 800a5be:	f007 ffc1 	bl	8012544 <iprintf>
        prev->next = pcb->next;
 800a5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c4:	68da      	ldr	r2, [r3, #12]
 800a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c8:	60da      	str	r2, [r3, #12]
 800a5ca:	e00f      	b.n	800a5ec <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a5cc:	4b46      	ldr	r3, [pc, #280]	; (800a6e8 <tcp_slowtmr+0x590>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d006      	beq.n	800a5e4 <tcp_slowtmr+0x48c>
 800a5d6:	4b45      	ldr	r3, [pc, #276]	; (800a6ec <tcp_slowtmr+0x594>)
 800a5d8:	f240 5271 	movw	r2, #1393	; 0x571
 800a5dc:	4946      	ldr	r1, [pc, #280]	; (800a6f8 <tcp_slowtmr+0x5a0>)
 800a5de:	4845      	ldr	r0, [pc, #276]	; (800a6f4 <tcp_slowtmr+0x59c>)
 800a5e0:	f007 ffb0 	bl	8012544 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	4a3f      	ldr	r2, [pc, #252]	; (800a6e8 <tcp_slowtmr+0x590>)
 800a5ea:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a5ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d013      	beq.n	800a61c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a5fc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a600:	3304      	adds	r3, #4
 800a602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a604:	8ad2      	ldrh	r2, [r2, #22]
 800a606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a608:	8b09      	ldrh	r1, [r1, #24]
 800a60a:	9102      	str	r1, [sp, #8]
 800a60c:	9201      	str	r2, [sp, #4]
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	462b      	mov	r3, r5
 800a612:	4622      	mov	r2, r4
 800a614:	4601      	mov	r1, r0
 800a616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a618:	f004 fe96 	bl	800f348 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	7d1b      	ldrb	r3, [r3, #20]
 800a626:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a632:	6838      	ldr	r0, [r7, #0]
 800a634:	f7ff f838 	bl	80096a8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a638:	4b30      	ldr	r3, [pc, #192]	; (800a6fc <tcp_slowtmr+0x5a4>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d004      	beq.n	800a64e <tcp_slowtmr+0x4f6>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f06f 010c 	mvn.w	r1, #12
 800a64a:	68b8      	ldr	r0, [r7, #8]
 800a64c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a64e:	4b2b      	ldr	r3, [pc, #172]	; (800a6fc <tcp_slowtmr+0x5a4>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d037      	beq.n	800a6c6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a656:	e590      	b.n	800a17a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	7f1b      	ldrb	r3, [r3, #28]
 800a666:	3301      	adds	r3, #1
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	7f1a      	ldrb	r2, [r3, #28]
 800a672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a674:	7f5b      	ldrb	r3, [r3, #29]
 800a676:	429a      	cmp	r2, r3
 800a678:	d325      	bcc.n	800a6c6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	2200      	movs	r2, #0
 800a67e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a680:	4b1e      	ldr	r3, [pc, #120]	; (800a6fc <tcp_slowtmr+0x5a4>)
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00b      	beq.n	800a6a8 <tcp_slowtmr+0x550>
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a698:	6912      	ldr	r2, [r2, #16]
 800a69a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a69c:	4610      	mov	r0, r2
 800a69e:	4798      	blx	r3
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a6a6:	e002      	b.n	800a6ae <tcp_slowtmr+0x556>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <tcp_slowtmr+0x5a4>)
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d000      	beq.n	800a6b8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a6b6:	e560      	b.n	800a17a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a6b8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d102      	bne.n	800a6c6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a6c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6c2:	f004 f88d 	bl	800e7e0 <tcp_output>
  while (pcb != NULL) {
 800a6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f47f ad5c 	bne.w	800a186 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a6d2:	4b0b      	ldr	r3, [pc, #44]	; (800a700 <tcp_slowtmr+0x5a8>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a6d8:	e067      	b.n	800a7aa <tcp_slowtmr+0x652>
 800a6da:	bf00      	nop
 800a6dc:	20008034 	.word	0x20008034
 800a6e0:	10624dd3 	.word	0x10624dd3
 800a6e4:	000124f8 	.word	0x000124f8
 800a6e8:	20008040 	.word	0x20008040
 800a6ec:	080145d4 	.word	0x080145d4
 800a6f0:	08014a0c 	.word	0x08014a0c
 800a6f4:	08014618 	.word	0x08014618
 800a6f8:	08014a38 	.word	0x08014a38
 800a6fc:	20008048 	.word	0x20008048
 800a700:	20008044 	.word	0x20008044
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	7d1b      	ldrb	r3, [r3, #20]
 800a708:	2b0a      	cmp	r3, #10
 800a70a:	d006      	beq.n	800a71a <tcp_slowtmr+0x5c2>
 800a70c:	4b2b      	ldr	r3, [pc, #172]	; (800a7bc <tcp_slowtmr+0x664>)
 800a70e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a712:	492b      	ldr	r1, [pc, #172]	; (800a7c0 <tcp_slowtmr+0x668>)
 800a714:	482b      	ldr	r0, [pc, #172]	; (800a7c4 <tcp_slowtmr+0x66c>)
 800a716:	f007 ff15 	bl	8012544 <iprintf>
    pcb_remove = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a720:	4b29      	ldr	r3, [pc, #164]	; (800a7c8 <tcp_slowtmr+0x670>)
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	2bf0      	cmp	r3, #240	; 0xf0
 800a72c:	d904      	bls.n	800a738 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a72e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a732:	3301      	adds	r3, #1
 800a734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d02f      	beq.n	800a7a0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a742:	f000 fbe1 	bl	800af08 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d010      	beq.n	800a76e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a74c:	4b1f      	ldr	r3, [pc, #124]	; (800a7cc <tcp_slowtmr+0x674>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a752:	429a      	cmp	r2, r3
 800a754:	d106      	bne.n	800a764 <tcp_slowtmr+0x60c>
 800a756:	4b19      	ldr	r3, [pc, #100]	; (800a7bc <tcp_slowtmr+0x664>)
 800a758:	f240 52af 	movw	r2, #1455	; 0x5af
 800a75c:	491c      	ldr	r1, [pc, #112]	; (800a7d0 <tcp_slowtmr+0x678>)
 800a75e:	4819      	ldr	r0, [pc, #100]	; (800a7c4 <tcp_slowtmr+0x66c>)
 800a760:	f007 fef0 	bl	8012544 <iprintf>
        prev->next = pcb->next;
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	68da      	ldr	r2, [r3, #12]
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	60da      	str	r2, [r3, #12]
 800a76c:	e00f      	b.n	800a78e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a76e:	4b17      	ldr	r3, [pc, #92]	; (800a7cc <tcp_slowtmr+0x674>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a774:	429a      	cmp	r2, r3
 800a776:	d006      	beq.n	800a786 <tcp_slowtmr+0x62e>
 800a778:	4b10      	ldr	r3, [pc, #64]	; (800a7bc <tcp_slowtmr+0x664>)
 800a77a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a77e:	4915      	ldr	r1, [pc, #84]	; (800a7d4 <tcp_slowtmr+0x67c>)
 800a780:	4810      	ldr	r0, [pc, #64]	; (800a7c4 <tcp_slowtmr+0x66c>)
 800a782:	f007 fedf 	bl	8012544 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	4a10      	ldr	r2, [pc, #64]	; (800a7cc <tcp_slowtmr+0x674>)
 800a78c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a798:	69f8      	ldr	r0, [r7, #28]
 800a79a:	f7fe ff85 	bl	80096a8 <tcp_free>
 800a79e:	e004      	b.n	800a7aa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1a9      	bne.n	800a704 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a7b0:	bf00      	nop
 800a7b2:	bf00      	nop
 800a7b4:	3730      	adds	r7, #48	; 0x30
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	080145d4 	.word	0x080145d4
 800a7c0:	08014a64 	.word	0x08014a64
 800a7c4:	08014618 	.word	0x08014618
 800a7c8:	20008034 	.word	0x20008034
 800a7cc:	20008044 	.word	0x20008044
 800a7d0:	08014a94 	.word	0x08014a94
 800a7d4:	08014abc 	.word	0x08014abc

0800a7d8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a7de:	4b2d      	ldr	r3, [pc, #180]	; (800a894 <tcp_fasttmr+0xbc>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	4b2b      	ldr	r3, [pc, #172]	; (800a894 <tcp_fasttmr+0xbc>)
 800a7e8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a7ea:	4b2b      	ldr	r3, [pc, #172]	; (800a898 <tcp_fasttmr+0xc0>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a7f0:	e048      	b.n	800a884 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	7f9a      	ldrb	r2, [r3, #30]
 800a7f6:	4b27      	ldr	r3, [pc, #156]	; (800a894 <tcp_fasttmr+0xbc>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d03f      	beq.n	800a87e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a7fe:	4b25      	ldr	r3, [pc, #148]	; (800a894 <tcp_fasttmr+0xbc>)
 800a800:	781a      	ldrb	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	8b5b      	ldrh	r3, [r3, #26]
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d010      	beq.n	800a834 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	8b5b      	ldrh	r3, [r3, #26]
 800a816:	f043 0302 	orr.w	r3, r3, #2
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f003 ffdd 	bl	800e7e0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	8b5b      	ldrh	r3, [r3, #26]
 800a82a:	f023 0303 	bic.w	r3, r3, #3
 800a82e:	b29a      	uxth	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	8b5b      	ldrh	r3, [r3, #26]
 800a838:	f003 0308 	and.w	r3, r3, #8
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d009      	beq.n	800a854 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	8b5b      	ldrh	r3, [r3, #26]
 800a844:	f023 0308 	bic.w	r3, r3, #8
 800a848:	b29a      	uxth	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7ff f8be 	bl	80099d0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00a      	beq.n	800a878 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a862:	4b0e      	ldr	r3, [pc, #56]	; (800a89c <tcp_fasttmr+0xc4>)
 800a864:	2200      	movs	r2, #0
 800a866:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f819 	bl	800a8a0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a86e:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <tcp_fasttmr+0xc4>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d000      	beq.n	800a878 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a876:	e7b8      	b.n	800a7ea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	607b      	str	r3, [r7, #4]
 800a87c:	e002      	b.n	800a884 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1b3      	bne.n	800a7f2 <tcp_fasttmr+0x1a>
    }
  }
}
 800a88a:	bf00      	nop
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	2000804a 	.word	0x2000804a
 800a898:	20008040 	.word	0x20008040
 800a89c:	20008048 	.word	0x20008048

0800a8a0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a8a0:	b590      	push	{r4, r7, lr}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d109      	bne.n	800a8c2 <tcp_process_refused_data+0x22>
 800a8ae:	4b37      	ldr	r3, [pc, #220]	; (800a98c <tcp_process_refused_data+0xec>)
 800a8b0:	f240 6209 	movw	r2, #1545	; 0x609
 800a8b4:	4936      	ldr	r1, [pc, #216]	; (800a990 <tcp_process_refused_data+0xf0>)
 800a8b6:	4837      	ldr	r0, [pc, #220]	; (800a994 <tcp_process_refused_data+0xf4>)
 800a8b8:	f007 fe44 	bl	8012544 <iprintf>
 800a8bc:	f06f 030f 	mvn.w	r3, #15
 800a8c0:	e060      	b.n	800a984 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8c6:	7b5b      	ldrb	r3, [r3, #13]
 800a8c8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8ce:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00b      	beq.n	800a8f8 <tcp_process_refused_data+0x58>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6918      	ldr	r0, [r3, #16]
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	6879      	ldr	r1, [r7, #4]
 800a8f0:	47a0      	blx	r4
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	73fb      	strb	r3, [r7, #15]
 800a8f6:	e007      	b.n	800a908 <tcp_process_refused_data+0x68>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	6879      	ldr	r1, [r7, #4]
 800a8fe:	2000      	movs	r0, #0
 800a900:	f000 f8a4 	bl	800aa4c <tcp_recv_null>
 800a904:	4603      	mov	r3, r0
 800a906:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d12a      	bne.n	800a966 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a910:	7bbb      	ldrb	r3, [r7, #14]
 800a912:	f003 0320 	and.w	r3, r3, #32
 800a916:	2b00      	cmp	r3, #0
 800a918:	d033      	beq.n	800a982 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a91e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a922:	d005      	beq.n	800a930 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a928:	3301      	adds	r3, #1
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00b      	beq.n	800a952 <tcp_process_refused_data+0xb2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6918      	ldr	r0, [r3, #16]
 800a944:	2300      	movs	r3, #0
 800a946:	2200      	movs	r2, #0
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	47a0      	blx	r4
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]
 800a950:	e001      	b.n	800a956 <tcp_process_refused_data+0xb6>
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a95a:	f113 0f0d 	cmn.w	r3, #13
 800a95e:	d110      	bne.n	800a982 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a960:	f06f 030c 	mvn.w	r3, #12
 800a964:	e00e      	b.n	800a984 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a96a:	f113 0f0d 	cmn.w	r3, #13
 800a96e:	d102      	bne.n	800a976 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a970:	f06f 030c 	mvn.w	r3, #12
 800a974:	e006      	b.n	800a984 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a97c:	f06f 0304 	mvn.w	r3, #4
 800a980:	e000      	b.n	800a984 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd90      	pop	{r4, r7, pc}
 800a98c:	080145d4 	.word	0x080145d4
 800a990:	08014ae4 	.word	0x08014ae4
 800a994:	08014618 	.word	0x08014618

0800a998 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a9a0:	e007      	b.n	800a9b2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f80a 	bl	800a9c2 <tcp_seg_free>
    seg = next;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1f4      	bne.n	800a9a2 <tcp_segs_free+0xa>
  }
}
 800a9b8:	bf00      	nop
 800a9ba:	bf00      	nop
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00c      	beq.n	800a9ea <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d004      	beq.n	800a9e2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe fbc3 	bl	8009168 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a9e2:	6879      	ldr	r1, [r7, #4]
 800a9e4:	2003      	movs	r0, #3
 800a9e6:	f7fd fd49 	bl	800847c <memp_free>
  }
}
 800a9ea:	bf00      	nop
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d106      	bne.n	800aa10 <tcp_seg_copy+0x1c>
 800aa02:	4b0f      	ldr	r3, [pc, #60]	; (800aa40 <tcp_seg_copy+0x4c>)
 800aa04:	f240 6282 	movw	r2, #1666	; 0x682
 800aa08:	490e      	ldr	r1, [pc, #56]	; (800aa44 <tcp_seg_copy+0x50>)
 800aa0a:	480f      	ldr	r0, [pc, #60]	; (800aa48 <tcp_seg_copy+0x54>)
 800aa0c:	f007 fd9a 	bl	8012544 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800aa10:	2003      	movs	r0, #3
 800aa12:	f7fd fcc3 	bl	800839c <memp_malloc>
 800aa16:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <tcp_seg_copy+0x2e>
    return NULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	e00a      	b.n	800aa38 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800aa22:	2210      	movs	r2, #16
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f007 fc7c 	bl	8012324 <memcpy>
  pbuf_ref(cseg->p);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fc39 	bl	80092a8 <pbuf_ref>
  return cseg;
 800aa36:	68fb      	ldr	r3, [r7, #12]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	080145d4 	.word	0x080145d4
 800aa44:	08014b28 	.word	0x08014b28
 800aa48:	08014618 	.word	0x08014618

0800aa4c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
 800aa58:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d109      	bne.n	800aa74 <tcp_recv_null+0x28>
 800aa60:	4b12      	ldr	r3, [pc, #72]	; (800aaac <tcp_recv_null+0x60>)
 800aa62:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800aa66:	4912      	ldr	r1, [pc, #72]	; (800aab0 <tcp_recv_null+0x64>)
 800aa68:	4812      	ldr	r0, [pc, #72]	; (800aab4 <tcp_recv_null+0x68>)
 800aa6a:	f007 fd6b 	bl	8012544 <iprintf>
 800aa6e:	f06f 030f 	mvn.w	r3, #15
 800aa72:	e016      	b.n	800aaa2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d009      	beq.n	800aa8e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	891b      	ldrh	r3, [r3, #8]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	68b8      	ldr	r0, [r7, #8]
 800aa82:	f7ff fad3 	bl	800a02c <tcp_recved>
    pbuf_free(p);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7fe fb6e 	bl	8009168 <pbuf_free>
 800aa8c:	e008      	b.n	800aaa0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800aa8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d104      	bne.n	800aaa0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800aa96:	68b8      	ldr	r0, [r7, #8]
 800aa98:	f7ff f804 	bl	8009aa4 <tcp_close>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	e000      	b.n	800aaa2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	080145d4 	.word	0x080145d4
 800aab0:	08014b44 	.word	0x08014b44
 800aab4:	08014618 	.word	0x08014618

0800aab8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800aac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	db01      	blt.n	800aace <tcp_kill_prio+0x16>
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	e000      	b.n	800aad0 <tcp_kill_prio+0x18>
 800aace:	237f      	movs	r3, #127	; 0x7f
 800aad0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800aad2:	7afb      	ldrb	r3, [r7, #11]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d034      	beq.n	800ab42 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800aad8:	7afb      	ldrb	r3, [r7, #11]
 800aada:	3b01      	subs	r3, #1
 800aadc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800aae2:	2300      	movs	r3, #0
 800aae4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aae6:	4b19      	ldr	r3, [pc, #100]	; (800ab4c <tcp_kill_prio+0x94>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	617b      	str	r3, [r7, #20]
 800aaec:	e01f      	b.n	800ab2e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	7d5b      	ldrb	r3, [r3, #21]
 800aaf2:	7afa      	ldrb	r2, [r7, #11]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d80c      	bhi.n	800ab12 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800aafc:	7afa      	ldrb	r2, [r7, #11]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d112      	bne.n	800ab28 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ab02:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <tcp_kill_prio+0x98>)
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d80a      	bhi.n	800ab28 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ab12:	4b0f      	ldr	r3, [pc, #60]	; (800ab50 <tcp_kill_prio+0x98>)
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	7d5b      	ldrb	r3, [r3, #21]
 800ab26:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	617b      	str	r3, [r7, #20]
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1dc      	bne.n	800aaee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d004      	beq.n	800ab44 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ab3a:	6938      	ldr	r0, [r7, #16]
 800ab3c:	f7ff f89c 	bl	8009c78 <tcp_abort>
 800ab40:	e000      	b.n	800ab44 <tcp_kill_prio+0x8c>
    return;
 800ab42:	bf00      	nop
  }
}
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20008040 	.word	0x20008040
 800ab50:	20008034 	.word	0x20008034

0800ab54 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ab5e:	79fb      	ldrb	r3, [r7, #7]
 800ab60:	2b08      	cmp	r3, #8
 800ab62:	d009      	beq.n	800ab78 <tcp_kill_state+0x24>
 800ab64:	79fb      	ldrb	r3, [r7, #7]
 800ab66:	2b09      	cmp	r3, #9
 800ab68:	d006      	beq.n	800ab78 <tcp_kill_state+0x24>
 800ab6a:	4b1a      	ldr	r3, [pc, #104]	; (800abd4 <tcp_kill_state+0x80>)
 800ab6c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ab70:	4919      	ldr	r1, [pc, #100]	; (800abd8 <tcp_kill_state+0x84>)
 800ab72:	481a      	ldr	r0, [pc, #104]	; (800abdc <tcp_kill_state+0x88>)
 800ab74:	f007 fce6 	bl	8012544 <iprintf>

  inactivity = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab80:	4b17      	ldr	r3, [pc, #92]	; (800abe0 <tcp_kill_state+0x8c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	617b      	str	r3, [r7, #20]
 800ab86:	e017      	b.n	800abb8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	7d1b      	ldrb	r3, [r3, #20]
 800ab8c:	79fa      	ldrb	r2, [r7, #7]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d10f      	bne.n	800abb2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ab92:	4b14      	ldr	r3, [pc, #80]	; (800abe4 <tcp_kill_state+0x90>)
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d807      	bhi.n	800abb2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800aba2:	4b10      	ldr	r3, [pc, #64]	; (800abe4 <tcp_kill_state+0x90>)
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	617b      	str	r3, [r7, #20]
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1e4      	bne.n	800ab88 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d003      	beq.n	800abcc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800abc4:	2100      	movs	r1, #0
 800abc6:	6938      	ldr	r0, [r7, #16]
 800abc8:	f7fe ff98 	bl	8009afc <tcp_abandon>
  }
}
 800abcc:	bf00      	nop
 800abce:	3718      	adds	r7, #24
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	080145d4 	.word	0x080145d4
 800abd8:	08014b60 	.word	0x08014b60
 800abdc:	08014618 	.word	0x08014618
 800abe0:	20008040 	.word	0x20008040
 800abe4:	20008034 	.word	0x20008034

0800abe8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800abf6:	4b12      	ldr	r3, [pc, #72]	; (800ac40 <tcp_kill_timewait+0x58>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	e012      	b.n	800ac24 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800abfe:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <tcp_kill_timewait+0x5c>)
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d807      	bhi.n	800ac1e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ac0e:	4b0d      	ldr	r3, [pc, #52]	; (800ac44 <tcp_kill_timewait+0x5c>)
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e9      	bne.n	800abfe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ac30:	68b8      	ldr	r0, [r7, #8]
 800ac32:	f7ff f821 	bl	8009c78 <tcp_abort>
  }
}
 800ac36:	bf00      	nop
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	20008044 	.word	0x20008044
 800ac44:	20008034 	.word	0x20008034

0800ac48 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ac4e:	4b10      	ldr	r3, [pc, #64]	; (800ac90 <tcp_handle_closepend+0x48>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ac54:	e014      	b.n	800ac80 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	8b5b      	ldrh	r3, [r3, #26]
 800ac60:	f003 0308 	and.w	r3, r3, #8
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d009      	beq.n	800ac7c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	8b5b      	ldrh	r3, [r3, #26]
 800ac6c:	f023 0308 	bic.w	r3, r3, #8
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7fe feaa 	bl	80099d0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1e7      	bne.n	800ac56 <tcp_handle_closepend+0xe>
  }
}
 800ac86:	bf00      	nop
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20008040 	.word	0x20008040

0800ac94 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ac9e:	2001      	movs	r0, #1
 800aca0:	f7fd fb7c 	bl	800839c <memp_malloc>
 800aca4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d126      	bne.n	800acfa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800acac:	f7ff ffcc 	bl	800ac48 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800acb0:	f7ff ff9a 	bl	800abe8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800acb4:	2001      	movs	r0, #1
 800acb6:	f7fd fb71 	bl	800839c <memp_malloc>
 800acba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d11b      	bne.n	800acfa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800acc2:	2009      	movs	r0, #9
 800acc4:	f7ff ff46 	bl	800ab54 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800acc8:	2001      	movs	r0, #1
 800acca:	f7fd fb67 	bl	800839c <memp_malloc>
 800acce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d111      	bne.n	800acfa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800acd6:	2008      	movs	r0, #8
 800acd8:	f7ff ff3c 	bl	800ab54 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800acdc:	2001      	movs	r0, #1
 800acde:	f7fd fb5d 	bl	800839c <memp_malloc>
 800ace2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d107      	bne.n	800acfa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff fee3 	bl	800aab8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800acf2:	2001      	movs	r0, #1
 800acf4:	f7fd fb52 	bl	800839c <memp_malloc>
 800acf8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d03f      	beq.n	800ad80 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ad00:	229c      	movs	r2, #156	; 0x9c
 800ad02:	2100      	movs	r1, #0
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f007 fb35 	bl	8012374 <memset>
    pcb->prio = prio;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	79fa      	ldrb	r2, [r7, #7]
 800ad0e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ad16:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ad20:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	22ff      	movs	r2, #255	; 0xff
 800ad2e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ad36:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2206      	movs	r2, #6
 800ad3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2206      	movs	r2, #6
 800ad44:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad4c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ad56:	4b0d      	ldr	r3, [pc, #52]	; (800ad8c <tcp_alloc+0xf8>)
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <tcp_alloc+0xfc>)
 800ad60:	781a      	ldrb	r2, [r3, #0]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ad6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4a08      	ldr	r2, [pc, #32]	; (800ad94 <tcp_alloc+0x100>)
 800ad74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	4a07      	ldr	r2, [pc, #28]	; (800ad98 <tcp_alloc+0x104>)
 800ad7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ad80:	68fb      	ldr	r3, [r7, #12]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20008034 	.word	0x20008034
 800ad90:	2000804a 	.word	0x2000804a
 800ad94:	0800aa4d 	.word	0x0800aa4d
 800ad98:	006ddd00 	.word	0x006ddd00

0800ad9c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800ada0:	2040      	movs	r0, #64	; 0x40
 800ada2:	f7ff ff77 	bl	800ac94 <tcp_alloc>
 800ada6:	4603      	mov	r3, r0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	bd80      	pop	{r7, pc}

0800adac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00e      	beq.n	800adda <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	7d1b      	ldrb	r3, [r3, #20]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d106      	bne.n	800add2 <tcp_recv+0x26>
 800adc4:	4b07      	ldr	r3, [pc, #28]	; (800ade4 <tcp_recv+0x38>)
 800adc6:	f240 72df 	movw	r2, #2015	; 0x7df
 800adca:	4907      	ldr	r1, [pc, #28]	; (800ade8 <tcp_recv+0x3c>)
 800adcc:	4807      	ldr	r0, [pc, #28]	; (800adec <tcp_recv+0x40>)
 800adce:	f007 fbb9 	bl	8012544 <iprintf>
    pcb->recv = recv;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800adda:	bf00      	nop
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	080145d4 	.word	0x080145d4
 800ade8:	08014b70 	.word	0x08014b70
 800adec:	08014618 	.word	0x08014618

0800adf0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00e      	beq.n	800ae1e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	7d1b      	ldrb	r3, [r3, #20]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d106      	bne.n	800ae16 <tcp_sent+0x26>
 800ae08:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <tcp_sent+0x38>)
 800ae0a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ae0e:	4907      	ldr	r1, [pc, #28]	; (800ae2c <tcp_sent+0x3c>)
 800ae10:	4807      	ldr	r0, [pc, #28]	; (800ae30 <tcp_sent+0x40>)
 800ae12:	f007 fb97 	bl	8012544 <iprintf>
    pcb->sent = sent;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ae1e:	bf00      	nop
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	080145d4 	.word	0x080145d4
 800ae2c:	08014b98 	.word	0x08014b98
 800ae30:	08014618 	.word	0x08014618

0800ae34 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00e      	beq.n	800ae62 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	7d1b      	ldrb	r3, [r3, #20]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d106      	bne.n	800ae5a <tcp_err+0x26>
 800ae4c:	4b07      	ldr	r3, [pc, #28]	; (800ae6c <tcp_err+0x38>)
 800ae4e:	f640 020d 	movw	r2, #2061	; 0x80d
 800ae52:	4907      	ldr	r1, [pc, #28]	; (800ae70 <tcp_err+0x3c>)
 800ae54:	4807      	ldr	r0, [pc, #28]	; (800ae74 <tcp_err+0x40>)
 800ae56:	f007 fb75 	bl	8012544 <iprintf>
    pcb->errf = err;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	080145d4 	.word	0x080145d4
 800ae70:	08014bc0 	.word	0x08014bc0
 800ae74:	08014618 	.word	0x08014618

0800ae78 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d008      	beq.n	800ae9a <tcp_accept+0x22>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	7d1b      	ldrb	r3, [r3, #20]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d104      	bne.n	800ae9a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	619a      	str	r2, [r3, #24]
  }
}
 800ae9a:	bf00      	nop
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
	...

0800aea8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d107      	bne.n	800aecc <tcp_poll+0x24>
 800aebc:	4b0e      	ldr	r3, [pc, #56]	; (800aef8 <tcp_poll+0x50>)
 800aebe:	f640 023d 	movw	r2, #2109	; 0x83d
 800aec2:	490e      	ldr	r1, [pc, #56]	; (800aefc <tcp_poll+0x54>)
 800aec4:	480e      	ldr	r0, [pc, #56]	; (800af00 <tcp_poll+0x58>)
 800aec6:	f007 fb3d 	bl	8012544 <iprintf>
 800aeca:	e011      	b.n	800aef0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	7d1b      	ldrb	r3, [r3, #20]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d106      	bne.n	800aee2 <tcp_poll+0x3a>
 800aed4:	4b08      	ldr	r3, [pc, #32]	; (800aef8 <tcp_poll+0x50>)
 800aed6:	f640 023e 	movw	r2, #2110	; 0x83e
 800aeda:	490a      	ldr	r1, [pc, #40]	; (800af04 <tcp_poll+0x5c>)
 800aedc:	4808      	ldr	r0, [pc, #32]	; (800af00 <tcp_poll+0x58>)
 800aede:	f007 fb31 	bl	8012544 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	79fa      	ldrb	r2, [r7, #7]
 800aeee:	775a      	strb	r2, [r3, #29]
}
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	080145d4 	.word	0x080145d4
 800aefc:	08014be8 	.word	0x08014be8
 800af00:	08014618 	.word	0x08014618
 800af04:	08014c00 	.word	0x08014c00

0800af08 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d107      	bne.n	800af26 <tcp_pcb_purge+0x1e>
 800af16:	4b21      	ldr	r3, [pc, #132]	; (800af9c <tcp_pcb_purge+0x94>)
 800af18:	f640 0251 	movw	r2, #2129	; 0x851
 800af1c:	4920      	ldr	r1, [pc, #128]	; (800afa0 <tcp_pcb_purge+0x98>)
 800af1e:	4821      	ldr	r0, [pc, #132]	; (800afa4 <tcp_pcb_purge+0x9c>)
 800af20:	f007 fb10 	bl	8012544 <iprintf>
 800af24:	e037      	b.n	800af96 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	7d1b      	ldrb	r3, [r3, #20]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d033      	beq.n	800af96 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800af32:	2b0a      	cmp	r3, #10
 800af34:	d02f      	beq.n	800af96 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d02b      	beq.n	800af96 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af42:	2b00      	cmp	r3, #0
 800af44:	d007      	beq.n	800af56 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fe f90c 	bl	8009168 <pbuf_free>
      pcb->refused_data = NULL;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f986 	bl	800b270 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af6a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff fd11 	bl	800a998 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff fd0c 	bl	800a998 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	66da      	str	r2, [r3, #108]	; 0x6c
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	080145d4 	.word	0x080145d4
 800afa0:	08014c20 	.word	0x08014c20
 800afa4:	08014618 	.word	0x08014618

0800afa8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d106      	bne.n	800afc6 <tcp_pcb_remove+0x1e>
 800afb8:	4b3e      	ldr	r3, [pc, #248]	; (800b0b4 <tcp_pcb_remove+0x10c>)
 800afba:	f640 0283 	movw	r2, #2179	; 0x883
 800afbe:	493e      	ldr	r1, [pc, #248]	; (800b0b8 <tcp_pcb_remove+0x110>)
 800afc0:	483e      	ldr	r0, [pc, #248]	; (800b0bc <tcp_pcb_remove+0x114>)
 800afc2:	f007 fabf 	bl	8012544 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d106      	bne.n	800afda <tcp_pcb_remove+0x32>
 800afcc:	4b39      	ldr	r3, [pc, #228]	; (800b0b4 <tcp_pcb_remove+0x10c>)
 800afce:	f640 0284 	movw	r2, #2180	; 0x884
 800afd2:	493b      	ldr	r1, [pc, #236]	; (800b0c0 <tcp_pcb_remove+0x118>)
 800afd4:	4839      	ldr	r0, [pc, #228]	; (800b0bc <tcp_pcb_remove+0x114>)
 800afd6:	f007 fab5 	bl	8012544 <iprintf>

  TCP_RMV(pcblist, pcb);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d105      	bne.n	800aff0 <tcp_pcb_remove+0x48>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68da      	ldr	r2, [r3, #12]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	e013      	b.n	800b018 <tcp_pcb_remove+0x70>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	60fb      	str	r3, [r7, #12]
 800aff6:	e00c      	b.n	800b012 <tcp_pcb_remove+0x6a>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	429a      	cmp	r2, r3
 800b000:	d104      	bne.n	800b00c <tcp_pcb_remove+0x64>
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	60da      	str	r2, [r3, #12]
 800b00a:	e005      	b.n	800b018 <tcp_pcb_remove+0x70>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1ef      	bne.n	800aff8 <tcp_pcb_remove+0x50>
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2200      	movs	r2, #0
 800b01c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b01e:	6838      	ldr	r0, [r7, #0]
 800b020:	f7ff ff72 	bl	800af08 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	7d1b      	ldrb	r3, [r3, #20]
 800b028:	2b0a      	cmp	r3, #10
 800b02a:	d013      	beq.n	800b054 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b030:	2b01      	cmp	r3, #1
 800b032:	d00f      	beq.n	800b054 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	8b5b      	ldrh	r3, [r3, #26]
 800b038:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d009      	beq.n	800b054 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	8b5b      	ldrh	r3, [r3, #26]
 800b044:	f043 0302 	orr.w	r3, r3, #2
 800b048:	b29a      	uxth	r2, r3
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b04e:	6838      	ldr	r0, [r7, #0]
 800b050:	f003 fbc6 	bl	800e7e0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	7d1b      	ldrb	r3, [r3, #20]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d020      	beq.n	800b09e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d006      	beq.n	800b072 <tcp_pcb_remove+0xca>
 800b064:	4b13      	ldr	r3, [pc, #76]	; (800b0b4 <tcp_pcb_remove+0x10c>)
 800b066:	f640 0293 	movw	r2, #2195	; 0x893
 800b06a:	4916      	ldr	r1, [pc, #88]	; (800b0c4 <tcp_pcb_remove+0x11c>)
 800b06c:	4813      	ldr	r0, [pc, #76]	; (800b0bc <tcp_pcb_remove+0x114>)
 800b06e:	f007 fa69 	bl	8012544 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b076:	2b00      	cmp	r3, #0
 800b078:	d006      	beq.n	800b088 <tcp_pcb_remove+0xe0>
 800b07a:	4b0e      	ldr	r3, [pc, #56]	; (800b0b4 <tcp_pcb_remove+0x10c>)
 800b07c:	f640 0294 	movw	r2, #2196	; 0x894
 800b080:	4911      	ldr	r1, [pc, #68]	; (800b0c8 <tcp_pcb_remove+0x120>)
 800b082:	480e      	ldr	r0, [pc, #56]	; (800b0bc <tcp_pcb_remove+0x114>)
 800b084:	f007 fa5e 	bl	8012544 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d006      	beq.n	800b09e <tcp_pcb_remove+0xf6>
 800b090:	4b08      	ldr	r3, [pc, #32]	; (800b0b4 <tcp_pcb_remove+0x10c>)
 800b092:	f640 0296 	movw	r2, #2198	; 0x896
 800b096:	490d      	ldr	r1, [pc, #52]	; (800b0cc <tcp_pcb_remove+0x124>)
 800b098:	4808      	ldr	r0, [pc, #32]	; (800b0bc <tcp_pcb_remove+0x114>)
 800b09a:	f007 fa53 	bl	8012544 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	080145d4 	.word	0x080145d4
 800b0b8:	08014c3c 	.word	0x08014c3c
 800b0bc:	08014618 	.word	0x08014618
 800b0c0:	08014c58 	.word	0x08014c58
 800b0c4:	08014c78 	.word	0x08014c78
 800b0c8:	08014c90 	.word	0x08014c90
 800b0cc:	08014cac 	.word	0x08014cac

0800b0d0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d106      	bne.n	800b0ec <tcp_next_iss+0x1c>
 800b0de:	4b0a      	ldr	r3, [pc, #40]	; (800b108 <tcp_next_iss+0x38>)
 800b0e0:	f640 02af 	movw	r2, #2223	; 0x8af
 800b0e4:	4909      	ldr	r1, [pc, #36]	; (800b10c <tcp_next_iss+0x3c>)
 800b0e6:	480a      	ldr	r0, [pc, #40]	; (800b110 <tcp_next_iss+0x40>)
 800b0e8:	f007 fa2c 	bl	8012544 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b0ec:	4b09      	ldr	r3, [pc, #36]	; (800b114 <tcp_next_iss+0x44>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	4b09      	ldr	r3, [pc, #36]	; (800b118 <tcp_next_iss+0x48>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	4a07      	ldr	r2, [pc, #28]	; (800b114 <tcp_next_iss+0x44>)
 800b0f8:	6013      	str	r3, [r2, #0]
  return iss;
 800b0fa:	4b06      	ldr	r3, [pc, #24]	; (800b114 <tcp_next_iss+0x44>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	080145d4 	.word	0x080145d4
 800b10c:	08014cc4 	.word	0x08014cc4
 800b110:	08014618 	.word	0x08014618
 800b114:	200000b4 	.word	0x200000b4
 800b118:	20008034 	.word	0x20008034

0800b11c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	4603      	mov	r3, r0
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d106      	bne.n	800b13e <tcp_eff_send_mss_netif+0x22>
 800b130:	4b14      	ldr	r3, [pc, #80]	; (800b184 <tcp_eff_send_mss_netif+0x68>)
 800b132:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b136:	4914      	ldr	r1, [pc, #80]	; (800b188 <tcp_eff_send_mss_netif+0x6c>)
 800b138:	4814      	ldr	r0, [pc, #80]	; (800b18c <tcp_eff_send_mss_netif+0x70>)
 800b13a:	f007 fa03 	bl	8012544 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b144:	89fb      	ldrh	r3, [r7, #14]
 800b146:	e019      	b.n	800b17c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b14c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b14e:	8afb      	ldrh	r3, [r7, #22]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d012      	beq.n	800b17a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b154:	2328      	movs	r3, #40	; 0x28
 800b156:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b158:	8afa      	ldrh	r2, [r7, #22]
 800b15a:	8abb      	ldrh	r3, [r7, #20]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d904      	bls.n	800b16a <tcp_eff_send_mss_netif+0x4e>
 800b160:	8afa      	ldrh	r2, [r7, #22]
 800b162:	8abb      	ldrh	r3, [r7, #20]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	b29b      	uxth	r3, r3
 800b168:	e000      	b.n	800b16c <tcp_eff_send_mss_netif+0x50>
 800b16a:	2300      	movs	r3, #0
 800b16c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b16e:	8a7a      	ldrh	r2, [r7, #18]
 800b170:	89fb      	ldrh	r3, [r7, #14]
 800b172:	4293      	cmp	r3, r2
 800b174:	bf28      	it	cs
 800b176:	4613      	movcs	r3, r2
 800b178:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b17a:	89fb      	ldrh	r3, [r7, #14]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3718      	adds	r7, #24
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	080145d4 	.word	0x080145d4
 800b188:	08014ce0 	.word	0x08014ce0
 800b18c:	08014618 	.word	0x08014618

0800b190 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d119      	bne.n	800b1d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b1a4:	4b10      	ldr	r3, [pc, #64]	; (800b1e8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b1a6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b1aa:	4910      	ldr	r1, [pc, #64]	; (800b1ec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b1ac:	4810      	ldr	r0, [pc, #64]	; (800b1f0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b1ae:	f007 f9c9 	bl	8012544 <iprintf>

  while (pcb != NULL) {
 800b1b2:	e011      	b.n	800b1d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d108      	bne.n	800b1d2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f7fe fd56 	bl	8009c78 <tcp_abort>
      pcb = next;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	60fb      	str	r3, [r7, #12]
 800b1d0:	e002      	b.n	800b1d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1ea      	bne.n	800b1b4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b1de:	bf00      	nop
 800b1e0:	bf00      	nop
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	080145d4 	.word	0x080145d4
 800b1ec:	08014d08 	.word	0x08014d08
 800b1f0:	08014618 	.word	0x08014618

0800b1f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d02a      	beq.n	800b25a <tcp_netif_ip_addr_changed+0x66>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d026      	beq.n	800b25a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b20c:	4b15      	ldr	r3, [pc, #84]	; (800b264 <tcp_netif_ip_addr_changed+0x70>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff ffbc 	bl	800b190 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b218:	4b13      	ldr	r3, [pc, #76]	; (800b268 <tcp_netif_ip_addr_changed+0x74>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7ff ffb6 	bl	800b190 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d017      	beq.n	800b25a <tcp_netif_ip_addr_changed+0x66>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d013      	beq.n	800b25a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b232:	4b0e      	ldr	r3, [pc, #56]	; (800b26c <tcp_netif_ip_addr_changed+0x78>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	e00c      	b.n	800b254 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	d103      	bne.n	800b24e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1ef      	bne.n	800b23a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b25a:	bf00      	nop
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	20008040 	.word	0x20008040
 800b268:	20008038 	.word	0x20008038
 800b26c:	2000803c 	.word	0x2000803c

0800b270 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d007      	beq.n	800b290 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b284:	4618      	mov	r0, r3
 800b286:	f7ff fb87 	bl	800a998 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b298:	b590      	push	{r4, r7, lr}
 800b29a:	b08d      	sub	sp, #52	; 0x34
 800b29c:	af04      	add	r7, sp, #16
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d105      	bne.n	800b2b4 <tcp_input+0x1c>
 800b2a8:	4b9b      	ldr	r3, [pc, #620]	; (800b518 <tcp_input+0x280>)
 800b2aa:	2283      	movs	r2, #131	; 0x83
 800b2ac:	499b      	ldr	r1, [pc, #620]	; (800b51c <tcp_input+0x284>)
 800b2ae:	489c      	ldr	r0, [pc, #624]	; (800b520 <tcp_input+0x288>)
 800b2b0:	f007 f948 	bl	8012544 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	4a9a      	ldr	r2, [pc, #616]	; (800b524 <tcp_input+0x28c>)
 800b2ba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	895b      	ldrh	r3, [r3, #10]
 800b2c0:	2b13      	cmp	r3, #19
 800b2c2:	f240 83d1 	bls.w	800ba68 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b2c6:	4b98      	ldr	r3, [pc, #608]	; (800b528 <tcp_input+0x290>)
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	4a97      	ldr	r2, [pc, #604]	; (800b528 <tcp_input+0x290>)
 800b2cc:	6812      	ldr	r2, [r2, #0]
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f006 f895 	bl	8011400 <ip4_addr_isbroadcast_u32>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f040 83c7 	bne.w	800ba6c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b2de:	4b92      	ldr	r3, [pc, #584]	; (800b528 <tcp_input+0x290>)
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b2e6:	2be0      	cmp	r3, #224	; 0xe0
 800b2e8:	f000 83c0 	beq.w	800ba6c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b2ec:	4b8d      	ldr	r3, [pc, #564]	; (800b524 <tcp_input+0x28c>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	899b      	ldrh	r3, [r3, #12]
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fc fb21 	bl	800793c <lwip_htons>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	0b1b      	lsrs	r3, r3, #12
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	b2db      	uxtb	r3, r3
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b306:	7cbb      	ldrb	r3, [r7, #18]
 800b308:	2b13      	cmp	r3, #19
 800b30a:	f240 83b1 	bls.w	800ba70 <tcp_input+0x7d8>
 800b30e:	7cbb      	ldrb	r3, [r7, #18]
 800b310:	b29a      	uxth	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	891b      	ldrh	r3, [r3, #8]
 800b316:	429a      	cmp	r2, r3
 800b318:	f200 83aa 	bhi.w	800ba70 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b31c:	7cbb      	ldrb	r3, [r7, #18]
 800b31e:	b29b      	uxth	r3, r3
 800b320:	3b14      	subs	r3, #20
 800b322:	b29a      	uxth	r2, r3
 800b324:	4b81      	ldr	r3, [pc, #516]	; (800b52c <tcp_input+0x294>)
 800b326:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b328:	4b81      	ldr	r3, [pc, #516]	; (800b530 <tcp_input+0x298>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	895a      	ldrh	r2, [r3, #10]
 800b332:	7cbb      	ldrb	r3, [r7, #18]
 800b334:	b29b      	uxth	r3, r3
 800b336:	429a      	cmp	r2, r3
 800b338:	d309      	bcc.n	800b34e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b33a:	4b7c      	ldr	r3, [pc, #496]	; (800b52c <tcp_input+0x294>)
 800b33c:	881a      	ldrh	r2, [r3, #0]
 800b33e:	4b7d      	ldr	r3, [pc, #500]	; (800b534 <tcp_input+0x29c>)
 800b340:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b342:	7cbb      	ldrb	r3, [r7, #18]
 800b344:	4619      	mov	r1, r3
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7fd fe88 	bl	800905c <pbuf_remove_header>
 800b34c:	e04e      	b.n	800b3ec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d105      	bne.n	800b362 <tcp_input+0xca>
 800b356:	4b70      	ldr	r3, [pc, #448]	; (800b518 <tcp_input+0x280>)
 800b358:	22c2      	movs	r2, #194	; 0xc2
 800b35a:	4977      	ldr	r1, [pc, #476]	; (800b538 <tcp_input+0x2a0>)
 800b35c:	4870      	ldr	r0, [pc, #448]	; (800b520 <tcp_input+0x288>)
 800b35e:	f007 f8f1 	bl	8012544 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b362:	2114      	movs	r1, #20
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7fd fe79 	bl	800905c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	895a      	ldrh	r2, [r3, #10]
 800b36e:	4b71      	ldr	r3, [pc, #452]	; (800b534 <tcp_input+0x29c>)
 800b370:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b372:	4b6e      	ldr	r3, [pc, #440]	; (800b52c <tcp_input+0x294>)
 800b374:	881a      	ldrh	r2, [r3, #0]
 800b376:	4b6f      	ldr	r3, [pc, #444]	; (800b534 <tcp_input+0x29c>)
 800b378:	881b      	ldrh	r3, [r3, #0]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b37e:	4b6d      	ldr	r3, [pc, #436]	; (800b534 <tcp_input+0x29c>)
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7fd fe69 	bl	800905c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	895b      	ldrh	r3, [r3, #10]
 800b390:	8a3a      	ldrh	r2, [r7, #16]
 800b392:	429a      	cmp	r2, r3
 800b394:	f200 836e 	bhi.w	800ba74 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	4a64      	ldr	r2, [pc, #400]	; (800b530 <tcp_input+0x298>)
 800b3a0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	8a3a      	ldrh	r2, [r7, #16]
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fd fe56 	bl	800905c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	891a      	ldrh	r2, [r3, #8]
 800b3b4:	8a3b      	ldrh	r3, [r7, #16]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	895b      	ldrh	r3, [r3, #10]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d005      	beq.n	800b3d2 <tcp_input+0x13a>
 800b3c6:	4b54      	ldr	r3, [pc, #336]	; (800b518 <tcp_input+0x280>)
 800b3c8:	22df      	movs	r2, #223	; 0xdf
 800b3ca:	495c      	ldr	r1, [pc, #368]	; (800b53c <tcp_input+0x2a4>)
 800b3cc:	4854      	ldr	r0, [pc, #336]	; (800b520 <tcp_input+0x288>)
 800b3ce:	f007 f8b9 	bl	8012544 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	891a      	ldrh	r2, [r3, #8]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	891b      	ldrh	r3, [r3, #8]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d005      	beq.n	800b3ec <tcp_input+0x154>
 800b3e0:	4b4d      	ldr	r3, [pc, #308]	; (800b518 <tcp_input+0x280>)
 800b3e2:	22e0      	movs	r2, #224	; 0xe0
 800b3e4:	4956      	ldr	r1, [pc, #344]	; (800b540 <tcp_input+0x2a8>)
 800b3e6:	484e      	ldr	r0, [pc, #312]	; (800b520 <tcp_input+0x288>)
 800b3e8:	f007 f8ac 	bl	8012544 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b3ec:	4b4d      	ldr	r3, [pc, #308]	; (800b524 <tcp_input+0x28c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	881b      	ldrh	r3, [r3, #0]
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	4a4b      	ldr	r2, [pc, #300]	; (800b524 <tcp_input+0x28c>)
 800b3f6:	6814      	ldr	r4, [r2, #0]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fc fa9f 	bl	800793c <lwip_htons>
 800b3fe:	4603      	mov	r3, r0
 800b400:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b402:	4b48      	ldr	r3, [pc, #288]	; (800b524 <tcp_input+0x28c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	885b      	ldrh	r3, [r3, #2]
 800b408:	b29b      	uxth	r3, r3
 800b40a:	4a46      	ldr	r2, [pc, #280]	; (800b524 <tcp_input+0x28c>)
 800b40c:	6814      	ldr	r4, [r2, #0]
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fc fa94 	bl	800793c <lwip_htons>
 800b414:	4603      	mov	r3, r0
 800b416:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b418:	4b42      	ldr	r3, [pc, #264]	; (800b524 <tcp_input+0x28c>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	4a41      	ldr	r2, [pc, #260]	; (800b524 <tcp_input+0x28c>)
 800b420:	6814      	ldr	r4, [r2, #0]
 800b422:	4618      	mov	r0, r3
 800b424:	f7fc fa9f 	bl	8007966 <lwip_htonl>
 800b428:	4603      	mov	r3, r0
 800b42a:	6063      	str	r3, [r4, #4]
 800b42c:	6863      	ldr	r3, [r4, #4]
 800b42e:	4a45      	ldr	r2, [pc, #276]	; (800b544 <tcp_input+0x2ac>)
 800b430:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b432:	4b3c      	ldr	r3, [pc, #240]	; (800b524 <tcp_input+0x28c>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	4a3a      	ldr	r2, [pc, #232]	; (800b524 <tcp_input+0x28c>)
 800b43a:	6814      	ldr	r4, [r2, #0]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fc fa92 	bl	8007966 <lwip_htonl>
 800b442:	4603      	mov	r3, r0
 800b444:	60a3      	str	r3, [r4, #8]
 800b446:	68a3      	ldr	r3, [r4, #8]
 800b448:	4a3f      	ldr	r2, [pc, #252]	; (800b548 <tcp_input+0x2b0>)
 800b44a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b44c:	4b35      	ldr	r3, [pc, #212]	; (800b524 <tcp_input+0x28c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	89db      	ldrh	r3, [r3, #14]
 800b452:	b29b      	uxth	r3, r3
 800b454:	4a33      	ldr	r2, [pc, #204]	; (800b524 <tcp_input+0x28c>)
 800b456:	6814      	ldr	r4, [r2, #0]
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fc fa6f 	bl	800793c <lwip_htons>
 800b45e:	4603      	mov	r3, r0
 800b460:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b462:	4b30      	ldr	r3, [pc, #192]	; (800b524 <tcp_input+0x28c>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	899b      	ldrh	r3, [r3, #12]
 800b468:	b29b      	uxth	r3, r3
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fc fa66 	bl	800793c <lwip_htons>
 800b470:	4603      	mov	r3, r0
 800b472:	b2db      	uxtb	r3, r3
 800b474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	4b34      	ldr	r3, [pc, #208]	; (800b54c <tcp_input+0x2b4>)
 800b47c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	891a      	ldrh	r2, [r3, #8]
 800b482:	4b33      	ldr	r3, [pc, #204]	; (800b550 <tcp_input+0x2b8>)
 800b484:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b486:	4b31      	ldr	r3, [pc, #196]	; (800b54c <tcp_input+0x2b4>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	f003 0303 	and.w	r3, r3, #3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00c      	beq.n	800b4ac <tcp_input+0x214>
    tcplen++;
 800b492:	4b2f      	ldr	r3, [pc, #188]	; (800b550 <tcp_input+0x2b8>)
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	3301      	adds	r3, #1
 800b498:	b29a      	uxth	r2, r3
 800b49a:	4b2d      	ldr	r3, [pc, #180]	; (800b550 <tcp_input+0x2b8>)
 800b49c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	891a      	ldrh	r2, [r3, #8]
 800b4a2:	4b2b      	ldr	r3, [pc, #172]	; (800b550 <tcp_input+0x2b8>)
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	f200 82e6 	bhi.w	800ba78 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4b0:	4b28      	ldr	r3, [pc, #160]	; (800b554 <tcp_input+0x2bc>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	61fb      	str	r3, [r7, #28]
 800b4b6:	e09d      	b.n	800b5f4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	7d1b      	ldrb	r3, [r3, #20]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d105      	bne.n	800b4cc <tcp_input+0x234>
 800b4c0:	4b15      	ldr	r3, [pc, #84]	; (800b518 <tcp_input+0x280>)
 800b4c2:	22fb      	movs	r2, #251	; 0xfb
 800b4c4:	4924      	ldr	r1, [pc, #144]	; (800b558 <tcp_input+0x2c0>)
 800b4c6:	4816      	ldr	r0, [pc, #88]	; (800b520 <tcp_input+0x288>)
 800b4c8:	f007 f83c 	bl	8012544 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	7d1b      	ldrb	r3, [r3, #20]
 800b4d0:	2b0a      	cmp	r3, #10
 800b4d2:	d105      	bne.n	800b4e0 <tcp_input+0x248>
 800b4d4:	4b10      	ldr	r3, [pc, #64]	; (800b518 <tcp_input+0x280>)
 800b4d6:	22fc      	movs	r2, #252	; 0xfc
 800b4d8:	4920      	ldr	r1, [pc, #128]	; (800b55c <tcp_input+0x2c4>)
 800b4da:	4811      	ldr	r0, [pc, #68]	; (800b520 <tcp_input+0x288>)
 800b4dc:	f007 f832 	bl	8012544 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	7d1b      	ldrb	r3, [r3, #20]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d105      	bne.n	800b4f4 <tcp_input+0x25c>
 800b4e8:	4b0b      	ldr	r3, [pc, #44]	; (800b518 <tcp_input+0x280>)
 800b4ea:	22fd      	movs	r2, #253	; 0xfd
 800b4ec:	491c      	ldr	r1, [pc, #112]	; (800b560 <tcp_input+0x2c8>)
 800b4ee:	480c      	ldr	r0, [pc, #48]	; (800b520 <tcp_input+0x288>)
 800b4f0:	f007 f828 	bl	8012544 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	7a1b      	ldrb	r3, [r3, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d033      	beq.n	800b564 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	7a1a      	ldrb	r2, [r3, #8]
 800b500:	4b09      	ldr	r3, [pc, #36]	; (800b528 <tcp_input+0x290>)
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b508:	3301      	adds	r3, #1
 800b50a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d029      	beq.n	800b564 <tcp_input+0x2cc>
      prev = pcb;
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	61bb      	str	r3, [r7, #24]
      continue;
 800b514:	e06b      	b.n	800b5ee <tcp_input+0x356>
 800b516:	bf00      	nop
 800b518:	08014d3c 	.word	0x08014d3c
 800b51c:	08014d70 	.word	0x08014d70
 800b520:	08014d88 	.word	0x08014d88
 800b524:	2000805c 	.word	0x2000805c
 800b528:	20005118 	.word	0x20005118
 800b52c:	20008060 	.word	0x20008060
 800b530:	20008064 	.word	0x20008064
 800b534:	20008062 	.word	0x20008062
 800b538:	08014db0 	.word	0x08014db0
 800b53c:	08014dc0 	.word	0x08014dc0
 800b540:	08014dcc 	.word	0x08014dcc
 800b544:	2000806c 	.word	0x2000806c
 800b548:	20008070 	.word	0x20008070
 800b54c:	20008078 	.word	0x20008078
 800b550:	20008076 	.word	0x20008076
 800b554:	20008040 	.word	0x20008040
 800b558:	08014dec 	.word	0x08014dec
 800b55c:	08014e14 	.word	0x08014e14
 800b560:	08014e40 	.word	0x08014e40
    }

    if (pcb->remote_port == tcphdr->src &&
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	8b1a      	ldrh	r2, [r3, #24]
 800b568:	4b72      	ldr	r3, [pc, #456]	; (800b734 <tcp_input+0x49c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	b29b      	uxth	r3, r3
 800b570:	429a      	cmp	r2, r3
 800b572:	d13a      	bne.n	800b5ea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	8ada      	ldrh	r2, [r3, #22]
 800b578:	4b6e      	ldr	r3, [pc, #440]	; (800b734 <tcp_input+0x49c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	885b      	ldrh	r3, [r3, #2]
 800b57e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b580:	429a      	cmp	r2, r3
 800b582:	d132      	bne.n	800b5ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	4b6b      	ldr	r3, [pc, #428]	; (800b738 <tcp_input+0x4a0>)
 800b58a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d12c      	bne.n	800b5ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	4b68      	ldr	r3, [pc, #416]	; (800b738 <tcp_input+0x4a0>)
 800b596:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b598:	429a      	cmp	r2, r3
 800b59a:	d126      	bne.n	800b5ea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	69fa      	ldr	r2, [r7, #28]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d106      	bne.n	800b5b4 <tcp_input+0x31c>
 800b5a6:	4b65      	ldr	r3, [pc, #404]	; (800b73c <tcp_input+0x4a4>)
 800b5a8:	f240 120d 	movw	r2, #269	; 0x10d
 800b5ac:	4964      	ldr	r1, [pc, #400]	; (800b740 <tcp_input+0x4a8>)
 800b5ae:	4865      	ldr	r0, [pc, #404]	; (800b744 <tcp_input+0x4ac>)
 800b5b0:	f006 ffc8 	bl	8012544 <iprintf>
      if (prev != NULL) {
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00a      	beq.n	800b5d0 <tcp_input+0x338>
        prev->next = pcb->next;
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	68da      	ldr	r2, [r3, #12]
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b5c2:	4b61      	ldr	r3, [pc, #388]	; (800b748 <tcp_input+0x4b0>)
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b5ca:	4a5f      	ldr	r2, [pc, #380]	; (800b748 <tcp_input+0x4b0>)
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	69fa      	ldr	r2, [r7, #28]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d111      	bne.n	800b5fe <tcp_input+0x366>
 800b5da:	4b58      	ldr	r3, [pc, #352]	; (800b73c <tcp_input+0x4a4>)
 800b5dc:	f240 1215 	movw	r2, #277	; 0x115
 800b5e0:	495a      	ldr	r1, [pc, #360]	; (800b74c <tcp_input+0x4b4>)
 800b5e2:	4858      	ldr	r0, [pc, #352]	; (800b744 <tcp_input+0x4ac>)
 800b5e4:	f006 ffae 	bl	8012544 <iprintf>
      break;
 800b5e8:	e009      	b.n	800b5fe <tcp_input+0x366>
    }
    prev = pcb;
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	61fb      	str	r3, [r7, #28]
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f47f af5e 	bne.w	800b4b8 <tcp_input+0x220>
 800b5fc:	e000      	b.n	800b600 <tcp_input+0x368>
      break;
 800b5fe:	bf00      	nop
  }

  if (pcb == NULL) {
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	2b00      	cmp	r3, #0
 800b604:	f040 80aa 	bne.w	800b75c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b608:	4b51      	ldr	r3, [pc, #324]	; (800b750 <tcp_input+0x4b8>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	61fb      	str	r3, [r7, #28]
 800b60e:	e03f      	b.n	800b690 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	7d1b      	ldrb	r3, [r3, #20]
 800b614:	2b0a      	cmp	r3, #10
 800b616:	d006      	beq.n	800b626 <tcp_input+0x38e>
 800b618:	4b48      	ldr	r3, [pc, #288]	; (800b73c <tcp_input+0x4a4>)
 800b61a:	f240 121f 	movw	r2, #287	; 0x11f
 800b61e:	494d      	ldr	r1, [pc, #308]	; (800b754 <tcp_input+0x4bc>)
 800b620:	4848      	ldr	r0, [pc, #288]	; (800b744 <tcp_input+0x4ac>)
 800b622:	f006 ff8f 	bl	8012544 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	7a1b      	ldrb	r3, [r3, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d009      	beq.n	800b642 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	7a1a      	ldrb	r2, [r3, #8]
 800b632:	4b41      	ldr	r3, [pc, #260]	; (800b738 <tcp_input+0x4a0>)
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b63a:	3301      	adds	r3, #1
 800b63c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b63e:	429a      	cmp	r2, r3
 800b640:	d122      	bne.n	800b688 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	8b1a      	ldrh	r2, [r3, #24]
 800b646:	4b3b      	ldr	r3, [pc, #236]	; (800b734 <tcp_input+0x49c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	881b      	ldrh	r3, [r3, #0]
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	429a      	cmp	r2, r3
 800b650:	d11b      	bne.n	800b68a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	8ada      	ldrh	r2, [r3, #22]
 800b656:	4b37      	ldr	r3, [pc, #220]	; (800b734 <tcp_input+0x49c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	885b      	ldrh	r3, [r3, #2]
 800b65c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b65e:	429a      	cmp	r2, r3
 800b660:	d113      	bne.n	800b68a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	4b34      	ldr	r3, [pc, #208]	; (800b738 <tcp_input+0x4a0>)
 800b668:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d10d      	bne.n	800b68a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4b31      	ldr	r3, [pc, #196]	; (800b738 <tcp_input+0x4a0>)
 800b674:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b676:	429a      	cmp	r2, r3
 800b678:	d107      	bne.n	800b68a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b67a:	69f8      	ldr	r0, [r7, #28]
 800b67c:	f000 fb56 	bl	800bd2c <tcp_timewait_input>
        }
        pbuf_free(p);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7fd fd71 	bl	8009168 <pbuf_free>
        return;
 800b686:	e1fd      	b.n	800ba84 <tcp_input+0x7ec>
        continue;
 800b688:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	61fb      	str	r3, [r7, #28]
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1bc      	bne.n	800b610 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b696:	2300      	movs	r3, #0
 800b698:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b69a:	4b2f      	ldr	r3, [pc, #188]	; (800b758 <tcp_input+0x4c0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	e02a      	b.n	800b6f8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	7a1b      	ldrb	r3, [r3, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00c      	beq.n	800b6c4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	7a1a      	ldrb	r2, [r3, #8]
 800b6ae:	4b22      	ldr	r3, [pc, #136]	; (800b738 <tcp_input+0x4a0>)
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d002      	beq.n	800b6c4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	61bb      	str	r3, [r7, #24]
        continue;
 800b6c2:	e016      	b.n	800b6f2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	8ada      	ldrh	r2, [r3, #22]
 800b6c8:	4b1a      	ldr	r3, [pc, #104]	; (800b734 <tcp_input+0x49c>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	885b      	ldrh	r3, [r3, #2]
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d10c      	bne.n	800b6ee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	4b17      	ldr	r3, [pc, #92]	; (800b738 <tcp_input+0x4a0>)
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d00f      	beq.n	800b700 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00d      	beq.n	800b702 <tcp_input+0x46a>
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d009      	beq.n	800b702 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	617b      	str	r3, [r7, #20]
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1d1      	bne.n	800b6a2 <tcp_input+0x40a>
 800b6fe:	e000      	b.n	800b702 <tcp_input+0x46a>
            break;
 800b700:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d029      	beq.n	800b75c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00a      	beq.n	800b724 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	68da      	ldr	r2, [r3, #12]
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b716:	4b10      	ldr	r3, [pc, #64]	; (800b758 <tcp_input+0x4c0>)
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b71e:	4a0e      	ldr	r2, [pc, #56]	; (800b758 <tcp_input+0x4c0>)
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b724:	6978      	ldr	r0, [r7, #20]
 800b726:	f000 fa03 	bl	800bb30 <tcp_listen_input>
      }
      pbuf_free(p);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7fd fd1c 	bl	8009168 <pbuf_free>
      return;
 800b730:	e1a8      	b.n	800ba84 <tcp_input+0x7ec>
 800b732:	bf00      	nop
 800b734:	2000805c 	.word	0x2000805c
 800b738:	20005118 	.word	0x20005118
 800b73c:	08014d3c 	.word	0x08014d3c
 800b740:	08014e68 	.word	0x08014e68
 800b744:	08014d88 	.word	0x08014d88
 800b748:	20008040 	.word	0x20008040
 800b74c:	08014e94 	.word	0x08014e94
 800b750:	20008044 	.word	0x20008044
 800b754:	08014ec0 	.word	0x08014ec0
 800b758:	2000803c 	.word	0x2000803c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 8158 	beq.w	800ba14 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b764:	4b95      	ldr	r3, [pc, #596]	; (800b9bc <tcp_input+0x724>)
 800b766:	2200      	movs	r2, #0
 800b768:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	891a      	ldrh	r2, [r3, #8]
 800b76e:	4b93      	ldr	r3, [pc, #588]	; (800b9bc <tcp_input+0x724>)
 800b770:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b772:	4a92      	ldr	r2, [pc, #584]	; (800b9bc <tcp_input+0x724>)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b778:	4b91      	ldr	r3, [pc, #580]	; (800b9c0 <tcp_input+0x728>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a8f      	ldr	r2, [pc, #572]	; (800b9bc <tcp_input+0x724>)
 800b77e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b780:	4b90      	ldr	r3, [pc, #576]	; (800b9c4 <tcp_input+0x72c>)
 800b782:	2200      	movs	r2, #0
 800b784:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b786:	4b90      	ldr	r3, [pc, #576]	; (800b9c8 <tcp_input+0x730>)
 800b788:	2200      	movs	r2, #0
 800b78a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b78c:	4b8f      	ldr	r3, [pc, #572]	; (800b9cc <tcp_input+0x734>)
 800b78e:	2200      	movs	r2, #0
 800b790:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b792:	4b8f      	ldr	r3, [pc, #572]	; (800b9d0 <tcp_input+0x738>)
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	f003 0308 	and.w	r3, r3, #8
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d006      	beq.n	800b7ac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	7b5b      	ldrb	r3, [r3, #13]
 800b7a2:	f043 0301 	orr.w	r3, r3, #1
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d017      	beq.n	800b7e4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b7b4:	69f8      	ldr	r0, [r7, #28]
 800b7b6:	f7ff f873 	bl	800a8a0 <tcp_process_refused_data>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	f113 0f0d 	cmn.w	r3, #13
 800b7c0:	d007      	beq.n	800b7d2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00c      	beq.n	800b7e4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b7ca:	4b82      	ldr	r3, [pc, #520]	; (800b9d4 <tcp_input+0x73c>)
 800b7cc:	881b      	ldrh	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d008      	beq.n	800b7e4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f040 80e3 	bne.w	800b9a2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b7dc:	69f8      	ldr	r0, [r7, #28]
 800b7de:	f003 fe05 	bl	800f3ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b7e2:	e0de      	b.n	800b9a2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b7e4:	4a7c      	ldr	r2, [pc, #496]	; (800b9d8 <tcp_input+0x740>)
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b7ea:	69f8      	ldr	r0, [r7, #28]
 800b7ec:	f000 fb18 	bl	800be20 <tcp_process>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b7f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7f8:	f113 0f0d 	cmn.w	r3, #13
 800b7fc:	f000 80d3 	beq.w	800b9a6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b800:	4b71      	ldr	r3, [pc, #452]	; (800b9c8 <tcp_input+0x730>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	f003 0308 	and.w	r3, r3, #8
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d015      	beq.n	800b838 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b812:	2b00      	cmp	r3, #0
 800b814:	d008      	beq.n	800b828 <tcp_input+0x590>
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b81c:	69fa      	ldr	r2, [r7, #28]
 800b81e:	6912      	ldr	r2, [r2, #16]
 800b820:	f06f 010d 	mvn.w	r1, #13
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b828:	69f9      	ldr	r1, [r7, #28]
 800b82a:	486c      	ldr	r0, [pc, #432]	; (800b9dc <tcp_input+0x744>)
 800b82c:	f7ff fbbc 	bl	800afa8 <tcp_pcb_remove>
        tcp_free(pcb);
 800b830:	69f8      	ldr	r0, [r7, #28]
 800b832:	f7fd ff39 	bl	80096a8 <tcp_free>
 800b836:	e0da      	b.n	800b9ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b838:	2300      	movs	r3, #0
 800b83a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b83c:	4b63      	ldr	r3, [pc, #396]	; (800b9cc <tcp_input+0x734>)
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d01d      	beq.n	800b880 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b844:	4b61      	ldr	r3, [pc, #388]	; (800b9cc <tcp_input+0x734>)
 800b846:	881b      	ldrh	r3, [r3, #0]
 800b848:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00a      	beq.n	800b86a <tcp_input+0x5d2>
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b85a:	69fa      	ldr	r2, [r7, #28]
 800b85c:	6910      	ldr	r0, [r2, #16]
 800b85e:	89fa      	ldrh	r2, [r7, #14]
 800b860:	69f9      	ldr	r1, [r7, #28]
 800b862:	4798      	blx	r3
 800b864:	4603      	mov	r3, r0
 800b866:	74fb      	strb	r3, [r7, #19]
 800b868:	e001      	b.n	800b86e <tcp_input+0x5d6>
 800b86a:	2300      	movs	r3, #0
 800b86c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b86e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b872:	f113 0f0d 	cmn.w	r3, #13
 800b876:	f000 8098 	beq.w	800b9aa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b87a:	4b54      	ldr	r3, [pc, #336]	; (800b9cc <tcp_input+0x734>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b880:	69f8      	ldr	r0, [r7, #28]
 800b882:	f000 f915 	bl	800bab0 <tcp_input_delayed_close>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f040 8090 	bne.w	800b9ae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b88e:	4b4d      	ldr	r3, [pc, #308]	; (800b9c4 <tcp_input+0x72c>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d041      	beq.n	800b91a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d006      	beq.n	800b8ac <tcp_input+0x614>
 800b89e:	4b50      	ldr	r3, [pc, #320]	; (800b9e0 <tcp_input+0x748>)
 800b8a0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b8a4:	494f      	ldr	r1, [pc, #316]	; (800b9e4 <tcp_input+0x74c>)
 800b8a6:	4850      	ldr	r0, [pc, #320]	; (800b9e8 <tcp_input+0x750>)
 800b8a8:	f006 fe4c 	bl	8012544 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	8b5b      	ldrh	r3, [r3, #26]
 800b8b0:	f003 0310 	and.w	r3, r3, #16
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d008      	beq.n	800b8ca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b8b8:	4b42      	ldr	r3, [pc, #264]	; (800b9c4 <tcp_input+0x72c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fd fc53 	bl	8009168 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b8c2:	69f8      	ldr	r0, [r7, #28]
 800b8c4:	f7fe f9d8 	bl	8009c78 <tcp_abort>
            goto aborted;
 800b8c8:	e091      	b.n	800b9ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00c      	beq.n	800b8ee <tcp_input+0x656>
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	6918      	ldr	r0, [r3, #16]
 800b8de:	4b39      	ldr	r3, [pc, #228]	; (800b9c4 <tcp_input+0x72c>)
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	69f9      	ldr	r1, [r7, #28]
 800b8e6:	47a0      	blx	r4
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	74fb      	strb	r3, [r7, #19]
 800b8ec:	e008      	b.n	800b900 <tcp_input+0x668>
 800b8ee:	4b35      	ldr	r3, [pc, #212]	; (800b9c4 <tcp_input+0x72c>)
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	69f9      	ldr	r1, [r7, #28]
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	f7ff f8a8 	bl	800aa4c <tcp_recv_null>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b900:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b904:	f113 0f0d 	cmn.w	r3, #13
 800b908:	d053      	beq.n	800b9b2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b90a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b912:	4b2c      	ldr	r3, [pc, #176]	; (800b9c4 <tcp_input+0x72c>)
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b91a:	4b2b      	ldr	r3, [pc, #172]	; (800b9c8 <tcp_input+0x730>)
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	f003 0320 	and.w	r3, r3, #32
 800b922:	2b00      	cmp	r3, #0
 800b924:	d030      	beq.n	800b988 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d009      	beq.n	800b942 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b932:	7b5a      	ldrb	r2, [r3, #13]
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b938:	f042 0220 	orr.w	r2, r2, #32
 800b93c:	b2d2      	uxtb	r2, r2
 800b93e:	735a      	strb	r2, [r3, #13]
 800b940:	e022      	b.n	800b988 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b946:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b94a:	d005      	beq.n	800b958 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b950:	3301      	adds	r3, #1
 800b952:	b29a      	uxth	r2, r3
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00b      	beq.n	800b97a <tcp_input+0x6e2>
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	6918      	ldr	r0, [r3, #16]
 800b96c:	2300      	movs	r3, #0
 800b96e:	2200      	movs	r2, #0
 800b970:	69f9      	ldr	r1, [r7, #28]
 800b972:	47a0      	blx	r4
 800b974:	4603      	mov	r3, r0
 800b976:	74fb      	strb	r3, [r7, #19]
 800b978:	e001      	b.n	800b97e <tcp_input+0x6e6>
 800b97a:	2300      	movs	r3, #0
 800b97c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b97e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b982:	f113 0f0d 	cmn.w	r3, #13
 800b986:	d016      	beq.n	800b9b6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b988:	4b13      	ldr	r3, [pc, #76]	; (800b9d8 <tcp_input+0x740>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b98e:	69f8      	ldr	r0, [r7, #28]
 800b990:	f000 f88e 	bl	800bab0 <tcp_input_delayed_close>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d128      	bne.n	800b9ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b99a:	69f8      	ldr	r0, [r7, #28]
 800b99c:	f002 ff20 	bl	800e7e0 <tcp_output>
 800b9a0:	e025      	b.n	800b9ee <tcp_input+0x756>
        goto aborted;
 800b9a2:	bf00      	nop
 800b9a4:	e023      	b.n	800b9ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b9a6:	bf00      	nop
 800b9a8:	e021      	b.n	800b9ee <tcp_input+0x756>
              goto aborted;
 800b9aa:	bf00      	nop
 800b9ac:	e01f      	b.n	800b9ee <tcp_input+0x756>
          goto aborted;
 800b9ae:	bf00      	nop
 800b9b0:	e01d      	b.n	800b9ee <tcp_input+0x756>
            goto aborted;
 800b9b2:	bf00      	nop
 800b9b4:	e01b      	b.n	800b9ee <tcp_input+0x756>
              goto aborted;
 800b9b6:	bf00      	nop
 800b9b8:	e019      	b.n	800b9ee <tcp_input+0x756>
 800b9ba:	bf00      	nop
 800b9bc:	2000804c 	.word	0x2000804c
 800b9c0:	2000805c 	.word	0x2000805c
 800b9c4:	2000807c 	.word	0x2000807c
 800b9c8:	20008079 	.word	0x20008079
 800b9cc:	20008074 	.word	0x20008074
 800b9d0:	20008078 	.word	0x20008078
 800b9d4:	20008076 	.word	0x20008076
 800b9d8:	20008080 	.word	0x20008080
 800b9dc:	20008040 	.word	0x20008040
 800b9e0:	08014d3c 	.word	0x08014d3c
 800b9e4:	08014ef0 	.word	0x08014ef0
 800b9e8:	08014d88 	.word	0x08014d88
          goto aborted;
 800b9ec:	bf00      	nop
    tcp_input_pcb = NULL;
 800b9ee:	4b27      	ldr	r3, [pc, #156]	; (800ba8c <tcp_input+0x7f4>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b9f4:	4b26      	ldr	r3, [pc, #152]	; (800ba90 <tcp_input+0x7f8>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b9fa:	4b26      	ldr	r3, [pc, #152]	; (800ba94 <tcp_input+0x7fc>)
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d03f      	beq.n	800ba82 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ba02:	4b24      	ldr	r3, [pc, #144]	; (800ba94 <tcp_input+0x7fc>)
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fd fbae 	bl	8009168 <pbuf_free>
      inseg.p = NULL;
 800ba0c:	4b21      	ldr	r3, [pc, #132]	; (800ba94 <tcp_input+0x7fc>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ba12:	e036      	b.n	800ba82 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ba14:	4b20      	ldr	r3, [pc, #128]	; (800ba98 <tcp_input+0x800>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	899b      	ldrh	r3, [r3, #12]
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fb ff8d 	bl	800793c <lwip_htons>
 800ba22:	4603      	mov	r3, r0
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	f003 0304 	and.w	r3, r3, #4
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d118      	bne.n	800ba60 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba2e:	4b1b      	ldr	r3, [pc, #108]	; (800ba9c <tcp_input+0x804>)
 800ba30:	6819      	ldr	r1, [r3, #0]
 800ba32:	4b1b      	ldr	r3, [pc, #108]	; (800baa0 <tcp_input+0x808>)
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	461a      	mov	r2, r3
 800ba38:	4b1a      	ldr	r3, [pc, #104]	; (800baa4 <tcp_input+0x80c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba3e:	4b16      	ldr	r3, [pc, #88]	; (800ba98 <tcp_input+0x800>)
 800ba40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba42:	885b      	ldrh	r3, [r3, #2]
 800ba44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba46:	4a14      	ldr	r2, [pc, #80]	; (800ba98 <tcp_input+0x800>)
 800ba48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba4a:	8812      	ldrh	r2, [r2, #0]
 800ba4c:	b292      	uxth	r2, r2
 800ba4e:	9202      	str	r2, [sp, #8]
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	4b15      	ldr	r3, [pc, #84]	; (800baa8 <tcp_input+0x810>)
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	4b15      	ldr	r3, [pc, #84]	; (800baac <tcp_input+0x814>)
 800ba58:	4602      	mov	r2, r0
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	f003 fc74 	bl	800f348 <tcp_rst>
    pbuf_free(p);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7fd fb81 	bl	8009168 <pbuf_free>
  return;
 800ba66:	e00c      	b.n	800ba82 <tcp_input+0x7ea>
    goto dropped;
 800ba68:	bf00      	nop
 800ba6a:	e006      	b.n	800ba7a <tcp_input+0x7e2>
    goto dropped;
 800ba6c:	bf00      	nop
 800ba6e:	e004      	b.n	800ba7a <tcp_input+0x7e2>
    goto dropped;
 800ba70:	bf00      	nop
 800ba72:	e002      	b.n	800ba7a <tcp_input+0x7e2>
      goto dropped;
 800ba74:	bf00      	nop
 800ba76:	e000      	b.n	800ba7a <tcp_input+0x7e2>
      goto dropped;
 800ba78:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7fd fb74 	bl	8009168 <pbuf_free>
 800ba80:	e000      	b.n	800ba84 <tcp_input+0x7ec>
  return;
 800ba82:	bf00      	nop
}
 800ba84:	3724      	adds	r7, #36	; 0x24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd90      	pop	{r4, r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20008080 	.word	0x20008080
 800ba90:	2000807c 	.word	0x2000807c
 800ba94:	2000804c 	.word	0x2000804c
 800ba98:	2000805c 	.word	0x2000805c
 800ba9c:	20008070 	.word	0x20008070
 800baa0:	20008076 	.word	0x20008076
 800baa4:	2000806c 	.word	0x2000806c
 800baa8:	20005128 	.word	0x20005128
 800baac:	2000512c 	.word	0x2000512c

0800bab0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d106      	bne.n	800bacc <tcp_input_delayed_close+0x1c>
 800babe:	4b17      	ldr	r3, [pc, #92]	; (800bb1c <tcp_input_delayed_close+0x6c>)
 800bac0:	f240 225a 	movw	r2, #602	; 0x25a
 800bac4:	4916      	ldr	r1, [pc, #88]	; (800bb20 <tcp_input_delayed_close+0x70>)
 800bac6:	4817      	ldr	r0, [pc, #92]	; (800bb24 <tcp_input_delayed_close+0x74>)
 800bac8:	f006 fd3c 	bl	8012544 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800bacc:	4b16      	ldr	r3, [pc, #88]	; (800bb28 <tcp_input_delayed_close+0x78>)
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	f003 0310 	and.w	r3, r3, #16
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d01c      	beq.n	800bb12 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	8b5b      	ldrh	r3, [r3, #26]
 800badc:	f003 0310 	and.w	r3, r3, #16
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10d      	bne.n	800bb00 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baea:	2b00      	cmp	r3, #0
 800baec:	d008      	beq.n	800bb00 <tcp_input_delayed_close+0x50>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	6912      	ldr	r2, [r2, #16]
 800baf8:	f06f 010e 	mvn.w	r1, #14
 800bafc:	4610      	mov	r0, r2
 800bafe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bb00:	6879      	ldr	r1, [r7, #4]
 800bb02:	480a      	ldr	r0, [pc, #40]	; (800bb2c <tcp_input_delayed_close+0x7c>)
 800bb04:	f7ff fa50 	bl	800afa8 <tcp_pcb_remove>
    tcp_free(pcb);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7fd fdcd 	bl	80096a8 <tcp_free>
    return 1;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e000      	b.n	800bb14 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	08014d3c 	.word	0x08014d3c
 800bb20:	08014f0c 	.word	0x08014f0c
 800bb24:	08014d88 	.word	0x08014d88
 800bb28:	20008079 	.word	0x20008079
 800bb2c:	20008040 	.word	0x20008040

0800bb30 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bb30:	b590      	push	{r4, r7, lr}
 800bb32:	b08b      	sub	sp, #44	; 0x2c
 800bb34:	af04      	add	r7, sp, #16
 800bb36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bb38:	4b6f      	ldr	r3, [pc, #444]	; (800bcf8 <tcp_listen_input+0x1c8>)
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	f003 0304 	and.w	r3, r3, #4
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f040 80d2 	bne.w	800bcea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d106      	bne.n	800bb5a <tcp_listen_input+0x2a>
 800bb4c:	4b6b      	ldr	r3, [pc, #428]	; (800bcfc <tcp_listen_input+0x1cc>)
 800bb4e:	f240 2281 	movw	r2, #641	; 0x281
 800bb52:	496b      	ldr	r1, [pc, #428]	; (800bd00 <tcp_listen_input+0x1d0>)
 800bb54:	486b      	ldr	r0, [pc, #428]	; (800bd04 <tcp_listen_input+0x1d4>)
 800bb56:	f006 fcf5 	bl	8012544 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bb5a:	4b67      	ldr	r3, [pc, #412]	; (800bcf8 <tcp_listen_input+0x1c8>)
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	f003 0310 	and.w	r3, r3, #16
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d019      	beq.n	800bb9a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb66:	4b68      	ldr	r3, [pc, #416]	; (800bd08 <tcp_listen_input+0x1d8>)
 800bb68:	6819      	ldr	r1, [r3, #0]
 800bb6a:	4b68      	ldr	r3, [pc, #416]	; (800bd0c <tcp_listen_input+0x1dc>)
 800bb6c:	881b      	ldrh	r3, [r3, #0]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	4b67      	ldr	r3, [pc, #412]	; (800bd10 <tcp_listen_input+0x1e0>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb76:	4b67      	ldr	r3, [pc, #412]	; (800bd14 <tcp_listen_input+0x1e4>)
 800bb78:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb7a:	885b      	ldrh	r3, [r3, #2]
 800bb7c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb7e:	4a65      	ldr	r2, [pc, #404]	; (800bd14 <tcp_listen_input+0x1e4>)
 800bb80:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb82:	8812      	ldrh	r2, [r2, #0]
 800bb84:	b292      	uxth	r2, r2
 800bb86:	9202      	str	r2, [sp, #8]
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	4b63      	ldr	r3, [pc, #396]	; (800bd18 <tcp_listen_input+0x1e8>)
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	4b63      	ldr	r3, [pc, #396]	; (800bd1c <tcp_listen_input+0x1ec>)
 800bb90:	4602      	mov	r2, r0
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f003 fbd8 	bl	800f348 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bb98:	e0a9      	b.n	800bcee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800bb9a:	4b57      	ldr	r3, [pc, #348]	; (800bcf8 <tcp_listen_input+0x1c8>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	f003 0302 	and.w	r3, r3, #2
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 80a3 	beq.w	800bcee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	7d5b      	ldrb	r3, [r3, #21]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7ff f871 	bl	800ac94 <tcp_alloc>
 800bbb2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d111      	bne.n	800bbde <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00a      	beq.n	800bbd8 <tcp_listen_input+0xa8>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	6910      	ldr	r0, [r2, #16]
 800bbca:	f04f 32ff 	mov.w	r2, #4294967295
 800bbce:	2100      	movs	r1, #0
 800bbd0:	4798      	blx	r3
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	73bb      	strb	r3, [r7, #14]
      return;
 800bbd6:	e08b      	b.n	800bcf0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bbd8:	23f0      	movs	r3, #240	; 0xf0
 800bbda:	73bb      	strb	r3, [r7, #14]
      return;
 800bbdc:	e088      	b.n	800bcf0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bbde:	4b50      	ldr	r3, [pc, #320]	; (800bd20 <tcp_listen_input+0x1f0>)
 800bbe0:	695a      	ldr	r2, [r3, #20]
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bbe6:	4b4e      	ldr	r3, [pc, #312]	; (800bd20 <tcp_listen_input+0x1f0>)
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	8ada      	ldrh	r2, [r3, #22]
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bbf6:	4b47      	ldr	r3, [pc, #284]	; (800bd14 <tcp_listen_input+0x1e4>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	881b      	ldrh	r3, [r3, #0]
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2203      	movs	r2, #3
 800bc06:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bc08:	4b41      	ldr	r3, [pc, #260]	; (800bd10 <tcp_listen_input+0x1e0>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	1c5a      	adds	r2, r3, #1
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bc1a:	6978      	ldr	r0, [r7, #20]
 800bc1c:	f7ff fa58 	bl	800b0d0 <tcp_next_iss>
 800bc20:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bc3a:	4b35      	ldr	r3, [pc, #212]	; (800bd10 <tcp_listen_input+0x1e0>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	1e5a      	subs	r2, r3, #1
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	691a      	ldr	r2, [r3, #16]
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	7a5b      	ldrb	r3, [r3, #9]
 800bc56:	f003 030c 	and.w	r3, r3, #12
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	7a1a      	ldrb	r2, [r3, #8]
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bc68:	4b2e      	ldr	r3, [pc, #184]	; (800bd24 <tcp_listen_input+0x1f4>)
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	60da      	str	r2, [r3, #12]
 800bc70:	4a2c      	ldr	r2, [pc, #176]	; (800bd24 <tcp_listen_input+0x1f4>)
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	6013      	str	r3, [r2, #0]
 800bc76:	f003 fd29 	bl	800f6cc <tcp_timer_needed>
 800bc7a:	4b2b      	ldr	r3, [pc, #172]	; (800bd28 <tcp_listen_input+0x1f8>)
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bc80:	6978      	ldr	r0, [r7, #20]
 800bc82:	f001 fd8f 	bl	800d7a4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bc86:	4b23      	ldr	r3, [pc, #140]	; (800bd14 <tcp_listen_input+0x1e4>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	89db      	ldrh	r3, [r3, #14]
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	3304      	adds	r3, #4
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f005 f913 	bl	8010ed4 <ip4_route>
 800bcae:	4601      	mov	r1, r0
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f7ff fa30 	bl	800b11c <tcp_eff_send_mss_netif>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bcc4:	2112      	movs	r1, #18
 800bcc6:	6978      	ldr	r0, [r7, #20]
 800bcc8:	f002 fc9c 	bl	800e604 <tcp_enqueue_flags>
 800bccc:	4603      	mov	r3, r0
 800bcce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bcd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d004      	beq.n	800bce2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bcd8:	2100      	movs	r1, #0
 800bcda:	6978      	ldr	r0, [r7, #20]
 800bcdc:	f7fd ff0e 	bl	8009afc <tcp_abandon>
      return;
 800bce0:	e006      	b.n	800bcf0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800bce2:	6978      	ldr	r0, [r7, #20]
 800bce4:	f002 fd7c 	bl	800e7e0 <tcp_output>
  return;
 800bce8:	e001      	b.n	800bcee <tcp_listen_input+0x1be>
    return;
 800bcea:	bf00      	nop
 800bcec:	e000      	b.n	800bcf0 <tcp_listen_input+0x1c0>
  return;
 800bcee:	bf00      	nop
}
 800bcf0:	371c      	adds	r7, #28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd90      	pop	{r4, r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20008078 	.word	0x20008078
 800bcfc:	08014d3c 	.word	0x08014d3c
 800bd00:	08014f34 	.word	0x08014f34
 800bd04:	08014d88 	.word	0x08014d88
 800bd08:	20008070 	.word	0x20008070
 800bd0c:	20008076 	.word	0x20008076
 800bd10:	2000806c 	.word	0x2000806c
 800bd14:	2000805c 	.word	0x2000805c
 800bd18:	20005128 	.word	0x20005128
 800bd1c:	2000512c 	.word	0x2000512c
 800bd20:	20005118 	.word	0x20005118
 800bd24:	20008040 	.word	0x20008040
 800bd28:	20008048 	.word	0x20008048

0800bd2c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af04      	add	r7, sp, #16
 800bd32:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bd34:	4b2f      	ldr	r3, [pc, #188]	; (800bdf4 <tcp_timewait_input+0xc8>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	f003 0304 	and.w	r3, r3, #4
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d153      	bne.n	800bde8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d106      	bne.n	800bd54 <tcp_timewait_input+0x28>
 800bd46:	4b2c      	ldr	r3, [pc, #176]	; (800bdf8 <tcp_timewait_input+0xcc>)
 800bd48:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bd4c:	492b      	ldr	r1, [pc, #172]	; (800bdfc <tcp_timewait_input+0xd0>)
 800bd4e:	482c      	ldr	r0, [pc, #176]	; (800be00 <tcp_timewait_input+0xd4>)
 800bd50:	f006 fbf8 	bl	8012544 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bd54:	4b27      	ldr	r3, [pc, #156]	; (800bdf4 <tcp_timewait_input+0xc8>)
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d02a      	beq.n	800bdb6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bd60:	4b28      	ldr	r3, [pc, #160]	; (800be04 <tcp_timewait_input+0xd8>)
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	db2d      	blt.n	800bdca <tcp_timewait_input+0x9e>
 800bd6e:	4b25      	ldr	r3, [pc, #148]	; (800be04 <tcp_timewait_input+0xd8>)
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bd7a:	440b      	add	r3, r1
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	dc23      	bgt.n	800bdca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd82:	4b21      	ldr	r3, [pc, #132]	; (800be08 <tcp_timewait_input+0xdc>)
 800bd84:	6819      	ldr	r1, [r3, #0]
 800bd86:	4b21      	ldr	r3, [pc, #132]	; (800be0c <tcp_timewait_input+0xe0>)
 800bd88:	881b      	ldrh	r3, [r3, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	4b1d      	ldr	r3, [pc, #116]	; (800be04 <tcp_timewait_input+0xd8>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd92:	4b1f      	ldr	r3, [pc, #124]	; (800be10 <tcp_timewait_input+0xe4>)
 800bd94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd96:	885b      	ldrh	r3, [r3, #2]
 800bd98:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd9a:	4a1d      	ldr	r2, [pc, #116]	; (800be10 <tcp_timewait_input+0xe4>)
 800bd9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd9e:	8812      	ldrh	r2, [r2, #0]
 800bda0:	b292      	uxth	r2, r2
 800bda2:	9202      	str	r2, [sp, #8]
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	4b1b      	ldr	r3, [pc, #108]	; (800be14 <tcp_timewait_input+0xe8>)
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	4b1b      	ldr	r3, [pc, #108]	; (800be18 <tcp_timewait_input+0xec>)
 800bdac:	4602      	mov	r2, r0
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f003 faca 	bl	800f348 <tcp_rst>
      return;
 800bdb4:	e01b      	b.n	800bdee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <tcp_timewait_input+0xc8>)
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	f003 0301 	and.w	r3, r3, #1
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bdc2:	4b16      	ldr	r3, [pc, #88]	; (800be1c <tcp_timewait_input+0xf0>)
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bdca:	4b10      	ldr	r3, [pc, #64]	; (800be0c <tcp_timewait_input+0xe0>)
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00c      	beq.n	800bdec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	8b5b      	ldrh	r3, [r3, #26]
 800bdd6:	f043 0302 	orr.w	r3, r3, #2
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f002 fcfd 	bl	800e7e0 <tcp_output>
  }
  return;
 800bde6:	e001      	b.n	800bdec <tcp_timewait_input+0xc0>
    return;
 800bde8:	bf00      	nop
 800bdea:	e000      	b.n	800bdee <tcp_timewait_input+0xc2>
  return;
 800bdec:	bf00      	nop
}
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20008078 	.word	0x20008078
 800bdf8:	08014d3c 	.word	0x08014d3c
 800bdfc:	08014f54 	.word	0x08014f54
 800be00:	08014d88 	.word	0x08014d88
 800be04:	2000806c 	.word	0x2000806c
 800be08:	20008070 	.word	0x20008070
 800be0c:	20008076 	.word	0x20008076
 800be10:	2000805c 	.word	0x2000805c
 800be14:	20005128 	.word	0x20005128
 800be18:	2000512c 	.word	0x2000512c
 800be1c:	20008034 	.word	0x20008034

0800be20 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800be20:	b590      	push	{r4, r7, lr}
 800be22:	b08d      	sub	sp, #52	; 0x34
 800be24:	af04      	add	r7, sp, #16
 800be26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800be2c:	2300      	movs	r3, #0
 800be2e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d106      	bne.n	800be44 <tcp_process+0x24>
 800be36:	4b9d      	ldr	r3, [pc, #628]	; (800c0ac <tcp_process+0x28c>)
 800be38:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800be3c:	499c      	ldr	r1, [pc, #624]	; (800c0b0 <tcp_process+0x290>)
 800be3e:	489d      	ldr	r0, [pc, #628]	; (800c0b4 <tcp_process+0x294>)
 800be40:	f006 fb80 	bl	8012544 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800be44:	4b9c      	ldr	r3, [pc, #624]	; (800c0b8 <tcp_process+0x298>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	f003 0304 	and.w	r3, r3, #4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d04e      	beq.n	800beee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	7d1b      	ldrb	r3, [r3, #20]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d108      	bne.n	800be6a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be5c:	4b97      	ldr	r3, [pc, #604]	; (800c0bc <tcp_process+0x29c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	429a      	cmp	r2, r3
 800be62:	d123      	bne.n	800beac <tcp_process+0x8c>
        acceptable = 1;
 800be64:	2301      	movs	r3, #1
 800be66:	76fb      	strb	r3, [r7, #27]
 800be68:	e020      	b.n	800beac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be6e:	4b94      	ldr	r3, [pc, #592]	; (800c0c0 <tcp_process+0x2a0>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	429a      	cmp	r2, r3
 800be74:	d102      	bne.n	800be7c <tcp_process+0x5c>
        acceptable = 1;
 800be76:	2301      	movs	r3, #1
 800be78:	76fb      	strb	r3, [r7, #27]
 800be7a:	e017      	b.n	800beac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be7c:	4b90      	ldr	r3, [pc, #576]	; (800c0c0 <tcp_process+0x2a0>)
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	2b00      	cmp	r3, #0
 800be88:	db10      	blt.n	800beac <tcp_process+0x8c>
 800be8a:	4b8d      	ldr	r3, [pc, #564]	; (800c0c0 <tcp_process+0x2a0>)
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be92:	6879      	ldr	r1, [r7, #4]
 800be94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be96:	440b      	add	r3, r1
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	dc06      	bgt.n	800beac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	8b5b      	ldrh	r3, [r3, #26]
 800bea2:	f043 0302 	orr.w	r3, r3, #2
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800beac:	7efb      	ldrb	r3, [r7, #27]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d01b      	beq.n	800beea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	7d1b      	ldrb	r3, [r3, #20]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d106      	bne.n	800bec8 <tcp_process+0xa8>
 800beba:	4b7c      	ldr	r3, [pc, #496]	; (800c0ac <tcp_process+0x28c>)
 800bebc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bec0:	4980      	ldr	r1, [pc, #512]	; (800c0c4 <tcp_process+0x2a4>)
 800bec2:	487c      	ldr	r0, [pc, #496]	; (800c0b4 <tcp_process+0x294>)
 800bec4:	f006 fb3e 	bl	8012544 <iprintf>
      recv_flags |= TF_RESET;
 800bec8:	4b7f      	ldr	r3, [pc, #508]	; (800c0c8 <tcp_process+0x2a8>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	f043 0308 	orr.w	r3, r3, #8
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	4b7d      	ldr	r3, [pc, #500]	; (800c0c8 <tcp_process+0x2a8>)
 800bed4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	8b5b      	ldrh	r3, [r3, #26]
 800beda:	f023 0301 	bic.w	r3, r3, #1
 800bede:	b29a      	uxth	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bee4:	f06f 030d 	mvn.w	r3, #13
 800bee8:	e37a      	b.n	800c5e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800beea:	2300      	movs	r3, #0
 800beec:	e378      	b.n	800c5e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800beee:	4b72      	ldr	r3, [pc, #456]	; (800c0b8 <tcp_process+0x298>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	f003 0302 	and.w	r3, r3, #2
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d010      	beq.n	800bf1c <tcp_process+0xfc>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	7d1b      	ldrb	r3, [r3, #20]
 800befe:	2b02      	cmp	r3, #2
 800bf00:	d00c      	beq.n	800bf1c <tcp_process+0xfc>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	7d1b      	ldrb	r3, [r3, #20]
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	d008      	beq.n	800bf1c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	8b5b      	ldrh	r3, [r3, #26]
 800bf0e:	f043 0302 	orr.w	r3, r3, #2
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e361      	b.n	800c5e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	8b5b      	ldrh	r3, [r3, #26]
 800bf20:	f003 0310 	and.w	r3, r3, #16
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d103      	bne.n	800bf30 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bf28:	4b68      	ldr	r3, [pc, #416]	; (800c0cc <tcp_process+0x2ac>)
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f001 fc2f 	bl	800d7a4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	7d1b      	ldrb	r3, [r3, #20]
 800bf4a:	3b02      	subs	r3, #2
 800bf4c:	2b07      	cmp	r3, #7
 800bf4e:	f200 8337 	bhi.w	800c5c0 <tcp_process+0x7a0>
 800bf52:	a201      	add	r2, pc, #4	; (adr r2, 800bf58 <tcp_process+0x138>)
 800bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf58:	0800bf79 	.word	0x0800bf79
 800bf5c:	0800c1a9 	.word	0x0800c1a9
 800bf60:	0800c321 	.word	0x0800c321
 800bf64:	0800c34b 	.word	0x0800c34b
 800bf68:	0800c46f 	.word	0x0800c46f
 800bf6c:	0800c321 	.word	0x0800c321
 800bf70:	0800c4fb 	.word	0x0800c4fb
 800bf74:	0800c58b 	.word	0x0800c58b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bf78:	4b4f      	ldr	r3, [pc, #316]	; (800c0b8 <tcp_process+0x298>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	f003 0310 	and.w	r3, r3, #16
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 80e4 	beq.w	800c14e <tcp_process+0x32e>
 800bf86:	4b4c      	ldr	r3, [pc, #304]	; (800c0b8 <tcp_process+0x298>)
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	f003 0302 	and.w	r3, r3, #2
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 80dd 	beq.w	800c14e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf98:	1c5a      	adds	r2, r3, #1
 800bf9a:	4b48      	ldr	r3, [pc, #288]	; (800c0bc <tcp_process+0x29c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	f040 80d5 	bne.w	800c14e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bfa4:	4b46      	ldr	r3, [pc, #280]	; (800c0c0 <tcp_process+0x2a0>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bfb6:	4b41      	ldr	r3, [pc, #260]	; (800c0bc <tcp_process+0x29c>)
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bfbe:	4b44      	ldr	r3, [pc, #272]	; (800c0d0 <tcp_process+0x2b0>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	89db      	ldrh	r3, [r3, #14]
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bfd8:	4b39      	ldr	r3, [pc, #228]	; (800c0c0 <tcp_process+0x2a0>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	1e5a      	subs	r2, r3, #1
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2204      	movs	r2, #4
 800bfe6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3304      	adds	r3, #4
 800bff0:	4618      	mov	r0, r3
 800bff2:	f004 ff6f 	bl	8010ed4 <ip4_route>
 800bff6:	4601      	mov	r1, r0
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3304      	adds	r3, #4
 800bffc:	461a      	mov	r2, r3
 800bffe:	4620      	mov	r0, r4
 800c000:	f7ff f88c 	bl	800b11c <tcp_eff_send_mss_netif>
 800c004:	4603      	mov	r3, r0
 800c006:	461a      	mov	r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c010:	009a      	lsls	r2, r3, #2
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	f241 111c 	movw	r1, #4380	; 0x111c
 800c01c:	428b      	cmp	r3, r1
 800c01e:	bf38      	it	cc
 800c020:	460b      	movcc	r3, r1
 800c022:	429a      	cmp	r2, r3
 800c024:	d204      	bcs.n	800c030 <tcp_process+0x210>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	e00d      	b.n	800c04c <tcp_process+0x22c>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	f241 121c 	movw	r2, #4380	; 0x111c
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d904      	bls.n	800c048 <tcp_process+0x228>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	b29b      	uxth	r3, r3
 800c046:	e001      	b.n	800c04c <tcp_process+0x22c>
 800c048:	f241 131c 	movw	r3, #4380	; 0x111c
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d106      	bne.n	800c06a <tcp_process+0x24a>
 800c05c:	4b13      	ldr	r3, [pc, #76]	; (800c0ac <tcp_process+0x28c>)
 800c05e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c062:	491c      	ldr	r1, [pc, #112]	; (800c0d4 <tcp_process+0x2b4>)
 800c064:	4813      	ldr	r0, [pc, #76]	; (800c0b4 <tcp_process+0x294>)
 800c066:	f006 fa6d 	bl	8012544 <iprintf>
        --pcb->snd_queuelen;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c070:	3b01      	subs	r3, #1
 800c072:	b29a      	uxth	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c07e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d12a      	bne.n	800c0dc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c08a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d106      	bne.n	800c0a0 <tcp_process+0x280>
 800c092:	4b06      	ldr	r3, [pc, #24]	; (800c0ac <tcp_process+0x28c>)
 800c094:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c098:	490f      	ldr	r1, [pc, #60]	; (800c0d8 <tcp_process+0x2b8>)
 800c09a:	4806      	ldr	r0, [pc, #24]	; (800c0b4 <tcp_process+0x294>)
 800c09c:	f006 fa52 	bl	8012544 <iprintf>
          pcb->unsent = rseg->next;
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	66da      	str	r2, [r3, #108]	; 0x6c
 800c0a8:	e01c      	b.n	800c0e4 <tcp_process+0x2c4>
 800c0aa:	bf00      	nop
 800c0ac:	08014d3c 	.word	0x08014d3c
 800c0b0:	08014f74 	.word	0x08014f74
 800c0b4:	08014d88 	.word	0x08014d88
 800c0b8:	20008078 	.word	0x20008078
 800c0bc:	20008070 	.word	0x20008070
 800c0c0:	2000806c 	.word	0x2000806c
 800c0c4:	08014f90 	.word	0x08014f90
 800c0c8:	20008079 	.word	0x20008079
 800c0cc:	20008034 	.word	0x20008034
 800c0d0:	2000805c 	.word	0x2000805c
 800c0d4:	08014fb0 	.word	0x08014fb0
 800c0d8:	08014fc8 	.word	0x08014fc8
        } else {
          pcb->unacked = rseg->next;
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c0e4:	69f8      	ldr	r0, [r7, #28]
 800c0e6:	f7fe fc6c 	bl	800a9c2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d104      	bne.n	800c0fc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0f8:	861a      	strh	r2, [r3, #48]	; 0x30
 800c0fa:	e006      	b.n	800c10a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00a      	beq.n	800c12a <tcp_process+0x30a>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	6910      	ldr	r0, [r2, #16]
 800c11e:	2200      	movs	r2, #0
 800c120:	6879      	ldr	r1, [r7, #4]
 800c122:	4798      	blx	r3
 800c124:	4603      	mov	r3, r0
 800c126:	76bb      	strb	r3, [r7, #26]
 800c128:	e001      	b.n	800c12e <tcp_process+0x30e>
 800c12a:	2300      	movs	r3, #0
 800c12c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c12e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c132:	f113 0f0d 	cmn.w	r3, #13
 800c136:	d102      	bne.n	800c13e <tcp_process+0x31e>
          return ERR_ABRT;
 800c138:	f06f 030c 	mvn.w	r3, #12
 800c13c:	e250      	b.n	800c5e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	8b5b      	ldrh	r3, [r3, #26]
 800c142:	f043 0302 	orr.w	r3, r3, #2
 800c146:	b29a      	uxth	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c14c:	e23a      	b.n	800c5c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c14e:	4b98      	ldr	r3, [pc, #608]	; (800c3b0 <tcp_process+0x590>)
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	f003 0310 	and.w	r3, r3, #16
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 8234 	beq.w	800c5c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c15c:	4b95      	ldr	r3, [pc, #596]	; (800c3b4 <tcp_process+0x594>)
 800c15e:	6819      	ldr	r1, [r3, #0]
 800c160:	4b95      	ldr	r3, [pc, #596]	; (800c3b8 <tcp_process+0x598>)
 800c162:	881b      	ldrh	r3, [r3, #0]
 800c164:	461a      	mov	r2, r3
 800c166:	4b95      	ldr	r3, [pc, #596]	; (800c3bc <tcp_process+0x59c>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c16c:	4b94      	ldr	r3, [pc, #592]	; (800c3c0 <tcp_process+0x5a0>)
 800c16e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c170:	885b      	ldrh	r3, [r3, #2]
 800c172:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c174:	4a92      	ldr	r2, [pc, #584]	; (800c3c0 <tcp_process+0x5a0>)
 800c176:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c178:	8812      	ldrh	r2, [r2, #0]
 800c17a:	b292      	uxth	r2, r2
 800c17c:	9202      	str	r2, [sp, #8]
 800c17e:	9301      	str	r3, [sp, #4]
 800c180:	4b90      	ldr	r3, [pc, #576]	; (800c3c4 <tcp_process+0x5a4>)
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	4b90      	ldr	r3, [pc, #576]	; (800c3c8 <tcp_process+0x5a8>)
 800c186:	4602      	mov	r2, r0
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f003 f8dd 	bl	800f348 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c194:	2b05      	cmp	r3, #5
 800c196:	f200 8215 	bhi.w	800c5c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f002 fea7 	bl	800eef4 <tcp_rexmit_rto>
      break;
 800c1a6:	e20d      	b.n	800c5c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c1a8:	4b81      	ldr	r3, [pc, #516]	; (800c3b0 <tcp_process+0x590>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	f003 0310 	and.w	r3, r3, #16
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f000 80a1 	beq.w	800c2f8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c1b6:	4b7f      	ldr	r3, [pc, #508]	; (800c3b4 <tcp_process+0x594>)
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	db7e      	blt.n	800c2c4 <tcp_process+0x4a4>
 800c1c6:	4b7b      	ldr	r3, [pc, #492]	; (800c3b4 <tcp_process+0x594>)
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	dc77      	bgt.n	800c2c4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2204      	movs	r2, #4
 800c1d8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d102      	bne.n	800c1e8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c1e2:	23fa      	movs	r3, #250	; 0xfa
 800c1e4:	76bb      	strb	r3, [r7, #26]
 800c1e6:	e01d      	b.n	800c224 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ec:	699b      	ldr	r3, [r3, #24]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d106      	bne.n	800c200 <tcp_process+0x3e0>
 800c1f2:	4b76      	ldr	r3, [pc, #472]	; (800c3cc <tcp_process+0x5ac>)
 800c1f4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c1f8:	4975      	ldr	r1, [pc, #468]	; (800c3d0 <tcp_process+0x5b0>)
 800c1fa:	4876      	ldr	r0, [pc, #472]	; (800c3d4 <tcp_process+0x5b4>)
 800c1fc:	f006 f9a2 	bl	8012544 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <tcp_process+0x400>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	6910      	ldr	r0, [r2, #16]
 800c214:	2200      	movs	r2, #0
 800c216:	6879      	ldr	r1, [r7, #4]
 800c218:	4798      	blx	r3
 800c21a:	4603      	mov	r3, r0
 800c21c:	76bb      	strb	r3, [r7, #26]
 800c21e:	e001      	b.n	800c224 <tcp_process+0x404>
 800c220:	23f0      	movs	r3, #240	; 0xf0
 800c222:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c224:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00a      	beq.n	800c242 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c22c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c230:	f113 0f0d 	cmn.w	r3, #13
 800c234:	d002      	beq.n	800c23c <tcp_process+0x41c>
              tcp_abort(pcb);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7fd fd1e 	bl	8009c78 <tcp_abort>
            }
            return ERR_ABRT;
 800c23c:	f06f 030c 	mvn.w	r3, #12
 800c240:	e1ce      	b.n	800c5e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fae0 	bl	800c808 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c248:	4b63      	ldr	r3, [pc, #396]	; (800c3d8 <tcp_process+0x5b8>)
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d005      	beq.n	800c25c <tcp_process+0x43c>
            recv_acked--;
 800c250:	4b61      	ldr	r3, [pc, #388]	; (800c3d8 <tcp_process+0x5b8>)
 800c252:	881b      	ldrh	r3, [r3, #0]
 800c254:	3b01      	subs	r3, #1
 800c256:	b29a      	uxth	r2, r3
 800c258:	4b5f      	ldr	r3, [pc, #380]	; (800c3d8 <tcp_process+0x5b8>)
 800c25a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c260:	009a      	lsls	r2, r3, #2
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	f241 111c 	movw	r1, #4380	; 0x111c
 800c26c:	428b      	cmp	r3, r1
 800c26e:	bf38      	it	cc
 800c270:	460b      	movcc	r3, r1
 800c272:	429a      	cmp	r2, r3
 800c274:	d204      	bcs.n	800c280 <tcp_process+0x460>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	e00d      	b.n	800c29c <tcp_process+0x47c>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c284:	005b      	lsls	r3, r3, #1
 800c286:	f241 121c 	movw	r2, #4380	; 0x111c
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d904      	bls.n	800c298 <tcp_process+0x478>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	b29b      	uxth	r3, r3
 800c296:	e001      	b.n	800c29c <tcp_process+0x47c>
 800c298:	f241 131c 	movw	r3, #4380	; 0x111c
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c2a2:	4b4e      	ldr	r3, [pc, #312]	; (800c3dc <tcp_process+0x5bc>)
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	f003 0320 	and.w	r3, r3, #32
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d037      	beq.n	800c31e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	8b5b      	ldrh	r3, [r3, #26]
 800c2b2:	f043 0302 	orr.w	r3, r3, #2
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2207      	movs	r2, #7
 800c2c0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c2c2:	e02c      	b.n	800c31e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2c4:	4b3b      	ldr	r3, [pc, #236]	; (800c3b4 <tcp_process+0x594>)
 800c2c6:	6819      	ldr	r1, [r3, #0]
 800c2c8:	4b3b      	ldr	r3, [pc, #236]	; (800c3b8 <tcp_process+0x598>)
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	4b3b      	ldr	r3, [pc, #236]	; (800c3bc <tcp_process+0x59c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2d4:	4b3a      	ldr	r3, [pc, #232]	; (800c3c0 <tcp_process+0x5a0>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2d8:	885b      	ldrh	r3, [r3, #2]
 800c2da:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2dc:	4a38      	ldr	r2, [pc, #224]	; (800c3c0 <tcp_process+0x5a0>)
 800c2de:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2e0:	8812      	ldrh	r2, [r2, #0]
 800c2e2:	b292      	uxth	r2, r2
 800c2e4:	9202      	str	r2, [sp, #8]
 800c2e6:	9301      	str	r3, [sp, #4]
 800c2e8:	4b36      	ldr	r3, [pc, #216]	; (800c3c4 <tcp_process+0x5a4>)
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	4b36      	ldr	r3, [pc, #216]	; (800c3c8 <tcp_process+0x5a8>)
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f003 f829 	bl	800f348 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c2f6:	e167      	b.n	800c5c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c2f8:	4b2d      	ldr	r3, [pc, #180]	; (800c3b0 <tcp_process+0x590>)
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	f003 0302 	and.w	r3, r3, #2
 800c300:	2b00      	cmp	r3, #0
 800c302:	f000 8161 	beq.w	800c5c8 <tcp_process+0x7a8>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30a:	1e5a      	subs	r2, r3, #1
 800c30c:	4b2b      	ldr	r3, [pc, #172]	; (800c3bc <tcp_process+0x59c>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	429a      	cmp	r2, r3
 800c312:	f040 8159 	bne.w	800c5c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f002 fe0e 	bl	800ef38 <tcp_rexmit>
      break;
 800c31c:	e154      	b.n	800c5c8 <tcp_process+0x7a8>
 800c31e:	e153      	b.n	800c5c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 fa71 	bl	800c808 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c326:	4b2d      	ldr	r3, [pc, #180]	; (800c3dc <tcp_process+0x5bc>)
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	f003 0320 	and.w	r3, r3, #32
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f000 814c 	beq.w	800c5cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	8b5b      	ldrh	r3, [r3, #26]
 800c338:	f043 0302 	orr.w	r3, r3, #2
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2207      	movs	r2, #7
 800c346:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c348:	e140      	b.n	800c5cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fa5c 	bl	800c808 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c350:	4b22      	ldr	r3, [pc, #136]	; (800c3dc <tcp_process+0x5bc>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	f003 0320 	and.w	r3, r3, #32
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d071      	beq.n	800c440 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c35c:	4b14      	ldr	r3, [pc, #80]	; (800c3b0 <tcp_process+0x590>)
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	f003 0310 	and.w	r3, r3, #16
 800c364:	2b00      	cmp	r3, #0
 800c366:	d060      	beq.n	800c42a <tcp_process+0x60a>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c36c:	4b11      	ldr	r3, [pc, #68]	; (800c3b4 <tcp_process+0x594>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	429a      	cmp	r2, r3
 800c372:	d15a      	bne.n	800c42a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d156      	bne.n	800c42a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	8b5b      	ldrh	r3, [r3, #26]
 800c380:	f043 0302 	orr.w	r3, r3, #2
 800c384:	b29a      	uxth	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7fe fdbc 	bl	800af08 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c390:	4b13      	ldr	r3, [pc, #76]	; (800c3e0 <tcp_process+0x5c0>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	429a      	cmp	r2, r3
 800c398:	d105      	bne.n	800c3a6 <tcp_process+0x586>
 800c39a:	4b11      	ldr	r3, [pc, #68]	; (800c3e0 <tcp_process+0x5c0>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	4a0f      	ldr	r2, [pc, #60]	; (800c3e0 <tcp_process+0x5c0>)
 800c3a2:	6013      	str	r3, [r2, #0]
 800c3a4:	e02e      	b.n	800c404 <tcp_process+0x5e4>
 800c3a6:	4b0e      	ldr	r3, [pc, #56]	; (800c3e0 <tcp_process+0x5c0>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	617b      	str	r3, [r7, #20]
 800c3ac:	e027      	b.n	800c3fe <tcp_process+0x5de>
 800c3ae:	bf00      	nop
 800c3b0:	20008078 	.word	0x20008078
 800c3b4:	20008070 	.word	0x20008070
 800c3b8:	20008076 	.word	0x20008076
 800c3bc:	2000806c 	.word	0x2000806c
 800c3c0:	2000805c 	.word	0x2000805c
 800c3c4:	20005128 	.word	0x20005128
 800c3c8:	2000512c 	.word	0x2000512c
 800c3cc:	08014d3c 	.word	0x08014d3c
 800c3d0:	08014fdc 	.word	0x08014fdc
 800c3d4:	08014d88 	.word	0x08014d88
 800c3d8:	20008074 	.word	0x20008074
 800c3dc:	20008079 	.word	0x20008079
 800c3e0:	20008040 	.word	0x20008040
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d104      	bne.n	800c3f8 <tcp_process+0x5d8>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	68da      	ldr	r2, [r3, #12]
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	60da      	str	r2, [r3, #12]
 800c3f6:	e005      	b.n	800c404 <tcp_process+0x5e4>
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1ef      	bne.n	800c3e4 <tcp_process+0x5c4>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	60da      	str	r2, [r3, #12]
 800c40a:	4b77      	ldr	r3, [pc, #476]	; (800c5e8 <tcp_process+0x7c8>)
 800c40c:	2201      	movs	r2, #1
 800c40e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	220a      	movs	r2, #10
 800c414:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c416:	4b75      	ldr	r3, [pc, #468]	; (800c5ec <tcp_process+0x7cc>)
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	60da      	str	r2, [r3, #12]
 800c41e:	4a73      	ldr	r2, [pc, #460]	; (800c5ec <tcp_process+0x7cc>)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6013      	str	r3, [r2, #0]
 800c424:	f003 f952 	bl	800f6cc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c428:	e0d2      	b.n	800c5d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	8b5b      	ldrh	r3, [r3, #26]
 800c42e:	f043 0302 	orr.w	r3, r3, #2
 800c432:	b29a      	uxth	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2208      	movs	r2, #8
 800c43c:	751a      	strb	r2, [r3, #20]
      break;
 800c43e:	e0c7      	b.n	800c5d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c440:	4b6b      	ldr	r3, [pc, #428]	; (800c5f0 <tcp_process+0x7d0>)
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	f003 0310 	and.w	r3, r3, #16
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f000 80c1 	beq.w	800c5d0 <tcp_process+0x7b0>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c452:	4b68      	ldr	r3, [pc, #416]	; (800c5f4 <tcp_process+0x7d4>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	429a      	cmp	r2, r3
 800c458:	f040 80ba 	bne.w	800c5d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c460:	2b00      	cmp	r3, #0
 800c462:	f040 80b5 	bne.w	800c5d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2206      	movs	r2, #6
 800c46a:	751a      	strb	r2, [r3, #20]
      break;
 800c46c:	e0b0      	b.n	800c5d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f9ca 	bl	800c808 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c474:	4b60      	ldr	r3, [pc, #384]	; (800c5f8 <tcp_process+0x7d8>)
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	f003 0320 	and.w	r3, r3, #32
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 80a9 	beq.w	800c5d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	8b5b      	ldrh	r3, [r3, #26]
 800c486:	f043 0302 	orr.w	r3, r3, #2
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7fe fd39 	bl	800af08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c496:	4b59      	ldr	r3, [pc, #356]	; (800c5fc <tcp_process+0x7dc>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d105      	bne.n	800c4ac <tcp_process+0x68c>
 800c4a0:	4b56      	ldr	r3, [pc, #344]	; (800c5fc <tcp_process+0x7dc>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	4a55      	ldr	r2, [pc, #340]	; (800c5fc <tcp_process+0x7dc>)
 800c4a8:	6013      	str	r3, [r2, #0]
 800c4aa:	e013      	b.n	800c4d4 <tcp_process+0x6b4>
 800c4ac:	4b53      	ldr	r3, [pc, #332]	; (800c5fc <tcp_process+0x7dc>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	613b      	str	r3, [r7, #16]
 800c4b2:	e00c      	b.n	800c4ce <tcp_process+0x6ae>
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d104      	bne.n	800c4c8 <tcp_process+0x6a8>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	68da      	ldr	r2, [r3, #12]
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	60da      	str	r2, [r3, #12]
 800c4c6:	e005      	b.n	800c4d4 <tcp_process+0x6b4>
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	613b      	str	r3, [r7, #16]
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1ef      	bne.n	800c4b4 <tcp_process+0x694>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	60da      	str	r2, [r3, #12]
 800c4da:	4b43      	ldr	r3, [pc, #268]	; (800c5e8 <tcp_process+0x7c8>)
 800c4dc:	2201      	movs	r2, #1
 800c4de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	220a      	movs	r2, #10
 800c4e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c4e6:	4b41      	ldr	r3, [pc, #260]	; (800c5ec <tcp_process+0x7cc>)
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	60da      	str	r2, [r3, #12]
 800c4ee:	4a3f      	ldr	r2, [pc, #252]	; (800c5ec <tcp_process+0x7cc>)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6013      	str	r3, [r2, #0]
 800c4f4:	f003 f8ea 	bl	800f6cc <tcp_timer_needed>
      }
      break;
 800c4f8:	e06c      	b.n	800c5d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f984 	bl	800c808 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c500:	4b3b      	ldr	r3, [pc, #236]	; (800c5f0 <tcp_process+0x7d0>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	f003 0310 	and.w	r3, r3, #16
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d065      	beq.n	800c5d8 <tcp_process+0x7b8>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c510:	4b38      	ldr	r3, [pc, #224]	; (800c5f4 <tcp_process+0x7d4>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	429a      	cmp	r2, r3
 800c516:	d15f      	bne.n	800c5d8 <tcp_process+0x7b8>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d15b      	bne.n	800c5d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7fe fcf1 	bl	800af08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c526:	4b35      	ldr	r3, [pc, #212]	; (800c5fc <tcp_process+0x7dc>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d105      	bne.n	800c53c <tcp_process+0x71c>
 800c530:	4b32      	ldr	r3, [pc, #200]	; (800c5fc <tcp_process+0x7dc>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	4a31      	ldr	r2, [pc, #196]	; (800c5fc <tcp_process+0x7dc>)
 800c538:	6013      	str	r3, [r2, #0]
 800c53a:	e013      	b.n	800c564 <tcp_process+0x744>
 800c53c:	4b2f      	ldr	r3, [pc, #188]	; (800c5fc <tcp_process+0x7dc>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	e00c      	b.n	800c55e <tcp_process+0x73e>
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d104      	bne.n	800c558 <tcp_process+0x738>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68da      	ldr	r2, [r3, #12]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	60da      	str	r2, [r3, #12]
 800c556:	e005      	b.n	800c564 <tcp_process+0x744>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	60fb      	str	r3, [r7, #12]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1ef      	bne.n	800c544 <tcp_process+0x724>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	60da      	str	r2, [r3, #12]
 800c56a:	4b1f      	ldr	r3, [pc, #124]	; (800c5e8 <tcp_process+0x7c8>)
 800c56c:	2201      	movs	r2, #1
 800c56e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	220a      	movs	r2, #10
 800c574:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c576:	4b1d      	ldr	r3, [pc, #116]	; (800c5ec <tcp_process+0x7cc>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	60da      	str	r2, [r3, #12]
 800c57e:	4a1b      	ldr	r2, [pc, #108]	; (800c5ec <tcp_process+0x7cc>)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6013      	str	r3, [r2, #0]
 800c584:	f003 f8a2 	bl	800f6cc <tcp_timer_needed>
      }
      break;
 800c588:	e026      	b.n	800c5d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f93c 	bl	800c808 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c590:	4b17      	ldr	r3, [pc, #92]	; (800c5f0 <tcp_process+0x7d0>)
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	f003 0310 	and.w	r3, r3, #16
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d01f      	beq.n	800c5dc <tcp_process+0x7bc>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5a0:	4b14      	ldr	r3, [pc, #80]	; (800c5f4 <tcp_process+0x7d4>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d119      	bne.n	800c5dc <tcp_process+0x7bc>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d115      	bne.n	800c5dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c5b0:	4b11      	ldr	r3, [pc, #68]	; (800c5f8 <tcp_process+0x7d8>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	f043 0310 	orr.w	r3, r3, #16
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	4b0f      	ldr	r3, [pc, #60]	; (800c5f8 <tcp_process+0x7d8>)
 800c5bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c5be:	e00d      	b.n	800c5dc <tcp_process+0x7bc>
    default:
      break;
 800c5c0:	bf00      	nop
 800c5c2:	e00c      	b.n	800c5de <tcp_process+0x7be>
      break;
 800c5c4:	bf00      	nop
 800c5c6:	e00a      	b.n	800c5de <tcp_process+0x7be>
      break;
 800c5c8:	bf00      	nop
 800c5ca:	e008      	b.n	800c5de <tcp_process+0x7be>
      break;
 800c5cc:	bf00      	nop
 800c5ce:	e006      	b.n	800c5de <tcp_process+0x7be>
      break;
 800c5d0:	bf00      	nop
 800c5d2:	e004      	b.n	800c5de <tcp_process+0x7be>
      break;
 800c5d4:	bf00      	nop
 800c5d6:	e002      	b.n	800c5de <tcp_process+0x7be>
      break;
 800c5d8:	bf00      	nop
 800c5da:	e000      	b.n	800c5de <tcp_process+0x7be>
      break;
 800c5dc:	bf00      	nop
  }
  return ERR_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3724      	adds	r7, #36	; 0x24
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd90      	pop	{r4, r7, pc}
 800c5e8:	20008048 	.word	0x20008048
 800c5ec:	20008044 	.word	0x20008044
 800c5f0:	20008078 	.word	0x20008078
 800c5f4:	20008070 	.word	0x20008070
 800c5f8:	20008079 	.word	0x20008079
 800c5fc:	20008040 	.word	0x20008040

0800c600 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c600:	b590      	push	{r4, r7, lr}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d106      	bne.n	800c61e <tcp_oos_insert_segment+0x1e>
 800c610:	4b3b      	ldr	r3, [pc, #236]	; (800c700 <tcp_oos_insert_segment+0x100>)
 800c612:	f240 421f 	movw	r2, #1055	; 0x41f
 800c616:	493b      	ldr	r1, [pc, #236]	; (800c704 <tcp_oos_insert_segment+0x104>)
 800c618:	483b      	ldr	r0, [pc, #236]	; (800c708 <tcp_oos_insert_segment+0x108>)
 800c61a:	f005 ff93 	bl	8012544 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	899b      	ldrh	r3, [r3, #12]
 800c624:	b29b      	uxth	r3, r3
 800c626:	4618      	mov	r0, r3
 800c628:	f7fb f988 	bl	800793c <lwip_htons>
 800c62c:	4603      	mov	r3, r0
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	f003 0301 	and.w	r3, r3, #1
 800c634:	2b00      	cmp	r3, #0
 800c636:	d028      	beq.n	800c68a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c638:	6838      	ldr	r0, [r7, #0]
 800c63a:	f7fe f9ad 	bl	800a998 <tcp_segs_free>
    next = NULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	603b      	str	r3, [r7, #0]
 800c642:	e056      	b.n	800c6f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	899b      	ldrh	r3, [r3, #12]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fb f975 	bl	800793c <lwip_htons>
 800c652:	4603      	mov	r3, r0
 800c654:	b2db      	uxtb	r3, r3
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00d      	beq.n	800c67a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	899b      	ldrh	r3, [r3, #12]
 800c664:	b29c      	uxth	r4, r3
 800c666:	2001      	movs	r0, #1
 800c668:	f7fb f968 	bl	800793c <lwip_htons>
 800c66c:	4603      	mov	r3, r0
 800c66e:	461a      	mov	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	4322      	orrs	r2, r4
 800c676:	b292      	uxth	r2, r2
 800c678:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f7fe f99c 	bl	800a9c2 <tcp_seg_free>
    while (next &&
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00e      	beq.n	800c6ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	891b      	ldrh	r3, [r3, #8]
 800c694:	461a      	mov	r2, r3
 800c696:	4b1d      	ldr	r3, [pc, #116]	; (800c70c <tcp_oos_insert_segment+0x10c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	441a      	add	r2, r3
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	8909      	ldrh	r1, [r1, #8]
 800c6a6:	440b      	add	r3, r1
 800c6a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	daca      	bge.n	800c644 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d01e      	beq.n	800c6f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	891b      	ldrh	r3, [r3, #8]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	4b14      	ldr	r3, [pc, #80]	; (800c70c <tcp_oos_insert_segment+0x10c>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	441a      	add	r2, r3
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	dd12      	ble.n	800c6f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	4b0d      	ldr	r3, [pc, #52]	; (800c70c <tcp_oos_insert_segment+0x10c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	891b      	ldrh	r3, [r3, #8]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	f7fc fbb5 	bl	8008e5c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	601a      	str	r2, [r3, #0]
}
 800c6f8:	bf00      	nop
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd90      	pop	{r4, r7, pc}
 800c700:	08014d3c 	.word	0x08014d3c
 800c704:	08014ffc 	.word	0x08014ffc
 800c708:	08014d88 	.word	0x08014d88
 800c70c:	2000806c 	.word	0x2000806c

0800c710 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c710:	b5b0      	push	{r4, r5, r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c71e:	e03e      	b.n	800c79e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	4618      	mov	r0, r3
 800c730:	f7fc fda2 	bl	8009278 <pbuf_clen>
 800c734:	4603      	mov	r3, r0
 800c736:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c73e:	8a7a      	ldrh	r2, [r7, #18]
 800c740:	429a      	cmp	r2, r3
 800c742:	d906      	bls.n	800c752 <tcp_free_acked_segments+0x42>
 800c744:	4b2a      	ldr	r3, [pc, #168]	; (800c7f0 <tcp_free_acked_segments+0xe0>)
 800c746:	f240 4257 	movw	r2, #1111	; 0x457
 800c74a:	492a      	ldr	r1, [pc, #168]	; (800c7f4 <tcp_free_acked_segments+0xe4>)
 800c74c:	482a      	ldr	r0, [pc, #168]	; (800c7f8 <tcp_free_acked_segments+0xe8>)
 800c74e:	f005 fef9 	bl	8012544 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c758:	8a7b      	ldrh	r3, [r7, #18]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	891a      	ldrh	r2, [r3, #8]
 800c768:	4b24      	ldr	r3, [pc, #144]	; (800c7fc <tcp_free_acked_segments+0xec>)
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	4413      	add	r3, r2
 800c76e:	b29a      	uxth	r2, r3
 800c770:	4b22      	ldr	r3, [pc, #136]	; (800c7fc <tcp_free_acked_segments+0xec>)
 800c772:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c774:	6978      	ldr	r0, [r7, #20]
 800c776:	f7fe f924 	bl	800a9c2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00c      	beq.n	800c79e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d109      	bne.n	800c79e <tcp_free_acked_segments+0x8e>
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d106      	bne.n	800c79e <tcp_free_acked_segments+0x8e>
 800c790:	4b17      	ldr	r3, [pc, #92]	; (800c7f0 <tcp_free_acked_segments+0xe0>)
 800c792:	f240 4261 	movw	r2, #1121	; 0x461
 800c796:	491a      	ldr	r1, [pc, #104]	; (800c800 <tcp_free_acked_segments+0xf0>)
 800c798:	4817      	ldr	r0, [pc, #92]	; (800c7f8 <tcp_free_acked_segments+0xe8>)
 800c79a:	f005 fed3 	bl	8012544 <iprintf>
  while (seg_list != NULL &&
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d020      	beq.n	800c7e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fb f8db 	bl	8007966 <lwip_htonl>
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	891b      	ldrh	r3, [r3, #8]
 800c7b6:	461d      	mov	r5, r3
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	899b      	ldrh	r3, [r3, #12]
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fb f8bb 	bl	800793c <lwip_htons>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	f003 0303 	and.w	r3, r3, #3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <tcp_free_acked_segments+0xc6>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e000      	b.n	800c7d8 <tcp_free_acked_segments+0xc8>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	442b      	add	r3, r5
 800c7da:	18e2      	adds	r2, r4, r3
 800c7dc:	4b09      	ldr	r3, [pc, #36]	; (800c804 <tcp_free_acked_segments+0xf4>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	dd9c      	ble.n	800c720 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c7e6:	68bb      	ldr	r3, [r7, #8]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bdb0      	pop	{r4, r5, r7, pc}
 800c7f0:	08014d3c 	.word	0x08014d3c
 800c7f4:	08015024 	.word	0x08015024
 800c7f8:	08014d88 	.word	0x08014d88
 800c7fc:	20008074 	.word	0x20008074
 800c800:	0801504c 	.word	0x0801504c
 800c804:	20008070 	.word	0x20008070

0800c808 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c808:	b5b0      	push	{r4, r5, r7, lr}
 800c80a:	b094      	sub	sp, #80	; 0x50
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d106      	bne.n	800c828 <tcp_receive+0x20>
 800c81a:	4b91      	ldr	r3, [pc, #580]	; (800ca60 <tcp_receive+0x258>)
 800c81c:	f240 427b 	movw	r2, #1147	; 0x47b
 800c820:	4990      	ldr	r1, [pc, #576]	; (800ca64 <tcp_receive+0x25c>)
 800c822:	4891      	ldr	r0, [pc, #580]	; (800ca68 <tcp_receive+0x260>)
 800c824:	f005 fe8e 	bl	8012544 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	7d1b      	ldrb	r3, [r3, #20]
 800c82c:	2b03      	cmp	r3, #3
 800c82e:	d806      	bhi.n	800c83e <tcp_receive+0x36>
 800c830:	4b8b      	ldr	r3, [pc, #556]	; (800ca60 <tcp_receive+0x258>)
 800c832:	f240 427c 	movw	r2, #1148	; 0x47c
 800c836:	498d      	ldr	r1, [pc, #564]	; (800ca6c <tcp_receive+0x264>)
 800c838:	488b      	ldr	r0, [pc, #556]	; (800ca68 <tcp_receive+0x260>)
 800c83a:	f005 fe83 	bl	8012544 <iprintf>

  if (flags & TCP_ACK) {
 800c83e:	4b8c      	ldr	r3, [pc, #560]	; (800ca70 <tcp_receive+0x268>)
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	f003 0310 	and.w	r3, r3, #16
 800c846:	2b00      	cmp	r3, #0
 800c848:	f000 8264 	beq.w	800cd14 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c852:	461a      	mov	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c858:	4413      	add	r3, r2
 800c85a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c860:	4b84      	ldr	r3, [pc, #528]	; (800ca74 <tcp_receive+0x26c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	db1b      	blt.n	800c8a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c86e:	4b81      	ldr	r3, [pc, #516]	; (800ca74 <tcp_receive+0x26c>)
 800c870:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c872:	429a      	cmp	r2, r3
 800c874:	d106      	bne.n	800c884 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c87a:	4b7f      	ldr	r3, [pc, #508]	; (800ca78 <tcp_receive+0x270>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	2b00      	cmp	r3, #0
 800c882:	db0e      	blt.n	800c8a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c888:	4b7b      	ldr	r3, [pc, #492]	; (800ca78 <tcp_receive+0x270>)
 800c88a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d125      	bne.n	800c8dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c890:	4b7a      	ldr	r3, [pc, #488]	; (800ca7c <tcp_receive+0x274>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	89db      	ldrh	r3, [r3, #14]
 800c896:	b29a      	uxth	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d91c      	bls.n	800c8dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c8a2:	4b76      	ldr	r3, [pc, #472]	; (800ca7c <tcp_receive+0x274>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	89db      	ldrh	r3, [r3, #14]
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d205      	bcs.n	800c8cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c8cc:	4b69      	ldr	r3, [pc, #420]	; (800ca74 <tcp_receive+0x26c>)
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c8d4:	4b68      	ldr	r3, [pc, #416]	; (800ca78 <tcp_receive+0x270>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c8dc:	4b66      	ldr	r3, [pc, #408]	; (800ca78 <tcp_receive+0x270>)
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	dc58      	bgt.n	800c99c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c8ea:	4b65      	ldr	r3, [pc, #404]	; (800ca80 <tcp_receive+0x278>)
 800c8ec:	881b      	ldrh	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d14b      	bne.n	800c98a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c8fc:	4413      	add	r3, r2
 800c8fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c900:	429a      	cmp	r2, r3
 800c902:	d142      	bne.n	800c98a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	db3d      	blt.n	800c98a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c912:	4b59      	ldr	r3, [pc, #356]	; (800ca78 <tcp_receive+0x270>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	429a      	cmp	r2, r3
 800c918:	d137      	bne.n	800c98a <tcp_receive+0x182>
              found_dupack = 1;
 800c91a:	2301      	movs	r3, #1
 800c91c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c924:	2bff      	cmp	r3, #255	; 0xff
 800c926:	d007      	beq.n	800c938 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c92e:	3301      	adds	r3, #1
 800c930:	b2da      	uxtb	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d91b      	bls.n	800c97a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c94c:	4413      	add	r3, r2
 800c94e:	b29a      	uxth	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c956:	429a      	cmp	r2, r3
 800c958:	d30a      	bcc.n	800c970 <tcp_receive+0x168>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c964:	4413      	add	r3, r2
 800c966:	b29a      	uxth	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c96e:	e004      	b.n	800c97a <tcp_receive+0x172>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c976:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c980:	2b02      	cmp	r3, #2
 800c982:	d902      	bls.n	800c98a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f002 fb43 	bl	800f010 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c98a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f040 8161 	bne.w	800cc54 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c99a:	e15b      	b.n	800cc54 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c99c:	4b36      	ldr	r3, [pc, #216]	; (800ca78 <tcp_receive+0x270>)
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f2c0 814e 	blt.w	800cc4a <tcp_receive+0x442>
 800c9ae:	4b32      	ldr	r3, [pc, #200]	; (800ca78 <tcp_receive+0x270>)
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f300 8146 	bgt.w	800cc4a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	8b5b      	ldrh	r3, [r3, #26]
 800c9c2:	f003 0304 	and.w	r3, r3, #4
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d010      	beq.n	800c9ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	8b5b      	ldrh	r3, [r3, #26]
 800c9ce:	f023 0304 	bic.w	r3, r3, #4
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c9fa:	10db      	asrs	r3, r3, #3
 800c9fc:	b21b      	sxth	r3, r3
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	4413      	add	r3, r2
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	b21a      	sxth	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ca14:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <tcp_receive+0x270>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ca2c:	4b12      	ldr	r3, [pc, #72]	; (800ca78 <tcp_receive+0x270>)
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	7d1b      	ldrb	r3, [r3, #20]
 800ca38:	2b03      	cmp	r3, #3
 800ca3a:	f240 8097 	bls.w	800cb6c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d245      	bcs.n	800cada <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	8b5b      	ldrh	r3, [r3, #26]
 800ca52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d014      	beq.n	800ca84 <tcp_receive+0x27c>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e013      	b.n	800ca86 <tcp_receive+0x27e>
 800ca5e:	bf00      	nop
 800ca60:	08014d3c 	.word	0x08014d3c
 800ca64:	0801506c 	.word	0x0801506c
 800ca68:	08014d88 	.word	0x08014d88
 800ca6c:	08015088 	.word	0x08015088
 800ca70:	20008078 	.word	0x20008078
 800ca74:	2000806c 	.word	0x2000806c
 800ca78:	20008070 	.word	0x20008070
 800ca7c:	2000805c 	.word	0x2000805c
 800ca80:	20008076 	.word	0x20008076
 800ca84:	2302      	movs	r3, #2
 800ca86:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ca8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ca8e:	b29a      	uxth	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca94:	fb12 f303 	smulbb	r3, r2, r3
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	bf28      	it	cs
 800caa0:	4613      	movcs	r3, r2
 800caa2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800caaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800caac:	4413      	add	r3, r2
 800caae:	b29a      	uxth	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d309      	bcc.n	800cace <tcp_receive+0x2c6>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cac0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cac2:	4413      	add	r3, r2
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cacc:	e04e      	b.n	800cb6c <tcp_receive+0x364>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cad4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cad8:	e048      	b.n	800cb6c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cae0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cae2:	4413      	add	r3, r2
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800caec:	429a      	cmp	r2, r3
 800caee:	d309      	bcc.n	800cb04 <tcp_receive+0x2fc>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800caf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800caf8:	4413      	add	r3, r2
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb02:	e004      	b.n	800cb0e <tcp_receive+0x306>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d326      	bcc.n	800cb6c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb3e:	4413      	add	r3, r2
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d30a      	bcc.n	800cb62 <tcp_receive+0x35a>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb56:	4413      	add	r3, r2
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cb60:	e004      	b.n	800cb6c <tcp_receive+0x364>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb74:	4a98      	ldr	r2, [pc, #608]	; (800cdd8 <tcp_receive+0x5d0>)
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff fdca 	bl	800c710 <tcp_free_acked_segments>
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb8a:	4a94      	ldr	r2, [pc, #592]	; (800cddc <tcp_receive+0x5d4>)
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7ff fdbf 	bl	800c710 <tcp_free_acked_segments>
 800cb92:	4602      	mov	r2, r0
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d104      	bne.n	800cbaa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cba6:	861a      	strh	r2, [r3, #48]	; 0x30
 800cba8:	e002      	b.n	800cbb0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d103      	bne.n	800cbc6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cbcc:	4b84      	ldr	r3, [pc, #528]	; (800cde0 <tcp_receive+0x5d8>)
 800cbce:	881b      	ldrh	r3, [r3, #0]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	8b5b      	ldrh	r3, [r3, #26]
 800cbde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d035      	beq.n	800cc52 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d118      	bne.n	800cc20 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00c      	beq.n	800cc10 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fa feaf 	bl	8007966 <lwip_htonl>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	dc20      	bgt.n	800cc52 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	8b5b      	ldrh	r3, [r3, #26]
 800cc14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc1e:	e018      	b.n	800cc52 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fa fe9a 	bl	8007966 <lwip_htonl>
 800cc32:	4603      	mov	r3, r0
 800cc34:	1ae3      	subs	r3, r4, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dc0b      	bgt.n	800cc52 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	8b5b      	ldrh	r3, [r3, #26]
 800cc3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc48:	e003      	b.n	800cc52 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f002 fbce 	bl	800f3ec <tcp_send_empty_ack>
 800cc50:	e000      	b.n	800cc54 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc52:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d05b      	beq.n	800cd14 <tcp_receive+0x50c>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc60:	4b60      	ldr	r3, [pc, #384]	; (800cde4 <tcp_receive+0x5dc>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	da54      	bge.n	800cd14 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cc6a:	4b5f      	ldr	r3, [pc, #380]	; (800cde8 <tcp_receive+0x5e0>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cc7e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc88:	10db      	asrs	r3, r3, #3
 800cc8a:	b21b      	sxth	r3, r3
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cca2:	4413      	add	r3, r2
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	b21a      	sxth	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ccac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	da05      	bge.n	800ccc0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ccb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ccb8:	425b      	negs	r3, r3
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ccc0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ccca:	109b      	asrs	r3, r3, #2
 800cccc:	b21b      	sxth	r3, r3
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cce4:	4413      	add	r3, r2
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	b21a      	sxth	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ccf4:	10db      	asrs	r3, r3, #3
 800ccf6:	b21b      	sxth	r3, r3
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	4413      	add	r3, r2
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	b21a      	sxth	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cd14:	4b35      	ldr	r3, [pc, #212]	; (800cdec <tcp_receive+0x5e4>)
 800cd16:	881b      	ldrh	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f000 84e2 	beq.w	800d6e2 <tcp_receive+0xeda>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	7d1b      	ldrb	r3, [r3, #20]
 800cd22:	2b06      	cmp	r3, #6
 800cd24:	f200 84dd 	bhi.w	800d6e2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd2c:	4b30      	ldr	r3, [pc, #192]	; (800cdf0 <tcp_receive+0x5e8>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	3b01      	subs	r3, #1
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f2c0 808f 	blt.w	800ce58 <tcp_receive+0x650>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd3e:	4b2b      	ldr	r3, [pc, #172]	; (800cdec <tcp_receive+0x5e4>)
 800cd40:	881b      	ldrh	r3, [r3, #0]
 800cd42:	4619      	mov	r1, r3
 800cd44:	4b2a      	ldr	r3, [pc, #168]	; (800cdf0 <tcp_receive+0x5e8>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	440b      	add	r3, r1
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f300 8082 	bgt.w	800ce58 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cd54:	4b27      	ldr	r3, [pc, #156]	; (800cdf4 <tcp_receive+0x5ec>)
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd5e:	4b24      	ldr	r3, [pc, #144]	; (800cdf0 <tcp_receive+0x5e8>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cd66:	4b23      	ldr	r3, [pc, #140]	; (800cdf4 <tcp_receive+0x5ec>)
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <tcp_receive+0x574>
 800cd6e:	4b22      	ldr	r3, [pc, #136]	; (800cdf8 <tcp_receive+0x5f0>)
 800cd70:	f240 5294 	movw	r2, #1428	; 0x594
 800cd74:	4921      	ldr	r1, [pc, #132]	; (800cdfc <tcp_receive+0x5f4>)
 800cd76:	4822      	ldr	r0, [pc, #136]	; (800ce00 <tcp_receive+0x5f8>)
 800cd78:	f005 fbe4 	bl	8012544 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d906      	bls.n	800cd94 <tcp_receive+0x58c>
 800cd86:	4b1c      	ldr	r3, [pc, #112]	; (800cdf8 <tcp_receive+0x5f0>)
 800cd88:	f240 5295 	movw	r2, #1429	; 0x595
 800cd8c:	491d      	ldr	r1, [pc, #116]	; (800ce04 <tcp_receive+0x5fc>)
 800cd8e:	481c      	ldr	r0, [pc, #112]	; (800ce00 <tcp_receive+0x5f8>)
 800cd90:	f005 fbd8 	bl	8012544 <iprintf>
      off = (u16_t)off32;
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cd9a:	4b16      	ldr	r3, [pc, #88]	; (800cdf4 <tcp_receive+0x5ec>)
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	891b      	ldrh	r3, [r3, #8]
 800cda0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d906      	bls.n	800cdb6 <tcp_receive+0x5ae>
 800cda8:	4b13      	ldr	r3, [pc, #76]	; (800cdf8 <tcp_receive+0x5f0>)
 800cdaa:	f240 5297 	movw	r2, #1431	; 0x597
 800cdae:	4916      	ldr	r1, [pc, #88]	; (800ce08 <tcp_receive+0x600>)
 800cdb0:	4813      	ldr	r0, [pc, #76]	; (800ce00 <tcp_receive+0x5f8>)
 800cdb2:	f005 fbc7 	bl	8012544 <iprintf>
      inseg.len -= off;
 800cdb6:	4b0f      	ldr	r3, [pc, #60]	; (800cdf4 <tcp_receive+0x5ec>)
 800cdb8:	891a      	ldrh	r2, [r3, #8]
 800cdba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	4b0c      	ldr	r3, [pc, #48]	; (800cdf4 <tcp_receive+0x5ec>)
 800cdc4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cdc6:	4b0b      	ldr	r3, [pc, #44]	; (800cdf4 <tcp_receive+0x5ec>)
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	891a      	ldrh	r2, [r3, #8]
 800cdcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cdd4:	e02a      	b.n	800ce2c <tcp_receive+0x624>
 800cdd6:	bf00      	nop
 800cdd8:	080150a4 	.word	0x080150a4
 800cddc:	080150ac 	.word	0x080150ac
 800cde0:	20008074 	.word	0x20008074
 800cde4:	20008070 	.word	0x20008070
 800cde8:	20008034 	.word	0x20008034
 800cdec:	20008076 	.word	0x20008076
 800cdf0:	2000806c 	.word	0x2000806c
 800cdf4:	2000804c 	.word	0x2000804c
 800cdf8:	08014d3c 	.word	0x08014d3c
 800cdfc:	080150b4 	.word	0x080150b4
 800ce00:	08014d88 	.word	0x08014d88
 800ce04:	080150c4 	.word	0x080150c4
 800ce08:	080150d4 	.word	0x080150d4
        off -= p->len;
 800ce0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce0e:	895b      	ldrh	r3, [r3, #10]
 800ce10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ce1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ce1e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ce20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce22:	2200      	movs	r2, #0
 800ce24:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ce26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ce2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce2e:	895b      	ldrh	r3, [r3, #10]
 800ce30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d8e9      	bhi.n	800ce0c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ce38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ce40:	f7fc f90c 	bl	800905c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce48:	4a91      	ldr	r2, [pc, #580]	; (800d090 <tcp_receive+0x888>)
 800ce4a:	6013      	str	r3, [r2, #0]
 800ce4c:	4b91      	ldr	r3, [pc, #580]	; (800d094 <tcp_receive+0x88c>)
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	4a8f      	ldr	r2, [pc, #572]	; (800d090 <tcp_receive+0x888>)
 800ce52:	6812      	ldr	r2, [r2, #0]
 800ce54:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ce56:	e00d      	b.n	800ce74 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ce58:	4b8d      	ldr	r3, [pc, #564]	; (800d090 <tcp_receive+0x888>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	da06      	bge.n	800ce74 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	8b5b      	ldrh	r3, [r3, #26]
 800ce6a:	f043 0302 	orr.w	r3, r3, #2
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ce74:	4b86      	ldr	r3, [pc, #536]	; (800d090 <tcp_receive+0x888>)
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f2c0 842a 	blt.w	800d6d8 <tcp_receive+0xed0>
 800ce84:	4b82      	ldr	r3, [pc, #520]	; (800d090 <tcp_receive+0x888>)
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8c:	6879      	ldr	r1, [r7, #4]
 800ce8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ce90:	440b      	add	r3, r1
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	3301      	adds	r3, #1
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f300 841e 	bgt.w	800d6d8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cea0:	4b7b      	ldr	r3, [pc, #492]	; (800d090 <tcp_receive+0x888>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	f040 829a 	bne.w	800d3de <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ceaa:	4b7a      	ldr	r3, [pc, #488]	; (800d094 <tcp_receive+0x88c>)
 800ceac:	891c      	ldrh	r4, [r3, #8]
 800ceae:	4b79      	ldr	r3, [pc, #484]	; (800d094 <tcp_receive+0x88c>)
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	899b      	ldrh	r3, [r3, #12]
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fa fd40 	bl	800793c <lwip_htons>
 800cebc:	4603      	mov	r3, r0
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	f003 0303 	and.w	r3, r3, #3
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d001      	beq.n	800cecc <tcp_receive+0x6c4>
 800cec8:	2301      	movs	r3, #1
 800ceca:	e000      	b.n	800cece <tcp_receive+0x6c6>
 800cecc:	2300      	movs	r3, #0
 800cece:	4423      	add	r3, r4
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	4b71      	ldr	r3, [pc, #452]	; (800d098 <tcp_receive+0x890>)
 800ced4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ceda:	4b6f      	ldr	r3, [pc, #444]	; (800d098 <tcp_receive+0x890>)
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d275      	bcs.n	800cfce <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cee2:	4b6c      	ldr	r3, [pc, #432]	; (800d094 <tcp_receive+0x88c>)
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	899b      	ldrh	r3, [r3, #12]
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fa fd26 	bl	800793c <lwip_htons>
 800cef0:	4603      	mov	r3, r0
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	f003 0301 	and.w	r3, r3, #1
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d01f      	beq.n	800cf3c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cefc:	4b65      	ldr	r3, [pc, #404]	; (800d094 <tcp_receive+0x88c>)
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	899b      	ldrh	r3, [r3, #12]
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	b21b      	sxth	r3, r3
 800cf06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cf0a:	b21c      	sxth	r4, r3
 800cf0c:	4b61      	ldr	r3, [pc, #388]	; (800d094 <tcp_receive+0x88c>)
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	899b      	ldrh	r3, [r3, #12]
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fa fd11 	bl	800793c <lwip_htons>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fa fd08 	bl	800793c <lwip_htons>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	b21b      	sxth	r3, r3
 800cf30:	4323      	orrs	r3, r4
 800cf32:	b21a      	sxth	r2, r3
 800cf34:	4b57      	ldr	r3, [pc, #348]	; (800d094 <tcp_receive+0x88c>)
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	b292      	uxth	r2, r2
 800cf3a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf40:	4b54      	ldr	r3, [pc, #336]	; (800d094 <tcp_receive+0x88c>)
 800cf42:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cf44:	4b53      	ldr	r3, [pc, #332]	; (800d094 <tcp_receive+0x88c>)
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	899b      	ldrh	r3, [r3, #12]
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7fa fcf5 	bl	800793c <lwip_htons>
 800cf52:	4603      	mov	r3, r0
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	f003 0302 	and.w	r3, r3, #2
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d005      	beq.n	800cf6a <tcp_receive+0x762>
            inseg.len -= 1;
 800cf5e:	4b4d      	ldr	r3, [pc, #308]	; (800d094 <tcp_receive+0x88c>)
 800cf60:	891b      	ldrh	r3, [r3, #8]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	4b4b      	ldr	r3, [pc, #300]	; (800d094 <tcp_receive+0x88c>)
 800cf68:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cf6a:	4b4a      	ldr	r3, [pc, #296]	; (800d094 <tcp_receive+0x88c>)
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	4a49      	ldr	r2, [pc, #292]	; (800d094 <tcp_receive+0x88c>)
 800cf70:	8912      	ldrh	r2, [r2, #8]
 800cf72:	4611      	mov	r1, r2
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fb ff71 	bl	8008e5c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cf7a:	4b46      	ldr	r3, [pc, #280]	; (800d094 <tcp_receive+0x88c>)
 800cf7c:	891c      	ldrh	r4, [r3, #8]
 800cf7e:	4b45      	ldr	r3, [pc, #276]	; (800d094 <tcp_receive+0x88c>)
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	899b      	ldrh	r3, [r3, #12]
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fa fcd8 	bl	800793c <lwip_htons>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	f003 0303 	and.w	r3, r3, #3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d001      	beq.n	800cf9c <tcp_receive+0x794>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e000      	b.n	800cf9e <tcp_receive+0x796>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	4423      	add	r3, r4
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	4b3d      	ldr	r3, [pc, #244]	; (800d098 <tcp_receive+0x890>)
 800cfa4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cfa6:	4b3c      	ldr	r3, [pc, #240]	; (800d098 <tcp_receive+0x890>)
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	4b38      	ldr	r3, [pc, #224]	; (800d090 <tcp_receive+0x888>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	441a      	add	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb6:	6879      	ldr	r1, [r7, #4]
 800cfb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cfba:	440b      	add	r3, r1
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d006      	beq.n	800cfce <tcp_receive+0x7c6>
 800cfc0:	4b36      	ldr	r3, [pc, #216]	; (800d09c <tcp_receive+0x894>)
 800cfc2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800cfc6:	4936      	ldr	r1, [pc, #216]	; (800d0a0 <tcp_receive+0x898>)
 800cfc8:	4836      	ldr	r0, [pc, #216]	; (800d0a4 <tcp_receive+0x89c>)
 800cfca:	f005 fabb 	bl	8012544 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f000 80e7 	beq.w	800d1a6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cfd8:	4b2e      	ldr	r3, [pc, #184]	; (800d094 <tcp_receive+0x88c>)
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	899b      	ldrh	r3, [r3, #12]
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fa fcab 	bl	800793c <lwip_htons>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	f003 0301 	and.w	r3, r3, #1
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d010      	beq.n	800d014 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cff2:	e00a      	b.n	800d00a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cff8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f7fd fcdc 	bl	800a9c2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1f0      	bne.n	800cff4 <tcp_receive+0x7ec>
 800d012:	e0c8      	b.n	800d1a6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d018:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d01a:	e052      	b.n	800d0c2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	899b      	ldrh	r3, [r3, #12]
 800d022:	b29b      	uxth	r3, r3
 800d024:	4618      	mov	r0, r3
 800d026:	f7fa fc89 	bl	800793c <lwip_htons>
 800d02a:	4603      	mov	r3, r0
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	f003 0301 	and.w	r3, r3, #1
 800d032:	2b00      	cmp	r3, #0
 800d034:	d03d      	beq.n	800d0b2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d036:	4b17      	ldr	r3, [pc, #92]	; (800d094 <tcp_receive+0x88c>)
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	899b      	ldrh	r3, [r3, #12]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fa fc7c 	bl	800793c <lwip_htons>
 800d044:	4603      	mov	r3, r0
 800d046:	b2db      	uxtb	r3, r3
 800d048:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d130      	bne.n	800d0b2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d050:	4b10      	ldr	r3, [pc, #64]	; (800d094 <tcp_receive+0x88c>)
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	899b      	ldrh	r3, [r3, #12]
 800d056:	b29c      	uxth	r4, r3
 800d058:	2001      	movs	r0, #1
 800d05a:	f7fa fc6f 	bl	800793c <lwip_htons>
 800d05e:	4603      	mov	r3, r0
 800d060:	461a      	mov	r2, r3
 800d062:	4b0c      	ldr	r3, [pc, #48]	; (800d094 <tcp_receive+0x88c>)
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	4322      	orrs	r2, r4
 800d068:	b292      	uxth	r2, r2
 800d06a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d06c:	4b09      	ldr	r3, [pc, #36]	; (800d094 <tcp_receive+0x88c>)
 800d06e:	891c      	ldrh	r4, [r3, #8]
 800d070:	4b08      	ldr	r3, [pc, #32]	; (800d094 <tcp_receive+0x88c>)
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	899b      	ldrh	r3, [r3, #12]
 800d076:	b29b      	uxth	r3, r3
 800d078:	4618      	mov	r0, r3
 800d07a:	f7fa fc5f 	bl	800793c <lwip_htons>
 800d07e:	4603      	mov	r3, r0
 800d080:	b2db      	uxtb	r3, r3
 800d082:	f003 0303 	and.w	r3, r3, #3
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00e      	beq.n	800d0a8 <tcp_receive+0x8a0>
 800d08a:	2301      	movs	r3, #1
 800d08c:	e00d      	b.n	800d0aa <tcp_receive+0x8a2>
 800d08e:	bf00      	nop
 800d090:	2000806c 	.word	0x2000806c
 800d094:	2000804c 	.word	0x2000804c
 800d098:	20008076 	.word	0x20008076
 800d09c:	08014d3c 	.word	0x08014d3c
 800d0a0:	080150e4 	.word	0x080150e4
 800d0a4:	08014d88 	.word	0x08014d88
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4423      	add	r3, r4
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	4b98      	ldr	r3, [pc, #608]	; (800d310 <tcp_receive+0xb08>)
 800d0b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d0bc:	6938      	ldr	r0, [r7, #16]
 800d0be:	f7fd fc80 	bl	800a9c2 <tcp_seg_free>
            while (next &&
 800d0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00e      	beq.n	800d0e6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d0c8:	4b91      	ldr	r3, [pc, #580]	; (800d310 <tcp_receive+0xb08>)
 800d0ca:	881b      	ldrh	r3, [r3, #0]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	4b91      	ldr	r3, [pc, #580]	; (800d314 <tcp_receive+0xb0c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	441a      	add	r2, r3
 800d0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d0dc:	8909      	ldrh	r1, [r1, #8]
 800d0de:	440b      	add	r3, r1
 800d0e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	da9a      	bge.n	800d01c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d059      	beq.n	800d1a0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d0ec:	4b88      	ldr	r3, [pc, #544]	; (800d310 <tcp_receive+0xb08>)
 800d0ee:	881b      	ldrh	r3, [r3, #0]
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	4b88      	ldr	r3, [pc, #544]	; (800d314 <tcp_receive+0xb0c>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	441a      	add	r2, r3
 800d0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d100:	2b00      	cmp	r3, #0
 800d102:	dd4d      	ble.n	800d1a0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	4b81      	ldr	r3, [pc, #516]	; (800d314 <tcp_receive+0xb0c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	b29b      	uxth	r3, r3
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	b29a      	uxth	r2, r3
 800d116:	4b80      	ldr	r3, [pc, #512]	; (800d318 <tcp_receive+0xb10>)
 800d118:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d11a:	4b7f      	ldr	r3, [pc, #508]	; (800d318 <tcp_receive+0xb10>)
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	899b      	ldrh	r3, [r3, #12]
 800d120:	b29b      	uxth	r3, r3
 800d122:	4618      	mov	r0, r3
 800d124:	f7fa fc0a 	bl	800793c <lwip_htons>
 800d128:	4603      	mov	r3, r0
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	f003 0302 	and.w	r3, r3, #2
 800d130:	2b00      	cmp	r3, #0
 800d132:	d005      	beq.n	800d140 <tcp_receive+0x938>
                inseg.len -= 1;
 800d134:	4b78      	ldr	r3, [pc, #480]	; (800d318 <tcp_receive+0xb10>)
 800d136:	891b      	ldrh	r3, [r3, #8]
 800d138:	3b01      	subs	r3, #1
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	4b76      	ldr	r3, [pc, #472]	; (800d318 <tcp_receive+0xb10>)
 800d13e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d140:	4b75      	ldr	r3, [pc, #468]	; (800d318 <tcp_receive+0xb10>)
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	4a74      	ldr	r2, [pc, #464]	; (800d318 <tcp_receive+0xb10>)
 800d146:	8912      	ldrh	r2, [r2, #8]
 800d148:	4611      	mov	r1, r2
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fb fe86 	bl	8008e5c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d150:	4b71      	ldr	r3, [pc, #452]	; (800d318 <tcp_receive+0xb10>)
 800d152:	891c      	ldrh	r4, [r3, #8]
 800d154:	4b70      	ldr	r3, [pc, #448]	; (800d318 <tcp_receive+0xb10>)
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	899b      	ldrh	r3, [r3, #12]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fa fbed 	bl	800793c <lwip_htons>
 800d162:	4603      	mov	r3, r0
 800d164:	b2db      	uxtb	r3, r3
 800d166:	f003 0303 	and.w	r3, r3, #3
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d001      	beq.n	800d172 <tcp_receive+0x96a>
 800d16e:	2301      	movs	r3, #1
 800d170:	e000      	b.n	800d174 <tcp_receive+0x96c>
 800d172:	2300      	movs	r3, #0
 800d174:	4423      	add	r3, r4
 800d176:	b29a      	uxth	r2, r3
 800d178:	4b65      	ldr	r3, [pc, #404]	; (800d310 <tcp_receive+0xb08>)
 800d17a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d17c:	4b64      	ldr	r3, [pc, #400]	; (800d310 <tcp_receive+0xb08>)
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	461a      	mov	r2, r3
 800d182:	4b64      	ldr	r3, [pc, #400]	; (800d314 <tcp_receive+0xb0c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	441a      	add	r2, r3
 800d188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d006      	beq.n	800d1a0 <tcp_receive+0x998>
 800d192:	4b62      	ldr	r3, [pc, #392]	; (800d31c <tcp_receive+0xb14>)
 800d194:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d198:	4961      	ldr	r1, [pc, #388]	; (800d320 <tcp_receive+0xb18>)
 800d19a:	4862      	ldr	r0, [pc, #392]	; (800d324 <tcp_receive+0xb1c>)
 800d19c:	f005 f9d2 	bl	8012544 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1a4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d1a6:	4b5a      	ldr	r3, [pc, #360]	; (800d310 <tcp_receive+0xb08>)
 800d1a8:	881b      	ldrh	r3, [r3, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	4b59      	ldr	r3, [pc, #356]	; (800d314 <tcp_receive+0xb0c>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	441a      	add	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d1ba:	4b55      	ldr	r3, [pc, #340]	; (800d310 <tcp_receive+0xb08>)
 800d1bc:	881b      	ldrh	r3, [r3, #0]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d206      	bcs.n	800d1d0 <tcp_receive+0x9c8>
 800d1c2:	4b56      	ldr	r3, [pc, #344]	; (800d31c <tcp_receive+0xb14>)
 800d1c4:	f240 6207 	movw	r2, #1543	; 0x607
 800d1c8:	4957      	ldr	r1, [pc, #348]	; (800d328 <tcp_receive+0xb20>)
 800d1ca:	4856      	ldr	r0, [pc, #344]	; (800d324 <tcp_receive+0xb1c>)
 800d1cc:	f005 f9ba 	bl	8012544 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d1d4:	4b4e      	ldr	r3, [pc, #312]	; (800d310 <tcp_receive+0xb08>)
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7fc fec9 	bl	8009f78 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d1e6:	4b4c      	ldr	r3, [pc, #304]	; (800d318 <tcp_receive+0xb10>)
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	891b      	ldrh	r3, [r3, #8]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d006      	beq.n	800d1fe <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d1f0:	4b49      	ldr	r3, [pc, #292]	; (800d318 <tcp_receive+0xb10>)
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	4a4d      	ldr	r2, [pc, #308]	; (800d32c <tcp_receive+0xb24>)
 800d1f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d1f8:	4b47      	ldr	r3, [pc, #284]	; (800d318 <tcp_receive+0xb10>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d1fe:	4b46      	ldr	r3, [pc, #280]	; (800d318 <tcp_receive+0xb10>)
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	899b      	ldrh	r3, [r3, #12]
 800d204:	b29b      	uxth	r3, r3
 800d206:	4618      	mov	r0, r3
 800d208:	f7fa fb98 	bl	800793c <lwip_htons>
 800d20c:	4603      	mov	r3, r0
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	f003 0301 	and.w	r3, r3, #1
 800d214:	2b00      	cmp	r3, #0
 800d216:	f000 80b8 	beq.w	800d38a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d21a:	4b45      	ldr	r3, [pc, #276]	; (800d330 <tcp_receive+0xb28>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	f043 0320 	orr.w	r3, r3, #32
 800d222:	b2da      	uxtb	r2, r3
 800d224:	4b42      	ldr	r3, [pc, #264]	; (800d330 <tcp_receive+0xb28>)
 800d226:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d228:	e0af      	b.n	800d38a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d22e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	4a36      	ldr	r2, [pc, #216]	; (800d314 <tcp_receive+0xb0c>)
 800d23a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	891b      	ldrh	r3, [r3, #8]
 800d240:	461c      	mov	r4, r3
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	899b      	ldrh	r3, [r3, #12]
 800d248:	b29b      	uxth	r3, r3
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fa fb76 	bl	800793c <lwip_htons>
 800d250:	4603      	mov	r3, r0
 800d252:	b2db      	uxtb	r3, r3
 800d254:	f003 0303 	and.w	r3, r3, #3
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d001      	beq.n	800d260 <tcp_receive+0xa58>
 800d25c:	2301      	movs	r3, #1
 800d25e:	e000      	b.n	800d262 <tcp_receive+0xa5a>
 800d260:	2300      	movs	r3, #0
 800d262:	191a      	adds	r2, r3, r4
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d268:	441a      	add	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d272:	461c      	mov	r4, r3
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	891b      	ldrh	r3, [r3, #8]
 800d278:	461d      	mov	r5, r3
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	899b      	ldrh	r3, [r3, #12]
 800d280:	b29b      	uxth	r3, r3
 800d282:	4618      	mov	r0, r3
 800d284:	f7fa fb5a 	bl	800793c <lwip_htons>
 800d288:	4603      	mov	r3, r0
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	f003 0303 	and.w	r3, r3, #3
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <tcp_receive+0xa90>
 800d294:	2301      	movs	r3, #1
 800d296:	e000      	b.n	800d29a <tcp_receive+0xa92>
 800d298:	2300      	movs	r3, #0
 800d29a:	442b      	add	r3, r5
 800d29c:	429c      	cmp	r4, r3
 800d29e:	d206      	bcs.n	800d2ae <tcp_receive+0xaa6>
 800d2a0:	4b1e      	ldr	r3, [pc, #120]	; (800d31c <tcp_receive+0xb14>)
 800d2a2:	f240 622b 	movw	r2, #1579	; 0x62b
 800d2a6:	4923      	ldr	r1, [pc, #140]	; (800d334 <tcp_receive+0xb2c>)
 800d2a8:	481e      	ldr	r0, [pc, #120]	; (800d324 <tcp_receive+0xb1c>)
 800d2aa:	f005 f94b 	bl	8012544 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	891b      	ldrh	r3, [r3, #8]
 800d2b2:	461c      	mov	r4, r3
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	899b      	ldrh	r3, [r3, #12]
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fa fb3d 	bl	800793c <lwip_htons>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	f003 0303 	and.w	r3, r3, #3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <tcp_receive+0xaca>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e000      	b.n	800d2d4 <tcp_receive+0xacc>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	1919      	adds	r1, r3, r4
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2da:	b28b      	uxth	r3, r1
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7fc fe47 	bl	8009f78 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	891b      	ldrh	r3, [r3, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d028      	beq.n	800d346 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d2f4:	4b0d      	ldr	r3, [pc, #52]	; (800d32c <tcp_receive+0xb24>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d01d      	beq.n	800d338 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d2fc:	4b0b      	ldr	r3, [pc, #44]	; (800d32c <tcp_receive+0xb24>)
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	4619      	mov	r1, r3
 800d306:	4610      	mov	r0, r2
 800d308:	f7fb fff0 	bl	80092ec <pbuf_cat>
 800d30c:	e018      	b.n	800d340 <tcp_receive+0xb38>
 800d30e:	bf00      	nop
 800d310:	20008076 	.word	0x20008076
 800d314:	2000806c 	.word	0x2000806c
 800d318:	2000804c 	.word	0x2000804c
 800d31c:	08014d3c 	.word	0x08014d3c
 800d320:	0801511c 	.word	0x0801511c
 800d324:	08014d88 	.word	0x08014d88
 800d328:	08015158 	.word	0x08015158
 800d32c:	2000807c 	.word	0x2000807c
 800d330:	20008079 	.word	0x20008079
 800d334:	08015178 	.word	0x08015178
            } else {
              recv_data = cseg->p;
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	4a70      	ldr	r2, [pc, #448]	; (800d500 <tcp_receive+0xcf8>)
 800d33e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	2200      	movs	r2, #0
 800d344:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	899b      	ldrh	r3, [r3, #12]
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fa faf4 	bl	800793c <lwip_htons>
 800d354:	4603      	mov	r3, r0
 800d356:	b2db      	uxtb	r3, r3
 800d358:	f003 0301 	and.w	r3, r3, #1
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00d      	beq.n	800d37c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d360:	4b68      	ldr	r3, [pc, #416]	; (800d504 <tcp_receive+0xcfc>)
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	f043 0320 	orr.w	r3, r3, #32
 800d368:	b2da      	uxtb	r2, r3
 800d36a:	4b66      	ldr	r3, [pc, #408]	; (800d504 <tcp_receive+0xcfc>)
 800d36c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	7d1b      	ldrb	r3, [r3, #20]
 800d372:	2b04      	cmp	r3, #4
 800d374:	d102      	bne.n	800d37c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2207      	movs	r2, #7
 800d37a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d384:	68b8      	ldr	r0, [r7, #8]
 800d386:	f7fd fb1c 	bl	800a9c2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d008      	beq.n	800d3a4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	685a      	ldr	r2, [r3, #4]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	f43f af43 	beq.w	800d22a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	8b5b      	ldrh	r3, [r3, #26]
 800d3a8:	f003 0301 	and.w	r3, r3, #1
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00e      	beq.n	800d3ce <tcp_receive+0xbc6>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	8b5b      	ldrh	r3, [r3, #26]
 800d3b4:	f023 0301 	bic.w	r3, r3, #1
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	835a      	strh	r2, [r3, #26]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	8b5b      	ldrh	r3, [r3, #26]
 800d3c2:	f043 0302 	orr.w	r3, r3, #2
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d3cc:	e188      	b.n	800d6e0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	8b5b      	ldrh	r3, [r3, #26]
 800d3d2:	f043 0301 	orr.w	r3, r3, #1
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d3dc:	e180      	b.n	800d6e0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d106      	bne.n	800d3f4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d3e6:	4848      	ldr	r0, [pc, #288]	; (800d508 <tcp_receive+0xd00>)
 800d3e8:	f7fd fb04 	bl	800a9f4 <tcp_seg_copy>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	675a      	str	r2, [r3, #116]	; 0x74
 800d3f2:	e16d      	b.n	800d6d0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800d3fe:	e157      	b.n	800d6b0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	685a      	ldr	r2, [r3, #4]
 800d406:	4b41      	ldr	r3, [pc, #260]	; (800d50c <tcp_receive+0xd04>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d11d      	bne.n	800d44a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d40e:	4b3e      	ldr	r3, [pc, #248]	; (800d508 <tcp_receive+0xd00>)
 800d410:	891a      	ldrh	r2, [r3, #8]
 800d412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d414:	891b      	ldrh	r3, [r3, #8]
 800d416:	429a      	cmp	r2, r3
 800d418:	f240 814f 	bls.w	800d6ba <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d41c:	483a      	ldr	r0, [pc, #232]	; (800d508 <tcp_receive+0xd00>)
 800d41e:	f7fd fae9 	bl	800a9f4 <tcp_seg_copy>
 800d422:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	2b00      	cmp	r3, #0
 800d428:	f000 8149 	beq.w	800d6be <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <tcp_receive+0xc32>
                    prev->next = cseg;
 800d432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d434:	697a      	ldr	r2, [r7, #20]
 800d436:	601a      	str	r2, [r3, #0]
 800d438:	e002      	b.n	800d440 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d440:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d442:	6978      	ldr	r0, [r7, #20]
 800d444:	f7ff f8dc 	bl	800c600 <tcp_oos_insert_segment>
                }
                break;
 800d448:	e139      	b.n	800d6be <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d117      	bne.n	800d480 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d450:	4b2e      	ldr	r3, [pc, #184]	; (800d50c <tcp_receive+0xd04>)
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	da57      	bge.n	800d510 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d460:	4829      	ldr	r0, [pc, #164]	; (800d508 <tcp_receive+0xd00>)
 800d462:	f7fd fac7 	bl	800a9f4 <tcp_seg_copy>
 800d466:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f000 8129 	beq.w	800d6c2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	69ba      	ldr	r2, [r7, #24]
 800d474:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d476:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d478:	69b8      	ldr	r0, [r7, #24]
 800d47a:	f7ff f8c1 	bl	800c600 <tcp_oos_insert_segment>
                  }
                  break;
 800d47e:	e120      	b.n	800d6c2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d480:	4b22      	ldr	r3, [pc, #136]	; (800d50c <tcp_receive+0xd04>)
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	3b01      	subs	r3, #1
 800d48e:	2b00      	cmp	r3, #0
 800d490:	db3e      	blt.n	800d510 <tcp_receive+0xd08>
 800d492:	4b1e      	ldr	r3, [pc, #120]	; (800d50c <tcp_receive+0xd04>)
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	3301      	adds	r3, #1
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	dc35      	bgt.n	800d510 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d4a4:	4818      	ldr	r0, [pc, #96]	; (800d508 <tcp_receive+0xd00>)
 800d4a6:	f7fd faa5 	bl	800a9f4 <tcp_seg_copy>
 800d4aa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f000 8109 	beq.w	800d6c6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4bc:	8912      	ldrh	r2, [r2, #8]
 800d4be:	441a      	add	r2, r3
 800d4c0:	4b12      	ldr	r3, [pc, #72]	; (800d50c <tcp_receive+0xd04>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	1ad3      	subs	r3, r2, r3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	dd12      	ble.n	800d4f0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d4ca:	4b10      	ldr	r3, [pc, #64]	; (800d50c <tcp_receive+0xd04>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4de:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e2:	685a      	ldr	r2, [r3, #4]
 800d4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e6:	891b      	ldrh	r3, [r3, #8]
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	f7fb fcb6 	bl	8008e5c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f2:	69fa      	ldr	r2, [r7, #28]
 800d4f4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d4f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4f8:	69f8      	ldr	r0, [r7, #28]
 800d4fa:	f7ff f881 	bl	800c600 <tcp_oos_insert_segment>
                  }
                  break;
 800d4fe:	e0e2      	b.n	800d6c6 <tcp_receive+0xebe>
 800d500:	2000807c 	.word	0x2000807c
 800d504:	20008079 	.word	0x20008079
 800d508:	2000804c 	.word	0x2000804c
 800d50c:	2000806c 	.word	0x2000806c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d512:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f040 80c6 	bne.w	800d6aa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d51e:	4b80      	ldr	r3, [pc, #512]	; (800d720 <tcp_receive+0xf18>)
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f340 80bd 	ble.w	800d6aa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	899b      	ldrh	r3, [r3, #12]
 800d536:	b29b      	uxth	r3, r3
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fa f9ff 	bl	800793c <lwip_htons>
 800d53e:	4603      	mov	r3, r0
 800d540:	b2db      	uxtb	r3, r3
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	f040 80bf 	bne.w	800d6ca <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d54c:	4875      	ldr	r0, [pc, #468]	; (800d724 <tcp_receive+0xf1c>)
 800d54e:	f7fd fa51 	bl	800a9f4 <tcp_seg_copy>
 800d552:	4602      	mov	r2, r0
 800d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d556:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f000 80b6 	beq.w	800d6ce <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d56a:	8912      	ldrh	r2, [r2, #8]
 800d56c:	441a      	add	r2, r3
 800d56e:	4b6c      	ldr	r3, [pc, #432]	; (800d720 <tcp_receive+0xf18>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	2b00      	cmp	r3, #0
 800d576:	dd12      	ble.n	800d59e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d578:	4b69      	ldr	r3, [pc, #420]	; (800d720 <tcp_receive+0xf18>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	b29b      	uxth	r3, r3
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	b29a      	uxth	r2, r3
 800d58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d590:	685a      	ldr	r2, [r3, #4]
 800d592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d594:	891b      	ldrh	r3, [r3, #8]
 800d596:	4619      	mov	r1, r3
 800d598:	4610      	mov	r0, r2
 800d59a:	f7fb fc5f 	bl	8008e5c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d59e:	4b62      	ldr	r3, [pc, #392]	; (800d728 <tcp_receive+0xf20>)
 800d5a0:	881b      	ldrh	r3, [r3, #0]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	4b5e      	ldr	r3, [pc, #376]	; (800d720 <tcp_receive+0xf18>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	441a      	add	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d5b2:	440b      	add	r3, r1
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f340 8089 	ble.w	800d6ce <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	899b      	ldrh	r3, [r3, #12]
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fa f9b8 	bl	800793c <lwip_htons>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	f003 0301 	and.w	r3, r3, #1
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d022      	beq.n	800d61e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	899b      	ldrh	r3, [r3, #12]
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	b21b      	sxth	r3, r3
 800d5e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d5e8:	b21c      	sxth	r4, r3
 800d5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	899b      	ldrh	r3, [r3, #12]
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fa f9a1 	bl	800793c <lwip_htons>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d604:	b29b      	uxth	r3, r3
 800d606:	4618      	mov	r0, r3
 800d608:	f7fa f998 	bl	800793c <lwip_htons>
 800d60c:	4603      	mov	r3, r0
 800d60e:	b21b      	sxth	r3, r3
 800d610:	4323      	orrs	r3, r4
 800d612:	b21a      	sxth	r2, r3
 800d614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	b292      	uxth	r2, r2
 800d61c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d622:	b29a      	uxth	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d628:	4413      	add	r3, r2
 800d62a:	b299      	uxth	r1, r3
 800d62c:	4b3c      	ldr	r3, [pc, #240]	; (800d720 <tcp_receive+0xf18>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	b29a      	uxth	r2, r3
 800d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	1a8a      	subs	r2, r1, r2
 800d638:	b292      	uxth	r2, r2
 800d63a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	685a      	ldr	r2, [r3, #4]
 800d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	891b      	ldrh	r3, [r3, #8]
 800d648:	4619      	mov	r1, r3
 800d64a:	4610      	mov	r0, r2
 800d64c:	f7fb fc06 	bl	8008e5c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	891c      	ldrh	r4, [r3, #8]
 800d656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68db      	ldr	r3, [r3, #12]
 800d65c:	899b      	ldrh	r3, [r3, #12]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	4618      	mov	r0, r3
 800d662:	f7fa f96b 	bl	800793c <lwip_htons>
 800d666:	4603      	mov	r3, r0
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	f003 0303 	and.w	r3, r3, #3
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <tcp_receive+0xe6e>
 800d672:	2301      	movs	r3, #1
 800d674:	e000      	b.n	800d678 <tcp_receive+0xe70>
 800d676:	2300      	movs	r3, #0
 800d678:	4423      	add	r3, r4
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	4b2a      	ldr	r3, [pc, #168]	; (800d728 <tcp_receive+0xf20>)
 800d67e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d680:	4b29      	ldr	r3, [pc, #164]	; (800d728 <tcp_receive+0xf20>)
 800d682:	881b      	ldrh	r3, [r3, #0]
 800d684:	461a      	mov	r2, r3
 800d686:	4b26      	ldr	r3, [pc, #152]	; (800d720 <tcp_receive+0xf18>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	441a      	add	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d690:	6879      	ldr	r1, [r7, #4]
 800d692:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d694:	440b      	add	r3, r1
 800d696:	429a      	cmp	r2, r3
 800d698:	d019      	beq.n	800d6ce <tcp_receive+0xec6>
 800d69a:	4b24      	ldr	r3, [pc, #144]	; (800d72c <tcp_receive+0xf24>)
 800d69c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d6a0:	4923      	ldr	r1, [pc, #140]	; (800d730 <tcp_receive+0xf28>)
 800d6a2:	4824      	ldr	r0, [pc, #144]	; (800d734 <tcp_receive+0xf2c>)
 800d6a4:	f004 ff4e 	bl	8012544 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d6a8:	e011      	b.n	800d6ce <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f47f aea4 	bne.w	800d400 <tcp_receive+0xbf8>
 800d6b8:	e00a      	b.n	800d6d0 <tcp_receive+0xec8>
                break;
 800d6ba:	bf00      	nop
 800d6bc:	e008      	b.n	800d6d0 <tcp_receive+0xec8>
                break;
 800d6be:	bf00      	nop
 800d6c0:	e006      	b.n	800d6d0 <tcp_receive+0xec8>
                  break;
 800d6c2:	bf00      	nop
 800d6c4:	e004      	b.n	800d6d0 <tcp_receive+0xec8>
                  break;
 800d6c6:	bf00      	nop
 800d6c8:	e002      	b.n	800d6d0 <tcp_receive+0xec8>
                  break;
 800d6ca:	bf00      	nop
 800d6cc:	e000      	b.n	800d6d0 <tcp_receive+0xec8>
                break;
 800d6ce:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f001 fe8b 	bl	800f3ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d6d6:	e003      	b.n	800d6e0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f001 fe87 	bl	800f3ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d6de:	e01a      	b.n	800d716 <tcp_receive+0xf0e>
 800d6e0:	e019      	b.n	800d716 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d6e2:	4b0f      	ldr	r3, [pc, #60]	; (800d720 <tcp_receive+0xf18>)
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ea:	1ad3      	subs	r3, r2, r3
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	db0a      	blt.n	800d706 <tcp_receive+0xefe>
 800d6f0:	4b0b      	ldr	r3, [pc, #44]	; (800d720 <tcp_receive+0xf18>)
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f8:	6879      	ldr	r1, [r7, #4]
 800d6fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d6fc:	440b      	add	r3, r1
 800d6fe:	1ad3      	subs	r3, r2, r3
 800d700:	3301      	adds	r3, #1
 800d702:	2b00      	cmp	r3, #0
 800d704:	dd07      	ble.n	800d716 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	8b5b      	ldrh	r3, [r3, #26]
 800d70a:	f043 0302 	orr.w	r3, r3, #2
 800d70e:	b29a      	uxth	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d714:	e7ff      	b.n	800d716 <tcp_receive+0xf0e>
 800d716:	bf00      	nop
 800d718:	3750      	adds	r7, #80	; 0x50
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bdb0      	pop	{r4, r5, r7, pc}
 800d71e:	bf00      	nop
 800d720:	2000806c 	.word	0x2000806c
 800d724:	2000804c 	.word	0x2000804c
 800d728:	20008076 	.word	0x20008076
 800d72c:	08014d3c 	.word	0x08014d3c
 800d730:	080150e4 	.word	0x080150e4
 800d734:	08014d88 	.word	0x08014d88

0800d738 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d73e:	4b15      	ldr	r3, [pc, #84]	; (800d794 <tcp_get_next_optbyte+0x5c>)
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	1c5a      	adds	r2, r3, #1
 800d744:	b291      	uxth	r1, r2
 800d746:	4a13      	ldr	r2, [pc, #76]	; (800d794 <tcp_get_next_optbyte+0x5c>)
 800d748:	8011      	strh	r1, [r2, #0]
 800d74a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d74c:	4b12      	ldr	r3, [pc, #72]	; (800d798 <tcp_get_next_optbyte+0x60>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d004      	beq.n	800d75e <tcp_get_next_optbyte+0x26>
 800d754:	4b11      	ldr	r3, [pc, #68]	; (800d79c <tcp_get_next_optbyte+0x64>)
 800d756:	881b      	ldrh	r3, [r3, #0]
 800d758:	88fa      	ldrh	r2, [r7, #6]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d208      	bcs.n	800d770 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d75e:	4b10      	ldr	r3, [pc, #64]	; (800d7a0 <tcp_get_next_optbyte+0x68>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	3314      	adds	r3, #20
 800d764:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d766:	88fb      	ldrh	r3, [r7, #6]
 800d768:	683a      	ldr	r2, [r7, #0]
 800d76a:	4413      	add	r3, r2
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	e00b      	b.n	800d788 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d770:	88fb      	ldrh	r3, [r7, #6]
 800d772:	b2da      	uxtb	r2, r3
 800d774:	4b09      	ldr	r3, [pc, #36]	; (800d79c <tcp_get_next_optbyte+0x64>)
 800d776:	881b      	ldrh	r3, [r3, #0]
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	1ad3      	subs	r3, r2, r3
 800d77c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d77e:	4b06      	ldr	r3, [pc, #24]	; (800d798 <tcp_get_next_optbyte+0x60>)
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	797b      	ldrb	r3, [r7, #5]
 800d784:	4413      	add	r3, r2
 800d786:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d788:	4618      	mov	r0, r3
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr
 800d794:	20008068 	.word	0x20008068
 800d798:	20008064 	.word	0x20008064
 800d79c:	20008062 	.word	0x20008062
 800d7a0:	2000805c 	.word	0x2000805c

0800d7a4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d106      	bne.n	800d7c0 <tcp_parseopt+0x1c>
 800d7b2:	4b32      	ldr	r3, [pc, #200]	; (800d87c <tcp_parseopt+0xd8>)
 800d7b4:	f240 727d 	movw	r2, #1917	; 0x77d
 800d7b8:	4931      	ldr	r1, [pc, #196]	; (800d880 <tcp_parseopt+0xdc>)
 800d7ba:	4832      	ldr	r0, [pc, #200]	; (800d884 <tcp_parseopt+0xe0>)
 800d7bc:	f004 fec2 	bl	8012544 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d7c0:	4b31      	ldr	r3, [pc, #196]	; (800d888 <tcp_parseopt+0xe4>)
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d055      	beq.n	800d874 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d7c8:	4b30      	ldr	r3, [pc, #192]	; (800d88c <tcp_parseopt+0xe8>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	801a      	strh	r2, [r3, #0]
 800d7ce:	e045      	b.n	800d85c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d7d0:	f7ff ffb2 	bl	800d738 <tcp_get_next_optbyte>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	2b02      	cmp	r3, #2
 800d7dc:	d006      	beq.n	800d7ec <tcp_parseopt+0x48>
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	dc2b      	bgt.n	800d83a <tcp_parseopt+0x96>
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d041      	beq.n	800d86a <tcp_parseopt+0xc6>
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d127      	bne.n	800d83a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d7ea:	e037      	b.n	800d85c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d7ec:	f7ff ffa4 	bl	800d738 <tcp_get_next_optbyte>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	2b04      	cmp	r3, #4
 800d7f4:	d13b      	bne.n	800d86e <tcp_parseopt+0xca>
 800d7f6:	4b25      	ldr	r3, [pc, #148]	; (800d88c <tcp_parseopt+0xe8>)
 800d7f8:	881b      	ldrh	r3, [r3, #0]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	4a22      	ldr	r2, [pc, #136]	; (800d888 <tcp_parseopt+0xe4>)
 800d7fe:	8812      	ldrh	r2, [r2, #0]
 800d800:	4293      	cmp	r3, r2
 800d802:	da34      	bge.n	800d86e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d804:	f7ff ff98 	bl	800d738 <tcp_get_next_optbyte>
 800d808:	4603      	mov	r3, r0
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	021b      	lsls	r3, r3, #8
 800d80e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d810:	f7ff ff92 	bl	800d738 <tcp_get_next_optbyte>
 800d814:	4603      	mov	r3, r0
 800d816:	b29a      	uxth	r2, r3
 800d818:	89bb      	ldrh	r3, [r7, #12]
 800d81a:	4313      	orrs	r3, r2
 800d81c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d81e:	89bb      	ldrh	r3, [r7, #12]
 800d820:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d824:	d804      	bhi.n	800d830 <tcp_parseopt+0x8c>
 800d826:	89bb      	ldrh	r3, [r7, #12]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d001      	beq.n	800d830 <tcp_parseopt+0x8c>
 800d82c:	89ba      	ldrh	r2, [r7, #12]
 800d82e:	e001      	b.n	800d834 <tcp_parseopt+0x90>
 800d830:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d838:	e010      	b.n	800d85c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d83a:	f7ff ff7d 	bl	800d738 <tcp_get_next_optbyte>
 800d83e:	4603      	mov	r3, r0
 800d840:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d842:	7afb      	ldrb	r3, [r7, #11]
 800d844:	2b01      	cmp	r3, #1
 800d846:	d914      	bls.n	800d872 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d848:	7afb      	ldrb	r3, [r7, #11]
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	4b0f      	ldr	r3, [pc, #60]	; (800d88c <tcp_parseopt+0xe8>)
 800d84e:	881b      	ldrh	r3, [r3, #0]
 800d850:	4413      	add	r3, r2
 800d852:	b29b      	uxth	r3, r3
 800d854:	3b02      	subs	r3, #2
 800d856:	b29a      	uxth	r2, r3
 800d858:	4b0c      	ldr	r3, [pc, #48]	; (800d88c <tcp_parseopt+0xe8>)
 800d85a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d85c:	4b0b      	ldr	r3, [pc, #44]	; (800d88c <tcp_parseopt+0xe8>)
 800d85e:	881a      	ldrh	r2, [r3, #0]
 800d860:	4b09      	ldr	r3, [pc, #36]	; (800d888 <tcp_parseopt+0xe4>)
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	429a      	cmp	r2, r3
 800d866:	d3b3      	bcc.n	800d7d0 <tcp_parseopt+0x2c>
 800d868:	e004      	b.n	800d874 <tcp_parseopt+0xd0>
          return;
 800d86a:	bf00      	nop
 800d86c:	e002      	b.n	800d874 <tcp_parseopt+0xd0>
            return;
 800d86e:	bf00      	nop
 800d870:	e000      	b.n	800d874 <tcp_parseopt+0xd0>
            return;
 800d872:	bf00      	nop
      }
    }
  }
}
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	08014d3c 	.word	0x08014d3c
 800d880:	080151a0 	.word	0x080151a0
 800d884:	08014d88 	.word	0x08014d88
 800d888:	20008060 	.word	0x20008060
 800d88c:	20008068 	.word	0x20008068

0800d890 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d890:	b480      	push	{r7}
 800d892:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d894:	4b05      	ldr	r3, [pc, #20]	; (800d8ac <tcp_trigger_input_pcb_close+0x1c>)
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	f043 0310 	orr.w	r3, r3, #16
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	4b03      	ldr	r3, [pc, #12]	; (800d8ac <tcp_trigger_input_pcb_close+0x1c>)
 800d8a0:	701a      	strb	r2, [r3, #0]
}
 800d8a2:	bf00      	nop
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr
 800d8ac:	20008079 	.word	0x20008079

0800d8b0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00a      	beq.n	800d8d8 <tcp_route+0x28>
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	7a1b      	ldrb	r3, [r3, #8]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d006      	beq.n	800d8d8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	7a1b      	ldrb	r3, [r3, #8]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fb f8ea 	bl	8008aa8 <netif_get_by_index>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	e003      	b.n	800d8e0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f003 fafb 	bl	8010ed4 <ip4_route>
 800d8de:	4603      	mov	r3, r0
  }
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d8e8:	b590      	push	{r4, r7, lr}
 800d8ea:	b087      	sub	sp, #28
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d105      	bne.n	800d90a <tcp_create_segment+0x22>
 800d8fe:	4b44      	ldr	r3, [pc, #272]	; (800da10 <tcp_create_segment+0x128>)
 800d900:	22a3      	movs	r2, #163	; 0xa3
 800d902:	4944      	ldr	r1, [pc, #272]	; (800da14 <tcp_create_segment+0x12c>)
 800d904:	4844      	ldr	r0, [pc, #272]	; (800da18 <tcp_create_segment+0x130>)
 800d906:	f004 fe1d 	bl	8012544 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d105      	bne.n	800d91c <tcp_create_segment+0x34>
 800d910:	4b3f      	ldr	r3, [pc, #252]	; (800da10 <tcp_create_segment+0x128>)
 800d912:	22a4      	movs	r2, #164	; 0xa4
 800d914:	4941      	ldr	r1, [pc, #260]	; (800da1c <tcp_create_segment+0x134>)
 800d916:	4840      	ldr	r0, [pc, #256]	; (800da18 <tcp_create_segment+0x130>)
 800d918:	f004 fe14 	bl	8012544 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d91c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	b2db      	uxtb	r3, r3
 800d924:	f003 0304 	and.w	r3, r3, #4
 800d928:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d92a:	2003      	movs	r0, #3
 800d92c:	f7fa fd36 	bl	800839c <memp_malloc>
 800d930:	6138      	str	r0, [r7, #16]
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d104      	bne.n	800d942 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d938:	68b8      	ldr	r0, [r7, #8]
 800d93a:	f7fb fc15 	bl	8009168 <pbuf_free>
    return NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	e061      	b.n	800da06 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d948:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	2200      	movs	r2, #0
 800d94e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	891a      	ldrh	r2, [r3, #8]
 800d95a:	7dfb      	ldrb	r3, [r7, #23]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	429a      	cmp	r2, r3
 800d960:	d205      	bcs.n	800d96e <tcp_create_segment+0x86>
 800d962:	4b2b      	ldr	r3, [pc, #172]	; (800da10 <tcp_create_segment+0x128>)
 800d964:	22b0      	movs	r2, #176	; 0xb0
 800d966:	492e      	ldr	r1, [pc, #184]	; (800da20 <tcp_create_segment+0x138>)
 800d968:	482b      	ldr	r0, [pc, #172]	; (800da18 <tcp_create_segment+0x130>)
 800d96a:	f004 fdeb 	bl	8012544 <iprintf>
  seg->len = p->tot_len - optlen;
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	891a      	ldrh	r2, [r3, #8]
 800d972:	7dfb      	ldrb	r3, [r7, #23]
 800d974:	b29b      	uxth	r3, r3
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	b29a      	uxth	r2, r3
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d97e:	2114      	movs	r1, #20
 800d980:	68b8      	ldr	r0, [r7, #8]
 800d982:	f7fb fb5b 	bl	800903c <pbuf_add_header>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d004      	beq.n	800d996 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d98c:	6938      	ldr	r0, [r7, #16]
 800d98e:	f7fd f818 	bl	800a9c2 <tcp_seg_free>
    return NULL;
 800d992:	2300      	movs	r3, #0
 800d994:	e037      	b.n	800da06 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	8ada      	ldrh	r2, [r3, #22]
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	68dc      	ldr	r4, [r3, #12]
 800d9a8:	4610      	mov	r0, r2
 800d9aa:	f7f9 ffc7 	bl	800793c <lwip_htons>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	8b1a      	ldrh	r2, [r3, #24]
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	68dc      	ldr	r4, [r3, #12]
 800d9ba:	4610      	mov	r0, r2
 800d9bc:	f7f9 ffbe 	bl	800793c <lwip_htons>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	68dc      	ldr	r4, [r3, #12]
 800d9c8:	6838      	ldr	r0, [r7, #0]
 800d9ca:	f7f9 ffcc 	bl	8007966 <lwip_htonl>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
 800d9d4:	089b      	lsrs	r3, r3, #2
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	3305      	adds	r3, #5
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	031b      	lsls	r3, r3, #12
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	79fb      	ldrb	r3, [r7, #7]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	68dc      	ldr	r4, [r3, #12]
 800d9ee:	4610      	mov	r0, r2
 800d9f0:	f7f9 ffa4 	bl	800793c <lwip_htons>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	749a      	strb	r2, [r3, #18]
 800da00:	2200      	movs	r2, #0
 800da02:	74da      	strb	r2, [r3, #19]
  return seg;
 800da04:	693b      	ldr	r3, [r7, #16]
}
 800da06:	4618      	mov	r0, r3
 800da08:	371c      	adds	r7, #28
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd90      	pop	{r4, r7, pc}
 800da0e:	bf00      	nop
 800da10:	080151bc 	.word	0x080151bc
 800da14:	080151f0 	.word	0x080151f0
 800da18:	08015210 	.word	0x08015210
 800da1c:	08015238 	.word	0x08015238
 800da20:	0801525c 	.word	0x0801525c

0800da24 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	607b      	str	r3, [r7, #4]
 800da2c:	4603      	mov	r3, r0
 800da2e:	73fb      	strb	r3, [r7, #15]
 800da30:	460b      	mov	r3, r1
 800da32:	81bb      	strh	r3, [r7, #12]
 800da34:	4613      	mov	r3, r2
 800da36:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800da38:	89bb      	ldrh	r3, [r7, #12]
 800da3a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d105      	bne.n	800da4e <tcp_pbuf_prealloc+0x2a>
 800da42:	4b30      	ldr	r3, [pc, #192]	; (800db04 <tcp_pbuf_prealloc+0xe0>)
 800da44:	22e8      	movs	r2, #232	; 0xe8
 800da46:	4930      	ldr	r1, [pc, #192]	; (800db08 <tcp_pbuf_prealloc+0xe4>)
 800da48:	4830      	ldr	r0, [pc, #192]	; (800db0c <tcp_pbuf_prealloc+0xe8>)
 800da4a:	f004 fd7b 	bl	8012544 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d105      	bne.n	800da60 <tcp_pbuf_prealloc+0x3c>
 800da54:	4b2b      	ldr	r3, [pc, #172]	; (800db04 <tcp_pbuf_prealloc+0xe0>)
 800da56:	22e9      	movs	r2, #233	; 0xe9
 800da58:	492d      	ldr	r1, [pc, #180]	; (800db10 <tcp_pbuf_prealloc+0xec>)
 800da5a:	482c      	ldr	r0, [pc, #176]	; (800db0c <tcp_pbuf_prealloc+0xe8>)
 800da5c:	f004 fd72 	bl	8012544 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800da60:	89ba      	ldrh	r2, [r7, #12]
 800da62:	897b      	ldrh	r3, [r7, #10]
 800da64:	429a      	cmp	r2, r3
 800da66:	d221      	bcs.n	800daac <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800da68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da6c:	f003 0302 	and.w	r3, r3, #2
 800da70:	2b00      	cmp	r3, #0
 800da72:	d111      	bne.n	800da98 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800da74:	6a3b      	ldr	r3, [r7, #32]
 800da76:	8b5b      	ldrh	r3, [r3, #26]
 800da78:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d115      	bne.n	800daac <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800da80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da84:	2b00      	cmp	r3, #0
 800da86:	d007      	beq.n	800da98 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d103      	bne.n	800da98 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800da90:	6a3b      	ldr	r3, [r7, #32]
 800da92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800da94:	2b00      	cmp	r3, #0
 800da96:	d009      	beq.n	800daac <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800da98:	89bb      	ldrh	r3, [r7, #12]
 800da9a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800da9e:	f023 0203 	bic.w	r2, r3, #3
 800daa2:	897b      	ldrh	r3, [r7, #10]
 800daa4:	4293      	cmp	r3, r2
 800daa6:	bf28      	it	cs
 800daa8:	4613      	movcs	r3, r2
 800daaa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800daac:	8af9      	ldrh	r1, [r7, #22]
 800daae:	7bfb      	ldrb	r3, [r7, #15]
 800dab0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fb f873 	bl	8008ba0 <pbuf_alloc>
 800daba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d101      	bne.n	800dac6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800dac2:	2300      	movs	r3, #0
 800dac4:	e019      	b.n	800dafa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d006      	beq.n	800dadc <tcp_pbuf_prealloc+0xb8>
 800dace:	4b0d      	ldr	r3, [pc, #52]	; (800db04 <tcp_pbuf_prealloc+0xe0>)
 800dad0:	f240 120b 	movw	r2, #267	; 0x10b
 800dad4:	490f      	ldr	r1, [pc, #60]	; (800db14 <tcp_pbuf_prealloc+0xf0>)
 800dad6:	480d      	ldr	r0, [pc, #52]	; (800db0c <tcp_pbuf_prealloc+0xe8>)
 800dad8:	f004 fd34 	bl	8012544 <iprintf>
  *oversize = p->len - length;
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	895a      	ldrh	r2, [r3, #10]
 800dae0:	89bb      	ldrh	r3, [r7, #12]
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	89ba      	ldrh	r2, [r7, #12]
 800daee:	811a      	strh	r2, [r3, #8]
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	891a      	ldrh	r2, [r3, #8]
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	815a      	strh	r2, [r3, #10]
  return p;
 800daf8:	693b      	ldr	r3, [r7, #16]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3718      	adds	r7, #24
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	080151bc 	.word	0x080151bc
 800db08:	08015274 	.word	0x08015274
 800db0c:	08015210 	.word	0x08015210
 800db10:	08015298 	.word	0x08015298
 800db14:	080152b8 	.word	0x080152b8

0800db18 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	460b      	mov	r3, r1
 800db22:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <tcp_write_checks+0x20>
 800db2a:	4b33      	ldr	r3, [pc, #204]	; (800dbf8 <tcp_write_checks+0xe0>)
 800db2c:	f240 1233 	movw	r2, #307	; 0x133
 800db30:	4932      	ldr	r1, [pc, #200]	; (800dbfc <tcp_write_checks+0xe4>)
 800db32:	4833      	ldr	r0, [pc, #204]	; (800dc00 <tcp_write_checks+0xe8>)
 800db34:	f004 fd06 	bl	8012544 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	7d1b      	ldrb	r3, [r3, #20]
 800db3c:	2b04      	cmp	r3, #4
 800db3e:	d00e      	beq.n	800db5e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800db44:	2b07      	cmp	r3, #7
 800db46:	d00a      	beq.n	800db5e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d006      	beq.n	800db5e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800db54:	2b03      	cmp	r3, #3
 800db56:	d002      	beq.n	800db5e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800db58:	f06f 030a 	mvn.w	r3, #10
 800db5c:	e048      	b.n	800dbf0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800db5e:	887b      	ldrh	r3, [r7, #2]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d101      	bne.n	800db68 <tcp_write_checks+0x50>
    return ERR_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	e043      	b.n	800dbf0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800db6e:	887a      	ldrh	r2, [r7, #2]
 800db70:	429a      	cmp	r2, r3
 800db72:	d909      	bls.n	800db88 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	8b5b      	ldrh	r3, [r3, #26]
 800db78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800db82:	f04f 33ff 	mov.w	r3, #4294967295
 800db86:	e033      	b.n	800dbf0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db8e:	2b08      	cmp	r3, #8
 800db90:	d909      	bls.n	800dba6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	8b5b      	ldrh	r3, [r3, #26]
 800db96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800dba0:	f04f 33ff 	mov.w	r3, #4294967295
 800dba4:	e024      	b.n	800dbf0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d00f      	beq.n	800dbd0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d11a      	bne.n	800dbee <tcp_write_checks+0xd6>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d116      	bne.n	800dbee <tcp_write_checks+0xd6>
 800dbc0:	4b0d      	ldr	r3, [pc, #52]	; (800dbf8 <tcp_write_checks+0xe0>)
 800dbc2:	f240 1255 	movw	r2, #341	; 0x155
 800dbc6:	490f      	ldr	r1, [pc, #60]	; (800dc04 <tcp_write_checks+0xec>)
 800dbc8:	480d      	ldr	r0, [pc, #52]	; (800dc00 <tcp_write_checks+0xe8>)
 800dbca:	f004 fcbb 	bl	8012544 <iprintf>
 800dbce:	e00e      	b.n	800dbee <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d103      	bne.n	800dbe0 <tcp_write_checks+0xc8>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d006      	beq.n	800dbee <tcp_write_checks+0xd6>
 800dbe0:	4b05      	ldr	r3, [pc, #20]	; (800dbf8 <tcp_write_checks+0xe0>)
 800dbe2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800dbe6:	4908      	ldr	r1, [pc, #32]	; (800dc08 <tcp_write_checks+0xf0>)
 800dbe8:	4805      	ldr	r0, [pc, #20]	; (800dc00 <tcp_write_checks+0xe8>)
 800dbea:	f004 fcab 	bl	8012544 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800dbee:	2300      	movs	r3, #0
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	080151bc 	.word	0x080151bc
 800dbfc:	080152cc 	.word	0x080152cc
 800dc00:	08015210 	.word	0x08015210
 800dc04:	080152ec 	.word	0x080152ec
 800dc08:	08015328 	.word	0x08015328

0800dc0c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800dc0c:	b590      	push	{r4, r7, lr}
 800dc0e:	b09b      	sub	sp, #108	; 0x6c
 800dc10:	af04      	add	r7, sp, #16
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	4611      	mov	r1, r2
 800dc18:	461a      	mov	r2, r3
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	80fb      	strh	r3, [r7, #6]
 800dc1e:	4613      	mov	r3, r2
 800dc20:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800dc26:	2300      	movs	r3, #0
 800dc28:	653b      	str	r3, [r7, #80]	; 0x50
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc2e:	2300      	movs	r3, #0
 800dc30:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc32:	2300      	movs	r3, #0
 800dc34:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800dc36:	2300      	movs	r3, #0
 800dc38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d109      	bne.n	800dc68 <tcp_write+0x5c>
 800dc54:	4ba4      	ldr	r3, [pc, #656]	; (800dee8 <tcp_write+0x2dc>)
 800dc56:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800dc5a:	49a4      	ldr	r1, [pc, #656]	; (800deec <tcp_write+0x2e0>)
 800dc5c:	48a4      	ldr	r0, [pc, #656]	; (800def0 <tcp_write+0x2e4>)
 800dc5e:	f004 fc71 	bl	8012544 <iprintf>
 800dc62:	f06f 030f 	mvn.w	r3, #15
 800dc66:	e32a      	b.n	800e2be <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc6e:	085b      	lsrs	r3, r3, #1
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc76:	4293      	cmp	r3, r2
 800dc78:	bf28      	it	cs
 800dc7a:	4613      	movcs	r3, r2
 800dc7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800dc7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d102      	bne.n	800dc8a <tcp_write+0x7e>
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc88:	e000      	b.n	800dc8c <tcp_write+0x80>
 800dc8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d109      	bne.n	800dca8 <tcp_write+0x9c>
 800dc94:	4b94      	ldr	r3, [pc, #592]	; (800dee8 <tcp_write+0x2dc>)
 800dc96:	f240 12ad 	movw	r2, #429	; 0x1ad
 800dc9a:	4996      	ldr	r1, [pc, #600]	; (800def4 <tcp_write+0x2e8>)
 800dc9c:	4894      	ldr	r0, [pc, #592]	; (800def0 <tcp_write+0x2e4>)
 800dc9e:	f004 fc51 	bl	8012544 <iprintf>
 800dca2:	f06f 030f 	mvn.w	r3, #15
 800dca6:	e30a      	b.n	800e2be <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800dca8:	88fb      	ldrh	r3, [r7, #6]
 800dcaa:	4619      	mov	r1, r3
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f7ff ff33 	bl	800db18 <tcp_write_checks>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800dcb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <tcp_write+0xba>
    return err;
 800dcc0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dcc4:	e2fb      	b.n	800e2be <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dccc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f000 80f6 	beq.w	800decc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dce4:	653b      	str	r3, [r7, #80]	; 0x50
 800dce6:	e002      	b.n	800dcee <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800dce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dcee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1f8      	bne.n	800dce8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800dcf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcf8:	7a9b      	ldrb	r3, [r3, #10]
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	f003 0304 	and.w	r3, r3, #4
 800dd02:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dd04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd08:	891b      	ldrh	r3, [r3, #8]
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	8c3b      	ldrh	r3, [r7, #32]
 800dd0e:	440b      	add	r3, r1
 800dd10:	429a      	cmp	r2, r3
 800dd12:	da06      	bge.n	800dd22 <tcp_write+0x116>
 800dd14:	4b74      	ldr	r3, [pc, #464]	; (800dee8 <tcp_write+0x2dc>)
 800dd16:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dd1a:	4977      	ldr	r1, [pc, #476]	; (800def8 <tcp_write+0x2ec>)
 800dd1c:	4874      	ldr	r0, [pc, #464]	; (800def0 <tcp_write+0x2e4>)
 800dd1e:	f004 fc11 	bl	8012544 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd24:	891a      	ldrh	r2, [r3, #8]
 800dd26:	8c3b      	ldrh	r3, [r7, #32]
 800dd28:	4413      	add	r3, r2
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd38:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800dd3a:	8a7b      	ldrh	r3, [r7, #18]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d026      	beq.n	800dd8e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dd40:	8a7b      	ldrh	r3, [r7, #18]
 800dd42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d206      	bcs.n	800dd56 <tcp_write+0x14a>
 800dd48:	4b67      	ldr	r3, [pc, #412]	; (800dee8 <tcp_write+0x2dc>)
 800dd4a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800dd4e:	496b      	ldr	r1, [pc, #428]	; (800defc <tcp_write+0x2f0>)
 800dd50:	4867      	ldr	r0, [pc, #412]	; (800def0 <tcp_write+0x2e4>)
 800dd52:	f004 fbf7 	bl	8012544 <iprintf>
      seg = last_unsent;
 800dd56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd58:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dd5a:	8a7b      	ldrh	r3, [r7, #18]
 800dd5c:	88fa      	ldrh	r2, [r7, #6]
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	bf28      	it	cs
 800dd62:	4613      	movcs	r3, r2
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	bf28      	it	cs
 800dd6c:	4613      	movcs	r3, r2
 800dd6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800dd70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd76:	4413      	add	r3, r2
 800dd78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800dd7c:	8a7a      	ldrh	r2, [r7, #18]
 800dd7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800dd86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dd88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd8a:	1ad3      	subs	r3, r2, r3
 800dd8c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800dd8e:	8a7b      	ldrh	r3, [r7, #18]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00b      	beq.n	800ddac <tcp_write+0x1a0>
 800dd94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd98:	88fb      	ldrh	r3, [r7, #6]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d006      	beq.n	800ddac <tcp_write+0x1a0>
 800dd9e:	4b52      	ldr	r3, [pc, #328]	; (800dee8 <tcp_write+0x2dc>)
 800dda0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dda4:	4956      	ldr	r1, [pc, #344]	; (800df00 <tcp_write+0x2f4>)
 800dda6:	4852      	ldr	r0, [pc, #328]	; (800def0 <tcp_write+0x2e4>)
 800dda8:	f004 fbcc 	bl	8012544 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ddac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ddb0:	88fb      	ldrh	r3, [r7, #6]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	f080 8167 	bcs.w	800e086 <tcp_write+0x47a>
 800ddb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f000 8163 	beq.w	800e086 <tcp_write+0x47a>
 800ddc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddc2:	891b      	ldrh	r3, [r3, #8]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f000 815e 	beq.w	800e086 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ddca:	88fa      	ldrh	r2, [r7, #6]
 800ddcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ddd0:	1ad2      	subs	r2, r2, r3
 800ddd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	bfa8      	it	ge
 800ddd8:	4613      	movge	r3, r2
 800ddda:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800dddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddde:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dde0:	797b      	ldrb	r3, [r7, #5]
 800dde2:	f003 0301 	and.w	r3, r3, #1
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d027      	beq.n	800de3a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ddea:	f107 0012 	add.w	r0, r7, #18
 800ddee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ddf0:	8bf9      	ldrh	r1, [r7, #30]
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	9302      	str	r3, [sp, #8]
 800ddf6:	797b      	ldrb	r3, [r7, #5]
 800ddf8:	9301      	str	r3, [sp, #4]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	4603      	mov	r3, r0
 800de00:	2000      	movs	r0, #0
 800de02:	f7ff fe0f 	bl	800da24 <tcp_pbuf_prealloc>
 800de06:	6578      	str	r0, [r7, #84]	; 0x54
 800de08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f000 8225 	beq.w	800e25a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800de10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de12:	6858      	ldr	r0, [r3, #4]
 800de14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	4413      	add	r3, r2
 800de1c:	8bfa      	ldrh	r2, [r7, #30]
 800de1e:	4619      	mov	r1, r3
 800de20:	f004 fa80 	bl	8012324 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800de24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800de26:	f7fb fa27 	bl	8009278 <pbuf_clen>
 800de2a:	4603      	mov	r3, r0
 800de2c:	461a      	mov	r2, r3
 800de2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800de32:	4413      	add	r3, r2
 800de34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800de38:	e041      	b.n	800debe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800de3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	637b      	str	r3, [r7, #52]	; 0x34
 800de40:	e002      	b.n	800de48 <tcp_write+0x23c>
 800de42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	637b      	str	r3, [r7, #52]	; 0x34
 800de48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1f8      	bne.n	800de42 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800de50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de52:	7b1b      	ldrb	r3, [r3, #12]
 800de54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d115      	bne.n	800de88 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800de5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de62:	8952      	ldrh	r2, [r2, #10]
 800de64:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800de66:	68ba      	ldr	r2, [r7, #8]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d10d      	bne.n	800de88 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800de6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de70:	2b00      	cmp	r3, #0
 800de72:	d006      	beq.n	800de82 <tcp_write+0x276>
 800de74:	4b1c      	ldr	r3, [pc, #112]	; (800dee8 <tcp_write+0x2dc>)
 800de76:	f240 2231 	movw	r2, #561	; 0x231
 800de7a:	4922      	ldr	r1, [pc, #136]	; (800df04 <tcp_write+0x2f8>)
 800de7c:	481c      	ldr	r0, [pc, #112]	; (800def0 <tcp_write+0x2e4>)
 800de7e:	f004 fb61 	bl	8012544 <iprintf>
          extendlen = seglen;
 800de82:	8bfb      	ldrh	r3, [r7, #30]
 800de84:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800de86:	e01a      	b.n	800debe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800de88:	8bfb      	ldrh	r3, [r7, #30]
 800de8a:	2201      	movs	r2, #1
 800de8c:	4619      	mov	r1, r3
 800de8e:	2000      	movs	r0, #0
 800de90:	f7fa fe86 	bl	8008ba0 <pbuf_alloc>
 800de94:	6578      	str	r0, [r7, #84]	; 0x54
 800de96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f000 81e0 	beq.w	800e25e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800de9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dea2:	68ba      	ldr	r2, [r7, #8]
 800dea4:	441a      	add	r2, r3
 800dea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dea8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800deaa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800deac:	f7fb f9e4 	bl	8009278 <pbuf_clen>
 800deb0:	4603      	mov	r3, r0
 800deb2:	461a      	mov	r2, r3
 800deb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800deb8:	4413      	add	r3, r2
 800deba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800debe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dec2:	8bfb      	ldrh	r3, [r7, #30]
 800dec4:	4413      	add	r3, r2
 800dec6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800deca:	e0dc      	b.n	800e086 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f000 80d7 	beq.w	800e086 <tcp_write+0x47a>
 800ded8:	4b03      	ldr	r3, [pc, #12]	; (800dee8 <tcp_write+0x2dc>)
 800deda:	f240 224a 	movw	r2, #586	; 0x24a
 800dede:	490a      	ldr	r1, [pc, #40]	; (800df08 <tcp_write+0x2fc>)
 800dee0:	4803      	ldr	r0, [pc, #12]	; (800def0 <tcp_write+0x2e4>)
 800dee2:	f004 fb2f 	bl	8012544 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800dee6:	e0ce      	b.n	800e086 <tcp_write+0x47a>
 800dee8:	080151bc 	.word	0x080151bc
 800deec:	0801535c 	.word	0x0801535c
 800def0:	08015210 	.word	0x08015210
 800def4:	08015374 	.word	0x08015374
 800def8:	080153a8 	.word	0x080153a8
 800defc:	080153c0 	.word	0x080153c0
 800df00:	080153e0 	.word	0x080153e0
 800df04:	08015400 	.word	0x08015400
 800df08:	0801542c 	.word	0x0801542c
    struct pbuf *p;
    u16_t left = len - pos;
 800df0c:	88fa      	ldrh	r2, [r7, #6]
 800df0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df12:	1ad3      	subs	r3, r2, r3
 800df14:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800df16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800df22:	8b7a      	ldrh	r2, [r7, #26]
 800df24:	8bbb      	ldrh	r3, [r7, #28]
 800df26:	4293      	cmp	r3, r2
 800df28:	bf28      	it	cs
 800df2a:	4613      	movcs	r3, r2
 800df2c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800df2e:	797b      	ldrb	r3, [r7, #5]
 800df30:	f003 0301 	and.w	r3, r3, #1
 800df34:	2b00      	cmp	r3, #0
 800df36:	d036      	beq.n	800dfa6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800df38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	8b3b      	ldrh	r3, [r7, #24]
 800df40:	4413      	add	r3, r2
 800df42:	b299      	uxth	r1, r3
 800df44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df46:	2b00      	cmp	r3, #0
 800df48:	bf0c      	ite	eq
 800df4a:	2301      	moveq	r3, #1
 800df4c:	2300      	movne	r3, #0
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	f107 0012 	add.w	r0, r7, #18
 800df54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df56:	9302      	str	r3, [sp, #8]
 800df58:	797b      	ldrb	r3, [r7, #5]
 800df5a:	9301      	str	r3, [sp, #4]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	4603      	mov	r3, r0
 800df62:	2036      	movs	r0, #54	; 0x36
 800df64:	f7ff fd5e 	bl	800da24 <tcp_pbuf_prealloc>
 800df68:	6338      	str	r0, [r7, #48]	; 0x30
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f000 8178 	beq.w	800e262 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	895b      	ldrh	r3, [r3, #10]
 800df76:	8b3a      	ldrh	r2, [r7, #24]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d906      	bls.n	800df8a <tcp_write+0x37e>
 800df7c:	4b8c      	ldr	r3, [pc, #560]	; (800e1b0 <tcp_write+0x5a4>)
 800df7e:	f240 2266 	movw	r2, #614	; 0x266
 800df82:	498c      	ldr	r1, [pc, #560]	; (800e1b4 <tcp_write+0x5a8>)
 800df84:	488c      	ldr	r0, [pc, #560]	; (800e1b8 <tcp_write+0x5ac>)
 800df86:	f004 fadd 	bl	8012544 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800df8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8c:	685a      	ldr	r2, [r3, #4]
 800df8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df92:	18d0      	adds	r0, r2, r3
 800df94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	4413      	add	r3, r2
 800df9c:	8b3a      	ldrh	r2, [r7, #24]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	f004 f9c0 	bl	8012324 <memcpy>
 800dfa4:	e02f      	b.n	800e006 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800dfa6:	8a7b      	ldrh	r3, [r7, #18]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d006      	beq.n	800dfba <tcp_write+0x3ae>
 800dfac:	4b80      	ldr	r3, [pc, #512]	; (800e1b0 <tcp_write+0x5a4>)
 800dfae:	f240 2271 	movw	r2, #625	; 0x271
 800dfb2:	4982      	ldr	r1, [pc, #520]	; (800e1bc <tcp_write+0x5b0>)
 800dfb4:	4880      	ldr	r0, [pc, #512]	; (800e1b8 <tcp_write+0x5ac>)
 800dfb6:	f004 fac5 	bl	8012544 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800dfba:	8b3b      	ldrh	r3, [r7, #24]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	2036      	movs	r0, #54	; 0x36
 800dfc2:	f7fa fded 	bl	8008ba0 <pbuf_alloc>
 800dfc6:	6178      	str	r0, [r7, #20]
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f000 814b 	beq.w	800e266 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800dfd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	441a      	add	r2, r3
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dfdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	2036      	movs	r0, #54	; 0x36
 800dfea:	f7fa fdd9 	bl	8008ba0 <pbuf_alloc>
 800dfee:	6338      	str	r0, [r7, #48]	; 0x30
 800dff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d103      	bne.n	800dffe <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800dff6:	6978      	ldr	r0, [r7, #20]
 800dff8:	f7fb f8b6 	bl	8009168 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800dffc:	e136      	b.n	800e26c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800dffe:	6979      	ldr	r1, [r7, #20]
 800e000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e002:	f7fb f973 	bl	80092ec <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e008:	f7fb f936 	bl	8009278 <pbuf_clen>
 800e00c:	4603      	mov	r3, r0
 800e00e:	461a      	mov	r2, r3
 800e010:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e014:	4413      	add	r3, r2
 800e016:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800e01a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e01e:	2b09      	cmp	r3, #9
 800e020:	d903      	bls.n	800e02a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e024:	f7fb f8a0 	bl	8009168 <pbuf_free>
      goto memerr;
 800e028:	e120      	b.n	800e26c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e02e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e032:	441a      	add	r2, r3
 800e034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	4613      	mov	r3, r2
 800e03c:	2200      	movs	r2, #0
 800e03e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e040:	68f8      	ldr	r0, [r7, #12]
 800e042:	f7ff fc51 	bl	800d8e8 <tcp_create_segment>
 800e046:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f000 810d 	beq.w	800e26a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e052:	2b00      	cmp	r3, #0
 800e054:	d102      	bne.n	800e05c <tcp_write+0x450>
      queue = seg;
 800e056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e058:	647b      	str	r3, [r7, #68]	; 0x44
 800e05a:	e00c      	b.n	800e076 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e05c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d106      	bne.n	800e070 <tcp_write+0x464>
 800e062:	4b53      	ldr	r3, [pc, #332]	; (800e1b0 <tcp_write+0x5a4>)
 800e064:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e068:	4955      	ldr	r1, [pc, #340]	; (800e1c0 <tcp_write+0x5b4>)
 800e06a:	4853      	ldr	r0, [pc, #332]	; (800e1b8 <tcp_write+0x5ac>)
 800e06c:	f004 fa6a 	bl	8012544 <iprintf>
      prev_seg->next = seg;
 800e070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e074:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e078:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e07a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e07e:	8b3b      	ldrh	r3, [r7, #24]
 800e080:	4413      	add	r3, r2
 800e082:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e086:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e08a:	88fb      	ldrh	r3, [r7, #6]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	f4ff af3d 	bcc.w	800df0c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e092:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e094:	2b00      	cmp	r3, #0
 800e096:	d02c      	beq.n	800e0f2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e09e:	e01e      	b.n	800e0de <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800e0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a2:	891a      	ldrh	r2, [r3, #8]
 800e0a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0a6:	4413      	add	r3, r2
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ac:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d110      	bne.n	800e0d8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0bc:	8952      	ldrh	r2, [r2, #10]
 800e0be:	4413      	add	r3, r2
 800e0c0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f004 f92d 	bl	8012324 <memcpy>
        p->len += oversize_used;
 800e0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0cc:	895a      	ldrh	r2, [r3, #10]
 800e0ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0d0:	4413      	add	r3, r2
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d1dd      	bne.n	800e0a0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800e0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0e6:	891a      	ldrh	r2, [r3, #8]
 800e0e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0ea:	4413      	add	r3, r2
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0f0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e0f2:	8a7a      	ldrh	r2, [r7, #18]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e0fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d018      	beq.n	800e132 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e102:	2b00      	cmp	r3, #0
 800e104:	d106      	bne.n	800e114 <tcp_write+0x508>
 800e106:	4b2a      	ldr	r3, [pc, #168]	; (800e1b0 <tcp_write+0x5a4>)
 800e108:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800e10c:	492d      	ldr	r1, [pc, #180]	; (800e1c4 <tcp_write+0x5b8>)
 800e10e:	482a      	ldr	r0, [pc, #168]	; (800e1b8 <tcp_write+0x5ac>)
 800e110:	f004 fa18 	bl	8012544 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fb f8e6 	bl	80092ec <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e122:	891a      	ldrh	r2, [r3, #8]
 800e124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e126:	891b      	ldrh	r3, [r3, #8]
 800e128:	4413      	add	r3, r2
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e12e:	811a      	strh	r2, [r3, #8]
 800e130:	e037      	b.n	800e1a2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800e132:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e134:	2b00      	cmp	r3, #0
 800e136:	d034      	beq.n	800e1a2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d003      	beq.n	800e146 <tcp_write+0x53a>
 800e13e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d106      	bne.n	800e154 <tcp_write+0x548>
 800e146:	4b1a      	ldr	r3, [pc, #104]	; (800e1b0 <tcp_write+0x5a4>)
 800e148:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e14c:	491e      	ldr	r1, [pc, #120]	; (800e1c8 <tcp_write+0x5bc>)
 800e14e:	481a      	ldr	r0, [pc, #104]	; (800e1b8 <tcp_write+0x5ac>)
 800e150:	f004 f9f8 	bl	8012544 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	62bb      	str	r3, [r7, #40]	; 0x28
 800e15a:	e009      	b.n	800e170 <tcp_write+0x564>
      p->tot_len += extendlen;
 800e15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15e:	891a      	ldrh	r2, [r3, #8]
 800e160:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e162:	4413      	add	r3, r2
 800e164:	b29a      	uxth	r2, r3
 800e166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e168:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1f1      	bne.n	800e15c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	891a      	ldrh	r2, [r3, #8]
 800e17c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e17e:	4413      	add	r3, r2
 800e180:	b29a      	uxth	r2, r3
 800e182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e184:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e188:	895a      	ldrh	r2, [r3, #10]
 800e18a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e18c:	4413      	add	r3, r2
 800e18e:	b29a      	uxth	r2, r3
 800e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e192:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e196:	891a      	ldrh	r2, [r3, #8]
 800e198:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e19a:	4413      	add	r3, r2
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1a0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d111      	bne.n	800e1cc <tcp_write+0x5c0>
    pcb->unsent = queue;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1ac:	66da      	str	r2, [r3, #108]	; 0x6c
 800e1ae:	e010      	b.n	800e1d2 <tcp_write+0x5c6>
 800e1b0:	080151bc 	.word	0x080151bc
 800e1b4:	0801545c 	.word	0x0801545c
 800e1b8:	08015210 	.word	0x08015210
 800e1bc:	0801549c 	.word	0x0801549c
 800e1c0:	080154ac 	.word	0x080154ac
 800e1c4:	080154c0 	.word	0x080154c0
 800e1c8:	080154f8 	.word	0x080154f8
  } else {
    last_unsent->next = queue;
 800e1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1d0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e1d6:	88fb      	ldrh	r3, [r7, #6]
 800e1d8:	441a      	add	r2, r3
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e1e4:	88fb      	ldrh	r3, [r7, #6]
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e1f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e200:	2b00      	cmp	r3, #0
 800e202:	d00e      	beq.n	800e222 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10a      	bne.n	800e222 <tcp_write+0x616>
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e210:	2b00      	cmp	r3, #0
 800e212:	d106      	bne.n	800e222 <tcp_write+0x616>
 800e214:	4b2c      	ldr	r3, [pc, #176]	; (800e2c8 <tcp_write+0x6bc>)
 800e216:	f240 3212 	movw	r2, #786	; 0x312
 800e21a:	492c      	ldr	r1, [pc, #176]	; (800e2cc <tcp_write+0x6c0>)
 800e21c:	482c      	ldr	r0, [pc, #176]	; (800e2d0 <tcp_write+0x6c4>)
 800e21e:	f004 f991 	bl	8012544 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e224:	2b00      	cmp	r3, #0
 800e226:	d016      	beq.n	800e256 <tcp_write+0x64a>
 800e228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d012      	beq.n	800e256 <tcp_write+0x64a>
 800e230:	797b      	ldrb	r3, [r7, #5]
 800e232:	f003 0302 	and.w	r3, r3, #2
 800e236:	2b00      	cmp	r3, #0
 800e238:	d10d      	bne.n	800e256 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	899b      	ldrh	r3, [r3, #12]
 800e240:	b29c      	uxth	r4, r3
 800e242:	2008      	movs	r0, #8
 800e244:	f7f9 fb7a 	bl	800793c <lwip_htons>
 800e248:	4603      	mov	r3, r0
 800e24a:	461a      	mov	r2, r3
 800e24c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	4322      	orrs	r2, r4
 800e252:	b292      	uxth	r2, r2
 800e254:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e256:	2300      	movs	r3, #0
 800e258:	e031      	b.n	800e2be <tcp_write+0x6b2>
          goto memerr;
 800e25a:	bf00      	nop
 800e25c:	e006      	b.n	800e26c <tcp_write+0x660>
            goto memerr;
 800e25e:	bf00      	nop
 800e260:	e004      	b.n	800e26c <tcp_write+0x660>
        goto memerr;
 800e262:	bf00      	nop
 800e264:	e002      	b.n	800e26c <tcp_write+0x660>
        goto memerr;
 800e266:	bf00      	nop
 800e268:	e000      	b.n	800e26c <tcp_write+0x660>
      goto memerr;
 800e26a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	8b5b      	ldrh	r3, [r3, #26]
 800e270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e274:	b29a      	uxth	r2, r3
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e27a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d002      	beq.n	800e286 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800e280:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e282:	f7fa ff71 	bl	8009168 <pbuf_free>
  }
  if (queue != NULL) {
 800e286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <tcp_write+0x686>
    tcp_segs_free(queue);
 800e28c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e28e:	f7fc fb83 	bl	800a998 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d00e      	beq.n	800e2ba <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10a      	bne.n	800e2ba <tcp_write+0x6ae>
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d106      	bne.n	800e2ba <tcp_write+0x6ae>
 800e2ac:	4b06      	ldr	r3, [pc, #24]	; (800e2c8 <tcp_write+0x6bc>)
 800e2ae:	f240 3227 	movw	r2, #807	; 0x327
 800e2b2:	4906      	ldr	r1, [pc, #24]	; (800e2cc <tcp_write+0x6c0>)
 800e2b4:	4806      	ldr	r0, [pc, #24]	; (800e2d0 <tcp_write+0x6c4>)
 800e2b6:	f004 f945 	bl	8012544 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e2ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	375c      	adds	r7, #92	; 0x5c
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd90      	pop	{r4, r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	080151bc 	.word	0x080151bc
 800e2cc:	08015530 	.word	0x08015530
 800e2d0:	08015210 	.word	0x08015210

0800e2d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e2d4:	b590      	push	{r4, r7, lr}
 800e2d6:	b08b      	sub	sp, #44	; 0x2c
 800e2d8:	af02      	add	r7, sp, #8
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	61fb      	str	r3, [r7, #28]
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d106      	bne.n	800e300 <tcp_split_unsent_seg+0x2c>
 800e2f2:	4b95      	ldr	r3, [pc, #596]	; (800e548 <tcp_split_unsent_seg+0x274>)
 800e2f4:	f240 324b 	movw	r2, #843	; 0x34b
 800e2f8:	4994      	ldr	r1, [pc, #592]	; (800e54c <tcp_split_unsent_seg+0x278>)
 800e2fa:	4895      	ldr	r0, [pc, #596]	; (800e550 <tcp_split_unsent_seg+0x27c>)
 800e2fc:	f004 f922 	bl	8012544 <iprintf>

  useg = pcb->unsent;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e304:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d102      	bne.n	800e312 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e30c:	f04f 33ff 	mov.w	r3, #4294967295
 800e310:	e116      	b.n	800e540 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e312:	887b      	ldrh	r3, [r7, #2]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d109      	bne.n	800e32c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e318:	4b8b      	ldr	r3, [pc, #556]	; (800e548 <tcp_split_unsent_seg+0x274>)
 800e31a:	f240 3253 	movw	r2, #851	; 0x353
 800e31e:	498d      	ldr	r1, [pc, #564]	; (800e554 <tcp_split_unsent_seg+0x280>)
 800e320:	488b      	ldr	r0, [pc, #556]	; (800e550 <tcp_split_unsent_seg+0x27c>)
 800e322:	f004 f90f 	bl	8012544 <iprintf>
    return ERR_VAL;
 800e326:	f06f 0305 	mvn.w	r3, #5
 800e32a:	e109      	b.n	800e540 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	891b      	ldrh	r3, [r3, #8]
 800e330:	887a      	ldrh	r2, [r7, #2]
 800e332:	429a      	cmp	r2, r3
 800e334:	d301      	bcc.n	800e33a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e336:	2300      	movs	r3, #0
 800e338:	e102      	b.n	800e540 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e33e:	887a      	ldrh	r2, [r7, #2]
 800e340:	429a      	cmp	r2, r3
 800e342:	d906      	bls.n	800e352 <tcp_split_unsent_seg+0x7e>
 800e344:	4b80      	ldr	r3, [pc, #512]	; (800e548 <tcp_split_unsent_seg+0x274>)
 800e346:	f240 325b 	movw	r2, #859	; 0x35b
 800e34a:	4983      	ldr	r1, [pc, #524]	; (800e558 <tcp_split_unsent_seg+0x284>)
 800e34c:	4880      	ldr	r0, [pc, #512]	; (800e550 <tcp_split_unsent_seg+0x27c>)
 800e34e:	f004 f8f9 	bl	8012544 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	891b      	ldrh	r3, [r3, #8]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d106      	bne.n	800e368 <tcp_split_unsent_seg+0x94>
 800e35a:	4b7b      	ldr	r3, [pc, #492]	; (800e548 <tcp_split_unsent_seg+0x274>)
 800e35c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e360:	497e      	ldr	r1, [pc, #504]	; (800e55c <tcp_split_unsent_seg+0x288>)
 800e362:	487b      	ldr	r0, [pc, #492]	; (800e550 <tcp_split_unsent_seg+0x27c>)
 800e364:	f004 f8ee 	bl	8012544 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	7a9b      	ldrb	r3, [r3, #10]
 800e36c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	b2db      	uxtb	r3, r3
 800e374:	f003 0304 	and.w	r3, r3, #4
 800e378:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	891a      	ldrh	r2, [r3, #8]
 800e37e:	887b      	ldrh	r3, [r7, #2]
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e384:	7bbb      	ldrb	r3, [r7, #14]
 800e386:	b29a      	uxth	r2, r3
 800e388:	89bb      	ldrh	r3, [r7, #12]
 800e38a:	4413      	add	r3, r2
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e392:	4619      	mov	r1, r3
 800e394:	2036      	movs	r0, #54	; 0x36
 800e396:	f7fa fc03 	bl	8008ba0 <pbuf_alloc>
 800e39a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f000 80b7 	beq.w	800e512 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	891a      	ldrh	r2, [r3, #8]
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	891b      	ldrh	r3, [r3, #8]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	b29a      	uxth	r2, r3
 800e3b2:	887b      	ldrh	r3, [r7, #2]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	6858      	ldr	r0, [r3, #4]
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	685a      	ldr	r2, [r3, #4]
 800e3c0:	7bbb      	ldrb	r3, [r7, #14]
 800e3c2:	18d1      	adds	r1, r2, r3
 800e3c4:	897b      	ldrh	r3, [r7, #10]
 800e3c6:	89ba      	ldrh	r2, [r7, #12]
 800e3c8:	f7fb f8b8 	bl	800953c <pbuf_copy_partial>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	89bb      	ldrh	r3, [r7, #12]
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	f040 809f 	bne.w	800e516 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	899b      	ldrh	r3, [r3, #12]
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7f9 faab 	bl	800793c <lwip_htons>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e3f4:	7efb      	ldrb	r3, [r7, #27]
 800e3f6:	f003 0308 	and.w	r3, r3, #8
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d007      	beq.n	800e40e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e3fe:	7efb      	ldrb	r3, [r7, #27]
 800e400:	f023 0308 	bic.w	r3, r3, #8
 800e404:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e406:	7ebb      	ldrb	r3, [r7, #26]
 800e408:	f043 0308 	orr.w	r3, r3, #8
 800e40c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e40e:	7efb      	ldrb	r3, [r7, #27]
 800e410:	f003 0301 	and.w	r3, r3, #1
 800e414:	2b00      	cmp	r3, #0
 800e416:	d007      	beq.n	800e428 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e418:	7efb      	ldrb	r3, [r7, #27]
 800e41a:	f023 0301 	bic.w	r3, r3, #1
 800e41e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e420:	7ebb      	ldrb	r3, [r7, #26]
 800e422:	f043 0301 	orr.w	r3, r3, #1
 800e426:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f9 fa99 	bl	8007966 <lwip_htonl>
 800e434:	4602      	mov	r2, r0
 800e436:	887b      	ldrh	r3, [r7, #2]
 800e438:	18d1      	adds	r1, r2, r3
 800e43a:	7eba      	ldrb	r2, [r7, #26]
 800e43c:	7bfb      	ldrb	r3, [r7, #15]
 800e43e:	9300      	str	r3, [sp, #0]
 800e440:	460b      	mov	r3, r1
 800e442:	6939      	ldr	r1, [r7, #16]
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7ff fa4f 	bl	800d8e8 <tcp_create_segment>
 800e44a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d063      	beq.n	800e51a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	4618      	mov	r0, r3
 800e458:	f7fa ff0e 	bl	8009278 <pbuf_clen>
 800e45c:	4603      	mov	r3, r0
 800e45e:	461a      	mov	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e466:	1a9b      	subs	r3, r3, r2
 800e468:	b29a      	uxth	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	6858      	ldr	r0, [r3, #4]
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	891a      	ldrh	r2, [r3, #8]
 800e47a:	89bb      	ldrh	r3, [r7, #12]
 800e47c:	1ad3      	subs	r3, r2, r3
 800e47e:	b29b      	uxth	r3, r3
 800e480:	4619      	mov	r1, r3
 800e482:	f7fa fceb 	bl	8008e5c <pbuf_realloc>
  useg->len -= remainder;
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	891a      	ldrh	r2, [r3, #8]
 800e48a:	89bb      	ldrh	r3, [r7, #12]
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	b29a      	uxth	r2, r3
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	899b      	ldrh	r3, [r3, #12]
 800e49a:	b29c      	uxth	r4, r3
 800e49c:	7efb      	ldrb	r3, [r7, #27]
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7f9 fa4b 	bl	800793c <lwip_htons>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	4322      	orrs	r2, r4
 800e4b0:	b292      	uxth	r2, r2
 800e4b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fa fedd 	bl	8009278 <pbuf_clen>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4c8:	4413      	add	r3, r2
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fa fece 	bl	8009278 <pbuf_clen>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	461a      	mov	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4e6:	4413      	add	r3, r2
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	69fa      	ldr	r2, [r7, #28]
 800e4fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d103      	bne.n	800e50e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	e016      	b.n	800e540 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e512:	bf00      	nop
 800e514:	e002      	b.n	800e51c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e516:	bf00      	nop
 800e518:	e000      	b.n	800e51c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e51a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d006      	beq.n	800e530 <tcp_split_unsent_seg+0x25c>
 800e522:	4b09      	ldr	r3, [pc, #36]	; (800e548 <tcp_split_unsent_seg+0x274>)
 800e524:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e528:	490d      	ldr	r1, [pc, #52]	; (800e560 <tcp_split_unsent_seg+0x28c>)
 800e52a:	4809      	ldr	r0, [pc, #36]	; (800e550 <tcp_split_unsent_seg+0x27c>)
 800e52c:	f004 f80a 	bl	8012544 <iprintf>
  if (p != NULL) {
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d002      	beq.n	800e53c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e536:	6938      	ldr	r0, [r7, #16]
 800e538:	f7fa fe16 	bl	8009168 <pbuf_free>
  }

  return ERR_MEM;
 800e53c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e540:	4618      	mov	r0, r3
 800e542:	3724      	adds	r7, #36	; 0x24
 800e544:	46bd      	mov	sp, r7
 800e546:	bd90      	pop	{r4, r7, pc}
 800e548:	080151bc 	.word	0x080151bc
 800e54c:	08015550 	.word	0x08015550
 800e550:	08015210 	.word	0x08015210
 800e554:	08015574 	.word	0x08015574
 800e558:	08015598 	.word	0x08015598
 800e55c:	080155a8 	.word	0x080155a8
 800e560:	080155b8 	.word	0x080155b8

0800e564 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e564:	b590      	push	{r4, r7, lr}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d106      	bne.n	800e580 <tcp_send_fin+0x1c>
 800e572:	4b21      	ldr	r3, [pc, #132]	; (800e5f8 <tcp_send_fin+0x94>)
 800e574:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e578:	4920      	ldr	r1, [pc, #128]	; (800e5fc <tcp_send_fin+0x98>)
 800e57a:	4821      	ldr	r0, [pc, #132]	; (800e600 <tcp_send_fin+0x9c>)
 800e57c:	f003 ffe2 	bl	8012544 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e584:	2b00      	cmp	r3, #0
 800e586:	d02e      	beq.n	800e5e6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e58c:	60fb      	str	r3, [r7, #12]
 800e58e:	e002      	b.n	800e596 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1f8      	bne.n	800e590 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	899b      	ldrh	r3, [r3, #12]
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7f9 f9c8 	bl	800793c <lwip_htons>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	f003 0307 	and.w	r3, r3, #7
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d116      	bne.n	800e5e6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	899b      	ldrh	r3, [r3, #12]
 800e5be:	b29c      	uxth	r4, r3
 800e5c0:	2001      	movs	r0, #1
 800e5c2:	f7f9 f9bb 	bl	800793c <lwip_htons>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	4322      	orrs	r2, r4
 800e5d0:	b292      	uxth	r2, r2
 800e5d2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	8b5b      	ldrh	r3, [r3, #26]
 800e5d8:	f043 0320 	orr.w	r3, r3, #32
 800e5dc:	b29a      	uxth	r2, r3
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	e004      	b.n	800e5f0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e5e6:	2101      	movs	r1, #1
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 f80b 	bl	800e604 <tcp_enqueue_flags>
 800e5ee:	4603      	mov	r3, r0
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3714      	adds	r7, #20
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd90      	pop	{r4, r7, pc}
 800e5f8:	080151bc 	.word	0x080151bc
 800e5fc:	080155c4 	.word	0x080155c4
 800e600:	08015210 	.word	0x08015210

0800e604 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b08a      	sub	sp, #40	; 0x28
 800e608:	af02      	add	r7, sp, #8
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	460b      	mov	r3, r1
 800e60e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e610:	2300      	movs	r3, #0
 800e612:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e614:	2300      	movs	r3, #0
 800e616:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e618:	78fb      	ldrb	r3, [r7, #3]
 800e61a:	f003 0303 	and.w	r3, r3, #3
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d106      	bne.n	800e630 <tcp_enqueue_flags+0x2c>
 800e622:	4b67      	ldr	r3, [pc, #412]	; (800e7c0 <tcp_enqueue_flags+0x1bc>)
 800e624:	f240 4211 	movw	r2, #1041	; 0x411
 800e628:	4966      	ldr	r1, [pc, #408]	; (800e7c4 <tcp_enqueue_flags+0x1c0>)
 800e62a:	4867      	ldr	r0, [pc, #412]	; (800e7c8 <tcp_enqueue_flags+0x1c4>)
 800e62c:	f003 ff8a 	bl	8012544 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d106      	bne.n	800e644 <tcp_enqueue_flags+0x40>
 800e636:	4b62      	ldr	r3, [pc, #392]	; (800e7c0 <tcp_enqueue_flags+0x1bc>)
 800e638:	f240 4213 	movw	r2, #1043	; 0x413
 800e63c:	4963      	ldr	r1, [pc, #396]	; (800e7cc <tcp_enqueue_flags+0x1c8>)
 800e63e:	4862      	ldr	r0, [pc, #392]	; (800e7c8 <tcp_enqueue_flags+0x1c4>)
 800e640:	f003 ff80 	bl	8012544 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e644:	78fb      	ldrb	r3, [r7, #3]
 800e646:	f003 0302 	and.w	r3, r3, #2
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d001      	beq.n	800e652 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e64e:	2301      	movs	r3, #1
 800e650:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e652:	7ffb      	ldrb	r3, [r7, #31]
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	b2db      	uxtb	r3, r3
 800e658:	f003 0304 	and.w	r3, r3, #4
 800e65c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
 800e660:	b29b      	uxth	r3, r3
 800e662:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e666:	4619      	mov	r1, r3
 800e668:	2036      	movs	r0, #54	; 0x36
 800e66a:	f7fa fa99 	bl	8008ba0 <pbuf_alloc>
 800e66e:	6138      	str	r0, [r7, #16]
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d109      	bne.n	800e68a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	8b5b      	ldrh	r3, [r3, #26]
 800e67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e67e:	b29a      	uxth	r2, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e684:	f04f 33ff 	mov.w	r3, #4294967295
 800e688:	e095      	b.n	800e7b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	895a      	ldrh	r2, [r3, #10]
 800e68e:	7dfb      	ldrb	r3, [r7, #23]
 800e690:	b29b      	uxth	r3, r3
 800e692:	429a      	cmp	r2, r3
 800e694:	d206      	bcs.n	800e6a4 <tcp_enqueue_flags+0xa0>
 800e696:	4b4a      	ldr	r3, [pc, #296]	; (800e7c0 <tcp_enqueue_flags+0x1bc>)
 800e698:	f240 4239 	movw	r2, #1081	; 0x439
 800e69c:	494c      	ldr	r1, [pc, #304]	; (800e7d0 <tcp_enqueue_flags+0x1cc>)
 800e69e:	484a      	ldr	r0, [pc, #296]	; (800e7c8 <tcp_enqueue_flags+0x1c4>)
 800e6a0:	f003 ff50 	bl	8012544 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e6a8:	78fa      	ldrb	r2, [r7, #3]
 800e6aa:	7ffb      	ldrb	r3, [r7, #31]
 800e6ac:	9300      	str	r3, [sp, #0]
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	6939      	ldr	r1, [r7, #16]
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7ff f918 	bl	800d8e8 <tcp_create_segment>
 800e6b8:	60f8      	str	r0, [r7, #12]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d109      	bne.n	800e6d4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	8b5b      	ldrh	r3, [r3, #26]
 800e6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d2:	e070      	b.n	800e7b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	f003 0303 	and.w	r3, r3, #3
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d006      	beq.n	800e6ee <tcp_enqueue_flags+0xea>
 800e6e0:	4b37      	ldr	r3, [pc, #220]	; (800e7c0 <tcp_enqueue_flags+0x1bc>)
 800e6e2:	f240 4242 	movw	r2, #1090	; 0x442
 800e6e6:	493b      	ldr	r1, [pc, #236]	; (800e7d4 <tcp_enqueue_flags+0x1d0>)
 800e6e8:	4837      	ldr	r0, [pc, #220]	; (800e7c8 <tcp_enqueue_flags+0x1c4>)
 800e6ea:	f003 ff2b 	bl	8012544 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	891b      	ldrh	r3, [r3, #8]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d006      	beq.n	800e704 <tcp_enqueue_flags+0x100>
 800e6f6:	4b32      	ldr	r3, [pc, #200]	; (800e7c0 <tcp_enqueue_flags+0x1bc>)
 800e6f8:	f240 4243 	movw	r2, #1091	; 0x443
 800e6fc:	4936      	ldr	r1, [pc, #216]	; (800e7d8 <tcp_enqueue_flags+0x1d4>)
 800e6fe:	4832      	ldr	r0, [pc, #200]	; (800e7c8 <tcp_enqueue_flags+0x1c4>)
 800e700:	f003 ff20 	bl	8012544 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d103      	bne.n	800e714 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	68fa      	ldr	r2, [r7, #12]
 800e710:	66da      	str	r2, [r3, #108]	; 0x6c
 800e712:	e00d      	b.n	800e730 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e718:	61bb      	str	r3, [r7, #24]
 800e71a:	e002      	b.n	800e722 <tcp_enqueue_flags+0x11e>
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	61bb      	str	r3, [r7, #24]
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1f8      	bne.n	800e71c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e738:	78fb      	ldrb	r3, [r7, #3]
 800e73a:	f003 0302 	and.w	r3, r3, #2
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d104      	bne.n	800e74c <tcp_enqueue_flags+0x148>
 800e742:	78fb      	ldrb	r3, [r7, #3]
 800e744:	f003 0301 	and.w	r3, r3, #1
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d004      	beq.n	800e756 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e750:	1c5a      	adds	r2, r3, #1
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e756:	78fb      	ldrb	r3, [r7, #3]
 800e758:	f003 0301 	and.w	r3, r3, #1
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d006      	beq.n	800e76e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	8b5b      	ldrh	r3, [r3, #26]
 800e764:	f043 0320 	orr.w	r3, r3, #32
 800e768:	b29a      	uxth	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	4618      	mov	r0, r3
 800e774:	f7fa fd80 	bl	8009278 <pbuf_clen>
 800e778:	4603      	mov	r3, r0
 800e77a:	461a      	mov	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e782:	4413      	add	r3, r2
 800e784:	b29a      	uxth	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00e      	beq.n	800e7b4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d10a      	bne.n	800e7b4 <tcp_enqueue_flags+0x1b0>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d106      	bne.n	800e7b4 <tcp_enqueue_flags+0x1b0>
 800e7a6:	4b06      	ldr	r3, [pc, #24]	; (800e7c0 <tcp_enqueue_flags+0x1bc>)
 800e7a8:	f240 4265 	movw	r2, #1125	; 0x465
 800e7ac:	490b      	ldr	r1, [pc, #44]	; (800e7dc <tcp_enqueue_flags+0x1d8>)
 800e7ae:	4806      	ldr	r0, [pc, #24]	; (800e7c8 <tcp_enqueue_flags+0x1c4>)
 800e7b0:	f003 fec8 	bl	8012544 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3720      	adds	r7, #32
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	080151bc 	.word	0x080151bc
 800e7c4:	080155e0 	.word	0x080155e0
 800e7c8:	08015210 	.word	0x08015210
 800e7cc:	08015638 	.word	0x08015638
 800e7d0:	08015658 	.word	0x08015658
 800e7d4:	08015694 	.word	0x08015694
 800e7d8:	080156ac 	.word	0x080156ac
 800e7dc:	080156d8 	.word	0x080156d8

0800e7e0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e7e0:	b5b0      	push	{r4, r5, r7, lr}
 800e7e2:	b08a      	sub	sp, #40	; 0x28
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d106      	bne.n	800e7fc <tcp_output+0x1c>
 800e7ee:	4b8a      	ldr	r3, [pc, #552]	; (800ea18 <tcp_output+0x238>)
 800e7f0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e7f4:	4989      	ldr	r1, [pc, #548]	; (800ea1c <tcp_output+0x23c>)
 800e7f6:	488a      	ldr	r0, [pc, #552]	; (800ea20 <tcp_output+0x240>)
 800e7f8:	f003 fea4 	bl	8012544 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	7d1b      	ldrb	r3, [r3, #20]
 800e800:	2b01      	cmp	r3, #1
 800e802:	d106      	bne.n	800e812 <tcp_output+0x32>
 800e804:	4b84      	ldr	r3, [pc, #528]	; (800ea18 <tcp_output+0x238>)
 800e806:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e80a:	4986      	ldr	r1, [pc, #536]	; (800ea24 <tcp_output+0x244>)
 800e80c:	4884      	ldr	r0, [pc, #528]	; (800ea20 <tcp_output+0x240>)
 800e80e:	f003 fe99 	bl	8012544 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e812:	4b85      	ldr	r3, [pc, #532]	; (800ea28 <tcp_output+0x248>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d101      	bne.n	800e820 <tcp_output+0x40>
    return ERR_OK;
 800e81c:	2300      	movs	r3, #0
 800e81e:	e1ce      	b.n	800ebbe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e82c:	4293      	cmp	r3, r2
 800e82e:	bf28      	it	cs
 800e830:	4613      	movcs	r3, r2
 800e832:	b29b      	uxth	r3, r3
 800e834:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e83a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d10b      	bne.n	800e85a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	8b5b      	ldrh	r3, [r3, #26]
 800e846:	f003 0302 	and.w	r3, r3, #2
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f000 81aa 	beq.w	800eba4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 fdcb 	bl	800f3ec <tcp_send_empty_ack>
 800e856:	4603      	mov	r3, r0
 800e858:	e1b1      	b.n	800ebbe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e85a:	6879      	ldr	r1, [r7, #4]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	3304      	adds	r3, #4
 800e860:	461a      	mov	r2, r3
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7ff f824 	bl	800d8b0 <tcp_route>
 800e868:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d102      	bne.n	800e876 <tcp_output+0x96>
    return ERR_RTE;
 800e870:	f06f 0303 	mvn.w	r3, #3
 800e874:	e1a3      	b.n	800ebbe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d003      	beq.n	800e884 <tcp_output+0xa4>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d111      	bne.n	800e8a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d002      	beq.n	800e890 <tcp_output+0xb0>
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	3304      	adds	r3, #4
 800e88e:	e000      	b.n	800e892 <tcp_output+0xb2>
 800e890:	2300      	movs	r3, #0
 800e892:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d102      	bne.n	800e8a0 <tcp_output+0xc0>
      return ERR_RTE;
 800e89a:	f06f 0303 	mvn.w	r3, #3
 800e89e:	e18e      	b.n	800ebbe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8aa:	68db      	ldr	r3, [r3, #12]
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7f9 f859 	bl	8007966 <lwip_htonl>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ba:	1ad3      	subs	r3, r2, r3
 800e8bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8be:	8912      	ldrh	r2, [r2, #8]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	69ba      	ldr	r2, [r7, #24]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d227      	bcs.n	800e918 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d114      	bne.n	800e900 <tcp_output+0x120>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d110      	bne.n	800e900 <tcp_output+0x120>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d10b      	bne.n	800e900 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	8b5b      	ldrh	r3, [r3, #26]
 800e904:	f003 0302 	and.w	r3, r3, #2
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f000 814d 	beq.w	800eba8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 fd6c 	bl	800f3ec <tcp_send_empty_ack>
 800e914:	4603      	mov	r3, r0
 800e916:	e152      	b.n	800ebbe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e924:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e926:	6a3b      	ldr	r3, [r7, #32]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f000 811c 	beq.w	800eb66 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e92e:	e002      	b.n	800e936 <tcp_output+0x156>
 800e930:	6a3b      	ldr	r3, [r7, #32]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	623b      	str	r3, [r7, #32]
 800e936:	6a3b      	ldr	r3, [r7, #32]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d1f8      	bne.n	800e930 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e93e:	e112      	b.n	800eb66 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	899b      	ldrh	r3, [r3, #12]
 800e946:	b29b      	uxth	r3, r3
 800e948:	4618      	mov	r0, r3
 800e94a:	f7f8 fff7 	bl	800793c <lwip_htons>
 800e94e:	4603      	mov	r3, r0
 800e950:	b2db      	uxtb	r3, r3
 800e952:	f003 0304 	and.w	r3, r3, #4
 800e956:	2b00      	cmp	r3, #0
 800e958:	d006      	beq.n	800e968 <tcp_output+0x188>
 800e95a:	4b2f      	ldr	r3, [pc, #188]	; (800ea18 <tcp_output+0x238>)
 800e95c:	f240 5236 	movw	r2, #1334	; 0x536
 800e960:	4932      	ldr	r1, [pc, #200]	; (800ea2c <tcp_output+0x24c>)
 800e962:	482f      	ldr	r0, [pc, #188]	; (800ea20 <tcp_output+0x240>)
 800e964:	f003 fdee 	bl	8012544 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d01f      	beq.n	800e9b0 <tcp_output+0x1d0>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	8b5b      	ldrh	r3, [r3, #26]
 800e974:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d119      	bne.n	800e9b0 <tcp_output+0x1d0>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00b      	beq.n	800e99c <tcp_output+0x1bc>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d110      	bne.n	800e9b0 <tcp_output+0x1d0>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e992:	891a      	ldrh	r2, [r3, #8]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e998:	429a      	cmp	r2, r3
 800e99a:	d209      	bcs.n	800e9b0 <tcp_output+0x1d0>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d004      	beq.n	800e9b0 <tcp_output+0x1d0>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9ac:	2b08      	cmp	r3, #8
 800e9ae:	d901      	bls.n	800e9b4 <tcp_output+0x1d4>
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	e000      	b.n	800e9b6 <tcp_output+0x1d6>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d106      	bne.n	800e9c8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	8b5b      	ldrh	r3, [r3, #26]
 800e9be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f000 80e4 	beq.w	800eb90 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	7d1b      	ldrb	r3, [r3, #20]
 800e9cc:	2b02      	cmp	r3, #2
 800e9ce:	d00d      	beq.n	800e9ec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	899b      	ldrh	r3, [r3, #12]
 800e9d6:	b29c      	uxth	r4, r3
 800e9d8:	2010      	movs	r0, #16
 800e9da:	f7f8 ffaf 	bl	800793c <lwip_htons>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	4322      	orrs	r2, r4
 800e9e8:	b292      	uxth	r2, r2
 800e9ea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e9ec:	697a      	ldr	r2, [r7, #20]
 800e9ee:	6879      	ldr	r1, [r7, #4]
 800e9f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9f2:	f000 f909 	bl	800ec08 <tcp_output_segment>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d016      	beq.n	800ea30 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	8b5b      	ldrh	r3, [r3, #26]
 800ea06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	835a      	strh	r2, [r3, #26]
      return err;
 800ea10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea14:	e0d3      	b.n	800ebbe <tcp_output+0x3de>
 800ea16:	bf00      	nop
 800ea18:	080151bc 	.word	0x080151bc
 800ea1c:	08015700 	.word	0x08015700
 800ea20:	08015210 	.word	0x08015210
 800ea24:	08015718 	.word	0x08015718
 800ea28:	20008080 	.word	0x20008080
 800ea2c:	08015740 	.word	0x08015740
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ea30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	7d1b      	ldrb	r3, [r3, #20]
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d006      	beq.n	800ea4e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	8b5b      	ldrh	r3, [r3, #26]
 800ea44:	f023 0303 	bic.w	r3, r3, #3
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ea4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea50:	68db      	ldr	r3, [r3, #12]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f8 ff86 	bl	8007966 <lwip_htonl>
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5e:	891b      	ldrh	r3, [r3, #8]
 800ea60:	461d      	mov	r5, r3
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	899b      	ldrh	r3, [r3, #12]
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7f8 ff66 	bl	800793c <lwip_htons>
 800ea70:	4603      	mov	r3, r0
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	f003 0303 	and.w	r3, r3, #3
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d001      	beq.n	800ea80 <tcp_output+0x2a0>
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e000      	b.n	800ea82 <tcp_output+0x2a2>
 800ea80:	2300      	movs	r3, #0
 800ea82:	442b      	add	r3, r5
 800ea84:	4423      	add	r3, r4
 800ea86:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	da02      	bge.n	800ea9a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	68ba      	ldr	r2, [r7, #8]
 800ea98:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9c:	891b      	ldrh	r3, [r3, #8]
 800ea9e:	461c      	mov	r4, r3
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	899b      	ldrh	r3, [r3, #12]
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7f8 ff47 	bl	800793c <lwip_htons>
 800eaae:	4603      	mov	r3, r0
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	f003 0303 	and.w	r3, r3, #3
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d001      	beq.n	800eabe <tcp_output+0x2de>
 800eaba:	2301      	movs	r3, #1
 800eabc:	e000      	b.n	800eac0 <tcp_output+0x2e0>
 800eabe:	2300      	movs	r3, #0
 800eac0:	4423      	add	r3, r4
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d049      	beq.n	800eb5a <tcp_output+0x37a>
      seg->next = NULL;
 800eac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac8:	2200      	movs	r2, #0
 800eaca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d105      	bne.n	800eae0 <tcp_output+0x300>
        pcb->unacked = seg;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ead8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800eada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eadc:	623b      	str	r3, [r7, #32]
 800eade:	e03f      	b.n	800eb60 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7f8 ff3d 	bl	8007966 <lwip_htonl>
 800eaec:	4604      	mov	r4, r0
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7f8 ff36 	bl	8007966 <lwip_htonl>
 800eafa:	4603      	mov	r3, r0
 800eafc:	1ae3      	subs	r3, r4, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	da24      	bge.n	800eb4c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	3370      	adds	r3, #112	; 0x70
 800eb06:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800eb08:	e002      	b.n	800eb10 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d011      	beq.n	800eb3c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	68db      	ldr	r3, [r3, #12]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f8 ff20 	bl	8007966 <lwip_htonl>
 800eb26:	4604      	mov	r4, r0
 800eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7f8 ff19 	bl	8007966 <lwip_htonl>
 800eb34:	4603      	mov	r3, r0
 800eb36:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	dbe6      	blt.n	800eb0a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb42:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb48:	601a      	str	r2, [r3, #0]
 800eb4a:	e009      	b.n	800eb60 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800eb4c:	6a3b      	ldr	r3, [r7, #32]
 800eb4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb50:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800eb52:	6a3b      	ldr	r3, [r7, #32]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	623b      	str	r3, [r7, #32]
 800eb58:	e002      	b.n	800eb60 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800eb5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb5c:	f7fb ff31 	bl	800a9c2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb64:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800eb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d012      	beq.n	800eb92 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7f8 fef7 	bl	8007966 <lwip_htonl>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb7e:	1ad3      	subs	r3, r2, r3
 800eb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb82:	8912      	ldrh	r2, [r2, #8]
 800eb84:	4413      	add	r3, r2
  while (seg != NULL &&
 800eb86:	69ba      	ldr	r2, [r7, #24]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	f4bf aed9 	bcs.w	800e940 <tcp_output+0x160>
 800eb8e:	e000      	b.n	800eb92 <tcp_output+0x3b2>
      break;
 800eb90:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d108      	bne.n	800ebac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800eba2:	e004      	b.n	800ebae <tcp_output+0x3ce>
    goto output_done;
 800eba4:	bf00      	nop
 800eba6:	e002      	b.n	800ebae <tcp_output+0x3ce>
    goto output_done;
 800eba8:	bf00      	nop
 800ebaa:	e000      	b.n	800ebae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ebac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	8b5b      	ldrh	r3, [r3, #26]
 800ebb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3728      	adds	r7, #40	; 0x28
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bdb0      	pop	{r4, r5, r7, pc}
 800ebc6:	bf00      	nop

0800ebc8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d106      	bne.n	800ebe4 <tcp_output_segment_busy+0x1c>
 800ebd6:	4b09      	ldr	r3, [pc, #36]	; (800ebfc <tcp_output_segment_busy+0x34>)
 800ebd8:	f240 529a 	movw	r2, #1434	; 0x59a
 800ebdc:	4908      	ldr	r1, [pc, #32]	; (800ec00 <tcp_output_segment_busy+0x38>)
 800ebde:	4809      	ldr	r0, [pc, #36]	; (800ec04 <tcp_output_segment_busy+0x3c>)
 800ebe0:	f003 fcb0 	bl	8012544 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	7b9b      	ldrb	r3, [r3, #14]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d001      	beq.n	800ebf2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e000      	b.n	800ebf4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ebf2:	2300      	movs	r3, #0
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	080151bc 	.word	0x080151bc
 800ec00:	08015758 	.word	0x08015758
 800ec04:	08015210 	.word	0x08015210

0800ec08 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ec08:	b5b0      	push	{r4, r5, r7, lr}
 800ec0a:	b08c      	sub	sp, #48	; 0x30
 800ec0c:	af04      	add	r7, sp, #16
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d106      	bne.n	800ec28 <tcp_output_segment+0x20>
 800ec1a:	4b63      	ldr	r3, [pc, #396]	; (800eda8 <tcp_output_segment+0x1a0>)
 800ec1c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ec20:	4962      	ldr	r1, [pc, #392]	; (800edac <tcp_output_segment+0x1a4>)
 800ec22:	4863      	ldr	r0, [pc, #396]	; (800edb0 <tcp_output_segment+0x1a8>)
 800ec24:	f003 fc8e 	bl	8012544 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d106      	bne.n	800ec3c <tcp_output_segment+0x34>
 800ec2e:	4b5e      	ldr	r3, [pc, #376]	; (800eda8 <tcp_output_segment+0x1a0>)
 800ec30:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ec34:	495f      	ldr	r1, [pc, #380]	; (800edb4 <tcp_output_segment+0x1ac>)
 800ec36:	485e      	ldr	r0, [pc, #376]	; (800edb0 <tcp_output_segment+0x1a8>)
 800ec38:	f003 fc84 	bl	8012544 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d106      	bne.n	800ec50 <tcp_output_segment+0x48>
 800ec42:	4b59      	ldr	r3, [pc, #356]	; (800eda8 <tcp_output_segment+0x1a0>)
 800ec44:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ec48:	495b      	ldr	r1, [pc, #364]	; (800edb8 <tcp_output_segment+0x1b0>)
 800ec4a:	4859      	ldr	r0, [pc, #356]	; (800edb0 <tcp_output_segment+0x1a8>)
 800ec4c:	f003 fc7a 	bl	8012544 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f7ff ffb9 	bl	800ebc8 <tcp_output_segment_busy>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d001      	beq.n	800ec60 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	e09f      	b.n	800eda0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	68dc      	ldr	r4, [r3, #12]
 800ec68:	4610      	mov	r0, r2
 800ec6a:	f7f8 fe7c 	bl	8007966 <lwip_htonl>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	68dc      	ldr	r4, [r3, #12]
 800ec7a:	4610      	mov	r0, r2
 800ec7c:	f7f8 fe5e 	bl	800793c <lwip_htons>
 800ec80:	4603      	mov	r3, r0
 800ec82:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec88:	68ba      	ldr	r2, [r7, #8]
 800ec8a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ec8c:	441a      	add	r2, r3
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	3314      	adds	r3, #20
 800ec98:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	7a9b      	ldrb	r3, [r3, #10]
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d015      	beq.n	800ecd2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	3304      	adds	r3, #4
 800ecaa:	461a      	mov	r2, r3
 800ecac:	6879      	ldr	r1, [r7, #4]
 800ecae:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ecb2:	f7fc fa33 	bl	800b11c <tcp_eff_send_mss_netif>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ecba:	8b7b      	ldrh	r3, [r7, #26]
 800ecbc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7f8 fe50 	bl	8007966 <lwip_htonl>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	601a      	str	r2, [r3, #0]
    opts += 1;
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	3304      	adds	r3, #4
 800ecd0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	da02      	bge.n	800ece2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	2200      	movs	r2, #0
 800ece0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10c      	bne.n	800ed04 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ecea:	4b34      	ldr	r3, [pc, #208]	; (800edbc <tcp_output_segment+0x1b4>)
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7f8 fe34 	bl	8007966 <lwip_htonl>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	68da      	ldr	r2, [r3, #12]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	8959      	ldrh	r1, [r3, #10]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	8b3a      	ldrh	r2, [r7, #24]
 800ed1e:	1a8a      	subs	r2, r1, r2
 800ed20:	b292      	uxth	r2, r2
 800ed22:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	8919      	ldrh	r1, [r3, #8]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	8b3a      	ldrh	r2, [r7, #24]
 800ed30:	1a8a      	subs	r2, r1, r2
 800ed32:	b292      	uxth	r2, r2
 800ed34:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	68d2      	ldr	r2, [r2, #12]
 800ed3e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	2200      	movs	r2, #0
 800ed46:	741a      	strb	r2, [r3, #16]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	f103 0214 	add.w	r2, r3, #20
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	7a9b      	ldrb	r3, [r3, #10]
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	f003 0304 	and.w	r3, r3, #4
 800ed5e:	4413      	add	r3, r2
 800ed60:	69fa      	ldr	r2, [r7, #28]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d006      	beq.n	800ed74 <tcp_output_segment+0x16c>
 800ed66:	4b10      	ldr	r3, [pc, #64]	; (800eda8 <tcp_output_segment+0x1a0>)
 800ed68:	f240 621c 	movw	r2, #1564	; 0x61c
 800ed6c:	4914      	ldr	r1, [pc, #80]	; (800edc0 <tcp_output_segment+0x1b8>)
 800ed6e:	4810      	ldr	r0, [pc, #64]	; (800edb0 <tcp_output_segment+0x1a8>)
 800ed70:	f003 fbe8 	bl	8012544 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6858      	ldr	r0, [r3, #4]
 800ed78:	68b9      	ldr	r1, [r7, #8]
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	1d1c      	adds	r4, r3, #4
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	7add      	ldrb	r5, [r3, #11]
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	7a9b      	ldrb	r3, [r3, #10]
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	9202      	str	r2, [sp, #8]
 800ed8a:	2206      	movs	r2, #6
 800ed8c:	9201      	str	r2, [sp, #4]
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	462b      	mov	r3, r5
 800ed92:	4622      	mov	r2, r4
 800ed94:	f002 fa5c 	bl	8011250 <ip4_output_if>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ed9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3720      	adds	r7, #32
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bdb0      	pop	{r4, r5, r7, pc}
 800eda8:	080151bc 	.word	0x080151bc
 800edac:	08015780 	.word	0x08015780
 800edb0:	08015210 	.word	0x08015210
 800edb4:	080157a0 	.word	0x080157a0
 800edb8:	080157c0 	.word	0x080157c0
 800edbc:	20008034 	.word	0x20008034
 800edc0:	080157e4 	.word	0x080157e4

0800edc4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800edc4:	b5b0      	push	{r4, r5, r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d106      	bne.n	800ede0 <tcp_rexmit_rto_prepare+0x1c>
 800edd2:	4b31      	ldr	r3, [pc, #196]	; (800ee98 <tcp_rexmit_rto_prepare+0xd4>)
 800edd4:	f240 6263 	movw	r2, #1635	; 0x663
 800edd8:	4930      	ldr	r1, [pc, #192]	; (800ee9c <tcp_rexmit_rto_prepare+0xd8>)
 800edda:	4831      	ldr	r0, [pc, #196]	; (800eea0 <tcp_rexmit_rto_prepare+0xdc>)
 800eddc:	f003 fbb2 	bl	8012544 <iprintf>

  if (pcb->unacked == NULL) {
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d102      	bne.n	800edee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ede8:	f06f 0305 	mvn.w	r3, #5
 800edec:	e050      	b.n	800ee90 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edf2:	60fb      	str	r3, [r7, #12]
 800edf4:	e00b      	b.n	800ee0e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f7ff fee6 	bl	800ebc8 <tcp_output_segment_busy>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d002      	beq.n	800ee08 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ee02:	f06f 0305 	mvn.w	r3, #5
 800ee06:	e043      	b.n	800ee90 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	60fb      	str	r3, [r7, #12]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1ef      	bne.n	800edf6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f7ff fed6 	bl	800ebc8 <tcp_output_segment_busy>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d002      	beq.n	800ee28 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ee22:	f06f 0305 	mvn.w	r3, #5
 800ee26:	e033      	b.n	800ee90 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	8b5b      	ldrh	r3, [r3, #26]
 800ee42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7f8 fd87 	bl	8007966 <lwip_htonl>
 800ee58:	4604      	mov	r4, r0
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	891b      	ldrh	r3, [r3, #8]
 800ee5e:	461d      	mov	r5, r3
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	899b      	ldrh	r3, [r3, #12]
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7f8 fd67 	bl	800793c <lwip_htons>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	f003 0303 	and.w	r3, r3, #3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d001      	beq.n	800ee7e <tcp_rexmit_rto_prepare+0xba>
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e000      	b.n	800ee80 <tcp_rexmit_rto_prepare+0xbc>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	442b      	add	r3, r5
 800ee82:	18e2      	adds	r2, r4, r3
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ee8e:	2300      	movs	r3, #0
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bdb0      	pop	{r4, r5, r7, pc}
 800ee98:	080151bc 	.word	0x080151bc
 800ee9c:	080157f8 	.word	0x080157f8
 800eea0:	08015210 	.word	0x08015210

0800eea4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d106      	bne.n	800eec0 <tcp_rexmit_rto_commit+0x1c>
 800eeb2:	4b0d      	ldr	r3, [pc, #52]	; (800eee8 <tcp_rexmit_rto_commit+0x44>)
 800eeb4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800eeb8:	490c      	ldr	r1, [pc, #48]	; (800eeec <tcp_rexmit_rto_commit+0x48>)
 800eeba:	480d      	ldr	r0, [pc, #52]	; (800eef0 <tcp_rexmit_rto_commit+0x4c>)
 800eebc:	f003 fb42 	bl	8012544 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eec6:	2bff      	cmp	r3, #255	; 0xff
 800eec8:	d007      	beq.n	800eeda <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eed0:	3301      	adds	r3, #1
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f7ff fc80 	bl	800e7e0 <tcp_output>
}
 800eee0:	bf00      	nop
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	080151bc 	.word	0x080151bc
 800eeec:	0801581c 	.word	0x0801581c
 800eef0:	08015210 	.word	0x08015210

0800eef4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d106      	bne.n	800ef10 <tcp_rexmit_rto+0x1c>
 800ef02:	4b0a      	ldr	r3, [pc, #40]	; (800ef2c <tcp_rexmit_rto+0x38>)
 800ef04:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ef08:	4909      	ldr	r1, [pc, #36]	; (800ef30 <tcp_rexmit_rto+0x3c>)
 800ef0a:	480a      	ldr	r0, [pc, #40]	; (800ef34 <tcp_rexmit_rto+0x40>)
 800ef0c:	f003 fb1a 	bl	8012544 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f7ff ff57 	bl	800edc4 <tcp_rexmit_rto_prepare>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d102      	bne.n	800ef22 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7ff ffc1 	bl	800eea4 <tcp_rexmit_rto_commit>
  }
}
 800ef22:	bf00      	nop
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	080151bc 	.word	0x080151bc
 800ef30:	08015840 	.word	0x08015840
 800ef34:	08015210 	.word	0x08015210

0800ef38 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ef38:	b590      	push	{r4, r7, lr}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d106      	bne.n	800ef54 <tcp_rexmit+0x1c>
 800ef46:	4b2f      	ldr	r3, [pc, #188]	; (800f004 <tcp_rexmit+0xcc>)
 800ef48:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ef4c:	492e      	ldr	r1, [pc, #184]	; (800f008 <tcp_rexmit+0xd0>)
 800ef4e:	482f      	ldr	r0, [pc, #188]	; (800f00c <tcp_rexmit+0xd4>)
 800ef50:	f003 faf8 	bl	8012544 <iprintf>

  if (pcb->unacked == NULL) {
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d102      	bne.n	800ef62 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ef5c:	f06f 0305 	mvn.w	r3, #5
 800ef60:	e04c      	b.n	800effc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef66:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ef68:	68b8      	ldr	r0, [r7, #8]
 800ef6a:	f7ff fe2d 	bl	800ebc8 <tcp_output_segment_busy>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d002      	beq.n	800ef7a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ef74:	f06f 0305 	mvn.w	r3, #5
 800ef78:	e040      	b.n	800effc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	336c      	adds	r3, #108	; 0x6c
 800ef86:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ef88:	e002      	b.n	800ef90 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d011      	beq.n	800efbc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7f8 fce0 	bl	8007966 <lwip_htonl>
 800efa6:	4604      	mov	r4, r0
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	4618      	mov	r0, r3
 800efb0:	f7f8 fcd9 	bl	8007966 <lwip_htonl>
 800efb4:	4603      	mov	r3, r0
 800efb6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800efb8:	2b00      	cmp	r3, #0
 800efba:	dbe6      	blt.n	800ef8a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	68ba      	ldr	r2, [r7, #8]
 800efc8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d103      	bne.n	800efda <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efe0:	2bff      	cmp	r3, #255	; 0xff
 800efe2:	d007      	beq.n	800eff4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efea:	3301      	adds	r3, #1
 800efec:	b2da      	uxtb	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2200      	movs	r2, #0
 800eff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3714      	adds	r7, #20
 800f000:	46bd      	mov	sp, r7
 800f002:	bd90      	pop	{r4, r7, pc}
 800f004:	080151bc 	.word	0x080151bc
 800f008:	0801585c 	.word	0x0801585c
 800f00c:	08015210 	.word	0x08015210

0800f010 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d106      	bne.n	800f02c <tcp_rexmit_fast+0x1c>
 800f01e:	4b2a      	ldr	r3, [pc, #168]	; (800f0c8 <tcp_rexmit_fast+0xb8>)
 800f020:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f024:	4929      	ldr	r1, [pc, #164]	; (800f0cc <tcp_rexmit_fast+0xbc>)
 800f026:	482a      	ldr	r0, [pc, #168]	; (800f0d0 <tcp_rexmit_fast+0xc0>)
 800f028:	f003 fa8c 	bl	8012544 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f030:	2b00      	cmp	r3, #0
 800f032:	d044      	beq.n	800f0be <tcp_rexmit_fast+0xae>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	8b5b      	ldrh	r3, [r3, #26]
 800f038:	f003 0304 	and.w	r3, r3, #4
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d13e      	bne.n	800f0be <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f7ff ff79 	bl	800ef38 <tcp_rexmit>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d138      	bne.n	800f0be <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f058:	4293      	cmp	r3, r2
 800f05a:	bf28      	it	cs
 800f05c:	4613      	movcs	r3, r2
 800f05e:	b29b      	uxth	r3, r3
 800f060:	0fda      	lsrs	r2, r3, #31
 800f062:	4413      	add	r3, r2
 800f064:	105b      	asrs	r3, r3, #1
 800f066:	b29a      	uxth	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f074:	461a      	mov	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f07a:	005b      	lsls	r3, r3, #1
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d206      	bcs.n	800f08e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	b29a      	uxth	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f098:	4619      	mov	r1, r3
 800f09a:	0049      	lsls	r1, r1, #1
 800f09c:	440b      	add	r3, r1
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4413      	add	r3, r2
 800f0a2:	b29a      	uxth	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	8b5b      	ldrh	r3, [r3, #26]
 800f0ae:	f043 0304 	orr.w	r3, r3, #4
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f0be:	bf00      	nop
 800f0c0:	3708      	adds	r7, #8
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	080151bc 	.word	0x080151bc
 800f0cc:	08015874 	.word	0x08015874
 800f0d0:	08015210 	.word	0x08015210

0800f0d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b086      	sub	sp, #24
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	607b      	str	r3, [r7, #4]
 800f0de:	460b      	mov	r3, r1
 800f0e0:	817b      	strh	r3, [r7, #10]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f0e6:	897a      	ldrh	r2, [r7, #10]
 800f0e8:	893b      	ldrh	r3, [r7, #8]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	3314      	adds	r3, #20
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	2022      	movs	r0, #34	; 0x22
 800f0fa:	f7f9 fd51 	bl	8008ba0 <pbuf_alloc>
 800f0fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d04d      	beq.n	800f1a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f106:	897b      	ldrh	r3, [r7, #10]
 800f108:	3313      	adds	r3, #19
 800f10a:	697a      	ldr	r2, [r7, #20]
 800f10c:	8952      	ldrh	r2, [r2, #10]
 800f10e:	4293      	cmp	r3, r2
 800f110:	db06      	blt.n	800f120 <tcp_output_alloc_header_common+0x4c>
 800f112:	4b26      	ldr	r3, [pc, #152]	; (800f1ac <tcp_output_alloc_header_common+0xd8>)
 800f114:	f240 7223 	movw	r2, #1827	; 0x723
 800f118:	4925      	ldr	r1, [pc, #148]	; (800f1b0 <tcp_output_alloc_header_common+0xdc>)
 800f11a:	4826      	ldr	r0, [pc, #152]	; (800f1b4 <tcp_output_alloc_header_common+0xe0>)
 800f11c:	f003 fa12 	bl	8012544 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f126:	8c3b      	ldrh	r3, [r7, #32]
 800f128:	4618      	mov	r0, r3
 800f12a:	f7f8 fc07 	bl	800793c <lwip_htons>
 800f12e:	4603      	mov	r3, r0
 800f130:	461a      	mov	r2, r3
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f138:	4618      	mov	r0, r3
 800f13a:	f7f8 fbff 	bl	800793c <lwip_htons>
 800f13e:	4603      	mov	r3, r0
 800f140:	461a      	mov	r2, r3
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f7f8 fc0a 	bl	8007966 <lwip_htonl>
 800f152:	4602      	mov	r2, r0
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f158:	897b      	ldrh	r3, [r7, #10]
 800f15a:	089b      	lsrs	r3, r3, #2
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	3305      	adds	r3, #5
 800f160:	b29b      	uxth	r3, r3
 800f162:	031b      	lsls	r3, r3, #12
 800f164:	b29a      	uxth	r2, r3
 800f166:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	4313      	orrs	r3, r2
 800f16e:	b29b      	uxth	r3, r3
 800f170:	4618      	mov	r0, r3
 800f172:	f7f8 fbe3 	bl	800793c <lwip_htons>
 800f176:	4603      	mov	r3, r0
 800f178:	461a      	mov	r2, r3
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f17e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f180:	4618      	mov	r0, r3
 800f182:	f7f8 fbdb 	bl	800793c <lwip_htons>
 800f186:	4603      	mov	r3, r0
 800f188:	461a      	mov	r2, r3
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	2200      	movs	r2, #0
 800f192:	741a      	strb	r2, [r3, #16]
 800f194:	2200      	movs	r2, #0
 800f196:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	2200      	movs	r2, #0
 800f19c:	749a      	strb	r2, [r3, #18]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f1a2:	697b      	ldr	r3, [r7, #20]
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3718      	adds	r7, #24
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	080151bc 	.word	0x080151bc
 800f1b0:	08015894 	.word	0x08015894
 800f1b4:	08015210 	.word	0x08015210

0800f1b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f1b8:	b5b0      	push	{r4, r5, r7, lr}
 800f1ba:	b08a      	sub	sp, #40	; 0x28
 800f1bc:	af04      	add	r7, sp, #16
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	607b      	str	r3, [r7, #4]
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	817b      	strh	r3, [r7, #10]
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d106      	bne.n	800f1de <tcp_output_alloc_header+0x26>
 800f1d0:	4b15      	ldr	r3, [pc, #84]	; (800f228 <tcp_output_alloc_header+0x70>)
 800f1d2:	f240 7242 	movw	r2, #1858	; 0x742
 800f1d6:	4915      	ldr	r1, [pc, #84]	; (800f22c <tcp_output_alloc_header+0x74>)
 800f1d8:	4815      	ldr	r0, [pc, #84]	; (800f230 <tcp_output_alloc_header+0x78>)
 800f1da:	f003 f9b3 	bl	8012544 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	8adb      	ldrh	r3, [r3, #22]
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	8b12      	ldrh	r2, [r2, #24]
 800f1ea:	68f9      	ldr	r1, [r7, #12]
 800f1ec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f1ee:	893d      	ldrh	r5, [r7, #8]
 800f1f0:	897c      	ldrh	r4, [r7, #10]
 800f1f2:	9103      	str	r1, [sp, #12]
 800f1f4:	2110      	movs	r1, #16
 800f1f6:	9102      	str	r1, [sp, #8]
 800f1f8:	9201      	str	r2, [sp, #4]
 800f1fa:	9300      	str	r3, [sp, #0]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	462a      	mov	r2, r5
 800f200:	4621      	mov	r1, r4
 800f202:	f7ff ff67 	bl	800f0d4 <tcp_output_alloc_header_common>
 800f206:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d006      	beq.n	800f21c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f216:	441a      	add	r2, r3
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f21c:	697b      	ldr	r3, [r7, #20]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3718      	adds	r7, #24
 800f222:	46bd      	mov	sp, r7
 800f224:	bdb0      	pop	{r4, r5, r7, pc}
 800f226:	bf00      	nop
 800f228:	080151bc 	.word	0x080151bc
 800f22c:	080158c4 	.word	0x080158c4
 800f230:	08015210 	.word	0x08015210

0800f234 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b088      	sub	sp, #32
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	60b9      	str	r1, [r7, #8]
 800f23e:	4611      	mov	r1, r2
 800f240:	461a      	mov	r2, r3
 800f242:	460b      	mov	r3, r1
 800f244:	71fb      	strb	r3, [r7, #7]
 800f246:	4613      	mov	r3, r2
 800f248:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f24a:	2300      	movs	r3, #0
 800f24c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d106      	bne.n	800f262 <tcp_output_fill_options+0x2e>
 800f254:	4b13      	ldr	r3, [pc, #76]	; (800f2a4 <tcp_output_fill_options+0x70>)
 800f256:	f240 7256 	movw	r2, #1878	; 0x756
 800f25a:	4913      	ldr	r1, [pc, #76]	; (800f2a8 <tcp_output_fill_options+0x74>)
 800f25c:	4813      	ldr	r0, [pc, #76]	; (800f2ac <tcp_output_fill_options+0x78>)
 800f25e:	f003 f971 	bl	8012544 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	3314      	adds	r3, #20
 800f26c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	f103 0214 	add.w	r2, r3, #20
 800f274:	8bfb      	ldrh	r3, [r7, #30]
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	4619      	mov	r1, r3
 800f27a:	79fb      	ldrb	r3, [r7, #7]
 800f27c:	009b      	lsls	r3, r3, #2
 800f27e:	f003 0304 	and.w	r3, r3, #4
 800f282:	440b      	add	r3, r1
 800f284:	4413      	add	r3, r2
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d006      	beq.n	800f29a <tcp_output_fill_options+0x66>
 800f28c:	4b05      	ldr	r3, [pc, #20]	; (800f2a4 <tcp_output_fill_options+0x70>)
 800f28e:	f240 7275 	movw	r2, #1909	; 0x775
 800f292:	4907      	ldr	r1, [pc, #28]	; (800f2b0 <tcp_output_fill_options+0x7c>)
 800f294:	4805      	ldr	r0, [pc, #20]	; (800f2ac <tcp_output_fill_options+0x78>)
 800f296:	f003 f955 	bl	8012544 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f29a:	bf00      	nop
 800f29c:	3720      	adds	r7, #32
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	080151bc 	.word	0x080151bc
 800f2a8:	080158ec 	.word	0x080158ec
 800f2ac:	08015210 	.word	0x08015210
 800f2b0:	080157e4 	.word	0x080157e4

0800f2b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b08a      	sub	sp, #40	; 0x28
 800f2b8:	af04      	add	r7, sp, #16
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	607a      	str	r2, [r7, #4]
 800f2c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d106      	bne.n	800f2d6 <tcp_output_control_segment+0x22>
 800f2c8:	4b1c      	ldr	r3, [pc, #112]	; (800f33c <tcp_output_control_segment+0x88>)
 800f2ca:	f240 7287 	movw	r2, #1927	; 0x787
 800f2ce:	491c      	ldr	r1, [pc, #112]	; (800f340 <tcp_output_control_segment+0x8c>)
 800f2d0:	481c      	ldr	r0, [pc, #112]	; (800f344 <tcp_output_control_segment+0x90>)
 800f2d2:	f003 f937 	bl	8012544 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f2d6:	683a      	ldr	r2, [r7, #0]
 800f2d8:	6879      	ldr	r1, [r7, #4]
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	f7fe fae8 	bl	800d8b0 <tcp_route>
 800f2e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d102      	bne.n	800f2ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f2e8:	23fc      	movs	r3, #252	; 0xfc
 800f2ea:	75fb      	strb	r3, [r7, #23]
 800f2ec:	e01c      	b.n	800f328 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d006      	beq.n	800f302 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	7adb      	ldrb	r3, [r3, #11]
 800f2f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	7a9b      	ldrb	r3, [r3, #10]
 800f2fe:	757b      	strb	r3, [r7, #21]
 800f300:	e003      	b.n	800f30a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f302:	23ff      	movs	r3, #255	; 0xff
 800f304:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f306:	2300      	movs	r3, #0
 800f308:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f30a:	7dba      	ldrb	r2, [r7, #22]
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	9302      	str	r3, [sp, #8]
 800f310:	2306      	movs	r3, #6
 800f312:	9301      	str	r3, [sp, #4]
 800f314:	7d7b      	ldrb	r3, [r7, #21]
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	4613      	mov	r3, r2
 800f31a:	683a      	ldr	r2, [r7, #0]
 800f31c:	6879      	ldr	r1, [r7, #4]
 800f31e:	68b8      	ldr	r0, [r7, #8]
 800f320:	f001 ff96 	bl	8011250 <ip4_output_if>
 800f324:	4603      	mov	r3, r0
 800f326:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f328:	68b8      	ldr	r0, [r7, #8]
 800f32a:	f7f9 ff1d 	bl	8009168 <pbuf_free>
  return err;
 800f32e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3718      	adds	r7, #24
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
 800f33a:	bf00      	nop
 800f33c:	080151bc 	.word	0x080151bc
 800f340:	08015914 	.word	0x08015914
 800f344:	08015210 	.word	0x08015210

0800f348 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f348:	b590      	push	{r4, r7, lr}
 800f34a:	b08b      	sub	sp, #44	; 0x2c
 800f34c:	af04      	add	r7, sp, #16
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
 800f354:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d106      	bne.n	800f36a <tcp_rst+0x22>
 800f35c:	4b1f      	ldr	r3, [pc, #124]	; (800f3dc <tcp_rst+0x94>)
 800f35e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f362:	491f      	ldr	r1, [pc, #124]	; (800f3e0 <tcp_rst+0x98>)
 800f364:	481f      	ldr	r0, [pc, #124]	; (800f3e4 <tcp_rst+0x9c>)
 800f366:	f003 f8ed 	bl	8012544 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d106      	bne.n	800f37e <tcp_rst+0x36>
 800f370:	4b1a      	ldr	r3, [pc, #104]	; (800f3dc <tcp_rst+0x94>)
 800f372:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f376:	491c      	ldr	r1, [pc, #112]	; (800f3e8 <tcp_rst+0xa0>)
 800f378:	481a      	ldr	r0, [pc, #104]	; (800f3e4 <tcp_rst+0x9c>)
 800f37a:	f003 f8e3 	bl	8012544 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f37e:	2300      	movs	r3, #0
 800f380:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f382:	f246 0308 	movw	r3, #24584	; 0x6008
 800f386:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f388:	7dfb      	ldrb	r3, [r7, #23]
 800f38a:	b29c      	uxth	r4, r3
 800f38c:	68b8      	ldr	r0, [r7, #8]
 800f38e:	f7f8 faea 	bl	8007966 <lwip_htonl>
 800f392:	4602      	mov	r2, r0
 800f394:	8abb      	ldrh	r3, [r7, #20]
 800f396:	9303      	str	r3, [sp, #12]
 800f398:	2314      	movs	r3, #20
 800f39a:	9302      	str	r3, [sp, #8]
 800f39c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f39e:	9301      	str	r3, [sp, #4]
 800f3a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f3a2:	9300      	str	r3, [sp, #0]
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	4621      	mov	r1, r4
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f7ff fe92 	bl	800f0d4 <tcp_output_alloc_header_common>
 800f3b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00c      	beq.n	800f3d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	6939      	ldr	r1, [r7, #16]
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f7ff ff38 	bl	800f234 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	6939      	ldr	r1, [r7, #16]
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f7ff ff72 	bl	800f2b4 <tcp_output_control_segment>
 800f3d0:	e000      	b.n	800f3d4 <tcp_rst+0x8c>
    return;
 800f3d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f3d4:	371c      	adds	r7, #28
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd90      	pop	{r4, r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	080151bc 	.word	0x080151bc
 800f3e0:	08015940 	.word	0x08015940
 800f3e4:	08015210 	.word	0x08015210
 800f3e8:	0801595c 	.word	0x0801595c

0800f3ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f3ec:	b590      	push	{r4, r7, lr}
 800f3ee:	b087      	sub	sp, #28
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d106      	bne.n	800f410 <tcp_send_empty_ack+0x24>
 800f402:	4b28      	ldr	r3, [pc, #160]	; (800f4a4 <tcp_send_empty_ack+0xb8>)
 800f404:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f408:	4927      	ldr	r1, [pc, #156]	; (800f4a8 <tcp_send_empty_ack+0xbc>)
 800f40a:	4828      	ldr	r0, [pc, #160]	; (800f4ac <tcp_send_empty_ack+0xc0>)
 800f40c:	f003 f89a 	bl	8012544 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f410:	7dfb      	ldrb	r3, [r7, #23]
 800f412:	009b      	lsls	r3, r3, #2
 800f414:	b2db      	uxtb	r3, r3
 800f416:	f003 0304 	and.w	r3, r3, #4
 800f41a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f41c:	7d7b      	ldrb	r3, [r7, #21]
 800f41e:	b29c      	uxth	r4, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f424:	4618      	mov	r0, r3
 800f426:	f7f8 fa9e 	bl	8007966 <lwip_htonl>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2200      	movs	r2, #0
 800f42e:	4621      	mov	r1, r4
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f7ff fec1 	bl	800f1b8 <tcp_output_alloc_header>
 800f436:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d109      	bne.n	800f452 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	8b5b      	ldrh	r3, [r3, #26]
 800f442:	f043 0303 	orr.w	r3, r3, #3
 800f446:	b29a      	uxth	r2, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f44c:	f06f 0301 	mvn.w	r3, #1
 800f450:	e023      	b.n	800f49a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f452:	7dbb      	ldrb	r3, [r7, #22]
 800f454:	7dfa      	ldrb	r2, [r7, #23]
 800f456:	6939      	ldr	r1, [r7, #16]
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f7ff feeb 	bl	800f234 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	3304      	adds	r3, #4
 800f464:	6939      	ldr	r1, [r7, #16]
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7ff ff24 	bl	800f2b4 <tcp_output_control_segment>
 800f46c:	4603      	mov	r3, r0
 800f46e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d007      	beq.n	800f488 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	8b5b      	ldrh	r3, [r3, #26]
 800f47c:	f043 0303 	orr.w	r3, r3, #3
 800f480:	b29a      	uxth	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	835a      	strh	r2, [r3, #26]
 800f486:	e006      	b.n	800f496 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	8b5b      	ldrh	r3, [r3, #26]
 800f48c:	f023 0303 	bic.w	r3, r3, #3
 800f490:	b29a      	uxth	r2, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f496:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	371c      	adds	r7, #28
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd90      	pop	{r4, r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	080151bc 	.word	0x080151bc
 800f4a8:	08015978 	.word	0x08015978
 800f4ac:	08015210 	.word	0x08015210

0800f4b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f4b0:	b590      	push	{r4, r7, lr}
 800f4b2:	b087      	sub	sp, #28
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d106      	bne.n	800f4d0 <tcp_keepalive+0x20>
 800f4c2:	4b18      	ldr	r3, [pc, #96]	; (800f524 <tcp_keepalive+0x74>)
 800f4c4:	f640 0224 	movw	r2, #2084	; 0x824
 800f4c8:	4917      	ldr	r1, [pc, #92]	; (800f528 <tcp_keepalive+0x78>)
 800f4ca:	4818      	ldr	r0, [pc, #96]	; (800f52c <tcp_keepalive+0x7c>)
 800f4cc:	f003 f83a 	bl	8012544 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f4d0:	7dfb      	ldrb	r3, [r7, #23]
 800f4d2:	b29c      	uxth	r4, r3
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7f8 fa43 	bl	8007966 <lwip_htonl>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff fe66 	bl	800f1b8 <tcp_output_alloc_header>
 800f4ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d102      	bne.n	800f4fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f8:	e010      	b.n	800f51c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f4fa:	7dfb      	ldrb	r3, [r7, #23]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	6939      	ldr	r1, [r7, #16]
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7ff fe97 	bl	800f234 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	3304      	adds	r3, #4
 800f50c:	6939      	ldr	r1, [r7, #16]
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7ff fed0 	bl	800f2b4 <tcp_output_control_segment>
 800f514:	4603      	mov	r3, r0
 800f516:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	371c      	adds	r7, #28
 800f520:	46bd      	mov	sp, r7
 800f522:	bd90      	pop	{r4, r7, pc}
 800f524:	080151bc 	.word	0x080151bc
 800f528:	08015998 	.word	0x08015998
 800f52c:	08015210 	.word	0x08015210

0800f530 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f530:	b590      	push	{r4, r7, lr}
 800f532:	b08b      	sub	sp, #44	; 0x2c
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f538:	2300      	movs	r3, #0
 800f53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d106      	bne.n	800f552 <tcp_zero_window_probe+0x22>
 800f544:	4b4c      	ldr	r3, [pc, #304]	; (800f678 <tcp_zero_window_probe+0x148>)
 800f546:	f640 024f 	movw	r2, #2127	; 0x84f
 800f54a:	494c      	ldr	r1, [pc, #304]	; (800f67c <tcp_zero_window_probe+0x14c>)
 800f54c:	484c      	ldr	r0, [pc, #304]	; (800f680 <tcp_zero_window_probe+0x150>)
 800f54e:	f002 fff9 	bl	8012544 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f556:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f558:	6a3b      	ldr	r3, [r7, #32]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d101      	bne.n	800f562 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f55e:	2300      	movs	r3, #0
 800f560:	e086      	b.n	800f670 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f568:	2bff      	cmp	r3, #255	; 0xff
 800f56a:	d007      	beq.n	800f57c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f572:	3301      	adds	r3, #1
 800f574:	b2da      	uxtb	r2, r3
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	899b      	ldrh	r3, [r3, #12]
 800f582:	b29b      	uxth	r3, r3
 800f584:	4618      	mov	r0, r3
 800f586:	f7f8 f9d9 	bl	800793c <lwip_htons>
 800f58a:	4603      	mov	r3, r0
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	2b00      	cmp	r3, #0
 800f594:	d005      	beq.n	800f5a2 <tcp_zero_window_probe+0x72>
 800f596:	6a3b      	ldr	r3, [r7, #32]
 800f598:	891b      	ldrh	r3, [r3, #8]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d101      	bne.n	800f5a2 <tcp_zero_window_probe+0x72>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e000      	b.n	800f5a4 <tcp_zero_window_probe+0x74>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f5a6:	7ffb      	ldrb	r3, [r7, #31]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	bf0c      	ite	eq
 800f5ac:	2301      	moveq	r3, #1
 800f5ae:	2300      	movne	r3, #0
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5b8:	b299      	uxth	r1, r3
 800f5ba:	6a3b      	ldr	r3, [r7, #32]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	8bba      	ldrh	r2, [r7, #28]
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7ff fdf8 	bl	800f1b8 <tcp_output_alloc_header>
 800f5c8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d102      	bne.n	800f5d6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d4:	e04c      	b.n	800f670 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f5dc:	7ffb      	ldrb	r3, [r7, #31]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d011      	beq.n	800f606 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	899b      	ldrh	r3, [r3, #12]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	b21b      	sxth	r3, r3
 800f5ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f5ee:	b21c      	sxth	r4, r3
 800f5f0:	2011      	movs	r0, #17
 800f5f2:	f7f8 f9a3 	bl	800793c <lwip_htons>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	b21b      	sxth	r3, r3
 800f5fa:	4323      	orrs	r3, r4
 800f5fc:	b21b      	sxth	r3, r3
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	819a      	strh	r2, [r3, #12]
 800f604:	e010      	b.n	800f628 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	3314      	adds	r3, #20
 800f60c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f60e:	6a3b      	ldr	r3, [r7, #32]
 800f610:	6858      	ldr	r0, [r3, #4]
 800f612:	6a3b      	ldr	r3, [r7, #32]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	891a      	ldrh	r2, [r3, #8]
 800f618:	6a3b      	ldr	r3, [r7, #32]
 800f61a:	891b      	ldrh	r3, [r3, #8]
 800f61c:	1ad3      	subs	r3, r2, r3
 800f61e:	b29b      	uxth	r3, r3
 800f620:	2201      	movs	r2, #1
 800f622:	6939      	ldr	r1, [r7, #16]
 800f624:	f7f9 ff8a 	bl	800953c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f628:	6a3b      	ldr	r3, [r7, #32]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	4618      	mov	r0, r3
 800f630:	f7f8 f999 	bl	8007966 <lwip_htonl>
 800f634:	4603      	mov	r3, r0
 800f636:	3301      	adds	r3, #1
 800f638:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	2b00      	cmp	r3, #0
 800f644:	da02      	bge.n	800f64c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	68fa      	ldr	r2, [r7, #12]
 800f64a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f650:	2200      	movs	r2, #0
 800f652:	69b9      	ldr	r1, [r7, #24]
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7ff fded 	bl	800f234 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	3304      	adds	r3, #4
 800f660:	69b9      	ldr	r1, [r7, #24]
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f7ff fe26 	bl	800f2b4 <tcp_output_control_segment>
 800f668:	4603      	mov	r3, r0
 800f66a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f66c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f670:	4618      	mov	r0, r3
 800f672:	372c      	adds	r7, #44	; 0x2c
 800f674:	46bd      	mov	sp, r7
 800f676:	bd90      	pop	{r4, r7, pc}
 800f678:	080151bc 	.word	0x080151bc
 800f67c:	080159b4 	.word	0x080159b4
 800f680:	08015210 	.word	0x08015210

0800f684 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f68c:	f7fa f844 	bl	8009718 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f690:	4b0a      	ldr	r3, [pc, #40]	; (800f6bc <tcpip_tcp_timer+0x38>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d103      	bne.n	800f6a0 <tcpip_tcp_timer+0x1c>
 800f698:	4b09      	ldr	r3, [pc, #36]	; (800f6c0 <tcpip_tcp_timer+0x3c>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d005      	beq.n	800f6ac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	4908      	ldr	r1, [pc, #32]	; (800f6c4 <tcpip_tcp_timer+0x40>)
 800f6a4:	20fa      	movs	r0, #250	; 0xfa
 800f6a6:	f000 f8f3 	bl	800f890 <sys_timeout>
 800f6aa:	e003      	b.n	800f6b4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f6ac:	4b06      	ldr	r3, [pc, #24]	; (800f6c8 <tcpip_tcp_timer+0x44>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	601a      	str	r2, [r3, #0]
  }
}
 800f6b2:	bf00      	nop
 800f6b4:	bf00      	nop
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	20008040 	.word	0x20008040
 800f6c0:	20008044 	.word	0x20008044
 800f6c4:	0800f685 	.word	0x0800f685
 800f6c8:	2000808c 	.word	0x2000808c

0800f6cc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f6d0:	4b0a      	ldr	r3, [pc, #40]	; (800f6fc <tcp_timer_needed+0x30>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10f      	bne.n	800f6f8 <tcp_timer_needed+0x2c>
 800f6d8:	4b09      	ldr	r3, [pc, #36]	; (800f700 <tcp_timer_needed+0x34>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d103      	bne.n	800f6e8 <tcp_timer_needed+0x1c>
 800f6e0:	4b08      	ldr	r3, [pc, #32]	; (800f704 <tcp_timer_needed+0x38>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d007      	beq.n	800f6f8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f6e8:	4b04      	ldr	r3, [pc, #16]	; (800f6fc <tcp_timer_needed+0x30>)
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	4905      	ldr	r1, [pc, #20]	; (800f708 <tcp_timer_needed+0x3c>)
 800f6f2:	20fa      	movs	r0, #250	; 0xfa
 800f6f4:	f000 f8cc 	bl	800f890 <sys_timeout>
  }
}
 800f6f8:	bf00      	nop
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	2000808c 	.word	0x2000808c
 800f700:	20008040 	.word	0x20008040
 800f704:	20008044 	.word	0x20008044
 800f708:	0800f685 	.word	0x0800f685

0800f70c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b086      	sub	sp, #24
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f718:	2006      	movs	r0, #6
 800f71a:	f7f8 fe3f 	bl	800839c <memp_malloc>
 800f71e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d109      	bne.n	800f73a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d151      	bne.n	800f7d0 <sys_timeout_abs+0xc4>
 800f72c:	4b2a      	ldr	r3, [pc, #168]	; (800f7d8 <sys_timeout_abs+0xcc>)
 800f72e:	22be      	movs	r2, #190	; 0xbe
 800f730:	492a      	ldr	r1, [pc, #168]	; (800f7dc <sys_timeout_abs+0xd0>)
 800f732:	482b      	ldr	r0, [pc, #172]	; (800f7e0 <sys_timeout_abs+0xd4>)
 800f734:	f002 ff06 	bl	8012544 <iprintf>
    return;
 800f738:	e04a      	b.n	800f7d0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	2200      	movs	r2, #0
 800f73e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f752:	4b24      	ldr	r3, [pc, #144]	; (800f7e4 <sys_timeout_abs+0xd8>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d103      	bne.n	800f762 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f75a:	4a22      	ldr	r2, [pc, #136]	; (800f7e4 <sys_timeout_abs+0xd8>)
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	6013      	str	r3, [r2, #0]
    return;
 800f760:	e037      	b.n	800f7d2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	685a      	ldr	r2, [r3, #4]
 800f766:	4b1f      	ldr	r3, [pc, #124]	; (800f7e4 <sys_timeout_abs+0xd8>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	0fdb      	lsrs	r3, r3, #31
 800f770:	f003 0301 	and.w	r3, r3, #1
 800f774:	b2db      	uxtb	r3, r3
 800f776:	2b00      	cmp	r3, #0
 800f778:	d007      	beq.n	800f78a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f77a:	4b1a      	ldr	r3, [pc, #104]	; (800f7e4 <sys_timeout_abs+0xd8>)
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f782:	4a18      	ldr	r2, [pc, #96]	; (800f7e4 <sys_timeout_abs+0xd8>)
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	6013      	str	r3, [r2, #0]
 800f788:	e023      	b.n	800f7d2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f78a:	4b16      	ldr	r3, [pc, #88]	; (800f7e4 <sys_timeout_abs+0xd8>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	617b      	str	r3, [r7, #20]
 800f790:	e01a      	b.n	800f7c8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00b      	beq.n	800f7b2 <sys_timeout_abs+0xa6>
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	1ad3      	subs	r3, r2, r3
 800f7a6:	0fdb      	lsrs	r3, r3, #31
 800f7a8:	f003 0301 	and.w	r3, r3, #1
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d007      	beq.n	800f7c2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	693a      	ldr	r2, [r7, #16]
 800f7be:	601a      	str	r2, [r3, #0]
        break;
 800f7c0:	e007      	b.n	800f7d2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	617b      	str	r3, [r7, #20]
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1e1      	bne.n	800f792 <sys_timeout_abs+0x86>
 800f7ce:	e000      	b.n	800f7d2 <sys_timeout_abs+0xc6>
    return;
 800f7d0:	bf00      	nop
      }
    }
  }
}
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	080159d8 	.word	0x080159d8
 800f7dc:	08015a0c 	.word	0x08015a0c
 800f7e0:	08015a4c 	.word	0x08015a4c
 800f7e4:	20008084 	.word	0x20008084

0800f7e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b086      	sub	sp, #24
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	4798      	blx	r3

  now = sys_now();
 800f7fa:	f7f7 fe7f 	bl	80074fc <sys_now>
 800f7fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	4b0f      	ldr	r3, [pc, #60]	; (800f844 <lwip_cyclic_timer+0x5c>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4413      	add	r3, r2
 800f80a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	0fdb      	lsrs	r3, r3, #31
 800f814:	f003 0301 	and.w	r3, r3, #1
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d009      	beq.n	800f832 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	4413      	add	r3, r2
 800f826:	687a      	ldr	r2, [r7, #4]
 800f828:	4907      	ldr	r1, [pc, #28]	; (800f848 <lwip_cyclic_timer+0x60>)
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7ff ff6e 	bl	800f70c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f830:	e004      	b.n	800f83c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f832:	687a      	ldr	r2, [r7, #4]
 800f834:	4904      	ldr	r1, [pc, #16]	; (800f848 <lwip_cyclic_timer+0x60>)
 800f836:	68f8      	ldr	r0, [r7, #12]
 800f838:	f7ff ff68 	bl	800f70c <sys_timeout_abs>
}
 800f83c:	bf00      	nop
 800f83e:	3718      	adds	r7, #24
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	20008088 	.word	0x20008088
 800f848:	0800f7e9 	.word	0x0800f7e9

0800f84c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f852:	2301      	movs	r3, #1
 800f854:	607b      	str	r3, [r7, #4]
 800f856:	e00e      	b.n	800f876 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f858:	4a0b      	ldr	r2, [pc, #44]	; (800f888 <sys_timeouts_init+0x3c>)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	00db      	lsls	r3, r3, #3
 800f864:	4a08      	ldr	r2, [pc, #32]	; (800f888 <sys_timeouts_init+0x3c>)
 800f866:	4413      	add	r3, r2
 800f868:	461a      	mov	r2, r3
 800f86a:	4908      	ldr	r1, [pc, #32]	; (800f88c <sys_timeouts_init+0x40>)
 800f86c:	f000 f810 	bl	800f890 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	3301      	adds	r3, #1
 800f874:	607b      	str	r3, [r7, #4]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b02      	cmp	r3, #2
 800f87a:	d9ed      	bls.n	800f858 <sys_timeouts_init+0xc>
  }
}
 800f87c:	bf00      	nop
 800f87e:	bf00      	nop
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	080165c4 	.word	0x080165c4
 800f88c:	0800f7e9 	.word	0x0800f7e9

0800f890 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8a2:	d306      	bcc.n	800f8b2 <sys_timeout+0x22>
 800f8a4:	4b0a      	ldr	r3, [pc, #40]	; (800f8d0 <sys_timeout+0x40>)
 800f8a6:	f240 1229 	movw	r2, #297	; 0x129
 800f8aa:	490a      	ldr	r1, [pc, #40]	; (800f8d4 <sys_timeout+0x44>)
 800f8ac:	480a      	ldr	r0, [pc, #40]	; (800f8d8 <sys_timeout+0x48>)
 800f8ae:	f002 fe49 	bl	8012544 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f8b2:	f7f7 fe23 	bl	80074fc <sys_now>
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f8be:	687a      	ldr	r2, [r7, #4]
 800f8c0:	68b9      	ldr	r1, [r7, #8]
 800f8c2:	6978      	ldr	r0, [r7, #20]
 800f8c4:	f7ff ff22 	bl	800f70c <sys_timeout_abs>
#endif
}
 800f8c8:	bf00      	nop
 800f8ca:	3718      	adds	r7, #24
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	080159d8 	.word	0x080159d8
 800f8d4:	08015a74 	.word	0x08015a74
 800f8d8:	08015a4c 	.word	0x08015a4c

0800f8dc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f8e2:	f7f7 fe0b 	bl	80074fc <sys_now>
 800f8e6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f8e8:	4b1a      	ldr	r3, [pc, #104]	; (800f954 <sys_check_timeouts+0x78>)
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d001      	beq.n	800f8f6 <sys_check_timeouts+0x1a>
 800f8f2:	f7f9 f8ff 	bl	8008af4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f8f6:	4b18      	ldr	r3, [pc, #96]	; (800f958 <sys_check_timeouts+0x7c>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d022      	beq.n	800f948 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	1ad3      	subs	r3, r2, r3
 800f90a:	0fdb      	lsrs	r3, r3, #31
 800f90c:	f003 0301 	and.w	r3, r3, #1
 800f910:	b2db      	uxtb	r3, r3
 800f912:	2b00      	cmp	r3, #0
 800f914:	d11a      	bne.n	800f94c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a0f      	ldr	r2, [pc, #60]	; (800f958 <sys_check_timeouts+0x7c>)
 800f91c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	4a0b      	ldr	r2, [pc, #44]	; (800f95c <sys_check_timeouts+0x80>)
 800f930:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f932:	68b9      	ldr	r1, [r7, #8]
 800f934:	2006      	movs	r0, #6
 800f936:	f7f8 fda1 	bl	800847c <memp_free>
    if (handler != NULL) {
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d0d3      	beq.n	800f8e8 <sys_check_timeouts+0xc>
      handler(arg);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6838      	ldr	r0, [r7, #0]
 800f944:	4798      	blx	r3
  do {
 800f946:	e7cf      	b.n	800f8e8 <sys_check_timeouts+0xc>
      return;
 800f948:	bf00      	nop
 800f94a:	e000      	b.n	800f94e <sys_check_timeouts+0x72>
      return;
 800f94c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f94e:	3710      	adds	r7, #16
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	20008031 	.word	0x20008031
 800f958:	20008084 	.word	0x20008084
 800f95c:	20008088 	.word	0x20008088

0800f960 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f964:	f002 fe06 	bl	8012574 <rand>
 800f968:	4603      	mov	r3, r0
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f970:	b29b      	uxth	r3, r3
 800f972:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f976:	b29a      	uxth	r2, r3
 800f978:	4b01      	ldr	r3, [pc, #4]	; (800f980 <udp_init+0x20>)
 800f97a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f97c:	bf00      	nop
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	200000b8 	.word	0x200000b8

0800f984 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	4613      	mov	r3, r2
 800f990:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d105      	bne.n	800f9a4 <udp_input_local_match+0x20>
 800f998:	4b27      	ldr	r3, [pc, #156]	; (800fa38 <udp_input_local_match+0xb4>)
 800f99a:	2287      	movs	r2, #135	; 0x87
 800f99c:	4927      	ldr	r1, [pc, #156]	; (800fa3c <udp_input_local_match+0xb8>)
 800f99e:	4828      	ldr	r0, [pc, #160]	; (800fa40 <udp_input_local_match+0xbc>)
 800f9a0:	f002 fdd0 	bl	8012544 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d105      	bne.n	800f9b6 <udp_input_local_match+0x32>
 800f9aa:	4b23      	ldr	r3, [pc, #140]	; (800fa38 <udp_input_local_match+0xb4>)
 800f9ac:	2288      	movs	r2, #136	; 0x88
 800f9ae:	4925      	ldr	r1, [pc, #148]	; (800fa44 <udp_input_local_match+0xc0>)
 800f9b0:	4823      	ldr	r0, [pc, #140]	; (800fa40 <udp_input_local_match+0xbc>)
 800f9b2:	f002 fdc7 	bl	8012544 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	7a1b      	ldrb	r3, [r3, #8]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00b      	beq.n	800f9d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	7a1a      	ldrb	r2, [r3, #8]
 800f9c2:	4b21      	ldr	r3, [pc, #132]	; (800fa48 <udp_input_local_match+0xc4>)
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d001      	beq.n	800f9d6 <udp_input_local_match+0x52>
    return 0;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	e02b      	b.n	800fa2e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f9d6:	79fb      	ldrb	r3, [r7, #7]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d018      	beq.n	800fa0e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d013      	beq.n	800fa0a <udp_input_local_match+0x86>
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d00f      	beq.n	800fa0a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f9ea:	4b17      	ldr	r3, [pc, #92]	; (800fa48 <udp_input_local_match+0xc4>)
 800f9ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9f2:	d00a      	beq.n	800fa0a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	4b13      	ldr	r3, [pc, #76]	; (800fa48 <udp_input_local_match+0xc4>)
 800f9fa:	695b      	ldr	r3, [r3, #20]
 800f9fc:	405a      	eors	r2, r3
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	3308      	adds	r3, #8
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d110      	bne.n	800fa2c <udp_input_local_match+0xa8>
          return 1;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e00f      	b.n	800fa2e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d009      	beq.n	800fa28 <udp_input_local_match+0xa4>
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d005      	beq.n	800fa28 <udp_input_local_match+0xa4>
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	4b09      	ldr	r3, [pc, #36]	; (800fa48 <udp_input_local_match+0xc4>)
 800fa22:	695b      	ldr	r3, [r3, #20]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d101      	bne.n	800fa2c <udp_input_local_match+0xa8>
        return 1;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	e000      	b.n	800fa2e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800fa2c:	2300      	movs	r3, #0
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	08015ac0 	.word	0x08015ac0
 800fa3c:	08015af0 	.word	0x08015af0
 800fa40:	08015b14 	.word	0x08015b14
 800fa44:	08015b3c 	.word	0x08015b3c
 800fa48:	20005118 	.word	0x20005118

0800fa4c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800fa4c:	b590      	push	{r4, r7, lr}
 800fa4e:	b08d      	sub	sp, #52	; 0x34
 800fa50:	af02      	add	r7, sp, #8
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800fa56:	2300      	movs	r3, #0
 800fa58:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d105      	bne.n	800fa6c <udp_input+0x20>
 800fa60:	4b7c      	ldr	r3, [pc, #496]	; (800fc54 <udp_input+0x208>)
 800fa62:	22cf      	movs	r2, #207	; 0xcf
 800fa64:	497c      	ldr	r1, [pc, #496]	; (800fc58 <udp_input+0x20c>)
 800fa66:	487d      	ldr	r0, [pc, #500]	; (800fc5c <udp_input+0x210>)
 800fa68:	f002 fd6c 	bl	8012544 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d105      	bne.n	800fa7e <udp_input+0x32>
 800fa72:	4b78      	ldr	r3, [pc, #480]	; (800fc54 <udp_input+0x208>)
 800fa74:	22d0      	movs	r2, #208	; 0xd0
 800fa76:	497a      	ldr	r1, [pc, #488]	; (800fc60 <udp_input+0x214>)
 800fa78:	4878      	ldr	r0, [pc, #480]	; (800fc5c <udp_input+0x210>)
 800fa7a:	f002 fd63 	bl	8012544 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	895b      	ldrh	r3, [r3, #10]
 800fa82:	2b07      	cmp	r3, #7
 800fa84:	d803      	bhi.n	800fa8e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7f9 fb6e 	bl	8009168 <pbuf_free>
    goto end;
 800fa8c:	e0de      	b.n	800fc4c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fa94:	4b73      	ldr	r3, [pc, #460]	; (800fc64 <udp_input+0x218>)
 800fa96:	695b      	ldr	r3, [r3, #20]
 800fa98:	4a72      	ldr	r2, [pc, #456]	; (800fc64 <udp_input+0x218>)
 800fa9a:	6812      	ldr	r2, [r2, #0]
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f001 fcae 	bl	8011400 <ip4_addr_isbroadcast_u32>
 800faa4:	4603      	mov	r3, r0
 800faa6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	881b      	ldrh	r3, [r3, #0]
 800faac:	b29b      	uxth	r3, r3
 800faae:	4618      	mov	r0, r3
 800fab0:	f7f7 ff44 	bl	800793c <lwip_htons>
 800fab4:	4603      	mov	r3, r0
 800fab6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	885b      	ldrh	r3, [r3, #2]
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7f7 ff3c 	bl	800793c <lwip_htons>
 800fac4:	4603      	mov	r3, r0
 800fac6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fac8:	2300      	movs	r3, #0
 800faca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800facc:	2300      	movs	r3, #0
 800face:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fad0:	2300      	movs	r3, #0
 800fad2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fad4:	4b64      	ldr	r3, [pc, #400]	; (800fc68 <udp_input+0x21c>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	627b      	str	r3, [r7, #36]	; 0x24
 800fada:	e054      	b.n	800fb86 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fade:	8a5b      	ldrh	r3, [r3, #18]
 800fae0:	89fa      	ldrh	r2, [r7, #14]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d14a      	bne.n	800fb7c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fae6:	7cfb      	ldrb	r3, [r7, #19]
 800fae8:	461a      	mov	r2, r3
 800faea:	6839      	ldr	r1, [r7, #0]
 800faec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800faee:	f7ff ff49 	bl	800f984 <udp_input_local_match>
 800faf2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d041      	beq.n	800fb7c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800faf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafa:	7c1b      	ldrb	r3, [r3, #16]
 800fafc:	f003 0304 	and.w	r3, r3, #4
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d11d      	bne.n	800fb40 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d102      	bne.n	800fb10 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800fb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0c:	61fb      	str	r3, [r7, #28]
 800fb0e:	e017      	b.n	800fb40 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fb10:	7cfb      	ldrb	r3, [r7, #19]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d014      	beq.n	800fb40 <udp_input+0xf4>
 800fb16:	4b53      	ldr	r3, [pc, #332]	; (800fc64 <udp_input+0x218>)
 800fb18:	695b      	ldr	r3, [r3, #20]
 800fb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb1e:	d10f      	bne.n	800fb40 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	3304      	adds	r3, #4
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d008      	beq.n	800fb40 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	3304      	adds	r3, #4
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d101      	bne.n	800fb40 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb42:	8a9b      	ldrh	r3, [r3, #20]
 800fb44:	8a3a      	ldrh	r2, [r7, #16]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d118      	bne.n	800fb7c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d005      	beq.n	800fb5e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb54:	685a      	ldr	r2, [r3, #4]
 800fb56:	4b43      	ldr	r3, [pc, #268]	; (800fc64 <udp_input+0x218>)
 800fb58:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d10e      	bne.n	800fb7c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fb5e:	6a3b      	ldr	r3, [r7, #32]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d014      	beq.n	800fb8e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb66:	68da      	ldr	r2, [r3, #12]
 800fb68:	6a3b      	ldr	r3, [r7, #32]
 800fb6a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fb6c:	4b3e      	ldr	r3, [pc, #248]	; (800fc68 <udp_input+0x21c>)
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb72:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fb74:	4a3c      	ldr	r2, [pc, #240]	; (800fc68 <udp_input+0x21c>)
 800fb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb78:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fb7a:	e008      	b.n	800fb8e <udp_input+0x142>
      }
    }

    prev = pcb;
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	627b      	str	r3, [r7, #36]	; 0x24
 800fb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1a7      	bne.n	800fadc <udp_input+0x90>
 800fb8c:	e000      	b.n	800fb90 <udp_input+0x144>
        break;
 800fb8e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d101      	bne.n	800fb9a <udp_input+0x14e>
    pcb = uncon_pcb;
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d002      	beq.n	800fba6 <udp_input+0x15a>
    for_us = 1;
 800fba0:	2301      	movs	r3, #1
 800fba2:	76fb      	strb	r3, [r7, #27]
 800fba4:	e00a      	b.n	800fbbc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	3304      	adds	r3, #4
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	4b2d      	ldr	r3, [pc, #180]	; (800fc64 <udp_input+0x218>)
 800fbae:	695b      	ldr	r3, [r3, #20]
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	bf0c      	ite	eq
 800fbb4:	2301      	moveq	r3, #1
 800fbb6:	2300      	movne	r3, #0
 800fbb8:	b2db      	uxtb	r3, r3
 800fbba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fbbc:	7efb      	ldrb	r3, [r7, #27]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d041      	beq.n	800fc46 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fbc2:	2108      	movs	r1, #8
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f7f9 fa49 	bl	800905c <pbuf_remove_header>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d00a      	beq.n	800fbe6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fbd0:	4b20      	ldr	r3, [pc, #128]	; (800fc54 <udp_input+0x208>)
 800fbd2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800fbd6:	4925      	ldr	r1, [pc, #148]	; (800fc6c <udp_input+0x220>)
 800fbd8:	4820      	ldr	r0, [pc, #128]	; (800fc5c <udp_input+0x210>)
 800fbda:	f002 fcb3 	bl	8012544 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7f9 fac2 	bl	8009168 <pbuf_free>
      goto end;
 800fbe4:	e032      	b.n	800fc4c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d012      	beq.n	800fc12 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbee:	699b      	ldr	r3, [r3, #24]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d00a      	beq.n	800fc0a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf6:	699c      	ldr	r4, [r3, #24]
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfa:	69d8      	ldr	r0, [r3, #28]
 800fbfc:	8a3b      	ldrh	r3, [r7, #16]
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	4b1b      	ldr	r3, [pc, #108]	; (800fc70 <udp_input+0x224>)
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc06:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fc08:	e021      	b.n	800fc4e <udp_input+0x202>
        pbuf_free(p);
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f7f9 faac 	bl	8009168 <pbuf_free>
        goto end;
 800fc10:	e01c      	b.n	800fc4c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fc12:	7cfb      	ldrb	r3, [r7, #19]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d112      	bne.n	800fc3e <udp_input+0x1f2>
 800fc18:	4b12      	ldr	r3, [pc, #72]	; (800fc64 <udp_input+0x218>)
 800fc1a:	695b      	ldr	r3, [r3, #20]
 800fc1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc20:	2be0      	cmp	r3, #224	; 0xe0
 800fc22:	d00c      	beq.n	800fc3e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fc24:	4b0f      	ldr	r3, [pc, #60]	; (800fc64 <udp_input+0x218>)
 800fc26:	899b      	ldrh	r3, [r3, #12]
 800fc28:	3308      	adds	r3, #8
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	b21b      	sxth	r3, r3
 800fc2e:	4619      	mov	r1, r3
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f7f9 fa86 	bl	8009142 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fc36:	2103      	movs	r1, #3
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f001 f8b7 	bl	8010dac <icmp_dest_unreach>
      pbuf_free(p);
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f7f9 fa92 	bl	8009168 <pbuf_free>
  return;
 800fc44:	e003      	b.n	800fc4e <udp_input+0x202>
    pbuf_free(p);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f7f9 fa8e 	bl	8009168 <pbuf_free>
  return;
 800fc4c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fc4e:	372c      	adds	r7, #44	; 0x2c
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd90      	pop	{r4, r7, pc}
 800fc54:	08015ac0 	.word	0x08015ac0
 800fc58:	08015b64 	.word	0x08015b64
 800fc5c:	08015b14 	.word	0x08015b14
 800fc60:	08015b7c 	.word	0x08015b7c
 800fc64:	20005118 	.word	0x20005118
 800fc68:	20008090 	.word	0x20008090
 800fc6c:	08015b98 	.word	0x08015b98
 800fc70:	20005128 	.word	0x20005128

0800fc74 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d01e      	beq.n	800fcc2 <udp_netif_ip_addr_changed+0x4e>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d01a      	beq.n	800fcc2 <udp_netif_ip_addr_changed+0x4e>
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d017      	beq.n	800fcc2 <udp_netif_ip_addr_changed+0x4e>
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d013      	beq.n	800fcc2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fc9a:	4b0d      	ldr	r3, [pc, #52]	; (800fcd0 <udp_netif_ip_addr_changed+0x5c>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	60fb      	str	r3, [r7, #12]
 800fca0:	e00c      	b.n	800fcbc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d103      	bne.n	800fcb6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	60fb      	str	r3, [r7, #12]
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d1ef      	bne.n	800fca2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fcc2:	bf00      	nop
 800fcc4:	3714      	adds	r7, #20
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop
 800fcd0:	20008090 	.word	0x20008090

0800fcd4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800fcdc:	4915      	ldr	r1, [pc, #84]	; (800fd34 <etharp_free_entry+0x60>)
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	4613      	mov	r3, r2
 800fce2:	005b      	lsls	r3, r3, #1
 800fce4:	4413      	add	r3, r2
 800fce6:	00db      	lsls	r3, r3, #3
 800fce8:	440b      	add	r3, r1
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d013      	beq.n	800fd18 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fcf0:	4910      	ldr	r1, [pc, #64]	; (800fd34 <etharp_free_entry+0x60>)
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	4613      	mov	r3, r2
 800fcf6:	005b      	lsls	r3, r3, #1
 800fcf8:	4413      	add	r3, r2
 800fcfa:	00db      	lsls	r3, r3, #3
 800fcfc:	440b      	add	r3, r1
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7f9 fa31 	bl	8009168 <pbuf_free>
    arp_table[i].q = NULL;
 800fd06:	490b      	ldr	r1, [pc, #44]	; (800fd34 <etharp_free_entry+0x60>)
 800fd08:	687a      	ldr	r2, [r7, #4]
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	005b      	lsls	r3, r3, #1
 800fd0e:	4413      	add	r3, r2
 800fd10:	00db      	lsls	r3, r3, #3
 800fd12:	440b      	add	r3, r1
 800fd14:	2200      	movs	r2, #0
 800fd16:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fd18:	4906      	ldr	r1, [pc, #24]	; (800fd34 <etharp_free_entry+0x60>)
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	4613      	mov	r3, r2
 800fd1e:	005b      	lsls	r3, r3, #1
 800fd20:	4413      	add	r3, r2
 800fd22:	00db      	lsls	r3, r3, #3
 800fd24:	440b      	add	r3, r1
 800fd26:	3314      	adds	r3, #20
 800fd28:	2200      	movs	r2, #0
 800fd2a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fd2c:	bf00      	nop
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	20008094 	.word	0x20008094

0800fd38 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fd3e:	2300      	movs	r3, #0
 800fd40:	607b      	str	r3, [r7, #4]
 800fd42:	e096      	b.n	800fe72 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fd44:	494f      	ldr	r1, [pc, #316]	; (800fe84 <etharp_tmr+0x14c>)
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	4613      	mov	r3, r2
 800fd4a:	005b      	lsls	r3, r3, #1
 800fd4c:	4413      	add	r3, r2
 800fd4e:	00db      	lsls	r3, r3, #3
 800fd50:	440b      	add	r3, r1
 800fd52:	3314      	adds	r3, #20
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fd58:	78fb      	ldrb	r3, [r7, #3]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f000 8086 	beq.w	800fe6c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fd60:	4948      	ldr	r1, [pc, #288]	; (800fe84 <etharp_tmr+0x14c>)
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	4613      	mov	r3, r2
 800fd66:	005b      	lsls	r3, r3, #1
 800fd68:	4413      	add	r3, r2
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	440b      	add	r3, r1
 800fd6e:	3312      	adds	r3, #18
 800fd70:	881b      	ldrh	r3, [r3, #0]
 800fd72:	3301      	adds	r3, #1
 800fd74:	b298      	uxth	r0, r3
 800fd76:	4943      	ldr	r1, [pc, #268]	; (800fe84 <etharp_tmr+0x14c>)
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	005b      	lsls	r3, r3, #1
 800fd7e:	4413      	add	r3, r2
 800fd80:	00db      	lsls	r3, r3, #3
 800fd82:	440b      	add	r3, r1
 800fd84:	3312      	adds	r3, #18
 800fd86:	4602      	mov	r2, r0
 800fd88:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fd8a:	493e      	ldr	r1, [pc, #248]	; (800fe84 <etharp_tmr+0x14c>)
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	4613      	mov	r3, r2
 800fd90:	005b      	lsls	r3, r3, #1
 800fd92:	4413      	add	r3, r2
 800fd94:	00db      	lsls	r3, r3, #3
 800fd96:	440b      	add	r3, r1
 800fd98:	3312      	adds	r3, #18
 800fd9a:	881b      	ldrh	r3, [r3, #0]
 800fd9c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fda0:	d215      	bcs.n	800fdce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fda2:	4938      	ldr	r1, [pc, #224]	; (800fe84 <etharp_tmr+0x14c>)
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	4613      	mov	r3, r2
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	4413      	add	r3, r2
 800fdac:	00db      	lsls	r3, r3, #3
 800fdae:	440b      	add	r3, r1
 800fdb0:	3314      	adds	r3, #20
 800fdb2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d10e      	bne.n	800fdd6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fdb8:	4932      	ldr	r1, [pc, #200]	; (800fe84 <etharp_tmr+0x14c>)
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	005b      	lsls	r3, r3, #1
 800fdc0:	4413      	add	r3, r2
 800fdc2:	00db      	lsls	r3, r3, #3
 800fdc4:	440b      	add	r3, r1
 800fdc6:	3312      	adds	r3, #18
 800fdc8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fdca:	2b04      	cmp	r3, #4
 800fdcc:	d903      	bls.n	800fdd6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7ff ff80 	bl	800fcd4 <etharp_free_entry>
 800fdd4:	e04a      	b.n	800fe6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fdd6:	492b      	ldr	r1, [pc, #172]	; (800fe84 <etharp_tmr+0x14c>)
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	4613      	mov	r3, r2
 800fddc:	005b      	lsls	r3, r3, #1
 800fdde:	4413      	add	r3, r2
 800fde0:	00db      	lsls	r3, r3, #3
 800fde2:	440b      	add	r3, r1
 800fde4:	3314      	adds	r3, #20
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	d10a      	bne.n	800fe02 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fdec:	4925      	ldr	r1, [pc, #148]	; (800fe84 <etharp_tmr+0x14c>)
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	4613      	mov	r3, r2
 800fdf2:	005b      	lsls	r3, r3, #1
 800fdf4:	4413      	add	r3, r2
 800fdf6:	00db      	lsls	r3, r3, #3
 800fdf8:	440b      	add	r3, r1
 800fdfa:	3314      	adds	r3, #20
 800fdfc:	2204      	movs	r2, #4
 800fdfe:	701a      	strb	r2, [r3, #0]
 800fe00:	e034      	b.n	800fe6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fe02:	4920      	ldr	r1, [pc, #128]	; (800fe84 <etharp_tmr+0x14c>)
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	4613      	mov	r3, r2
 800fe08:	005b      	lsls	r3, r3, #1
 800fe0a:	4413      	add	r3, r2
 800fe0c:	00db      	lsls	r3, r3, #3
 800fe0e:	440b      	add	r3, r1
 800fe10:	3314      	adds	r3, #20
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	2b04      	cmp	r3, #4
 800fe16:	d10a      	bne.n	800fe2e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fe18:	491a      	ldr	r1, [pc, #104]	; (800fe84 <etharp_tmr+0x14c>)
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	4613      	mov	r3, r2
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	4413      	add	r3, r2
 800fe22:	00db      	lsls	r3, r3, #3
 800fe24:	440b      	add	r3, r1
 800fe26:	3314      	adds	r3, #20
 800fe28:	2202      	movs	r2, #2
 800fe2a:	701a      	strb	r2, [r3, #0]
 800fe2c:	e01e      	b.n	800fe6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fe2e:	4915      	ldr	r1, [pc, #84]	; (800fe84 <etharp_tmr+0x14c>)
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	4613      	mov	r3, r2
 800fe34:	005b      	lsls	r3, r3, #1
 800fe36:	4413      	add	r3, r2
 800fe38:	00db      	lsls	r3, r3, #3
 800fe3a:	440b      	add	r3, r1
 800fe3c:	3314      	adds	r3, #20
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	d113      	bne.n	800fe6c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fe44:	490f      	ldr	r1, [pc, #60]	; (800fe84 <etharp_tmr+0x14c>)
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	005b      	lsls	r3, r3, #1
 800fe4c:	4413      	add	r3, r2
 800fe4e:	00db      	lsls	r3, r3, #3
 800fe50:	440b      	add	r3, r1
 800fe52:	3308      	adds	r3, #8
 800fe54:	6818      	ldr	r0, [r3, #0]
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	4613      	mov	r3, r2
 800fe5a:	005b      	lsls	r3, r3, #1
 800fe5c:	4413      	add	r3, r2
 800fe5e:	00db      	lsls	r3, r3, #3
 800fe60:	4a08      	ldr	r2, [pc, #32]	; (800fe84 <etharp_tmr+0x14c>)
 800fe62:	4413      	add	r3, r2
 800fe64:	3304      	adds	r3, #4
 800fe66:	4619      	mov	r1, r3
 800fe68:	f000 fe6e 	bl	8010b48 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	607b      	str	r3, [r7, #4]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2b09      	cmp	r3, #9
 800fe76:	f77f af65 	ble.w	800fd44 <etharp_tmr+0xc>
      }
    }
  }
}
 800fe7a:	bf00      	nop
 800fe7c:	bf00      	nop
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	20008094 	.word	0x20008094

0800fe88 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b08a      	sub	sp, #40	; 0x28
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	460b      	mov	r3, r1
 800fe92:	607a      	str	r2, [r7, #4]
 800fe94:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fe96:	230a      	movs	r3, #10
 800fe98:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fe9a:	230a      	movs	r3, #10
 800fe9c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fe9e:	230a      	movs	r3, #10
 800fea0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800fea2:	2300      	movs	r3, #0
 800fea4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fea6:	230a      	movs	r3, #10
 800fea8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800feaa:	2300      	movs	r3, #0
 800feac:	83bb      	strh	r3, [r7, #28]
 800feae:	2300      	movs	r3, #0
 800feb0:	837b      	strh	r3, [r7, #26]
 800feb2:	2300      	movs	r3, #0
 800feb4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800feb6:	2300      	movs	r3, #0
 800feb8:	843b      	strh	r3, [r7, #32]
 800feba:	e0ae      	b.n	801001a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800febc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fec0:	49a6      	ldr	r1, [pc, #664]	; (801015c <etharp_find_entry+0x2d4>)
 800fec2:	4613      	mov	r3, r2
 800fec4:	005b      	lsls	r3, r3, #1
 800fec6:	4413      	add	r3, r2
 800fec8:	00db      	lsls	r3, r3, #3
 800feca:	440b      	add	r3, r1
 800fecc:	3314      	adds	r3, #20
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fed2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fed6:	2b0a      	cmp	r3, #10
 800fed8:	d105      	bne.n	800fee6 <etharp_find_entry+0x5e>
 800feda:	7dfb      	ldrb	r3, [r7, #23]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d102      	bne.n	800fee6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fee0:	8c3b      	ldrh	r3, [r7, #32]
 800fee2:	847b      	strh	r3, [r7, #34]	; 0x22
 800fee4:	e095      	b.n	8010012 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fee6:	7dfb      	ldrb	r3, [r7, #23]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	f000 8092 	beq.w	8010012 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800feee:	7dfb      	ldrb	r3, [r7, #23]
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d009      	beq.n	800ff08 <etharp_find_entry+0x80>
 800fef4:	7dfb      	ldrb	r3, [r7, #23]
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d806      	bhi.n	800ff08 <etharp_find_entry+0x80>
 800fefa:	4b99      	ldr	r3, [pc, #612]	; (8010160 <etharp_find_entry+0x2d8>)
 800fefc:	f240 1223 	movw	r2, #291	; 0x123
 800ff00:	4998      	ldr	r1, [pc, #608]	; (8010164 <etharp_find_entry+0x2dc>)
 800ff02:	4899      	ldr	r0, [pc, #612]	; (8010168 <etharp_find_entry+0x2e0>)
 800ff04:	f002 fb1e 	bl	8012544 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d020      	beq.n	800ff50 <etharp_find_entry+0xc8>
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	6819      	ldr	r1, [r3, #0]
 800ff12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff16:	4891      	ldr	r0, [pc, #580]	; (801015c <etharp_find_entry+0x2d4>)
 800ff18:	4613      	mov	r3, r2
 800ff1a:	005b      	lsls	r3, r3, #1
 800ff1c:	4413      	add	r3, r2
 800ff1e:	00db      	lsls	r3, r3, #3
 800ff20:	4403      	add	r3, r0
 800ff22:	3304      	adds	r3, #4
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4299      	cmp	r1, r3
 800ff28:	d112      	bne.n	800ff50 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00c      	beq.n	800ff4a <etharp_find_entry+0xc2>
 800ff30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff34:	4989      	ldr	r1, [pc, #548]	; (801015c <etharp_find_entry+0x2d4>)
 800ff36:	4613      	mov	r3, r2
 800ff38:	005b      	lsls	r3, r3, #1
 800ff3a:	4413      	add	r3, r2
 800ff3c:	00db      	lsls	r3, r3, #3
 800ff3e:	440b      	add	r3, r1
 800ff40:	3308      	adds	r3, #8
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d102      	bne.n	800ff50 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ff4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ff4e:	e100      	b.n	8010152 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ff50:	7dfb      	ldrb	r3, [r7, #23]
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d140      	bne.n	800ffd8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ff56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff5a:	4980      	ldr	r1, [pc, #512]	; (801015c <etharp_find_entry+0x2d4>)
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	005b      	lsls	r3, r3, #1
 800ff60:	4413      	add	r3, r2
 800ff62:	00db      	lsls	r3, r3, #3
 800ff64:	440b      	add	r3, r1
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d01a      	beq.n	800ffa2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ff6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff70:	497a      	ldr	r1, [pc, #488]	; (801015c <etharp_find_entry+0x2d4>)
 800ff72:	4613      	mov	r3, r2
 800ff74:	005b      	lsls	r3, r3, #1
 800ff76:	4413      	add	r3, r2
 800ff78:	00db      	lsls	r3, r3, #3
 800ff7a:	440b      	add	r3, r1
 800ff7c:	3312      	adds	r3, #18
 800ff7e:	881b      	ldrh	r3, [r3, #0]
 800ff80:	8bba      	ldrh	r2, [r7, #28]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d845      	bhi.n	8010012 <etharp_find_entry+0x18a>
            old_queue = i;
 800ff86:	8c3b      	ldrh	r3, [r7, #32]
 800ff88:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ff8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff8e:	4973      	ldr	r1, [pc, #460]	; (801015c <etharp_find_entry+0x2d4>)
 800ff90:	4613      	mov	r3, r2
 800ff92:	005b      	lsls	r3, r3, #1
 800ff94:	4413      	add	r3, r2
 800ff96:	00db      	lsls	r3, r3, #3
 800ff98:	440b      	add	r3, r1
 800ff9a:	3312      	adds	r3, #18
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	83bb      	strh	r3, [r7, #28]
 800ffa0:	e037      	b.n	8010012 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ffa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffa6:	496d      	ldr	r1, [pc, #436]	; (801015c <etharp_find_entry+0x2d4>)
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	005b      	lsls	r3, r3, #1
 800ffac:	4413      	add	r3, r2
 800ffae:	00db      	lsls	r3, r3, #3
 800ffb0:	440b      	add	r3, r1
 800ffb2:	3312      	adds	r3, #18
 800ffb4:	881b      	ldrh	r3, [r3, #0]
 800ffb6:	8b7a      	ldrh	r2, [r7, #26]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d82a      	bhi.n	8010012 <etharp_find_entry+0x18a>
            old_pending = i;
 800ffbc:	8c3b      	ldrh	r3, [r7, #32]
 800ffbe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ffc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffc4:	4965      	ldr	r1, [pc, #404]	; (801015c <etharp_find_entry+0x2d4>)
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	4413      	add	r3, r2
 800ffcc:	00db      	lsls	r3, r3, #3
 800ffce:	440b      	add	r3, r1
 800ffd0:	3312      	adds	r3, #18
 800ffd2:	881b      	ldrh	r3, [r3, #0]
 800ffd4:	837b      	strh	r3, [r7, #26]
 800ffd6:	e01c      	b.n	8010012 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ffd8:	7dfb      	ldrb	r3, [r7, #23]
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d919      	bls.n	8010012 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ffde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffe2:	495e      	ldr	r1, [pc, #376]	; (801015c <etharp_find_entry+0x2d4>)
 800ffe4:	4613      	mov	r3, r2
 800ffe6:	005b      	lsls	r3, r3, #1
 800ffe8:	4413      	add	r3, r2
 800ffea:	00db      	lsls	r3, r3, #3
 800ffec:	440b      	add	r3, r1
 800ffee:	3312      	adds	r3, #18
 800fff0:	881b      	ldrh	r3, [r3, #0]
 800fff2:	8b3a      	ldrh	r2, [r7, #24]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d80c      	bhi.n	8010012 <etharp_find_entry+0x18a>
            old_stable = i;
 800fff8:	8c3b      	ldrh	r3, [r7, #32]
 800fffa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800fffc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010000:	4956      	ldr	r1, [pc, #344]	; (801015c <etharp_find_entry+0x2d4>)
 8010002:	4613      	mov	r3, r2
 8010004:	005b      	lsls	r3, r3, #1
 8010006:	4413      	add	r3, r2
 8010008:	00db      	lsls	r3, r3, #3
 801000a:	440b      	add	r3, r1
 801000c:	3312      	adds	r3, #18
 801000e:	881b      	ldrh	r3, [r3, #0]
 8010010:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010012:	8c3b      	ldrh	r3, [r7, #32]
 8010014:	3301      	adds	r3, #1
 8010016:	b29b      	uxth	r3, r3
 8010018:	843b      	strh	r3, [r7, #32]
 801001a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801001e:	2b09      	cmp	r3, #9
 8010020:	f77f af4c 	ble.w	800febc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010024:	7afb      	ldrb	r3, [r7, #11]
 8010026:	f003 0302 	and.w	r3, r3, #2
 801002a:	2b00      	cmp	r3, #0
 801002c:	d108      	bne.n	8010040 <etharp_find_entry+0x1b8>
 801002e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010032:	2b0a      	cmp	r3, #10
 8010034:	d107      	bne.n	8010046 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010036:	7afb      	ldrb	r3, [r7, #11]
 8010038:	f003 0301 	and.w	r3, r3, #1
 801003c:	2b00      	cmp	r3, #0
 801003e:	d102      	bne.n	8010046 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010040:	f04f 33ff 	mov.w	r3, #4294967295
 8010044:	e085      	b.n	8010152 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010046:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801004a:	2b09      	cmp	r3, #9
 801004c:	dc02      	bgt.n	8010054 <etharp_find_entry+0x1cc>
    i = empty;
 801004e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010050:	843b      	strh	r3, [r7, #32]
 8010052:	e039      	b.n	80100c8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010054:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010058:	2b09      	cmp	r3, #9
 801005a:	dc14      	bgt.n	8010086 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801005c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801005e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010064:	493d      	ldr	r1, [pc, #244]	; (801015c <etharp_find_entry+0x2d4>)
 8010066:	4613      	mov	r3, r2
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	4413      	add	r3, r2
 801006c:	00db      	lsls	r3, r3, #3
 801006e:	440b      	add	r3, r1
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d018      	beq.n	80100a8 <etharp_find_entry+0x220>
 8010076:	4b3a      	ldr	r3, [pc, #232]	; (8010160 <etharp_find_entry+0x2d8>)
 8010078:	f240 126d 	movw	r2, #365	; 0x16d
 801007c:	493b      	ldr	r1, [pc, #236]	; (801016c <etharp_find_entry+0x2e4>)
 801007e:	483a      	ldr	r0, [pc, #232]	; (8010168 <etharp_find_entry+0x2e0>)
 8010080:	f002 fa60 	bl	8012544 <iprintf>
 8010084:	e010      	b.n	80100a8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010086:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801008a:	2b09      	cmp	r3, #9
 801008c:	dc02      	bgt.n	8010094 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801008e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010090:	843b      	strh	r3, [r7, #32]
 8010092:	e009      	b.n	80100a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010094:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010098:	2b09      	cmp	r3, #9
 801009a:	dc02      	bgt.n	80100a2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801009c:	8bfb      	ldrh	r3, [r7, #30]
 801009e:	843b      	strh	r3, [r7, #32]
 80100a0:	e002      	b.n	80100a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80100a2:	f04f 33ff 	mov.w	r3, #4294967295
 80100a6:	e054      	b.n	8010152 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80100a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80100ac:	2b09      	cmp	r3, #9
 80100ae:	dd06      	ble.n	80100be <etharp_find_entry+0x236>
 80100b0:	4b2b      	ldr	r3, [pc, #172]	; (8010160 <etharp_find_entry+0x2d8>)
 80100b2:	f240 127f 	movw	r2, #383	; 0x17f
 80100b6:	492e      	ldr	r1, [pc, #184]	; (8010170 <etharp_find_entry+0x2e8>)
 80100b8:	482b      	ldr	r0, [pc, #172]	; (8010168 <etharp_find_entry+0x2e0>)
 80100ba:	f002 fa43 	bl	8012544 <iprintf>
    etharp_free_entry(i);
 80100be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7ff fe06 	bl	800fcd4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80100c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80100cc:	2b09      	cmp	r3, #9
 80100ce:	dd06      	ble.n	80100de <etharp_find_entry+0x256>
 80100d0:	4b23      	ldr	r3, [pc, #140]	; (8010160 <etharp_find_entry+0x2d8>)
 80100d2:	f240 1283 	movw	r2, #387	; 0x183
 80100d6:	4926      	ldr	r1, [pc, #152]	; (8010170 <etharp_find_entry+0x2e8>)
 80100d8:	4823      	ldr	r0, [pc, #140]	; (8010168 <etharp_find_entry+0x2e0>)
 80100da:	f002 fa33 	bl	8012544 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80100de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80100e2:	491e      	ldr	r1, [pc, #120]	; (801015c <etharp_find_entry+0x2d4>)
 80100e4:	4613      	mov	r3, r2
 80100e6:	005b      	lsls	r3, r3, #1
 80100e8:	4413      	add	r3, r2
 80100ea:	00db      	lsls	r3, r3, #3
 80100ec:	440b      	add	r3, r1
 80100ee:	3314      	adds	r3, #20
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d006      	beq.n	8010104 <etharp_find_entry+0x27c>
 80100f6:	4b1a      	ldr	r3, [pc, #104]	; (8010160 <etharp_find_entry+0x2d8>)
 80100f8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80100fc:	491d      	ldr	r1, [pc, #116]	; (8010174 <etharp_find_entry+0x2ec>)
 80100fe:	481a      	ldr	r0, [pc, #104]	; (8010168 <etharp_find_entry+0x2e0>)
 8010100:	f002 fa20 	bl	8012544 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d00b      	beq.n	8010122 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801010a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	6819      	ldr	r1, [r3, #0]
 8010112:	4812      	ldr	r0, [pc, #72]	; (801015c <etharp_find_entry+0x2d4>)
 8010114:	4613      	mov	r3, r2
 8010116:	005b      	lsls	r3, r3, #1
 8010118:	4413      	add	r3, r2
 801011a:	00db      	lsls	r3, r3, #3
 801011c:	4403      	add	r3, r0
 801011e:	3304      	adds	r3, #4
 8010120:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010122:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010126:	490d      	ldr	r1, [pc, #52]	; (801015c <etharp_find_entry+0x2d4>)
 8010128:	4613      	mov	r3, r2
 801012a:	005b      	lsls	r3, r3, #1
 801012c:	4413      	add	r3, r2
 801012e:	00db      	lsls	r3, r3, #3
 8010130:	440b      	add	r3, r1
 8010132:	3312      	adds	r3, #18
 8010134:	2200      	movs	r2, #0
 8010136:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801013c:	4907      	ldr	r1, [pc, #28]	; (801015c <etharp_find_entry+0x2d4>)
 801013e:	4613      	mov	r3, r2
 8010140:	005b      	lsls	r3, r3, #1
 8010142:	4413      	add	r3, r2
 8010144:	00db      	lsls	r3, r3, #3
 8010146:	440b      	add	r3, r1
 8010148:	3308      	adds	r3, #8
 801014a:	687a      	ldr	r2, [r7, #4]
 801014c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801014e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010152:	4618      	mov	r0, r3
 8010154:	3728      	adds	r7, #40	; 0x28
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop
 801015c:	20008094 	.word	0x20008094
 8010160:	08015e24 	.word	0x08015e24
 8010164:	08015e5c 	.word	0x08015e5c
 8010168:	08015e9c 	.word	0x08015e9c
 801016c:	08015ec4 	.word	0x08015ec4
 8010170:	08015edc 	.word	0x08015edc
 8010174:	08015ef0 	.word	0x08015ef0

08010178 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b088      	sub	sp, #32
 801017c:	af02      	add	r7, sp, #8
 801017e:	60f8      	str	r0, [r7, #12]
 8010180:	60b9      	str	r1, [r7, #8]
 8010182:	607a      	str	r2, [r7, #4]
 8010184:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801018c:	2b06      	cmp	r3, #6
 801018e:	d006      	beq.n	801019e <etharp_update_arp_entry+0x26>
 8010190:	4b48      	ldr	r3, [pc, #288]	; (80102b4 <etharp_update_arp_entry+0x13c>)
 8010192:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010196:	4948      	ldr	r1, [pc, #288]	; (80102b8 <etharp_update_arp_entry+0x140>)
 8010198:	4848      	ldr	r0, [pc, #288]	; (80102bc <etharp_update_arp_entry+0x144>)
 801019a:	f002 f9d3 	bl	8012544 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d012      	beq.n	80101ca <etharp_update_arp_entry+0x52>
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d00e      	beq.n	80101ca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68f9      	ldr	r1, [r7, #12]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f001 f924 	bl	8011400 <ip4_addr_isbroadcast_u32>
 80101b8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d105      	bne.n	80101ca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80101c6:	2be0      	cmp	r3, #224	; 0xe0
 80101c8:	d102      	bne.n	80101d0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80101ca:	f06f 030f 	mvn.w	r3, #15
 80101ce:	e06c      	b.n	80102aa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80101d0:	78fb      	ldrb	r3, [r7, #3]
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	4619      	mov	r1, r3
 80101d6:	68b8      	ldr	r0, [r7, #8]
 80101d8:	f7ff fe56 	bl	800fe88 <etharp_find_entry>
 80101dc:	4603      	mov	r3, r0
 80101de:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80101e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	da02      	bge.n	80101ee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80101e8:	8afb      	ldrh	r3, [r7, #22]
 80101ea:	b25b      	sxtb	r3, r3
 80101ec:	e05d      	b.n	80102aa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80101ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80101f2:	4933      	ldr	r1, [pc, #204]	; (80102c0 <etharp_update_arp_entry+0x148>)
 80101f4:	4613      	mov	r3, r2
 80101f6:	005b      	lsls	r3, r3, #1
 80101f8:	4413      	add	r3, r2
 80101fa:	00db      	lsls	r3, r3, #3
 80101fc:	440b      	add	r3, r1
 80101fe:	3314      	adds	r3, #20
 8010200:	2202      	movs	r2, #2
 8010202:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010204:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010208:	492d      	ldr	r1, [pc, #180]	; (80102c0 <etharp_update_arp_entry+0x148>)
 801020a:	4613      	mov	r3, r2
 801020c:	005b      	lsls	r3, r3, #1
 801020e:	4413      	add	r3, r2
 8010210:	00db      	lsls	r3, r3, #3
 8010212:	440b      	add	r3, r1
 8010214:	3308      	adds	r3, #8
 8010216:	68fa      	ldr	r2, [r7, #12]
 8010218:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801021a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801021e:	4613      	mov	r3, r2
 8010220:	005b      	lsls	r3, r3, #1
 8010222:	4413      	add	r3, r2
 8010224:	00db      	lsls	r3, r3, #3
 8010226:	3308      	adds	r3, #8
 8010228:	4a25      	ldr	r2, [pc, #148]	; (80102c0 <etharp_update_arp_entry+0x148>)
 801022a:	4413      	add	r3, r2
 801022c:	3304      	adds	r3, #4
 801022e:	2206      	movs	r2, #6
 8010230:	6879      	ldr	r1, [r7, #4]
 8010232:	4618      	mov	r0, r3
 8010234:	f002 f876 	bl	8012324 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010238:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801023c:	4920      	ldr	r1, [pc, #128]	; (80102c0 <etharp_update_arp_entry+0x148>)
 801023e:	4613      	mov	r3, r2
 8010240:	005b      	lsls	r3, r3, #1
 8010242:	4413      	add	r3, r2
 8010244:	00db      	lsls	r3, r3, #3
 8010246:	440b      	add	r3, r1
 8010248:	3312      	adds	r3, #18
 801024a:	2200      	movs	r2, #0
 801024c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801024e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010252:	491b      	ldr	r1, [pc, #108]	; (80102c0 <etharp_update_arp_entry+0x148>)
 8010254:	4613      	mov	r3, r2
 8010256:	005b      	lsls	r3, r3, #1
 8010258:	4413      	add	r3, r2
 801025a:	00db      	lsls	r3, r3, #3
 801025c:	440b      	add	r3, r1
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d021      	beq.n	80102a8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010264:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010268:	4915      	ldr	r1, [pc, #84]	; (80102c0 <etharp_update_arp_entry+0x148>)
 801026a:	4613      	mov	r3, r2
 801026c:	005b      	lsls	r3, r3, #1
 801026e:	4413      	add	r3, r2
 8010270:	00db      	lsls	r3, r3, #3
 8010272:	440b      	add	r3, r1
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010278:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801027c:	4910      	ldr	r1, [pc, #64]	; (80102c0 <etharp_update_arp_entry+0x148>)
 801027e:	4613      	mov	r3, r2
 8010280:	005b      	lsls	r3, r3, #1
 8010282:	4413      	add	r3, r2
 8010284:	00db      	lsls	r3, r3, #3
 8010286:	440b      	add	r3, r1
 8010288:	2200      	movs	r2, #0
 801028a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010292:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010296:	9300      	str	r3, [sp, #0]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6939      	ldr	r1, [r7, #16]
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f001 ffbd 	bl	801221c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80102a2:	6938      	ldr	r0, [r7, #16]
 80102a4:	f7f8 ff60 	bl	8009168 <pbuf_free>
  }
  return ERR_OK;
 80102a8:	2300      	movs	r3, #0
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3718      	adds	r7, #24
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}
 80102b2:	bf00      	nop
 80102b4:	08015e24 	.word	0x08015e24
 80102b8:	08015f1c 	.word	0x08015f1c
 80102bc:	08015e9c 	.word	0x08015e9c
 80102c0:	20008094 	.word	0x20008094

080102c4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80102cc:	2300      	movs	r3, #0
 80102ce:	60fb      	str	r3, [r7, #12]
 80102d0:	e01e      	b.n	8010310 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80102d2:	4913      	ldr	r1, [pc, #76]	; (8010320 <etharp_cleanup_netif+0x5c>)
 80102d4:	68fa      	ldr	r2, [r7, #12]
 80102d6:	4613      	mov	r3, r2
 80102d8:	005b      	lsls	r3, r3, #1
 80102da:	4413      	add	r3, r2
 80102dc:	00db      	lsls	r3, r3, #3
 80102de:	440b      	add	r3, r1
 80102e0:	3314      	adds	r3, #20
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80102e6:	7afb      	ldrb	r3, [r7, #11]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d00e      	beq.n	801030a <etharp_cleanup_netif+0x46>
 80102ec:	490c      	ldr	r1, [pc, #48]	; (8010320 <etharp_cleanup_netif+0x5c>)
 80102ee:	68fa      	ldr	r2, [r7, #12]
 80102f0:	4613      	mov	r3, r2
 80102f2:	005b      	lsls	r3, r3, #1
 80102f4:	4413      	add	r3, r2
 80102f6:	00db      	lsls	r3, r3, #3
 80102f8:	440b      	add	r3, r1
 80102fa:	3308      	adds	r3, #8
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	429a      	cmp	r2, r3
 8010302:	d102      	bne.n	801030a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010304:	68f8      	ldr	r0, [r7, #12]
 8010306:	f7ff fce5 	bl	800fcd4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	3301      	adds	r3, #1
 801030e:	60fb      	str	r3, [r7, #12]
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2b09      	cmp	r3, #9
 8010314:	dddd      	ble.n	80102d2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010316:	bf00      	nop
 8010318:	bf00      	nop
 801031a:	3710      	adds	r7, #16
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	20008094 	.word	0x20008094

08010324 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010324:	b5b0      	push	{r4, r5, r7, lr}
 8010326:	b08a      	sub	sp, #40	; 0x28
 8010328:	af04      	add	r7, sp, #16
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d107      	bne.n	8010344 <etharp_input+0x20>
 8010334:	4b3d      	ldr	r3, [pc, #244]	; (801042c <etharp_input+0x108>)
 8010336:	f240 228a 	movw	r2, #650	; 0x28a
 801033a:	493d      	ldr	r1, [pc, #244]	; (8010430 <etharp_input+0x10c>)
 801033c:	483d      	ldr	r0, [pc, #244]	; (8010434 <etharp_input+0x110>)
 801033e:	f002 f901 	bl	8012544 <iprintf>
 8010342:	e06f      	b.n	8010424 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	881b      	ldrh	r3, [r3, #0]
 801034e:	b29b      	uxth	r3, r3
 8010350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010354:	d10c      	bne.n	8010370 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801035a:	2b06      	cmp	r3, #6
 801035c:	d108      	bne.n	8010370 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010362:	2b04      	cmp	r3, #4
 8010364:	d104      	bne.n	8010370 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	885b      	ldrh	r3, [r3, #2]
 801036a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801036c:	2b08      	cmp	r3, #8
 801036e:	d003      	beq.n	8010378 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f7f8 fef9 	bl	8009168 <pbuf_free>
    return;
 8010376:	e055      	b.n	8010424 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	330e      	adds	r3, #14
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	3318      	adds	r3, #24
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	3304      	adds	r3, #4
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d102      	bne.n	8010398 <etharp_input+0x74>
    for_us = 0;
 8010392:	2300      	movs	r3, #0
 8010394:	75fb      	strb	r3, [r7, #23]
 8010396:	e009      	b.n	80103ac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	3304      	adds	r3, #4
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	bf0c      	ite	eq
 80103a4:	2301      	moveq	r3, #1
 80103a6:	2300      	movne	r3, #0
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	f103 0208 	add.w	r2, r3, #8
 80103b2:	7dfb      	ldrb	r3, [r7, #23]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d001      	beq.n	80103bc <etharp_input+0x98>
 80103b8:	2301      	movs	r3, #1
 80103ba:	e000      	b.n	80103be <etharp_input+0x9a>
 80103bc:	2302      	movs	r3, #2
 80103be:	f107 010c 	add.w	r1, r7, #12
 80103c2:	6838      	ldr	r0, [r7, #0]
 80103c4:	f7ff fed8 	bl	8010178 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	88db      	ldrh	r3, [r3, #6]
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103d2:	d003      	beq.n	80103dc <etharp_input+0xb8>
 80103d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103d8:	d01e      	beq.n	8010418 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80103da:	e020      	b.n	801041e <etharp_input+0xfa>
      if (for_us) {
 80103dc:	7dfb      	ldrb	r3, [r7, #23]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d01c      	beq.n	801041c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80103f8:	693a      	ldr	r2, [r7, #16]
 80103fa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80103fc:	2102      	movs	r1, #2
 80103fe:	9103      	str	r1, [sp, #12]
 8010400:	f107 010c 	add.w	r1, r7, #12
 8010404:	9102      	str	r1, [sp, #8]
 8010406:	9201      	str	r2, [sp, #4]
 8010408:	9300      	str	r3, [sp, #0]
 801040a:	462b      	mov	r3, r5
 801040c:	4622      	mov	r2, r4
 801040e:	4601      	mov	r1, r0
 8010410:	6838      	ldr	r0, [r7, #0]
 8010412:	f000 faeb 	bl	80109ec <etharp_raw>
      break;
 8010416:	e001      	b.n	801041c <etharp_input+0xf8>
      break;
 8010418:	bf00      	nop
 801041a:	e000      	b.n	801041e <etharp_input+0xfa>
      break;
 801041c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7f8 fea2 	bl	8009168 <pbuf_free>
}
 8010424:	3718      	adds	r7, #24
 8010426:	46bd      	mov	sp, r7
 8010428:	bdb0      	pop	{r4, r5, r7, pc}
 801042a:	bf00      	nop
 801042c:	08015e24 	.word	0x08015e24
 8010430:	08015f74 	.word	0x08015f74
 8010434:	08015e9c 	.word	0x08015e9c

08010438 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b086      	sub	sp, #24
 801043c:	af02      	add	r7, sp, #8
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	4613      	mov	r3, r2
 8010444:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010446:	79fa      	ldrb	r2, [r7, #7]
 8010448:	4944      	ldr	r1, [pc, #272]	; (801055c <etharp_output_to_arp_index+0x124>)
 801044a:	4613      	mov	r3, r2
 801044c:	005b      	lsls	r3, r3, #1
 801044e:	4413      	add	r3, r2
 8010450:	00db      	lsls	r3, r3, #3
 8010452:	440b      	add	r3, r1
 8010454:	3314      	adds	r3, #20
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	2b01      	cmp	r3, #1
 801045a:	d806      	bhi.n	801046a <etharp_output_to_arp_index+0x32>
 801045c:	4b40      	ldr	r3, [pc, #256]	; (8010560 <etharp_output_to_arp_index+0x128>)
 801045e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010462:	4940      	ldr	r1, [pc, #256]	; (8010564 <etharp_output_to_arp_index+0x12c>)
 8010464:	4840      	ldr	r0, [pc, #256]	; (8010568 <etharp_output_to_arp_index+0x130>)
 8010466:	f002 f86d 	bl	8012544 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801046a:	79fa      	ldrb	r2, [r7, #7]
 801046c:	493b      	ldr	r1, [pc, #236]	; (801055c <etharp_output_to_arp_index+0x124>)
 801046e:	4613      	mov	r3, r2
 8010470:	005b      	lsls	r3, r3, #1
 8010472:	4413      	add	r3, r2
 8010474:	00db      	lsls	r3, r3, #3
 8010476:	440b      	add	r3, r1
 8010478:	3314      	adds	r3, #20
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	2b02      	cmp	r3, #2
 801047e:	d153      	bne.n	8010528 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010480:	79fa      	ldrb	r2, [r7, #7]
 8010482:	4936      	ldr	r1, [pc, #216]	; (801055c <etharp_output_to_arp_index+0x124>)
 8010484:	4613      	mov	r3, r2
 8010486:	005b      	lsls	r3, r3, #1
 8010488:	4413      	add	r3, r2
 801048a:	00db      	lsls	r3, r3, #3
 801048c:	440b      	add	r3, r1
 801048e:	3312      	adds	r3, #18
 8010490:	881b      	ldrh	r3, [r3, #0]
 8010492:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010496:	d919      	bls.n	80104cc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010498:	79fa      	ldrb	r2, [r7, #7]
 801049a:	4613      	mov	r3, r2
 801049c:	005b      	lsls	r3, r3, #1
 801049e:	4413      	add	r3, r2
 80104a0:	00db      	lsls	r3, r3, #3
 80104a2:	4a2e      	ldr	r2, [pc, #184]	; (801055c <etharp_output_to_arp_index+0x124>)
 80104a4:	4413      	add	r3, r2
 80104a6:	3304      	adds	r3, #4
 80104a8:	4619      	mov	r1, r3
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	f000 fb4c 	bl	8010b48 <etharp_request>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d138      	bne.n	8010528 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80104b6:	79fa      	ldrb	r2, [r7, #7]
 80104b8:	4928      	ldr	r1, [pc, #160]	; (801055c <etharp_output_to_arp_index+0x124>)
 80104ba:	4613      	mov	r3, r2
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	4413      	add	r3, r2
 80104c0:	00db      	lsls	r3, r3, #3
 80104c2:	440b      	add	r3, r1
 80104c4:	3314      	adds	r3, #20
 80104c6:	2203      	movs	r2, #3
 80104c8:	701a      	strb	r2, [r3, #0]
 80104ca:	e02d      	b.n	8010528 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80104cc:	79fa      	ldrb	r2, [r7, #7]
 80104ce:	4923      	ldr	r1, [pc, #140]	; (801055c <etharp_output_to_arp_index+0x124>)
 80104d0:	4613      	mov	r3, r2
 80104d2:	005b      	lsls	r3, r3, #1
 80104d4:	4413      	add	r3, r2
 80104d6:	00db      	lsls	r3, r3, #3
 80104d8:	440b      	add	r3, r1
 80104da:	3312      	adds	r3, #18
 80104dc:	881b      	ldrh	r3, [r3, #0]
 80104de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80104e2:	d321      	bcc.n	8010528 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80104e4:	79fa      	ldrb	r2, [r7, #7]
 80104e6:	4613      	mov	r3, r2
 80104e8:	005b      	lsls	r3, r3, #1
 80104ea:	4413      	add	r3, r2
 80104ec:	00db      	lsls	r3, r3, #3
 80104ee:	4a1b      	ldr	r2, [pc, #108]	; (801055c <etharp_output_to_arp_index+0x124>)
 80104f0:	4413      	add	r3, r2
 80104f2:	1d19      	adds	r1, r3, #4
 80104f4:	79fa      	ldrb	r2, [r7, #7]
 80104f6:	4613      	mov	r3, r2
 80104f8:	005b      	lsls	r3, r3, #1
 80104fa:	4413      	add	r3, r2
 80104fc:	00db      	lsls	r3, r3, #3
 80104fe:	3308      	adds	r3, #8
 8010500:	4a16      	ldr	r2, [pc, #88]	; (801055c <etharp_output_to_arp_index+0x124>)
 8010502:	4413      	add	r3, r2
 8010504:	3304      	adds	r3, #4
 8010506:	461a      	mov	r2, r3
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	f000 fafb 	bl	8010b04 <etharp_request_dst>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d109      	bne.n	8010528 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010514:	79fa      	ldrb	r2, [r7, #7]
 8010516:	4911      	ldr	r1, [pc, #68]	; (801055c <etharp_output_to_arp_index+0x124>)
 8010518:	4613      	mov	r3, r2
 801051a:	005b      	lsls	r3, r3, #1
 801051c:	4413      	add	r3, r2
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	440b      	add	r3, r1
 8010522:	3314      	adds	r3, #20
 8010524:	2203      	movs	r2, #3
 8010526:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801052e:	79fa      	ldrb	r2, [r7, #7]
 8010530:	4613      	mov	r3, r2
 8010532:	005b      	lsls	r3, r3, #1
 8010534:	4413      	add	r3, r2
 8010536:	00db      	lsls	r3, r3, #3
 8010538:	3308      	adds	r3, #8
 801053a:	4a08      	ldr	r2, [pc, #32]	; (801055c <etharp_output_to_arp_index+0x124>)
 801053c:	4413      	add	r3, r2
 801053e:	3304      	adds	r3, #4
 8010540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010544:	9200      	str	r2, [sp, #0]
 8010546:	460a      	mov	r2, r1
 8010548:	68b9      	ldr	r1, [r7, #8]
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f001 fe66 	bl	801221c <ethernet_output>
 8010550:	4603      	mov	r3, r0
}
 8010552:	4618      	mov	r0, r3
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	20008094 	.word	0x20008094
 8010560:	08015e24 	.word	0x08015e24
 8010564:	08015f94 	.word	0x08015f94
 8010568:	08015e9c 	.word	0x08015e9c

0801056c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b08a      	sub	sp, #40	; 0x28
 8010570:	af02      	add	r7, sp, #8
 8010572:	60f8      	str	r0, [r7, #12]
 8010574:	60b9      	str	r1, [r7, #8]
 8010576:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d106      	bne.n	8010590 <etharp_output+0x24>
 8010582:	4b73      	ldr	r3, [pc, #460]	; (8010750 <etharp_output+0x1e4>)
 8010584:	f240 321e 	movw	r2, #798	; 0x31e
 8010588:	4972      	ldr	r1, [pc, #456]	; (8010754 <etharp_output+0x1e8>)
 801058a:	4873      	ldr	r0, [pc, #460]	; (8010758 <etharp_output+0x1ec>)
 801058c:	f001 ffda 	bl	8012544 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d106      	bne.n	80105a4 <etharp_output+0x38>
 8010596:	4b6e      	ldr	r3, [pc, #440]	; (8010750 <etharp_output+0x1e4>)
 8010598:	f240 321f 	movw	r2, #799	; 0x31f
 801059c:	496f      	ldr	r1, [pc, #444]	; (801075c <etharp_output+0x1f0>)
 801059e:	486e      	ldr	r0, [pc, #440]	; (8010758 <etharp_output+0x1ec>)
 80105a0:	f001 ffd0 	bl	8012544 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d106      	bne.n	80105b8 <etharp_output+0x4c>
 80105aa:	4b69      	ldr	r3, [pc, #420]	; (8010750 <etharp_output+0x1e4>)
 80105ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80105b0:	496b      	ldr	r1, [pc, #428]	; (8010760 <etharp_output+0x1f4>)
 80105b2:	4869      	ldr	r0, [pc, #420]	; (8010758 <etharp_output+0x1ec>)
 80105b4:	f001 ffc6 	bl	8012544 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	68f9      	ldr	r1, [r7, #12]
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 ff1e 	bl	8011400 <ip4_addr_isbroadcast_u32>
 80105c4:	4603      	mov	r3, r0
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d002      	beq.n	80105d0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80105ca:	4b66      	ldr	r3, [pc, #408]	; (8010764 <etharp_output+0x1f8>)
 80105cc:	61fb      	str	r3, [r7, #28]
 80105ce:	e0af      	b.n	8010730 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105d8:	2be0      	cmp	r3, #224	; 0xe0
 80105da:	d118      	bne.n	801060e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80105dc:	2301      	movs	r3, #1
 80105de:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80105e0:	2300      	movs	r3, #0
 80105e2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80105e4:	235e      	movs	r3, #94	; 0x5e
 80105e6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	3301      	adds	r3, #1
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	3302      	adds	r3, #2
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	3303      	adds	r3, #3
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010606:	f107 0310 	add.w	r3, r7, #16
 801060a:	61fb      	str	r3, [r7, #28]
 801060c:	e090      	b.n	8010730 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	3304      	adds	r3, #4
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	405a      	eors	r2, r3
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	3308      	adds	r3, #8
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	4013      	ands	r3, r2
 8010622:	2b00      	cmp	r3, #0
 8010624:	d012      	beq.n	801064c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801062c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010630:	4293      	cmp	r3, r2
 8010632:	d00b      	beq.n	801064c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	330c      	adds	r3, #12
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d003      	beq.n	8010646 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	330c      	adds	r3, #12
 8010642:	61bb      	str	r3, [r7, #24]
 8010644:	e002      	b.n	801064c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010646:	f06f 0303 	mvn.w	r3, #3
 801064a:	e07d      	b.n	8010748 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801064c:	4b46      	ldr	r3, [pc, #280]	; (8010768 <etharp_output+0x1fc>)
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	4619      	mov	r1, r3
 8010652:	4a46      	ldr	r2, [pc, #280]	; (801076c <etharp_output+0x200>)
 8010654:	460b      	mov	r3, r1
 8010656:	005b      	lsls	r3, r3, #1
 8010658:	440b      	add	r3, r1
 801065a:	00db      	lsls	r3, r3, #3
 801065c:	4413      	add	r3, r2
 801065e:	3314      	adds	r3, #20
 8010660:	781b      	ldrb	r3, [r3, #0]
 8010662:	2b01      	cmp	r3, #1
 8010664:	d925      	bls.n	80106b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010666:	4b40      	ldr	r3, [pc, #256]	; (8010768 <etharp_output+0x1fc>)
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	4619      	mov	r1, r3
 801066c:	4a3f      	ldr	r2, [pc, #252]	; (801076c <etharp_output+0x200>)
 801066e:	460b      	mov	r3, r1
 8010670:	005b      	lsls	r3, r3, #1
 8010672:	440b      	add	r3, r1
 8010674:	00db      	lsls	r3, r3, #3
 8010676:	4413      	add	r3, r2
 8010678:	3308      	adds	r3, #8
 801067a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	429a      	cmp	r2, r3
 8010680:	d117      	bne.n	80106b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	4b38      	ldr	r3, [pc, #224]	; (8010768 <etharp_output+0x1fc>)
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	4618      	mov	r0, r3
 801068c:	4937      	ldr	r1, [pc, #220]	; (801076c <etharp_output+0x200>)
 801068e:	4603      	mov	r3, r0
 8010690:	005b      	lsls	r3, r3, #1
 8010692:	4403      	add	r3, r0
 8010694:	00db      	lsls	r3, r3, #3
 8010696:	440b      	add	r3, r1
 8010698:	3304      	adds	r3, #4
 801069a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801069c:	429a      	cmp	r2, r3
 801069e:	d108      	bne.n	80106b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80106a0:	4b31      	ldr	r3, [pc, #196]	; (8010768 <etharp_output+0x1fc>)
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	461a      	mov	r2, r3
 80106a6:	68b9      	ldr	r1, [r7, #8]
 80106a8:	68f8      	ldr	r0, [r7, #12]
 80106aa:	f7ff fec5 	bl	8010438 <etharp_output_to_arp_index>
 80106ae:	4603      	mov	r3, r0
 80106b0:	e04a      	b.n	8010748 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80106b2:	2300      	movs	r3, #0
 80106b4:	75fb      	strb	r3, [r7, #23]
 80106b6:	e031      	b.n	801071c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80106b8:	7dfa      	ldrb	r2, [r7, #23]
 80106ba:	492c      	ldr	r1, [pc, #176]	; (801076c <etharp_output+0x200>)
 80106bc:	4613      	mov	r3, r2
 80106be:	005b      	lsls	r3, r3, #1
 80106c0:	4413      	add	r3, r2
 80106c2:	00db      	lsls	r3, r3, #3
 80106c4:	440b      	add	r3, r1
 80106c6:	3314      	adds	r3, #20
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	d923      	bls.n	8010716 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80106ce:	7dfa      	ldrb	r2, [r7, #23]
 80106d0:	4926      	ldr	r1, [pc, #152]	; (801076c <etharp_output+0x200>)
 80106d2:	4613      	mov	r3, r2
 80106d4:	005b      	lsls	r3, r3, #1
 80106d6:	4413      	add	r3, r2
 80106d8:	00db      	lsls	r3, r3, #3
 80106da:	440b      	add	r3, r1
 80106dc:	3308      	adds	r3, #8
 80106de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80106e0:	68fa      	ldr	r2, [r7, #12]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d117      	bne.n	8010716 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	6819      	ldr	r1, [r3, #0]
 80106ea:	7dfa      	ldrb	r2, [r7, #23]
 80106ec:	481f      	ldr	r0, [pc, #124]	; (801076c <etharp_output+0x200>)
 80106ee:	4613      	mov	r3, r2
 80106f0:	005b      	lsls	r3, r3, #1
 80106f2:	4413      	add	r3, r2
 80106f4:	00db      	lsls	r3, r3, #3
 80106f6:	4403      	add	r3, r0
 80106f8:	3304      	adds	r3, #4
 80106fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80106fc:	4299      	cmp	r1, r3
 80106fe:	d10a      	bne.n	8010716 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010700:	4a19      	ldr	r2, [pc, #100]	; (8010768 <etharp_output+0x1fc>)
 8010702:	7dfb      	ldrb	r3, [r7, #23]
 8010704:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010706:	7dfb      	ldrb	r3, [r7, #23]
 8010708:	461a      	mov	r2, r3
 801070a:	68b9      	ldr	r1, [r7, #8]
 801070c:	68f8      	ldr	r0, [r7, #12]
 801070e:	f7ff fe93 	bl	8010438 <etharp_output_to_arp_index>
 8010712:	4603      	mov	r3, r0
 8010714:	e018      	b.n	8010748 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010716:	7dfb      	ldrb	r3, [r7, #23]
 8010718:	3301      	adds	r3, #1
 801071a:	75fb      	strb	r3, [r7, #23]
 801071c:	7dfb      	ldrb	r3, [r7, #23]
 801071e:	2b09      	cmp	r3, #9
 8010720:	d9ca      	bls.n	80106b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010722:	68ba      	ldr	r2, [r7, #8]
 8010724:	69b9      	ldr	r1, [r7, #24]
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	f000 f822 	bl	8010770 <etharp_query>
 801072c:	4603      	mov	r3, r0
 801072e:	e00b      	b.n	8010748 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801073a:	9300      	str	r3, [sp, #0]
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	68b9      	ldr	r1, [r7, #8]
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f001 fd6b 	bl	801221c <ethernet_output>
 8010746:	4603      	mov	r3, r0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3720      	adds	r7, #32
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	08015e24 	.word	0x08015e24
 8010754:	08015f74 	.word	0x08015f74
 8010758:	08015e9c 	.word	0x08015e9c
 801075c:	08015fc4 	.word	0x08015fc4
 8010760:	08015f64 	.word	0x08015f64
 8010764:	080165e0 	.word	0x080165e0
 8010768:	20008184 	.word	0x20008184
 801076c:	20008094 	.word	0x20008094

08010770 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b08c      	sub	sp, #48	; 0x30
 8010774:	af02      	add	r7, sp, #8
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	3326      	adds	r3, #38	; 0x26
 8010780:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010782:	23ff      	movs	r3, #255	; 0xff
 8010784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010788:	2300      	movs	r3, #0
 801078a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	68f9      	ldr	r1, [r7, #12]
 8010792:	4618      	mov	r0, r3
 8010794:	f000 fe34 	bl	8011400 <ip4_addr_isbroadcast_u32>
 8010798:	4603      	mov	r3, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d10c      	bne.n	80107b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80107a6:	2be0      	cmp	r3, #224	; 0xe0
 80107a8:	d006      	beq.n	80107b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d003      	beq.n	80107b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d102      	bne.n	80107be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80107b8:	f06f 030f 	mvn.w	r3, #15
 80107bc:	e101      	b.n	80109c2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80107be:	68fa      	ldr	r2, [r7, #12]
 80107c0:	2101      	movs	r1, #1
 80107c2:	68b8      	ldr	r0, [r7, #8]
 80107c4:	f7ff fb60 	bl	800fe88 <etharp_find_entry>
 80107c8:	4603      	mov	r3, r0
 80107ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80107cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	da02      	bge.n	80107da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80107d4:	8a7b      	ldrh	r3, [r7, #18]
 80107d6:	b25b      	sxtb	r3, r3
 80107d8:	e0f3      	b.n	80109c2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80107da:	8a7b      	ldrh	r3, [r7, #18]
 80107dc:	2b7e      	cmp	r3, #126	; 0x7e
 80107de:	d906      	bls.n	80107ee <etharp_query+0x7e>
 80107e0:	4b7a      	ldr	r3, [pc, #488]	; (80109cc <etharp_query+0x25c>)
 80107e2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80107e6:	497a      	ldr	r1, [pc, #488]	; (80109d0 <etharp_query+0x260>)
 80107e8:	487a      	ldr	r0, [pc, #488]	; (80109d4 <etharp_query+0x264>)
 80107ea:	f001 feab 	bl	8012544 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80107ee:	8a7b      	ldrh	r3, [r7, #18]
 80107f0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80107f2:	7c7a      	ldrb	r2, [r7, #17]
 80107f4:	4978      	ldr	r1, [pc, #480]	; (80109d8 <etharp_query+0x268>)
 80107f6:	4613      	mov	r3, r2
 80107f8:	005b      	lsls	r3, r3, #1
 80107fa:	4413      	add	r3, r2
 80107fc:	00db      	lsls	r3, r3, #3
 80107fe:	440b      	add	r3, r1
 8010800:	3314      	adds	r3, #20
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d115      	bne.n	8010834 <etharp_query+0xc4>
    is_new_entry = 1;
 8010808:	2301      	movs	r3, #1
 801080a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801080c:	7c7a      	ldrb	r2, [r7, #17]
 801080e:	4972      	ldr	r1, [pc, #456]	; (80109d8 <etharp_query+0x268>)
 8010810:	4613      	mov	r3, r2
 8010812:	005b      	lsls	r3, r3, #1
 8010814:	4413      	add	r3, r2
 8010816:	00db      	lsls	r3, r3, #3
 8010818:	440b      	add	r3, r1
 801081a:	3314      	adds	r3, #20
 801081c:	2201      	movs	r2, #1
 801081e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010820:	7c7a      	ldrb	r2, [r7, #17]
 8010822:	496d      	ldr	r1, [pc, #436]	; (80109d8 <etharp_query+0x268>)
 8010824:	4613      	mov	r3, r2
 8010826:	005b      	lsls	r3, r3, #1
 8010828:	4413      	add	r3, r2
 801082a:	00db      	lsls	r3, r3, #3
 801082c:	440b      	add	r3, r1
 801082e:	3308      	adds	r3, #8
 8010830:	68fa      	ldr	r2, [r7, #12]
 8010832:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010834:	7c7a      	ldrb	r2, [r7, #17]
 8010836:	4968      	ldr	r1, [pc, #416]	; (80109d8 <etharp_query+0x268>)
 8010838:	4613      	mov	r3, r2
 801083a:	005b      	lsls	r3, r3, #1
 801083c:	4413      	add	r3, r2
 801083e:	00db      	lsls	r3, r3, #3
 8010840:	440b      	add	r3, r1
 8010842:	3314      	adds	r3, #20
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	2b01      	cmp	r3, #1
 8010848:	d011      	beq.n	801086e <etharp_query+0xfe>
 801084a:	7c7a      	ldrb	r2, [r7, #17]
 801084c:	4962      	ldr	r1, [pc, #392]	; (80109d8 <etharp_query+0x268>)
 801084e:	4613      	mov	r3, r2
 8010850:	005b      	lsls	r3, r3, #1
 8010852:	4413      	add	r3, r2
 8010854:	00db      	lsls	r3, r3, #3
 8010856:	440b      	add	r3, r1
 8010858:	3314      	adds	r3, #20
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	2b01      	cmp	r3, #1
 801085e:	d806      	bhi.n	801086e <etharp_query+0xfe>
 8010860:	4b5a      	ldr	r3, [pc, #360]	; (80109cc <etharp_query+0x25c>)
 8010862:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010866:	495d      	ldr	r1, [pc, #372]	; (80109dc <etharp_query+0x26c>)
 8010868:	485a      	ldr	r0, [pc, #360]	; (80109d4 <etharp_query+0x264>)
 801086a:	f001 fe6b 	bl	8012544 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801086e:	6a3b      	ldr	r3, [r7, #32]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d102      	bne.n	801087a <etharp_query+0x10a>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d10c      	bne.n	8010894 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801087a:	68b9      	ldr	r1, [r7, #8]
 801087c:	68f8      	ldr	r0, [r7, #12]
 801087e:	f000 f963 	bl	8010b48 <etharp_request>
 8010882:	4603      	mov	r3, r0
 8010884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d102      	bne.n	8010894 <etharp_query+0x124>
      return result;
 801088e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010892:	e096      	b.n	80109c2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d106      	bne.n	80108a8 <etharp_query+0x138>
 801089a:	4b4c      	ldr	r3, [pc, #304]	; (80109cc <etharp_query+0x25c>)
 801089c:	f240 32e1 	movw	r2, #993	; 0x3e1
 80108a0:	494f      	ldr	r1, [pc, #316]	; (80109e0 <etharp_query+0x270>)
 80108a2:	484c      	ldr	r0, [pc, #304]	; (80109d4 <etharp_query+0x264>)
 80108a4:	f001 fe4e 	bl	8012544 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80108a8:	7c7a      	ldrb	r2, [r7, #17]
 80108aa:	494b      	ldr	r1, [pc, #300]	; (80109d8 <etharp_query+0x268>)
 80108ac:	4613      	mov	r3, r2
 80108ae:	005b      	lsls	r3, r3, #1
 80108b0:	4413      	add	r3, r2
 80108b2:	00db      	lsls	r3, r3, #3
 80108b4:	440b      	add	r3, r1
 80108b6:	3314      	adds	r3, #20
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d917      	bls.n	80108ee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80108be:	4a49      	ldr	r2, [pc, #292]	; (80109e4 <etharp_query+0x274>)
 80108c0:	7c7b      	ldrb	r3, [r7, #17]
 80108c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80108c4:	7c7a      	ldrb	r2, [r7, #17]
 80108c6:	4613      	mov	r3, r2
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	4413      	add	r3, r2
 80108cc:	00db      	lsls	r3, r3, #3
 80108ce:	3308      	adds	r3, #8
 80108d0:	4a41      	ldr	r2, [pc, #260]	; (80109d8 <etharp_query+0x268>)
 80108d2:	4413      	add	r3, r2
 80108d4:	3304      	adds	r3, #4
 80108d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80108da:	9200      	str	r2, [sp, #0]
 80108dc:	697a      	ldr	r2, [r7, #20]
 80108de:	6879      	ldr	r1, [r7, #4]
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f001 fc9b 	bl	801221c <ethernet_output>
 80108e6:	4603      	mov	r3, r0
 80108e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80108ec:	e067      	b.n	80109be <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80108ee:	7c7a      	ldrb	r2, [r7, #17]
 80108f0:	4939      	ldr	r1, [pc, #228]	; (80109d8 <etharp_query+0x268>)
 80108f2:	4613      	mov	r3, r2
 80108f4:	005b      	lsls	r3, r3, #1
 80108f6:	4413      	add	r3, r2
 80108f8:	00db      	lsls	r3, r3, #3
 80108fa:	440b      	add	r3, r1
 80108fc:	3314      	adds	r3, #20
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	2b01      	cmp	r3, #1
 8010902:	d15c      	bne.n	80109be <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010904:	2300      	movs	r3, #0
 8010906:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801090c:	e01c      	b.n	8010948 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801090e:	69fb      	ldr	r3, [r7, #28]
 8010910:	895a      	ldrh	r2, [r3, #10]
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	891b      	ldrh	r3, [r3, #8]
 8010916:	429a      	cmp	r2, r3
 8010918:	d10a      	bne.n	8010930 <etharp_query+0x1c0>
 801091a:	69fb      	ldr	r3, [r7, #28]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d006      	beq.n	8010930 <etharp_query+0x1c0>
 8010922:	4b2a      	ldr	r3, [pc, #168]	; (80109cc <etharp_query+0x25c>)
 8010924:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010928:	492f      	ldr	r1, [pc, #188]	; (80109e8 <etharp_query+0x278>)
 801092a:	482a      	ldr	r0, [pc, #168]	; (80109d4 <etharp_query+0x264>)
 801092c:	f001 fe0a 	bl	8012544 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	7b1b      	ldrb	r3, [r3, #12]
 8010934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010938:	2b00      	cmp	r3, #0
 801093a:	d002      	beq.n	8010942 <etharp_query+0x1d2>
        copy_needed = 1;
 801093c:	2301      	movs	r3, #1
 801093e:	61bb      	str	r3, [r7, #24]
        break;
 8010940:	e005      	b.n	801094e <etharp_query+0x1de>
      }
      p = p->next;
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010948:	69fb      	ldr	r3, [r7, #28]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1df      	bne.n	801090e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d007      	beq.n	8010964 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	f44f 7120 	mov.w	r1, #640	; 0x280
 801095a:	200e      	movs	r0, #14
 801095c:	f7f8 fe60 	bl	8009620 <pbuf_clone>
 8010960:	61f8      	str	r0, [r7, #28]
 8010962:	e004      	b.n	801096e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010968:	69f8      	ldr	r0, [r7, #28]
 801096a:	f7f8 fc9d 	bl	80092a8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d021      	beq.n	80109b8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010974:	7c7a      	ldrb	r2, [r7, #17]
 8010976:	4918      	ldr	r1, [pc, #96]	; (80109d8 <etharp_query+0x268>)
 8010978:	4613      	mov	r3, r2
 801097a:	005b      	lsls	r3, r3, #1
 801097c:	4413      	add	r3, r2
 801097e:	00db      	lsls	r3, r3, #3
 8010980:	440b      	add	r3, r1
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d00a      	beq.n	801099e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010988:	7c7a      	ldrb	r2, [r7, #17]
 801098a:	4913      	ldr	r1, [pc, #76]	; (80109d8 <etharp_query+0x268>)
 801098c:	4613      	mov	r3, r2
 801098e:	005b      	lsls	r3, r3, #1
 8010990:	4413      	add	r3, r2
 8010992:	00db      	lsls	r3, r3, #3
 8010994:	440b      	add	r3, r1
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4618      	mov	r0, r3
 801099a:	f7f8 fbe5 	bl	8009168 <pbuf_free>
      }
      arp_table[i].q = p;
 801099e:	7c7a      	ldrb	r2, [r7, #17]
 80109a0:	490d      	ldr	r1, [pc, #52]	; (80109d8 <etharp_query+0x268>)
 80109a2:	4613      	mov	r3, r2
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	4413      	add	r3, r2
 80109a8:	00db      	lsls	r3, r3, #3
 80109aa:	440b      	add	r3, r1
 80109ac:	69fa      	ldr	r2, [r7, #28]
 80109ae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80109b0:	2300      	movs	r3, #0
 80109b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80109b6:	e002      	b.n	80109be <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80109b8:	23ff      	movs	r3, #255	; 0xff
 80109ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80109be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3728      	adds	r7, #40	; 0x28
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	08015e24 	.word	0x08015e24
 80109d0:	08015fd0 	.word	0x08015fd0
 80109d4:	08015e9c 	.word	0x08015e9c
 80109d8:	20008094 	.word	0x20008094
 80109dc:	08015fe0 	.word	0x08015fe0
 80109e0:	08015fc4 	.word	0x08015fc4
 80109e4:	20008184 	.word	0x20008184
 80109e8:	08016008 	.word	0x08016008

080109ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b08a      	sub	sp, #40	; 0x28
 80109f0:	af02      	add	r7, sp, #8
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	607a      	str	r2, [r7, #4]
 80109f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80109fa:	2300      	movs	r3, #0
 80109fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d106      	bne.n	8010a12 <etharp_raw+0x26>
 8010a04:	4b3a      	ldr	r3, [pc, #232]	; (8010af0 <etharp_raw+0x104>)
 8010a06:	f240 4257 	movw	r2, #1111	; 0x457
 8010a0a:	493a      	ldr	r1, [pc, #232]	; (8010af4 <etharp_raw+0x108>)
 8010a0c:	483a      	ldr	r0, [pc, #232]	; (8010af8 <etharp_raw+0x10c>)
 8010a0e:	f001 fd99 	bl	8012544 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010a12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a16:	211c      	movs	r1, #28
 8010a18:	200e      	movs	r0, #14
 8010a1a:	f7f8 f8c1 	bl	8008ba0 <pbuf_alloc>
 8010a1e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010a20:	69bb      	ldr	r3, [r7, #24]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d102      	bne.n	8010a2c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010a26:	f04f 33ff 	mov.w	r3, #4294967295
 8010a2a:	e05d      	b.n	8010ae8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010a2c:	69bb      	ldr	r3, [r7, #24]
 8010a2e:	895b      	ldrh	r3, [r3, #10]
 8010a30:	2b1b      	cmp	r3, #27
 8010a32:	d806      	bhi.n	8010a42 <etharp_raw+0x56>
 8010a34:	4b2e      	ldr	r3, [pc, #184]	; (8010af0 <etharp_raw+0x104>)
 8010a36:	f240 4262 	movw	r2, #1122	; 0x462
 8010a3a:	4930      	ldr	r1, [pc, #192]	; (8010afc <etharp_raw+0x110>)
 8010a3c:	482e      	ldr	r0, [pc, #184]	; (8010af8 <etharp_raw+0x10c>)
 8010a3e:	f001 fd81 	bl	8012544 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010a42:	69bb      	ldr	r3, [r7, #24]
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010a48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7f6 ff76 	bl	800793c <lwip_htons>
 8010a50:	4603      	mov	r3, r0
 8010a52:	461a      	mov	r2, r3
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a5e:	2b06      	cmp	r3, #6
 8010a60:	d006      	beq.n	8010a70 <etharp_raw+0x84>
 8010a62:	4b23      	ldr	r3, [pc, #140]	; (8010af0 <etharp_raw+0x104>)
 8010a64:	f240 4269 	movw	r2, #1129	; 0x469
 8010a68:	4925      	ldr	r1, [pc, #148]	; (8010b00 <etharp_raw+0x114>)
 8010a6a:	4823      	ldr	r0, [pc, #140]	; (8010af8 <etharp_raw+0x10c>)
 8010a6c:	f001 fd6a 	bl	8012544 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	3308      	adds	r3, #8
 8010a74:	2206      	movs	r2, #6
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f001 fc53 	bl	8012324 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	3312      	adds	r3, #18
 8010a82:	2206      	movs	r2, #6
 8010a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a86:	4618      	mov	r0, r3
 8010a88:	f001 fc4c 	bl	8012324 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	330e      	adds	r3, #14
 8010a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a92:	6812      	ldr	r2, [r2, #0]
 8010a94:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	3318      	adds	r3, #24
 8010a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a9c:	6812      	ldr	r2, [r2, #0]
 8010a9e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	701a      	strb	r2, [r3, #0]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	f042 0201 	orr.w	r2, r2, #1
 8010aac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f042 0208 	orr.w	r2, r2, #8
 8010ab6:	709a      	strb	r2, [r3, #2]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	2206      	movs	r2, #6
 8010ac0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	2204      	movs	r2, #4
 8010ac6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010ac8:	f640 0306 	movw	r3, #2054	; 0x806
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	68ba      	ldr	r2, [r7, #8]
 8010ad2:	69b9      	ldr	r1, [r7, #24]
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f001 fba1 	bl	801221c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010ada:	69b8      	ldr	r0, [r7, #24]
 8010adc:	f7f8 fb44 	bl	8009168 <pbuf_free>
  p = NULL;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010ae4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3720      	adds	r7, #32
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	08015e24 	.word	0x08015e24
 8010af4:	08015f74 	.word	0x08015f74
 8010af8:	08015e9c 	.word	0x08015e9c
 8010afc:	08016024 	.word	0x08016024
 8010b00:	08016058 	.word	0x08016058

08010b04 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b088      	sub	sp, #32
 8010b08:	af04      	add	r7, sp, #16
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010b20:	2201      	movs	r2, #1
 8010b22:	9203      	str	r2, [sp, #12]
 8010b24:	68ba      	ldr	r2, [r7, #8]
 8010b26:	9202      	str	r2, [sp, #8]
 8010b28:	4a06      	ldr	r2, [pc, #24]	; (8010b44 <etharp_request_dst+0x40>)
 8010b2a:	9201      	str	r2, [sp, #4]
 8010b2c:	9300      	str	r3, [sp, #0]
 8010b2e:	4603      	mov	r3, r0
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f7ff ff5a 	bl	80109ec <etharp_raw>
 8010b38:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3710      	adds	r7, #16
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}
 8010b42:	bf00      	nop
 8010b44:	080165e8 	.word	0x080165e8

08010b48 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010b52:	4a05      	ldr	r2, [pc, #20]	; (8010b68 <etharp_request+0x20>)
 8010b54:	6839      	ldr	r1, [r7, #0]
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f7ff ffd4 	bl	8010b04 <etharp_request_dst>
 8010b5c:	4603      	mov	r3, r0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3708      	adds	r7, #8
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	080165e0 	.word	0x080165e0

08010b6c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b08e      	sub	sp, #56	; 0x38
 8010b70:	af04      	add	r7, sp, #16
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010b76:	4b87      	ldr	r3, [pc, #540]	; (8010d94 <icmp_input+0x228>)
 8010b78:	689b      	ldr	r3, [r3, #8]
 8010b7a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	f003 030f 	and.w	r3, r3, #15
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010b8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b8e:	2b13      	cmp	r3, #19
 8010b90:	f240 80e8 	bls.w	8010d64 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	895b      	ldrh	r3, [r3, #10]
 8010b98:	2b03      	cmp	r3, #3
 8010b9a:	f240 80e5 	bls.w	8010d68 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010ba8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f000 80d2 	beq.w	8010d56 <icmp_input+0x1ea>
 8010bb2:	2b08      	cmp	r3, #8
 8010bb4:	f040 80d2 	bne.w	8010d5c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010bb8:	4b77      	ldr	r3, [pc, #476]	; (8010d98 <icmp_input+0x22c>)
 8010bba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010bbc:	4b75      	ldr	r3, [pc, #468]	; (8010d94 <icmp_input+0x228>)
 8010bbe:	695b      	ldr	r3, [r3, #20]
 8010bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bc4:	2be0      	cmp	r3, #224	; 0xe0
 8010bc6:	f000 80d6 	beq.w	8010d76 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010bca:	4b72      	ldr	r3, [pc, #456]	; (8010d94 <icmp_input+0x228>)
 8010bcc:	695b      	ldr	r3, [r3, #20]
 8010bce:	4a71      	ldr	r2, [pc, #452]	; (8010d94 <icmp_input+0x228>)
 8010bd0:	6812      	ldr	r2, [r2, #0]
 8010bd2:	4611      	mov	r1, r2
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f000 fc13 	bl	8011400 <ip4_addr_isbroadcast_u32>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	f040 80cc 	bne.w	8010d7a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	891b      	ldrh	r3, [r3, #8]
 8010be6:	2b07      	cmp	r3, #7
 8010be8:	f240 80c0 	bls.w	8010d6c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f7f6 ff42 	bl	8007a76 <inet_chksum_pbuf>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d003      	beq.n	8010c00 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7f8 fab5 	bl	8009168 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8010bfe:	e0c5      	b.n	8010d8c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010c00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c02:	330e      	adds	r3, #14
 8010c04:	4619      	mov	r1, r3
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f7f8 fa18 	bl	800903c <pbuf_add_header>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d04b      	beq.n	8010caa <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	891a      	ldrh	r2, [r3, #8]
 8010c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c18:	4413      	add	r3, r2
 8010c1a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	891b      	ldrh	r3, [r3, #8]
 8010c20:	8b7a      	ldrh	r2, [r7, #26]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	f0c0 80ab 	bcc.w	8010d7e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010c28:	8b7b      	ldrh	r3, [r7, #26]
 8010c2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c2e:	4619      	mov	r1, r3
 8010c30:	200e      	movs	r0, #14
 8010c32:	f7f7 ffb5 	bl	8008ba0 <pbuf_alloc>
 8010c36:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	f000 80a1 	beq.w	8010d82 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	895b      	ldrh	r3, [r3, #10]
 8010c44:	461a      	mov	r2, r3
 8010c46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c48:	3308      	adds	r3, #8
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d203      	bcs.n	8010c56 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010c4e:	6978      	ldr	r0, [r7, #20]
 8010c50:	f7f8 fa8a 	bl	8009168 <pbuf_free>
          goto icmperr;
 8010c54:	e096      	b.n	8010d84 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f001 fb60 	bl	8012324 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010c64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c66:	4619      	mov	r1, r3
 8010c68:	6978      	ldr	r0, [r7, #20]
 8010c6a:	f7f8 f9f7 	bl	800905c <pbuf_remove_header>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d009      	beq.n	8010c88 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010c74:	4b49      	ldr	r3, [pc, #292]	; (8010d9c <icmp_input+0x230>)
 8010c76:	22b6      	movs	r2, #182	; 0xb6
 8010c78:	4949      	ldr	r1, [pc, #292]	; (8010da0 <icmp_input+0x234>)
 8010c7a:	484a      	ldr	r0, [pc, #296]	; (8010da4 <icmp_input+0x238>)
 8010c7c:	f001 fc62 	bl	8012544 <iprintf>
          pbuf_free(r);
 8010c80:	6978      	ldr	r0, [r7, #20]
 8010c82:	f7f8 fa71 	bl	8009168 <pbuf_free>
          goto icmperr;
 8010c86:	e07d      	b.n	8010d84 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010c88:	6879      	ldr	r1, [r7, #4]
 8010c8a:	6978      	ldr	r0, [r7, #20]
 8010c8c:	f7f8 fb84 	bl	8009398 <pbuf_copy>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d003      	beq.n	8010c9e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010c96:	6978      	ldr	r0, [r7, #20]
 8010c98:	f7f8 fa66 	bl	8009168 <pbuf_free>
          goto icmperr;
 8010c9c:	e072      	b.n	8010d84 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f7f8 fa62 	bl	8009168 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	607b      	str	r3, [r7, #4]
 8010ca8:	e00f      	b.n	8010cca <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010caa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010cac:	330e      	adds	r3, #14
 8010cae:	4619      	mov	r1, r3
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f7f8 f9d3 	bl	800905c <pbuf_remove_header>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d006      	beq.n	8010cca <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010cbc:	4b37      	ldr	r3, [pc, #220]	; (8010d9c <icmp_input+0x230>)
 8010cbe:	22c7      	movs	r2, #199	; 0xc7
 8010cc0:	4939      	ldr	r1, [pc, #228]	; (8010da8 <icmp_input+0x23c>)
 8010cc2:	4838      	ldr	r0, [pc, #224]	; (8010da4 <icmp_input+0x238>)
 8010cc4:	f001 fc3e 	bl	8012544 <iprintf>
          goto icmperr;
 8010cc8:	e05c      	b.n	8010d84 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010cd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f7f8 f9b1 	bl	800903c <pbuf_add_header>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d13c      	bne.n	8010d5a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010ce6:	69fb      	ldr	r3, [r7, #28]
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010cee:	4b29      	ldr	r3, [pc, #164]	; (8010d94 <icmp_input+0x228>)
 8010cf0:	691a      	ldr	r2, [r3, #16]
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	885b      	ldrh	r3, [r3, #2]
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d907      	bls.n	8010d1a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	885b      	ldrh	r3, [r3, #2]
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	3309      	adds	r3, #9
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	805a      	strh	r2, [r3, #2]
 8010d18:	e006      	b.n	8010d28 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	885b      	ldrh	r3, [r3, #2]
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	3308      	adds	r3, #8
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	693b      	ldr	r3, [r7, #16]
 8010d26:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	22ff      	movs	r2, #255	; 0xff
 8010d2c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2200      	movs	r2, #0
 8010d32:	729a      	strb	r2, [r3, #10]
 8010d34:	2200      	movs	r2, #0
 8010d36:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	9302      	str	r3, [sp, #8]
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	9301      	str	r3, [sp, #4]
 8010d40:	2300      	movs	r3, #0
 8010d42:	9300      	str	r3, [sp, #0]
 8010d44:	23ff      	movs	r3, #255	; 0xff
 8010d46:	2200      	movs	r2, #0
 8010d48:	69f9      	ldr	r1, [r7, #28]
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 fa80 	bl	8011250 <ip4_output_if>
 8010d50:	4603      	mov	r3, r0
 8010d52:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010d54:	e001      	b.n	8010d5a <icmp_input+0x1ee>
      break;
 8010d56:	bf00      	nop
 8010d58:	e000      	b.n	8010d5c <icmp_input+0x1f0>
      break;
 8010d5a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f7f8 fa03 	bl	8009168 <pbuf_free>
  return;
 8010d62:	e013      	b.n	8010d8c <icmp_input+0x220>
    goto lenerr;
 8010d64:	bf00      	nop
 8010d66:	e002      	b.n	8010d6e <icmp_input+0x202>
    goto lenerr;
 8010d68:	bf00      	nop
 8010d6a:	e000      	b.n	8010d6e <icmp_input+0x202>
        goto lenerr;
 8010d6c:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7f8 f9fa 	bl	8009168 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010d74:	e00a      	b.n	8010d8c <icmp_input+0x220>
        goto icmperr;
 8010d76:	bf00      	nop
 8010d78:	e004      	b.n	8010d84 <icmp_input+0x218>
        goto icmperr;
 8010d7a:	bf00      	nop
 8010d7c:	e002      	b.n	8010d84 <icmp_input+0x218>
          goto icmperr;
 8010d7e:	bf00      	nop
 8010d80:	e000      	b.n	8010d84 <icmp_input+0x218>
          goto icmperr;
 8010d82:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7f8 f9ef 	bl	8009168 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010d8a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010d8c:	3728      	adds	r7, #40	; 0x28
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	20005118 	.word	0x20005118
 8010d98:	2000512c 	.word	0x2000512c
 8010d9c:	0801609c 	.word	0x0801609c
 8010da0:	080160d4 	.word	0x080160d4
 8010da4:	0801610c 	.word	0x0801610c
 8010da8:	08016134 	.word	0x08016134

08010dac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	460b      	mov	r3, r1
 8010db6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010db8:	78fb      	ldrb	r3, [r7, #3]
 8010dba:	461a      	mov	r2, r3
 8010dbc:	2103      	movs	r1, #3
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 f814 	bl	8010dec <icmp_send_response>
}
 8010dc4:	bf00      	nop
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010dd8:	78fb      	ldrb	r3, [r7, #3]
 8010dda:	461a      	mov	r2, r3
 8010ddc:	210b      	movs	r1, #11
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f000 f804 	bl	8010dec <icmp_send_response>
}
 8010de4:	bf00      	nop
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b08c      	sub	sp, #48	; 0x30
 8010df0:	af04      	add	r7, sp, #16
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	460b      	mov	r3, r1
 8010df6:	70fb      	strb	r3, [r7, #3]
 8010df8:	4613      	mov	r3, r2
 8010dfa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010dfc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e00:	2124      	movs	r1, #36	; 0x24
 8010e02:	2022      	movs	r0, #34	; 0x22
 8010e04:	f7f7 fecc 	bl	8008ba0 <pbuf_alloc>
 8010e08:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d056      	beq.n	8010ebe <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	895b      	ldrh	r3, [r3, #10]
 8010e14:	2b23      	cmp	r3, #35	; 0x23
 8010e16:	d806      	bhi.n	8010e26 <icmp_send_response+0x3a>
 8010e18:	4b2b      	ldr	r3, [pc, #172]	; (8010ec8 <icmp_send_response+0xdc>)
 8010e1a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010e1e:	492b      	ldr	r1, [pc, #172]	; (8010ecc <icmp_send_response+0xe0>)
 8010e20:	482b      	ldr	r0, [pc, #172]	; (8010ed0 <icmp_send_response+0xe4>)
 8010e22:	f001 fb8f 	bl	8012544 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	78fa      	ldrb	r2, [r7, #3]
 8010e36:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	78ba      	ldrb	r2, [r7, #2]
 8010e3c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	2200      	movs	r2, #0
 8010e42:	711a      	strb	r2, [r3, #4]
 8010e44:	2200      	movs	r2, #0
 8010e46:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	719a      	strb	r2, [r3, #6]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	f103 0008 	add.w	r0, r3, #8
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	221c      	movs	r2, #28
 8010e60:	4619      	mov	r1, r3
 8010e62:	f001 fa5f 	bl	8012324 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010e6c:	f107 030c 	add.w	r3, r7, #12
 8010e70:	4618      	mov	r0, r3
 8010e72:	f000 f82f 	bl	8010ed4 <ip4_route>
 8010e76:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d01b      	beq.n	8010eb6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	2200      	movs	r2, #0
 8010e82:	709a      	strb	r2, [r3, #2]
 8010e84:	2200      	movs	r2, #0
 8010e86:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	895b      	ldrh	r3, [r3, #10]
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	6978      	ldr	r0, [r7, #20]
 8010e90:	f7f6 fddf 	bl	8007a52 <inet_chksum>
 8010e94:	4603      	mov	r3, r0
 8010e96:	461a      	mov	r2, r3
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010e9c:	f107 020c 	add.w	r2, r7, #12
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	9302      	str	r3, [sp, #8]
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	9300      	str	r3, [sp, #0]
 8010eac:	23ff      	movs	r3, #255	; 0xff
 8010eae:	2100      	movs	r1, #0
 8010eb0:	69f8      	ldr	r0, [r7, #28]
 8010eb2:	f000 f9cd 	bl	8011250 <ip4_output_if>
  }
  pbuf_free(q);
 8010eb6:	69f8      	ldr	r0, [r7, #28]
 8010eb8:	f7f8 f956 	bl	8009168 <pbuf_free>
 8010ebc:	e000      	b.n	8010ec0 <icmp_send_response+0xd4>
    return;
 8010ebe:	bf00      	nop
}
 8010ec0:	3720      	adds	r7, #32
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	0801609c 	.word	0x0801609c
 8010ecc:	08016168 	.word	0x08016168
 8010ed0:	0801610c 	.word	0x0801610c

08010ed4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	b085      	sub	sp, #20
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010edc:	4b33      	ldr	r3, [pc, #204]	; (8010fac <ip4_route+0xd8>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	60fb      	str	r3, [r7, #12]
 8010ee2:	e036      	b.n	8010f52 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010eea:	f003 0301 	and.w	r3, r3, #1
 8010eee:	b2db      	uxtb	r3, r3
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d02b      	beq.n	8010f4c <ip4_route+0x78>
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010efa:	089b      	lsrs	r3, r3, #2
 8010efc:	f003 0301 	and.w	r3, r3, #1
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d022      	beq.n	8010f4c <ip4_route+0x78>
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	3304      	adds	r3, #4
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d01d      	beq.n	8010f4c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	3304      	adds	r3, #4
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	405a      	eors	r2, r3
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	3308      	adds	r3, #8
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	4013      	ands	r3, r2
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d101      	bne.n	8010f2c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	e038      	b.n	8010f9e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f32:	f003 0302 	and.w	r3, r3, #2
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d108      	bne.n	8010f4c <ip4_route+0x78>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	330c      	adds	r3, #12
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d101      	bne.n	8010f4c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	e028      	b.n	8010f9e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	60fb      	str	r3, [r7, #12]
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d1c5      	bne.n	8010ee4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010f58:	4b15      	ldr	r3, [pc, #84]	; (8010fb0 <ip4_route+0xdc>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d01a      	beq.n	8010f96 <ip4_route+0xc2>
 8010f60:	4b13      	ldr	r3, [pc, #76]	; (8010fb0 <ip4_route+0xdc>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f68:	f003 0301 	and.w	r3, r3, #1
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d012      	beq.n	8010f96 <ip4_route+0xc2>
 8010f70:	4b0f      	ldr	r3, [pc, #60]	; (8010fb0 <ip4_route+0xdc>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f78:	f003 0304 	and.w	r3, r3, #4
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00a      	beq.n	8010f96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010f80:	4b0b      	ldr	r3, [pc, #44]	; (8010fb0 <ip4_route+0xdc>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	3304      	adds	r3, #4
 8010f86:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d004      	beq.n	8010f96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	2b7f      	cmp	r3, #127	; 0x7f
 8010f94:	d101      	bne.n	8010f9a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010f96:	2300      	movs	r3, #0
 8010f98:	e001      	b.n	8010f9e <ip4_route+0xca>
  }

  return netif_default;
 8010f9a:	4b05      	ldr	r3, [pc, #20]	; (8010fb0 <ip4_route+0xdc>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3714      	adds	r7, #20
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop
 8010fac:	20008028 	.word	0x20008028
 8010fb0:	2000802c 	.word	0x2000802c

08010fb4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fc2:	f003 0301 	and.w	r3, r3, #1
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d016      	beq.n	8010ffa <ip4_input_accept+0x46>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	3304      	adds	r3, #4
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d011      	beq.n	8010ffa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010fd6:	4b0b      	ldr	r3, [pc, #44]	; (8011004 <ip4_input_accept+0x50>)
 8010fd8:	695a      	ldr	r2, [r3, #20]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	3304      	adds	r3, #4
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d008      	beq.n	8010ff6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010fe4:	4b07      	ldr	r3, [pc, #28]	; (8011004 <ip4_input_accept+0x50>)
 8010fe6:	695b      	ldr	r3, [r3, #20]
 8010fe8:	6879      	ldr	r1, [r7, #4]
 8010fea:	4618      	mov	r0, r3
 8010fec:	f000 fa08 	bl	8011400 <ip4_addr_isbroadcast_u32>
 8010ff0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d001      	beq.n	8010ffa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e000      	b.n	8010ffc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3708      	adds	r7, #8
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	20005118 	.word	0x20005118

08011008 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b086      	sub	sp, #24
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	091b      	lsrs	r3, r3, #4
 801101e:	b2db      	uxtb	r3, r3
 8011020:	2b04      	cmp	r3, #4
 8011022:	d004      	beq.n	801102e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7f8 f89f 	bl	8009168 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801102a:	2300      	movs	r3, #0
 801102c:	e107      	b.n	801123e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	f003 030f 	and.w	r3, r3, #15
 8011036:	b2db      	uxtb	r3, r3
 8011038:	009b      	lsls	r3, r3, #2
 801103a:	b2db      	uxtb	r3, r3
 801103c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	885b      	ldrh	r3, [r3, #2]
 8011042:	b29b      	uxth	r3, r3
 8011044:	4618      	mov	r0, r3
 8011046:	f7f6 fc79 	bl	800793c <lwip_htons>
 801104a:	4603      	mov	r3, r0
 801104c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	891b      	ldrh	r3, [r3, #8]
 8011052:	89ba      	ldrh	r2, [r7, #12]
 8011054:	429a      	cmp	r2, r3
 8011056:	d204      	bcs.n	8011062 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011058:	89bb      	ldrh	r3, [r7, #12]
 801105a:	4619      	mov	r1, r3
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f7f7 fefd 	bl	8008e5c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	895b      	ldrh	r3, [r3, #10]
 8011066:	89fa      	ldrh	r2, [r7, #14]
 8011068:	429a      	cmp	r2, r3
 801106a:	d807      	bhi.n	801107c <ip4_input+0x74>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	891b      	ldrh	r3, [r3, #8]
 8011070:	89ba      	ldrh	r2, [r7, #12]
 8011072:	429a      	cmp	r2, r3
 8011074:	d802      	bhi.n	801107c <ip4_input+0x74>
 8011076:	89fb      	ldrh	r3, [r7, #14]
 8011078:	2b13      	cmp	r3, #19
 801107a:	d804      	bhi.n	8011086 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f7f8 f873 	bl	8009168 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011082:	2300      	movs	r3, #0
 8011084:	e0db      	b.n	801123e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	691b      	ldr	r3, [r3, #16]
 801108a:	4a6f      	ldr	r2, [pc, #444]	; (8011248 <ip4_input+0x240>)
 801108c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	4a6d      	ldr	r2, [pc, #436]	; (8011248 <ip4_input+0x240>)
 8011094:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011096:	4b6c      	ldr	r3, [pc, #432]	; (8011248 <ip4_input+0x240>)
 8011098:	695b      	ldr	r3, [r3, #20]
 801109a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801109e:	2be0      	cmp	r3, #224	; 0xe0
 80110a0:	d112      	bne.n	80110c8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80110a8:	f003 0301 	and.w	r3, r3, #1
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d007      	beq.n	80110c2 <ip4_input+0xba>
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	3304      	adds	r3, #4
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d002      	beq.n	80110c2 <ip4_input+0xba>
      netif = inp;
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	613b      	str	r3, [r7, #16]
 80110c0:	e02a      	b.n	8011118 <ip4_input+0x110>
    } else {
      netif = NULL;
 80110c2:	2300      	movs	r3, #0
 80110c4:	613b      	str	r3, [r7, #16]
 80110c6:	e027      	b.n	8011118 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80110c8:	6838      	ldr	r0, [r7, #0]
 80110ca:	f7ff ff73 	bl	8010fb4 <ip4_input_accept>
 80110ce:	4603      	mov	r3, r0
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d002      	beq.n	80110da <ip4_input+0xd2>
      netif = inp;
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	613b      	str	r3, [r7, #16]
 80110d8:	e01e      	b.n	8011118 <ip4_input+0x110>
    } else {
      netif = NULL;
 80110da:	2300      	movs	r3, #0
 80110dc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80110de:	4b5a      	ldr	r3, [pc, #360]	; (8011248 <ip4_input+0x240>)
 80110e0:	695b      	ldr	r3, [r3, #20]
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	2b7f      	cmp	r3, #127	; 0x7f
 80110e6:	d017      	beq.n	8011118 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80110e8:	4b58      	ldr	r3, [pc, #352]	; (801124c <ip4_input+0x244>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	613b      	str	r3, [r7, #16]
 80110ee:	e00e      	b.n	801110e <ip4_input+0x106>
          if (netif == inp) {
 80110f0:	693a      	ldr	r2, [r7, #16]
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d006      	beq.n	8011106 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80110f8:	6938      	ldr	r0, [r7, #16]
 80110fa:	f7ff ff5b 	bl	8010fb4 <ip4_input_accept>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b00      	cmp	r3, #0
 8011102:	d108      	bne.n	8011116 <ip4_input+0x10e>
 8011104:	e000      	b.n	8011108 <ip4_input+0x100>
            continue;
 8011106:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	613b      	str	r3, [r7, #16]
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d1ed      	bne.n	80110f0 <ip4_input+0xe8>
 8011114:	e000      	b.n	8011118 <ip4_input+0x110>
            break;
 8011116:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011118:	4b4b      	ldr	r3, [pc, #300]	; (8011248 <ip4_input+0x240>)
 801111a:	691b      	ldr	r3, [r3, #16]
 801111c:	6839      	ldr	r1, [r7, #0]
 801111e:	4618      	mov	r0, r3
 8011120:	f000 f96e 	bl	8011400 <ip4_addr_isbroadcast_u32>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d105      	bne.n	8011136 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801112a:	4b47      	ldr	r3, [pc, #284]	; (8011248 <ip4_input+0x240>)
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011132:	2be0      	cmp	r3, #224	; 0xe0
 8011134:	d104      	bne.n	8011140 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f7f8 f816 	bl	8009168 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801113c:	2300      	movs	r3, #0
 801113e:	e07e      	b.n	801123e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d104      	bne.n	8011150 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f7f8 f80e 	bl	8009168 <pbuf_free>
    return ERR_OK;
 801114c:	2300      	movs	r3, #0
 801114e:	e076      	b.n	801123e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	88db      	ldrh	r3, [r3, #6]
 8011154:	b29b      	uxth	r3, r3
 8011156:	461a      	mov	r2, r3
 8011158:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801115c:	4013      	ands	r3, r2
 801115e:	2b00      	cmp	r3, #0
 8011160:	d00b      	beq.n	801117a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f000 fc92 	bl	8011a8c <ip4_reass>
 8011168:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d101      	bne.n	8011174 <ip4_input+0x16c>
      return ERR_OK;
 8011170:	2300      	movs	r3, #0
 8011172:	e064      	b.n	801123e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801117a:	4a33      	ldr	r2, [pc, #204]	; (8011248 <ip4_input+0x240>)
 801117c:	693b      	ldr	r3, [r7, #16]
 801117e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011180:	4a31      	ldr	r2, [pc, #196]	; (8011248 <ip4_input+0x240>)
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011186:	4a30      	ldr	r2, [pc, #192]	; (8011248 <ip4_input+0x240>)
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	f003 030f 	and.w	r3, r3, #15
 8011194:	b2db      	uxtb	r3, r3
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	b2db      	uxtb	r3, r3
 801119a:	b29a      	uxth	r2, r3
 801119c:	4b2a      	ldr	r3, [pc, #168]	; (8011248 <ip4_input+0x240>)
 801119e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80111a0:	89fb      	ldrh	r3, [r7, #14]
 80111a2:	4619      	mov	r1, r3
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f7f7 ff59 	bl	800905c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	7a5b      	ldrb	r3, [r3, #9]
 80111ae:	2b11      	cmp	r3, #17
 80111b0:	d006      	beq.n	80111c0 <ip4_input+0x1b8>
 80111b2:	2b11      	cmp	r3, #17
 80111b4:	dc13      	bgt.n	80111de <ip4_input+0x1d6>
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	d00c      	beq.n	80111d4 <ip4_input+0x1cc>
 80111ba:	2b06      	cmp	r3, #6
 80111bc:	d005      	beq.n	80111ca <ip4_input+0x1c2>
 80111be:	e00e      	b.n	80111de <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80111c0:	6839      	ldr	r1, [r7, #0]
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f7fe fc42 	bl	800fa4c <udp_input>
        break;
 80111c8:	e026      	b.n	8011218 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80111ca:	6839      	ldr	r1, [r7, #0]
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f7fa f863 	bl	800b298 <tcp_input>
        break;
 80111d2:	e021      	b.n	8011218 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80111d4:	6839      	ldr	r1, [r7, #0]
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7ff fcc8 	bl	8010b6c <icmp_input>
        break;
 80111dc:	e01c      	b.n	8011218 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80111de:	4b1a      	ldr	r3, [pc, #104]	; (8011248 <ip4_input+0x240>)
 80111e0:	695b      	ldr	r3, [r3, #20]
 80111e2:	6939      	ldr	r1, [r7, #16]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f000 f90b 	bl	8011400 <ip4_addr_isbroadcast_u32>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d10f      	bne.n	8011210 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80111f0:	4b15      	ldr	r3, [pc, #84]	; (8011248 <ip4_input+0x240>)
 80111f2:	695b      	ldr	r3, [r3, #20]
 80111f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80111f8:	2be0      	cmp	r3, #224	; 0xe0
 80111fa:	d009      	beq.n	8011210 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80111fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011200:	4619      	mov	r1, r3
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7f7 ff9d 	bl	8009142 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011208:	2102      	movs	r1, #2
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff fdce 	bl	8010dac <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7f7 ffa9 	bl	8009168 <pbuf_free>
        break;
 8011216:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011218:	4b0b      	ldr	r3, [pc, #44]	; (8011248 <ip4_input+0x240>)
 801121a:	2200      	movs	r2, #0
 801121c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801121e:	4b0a      	ldr	r3, [pc, #40]	; (8011248 <ip4_input+0x240>)
 8011220:	2200      	movs	r2, #0
 8011222:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011224:	4b08      	ldr	r3, [pc, #32]	; (8011248 <ip4_input+0x240>)
 8011226:	2200      	movs	r2, #0
 8011228:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801122a:	4b07      	ldr	r3, [pc, #28]	; (8011248 <ip4_input+0x240>)
 801122c:	2200      	movs	r2, #0
 801122e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011230:	4b05      	ldr	r3, [pc, #20]	; (8011248 <ip4_input+0x240>)
 8011232:	2200      	movs	r2, #0
 8011234:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011236:	4b04      	ldr	r3, [pc, #16]	; (8011248 <ip4_input+0x240>)
 8011238:	2200      	movs	r2, #0
 801123a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801123c:	2300      	movs	r3, #0
}
 801123e:	4618      	mov	r0, r3
 8011240:	3718      	adds	r7, #24
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	20005118 	.word	0x20005118
 801124c:	20008028 	.word	0x20008028

08011250 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b08a      	sub	sp, #40	; 0x28
 8011254:	af04      	add	r7, sp, #16
 8011256:	60f8      	str	r0, [r7, #12]
 8011258:	60b9      	str	r1, [r7, #8]
 801125a:	607a      	str	r2, [r7, #4]
 801125c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d009      	beq.n	801127c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d003      	beq.n	8011276 <ip4_output_if+0x26>
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d102      	bne.n	801127c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011278:	3304      	adds	r3, #4
 801127a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801127c:	78fa      	ldrb	r2, [r7, #3]
 801127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011280:	9302      	str	r3, [sp, #8]
 8011282:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011286:	9301      	str	r3, [sp, #4]
 8011288:	f897 3020 	ldrb.w	r3, [r7, #32]
 801128c:	9300      	str	r3, [sp, #0]
 801128e:	4613      	mov	r3, r2
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	6979      	ldr	r1, [r7, #20]
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	f000 f805 	bl	80112a4 <ip4_output_if_src>
 801129a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801129c:	4618      	mov	r0, r3
 801129e:	3718      	adds	r7, #24
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b088      	sub	sp, #32
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	607a      	str	r2, [r7, #4]
 80112b0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	7b9b      	ldrb	r3, [r3, #14]
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d006      	beq.n	80112c8 <ip4_output_if_src+0x24>
 80112ba:	4b4b      	ldr	r3, [pc, #300]	; (80113e8 <ip4_output_if_src+0x144>)
 80112bc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80112c0:	494a      	ldr	r1, [pc, #296]	; (80113ec <ip4_output_if_src+0x148>)
 80112c2:	484b      	ldr	r0, [pc, #300]	; (80113f0 <ip4_output_if_src+0x14c>)
 80112c4:	f001 f93e 	bl	8012544 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d060      	beq.n	8011390 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80112ce:	2314      	movs	r3, #20
 80112d0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80112d2:	2114      	movs	r1, #20
 80112d4:	68f8      	ldr	r0, [r7, #12]
 80112d6:	f7f7 feb1 	bl	800903c <pbuf_add_header>
 80112da:	4603      	mov	r3, r0
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d002      	beq.n	80112e6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80112e0:	f06f 0301 	mvn.w	r3, #1
 80112e4:	e07c      	b.n	80113e0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	895b      	ldrh	r3, [r3, #10]
 80112f0:	2b13      	cmp	r3, #19
 80112f2:	d806      	bhi.n	8011302 <ip4_output_if_src+0x5e>
 80112f4:	4b3c      	ldr	r3, [pc, #240]	; (80113e8 <ip4_output_if_src+0x144>)
 80112f6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80112fa:	493e      	ldr	r1, [pc, #248]	; (80113f4 <ip4_output_if_src+0x150>)
 80112fc:	483c      	ldr	r0, [pc, #240]	; (80113f0 <ip4_output_if_src+0x14c>)
 80112fe:	f001 f921 	bl	8012544 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	78fa      	ldrb	r2, [r7, #3]
 8011306:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801130e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	69fb      	ldr	r3, [r7, #28]
 8011316:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011318:	8b7b      	ldrh	r3, [r7, #26]
 801131a:	089b      	lsrs	r3, r3, #2
 801131c:	b29b      	uxth	r3, r3
 801131e:	b2db      	uxtb	r3, r3
 8011320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011324:	b2da      	uxtb	r2, r3
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801132a:	69fb      	ldr	r3, [r7, #28]
 801132c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011330:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	891b      	ldrh	r3, [r3, #8]
 8011336:	4618      	mov	r0, r3
 8011338:	f7f6 fb00 	bl	800793c <lwip_htons>
 801133c:	4603      	mov	r3, r0
 801133e:	461a      	mov	r2, r3
 8011340:	69fb      	ldr	r3, [r7, #28]
 8011342:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011344:	69fb      	ldr	r3, [r7, #28]
 8011346:	2200      	movs	r2, #0
 8011348:	719a      	strb	r2, [r3, #6]
 801134a:	2200      	movs	r2, #0
 801134c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801134e:	4b2a      	ldr	r3, [pc, #168]	; (80113f8 <ip4_output_if_src+0x154>)
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	4618      	mov	r0, r3
 8011354:	f7f6 faf2 	bl	800793c <lwip_htons>
 8011358:	4603      	mov	r3, r0
 801135a:	461a      	mov	r2, r3
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011360:	4b25      	ldr	r3, [pc, #148]	; (80113f8 <ip4_output_if_src+0x154>)
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	3301      	adds	r3, #1
 8011366:	b29a      	uxth	r2, r3
 8011368:	4b23      	ldr	r3, [pc, #140]	; (80113f8 <ip4_output_if_src+0x154>)
 801136a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d104      	bne.n	801137c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011372:	4b22      	ldr	r3, [pc, #136]	; (80113fc <ip4_output_if_src+0x158>)
 8011374:	681a      	ldr	r2, [r3, #0]
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	60da      	str	r2, [r3, #12]
 801137a:	e003      	b.n	8011384 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	681a      	ldr	r2, [r3, #0]
 8011380:	69fb      	ldr	r3, [r7, #28]
 8011382:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	2200      	movs	r2, #0
 8011388:	729a      	strb	r2, [r3, #10]
 801138a:	2200      	movs	r2, #0
 801138c:	72da      	strb	r2, [r3, #11]
 801138e:	e00f      	b.n	80113b0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	895b      	ldrh	r3, [r3, #10]
 8011394:	2b13      	cmp	r3, #19
 8011396:	d802      	bhi.n	801139e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011398:	f06f 0301 	mvn.w	r3, #1
 801139c:	e020      	b.n	80113e0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80113a4:	69fb      	ldr	r3, [r7, #28]
 80113a6:	691b      	ldr	r3, [r3, #16]
 80113a8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80113aa:	f107 0314 	add.w	r3, r7, #20
 80113ae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80113b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d00c      	beq.n	80113d2 <ip4_output_if_src+0x12e>
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	891a      	ldrh	r2, [r3, #8]
 80113bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d906      	bls.n	80113d2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80113c4:	687a      	ldr	r2, [r7, #4]
 80113c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80113c8:	68f8      	ldr	r0, [r7, #12]
 80113ca:	f000 fd53 	bl	8011e74 <ip4_frag>
 80113ce:	4603      	mov	r3, r0
 80113d0:	e006      	b.n	80113e0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80113d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d4:	695b      	ldr	r3, [r3, #20]
 80113d6:	687a      	ldr	r2, [r7, #4]
 80113d8:	68f9      	ldr	r1, [r7, #12]
 80113da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113dc:	4798      	blx	r3
 80113de:	4603      	mov	r3, r0
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3720      	adds	r7, #32
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}
 80113e8:	08016194 	.word	0x08016194
 80113ec:	080161c8 	.word	0x080161c8
 80113f0:	080161d4 	.word	0x080161d4
 80113f4:	080161fc 	.word	0x080161fc
 80113f8:	20008186 	.word	0x20008186
 80113fc:	080165dc 	.word	0x080165dc

08011400 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011400:	b480      	push	{r7}
 8011402:	b085      	sub	sp, #20
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011414:	d002      	beq.n	801141c <ip4_addr_isbroadcast_u32+0x1c>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d101      	bne.n	8011420 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801141c:	2301      	movs	r3, #1
 801141e:	e02a      	b.n	8011476 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011426:	f003 0302 	and.w	r3, r3, #2
 801142a:	2b00      	cmp	r3, #0
 801142c:	d101      	bne.n	8011432 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801142e:	2300      	movs	r3, #0
 8011430:	e021      	b.n	8011476 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	3304      	adds	r3, #4
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	687a      	ldr	r2, [r7, #4]
 801143a:	429a      	cmp	r2, r3
 801143c:	d101      	bne.n	8011442 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801143e:	2300      	movs	r3, #0
 8011440:	e019      	b.n	8011476 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011442:	68fa      	ldr	r2, [r7, #12]
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	3304      	adds	r3, #4
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	405a      	eors	r2, r3
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	3308      	adds	r3, #8
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	4013      	ands	r3, r2
 8011454:	2b00      	cmp	r3, #0
 8011456:	d10d      	bne.n	8011474 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	3308      	adds	r3, #8
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	43da      	mvns	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	3308      	adds	r3, #8
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801146c:	429a      	cmp	r2, r3
 801146e:	d101      	bne.n	8011474 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011470:	2301      	movs	r3, #1
 8011472:	e000      	b.n	8011476 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011474:	2300      	movs	r3, #0
  }
}
 8011476:	4618      	mov	r0, r3
 8011478:	3714      	adds	r7, #20
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr
	...

08011484 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801148a:	2300      	movs	r3, #0
 801148c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801148e:	4b12      	ldr	r3, [pc, #72]	; (80114d8 <ip_reass_tmr+0x54>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011494:	e018      	b.n	80114c8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	7fdb      	ldrb	r3, [r3, #31]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d00b      	beq.n	80114b6 <ip_reass_tmr+0x32>
      r->timer--;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	7fdb      	ldrb	r3, [r3, #31]
 80114a2:	3b01      	subs	r3, #1
 80114a4:	b2da      	uxtb	r2, r3
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	60fb      	str	r3, [r7, #12]
 80114b4:	e008      	b.n	80114c8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80114c0:	68b9      	ldr	r1, [r7, #8]
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f000 f80a 	bl	80114dc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d1e3      	bne.n	8011496 <ip_reass_tmr+0x12>
    }
  }
}
 80114ce:	bf00      	nop
 80114d0:	bf00      	nop
 80114d2:	3710      	adds	r7, #16
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	20008188 	.word	0x20008188

080114dc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b088      	sub	sp, #32
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80114e6:	2300      	movs	r3, #0
 80114e8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80114ea:	683a      	ldr	r2, [r7, #0]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d105      	bne.n	80114fe <ip_reass_free_complete_datagram+0x22>
 80114f2:	4b45      	ldr	r3, [pc, #276]	; (8011608 <ip_reass_free_complete_datagram+0x12c>)
 80114f4:	22ab      	movs	r2, #171	; 0xab
 80114f6:	4945      	ldr	r1, [pc, #276]	; (801160c <ip_reass_free_complete_datagram+0x130>)
 80114f8:	4845      	ldr	r0, [pc, #276]	; (8011610 <ip_reass_free_complete_datagram+0x134>)
 80114fa:	f001 f823 	bl	8012544 <iprintf>
  if (prev != NULL) {
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d00a      	beq.n	801151a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	687a      	ldr	r2, [r7, #4]
 801150a:	429a      	cmp	r2, r3
 801150c:	d005      	beq.n	801151a <ip_reass_free_complete_datagram+0x3e>
 801150e:	4b3e      	ldr	r3, [pc, #248]	; (8011608 <ip_reass_free_complete_datagram+0x12c>)
 8011510:	22ad      	movs	r2, #173	; 0xad
 8011512:	4940      	ldr	r1, [pc, #256]	; (8011614 <ip_reass_free_complete_datagram+0x138>)
 8011514:	483e      	ldr	r0, [pc, #248]	; (8011610 <ip_reass_free_complete_datagram+0x134>)
 8011516:	f001 f815 	bl	8012544 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	889b      	ldrh	r3, [r3, #4]
 8011526:	b29b      	uxth	r3, r3
 8011528:	2b00      	cmp	r3, #0
 801152a:	d12a      	bne.n	8011582 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	681a      	ldr	r2, [r3, #0]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801153a:	69bb      	ldr	r3, [r7, #24]
 801153c:	6858      	ldr	r0, [r3, #4]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	3308      	adds	r3, #8
 8011542:	2214      	movs	r2, #20
 8011544:	4619      	mov	r1, r3
 8011546:	f000 feed 	bl	8012324 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801154a:	2101      	movs	r1, #1
 801154c:	69b8      	ldr	r0, [r7, #24]
 801154e:	f7ff fc3d 	bl	8010dcc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011552:	69b8      	ldr	r0, [r7, #24]
 8011554:	f7f7 fe90 	bl	8009278 <pbuf_clen>
 8011558:	4603      	mov	r3, r0
 801155a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801155c:	8bfa      	ldrh	r2, [r7, #30]
 801155e:	8a7b      	ldrh	r3, [r7, #18]
 8011560:	4413      	add	r3, r2
 8011562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011566:	db05      	blt.n	8011574 <ip_reass_free_complete_datagram+0x98>
 8011568:	4b27      	ldr	r3, [pc, #156]	; (8011608 <ip_reass_free_complete_datagram+0x12c>)
 801156a:	22bc      	movs	r2, #188	; 0xbc
 801156c:	492a      	ldr	r1, [pc, #168]	; (8011618 <ip_reass_free_complete_datagram+0x13c>)
 801156e:	4828      	ldr	r0, [pc, #160]	; (8011610 <ip_reass_free_complete_datagram+0x134>)
 8011570:	f000 ffe8 	bl	8012544 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011574:	8bfa      	ldrh	r2, [r7, #30]
 8011576:	8a7b      	ldrh	r3, [r7, #18]
 8011578:	4413      	add	r3, r2
 801157a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801157c:	69b8      	ldr	r0, [r7, #24]
 801157e:	f7f7 fdf3 	bl	8009168 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011588:	e01f      	b.n	80115ca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011590:	69bb      	ldr	r3, [r7, #24]
 8011592:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f7f7 fe6c 	bl	8009278 <pbuf_clen>
 80115a0:	4603      	mov	r3, r0
 80115a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80115a4:	8bfa      	ldrh	r2, [r7, #30]
 80115a6:	8a7b      	ldrh	r3, [r7, #18]
 80115a8:	4413      	add	r3, r2
 80115aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115ae:	db05      	blt.n	80115bc <ip_reass_free_complete_datagram+0xe0>
 80115b0:	4b15      	ldr	r3, [pc, #84]	; (8011608 <ip_reass_free_complete_datagram+0x12c>)
 80115b2:	22cc      	movs	r2, #204	; 0xcc
 80115b4:	4918      	ldr	r1, [pc, #96]	; (8011618 <ip_reass_free_complete_datagram+0x13c>)
 80115b6:	4816      	ldr	r0, [pc, #88]	; (8011610 <ip_reass_free_complete_datagram+0x134>)
 80115b8:	f000 ffc4 	bl	8012544 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80115bc:	8bfa      	ldrh	r2, [r7, #30]
 80115be:	8a7b      	ldrh	r3, [r7, #18]
 80115c0:	4413      	add	r3, r2
 80115c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80115c4:	68f8      	ldr	r0, [r7, #12]
 80115c6:	f7f7 fdcf 	bl	8009168 <pbuf_free>
  while (p != NULL) {
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d1dc      	bne.n	801158a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80115d0:	6839      	ldr	r1, [r7, #0]
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f000 f8c2 	bl	801175c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80115d8:	4b10      	ldr	r3, [pc, #64]	; (801161c <ip_reass_free_complete_datagram+0x140>)
 80115da:	881b      	ldrh	r3, [r3, #0]
 80115dc:	8bfa      	ldrh	r2, [r7, #30]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d905      	bls.n	80115ee <ip_reass_free_complete_datagram+0x112>
 80115e2:	4b09      	ldr	r3, [pc, #36]	; (8011608 <ip_reass_free_complete_datagram+0x12c>)
 80115e4:	22d2      	movs	r2, #210	; 0xd2
 80115e6:	490e      	ldr	r1, [pc, #56]	; (8011620 <ip_reass_free_complete_datagram+0x144>)
 80115e8:	4809      	ldr	r0, [pc, #36]	; (8011610 <ip_reass_free_complete_datagram+0x134>)
 80115ea:	f000 ffab 	bl	8012544 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80115ee:	4b0b      	ldr	r3, [pc, #44]	; (801161c <ip_reass_free_complete_datagram+0x140>)
 80115f0:	881a      	ldrh	r2, [r3, #0]
 80115f2:	8bfb      	ldrh	r3, [r7, #30]
 80115f4:	1ad3      	subs	r3, r2, r3
 80115f6:	b29a      	uxth	r2, r3
 80115f8:	4b08      	ldr	r3, [pc, #32]	; (801161c <ip_reass_free_complete_datagram+0x140>)
 80115fa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80115fc:	8bfb      	ldrh	r3, [r7, #30]
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3720      	adds	r7, #32
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop
 8011608:	0801622c 	.word	0x0801622c
 801160c:	08016268 	.word	0x08016268
 8011610:	08016274 	.word	0x08016274
 8011614:	0801629c 	.word	0x0801629c
 8011618:	080162b0 	.word	0x080162b0
 801161c:	2000818c 	.word	0x2000818c
 8011620:	080162d0 	.word	0x080162d0

08011624 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b08a      	sub	sp, #40	; 0x28
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801162e:	2300      	movs	r3, #0
 8011630:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011632:	2300      	movs	r3, #0
 8011634:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011636:	2300      	movs	r3, #0
 8011638:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801163a:	2300      	movs	r3, #0
 801163c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801163e:	2300      	movs	r3, #0
 8011640:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011642:	4b28      	ldr	r3, [pc, #160]	; (80116e4 <ip_reass_remove_oldest_datagram+0xc0>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011648:	e030      	b.n	80116ac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164c:	695a      	ldr	r2, [r3, #20]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	68db      	ldr	r3, [r3, #12]
 8011652:	429a      	cmp	r2, r3
 8011654:	d10c      	bne.n	8011670 <ip_reass_remove_oldest_datagram+0x4c>
 8011656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011658:	699a      	ldr	r2, [r3, #24]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	691b      	ldr	r3, [r3, #16]
 801165e:	429a      	cmp	r2, r3
 8011660:	d106      	bne.n	8011670 <ip_reass_remove_oldest_datagram+0x4c>
 8011662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011664:	899a      	ldrh	r2, [r3, #12]
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	889b      	ldrh	r3, [r3, #4]
 801166a:	b29b      	uxth	r3, r3
 801166c:	429a      	cmp	r2, r3
 801166e:	d014      	beq.n	801169a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	3301      	adds	r3, #1
 8011674:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011676:	6a3b      	ldr	r3, [r7, #32]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d104      	bne.n	8011686 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	61bb      	str	r3, [r7, #24]
 8011684:	e009      	b.n	801169a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011688:	7fda      	ldrb	r2, [r3, #31]
 801168a:	6a3b      	ldr	r3, [r7, #32]
 801168c:	7fdb      	ldrb	r3, [r3, #31]
 801168e:	429a      	cmp	r2, r3
 8011690:	d803      	bhi.n	801169a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011694:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011696:	69fb      	ldr	r3, [r7, #28]
 8011698:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d001      	beq.n	80116a6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80116a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80116a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80116ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d1cb      	bne.n	801164a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80116b2:	6a3b      	ldr	r3, [r7, #32]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d008      	beq.n	80116ca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80116b8:	69b9      	ldr	r1, [r7, #24]
 80116ba:	6a38      	ldr	r0, [r7, #32]
 80116bc:	f7ff ff0e 	bl	80114dc <ip_reass_free_complete_datagram>
 80116c0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80116c2:	697a      	ldr	r2, [r7, #20]
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	4413      	add	r3, r2
 80116c8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80116ca:	697a      	ldr	r2, [r7, #20]
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	da02      	bge.n	80116d8 <ip_reass_remove_oldest_datagram+0xb4>
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	dcac      	bgt.n	8011632 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80116d8:	697b      	ldr	r3, [r7, #20]
}
 80116da:	4618      	mov	r0, r3
 80116dc:	3728      	adds	r7, #40	; 0x28
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}
 80116e2:	bf00      	nop
 80116e4:	20008188 	.word	0x20008188

080116e8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80116f2:	2004      	movs	r0, #4
 80116f4:	f7f6 fe52 	bl	800839c <memp_malloc>
 80116f8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d110      	bne.n	8011722 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011700:	6839      	ldr	r1, [r7, #0]
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f7ff ff8e 	bl	8011624 <ip_reass_remove_oldest_datagram>
 8011708:	4602      	mov	r2, r0
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	4293      	cmp	r3, r2
 801170e:	dc03      	bgt.n	8011718 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011710:	2004      	movs	r0, #4
 8011712:	f7f6 fe43 	bl	800839c <memp_malloc>
 8011716:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d101      	bne.n	8011722 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801171e:	2300      	movs	r3, #0
 8011720:	e016      	b.n	8011750 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011722:	2220      	movs	r2, #32
 8011724:	2100      	movs	r1, #0
 8011726:	68f8      	ldr	r0, [r7, #12]
 8011728:	f000 fe24 	bl	8012374 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	220f      	movs	r2, #15
 8011730:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011732:	4b09      	ldr	r3, [pc, #36]	; (8011758 <ip_reass_enqueue_new_datagram+0x70>)
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801173a:	4a07      	ldr	r2, [pc, #28]	; (8011758 <ip_reass_enqueue_new_datagram+0x70>)
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	3308      	adds	r3, #8
 8011744:	2214      	movs	r2, #20
 8011746:	6879      	ldr	r1, [r7, #4]
 8011748:	4618      	mov	r0, r3
 801174a:	f000 fdeb 	bl	8012324 <memcpy>
  return ipr;
 801174e:	68fb      	ldr	r3, [r7, #12]
}
 8011750:	4618      	mov	r0, r3
 8011752:	3710      	adds	r7, #16
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}
 8011758:	20008188 	.word	0x20008188

0801175c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b082      	sub	sp, #8
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011766:	4b10      	ldr	r3, [pc, #64]	; (80117a8 <ip_reass_dequeue_datagram+0x4c>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	429a      	cmp	r2, r3
 801176e:	d104      	bne.n	801177a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	4a0c      	ldr	r2, [pc, #48]	; (80117a8 <ip_reass_dequeue_datagram+0x4c>)
 8011776:	6013      	str	r3, [r2, #0]
 8011778:	e00d      	b.n	8011796 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d106      	bne.n	801178e <ip_reass_dequeue_datagram+0x32>
 8011780:	4b0a      	ldr	r3, [pc, #40]	; (80117ac <ip_reass_dequeue_datagram+0x50>)
 8011782:	f240 1245 	movw	r2, #325	; 0x145
 8011786:	490a      	ldr	r1, [pc, #40]	; (80117b0 <ip_reass_dequeue_datagram+0x54>)
 8011788:	480a      	ldr	r0, [pc, #40]	; (80117b4 <ip_reass_dequeue_datagram+0x58>)
 801178a:	f000 fedb 	bl	8012544 <iprintf>
    prev->next = ipr->next;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681a      	ldr	r2, [r3, #0]
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011796:	6879      	ldr	r1, [r7, #4]
 8011798:	2004      	movs	r0, #4
 801179a:	f7f6 fe6f 	bl	800847c <memp_free>
}
 801179e:	bf00      	nop
 80117a0:	3708      	adds	r7, #8
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	20008188 	.word	0x20008188
 80117ac:	0801622c 	.word	0x0801622c
 80117b0:	080162f4 	.word	0x080162f4
 80117b4:	08016274 	.word	0x08016274

080117b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b08c      	sub	sp, #48	; 0x30
 80117bc:	af00      	add	r7, sp, #0
 80117be:	60f8      	str	r0, [r7, #12]
 80117c0:	60b9      	str	r1, [r7, #8]
 80117c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80117c4:	2300      	movs	r3, #0
 80117c6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80117c8:	2301      	movs	r3, #1
 80117ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	885b      	ldrh	r3, [r3, #2]
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4618      	mov	r0, r3
 80117da:	f7f6 f8af 	bl	800793c <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	f003 030f 	and.w	r3, r3, #15
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	009b      	lsls	r3, r3, #2
 80117ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80117f0:	7e7b      	ldrb	r3, [r7, #25]
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	8b7a      	ldrh	r2, [r7, #26]
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d202      	bcs.n	8011800 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80117fa:	f04f 33ff 	mov.w	r3, #4294967295
 80117fe:	e135      	b.n	8011a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011800:	7e7b      	ldrb	r3, [r7, #25]
 8011802:	b29b      	uxth	r3, r3
 8011804:	8b7a      	ldrh	r2, [r7, #26]
 8011806:	1ad3      	subs	r3, r2, r3
 8011808:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	88db      	ldrh	r3, [r3, #6]
 801180e:	b29b      	uxth	r3, r3
 8011810:	4618      	mov	r0, r3
 8011812:	f7f6 f893 	bl	800793c <lwip_htons>
 8011816:	4603      	mov	r3, r0
 8011818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801181c:	b29b      	uxth	r3, r3
 801181e:	00db      	lsls	r3, r3, #3
 8011820:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182a:	2200      	movs	r2, #0
 801182c:	701a      	strb	r2, [r3, #0]
 801182e:	2200      	movs	r2, #0
 8011830:	705a      	strb	r2, [r3, #1]
 8011832:	2200      	movs	r2, #0
 8011834:	709a      	strb	r2, [r3, #2]
 8011836:	2200      	movs	r2, #0
 8011838:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801183c:	8afa      	ldrh	r2, [r7, #22]
 801183e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011840:	8afa      	ldrh	r2, [r7, #22]
 8011842:	8b7b      	ldrh	r3, [r7, #26]
 8011844:	4413      	add	r3, r2
 8011846:	b29a      	uxth	r2, r3
 8011848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184e:	88db      	ldrh	r3, [r3, #6]
 8011850:	b29b      	uxth	r3, r3
 8011852:	8afa      	ldrh	r2, [r7, #22]
 8011854:	429a      	cmp	r2, r3
 8011856:	d902      	bls.n	801185e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011858:	f04f 33ff 	mov.w	r3, #4294967295
 801185c:	e106      	b.n	8011a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	627b      	str	r3, [r7, #36]	; 0x24
 8011864:	e068      	b.n	8011938 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186e:	889b      	ldrh	r3, [r3, #4]
 8011870:	b29a      	uxth	r2, r3
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	889b      	ldrh	r3, [r3, #4]
 8011876:	b29b      	uxth	r3, r3
 8011878:	429a      	cmp	r2, r3
 801187a:	d235      	bcs.n	80118e8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011880:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011884:	2b00      	cmp	r3, #0
 8011886:	d020      	beq.n	80118ca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801188a:	889b      	ldrh	r3, [r3, #4]
 801188c:	b29a      	uxth	r2, r3
 801188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011890:	88db      	ldrh	r3, [r3, #6]
 8011892:	b29b      	uxth	r3, r3
 8011894:	429a      	cmp	r2, r3
 8011896:	d307      	bcc.n	80118a8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801189a:	88db      	ldrh	r3, [r3, #6]
 801189c:	b29a      	uxth	r2, r3
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	889b      	ldrh	r3, [r3, #4]
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d902      	bls.n	80118ae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118a8:	f04f 33ff 	mov.w	r3, #4294967295
 80118ac:	e0de      	b.n	8011a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80118ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b0:	68ba      	ldr	r2, [r7, #8]
 80118b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80118b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b6:	88db      	ldrh	r3, [r3, #6]
 80118b8:	b29a      	uxth	r2, r3
 80118ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118bc:	889b      	ldrh	r3, [r3, #4]
 80118be:	b29b      	uxth	r3, r3
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d03d      	beq.n	8011940 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80118c4:	2300      	movs	r3, #0
 80118c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80118c8:	e03a      	b.n	8011940 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80118ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118cc:	88db      	ldrh	r3, [r3, #6]
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	889b      	ldrh	r3, [r3, #4]
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d902      	bls.n	80118e0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118da:	f04f 33ff 	mov.w	r3, #4294967295
 80118de:	e0c5      	b.n	8011a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	68ba      	ldr	r2, [r7, #8]
 80118e4:	605a      	str	r2, [r3, #4]
      break;
 80118e6:	e02b      	b.n	8011940 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80118e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ea:	889b      	ldrh	r3, [r3, #4]
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	889b      	ldrh	r3, [r3, #4]
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d102      	bne.n	80118fe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118f8:	f04f 33ff 	mov.w	r3, #4294967295
 80118fc:	e0b6      	b.n	8011a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80118fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011900:	889b      	ldrh	r3, [r3, #4]
 8011902:	b29a      	uxth	r2, r3
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	88db      	ldrh	r3, [r3, #6]
 8011908:	b29b      	uxth	r3, r3
 801190a:	429a      	cmp	r2, r3
 801190c:	d202      	bcs.n	8011914 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801190e:	f04f 33ff 	mov.w	r3, #4294967295
 8011912:	e0ab      	b.n	8011a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011916:	2b00      	cmp	r3, #0
 8011918:	d009      	beq.n	801192e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191c:	88db      	ldrh	r3, [r3, #6]
 801191e:	b29a      	uxth	r2, r3
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	889b      	ldrh	r3, [r3, #4]
 8011924:	b29b      	uxth	r3, r3
 8011926:	429a      	cmp	r2, r3
 8011928:	d001      	beq.n	801192e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801192a:	2300      	movs	r3, #0
 801192c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193a:	2b00      	cmp	r3, #0
 801193c:	d193      	bne.n	8011866 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801193e:	e000      	b.n	8011942 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011940:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011944:	2b00      	cmp	r3, #0
 8011946:	d12d      	bne.n	80119a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801194a:	2b00      	cmp	r3, #0
 801194c:	d01c      	beq.n	8011988 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011950:	88db      	ldrh	r3, [r3, #6]
 8011952:	b29a      	uxth	r2, r3
 8011954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011956:	889b      	ldrh	r3, [r3, #4]
 8011958:	b29b      	uxth	r3, r3
 801195a:	429a      	cmp	r2, r3
 801195c:	d906      	bls.n	801196c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801195e:	4b45      	ldr	r3, [pc, #276]	; (8011a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011960:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011964:	4944      	ldr	r1, [pc, #272]	; (8011a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011966:	4845      	ldr	r0, [pc, #276]	; (8011a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011968:	f000 fdec 	bl	8012544 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011974:	88db      	ldrh	r3, [r3, #6]
 8011976:	b29a      	uxth	r2, r3
 8011978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197a:	889b      	ldrh	r3, [r3, #4]
 801197c:	b29b      	uxth	r3, r3
 801197e:	429a      	cmp	r2, r3
 8011980:	d010      	beq.n	80119a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011982:	2300      	movs	r3, #0
 8011984:	623b      	str	r3, [r7, #32]
 8011986:	e00d      	b.n	80119a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	685b      	ldr	r3, [r3, #4]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d006      	beq.n	801199e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011990:	4b38      	ldr	r3, [pc, #224]	; (8011a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011992:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011996:	493a      	ldr	r1, [pc, #232]	; (8011a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011998:	4838      	ldr	r0, [pc, #224]	; (8011a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801199a:	f000 fdd3 	bl	8012544 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	68ba      	ldr	r2, [r7, #8]
 80119a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d105      	bne.n	80119b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	7f9b      	ldrb	r3, [r3, #30]
 80119ae:	f003 0301 	and.w	r3, r3, #1
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d059      	beq.n	8011a6a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80119b6:	6a3b      	ldr	r3, [r7, #32]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d04f      	beq.n	8011a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d006      	beq.n	80119d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	889b      	ldrh	r3, [r3, #4]
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d002      	beq.n	80119d8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80119d2:	2300      	movs	r3, #0
 80119d4:	623b      	str	r3, [r7, #32]
 80119d6:	e041      	b.n	8011a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80119d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119da:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80119dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80119e2:	e012      	b.n	8011a0a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80119e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80119ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ec:	88db      	ldrh	r3, [r3, #6]
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f2:	889b      	ldrh	r3, [r3, #4]
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d002      	beq.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80119fa:	2300      	movs	r3, #0
 80119fc:	623b      	str	r3, [r7, #32]
            break;
 80119fe:	e007      	b.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a02:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1e9      	bne.n	80119e4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011a10:	6a3b      	ldr	r3, [r7, #32]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d022      	beq.n	8011a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d106      	bne.n	8011a2c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011a1e:	4b15      	ldr	r3, [pc, #84]	; (8011a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011a20:	f240 12df 	movw	r2, #479	; 0x1df
 8011a24:	4917      	ldr	r1, [pc, #92]	; (8011a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011a26:	4815      	ldr	r0, [pc, #84]	; (8011a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011a28:	f000 fd8c 	bl	8012544 <iprintf>
          LWIP_ASSERT("sanity check",
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d106      	bne.n	8011a46 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011a38:	4b0e      	ldr	r3, [pc, #56]	; (8011a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011a3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011a3e:	4911      	ldr	r1, [pc, #68]	; (8011a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011a40:	480e      	ldr	r0, [pc, #56]	; (8011a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011a42:	f000 fd7f 	bl	8012544 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d006      	beq.n	8011a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011a4e:	4b09      	ldr	r3, [pc, #36]	; (8011a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011a50:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011a54:	490c      	ldr	r1, [pc, #48]	; (8011a88 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011a56:	4809      	ldr	r0, [pc, #36]	; (8011a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011a58:	f000 fd74 	bl	8012544 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011a5c:	6a3b      	ldr	r3, [r7, #32]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	bf14      	ite	ne
 8011a62:	2301      	movne	r3, #1
 8011a64:	2300      	moveq	r3, #0
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	e000      	b.n	8011a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011a6a:	2300      	movs	r3, #0
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3730      	adds	r7, #48	; 0x30
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	0801622c 	.word	0x0801622c
 8011a78:	08016310 	.word	0x08016310
 8011a7c:	08016274 	.word	0x08016274
 8011a80:	08016330 	.word	0x08016330
 8011a84:	08016368 	.word	0x08016368
 8011a88:	08016378 	.word	0x08016378

08011a8c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08e      	sub	sp, #56	; 0x38
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	f003 030f 	and.w	r3, r3, #15
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b14      	cmp	r3, #20
 8011aaa:	f040 8171 	bne.w	8011d90 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab0:	88db      	ldrh	r3, [r3, #6]
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7f5 ff41 	bl	800793c <lwip_htons>
 8011aba:	4603      	mov	r3, r0
 8011abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	00db      	lsls	r3, r3, #3
 8011ac4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac8:	885b      	ldrh	r3, [r3, #2]
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7f5 ff35 	bl	800793c <lwip_htons>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	f003 030f 	and.w	r3, r3, #15
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011aee:	429a      	cmp	r2, r3
 8011af0:	f0c0 8150 	bcc.w	8011d94 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011afc:	1ad3      	subs	r3, r2, r3
 8011afe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f7f7 fbb9 	bl	8009278 <pbuf_clen>
 8011b06:	4603      	mov	r3, r0
 8011b08:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011b0a:	4b8c      	ldr	r3, [pc, #560]	; (8011d3c <ip4_reass+0x2b0>)
 8011b0c:	881b      	ldrh	r3, [r3, #0]
 8011b0e:	461a      	mov	r2, r3
 8011b10:	8c3b      	ldrh	r3, [r7, #32]
 8011b12:	4413      	add	r3, r2
 8011b14:	2b0a      	cmp	r3, #10
 8011b16:	dd10      	ble.n	8011b3a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011b18:	8c3b      	ldrh	r3, [r7, #32]
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b1e:	f7ff fd81 	bl	8011624 <ip_reass_remove_oldest_datagram>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	f000 8137 	beq.w	8011d98 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011b2a:	4b84      	ldr	r3, [pc, #528]	; (8011d3c <ip4_reass+0x2b0>)
 8011b2c:	881b      	ldrh	r3, [r3, #0]
 8011b2e:	461a      	mov	r2, r3
 8011b30:	8c3b      	ldrh	r3, [r7, #32]
 8011b32:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011b34:	2b0a      	cmp	r3, #10
 8011b36:	f300 812f 	bgt.w	8011d98 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011b3a:	4b81      	ldr	r3, [pc, #516]	; (8011d40 <ip4_reass+0x2b4>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8011b40:	e015      	b.n	8011b6e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b44:	695a      	ldr	r2, [r3, #20]
 8011b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b48:	68db      	ldr	r3, [r3, #12]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d10c      	bne.n	8011b68 <ip4_reass+0xdc>
 8011b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b50:	699a      	ldr	r2, [r3, #24]
 8011b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b54:	691b      	ldr	r3, [r3, #16]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d106      	bne.n	8011b68 <ip4_reass+0xdc>
 8011b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b5c:	899a      	ldrh	r2, [r3, #12]
 8011b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b60:	889b      	ldrh	r3, [r3, #4]
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d006      	beq.n	8011b76 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8011b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d1e6      	bne.n	8011b42 <ip4_reass+0xb6>
 8011b74:	e000      	b.n	8011b78 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011b76:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d109      	bne.n	8011b92 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011b7e:	8c3b      	ldrh	r3, [r7, #32]
 8011b80:	4619      	mov	r1, r3
 8011b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b84:	f7ff fdb0 	bl	80116e8 <ip_reass_enqueue_new_datagram>
 8011b88:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d11c      	bne.n	8011bca <ip4_reass+0x13e>
      goto nullreturn;
 8011b90:	e105      	b.n	8011d9e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b94:	88db      	ldrh	r3, [r3, #6]
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7f5 fecf 	bl	800793c <lwip_htons>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d110      	bne.n	8011bca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011baa:	89db      	ldrh	r3, [r3, #14]
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7f5 fec5 	bl	800793c <lwip_htons>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d006      	beq.n	8011bca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbe:	3308      	adds	r3, #8
 8011bc0:	2214      	movs	r2, #20
 8011bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f000 fbad 	bl	8012324 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bcc:	88db      	ldrh	r3, [r3, #6]
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	f003 0320 	and.w	r3, r3, #32
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	bf0c      	ite	eq
 8011bd8:	2301      	moveq	r3, #1
 8011bda:	2300      	movne	r3, #0
 8011bdc:	b2db      	uxtb	r3, r3
 8011bde:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011be0:	69fb      	ldr	r3, [r7, #28]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d00e      	beq.n	8011c04 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011be6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bea:	4413      	add	r3, r2
 8011bec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011bee:	8b7a      	ldrh	r2, [r7, #26]
 8011bf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	f0c0 80a0 	bcc.w	8011d38 <ip4_reass+0x2ac>
 8011bf8:	8b7b      	ldrh	r3, [r7, #26]
 8011bfa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	f200 809a 	bhi.w	8011d38 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011c04:	69fa      	ldr	r2, [r7, #28]
 8011c06:	6879      	ldr	r1, [r7, #4]
 8011c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c0a:	f7ff fdd5 	bl	80117b8 <ip_reass_chain_frag_into_datagram_and_validate>
 8011c0e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c16:	f000 809b 	beq.w	8011d50 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011c1a:	4b48      	ldr	r3, [pc, #288]	; (8011d3c <ip4_reass+0x2b0>)
 8011c1c:	881a      	ldrh	r2, [r3, #0]
 8011c1e:	8c3b      	ldrh	r3, [r7, #32]
 8011c20:	4413      	add	r3, r2
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	4b45      	ldr	r3, [pc, #276]	; (8011d3c <ip4_reass+0x2b0>)
 8011c26:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d00d      	beq.n	8011c4a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011c2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c32:	4413      	add	r3, r2
 8011c34:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c38:	8a7a      	ldrh	r2, [r7, #18]
 8011c3a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3e:	7f9b      	ldrb	r3, [r3, #30]
 8011c40:	f043 0301 	orr.w	r3, r3, #1
 8011c44:	b2da      	uxtb	r2, r3
 8011c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c48:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d171      	bne.n	8011d34 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c52:	8b9b      	ldrh	r3, [r3, #28]
 8011c54:	3314      	adds	r3, #20
 8011c56:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c6c:	3308      	adds	r3, #8
 8011c6e:	2214      	movs	r2, #20
 8011c70:	4619      	mov	r1, r3
 8011c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c74:	f000 fb56 	bl	8012324 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011c78:	8a3b      	ldrh	r3, [r7, #16]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7f5 fe5e 	bl	800793c <lwip_htons>
 8011c80:	4603      	mov	r3, r0
 8011c82:	461a      	mov	r2, r3
 8011c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c86:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	719a      	strb	r2, [r3, #6]
 8011c8e:	2200      	movs	r2, #0
 8011c90:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c94:	2200      	movs	r2, #0
 8011c96:	729a      	strb	r2, [r3, #10]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011ca2:	e00d      	b.n	8011cc0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011caa:	2114      	movs	r1, #20
 8011cac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011cae:	f7f7 f9d5 	bl	800905c <pbuf_remove_header>
      pbuf_cat(p, r);
 8011cb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f7f7 fb19 	bl	80092ec <pbuf_cat>
      r = iprh->next_pbuf;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d1ee      	bne.n	8011ca4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011cc6:	4b1e      	ldr	r3, [pc, #120]	; (8011d40 <ip4_reass+0x2b4>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d102      	bne.n	8011cd6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cd4:	e010      	b.n	8011cf8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011cd6:	4b1a      	ldr	r3, [pc, #104]	; (8011d40 <ip4_reass+0x2b4>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cdc:	e007      	b.n	8011cee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d006      	beq.n	8011cf6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d1f4      	bne.n	8011cde <ip4_reass+0x252>
 8011cf4:	e000      	b.n	8011cf8 <ip4_reass+0x26c>
          break;
 8011cf6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cfc:	f7ff fd2e 	bl	801175c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f7f7 fab9 	bl	8009278 <pbuf_clen>
 8011d06:	4603      	mov	r3, r0
 8011d08:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011d0a:	4b0c      	ldr	r3, [pc, #48]	; (8011d3c <ip4_reass+0x2b0>)
 8011d0c:	881b      	ldrh	r3, [r3, #0]
 8011d0e:	8c3a      	ldrh	r2, [r7, #32]
 8011d10:	429a      	cmp	r2, r3
 8011d12:	d906      	bls.n	8011d22 <ip4_reass+0x296>
 8011d14:	4b0b      	ldr	r3, [pc, #44]	; (8011d44 <ip4_reass+0x2b8>)
 8011d16:	f240 229b 	movw	r2, #667	; 0x29b
 8011d1a:	490b      	ldr	r1, [pc, #44]	; (8011d48 <ip4_reass+0x2bc>)
 8011d1c:	480b      	ldr	r0, [pc, #44]	; (8011d4c <ip4_reass+0x2c0>)
 8011d1e:	f000 fc11 	bl	8012544 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011d22:	4b06      	ldr	r3, [pc, #24]	; (8011d3c <ip4_reass+0x2b0>)
 8011d24:	881a      	ldrh	r2, [r3, #0]
 8011d26:	8c3b      	ldrh	r3, [r7, #32]
 8011d28:	1ad3      	subs	r3, r2, r3
 8011d2a:	b29a      	uxth	r2, r3
 8011d2c:	4b03      	ldr	r3, [pc, #12]	; (8011d3c <ip4_reass+0x2b0>)
 8011d2e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	e038      	b.n	8011da6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011d34:	2300      	movs	r3, #0
 8011d36:	e036      	b.n	8011da6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011d38:	bf00      	nop
 8011d3a:	e00a      	b.n	8011d52 <ip4_reass+0x2c6>
 8011d3c:	2000818c 	.word	0x2000818c
 8011d40:	20008188 	.word	0x20008188
 8011d44:	0801622c 	.word	0x0801622c
 8011d48:	0801639c 	.word	0x0801639c
 8011d4c:	08016274 	.word	0x08016274
    goto nullreturn_ipr;
 8011d50:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d106      	bne.n	8011d66 <ip4_reass+0x2da>
 8011d58:	4b15      	ldr	r3, [pc, #84]	; (8011db0 <ip4_reass+0x324>)
 8011d5a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011d5e:	4915      	ldr	r1, [pc, #84]	; (8011db4 <ip4_reass+0x328>)
 8011d60:	4815      	ldr	r0, [pc, #84]	; (8011db8 <ip4_reass+0x32c>)
 8011d62:	f000 fbef 	bl	8012544 <iprintf>
  if (ipr->p == NULL) {
 8011d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d116      	bne.n	8011d9c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011d6e:	4b13      	ldr	r3, [pc, #76]	; (8011dbc <ip4_reass+0x330>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d006      	beq.n	8011d86 <ip4_reass+0x2fa>
 8011d78:	4b0d      	ldr	r3, [pc, #52]	; (8011db0 <ip4_reass+0x324>)
 8011d7a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011d7e:	4910      	ldr	r1, [pc, #64]	; (8011dc0 <ip4_reass+0x334>)
 8011d80:	480d      	ldr	r0, [pc, #52]	; (8011db8 <ip4_reass+0x32c>)
 8011d82:	f000 fbdf 	bl	8012544 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011d86:	2100      	movs	r1, #0
 8011d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d8a:	f7ff fce7 	bl	801175c <ip_reass_dequeue_datagram>
 8011d8e:	e006      	b.n	8011d9e <ip4_reass+0x312>
    goto nullreturn;
 8011d90:	bf00      	nop
 8011d92:	e004      	b.n	8011d9e <ip4_reass+0x312>
    goto nullreturn;
 8011d94:	bf00      	nop
 8011d96:	e002      	b.n	8011d9e <ip4_reass+0x312>
      goto nullreturn;
 8011d98:	bf00      	nop
 8011d9a:	e000      	b.n	8011d9e <ip4_reass+0x312>
  }

nullreturn:
 8011d9c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f7f7 f9e2 	bl	8009168 <pbuf_free>
  return NULL;
 8011da4:	2300      	movs	r3, #0
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3738      	adds	r7, #56	; 0x38
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	0801622c 	.word	0x0801622c
 8011db4:	080163b8 	.word	0x080163b8
 8011db8:	08016274 	.word	0x08016274
 8011dbc:	20008188 	.word	0x20008188
 8011dc0:	080163c4 	.word	0x080163c4

08011dc4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011dc8:	2005      	movs	r0, #5
 8011dca:	f7f6 fae7 	bl	800839c <memp_malloc>
 8011dce:	4603      	mov	r3, r0
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	bd80      	pop	{r7, pc}

08011dd4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d106      	bne.n	8011df0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011de2:	4b07      	ldr	r3, [pc, #28]	; (8011e00 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011de4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011de8:	4906      	ldr	r1, [pc, #24]	; (8011e04 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011dea:	4807      	ldr	r0, [pc, #28]	; (8011e08 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011dec:	f000 fbaa 	bl	8012544 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011df0:	6879      	ldr	r1, [r7, #4]
 8011df2:	2005      	movs	r0, #5
 8011df4:	f7f6 fb42 	bl	800847c <memp_free>
}
 8011df8:	bf00      	nop
 8011dfa:	3708      	adds	r7, #8
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	0801622c 	.word	0x0801622c
 8011e04:	080163e4 	.word	0x080163e4
 8011e08:	08016274 	.word	0x08016274

08011e0c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d106      	bne.n	8011e2c <ipfrag_free_pbuf_custom+0x20>
 8011e1e:	4b11      	ldr	r3, [pc, #68]	; (8011e64 <ipfrag_free_pbuf_custom+0x58>)
 8011e20:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011e24:	4910      	ldr	r1, [pc, #64]	; (8011e68 <ipfrag_free_pbuf_custom+0x5c>)
 8011e26:	4811      	ldr	r0, [pc, #68]	; (8011e6c <ipfrag_free_pbuf_custom+0x60>)
 8011e28:	f000 fb8c 	bl	8012544 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011e2c:	68fa      	ldr	r2, [r7, #12]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d006      	beq.n	8011e42 <ipfrag_free_pbuf_custom+0x36>
 8011e34:	4b0b      	ldr	r3, [pc, #44]	; (8011e64 <ipfrag_free_pbuf_custom+0x58>)
 8011e36:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011e3a:	490d      	ldr	r1, [pc, #52]	; (8011e70 <ipfrag_free_pbuf_custom+0x64>)
 8011e3c:	480b      	ldr	r0, [pc, #44]	; (8011e6c <ipfrag_free_pbuf_custom+0x60>)
 8011e3e:	f000 fb81 	bl	8012544 <iprintf>
  if (pcr->original != NULL) {
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	695b      	ldr	r3, [r3, #20]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d004      	beq.n	8011e54 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	695b      	ldr	r3, [r3, #20]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f7f7 f98a 	bl	8009168 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011e54:	68f8      	ldr	r0, [r7, #12]
 8011e56:	f7ff ffbd 	bl	8011dd4 <ip_frag_free_pbuf_custom_ref>
}
 8011e5a:	bf00      	nop
 8011e5c:	3710      	adds	r7, #16
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	bf00      	nop
 8011e64:	0801622c 	.word	0x0801622c
 8011e68:	080163f0 	.word	0x080163f0
 8011e6c:	08016274 	.word	0x08016274
 8011e70:	080163fc 	.word	0x080163fc

08011e74 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b094      	sub	sp, #80	; 0x50
 8011e78:	af02      	add	r7, sp, #8
 8011e7a:	60f8      	str	r0, [r7, #12]
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011e80:	2300      	movs	r3, #0
 8011e82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011e8a:	3b14      	subs	r3, #20
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	da00      	bge.n	8011e92 <ip4_frag+0x1e>
 8011e90:	3307      	adds	r3, #7
 8011e92:	10db      	asrs	r3, r3, #3
 8011e94:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011e96:	2314      	movs	r3, #20
 8011e98:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ea2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	f003 030f 	and.w	r3, r3, #15
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	009b      	lsls	r3, r3, #2
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	2b14      	cmp	r3, #20
 8011eb4:	d002      	beq.n	8011ebc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011eb6:	f06f 0305 	mvn.w	r3, #5
 8011eba:	e110      	b.n	80120de <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	895b      	ldrh	r3, [r3, #10]
 8011ec0:	2b13      	cmp	r3, #19
 8011ec2:	d809      	bhi.n	8011ed8 <ip4_frag+0x64>
 8011ec4:	4b88      	ldr	r3, [pc, #544]	; (80120e8 <ip4_frag+0x274>)
 8011ec6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011eca:	4988      	ldr	r1, [pc, #544]	; (80120ec <ip4_frag+0x278>)
 8011ecc:	4888      	ldr	r0, [pc, #544]	; (80120f0 <ip4_frag+0x27c>)
 8011ece:	f000 fb39 	bl	8012544 <iprintf>
 8011ed2:	f06f 0305 	mvn.w	r3, #5
 8011ed6:	e102      	b.n	80120de <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eda:	88db      	ldrh	r3, [r3, #6]
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7f5 fd2c 	bl	800793c <lwip_htons>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011ee8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011eea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011eee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011ef2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011ef8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	891b      	ldrh	r3, [r3, #8]
 8011efe:	3b14      	subs	r3, #20
 8011f00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011f04:	e0e1      	b.n	80120ca <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011f06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011f08:	00db      	lsls	r3, r3, #3
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f10:	4293      	cmp	r3, r2
 8011f12:	bf28      	it	cs
 8011f14:	4613      	movcs	r3, r2
 8011f16:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011f18:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f1c:	2114      	movs	r1, #20
 8011f1e:	200e      	movs	r0, #14
 8011f20:	f7f6 fe3e 	bl	8008ba0 <pbuf_alloc>
 8011f24:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	f000 80d5 	beq.w	80120d8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f30:	895b      	ldrh	r3, [r3, #10]
 8011f32:	2b13      	cmp	r3, #19
 8011f34:	d806      	bhi.n	8011f44 <ip4_frag+0xd0>
 8011f36:	4b6c      	ldr	r3, [pc, #432]	; (80120e8 <ip4_frag+0x274>)
 8011f38:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011f3c:	496d      	ldr	r1, [pc, #436]	; (80120f4 <ip4_frag+0x280>)
 8011f3e:	486c      	ldr	r0, [pc, #432]	; (80120f0 <ip4_frag+0x27c>)
 8011f40:	f000 fb00 	bl	8012544 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	2214      	movs	r2, #20
 8011f4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f000 f9e9 	bl	8012324 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011f58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011f5e:	e064      	b.n	801202a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	895a      	ldrh	r2, [r3, #10]
 8011f64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f66:	1ad3      	subs	r3, r2, r3
 8011f68:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	895b      	ldrh	r3, [r3, #10]
 8011f6e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d906      	bls.n	8011f82 <ip4_frag+0x10e>
 8011f74:	4b5c      	ldr	r3, [pc, #368]	; (80120e8 <ip4_frag+0x274>)
 8011f76:	f240 322d 	movw	r2, #813	; 0x32d
 8011f7a:	495f      	ldr	r1, [pc, #380]	; (80120f8 <ip4_frag+0x284>)
 8011f7c:	485c      	ldr	r0, [pc, #368]	; (80120f0 <ip4_frag+0x27c>)
 8011f7e:	f000 fae1 	bl	8012544 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011f82:	8bfa      	ldrh	r2, [r7, #30]
 8011f84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	bf28      	it	cs
 8011f8c:	4613      	movcs	r3, r2
 8011f8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011f92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d105      	bne.n	8011fa6 <ip4_frag+0x132>
        poff = 0;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	60fb      	str	r3, [r7, #12]
        continue;
 8011fa4:	e041      	b.n	801202a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011fa6:	f7ff ff0d 	bl	8011dc4 <ip_frag_alloc_pbuf_custom_ref>
 8011faa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011fac:	69bb      	ldr	r3, [r7, #24]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d103      	bne.n	8011fba <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fb4:	f7f7 f8d8 	bl	8009168 <pbuf_free>
        goto memerr;
 8011fb8:	e08f      	b.n	80120da <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011fba:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011fc0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fc2:	4413      	add	r3, r2
 8011fc4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011fc8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011fcc:	9201      	str	r2, [sp, #4]
 8011fce:	9300      	str	r3, [sp, #0]
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	2241      	movs	r2, #65	; 0x41
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	f7f6 ff0d 	bl	8008df4 <pbuf_alloced_custom>
 8011fda:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d106      	bne.n	8011ff0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011fe2:	69b8      	ldr	r0, [r7, #24]
 8011fe4:	f7ff fef6 	bl	8011dd4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fea:	f7f7 f8bd 	bl	8009168 <pbuf_free>
        goto memerr;
 8011fee:	e074      	b.n	80120da <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011ff0:	68f8      	ldr	r0, [r7, #12]
 8011ff2:	f7f7 f959 	bl	80092a8 <pbuf_ref>
      pcr->original = p;
 8011ff6:	69bb      	ldr	r3, [r7, #24]
 8011ff8:	68fa      	ldr	r2, [r7, #12]
 8011ffa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011ffc:	69bb      	ldr	r3, [r7, #24]
 8011ffe:	4a3f      	ldr	r2, [pc, #252]	; (80120fc <ip4_frag+0x288>)
 8012000:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012002:	6979      	ldr	r1, [r7, #20]
 8012004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012006:	f7f7 f971 	bl	80092ec <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801200a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801200e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012012:	1ad3      	subs	r3, r2, r3
 8012014:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012018:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801201c:	2b00      	cmp	r3, #0
 801201e:	d004      	beq.n	801202a <ip4_frag+0x1b6>
        poff = 0;
 8012020:	2300      	movs	r3, #0
 8012022:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801202a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801202e:	2b00      	cmp	r3, #0
 8012030:	d196      	bne.n	8011f60 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012032:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012034:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012038:	4413      	add	r3, r2
 801203a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012040:	f1a3 0213 	sub.w	r2, r3, #19
 8012044:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012048:	429a      	cmp	r2, r3
 801204a:	bfcc      	ite	gt
 801204c:	2301      	movgt	r3, #1
 801204e:	2300      	movle	r3, #0
 8012050:	b2db      	uxtb	r3, r3
 8012052:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012054:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801205c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801205e:	6a3b      	ldr	r3, [r7, #32]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d002      	beq.n	801206a <ip4_frag+0x1f6>
 8012064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012066:	2b00      	cmp	r3, #0
 8012068:	d003      	beq.n	8012072 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801206a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801206c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012070:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012072:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012074:	4618      	mov	r0, r3
 8012076:	f7f5 fc61 	bl	800793c <lwip_htons>
 801207a:	4603      	mov	r3, r0
 801207c:	461a      	mov	r2, r3
 801207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012080:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012082:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012084:	3314      	adds	r3, #20
 8012086:	b29b      	uxth	r3, r3
 8012088:	4618      	mov	r0, r3
 801208a:	f7f5 fc57 	bl	800793c <lwip_htons>
 801208e:	4603      	mov	r3, r0
 8012090:	461a      	mov	r2, r3
 8012092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012094:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012098:	2200      	movs	r2, #0
 801209a:	729a      	strb	r2, [r3, #10]
 801209c:	2200      	movs	r2, #0
 801209e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	695b      	ldr	r3, [r3, #20]
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80120a8:	68b8      	ldr	r0, [r7, #8]
 80120aa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80120ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120ae:	f7f7 f85b 	bl	8009168 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80120b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80120b8:	1ad3      	subs	r3, r2, r3
 80120ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80120be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80120c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80120c4:	4413      	add	r3, r2
 80120c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80120ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	f47f af19 	bne.w	8011f06 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80120d4:	2300      	movs	r3, #0
 80120d6:	e002      	b.n	80120de <ip4_frag+0x26a>
      goto memerr;
 80120d8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80120da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3748      	adds	r7, #72	; 0x48
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	0801622c 	.word	0x0801622c
 80120ec:	08016408 	.word	0x08016408
 80120f0:	08016274 	.word	0x08016274
 80120f4:	08016424 	.word	0x08016424
 80120f8:	08016444 	.word	0x08016444
 80120fc:	08011e0d 	.word	0x08011e0d

08012100 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b086      	sub	sp, #24
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801210a:	230e      	movs	r3, #14
 801210c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	895b      	ldrh	r3, [r3, #10]
 8012112:	2b0e      	cmp	r3, #14
 8012114:	d96e      	bls.n	80121f4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	7bdb      	ldrb	r3, [r3, #15]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d106      	bne.n	801212c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012124:	3301      	adds	r3, #1
 8012126:	b2da      	uxtb	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	7b1a      	ldrb	r2, [r3, #12]
 8012136:	7b5b      	ldrb	r3, [r3, #13]
 8012138:	021b      	lsls	r3, r3, #8
 801213a:	4313      	orrs	r3, r2
 801213c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	f003 0301 	and.w	r3, r3, #1
 8012146:	2b00      	cmp	r3, #0
 8012148:	d023      	beq.n	8012192 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	2b01      	cmp	r3, #1
 8012150:	d10f      	bne.n	8012172 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	785b      	ldrb	r3, [r3, #1]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d11b      	bne.n	8012192 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801215e:	2b5e      	cmp	r3, #94	; 0x5e
 8012160:	d117      	bne.n	8012192 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	7b5b      	ldrb	r3, [r3, #13]
 8012166:	f043 0310 	orr.w	r3, r3, #16
 801216a:	b2da      	uxtb	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	735a      	strb	r2, [r3, #13]
 8012170:	e00f      	b.n	8012192 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	2206      	movs	r2, #6
 8012176:	4928      	ldr	r1, [pc, #160]	; (8012218 <ethernet_input+0x118>)
 8012178:	4618      	mov	r0, r3
 801217a:	f000 f8c3 	bl	8012304 <memcmp>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d106      	bne.n	8012192 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	7b5b      	ldrb	r3, [r3, #13]
 8012188:	f043 0308 	orr.w	r3, r3, #8
 801218c:	b2da      	uxtb	r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012192:	89fb      	ldrh	r3, [r7, #14]
 8012194:	2b08      	cmp	r3, #8
 8012196:	d003      	beq.n	80121a0 <ethernet_input+0xa0>
 8012198:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801219c:	d014      	beq.n	80121c8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801219e:	e032      	b.n	8012206 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121a6:	f003 0308 	and.w	r3, r3, #8
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d024      	beq.n	80121f8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80121ae:	8afb      	ldrh	r3, [r7, #22]
 80121b0:	4619      	mov	r1, r3
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f7f6 ff52 	bl	800905c <pbuf_remove_header>
 80121b8:	4603      	mov	r3, r0
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d11e      	bne.n	80121fc <ethernet_input+0xfc>
        ip4_input(p, netif);
 80121be:	6839      	ldr	r1, [r7, #0]
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f7fe ff21 	bl	8011008 <ip4_input>
      break;
 80121c6:	e013      	b.n	80121f0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121ce:	f003 0308 	and.w	r3, r3, #8
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d014      	beq.n	8012200 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80121d6:	8afb      	ldrh	r3, [r7, #22]
 80121d8:	4619      	mov	r1, r3
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7f6 ff3e 	bl	800905c <pbuf_remove_header>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d10e      	bne.n	8012204 <ethernet_input+0x104>
        etharp_input(p, netif);
 80121e6:	6839      	ldr	r1, [r7, #0]
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f7fe f89b 	bl	8010324 <etharp_input>
      break;
 80121ee:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80121f0:	2300      	movs	r3, #0
 80121f2:	e00c      	b.n	801220e <ethernet_input+0x10e>
    goto free_and_return;
 80121f4:	bf00      	nop
 80121f6:	e006      	b.n	8012206 <ethernet_input+0x106>
        goto free_and_return;
 80121f8:	bf00      	nop
 80121fa:	e004      	b.n	8012206 <ethernet_input+0x106>
        goto free_and_return;
 80121fc:	bf00      	nop
 80121fe:	e002      	b.n	8012206 <ethernet_input+0x106>
        goto free_and_return;
 8012200:	bf00      	nop
 8012202:	e000      	b.n	8012206 <ethernet_input+0x106>
        goto free_and_return;
 8012204:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f7f6 ffae 	bl	8009168 <pbuf_free>
  return ERR_OK;
 801220c:	2300      	movs	r3, #0
}
 801220e:	4618      	mov	r0, r3
 8012210:	3718      	adds	r7, #24
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	080165e0 	.word	0x080165e0

0801221c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801221c:	b580      	push	{r7, lr}
 801221e:	b086      	sub	sp, #24
 8012220:	af00      	add	r7, sp, #0
 8012222:	60f8      	str	r0, [r7, #12]
 8012224:	60b9      	str	r1, [r7, #8]
 8012226:	607a      	str	r2, [r7, #4]
 8012228:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801222a:	8c3b      	ldrh	r3, [r7, #32]
 801222c:	4618      	mov	r0, r3
 801222e:	f7f5 fb85 	bl	800793c <lwip_htons>
 8012232:	4603      	mov	r3, r0
 8012234:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012236:	210e      	movs	r1, #14
 8012238:	68b8      	ldr	r0, [r7, #8]
 801223a:	f7f6 feff 	bl	800903c <pbuf_add_header>
 801223e:	4603      	mov	r3, r0
 8012240:	2b00      	cmp	r3, #0
 8012242:	d125      	bne.n	8012290 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	8afa      	ldrh	r2, [r7, #22]
 801224e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	2206      	movs	r2, #6
 8012254:	6839      	ldr	r1, [r7, #0]
 8012256:	4618      	mov	r0, r3
 8012258:	f000 f864 	bl	8012324 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	3306      	adds	r3, #6
 8012260:	2206      	movs	r2, #6
 8012262:	6879      	ldr	r1, [r7, #4]
 8012264:	4618      	mov	r0, r3
 8012266:	f000 f85d 	bl	8012324 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012270:	2b06      	cmp	r3, #6
 8012272:	d006      	beq.n	8012282 <ethernet_output+0x66>
 8012274:	4b0a      	ldr	r3, [pc, #40]	; (80122a0 <ethernet_output+0x84>)
 8012276:	f44f 7299 	mov.w	r2, #306	; 0x132
 801227a:	490a      	ldr	r1, [pc, #40]	; (80122a4 <ethernet_output+0x88>)
 801227c:	480a      	ldr	r0, [pc, #40]	; (80122a8 <ethernet_output+0x8c>)
 801227e:	f000 f961 	bl	8012544 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	699b      	ldr	r3, [r3, #24]
 8012286:	68b9      	ldr	r1, [r7, #8]
 8012288:	68f8      	ldr	r0, [r7, #12]
 801228a:	4798      	blx	r3
 801228c:	4603      	mov	r3, r0
 801228e:	e002      	b.n	8012296 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012290:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012292:	f06f 0301 	mvn.w	r3, #1
}
 8012296:	4618      	mov	r0, r3
 8012298:	3718      	adds	r7, #24
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	08016454 	.word	0x08016454
 80122a4:	0801648c 	.word	0x0801648c
 80122a8:	080164c0 	.word	0x080164c0

080122ac <__libc_init_array>:
 80122ac:	b570      	push	{r4, r5, r6, lr}
 80122ae:	4d0d      	ldr	r5, [pc, #52]	; (80122e4 <__libc_init_array+0x38>)
 80122b0:	4c0d      	ldr	r4, [pc, #52]	; (80122e8 <__libc_init_array+0x3c>)
 80122b2:	1b64      	subs	r4, r4, r5
 80122b4:	10a4      	asrs	r4, r4, #2
 80122b6:	2600      	movs	r6, #0
 80122b8:	42a6      	cmp	r6, r4
 80122ba:	d109      	bne.n	80122d0 <__libc_init_array+0x24>
 80122bc:	4d0b      	ldr	r5, [pc, #44]	; (80122ec <__libc_init_array+0x40>)
 80122be:	4c0c      	ldr	r4, [pc, #48]	; (80122f0 <__libc_init_array+0x44>)
 80122c0:	f001 fae0 	bl	8013884 <_init>
 80122c4:	1b64      	subs	r4, r4, r5
 80122c6:	10a4      	asrs	r4, r4, #2
 80122c8:	2600      	movs	r6, #0
 80122ca:	42a6      	cmp	r6, r4
 80122cc:	d105      	bne.n	80122da <__libc_init_array+0x2e>
 80122ce:	bd70      	pop	{r4, r5, r6, pc}
 80122d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80122d4:	4798      	blx	r3
 80122d6:	3601      	adds	r6, #1
 80122d8:	e7ee      	b.n	80122b8 <__libc_init_array+0xc>
 80122da:	f855 3b04 	ldr.w	r3, [r5], #4
 80122de:	4798      	blx	r3
 80122e0:	3601      	adds	r6, #1
 80122e2:	e7f2      	b.n	80122ca <__libc_init_array+0x1e>
 80122e4:	08016840 	.word	0x08016840
 80122e8:	08016840 	.word	0x08016840
 80122ec:	08016840 	.word	0x08016840
 80122f0:	08016844 	.word	0x08016844

080122f4 <malloc>:
 80122f4:	4b02      	ldr	r3, [pc, #8]	; (8012300 <malloc+0xc>)
 80122f6:	4601      	mov	r1, r0
 80122f8:	6818      	ldr	r0, [r3, #0]
 80122fa:	f000 b8af 	b.w	801245c <_malloc_r>
 80122fe:	bf00      	nop
 8012300:	200000bc 	.word	0x200000bc

08012304 <memcmp>:
 8012304:	b510      	push	{r4, lr}
 8012306:	3901      	subs	r1, #1
 8012308:	4402      	add	r2, r0
 801230a:	4290      	cmp	r0, r2
 801230c:	d101      	bne.n	8012312 <memcmp+0xe>
 801230e:	2000      	movs	r0, #0
 8012310:	e005      	b.n	801231e <memcmp+0x1a>
 8012312:	7803      	ldrb	r3, [r0, #0]
 8012314:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012318:	42a3      	cmp	r3, r4
 801231a:	d001      	beq.n	8012320 <memcmp+0x1c>
 801231c:	1b18      	subs	r0, r3, r4
 801231e:	bd10      	pop	{r4, pc}
 8012320:	3001      	adds	r0, #1
 8012322:	e7f2      	b.n	801230a <memcmp+0x6>

08012324 <memcpy>:
 8012324:	440a      	add	r2, r1
 8012326:	4291      	cmp	r1, r2
 8012328:	f100 33ff 	add.w	r3, r0, #4294967295
 801232c:	d100      	bne.n	8012330 <memcpy+0xc>
 801232e:	4770      	bx	lr
 8012330:	b510      	push	{r4, lr}
 8012332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012336:	f803 4f01 	strb.w	r4, [r3, #1]!
 801233a:	4291      	cmp	r1, r2
 801233c:	d1f9      	bne.n	8012332 <memcpy+0xe>
 801233e:	bd10      	pop	{r4, pc}

08012340 <memmove>:
 8012340:	4288      	cmp	r0, r1
 8012342:	b510      	push	{r4, lr}
 8012344:	eb01 0402 	add.w	r4, r1, r2
 8012348:	d902      	bls.n	8012350 <memmove+0x10>
 801234a:	4284      	cmp	r4, r0
 801234c:	4623      	mov	r3, r4
 801234e:	d807      	bhi.n	8012360 <memmove+0x20>
 8012350:	1e43      	subs	r3, r0, #1
 8012352:	42a1      	cmp	r1, r4
 8012354:	d008      	beq.n	8012368 <memmove+0x28>
 8012356:	f811 2b01 	ldrb.w	r2, [r1], #1
 801235a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801235e:	e7f8      	b.n	8012352 <memmove+0x12>
 8012360:	4402      	add	r2, r0
 8012362:	4601      	mov	r1, r0
 8012364:	428a      	cmp	r2, r1
 8012366:	d100      	bne.n	801236a <memmove+0x2a>
 8012368:	bd10      	pop	{r4, pc}
 801236a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801236e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012372:	e7f7      	b.n	8012364 <memmove+0x24>

08012374 <memset>:
 8012374:	4402      	add	r2, r0
 8012376:	4603      	mov	r3, r0
 8012378:	4293      	cmp	r3, r2
 801237a:	d100      	bne.n	801237e <memset+0xa>
 801237c:	4770      	bx	lr
 801237e:	f803 1b01 	strb.w	r1, [r3], #1
 8012382:	e7f9      	b.n	8012378 <memset+0x4>

08012384 <_free_r>:
 8012384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012386:	2900      	cmp	r1, #0
 8012388:	d044      	beq.n	8012414 <_free_r+0x90>
 801238a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801238e:	9001      	str	r0, [sp, #4]
 8012390:	2b00      	cmp	r3, #0
 8012392:	f1a1 0404 	sub.w	r4, r1, #4
 8012396:	bfb8      	it	lt
 8012398:	18e4      	addlt	r4, r4, r3
 801239a:	f000 fb05 	bl	80129a8 <__malloc_lock>
 801239e:	4a1e      	ldr	r2, [pc, #120]	; (8012418 <_free_r+0x94>)
 80123a0:	9801      	ldr	r0, [sp, #4]
 80123a2:	6813      	ldr	r3, [r2, #0]
 80123a4:	b933      	cbnz	r3, 80123b4 <_free_r+0x30>
 80123a6:	6063      	str	r3, [r4, #4]
 80123a8:	6014      	str	r4, [r2, #0]
 80123aa:	b003      	add	sp, #12
 80123ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123b0:	f000 bb00 	b.w	80129b4 <__malloc_unlock>
 80123b4:	42a3      	cmp	r3, r4
 80123b6:	d908      	bls.n	80123ca <_free_r+0x46>
 80123b8:	6825      	ldr	r5, [r4, #0]
 80123ba:	1961      	adds	r1, r4, r5
 80123bc:	428b      	cmp	r3, r1
 80123be:	bf01      	itttt	eq
 80123c0:	6819      	ldreq	r1, [r3, #0]
 80123c2:	685b      	ldreq	r3, [r3, #4]
 80123c4:	1949      	addeq	r1, r1, r5
 80123c6:	6021      	streq	r1, [r4, #0]
 80123c8:	e7ed      	b.n	80123a6 <_free_r+0x22>
 80123ca:	461a      	mov	r2, r3
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	b10b      	cbz	r3, 80123d4 <_free_r+0x50>
 80123d0:	42a3      	cmp	r3, r4
 80123d2:	d9fa      	bls.n	80123ca <_free_r+0x46>
 80123d4:	6811      	ldr	r1, [r2, #0]
 80123d6:	1855      	adds	r5, r2, r1
 80123d8:	42a5      	cmp	r5, r4
 80123da:	d10b      	bne.n	80123f4 <_free_r+0x70>
 80123dc:	6824      	ldr	r4, [r4, #0]
 80123de:	4421      	add	r1, r4
 80123e0:	1854      	adds	r4, r2, r1
 80123e2:	42a3      	cmp	r3, r4
 80123e4:	6011      	str	r1, [r2, #0]
 80123e6:	d1e0      	bne.n	80123aa <_free_r+0x26>
 80123e8:	681c      	ldr	r4, [r3, #0]
 80123ea:	685b      	ldr	r3, [r3, #4]
 80123ec:	6053      	str	r3, [r2, #4]
 80123ee:	4421      	add	r1, r4
 80123f0:	6011      	str	r1, [r2, #0]
 80123f2:	e7da      	b.n	80123aa <_free_r+0x26>
 80123f4:	d902      	bls.n	80123fc <_free_r+0x78>
 80123f6:	230c      	movs	r3, #12
 80123f8:	6003      	str	r3, [r0, #0]
 80123fa:	e7d6      	b.n	80123aa <_free_r+0x26>
 80123fc:	6825      	ldr	r5, [r4, #0]
 80123fe:	1961      	adds	r1, r4, r5
 8012400:	428b      	cmp	r3, r1
 8012402:	bf04      	itt	eq
 8012404:	6819      	ldreq	r1, [r3, #0]
 8012406:	685b      	ldreq	r3, [r3, #4]
 8012408:	6063      	str	r3, [r4, #4]
 801240a:	bf04      	itt	eq
 801240c:	1949      	addeq	r1, r1, r5
 801240e:	6021      	streq	r1, [r4, #0]
 8012410:	6054      	str	r4, [r2, #4]
 8012412:	e7ca      	b.n	80123aa <_free_r+0x26>
 8012414:	b003      	add	sp, #12
 8012416:	bd30      	pop	{r4, r5, pc}
 8012418:	20008190 	.word	0x20008190

0801241c <sbrk_aligned>:
 801241c:	b570      	push	{r4, r5, r6, lr}
 801241e:	4e0e      	ldr	r6, [pc, #56]	; (8012458 <sbrk_aligned+0x3c>)
 8012420:	460c      	mov	r4, r1
 8012422:	6831      	ldr	r1, [r6, #0]
 8012424:	4605      	mov	r5, r0
 8012426:	b911      	cbnz	r1, 801242e <sbrk_aligned+0x12>
 8012428:	f000 f8e2 	bl	80125f0 <_sbrk_r>
 801242c:	6030      	str	r0, [r6, #0]
 801242e:	4621      	mov	r1, r4
 8012430:	4628      	mov	r0, r5
 8012432:	f000 f8dd 	bl	80125f0 <_sbrk_r>
 8012436:	1c43      	adds	r3, r0, #1
 8012438:	d00a      	beq.n	8012450 <sbrk_aligned+0x34>
 801243a:	1cc4      	adds	r4, r0, #3
 801243c:	f024 0403 	bic.w	r4, r4, #3
 8012440:	42a0      	cmp	r0, r4
 8012442:	d007      	beq.n	8012454 <sbrk_aligned+0x38>
 8012444:	1a21      	subs	r1, r4, r0
 8012446:	4628      	mov	r0, r5
 8012448:	f000 f8d2 	bl	80125f0 <_sbrk_r>
 801244c:	3001      	adds	r0, #1
 801244e:	d101      	bne.n	8012454 <sbrk_aligned+0x38>
 8012450:	f04f 34ff 	mov.w	r4, #4294967295
 8012454:	4620      	mov	r0, r4
 8012456:	bd70      	pop	{r4, r5, r6, pc}
 8012458:	20008194 	.word	0x20008194

0801245c <_malloc_r>:
 801245c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012460:	1ccd      	adds	r5, r1, #3
 8012462:	f025 0503 	bic.w	r5, r5, #3
 8012466:	3508      	adds	r5, #8
 8012468:	2d0c      	cmp	r5, #12
 801246a:	bf38      	it	cc
 801246c:	250c      	movcc	r5, #12
 801246e:	2d00      	cmp	r5, #0
 8012470:	4607      	mov	r7, r0
 8012472:	db01      	blt.n	8012478 <_malloc_r+0x1c>
 8012474:	42a9      	cmp	r1, r5
 8012476:	d905      	bls.n	8012484 <_malloc_r+0x28>
 8012478:	230c      	movs	r3, #12
 801247a:	603b      	str	r3, [r7, #0]
 801247c:	2600      	movs	r6, #0
 801247e:	4630      	mov	r0, r6
 8012480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012484:	4e2e      	ldr	r6, [pc, #184]	; (8012540 <_malloc_r+0xe4>)
 8012486:	f000 fa8f 	bl	80129a8 <__malloc_lock>
 801248a:	6833      	ldr	r3, [r6, #0]
 801248c:	461c      	mov	r4, r3
 801248e:	bb34      	cbnz	r4, 80124de <_malloc_r+0x82>
 8012490:	4629      	mov	r1, r5
 8012492:	4638      	mov	r0, r7
 8012494:	f7ff ffc2 	bl	801241c <sbrk_aligned>
 8012498:	1c43      	adds	r3, r0, #1
 801249a:	4604      	mov	r4, r0
 801249c:	d14d      	bne.n	801253a <_malloc_r+0xde>
 801249e:	6834      	ldr	r4, [r6, #0]
 80124a0:	4626      	mov	r6, r4
 80124a2:	2e00      	cmp	r6, #0
 80124a4:	d140      	bne.n	8012528 <_malloc_r+0xcc>
 80124a6:	6823      	ldr	r3, [r4, #0]
 80124a8:	4631      	mov	r1, r6
 80124aa:	4638      	mov	r0, r7
 80124ac:	eb04 0803 	add.w	r8, r4, r3
 80124b0:	f000 f89e 	bl	80125f0 <_sbrk_r>
 80124b4:	4580      	cmp	r8, r0
 80124b6:	d13a      	bne.n	801252e <_malloc_r+0xd2>
 80124b8:	6821      	ldr	r1, [r4, #0]
 80124ba:	3503      	adds	r5, #3
 80124bc:	1a6d      	subs	r5, r5, r1
 80124be:	f025 0503 	bic.w	r5, r5, #3
 80124c2:	3508      	adds	r5, #8
 80124c4:	2d0c      	cmp	r5, #12
 80124c6:	bf38      	it	cc
 80124c8:	250c      	movcc	r5, #12
 80124ca:	4629      	mov	r1, r5
 80124cc:	4638      	mov	r0, r7
 80124ce:	f7ff ffa5 	bl	801241c <sbrk_aligned>
 80124d2:	3001      	adds	r0, #1
 80124d4:	d02b      	beq.n	801252e <_malloc_r+0xd2>
 80124d6:	6823      	ldr	r3, [r4, #0]
 80124d8:	442b      	add	r3, r5
 80124da:	6023      	str	r3, [r4, #0]
 80124dc:	e00e      	b.n	80124fc <_malloc_r+0xa0>
 80124de:	6822      	ldr	r2, [r4, #0]
 80124e0:	1b52      	subs	r2, r2, r5
 80124e2:	d41e      	bmi.n	8012522 <_malloc_r+0xc6>
 80124e4:	2a0b      	cmp	r2, #11
 80124e6:	d916      	bls.n	8012516 <_malloc_r+0xba>
 80124e8:	1961      	adds	r1, r4, r5
 80124ea:	42a3      	cmp	r3, r4
 80124ec:	6025      	str	r5, [r4, #0]
 80124ee:	bf18      	it	ne
 80124f0:	6059      	strne	r1, [r3, #4]
 80124f2:	6863      	ldr	r3, [r4, #4]
 80124f4:	bf08      	it	eq
 80124f6:	6031      	streq	r1, [r6, #0]
 80124f8:	5162      	str	r2, [r4, r5]
 80124fa:	604b      	str	r3, [r1, #4]
 80124fc:	4638      	mov	r0, r7
 80124fe:	f104 060b 	add.w	r6, r4, #11
 8012502:	f000 fa57 	bl	80129b4 <__malloc_unlock>
 8012506:	f026 0607 	bic.w	r6, r6, #7
 801250a:	1d23      	adds	r3, r4, #4
 801250c:	1af2      	subs	r2, r6, r3
 801250e:	d0b6      	beq.n	801247e <_malloc_r+0x22>
 8012510:	1b9b      	subs	r3, r3, r6
 8012512:	50a3      	str	r3, [r4, r2]
 8012514:	e7b3      	b.n	801247e <_malloc_r+0x22>
 8012516:	6862      	ldr	r2, [r4, #4]
 8012518:	42a3      	cmp	r3, r4
 801251a:	bf0c      	ite	eq
 801251c:	6032      	streq	r2, [r6, #0]
 801251e:	605a      	strne	r2, [r3, #4]
 8012520:	e7ec      	b.n	80124fc <_malloc_r+0xa0>
 8012522:	4623      	mov	r3, r4
 8012524:	6864      	ldr	r4, [r4, #4]
 8012526:	e7b2      	b.n	801248e <_malloc_r+0x32>
 8012528:	4634      	mov	r4, r6
 801252a:	6876      	ldr	r6, [r6, #4]
 801252c:	e7b9      	b.n	80124a2 <_malloc_r+0x46>
 801252e:	230c      	movs	r3, #12
 8012530:	603b      	str	r3, [r7, #0]
 8012532:	4638      	mov	r0, r7
 8012534:	f000 fa3e 	bl	80129b4 <__malloc_unlock>
 8012538:	e7a1      	b.n	801247e <_malloc_r+0x22>
 801253a:	6025      	str	r5, [r4, #0]
 801253c:	e7de      	b.n	80124fc <_malloc_r+0xa0>
 801253e:	bf00      	nop
 8012540:	20008190 	.word	0x20008190

08012544 <iprintf>:
 8012544:	b40f      	push	{r0, r1, r2, r3}
 8012546:	4b0a      	ldr	r3, [pc, #40]	; (8012570 <iprintf+0x2c>)
 8012548:	b513      	push	{r0, r1, r4, lr}
 801254a:	681c      	ldr	r4, [r3, #0]
 801254c:	b124      	cbz	r4, 8012558 <iprintf+0x14>
 801254e:	69a3      	ldr	r3, [r4, #24]
 8012550:	b913      	cbnz	r3, 8012558 <iprintf+0x14>
 8012552:	4620      	mov	r0, r4
 8012554:	f000 f976 	bl	8012844 <__sinit>
 8012558:	ab05      	add	r3, sp, #20
 801255a:	9a04      	ldr	r2, [sp, #16]
 801255c:	68a1      	ldr	r1, [r4, #8]
 801255e:	9301      	str	r3, [sp, #4]
 8012560:	4620      	mov	r0, r4
 8012562:	f000 fbb3 	bl	8012ccc <_vfiprintf_r>
 8012566:	b002      	add	sp, #8
 8012568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801256c:	b004      	add	sp, #16
 801256e:	4770      	bx	lr
 8012570:	200000bc 	.word	0x200000bc

08012574 <rand>:
 8012574:	4b16      	ldr	r3, [pc, #88]	; (80125d0 <rand+0x5c>)
 8012576:	b510      	push	{r4, lr}
 8012578:	681c      	ldr	r4, [r3, #0]
 801257a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801257c:	b9b3      	cbnz	r3, 80125ac <rand+0x38>
 801257e:	2018      	movs	r0, #24
 8012580:	f7ff feb8 	bl	80122f4 <malloc>
 8012584:	63a0      	str	r0, [r4, #56]	; 0x38
 8012586:	b928      	cbnz	r0, 8012594 <rand+0x20>
 8012588:	4602      	mov	r2, r0
 801258a:	4b12      	ldr	r3, [pc, #72]	; (80125d4 <rand+0x60>)
 801258c:	4812      	ldr	r0, [pc, #72]	; (80125d8 <rand+0x64>)
 801258e:	214e      	movs	r1, #78	; 0x4e
 8012590:	f000 f8e2 	bl	8012758 <__assert_func>
 8012594:	4a11      	ldr	r2, [pc, #68]	; (80125dc <rand+0x68>)
 8012596:	4b12      	ldr	r3, [pc, #72]	; (80125e0 <rand+0x6c>)
 8012598:	e9c0 2300 	strd	r2, r3, [r0]
 801259c:	4b11      	ldr	r3, [pc, #68]	; (80125e4 <rand+0x70>)
 801259e:	6083      	str	r3, [r0, #8]
 80125a0:	230b      	movs	r3, #11
 80125a2:	8183      	strh	r3, [r0, #12]
 80125a4:	2201      	movs	r2, #1
 80125a6:	2300      	movs	r3, #0
 80125a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80125ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80125ae:	4a0e      	ldr	r2, [pc, #56]	; (80125e8 <rand+0x74>)
 80125b0:	6920      	ldr	r0, [r4, #16]
 80125b2:	6963      	ldr	r3, [r4, #20]
 80125b4:	490d      	ldr	r1, [pc, #52]	; (80125ec <rand+0x78>)
 80125b6:	4342      	muls	r2, r0
 80125b8:	fb01 2203 	mla	r2, r1, r3, r2
 80125bc:	fba0 0101 	umull	r0, r1, r0, r1
 80125c0:	1c43      	adds	r3, r0, #1
 80125c2:	eb42 0001 	adc.w	r0, r2, r1
 80125c6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80125ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80125ce:	bd10      	pop	{r4, pc}
 80125d0:	200000bc 	.word	0x200000bc
 80125d4:	080166f4 	.word	0x080166f4
 80125d8:	0801670b 	.word	0x0801670b
 80125dc:	abcd330e 	.word	0xabcd330e
 80125e0:	e66d1234 	.word	0xe66d1234
 80125e4:	0005deec 	.word	0x0005deec
 80125e8:	5851f42d 	.word	0x5851f42d
 80125ec:	4c957f2d 	.word	0x4c957f2d

080125f0 <_sbrk_r>:
 80125f0:	b538      	push	{r3, r4, r5, lr}
 80125f2:	4d06      	ldr	r5, [pc, #24]	; (801260c <_sbrk_r+0x1c>)
 80125f4:	2300      	movs	r3, #0
 80125f6:	4604      	mov	r4, r0
 80125f8:	4608      	mov	r0, r1
 80125fa:	602b      	str	r3, [r5, #0]
 80125fc:	f7ef faf8 	bl	8001bf0 <_sbrk>
 8012600:	1c43      	adds	r3, r0, #1
 8012602:	d102      	bne.n	801260a <_sbrk_r+0x1a>
 8012604:	682b      	ldr	r3, [r5, #0]
 8012606:	b103      	cbz	r3, 801260a <_sbrk_r+0x1a>
 8012608:	6023      	str	r3, [r4, #0]
 801260a:	bd38      	pop	{r3, r4, r5, pc}
 801260c:	20008198 	.word	0x20008198

08012610 <siprintf>:
 8012610:	b40e      	push	{r1, r2, r3}
 8012612:	b500      	push	{lr}
 8012614:	b09c      	sub	sp, #112	; 0x70
 8012616:	ab1d      	add	r3, sp, #116	; 0x74
 8012618:	9002      	str	r0, [sp, #8]
 801261a:	9006      	str	r0, [sp, #24]
 801261c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012620:	4809      	ldr	r0, [pc, #36]	; (8012648 <siprintf+0x38>)
 8012622:	9107      	str	r1, [sp, #28]
 8012624:	9104      	str	r1, [sp, #16]
 8012626:	4909      	ldr	r1, [pc, #36]	; (801264c <siprintf+0x3c>)
 8012628:	f853 2b04 	ldr.w	r2, [r3], #4
 801262c:	9105      	str	r1, [sp, #20]
 801262e:	6800      	ldr	r0, [r0, #0]
 8012630:	9301      	str	r3, [sp, #4]
 8012632:	a902      	add	r1, sp, #8
 8012634:	f000 fa20 	bl	8012a78 <_svfiprintf_r>
 8012638:	9b02      	ldr	r3, [sp, #8]
 801263a:	2200      	movs	r2, #0
 801263c:	701a      	strb	r2, [r3, #0]
 801263e:	b01c      	add	sp, #112	; 0x70
 8012640:	f85d eb04 	ldr.w	lr, [sp], #4
 8012644:	b003      	add	sp, #12
 8012646:	4770      	bx	lr
 8012648:	200000bc 	.word	0x200000bc
 801264c:	ffff0208 	.word	0xffff0208

08012650 <strcpy>:
 8012650:	4603      	mov	r3, r0
 8012652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012656:	f803 2b01 	strb.w	r2, [r3], #1
 801265a:	2a00      	cmp	r2, #0
 801265c:	d1f9      	bne.n	8012652 <strcpy+0x2>
 801265e:	4770      	bx	lr

08012660 <_strtoul_l.constprop.0>:
 8012660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012664:	4f36      	ldr	r7, [pc, #216]	; (8012740 <_strtoul_l.constprop.0+0xe0>)
 8012666:	4686      	mov	lr, r0
 8012668:	460d      	mov	r5, r1
 801266a:	4628      	mov	r0, r5
 801266c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012670:	5de6      	ldrb	r6, [r4, r7]
 8012672:	f016 0608 	ands.w	r6, r6, #8
 8012676:	d1f8      	bne.n	801266a <_strtoul_l.constprop.0+0xa>
 8012678:	2c2d      	cmp	r4, #45	; 0x2d
 801267a:	d12f      	bne.n	80126dc <_strtoul_l.constprop.0+0x7c>
 801267c:	782c      	ldrb	r4, [r5, #0]
 801267e:	2601      	movs	r6, #1
 8012680:	1c85      	adds	r5, r0, #2
 8012682:	2b00      	cmp	r3, #0
 8012684:	d057      	beq.n	8012736 <_strtoul_l.constprop.0+0xd6>
 8012686:	2b10      	cmp	r3, #16
 8012688:	d109      	bne.n	801269e <_strtoul_l.constprop.0+0x3e>
 801268a:	2c30      	cmp	r4, #48	; 0x30
 801268c:	d107      	bne.n	801269e <_strtoul_l.constprop.0+0x3e>
 801268e:	7828      	ldrb	r0, [r5, #0]
 8012690:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012694:	2858      	cmp	r0, #88	; 0x58
 8012696:	d149      	bne.n	801272c <_strtoul_l.constprop.0+0xcc>
 8012698:	786c      	ldrb	r4, [r5, #1]
 801269a:	2310      	movs	r3, #16
 801269c:	3502      	adds	r5, #2
 801269e:	f04f 38ff 	mov.w	r8, #4294967295
 80126a2:	2700      	movs	r7, #0
 80126a4:	fbb8 f8f3 	udiv	r8, r8, r3
 80126a8:	fb03 f908 	mul.w	r9, r3, r8
 80126ac:	ea6f 0909 	mvn.w	r9, r9
 80126b0:	4638      	mov	r0, r7
 80126b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80126b6:	f1bc 0f09 	cmp.w	ip, #9
 80126ba:	d814      	bhi.n	80126e6 <_strtoul_l.constprop.0+0x86>
 80126bc:	4664      	mov	r4, ip
 80126be:	42a3      	cmp	r3, r4
 80126c0:	dd22      	ble.n	8012708 <_strtoul_l.constprop.0+0xa8>
 80126c2:	2f00      	cmp	r7, #0
 80126c4:	db1d      	blt.n	8012702 <_strtoul_l.constprop.0+0xa2>
 80126c6:	4580      	cmp	r8, r0
 80126c8:	d31b      	bcc.n	8012702 <_strtoul_l.constprop.0+0xa2>
 80126ca:	d101      	bne.n	80126d0 <_strtoul_l.constprop.0+0x70>
 80126cc:	45a1      	cmp	r9, r4
 80126ce:	db18      	blt.n	8012702 <_strtoul_l.constprop.0+0xa2>
 80126d0:	fb00 4003 	mla	r0, r0, r3, r4
 80126d4:	2701      	movs	r7, #1
 80126d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126da:	e7ea      	b.n	80126b2 <_strtoul_l.constprop.0+0x52>
 80126dc:	2c2b      	cmp	r4, #43	; 0x2b
 80126de:	bf04      	itt	eq
 80126e0:	782c      	ldrbeq	r4, [r5, #0]
 80126e2:	1c85      	addeq	r5, r0, #2
 80126e4:	e7cd      	b.n	8012682 <_strtoul_l.constprop.0+0x22>
 80126e6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80126ea:	f1bc 0f19 	cmp.w	ip, #25
 80126ee:	d801      	bhi.n	80126f4 <_strtoul_l.constprop.0+0x94>
 80126f0:	3c37      	subs	r4, #55	; 0x37
 80126f2:	e7e4      	b.n	80126be <_strtoul_l.constprop.0+0x5e>
 80126f4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80126f8:	f1bc 0f19 	cmp.w	ip, #25
 80126fc:	d804      	bhi.n	8012708 <_strtoul_l.constprop.0+0xa8>
 80126fe:	3c57      	subs	r4, #87	; 0x57
 8012700:	e7dd      	b.n	80126be <_strtoul_l.constprop.0+0x5e>
 8012702:	f04f 37ff 	mov.w	r7, #4294967295
 8012706:	e7e6      	b.n	80126d6 <_strtoul_l.constprop.0+0x76>
 8012708:	2f00      	cmp	r7, #0
 801270a:	da07      	bge.n	801271c <_strtoul_l.constprop.0+0xbc>
 801270c:	2322      	movs	r3, #34	; 0x22
 801270e:	f8ce 3000 	str.w	r3, [lr]
 8012712:	f04f 30ff 	mov.w	r0, #4294967295
 8012716:	b932      	cbnz	r2, 8012726 <_strtoul_l.constprop.0+0xc6>
 8012718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801271c:	b106      	cbz	r6, 8012720 <_strtoul_l.constprop.0+0xc0>
 801271e:	4240      	negs	r0, r0
 8012720:	2a00      	cmp	r2, #0
 8012722:	d0f9      	beq.n	8012718 <_strtoul_l.constprop.0+0xb8>
 8012724:	b107      	cbz	r7, 8012728 <_strtoul_l.constprop.0+0xc8>
 8012726:	1e69      	subs	r1, r5, #1
 8012728:	6011      	str	r1, [r2, #0]
 801272a:	e7f5      	b.n	8012718 <_strtoul_l.constprop.0+0xb8>
 801272c:	2430      	movs	r4, #48	; 0x30
 801272e:	2b00      	cmp	r3, #0
 8012730:	d1b5      	bne.n	801269e <_strtoul_l.constprop.0+0x3e>
 8012732:	2308      	movs	r3, #8
 8012734:	e7b3      	b.n	801269e <_strtoul_l.constprop.0+0x3e>
 8012736:	2c30      	cmp	r4, #48	; 0x30
 8012738:	d0a9      	beq.n	801268e <_strtoul_l.constprop.0+0x2e>
 801273a:	230a      	movs	r3, #10
 801273c:	e7af      	b.n	801269e <_strtoul_l.constprop.0+0x3e>
 801273e:	bf00      	nop
 8012740:	080165ef 	.word	0x080165ef

08012744 <strtoul>:
 8012744:	4613      	mov	r3, r2
 8012746:	460a      	mov	r2, r1
 8012748:	4601      	mov	r1, r0
 801274a:	4802      	ldr	r0, [pc, #8]	; (8012754 <strtoul+0x10>)
 801274c:	6800      	ldr	r0, [r0, #0]
 801274e:	f7ff bf87 	b.w	8012660 <_strtoul_l.constprop.0>
 8012752:	bf00      	nop
 8012754:	200000bc 	.word	0x200000bc

08012758 <__assert_func>:
 8012758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801275a:	4614      	mov	r4, r2
 801275c:	461a      	mov	r2, r3
 801275e:	4b09      	ldr	r3, [pc, #36]	; (8012784 <__assert_func+0x2c>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4605      	mov	r5, r0
 8012764:	68d8      	ldr	r0, [r3, #12]
 8012766:	b14c      	cbz	r4, 801277c <__assert_func+0x24>
 8012768:	4b07      	ldr	r3, [pc, #28]	; (8012788 <__assert_func+0x30>)
 801276a:	9100      	str	r1, [sp, #0]
 801276c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012770:	4906      	ldr	r1, [pc, #24]	; (801278c <__assert_func+0x34>)
 8012772:	462b      	mov	r3, r5
 8012774:	f000 f8e4 	bl	8012940 <fiprintf>
 8012778:	f000 fe82 	bl	8013480 <abort>
 801277c:	4b04      	ldr	r3, [pc, #16]	; (8012790 <__assert_func+0x38>)
 801277e:	461c      	mov	r4, r3
 8012780:	e7f3      	b.n	801276a <__assert_func+0x12>
 8012782:	bf00      	nop
 8012784:	200000bc 	.word	0x200000bc
 8012788:	08016766 	.word	0x08016766
 801278c:	08016773 	.word	0x08016773
 8012790:	080167a1 	.word	0x080167a1

08012794 <std>:
 8012794:	2300      	movs	r3, #0
 8012796:	b510      	push	{r4, lr}
 8012798:	4604      	mov	r4, r0
 801279a:	e9c0 3300 	strd	r3, r3, [r0]
 801279e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80127a2:	6083      	str	r3, [r0, #8]
 80127a4:	8181      	strh	r1, [r0, #12]
 80127a6:	6643      	str	r3, [r0, #100]	; 0x64
 80127a8:	81c2      	strh	r2, [r0, #14]
 80127aa:	6183      	str	r3, [r0, #24]
 80127ac:	4619      	mov	r1, r3
 80127ae:	2208      	movs	r2, #8
 80127b0:	305c      	adds	r0, #92	; 0x5c
 80127b2:	f7ff fddf 	bl	8012374 <memset>
 80127b6:	4b05      	ldr	r3, [pc, #20]	; (80127cc <std+0x38>)
 80127b8:	6263      	str	r3, [r4, #36]	; 0x24
 80127ba:	4b05      	ldr	r3, [pc, #20]	; (80127d0 <std+0x3c>)
 80127bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80127be:	4b05      	ldr	r3, [pc, #20]	; (80127d4 <std+0x40>)
 80127c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80127c2:	4b05      	ldr	r3, [pc, #20]	; (80127d8 <std+0x44>)
 80127c4:	6224      	str	r4, [r4, #32]
 80127c6:	6323      	str	r3, [r4, #48]	; 0x30
 80127c8:	bd10      	pop	{r4, pc}
 80127ca:	bf00      	nop
 80127cc:	08013255 	.word	0x08013255
 80127d0:	08013277 	.word	0x08013277
 80127d4:	080132af 	.word	0x080132af
 80127d8:	080132d3 	.word	0x080132d3

080127dc <_cleanup_r>:
 80127dc:	4901      	ldr	r1, [pc, #4]	; (80127e4 <_cleanup_r+0x8>)
 80127de:	f000 b8c1 	b.w	8012964 <_fwalk_reent>
 80127e2:	bf00      	nop
 80127e4:	080135bd 	.word	0x080135bd

080127e8 <__sfmoreglue>:
 80127e8:	b570      	push	{r4, r5, r6, lr}
 80127ea:	2268      	movs	r2, #104	; 0x68
 80127ec:	1e4d      	subs	r5, r1, #1
 80127ee:	4355      	muls	r5, r2
 80127f0:	460e      	mov	r6, r1
 80127f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80127f6:	f7ff fe31 	bl	801245c <_malloc_r>
 80127fa:	4604      	mov	r4, r0
 80127fc:	b140      	cbz	r0, 8012810 <__sfmoreglue+0x28>
 80127fe:	2100      	movs	r1, #0
 8012800:	e9c0 1600 	strd	r1, r6, [r0]
 8012804:	300c      	adds	r0, #12
 8012806:	60a0      	str	r0, [r4, #8]
 8012808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801280c:	f7ff fdb2 	bl	8012374 <memset>
 8012810:	4620      	mov	r0, r4
 8012812:	bd70      	pop	{r4, r5, r6, pc}

08012814 <__sfp_lock_acquire>:
 8012814:	4801      	ldr	r0, [pc, #4]	; (801281c <__sfp_lock_acquire+0x8>)
 8012816:	f000 b8c5 	b.w	80129a4 <__retarget_lock_acquire_recursive>
 801281a:	bf00      	nop
 801281c:	2000819d 	.word	0x2000819d

08012820 <__sfp_lock_release>:
 8012820:	4801      	ldr	r0, [pc, #4]	; (8012828 <__sfp_lock_release+0x8>)
 8012822:	f000 b8c0 	b.w	80129a6 <__retarget_lock_release_recursive>
 8012826:	bf00      	nop
 8012828:	2000819d 	.word	0x2000819d

0801282c <__sinit_lock_acquire>:
 801282c:	4801      	ldr	r0, [pc, #4]	; (8012834 <__sinit_lock_acquire+0x8>)
 801282e:	f000 b8b9 	b.w	80129a4 <__retarget_lock_acquire_recursive>
 8012832:	bf00      	nop
 8012834:	2000819e 	.word	0x2000819e

08012838 <__sinit_lock_release>:
 8012838:	4801      	ldr	r0, [pc, #4]	; (8012840 <__sinit_lock_release+0x8>)
 801283a:	f000 b8b4 	b.w	80129a6 <__retarget_lock_release_recursive>
 801283e:	bf00      	nop
 8012840:	2000819e 	.word	0x2000819e

08012844 <__sinit>:
 8012844:	b510      	push	{r4, lr}
 8012846:	4604      	mov	r4, r0
 8012848:	f7ff fff0 	bl	801282c <__sinit_lock_acquire>
 801284c:	69a3      	ldr	r3, [r4, #24]
 801284e:	b11b      	cbz	r3, 8012858 <__sinit+0x14>
 8012850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012854:	f7ff bff0 	b.w	8012838 <__sinit_lock_release>
 8012858:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801285c:	6523      	str	r3, [r4, #80]	; 0x50
 801285e:	4b13      	ldr	r3, [pc, #76]	; (80128ac <__sinit+0x68>)
 8012860:	4a13      	ldr	r2, [pc, #76]	; (80128b0 <__sinit+0x6c>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	62a2      	str	r2, [r4, #40]	; 0x28
 8012866:	42a3      	cmp	r3, r4
 8012868:	bf04      	itt	eq
 801286a:	2301      	moveq	r3, #1
 801286c:	61a3      	streq	r3, [r4, #24]
 801286e:	4620      	mov	r0, r4
 8012870:	f000 f820 	bl	80128b4 <__sfp>
 8012874:	6060      	str	r0, [r4, #4]
 8012876:	4620      	mov	r0, r4
 8012878:	f000 f81c 	bl	80128b4 <__sfp>
 801287c:	60a0      	str	r0, [r4, #8]
 801287e:	4620      	mov	r0, r4
 8012880:	f000 f818 	bl	80128b4 <__sfp>
 8012884:	2200      	movs	r2, #0
 8012886:	60e0      	str	r0, [r4, #12]
 8012888:	2104      	movs	r1, #4
 801288a:	6860      	ldr	r0, [r4, #4]
 801288c:	f7ff ff82 	bl	8012794 <std>
 8012890:	68a0      	ldr	r0, [r4, #8]
 8012892:	2201      	movs	r2, #1
 8012894:	2109      	movs	r1, #9
 8012896:	f7ff ff7d 	bl	8012794 <std>
 801289a:	68e0      	ldr	r0, [r4, #12]
 801289c:	2202      	movs	r2, #2
 801289e:	2112      	movs	r1, #18
 80128a0:	f7ff ff78 	bl	8012794 <std>
 80128a4:	2301      	movs	r3, #1
 80128a6:	61a3      	str	r3, [r4, #24]
 80128a8:	e7d2      	b.n	8012850 <__sinit+0xc>
 80128aa:	bf00      	nop
 80128ac:	080166f0 	.word	0x080166f0
 80128b0:	080127dd 	.word	0x080127dd

080128b4 <__sfp>:
 80128b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128b6:	4607      	mov	r7, r0
 80128b8:	f7ff ffac 	bl	8012814 <__sfp_lock_acquire>
 80128bc:	4b1e      	ldr	r3, [pc, #120]	; (8012938 <__sfp+0x84>)
 80128be:	681e      	ldr	r6, [r3, #0]
 80128c0:	69b3      	ldr	r3, [r6, #24]
 80128c2:	b913      	cbnz	r3, 80128ca <__sfp+0x16>
 80128c4:	4630      	mov	r0, r6
 80128c6:	f7ff ffbd 	bl	8012844 <__sinit>
 80128ca:	3648      	adds	r6, #72	; 0x48
 80128cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80128d0:	3b01      	subs	r3, #1
 80128d2:	d503      	bpl.n	80128dc <__sfp+0x28>
 80128d4:	6833      	ldr	r3, [r6, #0]
 80128d6:	b30b      	cbz	r3, 801291c <__sfp+0x68>
 80128d8:	6836      	ldr	r6, [r6, #0]
 80128da:	e7f7      	b.n	80128cc <__sfp+0x18>
 80128dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80128e0:	b9d5      	cbnz	r5, 8012918 <__sfp+0x64>
 80128e2:	4b16      	ldr	r3, [pc, #88]	; (801293c <__sfp+0x88>)
 80128e4:	60e3      	str	r3, [r4, #12]
 80128e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80128ea:	6665      	str	r5, [r4, #100]	; 0x64
 80128ec:	f000 f859 	bl	80129a2 <__retarget_lock_init_recursive>
 80128f0:	f7ff ff96 	bl	8012820 <__sfp_lock_release>
 80128f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80128f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80128fc:	6025      	str	r5, [r4, #0]
 80128fe:	61a5      	str	r5, [r4, #24]
 8012900:	2208      	movs	r2, #8
 8012902:	4629      	mov	r1, r5
 8012904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012908:	f7ff fd34 	bl	8012374 <memset>
 801290c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012914:	4620      	mov	r0, r4
 8012916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012918:	3468      	adds	r4, #104	; 0x68
 801291a:	e7d9      	b.n	80128d0 <__sfp+0x1c>
 801291c:	2104      	movs	r1, #4
 801291e:	4638      	mov	r0, r7
 8012920:	f7ff ff62 	bl	80127e8 <__sfmoreglue>
 8012924:	4604      	mov	r4, r0
 8012926:	6030      	str	r0, [r6, #0]
 8012928:	2800      	cmp	r0, #0
 801292a:	d1d5      	bne.n	80128d8 <__sfp+0x24>
 801292c:	f7ff ff78 	bl	8012820 <__sfp_lock_release>
 8012930:	230c      	movs	r3, #12
 8012932:	603b      	str	r3, [r7, #0]
 8012934:	e7ee      	b.n	8012914 <__sfp+0x60>
 8012936:	bf00      	nop
 8012938:	080166f0 	.word	0x080166f0
 801293c:	ffff0001 	.word	0xffff0001

08012940 <fiprintf>:
 8012940:	b40e      	push	{r1, r2, r3}
 8012942:	b503      	push	{r0, r1, lr}
 8012944:	4601      	mov	r1, r0
 8012946:	ab03      	add	r3, sp, #12
 8012948:	4805      	ldr	r0, [pc, #20]	; (8012960 <fiprintf+0x20>)
 801294a:	f853 2b04 	ldr.w	r2, [r3], #4
 801294e:	6800      	ldr	r0, [r0, #0]
 8012950:	9301      	str	r3, [sp, #4]
 8012952:	f000 f9bb 	bl	8012ccc <_vfiprintf_r>
 8012956:	b002      	add	sp, #8
 8012958:	f85d eb04 	ldr.w	lr, [sp], #4
 801295c:	b003      	add	sp, #12
 801295e:	4770      	bx	lr
 8012960:	200000bc 	.word	0x200000bc

08012964 <_fwalk_reent>:
 8012964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012968:	4606      	mov	r6, r0
 801296a:	4688      	mov	r8, r1
 801296c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012970:	2700      	movs	r7, #0
 8012972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012976:	f1b9 0901 	subs.w	r9, r9, #1
 801297a:	d505      	bpl.n	8012988 <_fwalk_reent+0x24>
 801297c:	6824      	ldr	r4, [r4, #0]
 801297e:	2c00      	cmp	r4, #0
 8012980:	d1f7      	bne.n	8012972 <_fwalk_reent+0xe>
 8012982:	4638      	mov	r0, r7
 8012984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012988:	89ab      	ldrh	r3, [r5, #12]
 801298a:	2b01      	cmp	r3, #1
 801298c:	d907      	bls.n	801299e <_fwalk_reent+0x3a>
 801298e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012992:	3301      	adds	r3, #1
 8012994:	d003      	beq.n	801299e <_fwalk_reent+0x3a>
 8012996:	4629      	mov	r1, r5
 8012998:	4630      	mov	r0, r6
 801299a:	47c0      	blx	r8
 801299c:	4307      	orrs	r7, r0
 801299e:	3568      	adds	r5, #104	; 0x68
 80129a0:	e7e9      	b.n	8012976 <_fwalk_reent+0x12>

080129a2 <__retarget_lock_init_recursive>:
 80129a2:	4770      	bx	lr

080129a4 <__retarget_lock_acquire_recursive>:
 80129a4:	4770      	bx	lr

080129a6 <__retarget_lock_release_recursive>:
 80129a6:	4770      	bx	lr

080129a8 <__malloc_lock>:
 80129a8:	4801      	ldr	r0, [pc, #4]	; (80129b0 <__malloc_lock+0x8>)
 80129aa:	f7ff bffb 	b.w	80129a4 <__retarget_lock_acquire_recursive>
 80129ae:	bf00      	nop
 80129b0:	2000819c 	.word	0x2000819c

080129b4 <__malloc_unlock>:
 80129b4:	4801      	ldr	r0, [pc, #4]	; (80129bc <__malloc_unlock+0x8>)
 80129b6:	f7ff bff6 	b.w	80129a6 <__retarget_lock_release_recursive>
 80129ba:	bf00      	nop
 80129bc:	2000819c 	.word	0x2000819c

080129c0 <__ssputs_r>:
 80129c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129c4:	688e      	ldr	r6, [r1, #8]
 80129c6:	429e      	cmp	r6, r3
 80129c8:	4682      	mov	sl, r0
 80129ca:	460c      	mov	r4, r1
 80129cc:	4690      	mov	r8, r2
 80129ce:	461f      	mov	r7, r3
 80129d0:	d838      	bhi.n	8012a44 <__ssputs_r+0x84>
 80129d2:	898a      	ldrh	r2, [r1, #12]
 80129d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80129d8:	d032      	beq.n	8012a40 <__ssputs_r+0x80>
 80129da:	6825      	ldr	r5, [r4, #0]
 80129dc:	6909      	ldr	r1, [r1, #16]
 80129de:	eba5 0901 	sub.w	r9, r5, r1
 80129e2:	6965      	ldr	r5, [r4, #20]
 80129e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80129e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80129ec:	3301      	adds	r3, #1
 80129ee:	444b      	add	r3, r9
 80129f0:	106d      	asrs	r5, r5, #1
 80129f2:	429d      	cmp	r5, r3
 80129f4:	bf38      	it	cc
 80129f6:	461d      	movcc	r5, r3
 80129f8:	0553      	lsls	r3, r2, #21
 80129fa:	d531      	bpl.n	8012a60 <__ssputs_r+0xa0>
 80129fc:	4629      	mov	r1, r5
 80129fe:	f7ff fd2d 	bl	801245c <_malloc_r>
 8012a02:	4606      	mov	r6, r0
 8012a04:	b950      	cbnz	r0, 8012a1c <__ssputs_r+0x5c>
 8012a06:	230c      	movs	r3, #12
 8012a08:	f8ca 3000 	str.w	r3, [sl]
 8012a0c:	89a3      	ldrh	r3, [r4, #12]
 8012a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a12:	81a3      	strh	r3, [r4, #12]
 8012a14:	f04f 30ff 	mov.w	r0, #4294967295
 8012a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a1c:	6921      	ldr	r1, [r4, #16]
 8012a1e:	464a      	mov	r2, r9
 8012a20:	f7ff fc80 	bl	8012324 <memcpy>
 8012a24:	89a3      	ldrh	r3, [r4, #12]
 8012a26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a2e:	81a3      	strh	r3, [r4, #12]
 8012a30:	6126      	str	r6, [r4, #16]
 8012a32:	6165      	str	r5, [r4, #20]
 8012a34:	444e      	add	r6, r9
 8012a36:	eba5 0509 	sub.w	r5, r5, r9
 8012a3a:	6026      	str	r6, [r4, #0]
 8012a3c:	60a5      	str	r5, [r4, #8]
 8012a3e:	463e      	mov	r6, r7
 8012a40:	42be      	cmp	r6, r7
 8012a42:	d900      	bls.n	8012a46 <__ssputs_r+0x86>
 8012a44:	463e      	mov	r6, r7
 8012a46:	6820      	ldr	r0, [r4, #0]
 8012a48:	4632      	mov	r2, r6
 8012a4a:	4641      	mov	r1, r8
 8012a4c:	f7ff fc78 	bl	8012340 <memmove>
 8012a50:	68a3      	ldr	r3, [r4, #8]
 8012a52:	1b9b      	subs	r3, r3, r6
 8012a54:	60a3      	str	r3, [r4, #8]
 8012a56:	6823      	ldr	r3, [r4, #0]
 8012a58:	4433      	add	r3, r6
 8012a5a:	6023      	str	r3, [r4, #0]
 8012a5c:	2000      	movs	r0, #0
 8012a5e:	e7db      	b.n	8012a18 <__ssputs_r+0x58>
 8012a60:	462a      	mov	r2, r5
 8012a62:	f000 fe5f 	bl	8013724 <_realloc_r>
 8012a66:	4606      	mov	r6, r0
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	d1e1      	bne.n	8012a30 <__ssputs_r+0x70>
 8012a6c:	6921      	ldr	r1, [r4, #16]
 8012a6e:	4650      	mov	r0, sl
 8012a70:	f7ff fc88 	bl	8012384 <_free_r>
 8012a74:	e7c7      	b.n	8012a06 <__ssputs_r+0x46>
	...

08012a78 <_svfiprintf_r>:
 8012a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a7c:	4698      	mov	r8, r3
 8012a7e:	898b      	ldrh	r3, [r1, #12]
 8012a80:	061b      	lsls	r3, r3, #24
 8012a82:	b09d      	sub	sp, #116	; 0x74
 8012a84:	4607      	mov	r7, r0
 8012a86:	460d      	mov	r5, r1
 8012a88:	4614      	mov	r4, r2
 8012a8a:	d50e      	bpl.n	8012aaa <_svfiprintf_r+0x32>
 8012a8c:	690b      	ldr	r3, [r1, #16]
 8012a8e:	b963      	cbnz	r3, 8012aaa <_svfiprintf_r+0x32>
 8012a90:	2140      	movs	r1, #64	; 0x40
 8012a92:	f7ff fce3 	bl	801245c <_malloc_r>
 8012a96:	6028      	str	r0, [r5, #0]
 8012a98:	6128      	str	r0, [r5, #16]
 8012a9a:	b920      	cbnz	r0, 8012aa6 <_svfiprintf_r+0x2e>
 8012a9c:	230c      	movs	r3, #12
 8012a9e:	603b      	str	r3, [r7, #0]
 8012aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa4:	e0d1      	b.n	8012c4a <_svfiprintf_r+0x1d2>
 8012aa6:	2340      	movs	r3, #64	; 0x40
 8012aa8:	616b      	str	r3, [r5, #20]
 8012aaa:	2300      	movs	r3, #0
 8012aac:	9309      	str	r3, [sp, #36]	; 0x24
 8012aae:	2320      	movs	r3, #32
 8012ab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ab4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ab8:	2330      	movs	r3, #48	; 0x30
 8012aba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012c64 <_svfiprintf_r+0x1ec>
 8012abe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ac2:	f04f 0901 	mov.w	r9, #1
 8012ac6:	4623      	mov	r3, r4
 8012ac8:	469a      	mov	sl, r3
 8012aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ace:	b10a      	cbz	r2, 8012ad4 <_svfiprintf_r+0x5c>
 8012ad0:	2a25      	cmp	r2, #37	; 0x25
 8012ad2:	d1f9      	bne.n	8012ac8 <_svfiprintf_r+0x50>
 8012ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8012ad8:	d00b      	beq.n	8012af2 <_svfiprintf_r+0x7a>
 8012ada:	465b      	mov	r3, fp
 8012adc:	4622      	mov	r2, r4
 8012ade:	4629      	mov	r1, r5
 8012ae0:	4638      	mov	r0, r7
 8012ae2:	f7ff ff6d 	bl	80129c0 <__ssputs_r>
 8012ae6:	3001      	adds	r0, #1
 8012ae8:	f000 80aa 	beq.w	8012c40 <_svfiprintf_r+0x1c8>
 8012aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012aee:	445a      	add	r2, fp
 8012af0:	9209      	str	r2, [sp, #36]	; 0x24
 8012af2:	f89a 3000 	ldrb.w	r3, [sl]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	f000 80a2 	beq.w	8012c40 <_svfiprintf_r+0x1c8>
 8012afc:	2300      	movs	r3, #0
 8012afe:	f04f 32ff 	mov.w	r2, #4294967295
 8012b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b06:	f10a 0a01 	add.w	sl, sl, #1
 8012b0a:	9304      	str	r3, [sp, #16]
 8012b0c:	9307      	str	r3, [sp, #28]
 8012b0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b12:	931a      	str	r3, [sp, #104]	; 0x68
 8012b14:	4654      	mov	r4, sl
 8012b16:	2205      	movs	r2, #5
 8012b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b1c:	4851      	ldr	r0, [pc, #324]	; (8012c64 <_svfiprintf_r+0x1ec>)
 8012b1e:	f7ed fb7f 	bl	8000220 <memchr>
 8012b22:	9a04      	ldr	r2, [sp, #16]
 8012b24:	b9d8      	cbnz	r0, 8012b5e <_svfiprintf_r+0xe6>
 8012b26:	06d0      	lsls	r0, r2, #27
 8012b28:	bf44      	itt	mi
 8012b2a:	2320      	movmi	r3, #32
 8012b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b30:	0711      	lsls	r1, r2, #28
 8012b32:	bf44      	itt	mi
 8012b34:	232b      	movmi	r3, #43	; 0x2b
 8012b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8012b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8012b40:	d015      	beq.n	8012b6e <_svfiprintf_r+0xf6>
 8012b42:	9a07      	ldr	r2, [sp, #28]
 8012b44:	4654      	mov	r4, sl
 8012b46:	2000      	movs	r0, #0
 8012b48:	f04f 0c0a 	mov.w	ip, #10
 8012b4c:	4621      	mov	r1, r4
 8012b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b52:	3b30      	subs	r3, #48	; 0x30
 8012b54:	2b09      	cmp	r3, #9
 8012b56:	d94e      	bls.n	8012bf6 <_svfiprintf_r+0x17e>
 8012b58:	b1b0      	cbz	r0, 8012b88 <_svfiprintf_r+0x110>
 8012b5a:	9207      	str	r2, [sp, #28]
 8012b5c:	e014      	b.n	8012b88 <_svfiprintf_r+0x110>
 8012b5e:	eba0 0308 	sub.w	r3, r0, r8
 8012b62:	fa09 f303 	lsl.w	r3, r9, r3
 8012b66:	4313      	orrs	r3, r2
 8012b68:	9304      	str	r3, [sp, #16]
 8012b6a:	46a2      	mov	sl, r4
 8012b6c:	e7d2      	b.n	8012b14 <_svfiprintf_r+0x9c>
 8012b6e:	9b03      	ldr	r3, [sp, #12]
 8012b70:	1d19      	adds	r1, r3, #4
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	9103      	str	r1, [sp, #12]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	bfbb      	ittet	lt
 8012b7a:	425b      	neglt	r3, r3
 8012b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8012b80:	9307      	strge	r3, [sp, #28]
 8012b82:	9307      	strlt	r3, [sp, #28]
 8012b84:	bfb8      	it	lt
 8012b86:	9204      	strlt	r2, [sp, #16]
 8012b88:	7823      	ldrb	r3, [r4, #0]
 8012b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8012b8c:	d10c      	bne.n	8012ba8 <_svfiprintf_r+0x130>
 8012b8e:	7863      	ldrb	r3, [r4, #1]
 8012b90:	2b2a      	cmp	r3, #42	; 0x2a
 8012b92:	d135      	bne.n	8012c00 <_svfiprintf_r+0x188>
 8012b94:	9b03      	ldr	r3, [sp, #12]
 8012b96:	1d1a      	adds	r2, r3, #4
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	9203      	str	r2, [sp, #12]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	bfb8      	it	lt
 8012ba0:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ba4:	3402      	adds	r4, #2
 8012ba6:	9305      	str	r3, [sp, #20]
 8012ba8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012c74 <_svfiprintf_r+0x1fc>
 8012bac:	7821      	ldrb	r1, [r4, #0]
 8012bae:	2203      	movs	r2, #3
 8012bb0:	4650      	mov	r0, sl
 8012bb2:	f7ed fb35 	bl	8000220 <memchr>
 8012bb6:	b140      	cbz	r0, 8012bca <_svfiprintf_r+0x152>
 8012bb8:	2340      	movs	r3, #64	; 0x40
 8012bba:	eba0 000a 	sub.w	r0, r0, sl
 8012bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8012bc2:	9b04      	ldr	r3, [sp, #16]
 8012bc4:	4303      	orrs	r3, r0
 8012bc6:	3401      	adds	r4, #1
 8012bc8:	9304      	str	r3, [sp, #16]
 8012bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bce:	4826      	ldr	r0, [pc, #152]	; (8012c68 <_svfiprintf_r+0x1f0>)
 8012bd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012bd4:	2206      	movs	r2, #6
 8012bd6:	f7ed fb23 	bl	8000220 <memchr>
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	d038      	beq.n	8012c50 <_svfiprintf_r+0x1d8>
 8012bde:	4b23      	ldr	r3, [pc, #140]	; (8012c6c <_svfiprintf_r+0x1f4>)
 8012be0:	bb1b      	cbnz	r3, 8012c2a <_svfiprintf_r+0x1b2>
 8012be2:	9b03      	ldr	r3, [sp, #12]
 8012be4:	3307      	adds	r3, #7
 8012be6:	f023 0307 	bic.w	r3, r3, #7
 8012bea:	3308      	adds	r3, #8
 8012bec:	9303      	str	r3, [sp, #12]
 8012bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bf0:	4433      	add	r3, r6
 8012bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8012bf4:	e767      	b.n	8012ac6 <_svfiprintf_r+0x4e>
 8012bf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012bfa:	460c      	mov	r4, r1
 8012bfc:	2001      	movs	r0, #1
 8012bfe:	e7a5      	b.n	8012b4c <_svfiprintf_r+0xd4>
 8012c00:	2300      	movs	r3, #0
 8012c02:	3401      	adds	r4, #1
 8012c04:	9305      	str	r3, [sp, #20]
 8012c06:	4619      	mov	r1, r3
 8012c08:	f04f 0c0a 	mov.w	ip, #10
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c12:	3a30      	subs	r2, #48	; 0x30
 8012c14:	2a09      	cmp	r2, #9
 8012c16:	d903      	bls.n	8012c20 <_svfiprintf_r+0x1a8>
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d0c5      	beq.n	8012ba8 <_svfiprintf_r+0x130>
 8012c1c:	9105      	str	r1, [sp, #20]
 8012c1e:	e7c3      	b.n	8012ba8 <_svfiprintf_r+0x130>
 8012c20:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c24:	4604      	mov	r4, r0
 8012c26:	2301      	movs	r3, #1
 8012c28:	e7f0      	b.n	8012c0c <_svfiprintf_r+0x194>
 8012c2a:	ab03      	add	r3, sp, #12
 8012c2c:	9300      	str	r3, [sp, #0]
 8012c2e:	462a      	mov	r2, r5
 8012c30:	4b0f      	ldr	r3, [pc, #60]	; (8012c70 <_svfiprintf_r+0x1f8>)
 8012c32:	a904      	add	r1, sp, #16
 8012c34:	4638      	mov	r0, r7
 8012c36:	f3af 8000 	nop.w
 8012c3a:	1c42      	adds	r2, r0, #1
 8012c3c:	4606      	mov	r6, r0
 8012c3e:	d1d6      	bne.n	8012bee <_svfiprintf_r+0x176>
 8012c40:	89ab      	ldrh	r3, [r5, #12]
 8012c42:	065b      	lsls	r3, r3, #25
 8012c44:	f53f af2c 	bmi.w	8012aa0 <_svfiprintf_r+0x28>
 8012c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c4a:	b01d      	add	sp, #116	; 0x74
 8012c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c50:	ab03      	add	r3, sp, #12
 8012c52:	9300      	str	r3, [sp, #0]
 8012c54:	462a      	mov	r2, r5
 8012c56:	4b06      	ldr	r3, [pc, #24]	; (8012c70 <_svfiprintf_r+0x1f8>)
 8012c58:	a904      	add	r1, sp, #16
 8012c5a:	4638      	mov	r0, r7
 8012c5c:	f000 f9d4 	bl	8013008 <_printf_i>
 8012c60:	e7eb      	b.n	8012c3a <_svfiprintf_r+0x1c2>
 8012c62:	bf00      	nop
 8012c64:	08016804 	.word	0x08016804
 8012c68:	0801680e 	.word	0x0801680e
 8012c6c:	00000000 	.word	0x00000000
 8012c70:	080129c1 	.word	0x080129c1
 8012c74:	0801680a 	.word	0x0801680a

08012c78 <__sfputc_r>:
 8012c78:	6893      	ldr	r3, [r2, #8]
 8012c7a:	3b01      	subs	r3, #1
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	b410      	push	{r4}
 8012c80:	6093      	str	r3, [r2, #8]
 8012c82:	da08      	bge.n	8012c96 <__sfputc_r+0x1e>
 8012c84:	6994      	ldr	r4, [r2, #24]
 8012c86:	42a3      	cmp	r3, r4
 8012c88:	db01      	blt.n	8012c8e <__sfputc_r+0x16>
 8012c8a:	290a      	cmp	r1, #10
 8012c8c:	d103      	bne.n	8012c96 <__sfputc_r+0x1e>
 8012c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c92:	f000 bb23 	b.w	80132dc <__swbuf_r>
 8012c96:	6813      	ldr	r3, [r2, #0]
 8012c98:	1c58      	adds	r0, r3, #1
 8012c9a:	6010      	str	r0, [r2, #0]
 8012c9c:	7019      	strb	r1, [r3, #0]
 8012c9e:	4608      	mov	r0, r1
 8012ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ca4:	4770      	bx	lr

08012ca6 <__sfputs_r>:
 8012ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ca8:	4606      	mov	r6, r0
 8012caa:	460f      	mov	r7, r1
 8012cac:	4614      	mov	r4, r2
 8012cae:	18d5      	adds	r5, r2, r3
 8012cb0:	42ac      	cmp	r4, r5
 8012cb2:	d101      	bne.n	8012cb8 <__sfputs_r+0x12>
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	e007      	b.n	8012cc8 <__sfputs_r+0x22>
 8012cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cbc:	463a      	mov	r2, r7
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7ff ffda 	bl	8012c78 <__sfputc_r>
 8012cc4:	1c43      	adds	r3, r0, #1
 8012cc6:	d1f3      	bne.n	8012cb0 <__sfputs_r+0xa>
 8012cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ccc <_vfiprintf_r>:
 8012ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd0:	460d      	mov	r5, r1
 8012cd2:	b09d      	sub	sp, #116	; 0x74
 8012cd4:	4614      	mov	r4, r2
 8012cd6:	4698      	mov	r8, r3
 8012cd8:	4606      	mov	r6, r0
 8012cda:	b118      	cbz	r0, 8012ce4 <_vfiprintf_r+0x18>
 8012cdc:	6983      	ldr	r3, [r0, #24]
 8012cde:	b90b      	cbnz	r3, 8012ce4 <_vfiprintf_r+0x18>
 8012ce0:	f7ff fdb0 	bl	8012844 <__sinit>
 8012ce4:	4b89      	ldr	r3, [pc, #548]	; (8012f0c <_vfiprintf_r+0x240>)
 8012ce6:	429d      	cmp	r5, r3
 8012ce8:	d11b      	bne.n	8012d22 <_vfiprintf_r+0x56>
 8012cea:	6875      	ldr	r5, [r6, #4]
 8012cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012cee:	07d9      	lsls	r1, r3, #31
 8012cf0:	d405      	bmi.n	8012cfe <_vfiprintf_r+0x32>
 8012cf2:	89ab      	ldrh	r3, [r5, #12]
 8012cf4:	059a      	lsls	r2, r3, #22
 8012cf6:	d402      	bmi.n	8012cfe <_vfiprintf_r+0x32>
 8012cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cfa:	f7ff fe53 	bl	80129a4 <__retarget_lock_acquire_recursive>
 8012cfe:	89ab      	ldrh	r3, [r5, #12]
 8012d00:	071b      	lsls	r3, r3, #28
 8012d02:	d501      	bpl.n	8012d08 <_vfiprintf_r+0x3c>
 8012d04:	692b      	ldr	r3, [r5, #16]
 8012d06:	b9eb      	cbnz	r3, 8012d44 <_vfiprintf_r+0x78>
 8012d08:	4629      	mov	r1, r5
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	f000 fb4a 	bl	80133a4 <__swsetup_r>
 8012d10:	b1c0      	cbz	r0, 8012d44 <_vfiprintf_r+0x78>
 8012d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d14:	07dc      	lsls	r4, r3, #31
 8012d16:	d50e      	bpl.n	8012d36 <_vfiprintf_r+0x6a>
 8012d18:	f04f 30ff 	mov.w	r0, #4294967295
 8012d1c:	b01d      	add	sp, #116	; 0x74
 8012d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d22:	4b7b      	ldr	r3, [pc, #492]	; (8012f10 <_vfiprintf_r+0x244>)
 8012d24:	429d      	cmp	r5, r3
 8012d26:	d101      	bne.n	8012d2c <_vfiprintf_r+0x60>
 8012d28:	68b5      	ldr	r5, [r6, #8]
 8012d2a:	e7df      	b.n	8012cec <_vfiprintf_r+0x20>
 8012d2c:	4b79      	ldr	r3, [pc, #484]	; (8012f14 <_vfiprintf_r+0x248>)
 8012d2e:	429d      	cmp	r5, r3
 8012d30:	bf08      	it	eq
 8012d32:	68f5      	ldreq	r5, [r6, #12]
 8012d34:	e7da      	b.n	8012cec <_vfiprintf_r+0x20>
 8012d36:	89ab      	ldrh	r3, [r5, #12]
 8012d38:	0598      	lsls	r0, r3, #22
 8012d3a:	d4ed      	bmi.n	8012d18 <_vfiprintf_r+0x4c>
 8012d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d3e:	f7ff fe32 	bl	80129a6 <__retarget_lock_release_recursive>
 8012d42:	e7e9      	b.n	8012d18 <_vfiprintf_r+0x4c>
 8012d44:	2300      	movs	r3, #0
 8012d46:	9309      	str	r3, [sp, #36]	; 0x24
 8012d48:	2320      	movs	r3, #32
 8012d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d52:	2330      	movs	r3, #48	; 0x30
 8012d54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012f18 <_vfiprintf_r+0x24c>
 8012d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d5c:	f04f 0901 	mov.w	r9, #1
 8012d60:	4623      	mov	r3, r4
 8012d62:	469a      	mov	sl, r3
 8012d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d68:	b10a      	cbz	r2, 8012d6e <_vfiprintf_r+0xa2>
 8012d6a:	2a25      	cmp	r2, #37	; 0x25
 8012d6c:	d1f9      	bne.n	8012d62 <_vfiprintf_r+0x96>
 8012d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8012d72:	d00b      	beq.n	8012d8c <_vfiprintf_r+0xc0>
 8012d74:	465b      	mov	r3, fp
 8012d76:	4622      	mov	r2, r4
 8012d78:	4629      	mov	r1, r5
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	f7ff ff93 	bl	8012ca6 <__sfputs_r>
 8012d80:	3001      	adds	r0, #1
 8012d82:	f000 80aa 	beq.w	8012eda <_vfiprintf_r+0x20e>
 8012d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d88:	445a      	add	r2, fp
 8012d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8012d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f000 80a2 	beq.w	8012eda <_vfiprintf_r+0x20e>
 8012d96:	2300      	movs	r3, #0
 8012d98:	f04f 32ff 	mov.w	r2, #4294967295
 8012d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012da0:	f10a 0a01 	add.w	sl, sl, #1
 8012da4:	9304      	str	r3, [sp, #16]
 8012da6:	9307      	str	r3, [sp, #28]
 8012da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012dac:	931a      	str	r3, [sp, #104]	; 0x68
 8012dae:	4654      	mov	r4, sl
 8012db0:	2205      	movs	r2, #5
 8012db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012db6:	4858      	ldr	r0, [pc, #352]	; (8012f18 <_vfiprintf_r+0x24c>)
 8012db8:	f7ed fa32 	bl	8000220 <memchr>
 8012dbc:	9a04      	ldr	r2, [sp, #16]
 8012dbe:	b9d8      	cbnz	r0, 8012df8 <_vfiprintf_r+0x12c>
 8012dc0:	06d1      	lsls	r1, r2, #27
 8012dc2:	bf44      	itt	mi
 8012dc4:	2320      	movmi	r3, #32
 8012dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dca:	0713      	lsls	r3, r2, #28
 8012dcc:	bf44      	itt	mi
 8012dce:	232b      	movmi	r3, #43	; 0x2b
 8012dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8012dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8012dda:	d015      	beq.n	8012e08 <_vfiprintf_r+0x13c>
 8012ddc:	9a07      	ldr	r2, [sp, #28]
 8012dde:	4654      	mov	r4, sl
 8012de0:	2000      	movs	r0, #0
 8012de2:	f04f 0c0a 	mov.w	ip, #10
 8012de6:	4621      	mov	r1, r4
 8012de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dec:	3b30      	subs	r3, #48	; 0x30
 8012dee:	2b09      	cmp	r3, #9
 8012df0:	d94e      	bls.n	8012e90 <_vfiprintf_r+0x1c4>
 8012df2:	b1b0      	cbz	r0, 8012e22 <_vfiprintf_r+0x156>
 8012df4:	9207      	str	r2, [sp, #28]
 8012df6:	e014      	b.n	8012e22 <_vfiprintf_r+0x156>
 8012df8:	eba0 0308 	sub.w	r3, r0, r8
 8012dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8012e00:	4313      	orrs	r3, r2
 8012e02:	9304      	str	r3, [sp, #16]
 8012e04:	46a2      	mov	sl, r4
 8012e06:	e7d2      	b.n	8012dae <_vfiprintf_r+0xe2>
 8012e08:	9b03      	ldr	r3, [sp, #12]
 8012e0a:	1d19      	adds	r1, r3, #4
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	9103      	str	r1, [sp, #12]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	bfbb      	ittet	lt
 8012e14:	425b      	neglt	r3, r3
 8012e16:	f042 0202 	orrlt.w	r2, r2, #2
 8012e1a:	9307      	strge	r3, [sp, #28]
 8012e1c:	9307      	strlt	r3, [sp, #28]
 8012e1e:	bfb8      	it	lt
 8012e20:	9204      	strlt	r2, [sp, #16]
 8012e22:	7823      	ldrb	r3, [r4, #0]
 8012e24:	2b2e      	cmp	r3, #46	; 0x2e
 8012e26:	d10c      	bne.n	8012e42 <_vfiprintf_r+0x176>
 8012e28:	7863      	ldrb	r3, [r4, #1]
 8012e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8012e2c:	d135      	bne.n	8012e9a <_vfiprintf_r+0x1ce>
 8012e2e:	9b03      	ldr	r3, [sp, #12]
 8012e30:	1d1a      	adds	r2, r3, #4
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	9203      	str	r2, [sp, #12]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	bfb8      	it	lt
 8012e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e3e:	3402      	adds	r4, #2
 8012e40:	9305      	str	r3, [sp, #20]
 8012e42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012f28 <_vfiprintf_r+0x25c>
 8012e46:	7821      	ldrb	r1, [r4, #0]
 8012e48:	2203      	movs	r2, #3
 8012e4a:	4650      	mov	r0, sl
 8012e4c:	f7ed f9e8 	bl	8000220 <memchr>
 8012e50:	b140      	cbz	r0, 8012e64 <_vfiprintf_r+0x198>
 8012e52:	2340      	movs	r3, #64	; 0x40
 8012e54:	eba0 000a 	sub.w	r0, r0, sl
 8012e58:	fa03 f000 	lsl.w	r0, r3, r0
 8012e5c:	9b04      	ldr	r3, [sp, #16]
 8012e5e:	4303      	orrs	r3, r0
 8012e60:	3401      	adds	r4, #1
 8012e62:	9304      	str	r3, [sp, #16]
 8012e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e68:	482c      	ldr	r0, [pc, #176]	; (8012f1c <_vfiprintf_r+0x250>)
 8012e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e6e:	2206      	movs	r2, #6
 8012e70:	f7ed f9d6 	bl	8000220 <memchr>
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d03f      	beq.n	8012ef8 <_vfiprintf_r+0x22c>
 8012e78:	4b29      	ldr	r3, [pc, #164]	; (8012f20 <_vfiprintf_r+0x254>)
 8012e7a:	bb1b      	cbnz	r3, 8012ec4 <_vfiprintf_r+0x1f8>
 8012e7c:	9b03      	ldr	r3, [sp, #12]
 8012e7e:	3307      	adds	r3, #7
 8012e80:	f023 0307 	bic.w	r3, r3, #7
 8012e84:	3308      	adds	r3, #8
 8012e86:	9303      	str	r3, [sp, #12]
 8012e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e8a:	443b      	add	r3, r7
 8012e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012e8e:	e767      	b.n	8012d60 <_vfiprintf_r+0x94>
 8012e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e94:	460c      	mov	r4, r1
 8012e96:	2001      	movs	r0, #1
 8012e98:	e7a5      	b.n	8012de6 <_vfiprintf_r+0x11a>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	3401      	adds	r4, #1
 8012e9e:	9305      	str	r3, [sp, #20]
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	f04f 0c0a 	mov.w	ip, #10
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012eac:	3a30      	subs	r2, #48	; 0x30
 8012eae:	2a09      	cmp	r2, #9
 8012eb0:	d903      	bls.n	8012eba <_vfiprintf_r+0x1ee>
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d0c5      	beq.n	8012e42 <_vfiprintf_r+0x176>
 8012eb6:	9105      	str	r1, [sp, #20]
 8012eb8:	e7c3      	b.n	8012e42 <_vfiprintf_r+0x176>
 8012eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	e7f0      	b.n	8012ea6 <_vfiprintf_r+0x1da>
 8012ec4:	ab03      	add	r3, sp, #12
 8012ec6:	9300      	str	r3, [sp, #0]
 8012ec8:	462a      	mov	r2, r5
 8012eca:	4b16      	ldr	r3, [pc, #88]	; (8012f24 <_vfiprintf_r+0x258>)
 8012ecc:	a904      	add	r1, sp, #16
 8012ece:	4630      	mov	r0, r6
 8012ed0:	f3af 8000 	nop.w
 8012ed4:	4607      	mov	r7, r0
 8012ed6:	1c78      	adds	r0, r7, #1
 8012ed8:	d1d6      	bne.n	8012e88 <_vfiprintf_r+0x1bc>
 8012eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012edc:	07d9      	lsls	r1, r3, #31
 8012ede:	d405      	bmi.n	8012eec <_vfiprintf_r+0x220>
 8012ee0:	89ab      	ldrh	r3, [r5, #12]
 8012ee2:	059a      	lsls	r2, r3, #22
 8012ee4:	d402      	bmi.n	8012eec <_vfiprintf_r+0x220>
 8012ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ee8:	f7ff fd5d 	bl	80129a6 <__retarget_lock_release_recursive>
 8012eec:	89ab      	ldrh	r3, [r5, #12]
 8012eee:	065b      	lsls	r3, r3, #25
 8012ef0:	f53f af12 	bmi.w	8012d18 <_vfiprintf_r+0x4c>
 8012ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ef6:	e711      	b.n	8012d1c <_vfiprintf_r+0x50>
 8012ef8:	ab03      	add	r3, sp, #12
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	462a      	mov	r2, r5
 8012efe:	4b09      	ldr	r3, [pc, #36]	; (8012f24 <_vfiprintf_r+0x258>)
 8012f00:	a904      	add	r1, sp, #16
 8012f02:	4630      	mov	r0, r6
 8012f04:	f000 f880 	bl	8013008 <_printf_i>
 8012f08:	e7e4      	b.n	8012ed4 <_vfiprintf_r+0x208>
 8012f0a:	bf00      	nop
 8012f0c:	080167c4 	.word	0x080167c4
 8012f10:	080167e4 	.word	0x080167e4
 8012f14:	080167a4 	.word	0x080167a4
 8012f18:	08016804 	.word	0x08016804
 8012f1c:	0801680e 	.word	0x0801680e
 8012f20:	00000000 	.word	0x00000000
 8012f24:	08012ca7 	.word	0x08012ca7
 8012f28:	0801680a 	.word	0x0801680a

08012f2c <_printf_common>:
 8012f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f30:	4616      	mov	r6, r2
 8012f32:	4699      	mov	r9, r3
 8012f34:	688a      	ldr	r2, [r1, #8]
 8012f36:	690b      	ldr	r3, [r1, #16]
 8012f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	bfb8      	it	lt
 8012f40:	4613      	movlt	r3, r2
 8012f42:	6033      	str	r3, [r6, #0]
 8012f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f48:	4607      	mov	r7, r0
 8012f4a:	460c      	mov	r4, r1
 8012f4c:	b10a      	cbz	r2, 8012f52 <_printf_common+0x26>
 8012f4e:	3301      	adds	r3, #1
 8012f50:	6033      	str	r3, [r6, #0]
 8012f52:	6823      	ldr	r3, [r4, #0]
 8012f54:	0699      	lsls	r1, r3, #26
 8012f56:	bf42      	ittt	mi
 8012f58:	6833      	ldrmi	r3, [r6, #0]
 8012f5a:	3302      	addmi	r3, #2
 8012f5c:	6033      	strmi	r3, [r6, #0]
 8012f5e:	6825      	ldr	r5, [r4, #0]
 8012f60:	f015 0506 	ands.w	r5, r5, #6
 8012f64:	d106      	bne.n	8012f74 <_printf_common+0x48>
 8012f66:	f104 0a19 	add.w	sl, r4, #25
 8012f6a:	68e3      	ldr	r3, [r4, #12]
 8012f6c:	6832      	ldr	r2, [r6, #0]
 8012f6e:	1a9b      	subs	r3, r3, r2
 8012f70:	42ab      	cmp	r3, r5
 8012f72:	dc26      	bgt.n	8012fc2 <_printf_common+0x96>
 8012f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012f78:	1e13      	subs	r3, r2, #0
 8012f7a:	6822      	ldr	r2, [r4, #0]
 8012f7c:	bf18      	it	ne
 8012f7e:	2301      	movne	r3, #1
 8012f80:	0692      	lsls	r2, r2, #26
 8012f82:	d42b      	bmi.n	8012fdc <_printf_common+0xb0>
 8012f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f88:	4649      	mov	r1, r9
 8012f8a:	4638      	mov	r0, r7
 8012f8c:	47c0      	blx	r8
 8012f8e:	3001      	adds	r0, #1
 8012f90:	d01e      	beq.n	8012fd0 <_printf_common+0xa4>
 8012f92:	6823      	ldr	r3, [r4, #0]
 8012f94:	68e5      	ldr	r5, [r4, #12]
 8012f96:	6832      	ldr	r2, [r6, #0]
 8012f98:	f003 0306 	and.w	r3, r3, #6
 8012f9c:	2b04      	cmp	r3, #4
 8012f9e:	bf08      	it	eq
 8012fa0:	1aad      	subeq	r5, r5, r2
 8012fa2:	68a3      	ldr	r3, [r4, #8]
 8012fa4:	6922      	ldr	r2, [r4, #16]
 8012fa6:	bf0c      	ite	eq
 8012fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012fac:	2500      	movne	r5, #0
 8012fae:	4293      	cmp	r3, r2
 8012fb0:	bfc4      	itt	gt
 8012fb2:	1a9b      	subgt	r3, r3, r2
 8012fb4:	18ed      	addgt	r5, r5, r3
 8012fb6:	2600      	movs	r6, #0
 8012fb8:	341a      	adds	r4, #26
 8012fba:	42b5      	cmp	r5, r6
 8012fbc:	d11a      	bne.n	8012ff4 <_printf_common+0xc8>
 8012fbe:	2000      	movs	r0, #0
 8012fc0:	e008      	b.n	8012fd4 <_printf_common+0xa8>
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	4652      	mov	r2, sl
 8012fc6:	4649      	mov	r1, r9
 8012fc8:	4638      	mov	r0, r7
 8012fca:	47c0      	blx	r8
 8012fcc:	3001      	adds	r0, #1
 8012fce:	d103      	bne.n	8012fd8 <_printf_common+0xac>
 8012fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fd8:	3501      	adds	r5, #1
 8012fda:	e7c6      	b.n	8012f6a <_printf_common+0x3e>
 8012fdc:	18e1      	adds	r1, r4, r3
 8012fde:	1c5a      	adds	r2, r3, #1
 8012fe0:	2030      	movs	r0, #48	; 0x30
 8012fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012fe6:	4422      	add	r2, r4
 8012fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ff0:	3302      	adds	r3, #2
 8012ff2:	e7c7      	b.n	8012f84 <_printf_common+0x58>
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	4622      	mov	r2, r4
 8012ff8:	4649      	mov	r1, r9
 8012ffa:	4638      	mov	r0, r7
 8012ffc:	47c0      	blx	r8
 8012ffe:	3001      	adds	r0, #1
 8013000:	d0e6      	beq.n	8012fd0 <_printf_common+0xa4>
 8013002:	3601      	adds	r6, #1
 8013004:	e7d9      	b.n	8012fba <_printf_common+0x8e>
	...

08013008 <_printf_i>:
 8013008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801300c:	7e0f      	ldrb	r7, [r1, #24]
 801300e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013010:	2f78      	cmp	r7, #120	; 0x78
 8013012:	4691      	mov	r9, r2
 8013014:	4680      	mov	r8, r0
 8013016:	460c      	mov	r4, r1
 8013018:	469a      	mov	sl, r3
 801301a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801301e:	d807      	bhi.n	8013030 <_printf_i+0x28>
 8013020:	2f62      	cmp	r7, #98	; 0x62
 8013022:	d80a      	bhi.n	801303a <_printf_i+0x32>
 8013024:	2f00      	cmp	r7, #0
 8013026:	f000 80d8 	beq.w	80131da <_printf_i+0x1d2>
 801302a:	2f58      	cmp	r7, #88	; 0x58
 801302c:	f000 80a3 	beq.w	8013176 <_printf_i+0x16e>
 8013030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013038:	e03a      	b.n	80130b0 <_printf_i+0xa8>
 801303a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801303e:	2b15      	cmp	r3, #21
 8013040:	d8f6      	bhi.n	8013030 <_printf_i+0x28>
 8013042:	a101      	add	r1, pc, #4	; (adr r1, 8013048 <_printf_i+0x40>)
 8013044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013048:	080130a1 	.word	0x080130a1
 801304c:	080130b5 	.word	0x080130b5
 8013050:	08013031 	.word	0x08013031
 8013054:	08013031 	.word	0x08013031
 8013058:	08013031 	.word	0x08013031
 801305c:	08013031 	.word	0x08013031
 8013060:	080130b5 	.word	0x080130b5
 8013064:	08013031 	.word	0x08013031
 8013068:	08013031 	.word	0x08013031
 801306c:	08013031 	.word	0x08013031
 8013070:	08013031 	.word	0x08013031
 8013074:	080131c1 	.word	0x080131c1
 8013078:	080130e5 	.word	0x080130e5
 801307c:	080131a3 	.word	0x080131a3
 8013080:	08013031 	.word	0x08013031
 8013084:	08013031 	.word	0x08013031
 8013088:	080131e3 	.word	0x080131e3
 801308c:	08013031 	.word	0x08013031
 8013090:	080130e5 	.word	0x080130e5
 8013094:	08013031 	.word	0x08013031
 8013098:	08013031 	.word	0x08013031
 801309c:	080131ab 	.word	0x080131ab
 80130a0:	682b      	ldr	r3, [r5, #0]
 80130a2:	1d1a      	adds	r2, r3, #4
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	602a      	str	r2, [r5, #0]
 80130a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80130ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80130b0:	2301      	movs	r3, #1
 80130b2:	e0a3      	b.n	80131fc <_printf_i+0x1f4>
 80130b4:	6820      	ldr	r0, [r4, #0]
 80130b6:	6829      	ldr	r1, [r5, #0]
 80130b8:	0606      	lsls	r6, r0, #24
 80130ba:	f101 0304 	add.w	r3, r1, #4
 80130be:	d50a      	bpl.n	80130d6 <_printf_i+0xce>
 80130c0:	680e      	ldr	r6, [r1, #0]
 80130c2:	602b      	str	r3, [r5, #0]
 80130c4:	2e00      	cmp	r6, #0
 80130c6:	da03      	bge.n	80130d0 <_printf_i+0xc8>
 80130c8:	232d      	movs	r3, #45	; 0x2d
 80130ca:	4276      	negs	r6, r6
 80130cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130d0:	485e      	ldr	r0, [pc, #376]	; (801324c <_printf_i+0x244>)
 80130d2:	230a      	movs	r3, #10
 80130d4:	e019      	b.n	801310a <_printf_i+0x102>
 80130d6:	680e      	ldr	r6, [r1, #0]
 80130d8:	602b      	str	r3, [r5, #0]
 80130da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80130de:	bf18      	it	ne
 80130e0:	b236      	sxthne	r6, r6
 80130e2:	e7ef      	b.n	80130c4 <_printf_i+0xbc>
 80130e4:	682b      	ldr	r3, [r5, #0]
 80130e6:	6820      	ldr	r0, [r4, #0]
 80130e8:	1d19      	adds	r1, r3, #4
 80130ea:	6029      	str	r1, [r5, #0]
 80130ec:	0601      	lsls	r1, r0, #24
 80130ee:	d501      	bpl.n	80130f4 <_printf_i+0xec>
 80130f0:	681e      	ldr	r6, [r3, #0]
 80130f2:	e002      	b.n	80130fa <_printf_i+0xf2>
 80130f4:	0646      	lsls	r6, r0, #25
 80130f6:	d5fb      	bpl.n	80130f0 <_printf_i+0xe8>
 80130f8:	881e      	ldrh	r6, [r3, #0]
 80130fa:	4854      	ldr	r0, [pc, #336]	; (801324c <_printf_i+0x244>)
 80130fc:	2f6f      	cmp	r7, #111	; 0x6f
 80130fe:	bf0c      	ite	eq
 8013100:	2308      	moveq	r3, #8
 8013102:	230a      	movne	r3, #10
 8013104:	2100      	movs	r1, #0
 8013106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801310a:	6865      	ldr	r5, [r4, #4]
 801310c:	60a5      	str	r5, [r4, #8]
 801310e:	2d00      	cmp	r5, #0
 8013110:	bfa2      	ittt	ge
 8013112:	6821      	ldrge	r1, [r4, #0]
 8013114:	f021 0104 	bicge.w	r1, r1, #4
 8013118:	6021      	strge	r1, [r4, #0]
 801311a:	b90e      	cbnz	r6, 8013120 <_printf_i+0x118>
 801311c:	2d00      	cmp	r5, #0
 801311e:	d04d      	beq.n	80131bc <_printf_i+0x1b4>
 8013120:	4615      	mov	r5, r2
 8013122:	fbb6 f1f3 	udiv	r1, r6, r3
 8013126:	fb03 6711 	mls	r7, r3, r1, r6
 801312a:	5dc7      	ldrb	r7, [r0, r7]
 801312c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013130:	4637      	mov	r7, r6
 8013132:	42bb      	cmp	r3, r7
 8013134:	460e      	mov	r6, r1
 8013136:	d9f4      	bls.n	8013122 <_printf_i+0x11a>
 8013138:	2b08      	cmp	r3, #8
 801313a:	d10b      	bne.n	8013154 <_printf_i+0x14c>
 801313c:	6823      	ldr	r3, [r4, #0]
 801313e:	07de      	lsls	r6, r3, #31
 8013140:	d508      	bpl.n	8013154 <_printf_i+0x14c>
 8013142:	6923      	ldr	r3, [r4, #16]
 8013144:	6861      	ldr	r1, [r4, #4]
 8013146:	4299      	cmp	r1, r3
 8013148:	bfde      	ittt	le
 801314a:	2330      	movle	r3, #48	; 0x30
 801314c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013150:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013154:	1b52      	subs	r2, r2, r5
 8013156:	6122      	str	r2, [r4, #16]
 8013158:	f8cd a000 	str.w	sl, [sp]
 801315c:	464b      	mov	r3, r9
 801315e:	aa03      	add	r2, sp, #12
 8013160:	4621      	mov	r1, r4
 8013162:	4640      	mov	r0, r8
 8013164:	f7ff fee2 	bl	8012f2c <_printf_common>
 8013168:	3001      	adds	r0, #1
 801316a:	d14c      	bne.n	8013206 <_printf_i+0x1fe>
 801316c:	f04f 30ff 	mov.w	r0, #4294967295
 8013170:	b004      	add	sp, #16
 8013172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013176:	4835      	ldr	r0, [pc, #212]	; (801324c <_printf_i+0x244>)
 8013178:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801317c:	6829      	ldr	r1, [r5, #0]
 801317e:	6823      	ldr	r3, [r4, #0]
 8013180:	f851 6b04 	ldr.w	r6, [r1], #4
 8013184:	6029      	str	r1, [r5, #0]
 8013186:	061d      	lsls	r5, r3, #24
 8013188:	d514      	bpl.n	80131b4 <_printf_i+0x1ac>
 801318a:	07df      	lsls	r7, r3, #31
 801318c:	bf44      	itt	mi
 801318e:	f043 0320 	orrmi.w	r3, r3, #32
 8013192:	6023      	strmi	r3, [r4, #0]
 8013194:	b91e      	cbnz	r6, 801319e <_printf_i+0x196>
 8013196:	6823      	ldr	r3, [r4, #0]
 8013198:	f023 0320 	bic.w	r3, r3, #32
 801319c:	6023      	str	r3, [r4, #0]
 801319e:	2310      	movs	r3, #16
 80131a0:	e7b0      	b.n	8013104 <_printf_i+0xfc>
 80131a2:	6823      	ldr	r3, [r4, #0]
 80131a4:	f043 0320 	orr.w	r3, r3, #32
 80131a8:	6023      	str	r3, [r4, #0]
 80131aa:	2378      	movs	r3, #120	; 0x78
 80131ac:	4828      	ldr	r0, [pc, #160]	; (8013250 <_printf_i+0x248>)
 80131ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80131b2:	e7e3      	b.n	801317c <_printf_i+0x174>
 80131b4:	0659      	lsls	r1, r3, #25
 80131b6:	bf48      	it	mi
 80131b8:	b2b6      	uxthmi	r6, r6
 80131ba:	e7e6      	b.n	801318a <_printf_i+0x182>
 80131bc:	4615      	mov	r5, r2
 80131be:	e7bb      	b.n	8013138 <_printf_i+0x130>
 80131c0:	682b      	ldr	r3, [r5, #0]
 80131c2:	6826      	ldr	r6, [r4, #0]
 80131c4:	6961      	ldr	r1, [r4, #20]
 80131c6:	1d18      	adds	r0, r3, #4
 80131c8:	6028      	str	r0, [r5, #0]
 80131ca:	0635      	lsls	r5, r6, #24
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	d501      	bpl.n	80131d4 <_printf_i+0x1cc>
 80131d0:	6019      	str	r1, [r3, #0]
 80131d2:	e002      	b.n	80131da <_printf_i+0x1d2>
 80131d4:	0670      	lsls	r0, r6, #25
 80131d6:	d5fb      	bpl.n	80131d0 <_printf_i+0x1c8>
 80131d8:	8019      	strh	r1, [r3, #0]
 80131da:	2300      	movs	r3, #0
 80131dc:	6123      	str	r3, [r4, #16]
 80131de:	4615      	mov	r5, r2
 80131e0:	e7ba      	b.n	8013158 <_printf_i+0x150>
 80131e2:	682b      	ldr	r3, [r5, #0]
 80131e4:	1d1a      	adds	r2, r3, #4
 80131e6:	602a      	str	r2, [r5, #0]
 80131e8:	681d      	ldr	r5, [r3, #0]
 80131ea:	6862      	ldr	r2, [r4, #4]
 80131ec:	2100      	movs	r1, #0
 80131ee:	4628      	mov	r0, r5
 80131f0:	f7ed f816 	bl	8000220 <memchr>
 80131f4:	b108      	cbz	r0, 80131fa <_printf_i+0x1f2>
 80131f6:	1b40      	subs	r0, r0, r5
 80131f8:	6060      	str	r0, [r4, #4]
 80131fa:	6863      	ldr	r3, [r4, #4]
 80131fc:	6123      	str	r3, [r4, #16]
 80131fe:	2300      	movs	r3, #0
 8013200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013204:	e7a8      	b.n	8013158 <_printf_i+0x150>
 8013206:	6923      	ldr	r3, [r4, #16]
 8013208:	462a      	mov	r2, r5
 801320a:	4649      	mov	r1, r9
 801320c:	4640      	mov	r0, r8
 801320e:	47d0      	blx	sl
 8013210:	3001      	adds	r0, #1
 8013212:	d0ab      	beq.n	801316c <_printf_i+0x164>
 8013214:	6823      	ldr	r3, [r4, #0]
 8013216:	079b      	lsls	r3, r3, #30
 8013218:	d413      	bmi.n	8013242 <_printf_i+0x23a>
 801321a:	68e0      	ldr	r0, [r4, #12]
 801321c:	9b03      	ldr	r3, [sp, #12]
 801321e:	4298      	cmp	r0, r3
 8013220:	bfb8      	it	lt
 8013222:	4618      	movlt	r0, r3
 8013224:	e7a4      	b.n	8013170 <_printf_i+0x168>
 8013226:	2301      	movs	r3, #1
 8013228:	4632      	mov	r2, r6
 801322a:	4649      	mov	r1, r9
 801322c:	4640      	mov	r0, r8
 801322e:	47d0      	blx	sl
 8013230:	3001      	adds	r0, #1
 8013232:	d09b      	beq.n	801316c <_printf_i+0x164>
 8013234:	3501      	adds	r5, #1
 8013236:	68e3      	ldr	r3, [r4, #12]
 8013238:	9903      	ldr	r1, [sp, #12]
 801323a:	1a5b      	subs	r3, r3, r1
 801323c:	42ab      	cmp	r3, r5
 801323e:	dcf2      	bgt.n	8013226 <_printf_i+0x21e>
 8013240:	e7eb      	b.n	801321a <_printf_i+0x212>
 8013242:	2500      	movs	r5, #0
 8013244:	f104 0619 	add.w	r6, r4, #25
 8013248:	e7f5      	b.n	8013236 <_printf_i+0x22e>
 801324a:	bf00      	nop
 801324c:	08016815 	.word	0x08016815
 8013250:	08016826 	.word	0x08016826

08013254 <__sread>:
 8013254:	b510      	push	{r4, lr}
 8013256:	460c      	mov	r4, r1
 8013258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801325c:	f000 fa92 	bl	8013784 <_read_r>
 8013260:	2800      	cmp	r0, #0
 8013262:	bfab      	itete	ge
 8013264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013266:	89a3      	ldrhlt	r3, [r4, #12]
 8013268:	181b      	addge	r3, r3, r0
 801326a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801326e:	bfac      	ite	ge
 8013270:	6563      	strge	r3, [r4, #84]	; 0x54
 8013272:	81a3      	strhlt	r3, [r4, #12]
 8013274:	bd10      	pop	{r4, pc}

08013276 <__swrite>:
 8013276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801327a:	461f      	mov	r7, r3
 801327c:	898b      	ldrh	r3, [r1, #12]
 801327e:	05db      	lsls	r3, r3, #23
 8013280:	4605      	mov	r5, r0
 8013282:	460c      	mov	r4, r1
 8013284:	4616      	mov	r6, r2
 8013286:	d505      	bpl.n	8013294 <__swrite+0x1e>
 8013288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801328c:	2302      	movs	r3, #2
 801328e:	2200      	movs	r2, #0
 8013290:	f000 f9d0 	bl	8013634 <_lseek_r>
 8013294:	89a3      	ldrh	r3, [r4, #12]
 8013296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801329a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801329e:	81a3      	strh	r3, [r4, #12]
 80132a0:	4632      	mov	r2, r6
 80132a2:	463b      	mov	r3, r7
 80132a4:	4628      	mov	r0, r5
 80132a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132aa:	f000 b869 	b.w	8013380 <_write_r>

080132ae <__sseek>:
 80132ae:	b510      	push	{r4, lr}
 80132b0:	460c      	mov	r4, r1
 80132b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132b6:	f000 f9bd 	bl	8013634 <_lseek_r>
 80132ba:	1c43      	adds	r3, r0, #1
 80132bc:	89a3      	ldrh	r3, [r4, #12]
 80132be:	bf15      	itete	ne
 80132c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80132c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80132c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80132ca:	81a3      	strheq	r3, [r4, #12]
 80132cc:	bf18      	it	ne
 80132ce:	81a3      	strhne	r3, [r4, #12]
 80132d0:	bd10      	pop	{r4, pc}

080132d2 <__sclose>:
 80132d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132d6:	f000 b8db 	b.w	8013490 <_close_r>
	...

080132dc <__swbuf_r>:
 80132dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132de:	460e      	mov	r6, r1
 80132e0:	4614      	mov	r4, r2
 80132e2:	4605      	mov	r5, r0
 80132e4:	b118      	cbz	r0, 80132ee <__swbuf_r+0x12>
 80132e6:	6983      	ldr	r3, [r0, #24]
 80132e8:	b90b      	cbnz	r3, 80132ee <__swbuf_r+0x12>
 80132ea:	f7ff faab 	bl	8012844 <__sinit>
 80132ee:	4b21      	ldr	r3, [pc, #132]	; (8013374 <__swbuf_r+0x98>)
 80132f0:	429c      	cmp	r4, r3
 80132f2:	d12b      	bne.n	801334c <__swbuf_r+0x70>
 80132f4:	686c      	ldr	r4, [r5, #4]
 80132f6:	69a3      	ldr	r3, [r4, #24]
 80132f8:	60a3      	str	r3, [r4, #8]
 80132fa:	89a3      	ldrh	r3, [r4, #12]
 80132fc:	071a      	lsls	r2, r3, #28
 80132fe:	d52f      	bpl.n	8013360 <__swbuf_r+0x84>
 8013300:	6923      	ldr	r3, [r4, #16]
 8013302:	b36b      	cbz	r3, 8013360 <__swbuf_r+0x84>
 8013304:	6923      	ldr	r3, [r4, #16]
 8013306:	6820      	ldr	r0, [r4, #0]
 8013308:	1ac0      	subs	r0, r0, r3
 801330a:	6963      	ldr	r3, [r4, #20]
 801330c:	b2f6      	uxtb	r6, r6
 801330e:	4283      	cmp	r3, r0
 8013310:	4637      	mov	r7, r6
 8013312:	dc04      	bgt.n	801331e <__swbuf_r+0x42>
 8013314:	4621      	mov	r1, r4
 8013316:	4628      	mov	r0, r5
 8013318:	f000 f950 	bl	80135bc <_fflush_r>
 801331c:	bb30      	cbnz	r0, 801336c <__swbuf_r+0x90>
 801331e:	68a3      	ldr	r3, [r4, #8]
 8013320:	3b01      	subs	r3, #1
 8013322:	60a3      	str	r3, [r4, #8]
 8013324:	6823      	ldr	r3, [r4, #0]
 8013326:	1c5a      	adds	r2, r3, #1
 8013328:	6022      	str	r2, [r4, #0]
 801332a:	701e      	strb	r6, [r3, #0]
 801332c:	6963      	ldr	r3, [r4, #20]
 801332e:	3001      	adds	r0, #1
 8013330:	4283      	cmp	r3, r0
 8013332:	d004      	beq.n	801333e <__swbuf_r+0x62>
 8013334:	89a3      	ldrh	r3, [r4, #12]
 8013336:	07db      	lsls	r3, r3, #31
 8013338:	d506      	bpl.n	8013348 <__swbuf_r+0x6c>
 801333a:	2e0a      	cmp	r6, #10
 801333c:	d104      	bne.n	8013348 <__swbuf_r+0x6c>
 801333e:	4621      	mov	r1, r4
 8013340:	4628      	mov	r0, r5
 8013342:	f000 f93b 	bl	80135bc <_fflush_r>
 8013346:	b988      	cbnz	r0, 801336c <__swbuf_r+0x90>
 8013348:	4638      	mov	r0, r7
 801334a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801334c:	4b0a      	ldr	r3, [pc, #40]	; (8013378 <__swbuf_r+0x9c>)
 801334e:	429c      	cmp	r4, r3
 8013350:	d101      	bne.n	8013356 <__swbuf_r+0x7a>
 8013352:	68ac      	ldr	r4, [r5, #8]
 8013354:	e7cf      	b.n	80132f6 <__swbuf_r+0x1a>
 8013356:	4b09      	ldr	r3, [pc, #36]	; (801337c <__swbuf_r+0xa0>)
 8013358:	429c      	cmp	r4, r3
 801335a:	bf08      	it	eq
 801335c:	68ec      	ldreq	r4, [r5, #12]
 801335e:	e7ca      	b.n	80132f6 <__swbuf_r+0x1a>
 8013360:	4621      	mov	r1, r4
 8013362:	4628      	mov	r0, r5
 8013364:	f000 f81e 	bl	80133a4 <__swsetup_r>
 8013368:	2800      	cmp	r0, #0
 801336a:	d0cb      	beq.n	8013304 <__swbuf_r+0x28>
 801336c:	f04f 37ff 	mov.w	r7, #4294967295
 8013370:	e7ea      	b.n	8013348 <__swbuf_r+0x6c>
 8013372:	bf00      	nop
 8013374:	080167c4 	.word	0x080167c4
 8013378:	080167e4 	.word	0x080167e4
 801337c:	080167a4 	.word	0x080167a4

08013380 <_write_r>:
 8013380:	b538      	push	{r3, r4, r5, lr}
 8013382:	4d07      	ldr	r5, [pc, #28]	; (80133a0 <_write_r+0x20>)
 8013384:	4604      	mov	r4, r0
 8013386:	4608      	mov	r0, r1
 8013388:	4611      	mov	r1, r2
 801338a:	2200      	movs	r2, #0
 801338c:	602a      	str	r2, [r5, #0]
 801338e:	461a      	mov	r2, r3
 8013390:	f7ee fbdd 	bl	8001b4e <_write>
 8013394:	1c43      	adds	r3, r0, #1
 8013396:	d102      	bne.n	801339e <_write_r+0x1e>
 8013398:	682b      	ldr	r3, [r5, #0]
 801339a:	b103      	cbz	r3, 801339e <_write_r+0x1e>
 801339c:	6023      	str	r3, [r4, #0]
 801339e:	bd38      	pop	{r3, r4, r5, pc}
 80133a0:	20008198 	.word	0x20008198

080133a4 <__swsetup_r>:
 80133a4:	4b32      	ldr	r3, [pc, #200]	; (8013470 <__swsetup_r+0xcc>)
 80133a6:	b570      	push	{r4, r5, r6, lr}
 80133a8:	681d      	ldr	r5, [r3, #0]
 80133aa:	4606      	mov	r6, r0
 80133ac:	460c      	mov	r4, r1
 80133ae:	b125      	cbz	r5, 80133ba <__swsetup_r+0x16>
 80133b0:	69ab      	ldr	r3, [r5, #24]
 80133b2:	b913      	cbnz	r3, 80133ba <__swsetup_r+0x16>
 80133b4:	4628      	mov	r0, r5
 80133b6:	f7ff fa45 	bl	8012844 <__sinit>
 80133ba:	4b2e      	ldr	r3, [pc, #184]	; (8013474 <__swsetup_r+0xd0>)
 80133bc:	429c      	cmp	r4, r3
 80133be:	d10f      	bne.n	80133e0 <__swsetup_r+0x3c>
 80133c0:	686c      	ldr	r4, [r5, #4]
 80133c2:	89a3      	ldrh	r3, [r4, #12]
 80133c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80133c8:	0719      	lsls	r1, r3, #28
 80133ca:	d42c      	bmi.n	8013426 <__swsetup_r+0x82>
 80133cc:	06dd      	lsls	r5, r3, #27
 80133ce:	d411      	bmi.n	80133f4 <__swsetup_r+0x50>
 80133d0:	2309      	movs	r3, #9
 80133d2:	6033      	str	r3, [r6, #0]
 80133d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80133d8:	81a3      	strh	r3, [r4, #12]
 80133da:	f04f 30ff 	mov.w	r0, #4294967295
 80133de:	e03e      	b.n	801345e <__swsetup_r+0xba>
 80133e0:	4b25      	ldr	r3, [pc, #148]	; (8013478 <__swsetup_r+0xd4>)
 80133e2:	429c      	cmp	r4, r3
 80133e4:	d101      	bne.n	80133ea <__swsetup_r+0x46>
 80133e6:	68ac      	ldr	r4, [r5, #8]
 80133e8:	e7eb      	b.n	80133c2 <__swsetup_r+0x1e>
 80133ea:	4b24      	ldr	r3, [pc, #144]	; (801347c <__swsetup_r+0xd8>)
 80133ec:	429c      	cmp	r4, r3
 80133ee:	bf08      	it	eq
 80133f0:	68ec      	ldreq	r4, [r5, #12]
 80133f2:	e7e6      	b.n	80133c2 <__swsetup_r+0x1e>
 80133f4:	0758      	lsls	r0, r3, #29
 80133f6:	d512      	bpl.n	801341e <__swsetup_r+0x7a>
 80133f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133fa:	b141      	cbz	r1, 801340e <__swsetup_r+0x6a>
 80133fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013400:	4299      	cmp	r1, r3
 8013402:	d002      	beq.n	801340a <__swsetup_r+0x66>
 8013404:	4630      	mov	r0, r6
 8013406:	f7fe ffbd 	bl	8012384 <_free_r>
 801340a:	2300      	movs	r3, #0
 801340c:	6363      	str	r3, [r4, #52]	; 0x34
 801340e:	89a3      	ldrh	r3, [r4, #12]
 8013410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013414:	81a3      	strh	r3, [r4, #12]
 8013416:	2300      	movs	r3, #0
 8013418:	6063      	str	r3, [r4, #4]
 801341a:	6923      	ldr	r3, [r4, #16]
 801341c:	6023      	str	r3, [r4, #0]
 801341e:	89a3      	ldrh	r3, [r4, #12]
 8013420:	f043 0308 	orr.w	r3, r3, #8
 8013424:	81a3      	strh	r3, [r4, #12]
 8013426:	6923      	ldr	r3, [r4, #16]
 8013428:	b94b      	cbnz	r3, 801343e <__swsetup_r+0x9a>
 801342a:	89a3      	ldrh	r3, [r4, #12]
 801342c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013434:	d003      	beq.n	801343e <__swsetup_r+0x9a>
 8013436:	4621      	mov	r1, r4
 8013438:	4630      	mov	r0, r6
 801343a:	f000 f933 	bl	80136a4 <__smakebuf_r>
 801343e:	89a0      	ldrh	r0, [r4, #12]
 8013440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013444:	f010 0301 	ands.w	r3, r0, #1
 8013448:	d00a      	beq.n	8013460 <__swsetup_r+0xbc>
 801344a:	2300      	movs	r3, #0
 801344c:	60a3      	str	r3, [r4, #8]
 801344e:	6963      	ldr	r3, [r4, #20]
 8013450:	425b      	negs	r3, r3
 8013452:	61a3      	str	r3, [r4, #24]
 8013454:	6923      	ldr	r3, [r4, #16]
 8013456:	b943      	cbnz	r3, 801346a <__swsetup_r+0xc6>
 8013458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801345c:	d1ba      	bne.n	80133d4 <__swsetup_r+0x30>
 801345e:	bd70      	pop	{r4, r5, r6, pc}
 8013460:	0781      	lsls	r1, r0, #30
 8013462:	bf58      	it	pl
 8013464:	6963      	ldrpl	r3, [r4, #20]
 8013466:	60a3      	str	r3, [r4, #8]
 8013468:	e7f4      	b.n	8013454 <__swsetup_r+0xb0>
 801346a:	2000      	movs	r0, #0
 801346c:	e7f7      	b.n	801345e <__swsetup_r+0xba>
 801346e:	bf00      	nop
 8013470:	200000bc 	.word	0x200000bc
 8013474:	080167c4 	.word	0x080167c4
 8013478:	080167e4 	.word	0x080167e4
 801347c:	080167a4 	.word	0x080167a4

08013480 <abort>:
 8013480:	b508      	push	{r3, lr}
 8013482:	2006      	movs	r0, #6
 8013484:	f000 f9b8 	bl	80137f8 <raise>
 8013488:	2001      	movs	r0, #1
 801348a:	f7ee fb39 	bl	8001b00 <_exit>
	...

08013490 <_close_r>:
 8013490:	b538      	push	{r3, r4, r5, lr}
 8013492:	4d06      	ldr	r5, [pc, #24]	; (80134ac <_close_r+0x1c>)
 8013494:	2300      	movs	r3, #0
 8013496:	4604      	mov	r4, r0
 8013498:	4608      	mov	r0, r1
 801349a:	602b      	str	r3, [r5, #0]
 801349c:	f7ee fb73 	bl	8001b86 <_close>
 80134a0:	1c43      	adds	r3, r0, #1
 80134a2:	d102      	bne.n	80134aa <_close_r+0x1a>
 80134a4:	682b      	ldr	r3, [r5, #0]
 80134a6:	b103      	cbz	r3, 80134aa <_close_r+0x1a>
 80134a8:	6023      	str	r3, [r4, #0]
 80134aa:	bd38      	pop	{r3, r4, r5, pc}
 80134ac:	20008198 	.word	0x20008198

080134b0 <__sflush_r>:
 80134b0:	898a      	ldrh	r2, [r1, #12]
 80134b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b6:	4605      	mov	r5, r0
 80134b8:	0710      	lsls	r0, r2, #28
 80134ba:	460c      	mov	r4, r1
 80134bc:	d458      	bmi.n	8013570 <__sflush_r+0xc0>
 80134be:	684b      	ldr	r3, [r1, #4]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	dc05      	bgt.n	80134d0 <__sflush_r+0x20>
 80134c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	dc02      	bgt.n	80134d0 <__sflush_r+0x20>
 80134ca:	2000      	movs	r0, #0
 80134cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134d2:	2e00      	cmp	r6, #0
 80134d4:	d0f9      	beq.n	80134ca <__sflush_r+0x1a>
 80134d6:	2300      	movs	r3, #0
 80134d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80134dc:	682f      	ldr	r7, [r5, #0]
 80134de:	602b      	str	r3, [r5, #0]
 80134e0:	d032      	beq.n	8013548 <__sflush_r+0x98>
 80134e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80134e4:	89a3      	ldrh	r3, [r4, #12]
 80134e6:	075a      	lsls	r2, r3, #29
 80134e8:	d505      	bpl.n	80134f6 <__sflush_r+0x46>
 80134ea:	6863      	ldr	r3, [r4, #4]
 80134ec:	1ac0      	subs	r0, r0, r3
 80134ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80134f0:	b10b      	cbz	r3, 80134f6 <__sflush_r+0x46>
 80134f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80134f4:	1ac0      	subs	r0, r0, r3
 80134f6:	2300      	movs	r3, #0
 80134f8:	4602      	mov	r2, r0
 80134fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134fc:	6a21      	ldr	r1, [r4, #32]
 80134fe:	4628      	mov	r0, r5
 8013500:	47b0      	blx	r6
 8013502:	1c43      	adds	r3, r0, #1
 8013504:	89a3      	ldrh	r3, [r4, #12]
 8013506:	d106      	bne.n	8013516 <__sflush_r+0x66>
 8013508:	6829      	ldr	r1, [r5, #0]
 801350a:	291d      	cmp	r1, #29
 801350c:	d82c      	bhi.n	8013568 <__sflush_r+0xb8>
 801350e:	4a2a      	ldr	r2, [pc, #168]	; (80135b8 <__sflush_r+0x108>)
 8013510:	40ca      	lsrs	r2, r1
 8013512:	07d6      	lsls	r6, r2, #31
 8013514:	d528      	bpl.n	8013568 <__sflush_r+0xb8>
 8013516:	2200      	movs	r2, #0
 8013518:	6062      	str	r2, [r4, #4]
 801351a:	04d9      	lsls	r1, r3, #19
 801351c:	6922      	ldr	r2, [r4, #16]
 801351e:	6022      	str	r2, [r4, #0]
 8013520:	d504      	bpl.n	801352c <__sflush_r+0x7c>
 8013522:	1c42      	adds	r2, r0, #1
 8013524:	d101      	bne.n	801352a <__sflush_r+0x7a>
 8013526:	682b      	ldr	r3, [r5, #0]
 8013528:	b903      	cbnz	r3, 801352c <__sflush_r+0x7c>
 801352a:	6560      	str	r0, [r4, #84]	; 0x54
 801352c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801352e:	602f      	str	r7, [r5, #0]
 8013530:	2900      	cmp	r1, #0
 8013532:	d0ca      	beq.n	80134ca <__sflush_r+0x1a>
 8013534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013538:	4299      	cmp	r1, r3
 801353a:	d002      	beq.n	8013542 <__sflush_r+0x92>
 801353c:	4628      	mov	r0, r5
 801353e:	f7fe ff21 	bl	8012384 <_free_r>
 8013542:	2000      	movs	r0, #0
 8013544:	6360      	str	r0, [r4, #52]	; 0x34
 8013546:	e7c1      	b.n	80134cc <__sflush_r+0x1c>
 8013548:	6a21      	ldr	r1, [r4, #32]
 801354a:	2301      	movs	r3, #1
 801354c:	4628      	mov	r0, r5
 801354e:	47b0      	blx	r6
 8013550:	1c41      	adds	r1, r0, #1
 8013552:	d1c7      	bne.n	80134e4 <__sflush_r+0x34>
 8013554:	682b      	ldr	r3, [r5, #0]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d0c4      	beq.n	80134e4 <__sflush_r+0x34>
 801355a:	2b1d      	cmp	r3, #29
 801355c:	d001      	beq.n	8013562 <__sflush_r+0xb2>
 801355e:	2b16      	cmp	r3, #22
 8013560:	d101      	bne.n	8013566 <__sflush_r+0xb6>
 8013562:	602f      	str	r7, [r5, #0]
 8013564:	e7b1      	b.n	80134ca <__sflush_r+0x1a>
 8013566:	89a3      	ldrh	r3, [r4, #12]
 8013568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801356c:	81a3      	strh	r3, [r4, #12]
 801356e:	e7ad      	b.n	80134cc <__sflush_r+0x1c>
 8013570:	690f      	ldr	r7, [r1, #16]
 8013572:	2f00      	cmp	r7, #0
 8013574:	d0a9      	beq.n	80134ca <__sflush_r+0x1a>
 8013576:	0793      	lsls	r3, r2, #30
 8013578:	680e      	ldr	r6, [r1, #0]
 801357a:	bf08      	it	eq
 801357c:	694b      	ldreq	r3, [r1, #20]
 801357e:	600f      	str	r7, [r1, #0]
 8013580:	bf18      	it	ne
 8013582:	2300      	movne	r3, #0
 8013584:	eba6 0807 	sub.w	r8, r6, r7
 8013588:	608b      	str	r3, [r1, #8]
 801358a:	f1b8 0f00 	cmp.w	r8, #0
 801358e:	dd9c      	ble.n	80134ca <__sflush_r+0x1a>
 8013590:	6a21      	ldr	r1, [r4, #32]
 8013592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013594:	4643      	mov	r3, r8
 8013596:	463a      	mov	r2, r7
 8013598:	4628      	mov	r0, r5
 801359a:	47b0      	blx	r6
 801359c:	2800      	cmp	r0, #0
 801359e:	dc06      	bgt.n	80135ae <__sflush_r+0xfe>
 80135a0:	89a3      	ldrh	r3, [r4, #12]
 80135a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135a6:	81a3      	strh	r3, [r4, #12]
 80135a8:	f04f 30ff 	mov.w	r0, #4294967295
 80135ac:	e78e      	b.n	80134cc <__sflush_r+0x1c>
 80135ae:	4407      	add	r7, r0
 80135b0:	eba8 0800 	sub.w	r8, r8, r0
 80135b4:	e7e9      	b.n	801358a <__sflush_r+0xda>
 80135b6:	bf00      	nop
 80135b8:	20400001 	.word	0x20400001

080135bc <_fflush_r>:
 80135bc:	b538      	push	{r3, r4, r5, lr}
 80135be:	690b      	ldr	r3, [r1, #16]
 80135c0:	4605      	mov	r5, r0
 80135c2:	460c      	mov	r4, r1
 80135c4:	b913      	cbnz	r3, 80135cc <_fflush_r+0x10>
 80135c6:	2500      	movs	r5, #0
 80135c8:	4628      	mov	r0, r5
 80135ca:	bd38      	pop	{r3, r4, r5, pc}
 80135cc:	b118      	cbz	r0, 80135d6 <_fflush_r+0x1a>
 80135ce:	6983      	ldr	r3, [r0, #24]
 80135d0:	b90b      	cbnz	r3, 80135d6 <_fflush_r+0x1a>
 80135d2:	f7ff f937 	bl	8012844 <__sinit>
 80135d6:	4b14      	ldr	r3, [pc, #80]	; (8013628 <_fflush_r+0x6c>)
 80135d8:	429c      	cmp	r4, r3
 80135da:	d11b      	bne.n	8013614 <_fflush_r+0x58>
 80135dc:	686c      	ldr	r4, [r5, #4]
 80135de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d0ef      	beq.n	80135c6 <_fflush_r+0xa>
 80135e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80135e8:	07d0      	lsls	r0, r2, #31
 80135ea:	d404      	bmi.n	80135f6 <_fflush_r+0x3a>
 80135ec:	0599      	lsls	r1, r3, #22
 80135ee:	d402      	bmi.n	80135f6 <_fflush_r+0x3a>
 80135f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135f2:	f7ff f9d7 	bl	80129a4 <__retarget_lock_acquire_recursive>
 80135f6:	4628      	mov	r0, r5
 80135f8:	4621      	mov	r1, r4
 80135fa:	f7ff ff59 	bl	80134b0 <__sflush_r>
 80135fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013600:	07da      	lsls	r2, r3, #31
 8013602:	4605      	mov	r5, r0
 8013604:	d4e0      	bmi.n	80135c8 <_fflush_r+0xc>
 8013606:	89a3      	ldrh	r3, [r4, #12]
 8013608:	059b      	lsls	r3, r3, #22
 801360a:	d4dd      	bmi.n	80135c8 <_fflush_r+0xc>
 801360c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801360e:	f7ff f9ca 	bl	80129a6 <__retarget_lock_release_recursive>
 8013612:	e7d9      	b.n	80135c8 <_fflush_r+0xc>
 8013614:	4b05      	ldr	r3, [pc, #20]	; (801362c <_fflush_r+0x70>)
 8013616:	429c      	cmp	r4, r3
 8013618:	d101      	bne.n	801361e <_fflush_r+0x62>
 801361a:	68ac      	ldr	r4, [r5, #8]
 801361c:	e7df      	b.n	80135de <_fflush_r+0x22>
 801361e:	4b04      	ldr	r3, [pc, #16]	; (8013630 <_fflush_r+0x74>)
 8013620:	429c      	cmp	r4, r3
 8013622:	bf08      	it	eq
 8013624:	68ec      	ldreq	r4, [r5, #12]
 8013626:	e7da      	b.n	80135de <_fflush_r+0x22>
 8013628:	080167c4 	.word	0x080167c4
 801362c:	080167e4 	.word	0x080167e4
 8013630:	080167a4 	.word	0x080167a4

08013634 <_lseek_r>:
 8013634:	b538      	push	{r3, r4, r5, lr}
 8013636:	4d07      	ldr	r5, [pc, #28]	; (8013654 <_lseek_r+0x20>)
 8013638:	4604      	mov	r4, r0
 801363a:	4608      	mov	r0, r1
 801363c:	4611      	mov	r1, r2
 801363e:	2200      	movs	r2, #0
 8013640:	602a      	str	r2, [r5, #0]
 8013642:	461a      	mov	r2, r3
 8013644:	f7ee fac6 	bl	8001bd4 <_lseek>
 8013648:	1c43      	adds	r3, r0, #1
 801364a:	d102      	bne.n	8013652 <_lseek_r+0x1e>
 801364c:	682b      	ldr	r3, [r5, #0]
 801364e:	b103      	cbz	r3, 8013652 <_lseek_r+0x1e>
 8013650:	6023      	str	r3, [r4, #0]
 8013652:	bd38      	pop	{r3, r4, r5, pc}
 8013654:	20008198 	.word	0x20008198

08013658 <__swhatbuf_r>:
 8013658:	b570      	push	{r4, r5, r6, lr}
 801365a:	460e      	mov	r6, r1
 801365c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013660:	2900      	cmp	r1, #0
 8013662:	b096      	sub	sp, #88	; 0x58
 8013664:	4614      	mov	r4, r2
 8013666:	461d      	mov	r5, r3
 8013668:	da08      	bge.n	801367c <__swhatbuf_r+0x24>
 801366a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801366e:	2200      	movs	r2, #0
 8013670:	602a      	str	r2, [r5, #0]
 8013672:	061a      	lsls	r2, r3, #24
 8013674:	d410      	bmi.n	8013698 <__swhatbuf_r+0x40>
 8013676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801367a:	e00e      	b.n	801369a <__swhatbuf_r+0x42>
 801367c:	466a      	mov	r2, sp
 801367e:	f000 f8d7 	bl	8013830 <_fstat_r>
 8013682:	2800      	cmp	r0, #0
 8013684:	dbf1      	blt.n	801366a <__swhatbuf_r+0x12>
 8013686:	9a01      	ldr	r2, [sp, #4]
 8013688:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801368c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013690:	425a      	negs	r2, r3
 8013692:	415a      	adcs	r2, r3
 8013694:	602a      	str	r2, [r5, #0]
 8013696:	e7ee      	b.n	8013676 <__swhatbuf_r+0x1e>
 8013698:	2340      	movs	r3, #64	; 0x40
 801369a:	2000      	movs	r0, #0
 801369c:	6023      	str	r3, [r4, #0]
 801369e:	b016      	add	sp, #88	; 0x58
 80136a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080136a4 <__smakebuf_r>:
 80136a4:	898b      	ldrh	r3, [r1, #12]
 80136a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80136a8:	079d      	lsls	r5, r3, #30
 80136aa:	4606      	mov	r6, r0
 80136ac:	460c      	mov	r4, r1
 80136ae:	d507      	bpl.n	80136c0 <__smakebuf_r+0x1c>
 80136b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80136b4:	6023      	str	r3, [r4, #0]
 80136b6:	6123      	str	r3, [r4, #16]
 80136b8:	2301      	movs	r3, #1
 80136ba:	6163      	str	r3, [r4, #20]
 80136bc:	b002      	add	sp, #8
 80136be:	bd70      	pop	{r4, r5, r6, pc}
 80136c0:	ab01      	add	r3, sp, #4
 80136c2:	466a      	mov	r2, sp
 80136c4:	f7ff ffc8 	bl	8013658 <__swhatbuf_r>
 80136c8:	9900      	ldr	r1, [sp, #0]
 80136ca:	4605      	mov	r5, r0
 80136cc:	4630      	mov	r0, r6
 80136ce:	f7fe fec5 	bl	801245c <_malloc_r>
 80136d2:	b948      	cbnz	r0, 80136e8 <__smakebuf_r+0x44>
 80136d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136d8:	059a      	lsls	r2, r3, #22
 80136da:	d4ef      	bmi.n	80136bc <__smakebuf_r+0x18>
 80136dc:	f023 0303 	bic.w	r3, r3, #3
 80136e0:	f043 0302 	orr.w	r3, r3, #2
 80136e4:	81a3      	strh	r3, [r4, #12]
 80136e6:	e7e3      	b.n	80136b0 <__smakebuf_r+0xc>
 80136e8:	4b0d      	ldr	r3, [pc, #52]	; (8013720 <__smakebuf_r+0x7c>)
 80136ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80136ec:	89a3      	ldrh	r3, [r4, #12]
 80136ee:	6020      	str	r0, [r4, #0]
 80136f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136f4:	81a3      	strh	r3, [r4, #12]
 80136f6:	9b00      	ldr	r3, [sp, #0]
 80136f8:	6163      	str	r3, [r4, #20]
 80136fa:	9b01      	ldr	r3, [sp, #4]
 80136fc:	6120      	str	r0, [r4, #16]
 80136fe:	b15b      	cbz	r3, 8013718 <__smakebuf_r+0x74>
 8013700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013704:	4630      	mov	r0, r6
 8013706:	f000 f8a5 	bl	8013854 <_isatty_r>
 801370a:	b128      	cbz	r0, 8013718 <__smakebuf_r+0x74>
 801370c:	89a3      	ldrh	r3, [r4, #12]
 801370e:	f023 0303 	bic.w	r3, r3, #3
 8013712:	f043 0301 	orr.w	r3, r3, #1
 8013716:	81a3      	strh	r3, [r4, #12]
 8013718:	89a0      	ldrh	r0, [r4, #12]
 801371a:	4305      	orrs	r5, r0
 801371c:	81a5      	strh	r5, [r4, #12]
 801371e:	e7cd      	b.n	80136bc <__smakebuf_r+0x18>
 8013720:	080127dd 	.word	0x080127dd

08013724 <_realloc_r>:
 8013724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013728:	4680      	mov	r8, r0
 801372a:	4614      	mov	r4, r2
 801372c:	460e      	mov	r6, r1
 801372e:	b921      	cbnz	r1, 801373a <_realloc_r+0x16>
 8013730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013734:	4611      	mov	r1, r2
 8013736:	f7fe be91 	b.w	801245c <_malloc_r>
 801373a:	b92a      	cbnz	r2, 8013748 <_realloc_r+0x24>
 801373c:	f7fe fe22 	bl	8012384 <_free_r>
 8013740:	4625      	mov	r5, r4
 8013742:	4628      	mov	r0, r5
 8013744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013748:	f000 f894 	bl	8013874 <_malloc_usable_size_r>
 801374c:	4284      	cmp	r4, r0
 801374e:	4607      	mov	r7, r0
 8013750:	d802      	bhi.n	8013758 <_realloc_r+0x34>
 8013752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013756:	d812      	bhi.n	801377e <_realloc_r+0x5a>
 8013758:	4621      	mov	r1, r4
 801375a:	4640      	mov	r0, r8
 801375c:	f7fe fe7e 	bl	801245c <_malloc_r>
 8013760:	4605      	mov	r5, r0
 8013762:	2800      	cmp	r0, #0
 8013764:	d0ed      	beq.n	8013742 <_realloc_r+0x1e>
 8013766:	42bc      	cmp	r4, r7
 8013768:	4622      	mov	r2, r4
 801376a:	4631      	mov	r1, r6
 801376c:	bf28      	it	cs
 801376e:	463a      	movcs	r2, r7
 8013770:	f7fe fdd8 	bl	8012324 <memcpy>
 8013774:	4631      	mov	r1, r6
 8013776:	4640      	mov	r0, r8
 8013778:	f7fe fe04 	bl	8012384 <_free_r>
 801377c:	e7e1      	b.n	8013742 <_realloc_r+0x1e>
 801377e:	4635      	mov	r5, r6
 8013780:	e7df      	b.n	8013742 <_realloc_r+0x1e>
	...

08013784 <_read_r>:
 8013784:	b538      	push	{r3, r4, r5, lr}
 8013786:	4d07      	ldr	r5, [pc, #28]	; (80137a4 <_read_r+0x20>)
 8013788:	4604      	mov	r4, r0
 801378a:	4608      	mov	r0, r1
 801378c:	4611      	mov	r1, r2
 801378e:	2200      	movs	r2, #0
 8013790:	602a      	str	r2, [r5, #0]
 8013792:	461a      	mov	r2, r3
 8013794:	f7ee f9be 	bl	8001b14 <_read>
 8013798:	1c43      	adds	r3, r0, #1
 801379a:	d102      	bne.n	80137a2 <_read_r+0x1e>
 801379c:	682b      	ldr	r3, [r5, #0]
 801379e:	b103      	cbz	r3, 80137a2 <_read_r+0x1e>
 80137a0:	6023      	str	r3, [r4, #0]
 80137a2:	bd38      	pop	{r3, r4, r5, pc}
 80137a4:	20008198 	.word	0x20008198

080137a8 <_raise_r>:
 80137a8:	291f      	cmp	r1, #31
 80137aa:	b538      	push	{r3, r4, r5, lr}
 80137ac:	4604      	mov	r4, r0
 80137ae:	460d      	mov	r5, r1
 80137b0:	d904      	bls.n	80137bc <_raise_r+0x14>
 80137b2:	2316      	movs	r3, #22
 80137b4:	6003      	str	r3, [r0, #0]
 80137b6:	f04f 30ff 	mov.w	r0, #4294967295
 80137ba:	bd38      	pop	{r3, r4, r5, pc}
 80137bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80137be:	b112      	cbz	r2, 80137c6 <_raise_r+0x1e>
 80137c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137c4:	b94b      	cbnz	r3, 80137da <_raise_r+0x32>
 80137c6:	4620      	mov	r0, r4
 80137c8:	f000 f830 	bl	801382c <_getpid_r>
 80137cc:	462a      	mov	r2, r5
 80137ce:	4601      	mov	r1, r0
 80137d0:	4620      	mov	r0, r4
 80137d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137d6:	f000 b817 	b.w	8013808 <_kill_r>
 80137da:	2b01      	cmp	r3, #1
 80137dc:	d00a      	beq.n	80137f4 <_raise_r+0x4c>
 80137de:	1c59      	adds	r1, r3, #1
 80137e0:	d103      	bne.n	80137ea <_raise_r+0x42>
 80137e2:	2316      	movs	r3, #22
 80137e4:	6003      	str	r3, [r0, #0]
 80137e6:	2001      	movs	r0, #1
 80137e8:	e7e7      	b.n	80137ba <_raise_r+0x12>
 80137ea:	2400      	movs	r4, #0
 80137ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80137f0:	4628      	mov	r0, r5
 80137f2:	4798      	blx	r3
 80137f4:	2000      	movs	r0, #0
 80137f6:	e7e0      	b.n	80137ba <_raise_r+0x12>

080137f8 <raise>:
 80137f8:	4b02      	ldr	r3, [pc, #8]	; (8013804 <raise+0xc>)
 80137fa:	4601      	mov	r1, r0
 80137fc:	6818      	ldr	r0, [r3, #0]
 80137fe:	f7ff bfd3 	b.w	80137a8 <_raise_r>
 8013802:	bf00      	nop
 8013804:	200000bc 	.word	0x200000bc

08013808 <_kill_r>:
 8013808:	b538      	push	{r3, r4, r5, lr}
 801380a:	4d07      	ldr	r5, [pc, #28]	; (8013828 <_kill_r+0x20>)
 801380c:	2300      	movs	r3, #0
 801380e:	4604      	mov	r4, r0
 8013810:	4608      	mov	r0, r1
 8013812:	4611      	mov	r1, r2
 8013814:	602b      	str	r3, [r5, #0]
 8013816:	f7ee f961 	bl	8001adc <_kill>
 801381a:	1c43      	adds	r3, r0, #1
 801381c:	d102      	bne.n	8013824 <_kill_r+0x1c>
 801381e:	682b      	ldr	r3, [r5, #0]
 8013820:	b103      	cbz	r3, 8013824 <_kill_r+0x1c>
 8013822:	6023      	str	r3, [r4, #0]
 8013824:	bd38      	pop	{r3, r4, r5, pc}
 8013826:	bf00      	nop
 8013828:	20008198 	.word	0x20008198

0801382c <_getpid_r>:
 801382c:	f7ee b94e 	b.w	8001acc <_getpid>

08013830 <_fstat_r>:
 8013830:	b538      	push	{r3, r4, r5, lr}
 8013832:	4d07      	ldr	r5, [pc, #28]	; (8013850 <_fstat_r+0x20>)
 8013834:	2300      	movs	r3, #0
 8013836:	4604      	mov	r4, r0
 8013838:	4608      	mov	r0, r1
 801383a:	4611      	mov	r1, r2
 801383c:	602b      	str	r3, [r5, #0]
 801383e:	f7ee f9ae 	bl	8001b9e <_fstat>
 8013842:	1c43      	adds	r3, r0, #1
 8013844:	d102      	bne.n	801384c <_fstat_r+0x1c>
 8013846:	682b      	ldr	r3, [r5, #0]
 8013848:	b103      	cbz	r3, 801384c <_fstat_r+0x1c>
 801384a:	6023      	str	r3, [r4, #0]
 801384c:	bd38      	pop	{r3, r4, r5, pc}
 801384e:	bf00      	nop
 8013850:	20008198 	.word	0x20008198

08013854 <_isatty_r>:
 8013854:	b538      	push	{r3, r4, r5, lr}
 8013856:	4d06      	ldr	r5, [pc, #24]	; (8013870 <_isatty_r+0x1c>)
 8013858:	2300      	movs	r3, #0
 801385a:	4604      	mov	r4, r0
 801385c:	4608      	mov	r0, r1
 801385e:	602b      	str	r3, [r5, #0]
 8013860:	f7ee f9ad 	bl	8001bbe <_isatty>
 8013864:	1c43      	adds	r3, r0, #1
 8013866:	d102      	bne.n	801386e <_isatty_r+0x1a>
 8013868:	682b      	ldr	r3, [r5, #0]
 801386a:	b103      	cbz	r3, 801386e <_isatty_r+0x1a>
 801386c:	6023      	str	r3, [r4, #0]
 801386e:	bd38      	pop	{r3, r4, r5, pc}
 8013870:	20008198 	.word	0x20008198

08013874 <_malloc_usable_size_r>:
 8013874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013878:	1f18      	subs	r0, r3, #4
 801387a:	2b00      	cmp	r3, #0
 801387c:	bfbc      	itt	lt
 801387e:	580b      	ldrlt	r3, [r1, r0]
 8013880:	18c0      	addlt	r0, r0, r3
 8013882:	4770      	bx	lr

08013884 <_init>:
 8013884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013886:	bf00      	nop
 8013888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801388a:	bc08      	pop	{r3}
 801388c:	469e      	mov	lr, r3
 801388e:	4770      	bx	lr

08013890 <_fini>:
 8013890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013892:	bf00      	nop
 8013894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013896:	bc08      	pop	{r3}
 8013898:	469e      	mov	lr, r3
 801389a:	4770      	bx	lr
