
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f088  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000207c  0800f238  0800f238  0001f238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112b4  080112b4  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  080112b4  080112b4  000212b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112bc  080112bc  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112bc  080112bc  000212bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080112c0  080112c0  000212c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080112c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030100  2**0
                  CONTENTS
 10 .bss          00006d7c  20000100  20000100  00030100  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20006e7c  20006e7c  00030100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 13 .debug_info   000185a9  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051c7  00000000  00000000  000486d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  0004d8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001010  00000000  00000000  0004ea50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f0d5  00000000  00000000  0004fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022f6c  00000000  00000000  0007eb35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4775  00000000  00000000  000a1aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00186216  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b9c  00000000  00000000  00186268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f220 	.word	0x0800f220

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0800f220 	.word	0x0800f220

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <getVersions>:
uint32_t notValidFlagAddress2 = CONFIG_2_ADDRESS + 8;
uint32_t versionAddress2 = CONFIG_2_ADDRESS + 12;
uint32_t notCorrectUpdateFlagAddress2 = CONFIG_2_ADDRESS + 16;

static char versionBuf[128];
char* getVersions() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint32_t ver1 = FlashReadWord(versionAddress1);
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <getVersions+0x74>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f9e9 	bl	8000986 <FlashReadWord>
 80005b4:	6078      	str	r0, [r7, #4]
	uint32_t ver2 = FlashReadWord(versionAddress2);
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <getVersions+0x78>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f9e3 	bl	8000986 <FlashReadWord>
 80005c0:	6038      	str	r0, [r7, #0]
	if (ver1 == EMPTY && ver2 == EMPTY) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c8:	d105      	bne.n	80005d6 <getVersions+0x32>
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d101      	bne.n	80005d6 <getVersions+0x32>
		return "No applications in flash\n";
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <getVersions+0x7c>)
 80005d4:	e01c      	b.n	8000610 <getVersions+0x6c>
	} else if (ver1 == EMPTY) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005dc:	d106      	bne.n	80005ec <getVersions+0x48>
		sprintf(versionBuf, "App 1 version: none\nApp 2 version: %"PRIu32"\n", ver2);
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	4910      	ldr	r1, [pc, #64]	; (8000624 <getVersions+0x80>)
 80005e2:	4811      	ldr	r0, [pc, #68]	; (8000628 <getVersions+0x84>)
 80005e4:	f00d fdc8 	bl	800e178 <siprintf>
		return versionBuf;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <getVersions+0x84>)
 80005ea:	e011      	b.n	8000610 <getVersions+0x6c>
	} else if (ver2 == EMPTY) {
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f2:	d106      	bne.n	8000602 <getVersions+0x5e>
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: none\n", ver1);
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	490d      	ldr	r1, [pc, #52]	; (800062c <getVersions+0x88>)
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <getVersions+0x84>)
 80005fa:	f00d fdbd 	bl	800e178 <siprintf>
		return versionBuf;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <getVersions+0x84>)
 8000600:	e006      	b.n	8000610 <getVersions+0x6c>
	} else {
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: %"PRIu32"\n", ver1, ver2);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	490a      	ldr	r1, [pc, #40]	; (8000630 <getVersions+0x8c>)
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <getVersions+0x84>)
 800060a:	f00d fdb5 	bl	800e178 <siprintf>
		return versionBuf;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <getVersions+0x84>)
	}
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000006c 	.word	0x2000006c
 800061c:	20000080 	.word	0x20000080
 8000620:	0800f238 	.word	0x0800f238
 8000624:	0800f254 	.word	0x0800f254
 8000628:	2000011c 	.word	0x2000011c
 800062c:	0800f27c 	.word	0x0800f27c
 8000630:	0800f2a4 	.word	0x0800f2a4

08000634 <getLatestApplicationAddress>:

uint32_t getLatestApplicationAddress() {
 8000634:	b598      	push	{r3, r4, r7, lr}
 8000636:	af00      	add	r7, sp, #0
	if (FlashReadWord(seqAddress1) < FlashReadWord(seqAddress2)) {
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <getLatestApplicationAddress+0x4c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f9a2 	bl	8000986 <FlashReadWord>
 8000642:	4604      	mov	r4, r0
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <getLatestApplicationAddress+0x50>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f99c 	bl	8000986 <FlashReadWord>
 800064e:	4603      	mov	r3, r0
 8000650:	429c      	cmp	r4, r3
 8000652:	d201      	bcs.n	8000658 <getLatestApplicationAddress+0x24>
		return APP_1_ADDRESS;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <getLatestApplicationAddress+0x54>)
 8000656:	e010      	b.n	800067a <getLatestApplicationAddress+0x46>
	} else if (FlashReadWord(seqAddress2) < FlashReadWord(seqAddress1)) {
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <getLatestApplicationAddress+0x50>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f992 	bl	8000986 <FlashReadWord>
 8000662:	4604      	mov	r4, r0
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <getLatestApplicationAddress+0x4c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f98c 	bl	8000986 <FlashReadWord>
 800066e:	4603      	mov	r3, r0
 8000670:	429c      	cmp	r4, r3
 8000672:	d201      	bcs.n	8000678 <getLatestApplicationAddress+0x44>
		return APP_2_ADDRESS;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <getLatestApplicationAddress+0x58>)
 8000676:	e000      	b.n	800067a <getLatestApplicationAddress+0x46>
	} else {
		return 0;
 8000678:	2300      	movs	r3, #0
	}
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd98      	pop	{r3, r4, r7, pc}
 800067e:	bf00      	nop
 8000680:	20000060 	.word	0x20000060
 8000684:	20000074 	.word	0x20000074
 8000688:	08020000 	.word	0x08020000
 800068c:	08110000 	.word	0x08110000

08000690 <updateConfig>:

void updateConfig() {
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 8000696:	f7ff ffcd 	bl	8000634 <getLatestApplicationAddress>
 800069a:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_1_ADDRESS) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <updateConfig+0x60>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d110      	bne.n	80006c6 <updateConfig+0x36>
		EraseSector(CONFIG_2_SECTOR);
 80006a4:	200f      	movs	r0, #15
 80006a6:	f000 f97b 	bl	80009a0 <EraseSector>
		FlashWriteWord(seqAddress2, FlashReadWord(seqAddress1) - 1);
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <updateConfig+0x64>)
 80006ac:	681c      	ldr	r4, [r3, #0]
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <updateConfig+0x68>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f967 	bl	8000986 <FlashReadWord>
 80006b8:	4603      	mov	r3, r0
 80006ba:	3b01      	subs	r3, #1
 80006bc:	4619      	mov	r1, r3
 80006be:	4620      	mov	r0, r4
 80006c0:	f000 f942 	bl	8000948 <FlashWriteWord>
		EraseSector(CONFIG_1_SECTOR);
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
		//FlashWriteWord(firstBootFlagAddress1, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress1, 0xFFFF); // FFFF - not valid (default)
	}
}
 80006c4:	e00f      	b.n	80006e6 <updateConfig+0x56>
		EraseSector(CONFIG_1_SECTOR);
 80006c6:	200e      	movs	r0, #14
 80006c8:	f000 f96a 	bl	80009a0 <EraseSector>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <updateConfig+0x68>)
 80006ce:	681c      	ldr	r4, [r3, #0]
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <updateConfig+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f956 	bl	8000986 <FlashReadWord>
 80006da:	4603      	mov	r3, r0
 80006dc:	3b01      	subs	r3, #1
 80006de:	4619      	mov	r1, r3
 80006e0:	4620      	mov	r0, r4
 80006e2:	f000 f931 	bl	8000948 <FlashWriteWord>
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd90      	pop	{r4, r7, pc}
 80006ee:	bf00      	nop
 80006f0:	08020000 	.word	0x08020000
 80006f4:	20000074 	.word	0x20000074
 80006f8:	20000060 	.word	0x20000060

080006fc <setAppVersion>:

void setAppVersion(uint32_t version) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	uint32_t latestAppAddress = getLatestApplicationAddress();
 8000704:	f7ff ff96 	bl	8000634 <getLatestApplicationAddress>
 8000708:	60f8      	str	r0, [r7, #12]
		if (latestAppAddress == APP_1_ADDRESS) {
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4a09      	ldr	r2, [pc, #36]	; (8000734 <setAppVersion+0x38>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <setAppVersion+0x24>
			FlashWriteWord(versionAddress1, version);
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <setAppVersion+0x3c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f915 	bl	8000948 <FlashWriteWord>
		} else {
			FlashWriteWord(versionAddress2, version);
		}
}
 800071e:	e005      	b.n	800072c <setAppVersion+0x30>
			FlashWriteWord(versionAddress2, version);
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <setAppVersion+0x40>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f90e 	bl	8000948 <FlashWriteWord>
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08020000 	.word	0x08020000
 8000738:	2000006c 	.word	0x2000006c
 800073c:	20000080 	.word	0x20000080

08000740 <setCorrectUpdateFlag>:

void setCorrectUpdateFlag() {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 8000746:	f7ff ff75 	bl	8000634 <getLatestApplicationAddress>
 800074a:	6078      	str	r0, [r7, #4]
		if (latestAppAddress == APP_1_ADDRESS) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <setCorrectUpdateFlag+0x38>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d106      	bne.n	8000762 <setCorrectUpdateFlag+0x22>
			FlashWriteWord(notCorrectUpdateFlagAddress1, 0);
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <setCorrectUpdateFlag+0x3c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f8f4 	bl	8000948 <FlashWriteWord>
		} else {
			FlashWriteWord(notCorrectUpdateFlagAddress2, 0);
		}
}
 8000760:	e005      	b.n	800076e <setCorrectUpdateFlag+0x2e>
			FlashWriteWord(notCorrectUpdateFlagAddress2, 0);
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <setCorrectUpdateFlag+0x40>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f8ed 	bl	8000948 <FlashWriteWord>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	08020000 	.word	0x08020000
 800077c:	20000070 	.word	0x20000070
 8000780:	20000084 	.word	0x20000084

08000784 <validateApplications>:

void validateApplications() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
	uint32_t nValid1 = FlashReadWord(notValidFlagAddress1);
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <validateApplications+0x8c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f8f9 	bl	8000986 <FlashReadWord>
 8000794:	6178      	str	r0, [r7, #20]
	uint32_t firstBoot1 = FlashReadWord(firstBootFlagAddress1);
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <validateApplications+0x90>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f8f3 	bl	8000986 <FlashReadWord>
 80007a0:	6138      	str	r0, [r7, #16]
	uint32_t nCorrect1 = FlashReadWord(notCorrectUpdateFlagAddress1);
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <validateApplications+0x94>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f8ed 	bl	8000986 <FlashReadWord>
 80007ac:	60f8      	str	r0, [r7, #12]
	uint32_t nValid2 = FlashReadWord(notValidFlagAddress2);
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <validateApplications+0x98>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f8e7 	bl	8000986 <FlashReadWord>
 80007b8:	60b8      	str	r0, [r7, #8]
	uint32_t firstBoot2 = FlashReadWord(firstBootFlagAddress2);
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <validateApplications+0x9c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f8e1 	bl	8000986 <FlashReadWord>
 80007c4:	6078      	str	r0, [r7, #4]
	uint32_t nCorrect2 = FlashReadWord(notCorrectUpdateFlagAddress2);
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <validateApplications+0xa0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f8db 	bl	8000986 <FlashReadWord>
 80007d0:	6038      	str	r0, [r7, #0]
	if ((nValid1 == EMPTY && firstBoot1 == 0) || nCorrect1 != 0)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d8:	d102      	bne.n	80007e0 <validateApplications+0x5c>
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d002      	beq.n	80007e6 <validateApplications+0x62>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <validateApplications+0x68>
		EraseSector(CONFIG_1_SECTOR);
 80007e6:	200e      	movs	r0, #14
 80007e8:	f000 f8da 	bl	80009a0 <EraseSector>
	if ((nValid2 == EMPTY && firstBoot2 == 0) || nCorrect2 != 0)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f2:	d102      	bne.n	80007fa <validateApplications+0x76>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <validateApplications+0x7c>
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <validateApplications+0x82>
		EraseSector(CONFIG_2_SECTOR);
 8000800:	200f      	movs	r0, #15
 8000802:	f000 f8cd 	bl	80009a0 <EraseSector>
}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000068 	.word	0x20000068
 8000814:	20000064 	.word	0x20000064
 8000818:	20000070 	.word	0x20000070
 800081c:	2000007c 	.word	0x2000007c
 8000820:	20000078 	.word	0x20000078
 8000824:	20000084 	.word	0x20000084

08000828 <EraseNecessarySectors>:


void EraseNecessarySectors(uint32_t address, uint8_t* sector) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	if (address == sectorAddresses[*sector]) {
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <EraseNecessarySectors+0x3c>)
 800083a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	d10a      	bne.n	800085a <EraseNecessarySectors+0x32>
		EraseSector(*sector);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f8a9 	bl	80009a0 <EraseSector>
		(*sector)++;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	b2da      	uxtb	r2, r3
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	701a      	strb	r2, [r3, #0]
	}
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000

08000868 <jumpToApp>:

void jumpToApp() {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
	  uint32_t address = getLatestApplicationAddress();
 800086e:	f7ff fee1 	bl	8000634 <getLatestApplicationAddress>
 8000872:	6178      	str	r0, [r7, #20]
	  if (address == APP_1_ADDRESS)
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	4a2d      	ldr	r2, [pc, #180]	; (800092c <jumpToApp+0xc4>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d106      	bne.n	800088a <jumpToApp+0x22>
		  FlashWriteWord(firstBootFlagAddress1, 0);
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <jumpToApp+0xc8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f860 	bl	8000948 <FlashWriteWord>
 8000888:	e009      	b.n	800089e <jumpToApp+0x36>
	  else if (address == APP_2_ADDRESS)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <jumpToApp+0xcc>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d105      	bne.n	800089e <jumpToApp+0x36>
		  FlashWriteWord(firstBootFlagAddress2, 0);
 8000892:	4b29      	ldr	r3, [pc, #164]	; (8000938 <jumpToApp+0xd0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f000 f855 	bl	8000948 <FlashWriteWord>

	  void(*app_reset_handler)();

	  //shut down any tasks remaining
	  __HAL_RCC_GPIOC_CLK_DISABLE();
 800089e:	4b27      	ldr	r3, [pc, #156]	; (800093c <jumpToApp+0xd4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a26      	ldr	r2, [pc, #152]	; (800093c <jumpToApp+0xd4>)
 80008a4:	f023 0304 	bic.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <jumpToApp+0xd4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a23      	ldr	r2, [pc, #140]	; (800093c <jumpToApp+0xd4>)
 80008b0:	f023 0308 	bic.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <jumpToApp+0xd4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a20      	ldr	r2, [pc, #128]	; (800093c <jumpToApp+0xd4>)
 80008bc:	f023 0302 	bic.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <jumpToApp+0xd4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a1d      	ldr	r2, [pc, #116]	; (800093c <jumpToApp+0xd4>)
 80008c8:	f023 0301 	bic.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 80008ce:	f003 fb8b 	bl	8003fe8 <HAL_RCC_DeInit>
	  HAL_DeInit();// to disable all the peripherals
 80008d2:	f001 f89f 	bl	8001a14 <HAL_DeInit>

	  SysTick->CTRL = 0;//to turn off the systick
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <jumpToApp+0xd8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <jumpToApp+0xd8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <jumpToApp+0xd8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	2301      	movs	r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	f383 8810 	msr	PRIMASK, r3
}
 80008f2:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
	  //disable interrupts
	  __set_PRIMASK(1);
	  __disable_irq();

	  //__DMB(); // Data Memory Barrier to ensure write to memory is completed
	  SCB->VTOR = address;//change this
 80008f8:	4a12      	ldr	r2, [pc, #72]	; (8000944 <jumpToApp+0xdc>)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	6093      	str	r3, [r2, #8]
      //__DSB(); // Data Synchronization Barrier to ensure all subsequence instructions use the new configuation

	  //configure the MSP by reading the value from the base address
	  uint32_t msp_value = *(__IO uint32_t*) address;
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f383 8808 	msr	MSP, r3
}
 800090e:	bf00      	nop

	  __set_MSP(msp_value);

	  uint32_t resethandler_address = *(__IO uint32_t*) (address + 4);
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	3304      	adds	r3, #4
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	60fb      	str	r3, [r7, #12]

	  app_reset_handler = (void (*)(void)) (resethandler_address);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800091c:	b662      	cpsie	i
}
 800091e:	bf00      	nop

	  //jump to reset handler of the user app.
	  __enable_irq();
	  app_reset_handler();
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4798      	blx	r3
}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	08020000 	.word	0x08020000
 8000930:	20000064 	.word	0x20000064
 8000934:	08110000 	.word	0x08110000
 8000938:	20000078 	.word	0x20000078
 800093c:	40023800 	.word	0x40023800
 8000940:	e000e010 	.word	0xe000e010
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <FlashWriteWord>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
	HAL_FLASH_Lock();
}

void FlashWriteWord(uint32_t Address, uint32_t Data) {
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 8000956:	f002 fa45 	bl	8002de4 <HAL_FLASH_Unlock>
	while (status != HAL_OK)
 800095a:	e00b      	b.n	8000974 <FlashWriteWord+0x2c>
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2200      	movs	r2, #0
 8000960:	461c      	mov	r4, r3
 8000962:	4615      	mov	r5, r2
 8000964:	4622      	mov	r2, r4
 8000966:	462b      	mov	r3, r5
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	2002      	movs	r0, #2
 800096c:	f002 f9e6 	bl	8002d3c <HAL_FLASH_Program>
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1f0      	bne.n	800095c <FlashWriteWord+0x14>
	HAL_FLASH_Lock();
 800097a:	f002 fa55 	bl	8002e28 <HAL_FLASH_Lock>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bdb0      	pop	{r4, r5, r7, pc}

08000986 <FlashReadWord>:

uint8_t FlashReadByte(uint32_t Address) {
    return (*(__IO uint8_t*)Address);
}

uint32_t FlashReadWord(uint32_t Address) {
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
    return (*(__IO uint32_t*)Address);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <EraseSector>:

void EraseSector(uint32_t Sector) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 80009ac:	f002 fa1a 	bl	8002de4 <HAL_FLASH_Unlock>
	uint32_t SectorError;
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <EraseSector+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Sector = Sector;
 80009b6:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <EraseSector+0x4c>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = 1 ;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <EraseSector+0x4c>)
 80009be:	2201      	movs	r2, #1
 80009c0:	60da      	str	r2, [r3, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <EraseSector+0x4c>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	611a      	str	r2, [r3, #16]
	while (status != HAL_OK)
 80009c8:	e007      	b.n	80009da <EraseSector+0x3a>
		status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <EraseSector+0x4c>)
 80009d2:	f002 fb79 	bl	80030c8 <HAL_FLASHEx_Erase>
 80009d6:	4603      	mov	r3, r0
 80009d8:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1f4      	bne.n	80009ca <EraseSector+0x2a>
	HAL_FLASH_Lock();
 80009e0:	f002 fa22 	bl	8002e28 <HAL_FLASH_Lock>
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2000019c 	.word	0x2000019c

080009f0 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a2d      	ldr	r2, [pc, #180]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_GPIO_Init+0xd8>)
 8000a94:	f002 fc58 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	2312      	movs	r3, #18
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_GPIO_Init+0xdc>)
 8000ab6:	f002 fc47 	bl	8003348 <HAL_GPIO_Init>

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	; 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400

08000ad0 <asciiToHex>:
uint8_t tempBuf[8];

uint8_t firstFirmwarePlaceCheck = 1;
uint8_t current_sector = 0;

void asciiToHex(uint8_t* buff, uint8_t count) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i=0; i<count;i++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e023      	b.n	8000b2a <asciiToHex+0x5a>
		if(buff[i] <= '9' && buff[i] >= '0' ) {
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b39      	cmp	r3, #57	; 0x39
 8000aec:	d810      	bhi.n	8000b10 <asciiToHex+0x40>
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b2f      	cmp	r3, #47	; 0x2f
 8000af8:	d90a      	bls.n	8000b10 <asciiToHex+0x40>
			buff[i] -= 0x30;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	440b      	add	r3, r1
 8000b08:	3a30      	subs	r2, #48	; 0x30
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e009      	b.n	8000b24 <asciiToHex+0x54>
		}
		else {
			buff[i] = buff[i] - 0x41 + 10;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3a37      	subs	r2, #55	; 0x37
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	701a      	strb	r2, [r3, #0]
	for(i=0; i<count;i++) {
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	3301      	adds	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	7bfa      	ldrb	r2, [r7, #15]
 8000b2c:	78fb      	ldrb	r3, [r7, #3]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3d7      	bcc.n	8000ae2 <asciiToHex+0x12>
		}
	}
}
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <fillBuffer>:

void fillBuffer(uint8_t* destination, uint8_t* source, uint16_t* startPtr, uint16_t count) {
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
 8000b4c:	807b      	strh	r3, [r7, #2]
	for (int16_t i = 0; i < count; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	82fb      	strh	r3, [r7, #22]
 8000b52:	e014      	b.n	8000b7e <fillBuffer+0x3e>
		destination[i] = source[*startPtr + i];
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b5e:	4413      	add	r3, r2
 8000b60:	461a      	mov	r2, r3
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	441a      	add	r2, r3
 8000b66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b6a:	68f9      	ldr	r1, [r7, #12]
 8000b6c:	440b      	add	r3, r1
 8000b6e:	7812      	ldrb	r2, [r2, #0]
 8000b70:	701a      	strb	r2, [r3, #0]
	for (int16_t i = 0; i < count; i++) {
 8000b72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	82fb      	strh	r3, [r7, #22]
 8000b7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbe5      	blt.n	8000b54 <fillBuffer+0x14>
	}
	*startPtr += count;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	881a      	ldrh	r2, [r3, #0]
 8000b8c:	887b      	ldrh	r3, [r7, #2]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	801a      	strh	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	371c      	adds	r7, #28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <flashHex>:

uint8_t flashHex(uint8_t* flashBuf, uint16_t size) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
	uint16_t ptr = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	81fb      	strh	r3, [r7, #14]
	while (ptr < size) {
 8000bb4:	e19f      	b.n	8000ef6 <flashHex+0x352>
		if(flashBuf[ptr] == ':') {
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b3a      	cmp	r3, #58	; 0x3a
 8000bc2:	f040 8194 	bne.w	8000eee <flashHex+0x34a>
			ptr++;
 8000bc6:	89fb      	ldrh	r3, [r7, #14]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	81fb      	strh	r3, [r7, #14]
			fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000bce:	f107 020e 	add.w	r2, r7, #14
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	4897      	ldr	r0, [pc, #604]	; (8000e34 <flashHex+0x290>)
 8000bd8:	f7ff ffb2 	bl	8000b40 <fillBuffer>
			asciiToHex(tempBuf, 8);
 8000bdc:	2108      	movs	r1, #8
 8000bde:	4895      	ldr	r0, [pc, #596]	; (8000e34 <flashHex+0x290>)
 8000be0:	f7ff ff76 	bl	8000ad0 <asciiToHex>

			size_data = 2*(tempBuf[1] + 16*tempBuf[0]);//находим размер данных
 8000be4:	4b93      	ldr	r3, [pc, #588]	; (8000e34 <flashHex+0x290>)
 8000be6:	785b      	ldrb	r3, [r3, #1]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b92      	ldr	r3, [pc, #584]	; (8000e34 <flashHex+0x290>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b8f      	ldr	r3, [pc, #572]	; (8000e38 <flashHex+0x294>)
 8000bfa:	701a      	strb	r2, [r3, #0]
			address_data = tempBuf[5] + 16*tempBuf[4] + 256*tempBuf[3] + 4096*tempBuf[2];//адрес
 8000bfc:	4b8d      	ldr	r3, [pc, #564]	; (8000e34 <flashHex+0x290>)
 8000bfe:	795b      	ldrb	r3, [r3, #5]
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b8c      	ldr	r3, [pc, #560]	; (8000e34 <flashHex+0x290>)
 8000c04:	78db      	ldrb	r3, [r3, #3]
 8000c06:	b299      	uxth	r1, r3
 8000c08:	4b8a      	ldr	r3, [pc, #552]	; (8000e34 <flashHex+0x290>)
 8000c0a:	789b      	ldrb	r3, [r3, #2]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	011b      	lsls	r3, r3, #4
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	440b      	add	r3, r1
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	b299      	uxth	r1, r3
 8000c1a:	4b86      	ldr	r3, [pc, #536]	; (8000e34 <flashHex+0x290>)
 8000c1c:	791b      	ldrb	r3, [r3, #4]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	440b      	add	r3, r1
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	011b      	lsls	r3, r3, #4
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b83      	ldr	r3, [pc, #524]	; (8000e3c <flashHex+0x298>)
 8000c2e:	801a      	strh	r2, [r3, #0]
			type_data = tempBuf[7] + 16*tempBuf[6];//и тип
 8000c30:	4b80      	ldr	r3, [pc, #512]	; (8000e34 <flashHex+0x290>)
 8000c32:	79da      	ldrb	r2, [r3, #7]
 8000c34:	4b7f      	ldr	r3, [pc, #508]	; (8000e34 <flashHex+0x290>)
 8000c36:	799b      	ldrb	r3, [r3, #6]
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4413      	add	r3, r2
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b7f      	ldr	r3, [pc, #508]	; (8000e40 <flashHex+0x29c>)
 8000c42:	701a      	strb	r2, [r3, #0]

			calculation_check_sum = size_data/2 + (uint8_t)address_data + (uint8_t)(address_data>>8) + type_data;//считаем чек сумму
 8000c44:	4b7c      	ldr	r3, [pc, #496]	; (8000e38 <flashHex+0x294>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	085b      	lsrs	r3, r3, #1
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b7b      	ldr	r3, [pc, #492]	; (8000e3c <flashHex+0x298>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4413      	add	r3, r2
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b79      	ldr	r3, [pc, #484]	; (8000e3c <flashHex+0x298>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4413      	add	r3, r2
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b76      	ldr	r3, [pc, #472]	; (8000e40 <flashHex+0x29c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b75      	ldr	r3, [pc, #468]	; (8000e44 <flashHex+0x2a0>)
 8000c6e:	701a      	strb	r2, [r3, #0]

			if(type_data == 0x00) {
 8000c70:	4b73      	ldr	r3, [pc, #460]	; (8000e40 <flashHex+0x29c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f040 80a2 	bne.w	8000dbe <flashHex+0x21a>
				while(size_data > 0) {
 8000c7a:	e075      	b.n	8000d68 <flashHex+0x1c4>
					fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000c7c:	f107 020e 	add.w	r2, r7, #14
 8000c80:	2308      	movs	r3, #8
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	486b      	ldr	r0, [pc, #428]	; (8000e34 <flashHex+0x290>)
 8000c86:	f7ff ff5b 	bl	8000b40 <fillBuffer>
					asciiToHex(tempBuf, 8);
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	4869      	ldr	r0, [pc, #420]	; (8000e34 <flashHex+0x290>)
 8000c8e:	f7ff ff1f 	bl	8000ad0 <asciiToHex>


					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 8000c92:	2300      	movs	r3, #0
 8000c94:	75fb      	strb	r3, [r7, #23]
 8000c96:	e024      	b.n	8000ce2 <flashHex+0x13e>
						tempBuf[i] <<= 4;
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	4a66      	ldr	r2, [pc, #408]	; (8000e34 <flashHex+0x290>)
 8000c9c:	5cd2      	ldrb	r2, [r2, r3]
 8000c9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d1      	uxtb	r1, r2
 8000ca4:	4a63      	ldr	r2, [pc, #396]	; (8000e34 <flashHex+0x290>)
 8000ca6:	54d1      	strb	r1, [r2, r3]
						tempBuf[i] = tempBuf[i] | tempBuf[i+1];
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	4a62      	ldr	r2, [pc, #392]	; (8000e34 <flashHex+0x290>)
 8000cac:	5cd1      	ldrb	r1, [r2, r3]
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a60      	ldr	r2, [pc, #384]	; (8000e34 <flashHex+0x290>)
 8000cb4:	5cd2      	ldrb	r2, [r2, r3]
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	b2d1      	uxtb	r1, r2
 8000cbc:	4a5d      	ldr	r2, [pc, #372]	; (8000e34 <flashHex+0x290>)
 8000cbe:	54d1      	strb	r1, [r2, r3]
						program_data |= tempBuf[i] <<(i*4);
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	4a5c      	ldr	r2, [pc, #368]	; (8000e34 <flashHex+0x290>)
 8000cc4:	5cd3      	ldrb	r3, [r2, r3]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <flashHex+0x2a4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	4a5b      	ldr	r2, [pc, #364]	; (8000e48 <flashHex+0x2a4>)
 8000cda:	6013      	str	r3, [r2, #0]
					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 8000cdc:	7dfb      	ldrb	r3, [r7, #23]
 8000cde:	3302      	adds	r3, #2
 8000ce0:	75fb      	strb	r3, [r7, #23]
 8000ce2:	7dfb      	ldrb	r3, [r7, #23]
 8000ce4:	2b07      	cmp	r3, #7
 8000ce6:	d9d7      	bls.n	8000c98 <flashHex+0xf4>
					}

					EraseNecessarySectors(extented_linear_adress + address_data, &current_sector);
 8000ce8:	4b54      	ldr	r3, [pc, #336]	; (8000e3c <flashHex+0x298>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <flashHex+0x2a8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4956      	ldr	r1, [pc, #344]	; (8000e50 <flashHex+0x2ac>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd96 	bl	8000828 <EraseNecessarySectors>
					FlashWriteWord(extented_linear_adress + address_data, program_data);
 8000cfc:	4b4f      	ldr	r3, [pc, #316]	; (8000e3c <flashHex+0x298>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b52      	ldr	r3, [pc, #328]	; (8000e4c <flashHex+0x2a8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a4f      	ldr	r2, [pc, #316]	; (8000e48 <flashHex+0x2a4>)
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fe1a 	bl	8000948 <FlashWriteWord>
					calculation_check_sum += (uint8_t)program_data + (uint8_t)(program_data>>8) + (uint8_t)(program_data>>16) + (uint8_t)(program_data>>24);
 8000d14:	4b4c      	ldr	r3, [pc, #304]	; (8000e48 <flashHex+0x2a4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <flashHex+0x2a4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	0a1b      	lsrs	r3, r3, #8
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4413      	add	r3, r2
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b48      	ldr	r3, [pc, #288]	; (8000e48 <flashHex+0x2a4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	0c1b      	lsrs	r3, r3, #16
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <flashHex+0x2a4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	0e1b      	lsrs	r3, r3, #24
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b41      	ldr	r3, [pc, #260]	; (8000e44 <flashHex+0x2a0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <flashHex+0x2a0>)
 8000d48:	701a      	strb	r2, [r3, #0]
					size_data -= 8;
 8000d4a:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <flashHex+0x294>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	3b08      	subs	r3, #8
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <flashHex+0x294>)
 8000d54:	701a      	strb	r2, [r3, #0]
					address_data += 4;
 8000d56:	4b39      	ldr	r3, [pc, #228]	; (8000e3c <flashHex+0x298>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <flashHex+0x298>)
 8000d60:	801a      	strh	r2, [r3, #0]
					program_data = 0;
 8000d62:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <flashHex+0x2a4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
				while(size_data > 0) {
 8000d68:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <flashHex+0x294>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d185      	bne.n	8000c7c <flashHex+0xd8>
				}
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8000d70:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <flashHex+0x2a0>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	425b      	negs	r3, r3
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <flashHex+0x2a0>)
 8000d7a:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 8000d7c:	f107 020e 	add.w	r2, r7, #14
 8000d80:	2302      	movs	r3, #2
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	482b      	ldr	r0, [pc, #172]	; (8000e34 <flashHex+0x290>)
 8000d86:	f7ff fedb 	bl	8000b40 <fillBuffer>
				asciiToHex(tempBuf, 2);
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4829      	ldr	r0, [pc, #164]	; (8000e34 <flashHex+0x290>)
 8000d8e:	f7ff fe9f 	bl	8000ad0 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <flashHex+0x290>)
 8000d94:	785a      	ldrb	r2, [r3, #1]
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <flashHex+0x290>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4413      	add	r3, r2
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <flashHex+0x2b0>)
 8000da4:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8000da6:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <flashHex+0x2a0>)
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <flashHex+0x2b0>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d001      	beq.n	8000db6 <flashHex+0x212>
					return 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e0a7      	b.n	8000f06 <flashHex+0x362>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8000db6:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <flashHex+0x2a0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e097      	b.n	8000eee <flashHex+0x34a>

			} else if(type_data == 0x04) {//дополнительный адрес
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <flashHex+0x29c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	f040 808f 	bne.w	8000ee6 <flashHex+0x342>
				fillBuffer(tempBuf, flashBuf, &ptr, 4);
 8000dc8:	f107 020e 	add.w	r2, r7, #14
 8000dcc:	2304      	movs	r3, #4
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <flashHex+0x290>)
 8000dd2:	f7ff feb5 	bl	8000b40 <fillBuffer>
				asciiToHex(tempBuf, 4);
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	4816      	ldr	r0, [pc, #88]	; (8000e34 <flashHex+0x290>)
 8000dda:	f7ff fe79 	bl	8000ad0 <asciiToHex>

				extented_linear_adress = (uint32_t)(tempBuf[0]<<28 | tempBuf[1]<<24 | tempBuf[2]<<20 | tempBuf[3]<<16 );//считаем адрес
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <flashHex+0x290>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	071a      	lsls	r2, r3, #28
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <flashHex+0x290>)
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	061b      	lsls	r3, r3, #24
 8000dea:	431a      	orrs	r2, r3
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <flashHex+0x290>)
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	051b      	lsls	r3, r3, #20
 8000df2:	431a      	orrs	r2, r3
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <flashHex+0x290>)
 8000df6:	78db      	ldrb	r3, [r3, #3]
 8000df8:	041b      	lsls	r3, r3, #16
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <flashHex+0x2a8>)
 8000e00:	601a      	str	r2, [r3, #0]

				if (firstFirmwarePlaceCheck) {
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <flashHex+0x2b4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d030      	beq.n	8000e6c <flashHex+0x2c8>
					uint32_t latest_app_address = getLatestApplicationAddress();
 8000e0a:	f7ff fc13 	bl	8000634 <getLatestApplicationAddress>
 8000e0e:	6138      	str	r0, [r7, #16]
					if ((latest_app_address & 0xFFFF0000) != extented_linear_adress)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	0c1b      	lsrs	r3, r3, #16
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <flashHex+0x2a8>)
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d001      	beq.n	8000e22 <flashHex+0x27e>
						return 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e071      	b.n	8000f06 <flashHex+0x362>

					if (latest_app_address == APP_1_ADDRESS) current_sector = APP_1_SECTOR;
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <flashHex+0x2b8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d11a      	bne.n	8000e60 <flashHex+0x2bc>
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <flashHex+0x2ac>)
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e019      	b.n	8000e66 <flashHex+0x2c2>
 8000e32:	bf00      	nop
 8000e34:	200001c4 	.word	0x200001c4
 8000e38:	200001b4 	.word	0x200001b4
 8000e3c:	200001b8 	.word	0x200001b8
 8000e40:	200001b5 	.word	0x200001b5
 8000e44:	200001c0 	.word	0x200001c0
 8000e48:	200001bc 	.word	0x200001bc
 8000e4c:	200001b0 	.word	0x200001b0
 8000e50:	200001cc 	.word	0x200001cc
 8000e54:	200001b6 	.word	0x200001b6
 8000e58:	20000088 	.word	0x20000088
 8000e5c:	08020000 	.word	0x08020000
					else current_sector = APP_2_SECTOR;
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <flashHex+0x36c>)
 8000e62:	2210      	movs	r2, #16
 8000e64:	701a      	strb	r2, [r3, #0]

					firstFirmwarePlaceCheck = 0;
 8000e66:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <flashHex+0x370>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
				}

				calculation_check_sum +=  16*tempBuf[0] + tempBuf[1] + 16*tempBuf[2] + tempBuf[3];
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <flashHex+0x374>)
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <flashHex+0x374>)
 8000e72:	789b      	ldrb	r3, [r3, #2]
 8000e74:	4413      	add	r3, r2
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <flashHex+0x374>)
 8000e7e:	785b      	ldrb	r3, [r3, #1]
 8000e80:	4413      	add	r3, r2
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <flashHex+0x374>)
 8000e86:	78db      	ldrb	r3, [r3, #3]
 8000e88:	4413      	add	r3, r2
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <flashHex+0x378>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <flashHex+0x378>)
 8000e96:	701a      	strb	r2, [r3, #0]
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <flashHex+0x378>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <flashHex+0x378>)
 8000ea2:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 8000ea4:	f107 020e 	add.w	r2, r7, #14
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	481a      	ldr	r0, [pc, #104]	; (8000f18 <flashHex+0x374>)
 8000eae:	f7ff fe47 	bl	8000b40 <fillBuffer>
				asciiToHex(tempBuf, 2);
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4818      	ldr	r0, [pc, #96]	; (8000f18 <flashHex+0x374>)
 8000eb6:	f7ff fe0b 	bl	8000ad0 <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <flashHex+0x374>)
 8000ebc:	785a      	ldrb	r2, [r3, #1]
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <flashHex+0x374>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <flashHex+0x37c>)
 8000ecc:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <flashHex+0x378>)
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <flashHex+0x37c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d001      	beq.n	8000ede <flashHex+0x33a>
					return 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e013      	b.n	8000f06 <flashHex+0x362>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <flashHex+0x378>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e003      	b.n	8000eee <flashHex+0x34a>
			} else if(type_data == 0x01) {//конец файла
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <flashHex+0x380>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d009      	beq.n	8000f02 <flashHex+0x35e>
				break;
			}
		}
		ptr++;
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	81fb      	strh	r3, [r7, #14]
	while (ptr < size) {
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	887a      	ldrh	r2, [r7, #2]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	f63f ae5b 	bhi.w	8000bb6 <flashHex+0x12>
 8000f00:	e000      	b.n	8000f04 <flashHex+0x360>
				break;
 8000f02:	bf00      	nop
	}
	return 1;
 8000f04:	2301      	movs	r3, #1
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001cc 	.word	0x200001cc
 8000f14:	20000088 	.word	0x20000088
 8000f18:	200001c4 	.word	0x200001c4
 8000f1c:	200001c0 	.word	0x200001c0
 8000f20:	200001b6 	.word	0x200001b6
 8000f24:	200001b5 	.word	0x200001b5

08000f28 <lwip_tcp_init>:
err_t poll_callback(void *arg, struct tcp_pcb *tpcb);
err_t sent_callback(void *arg, struct tcp_pcb *tpcb, u16_t len);
void send(struct tcp_pcb *tpcb, struct conn_state *es);
void conn_close(struct tcp_pcb *tpcb, struct conn_state *es);

void lwip_tcp_init(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  tpcb = tcp_new();
 8000f2e:	f006 fb3d 	bl	80075ac <tcp_new>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <lwip_tcp_init+0x5c>)
 8000f36:	6013      	str	r3, [r2, #0]
  if (tpcb != NULL) {
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <lwip_tcp_init+0x5c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d01d      	beq.n	8000f7c <lwip_tcp_init+0x54>
    err_t err;
	ip4_addr_t ip_addr;
	IP4_ADDR(&ip_addr, 169, 254, 8, 45);
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <lwip_tcp_init+0x60>)
 8000f42:	603b      	str	r3, [r7, #0]
    err = tcp_bind(tpcb, &ip_addr, 80);
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <lwip_tcp_init+0x5c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4639      	mov	r1, r7
 8000f4a:	2250      	movs	r2, #80	; 0x50
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 fbad 	bl	80066ac <tcp_bind>
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK) {
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10e      	bne.n	8000f7c <lwip_tcp_init+0x54>
      tpcb = tcp_listen(tpcb);
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <lwip_tcp_init+0x5c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	21ff      	movs	r1, #255	; 0xff
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 fc43 	bl	80067f0 <tcp_listen_with_backlog>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <lwip_tcp_init+0x5c>)
 8000f6e:	6013      	str	r3, [r2, #0]
      tcp_accept(tpcb, accept_callback);
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <lwip_tcp_init+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4905      	ldr	r1, [pc, #20]	; (8000f8c <lwip_tcp_init+0x64>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f006 fb96 	bl	80076a8 <tcp_accept>
      /* abort? output diagnostic? */
    }
  } else {
    /* abort? output diagnostic? */
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200001d0 	.word	0x200001d0
 8000f88:	2d08fea9 	.word	0x2d08fea9
 8000f8c:	08000f91 	.word	0x08000f91

08000f90 <accept_callback>:


err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f006 f977 	bl	8007294 <tcp_setprio>

  es = (struct conn_state *)mem_malloc(sizeof(struct conn_state));
 8000fa6:	200c      	movs	r0, #12
 8000fa8:	f003 ff90 	bl	8004ecc <mem_malloc>
 8000fac:	6138      	str	r0, [r7, #16]
  if (es != NULL) {
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01f      	beq.n	8000ff4 <accept_callback+0x64>
    es->state = CONN_ACCEPTED;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 8000fcc:	6939      	ldr	r1, [r7, #16]
 8000fce:	68b8      	ldr	r0, [r7, #8]
 8000fd0:	f006 faf4 	bl	80075bc <tcp_arg>
    tcp_recv(newpcb, recv_callback);
 8000fd4:	490b      	ldr	r1, [pc, #44]	; (8001004 <accept_callback+0x74>)
 8000fd6:	68b8      	ldr	r0, [r7, #8]
 8000fd8:	f006 fb02 	bl	80075e0 <tcp_recv>
    tcp_err(newpcb, error_callback);
 8000fdc:	490a      	ldr	r1, [pc, #40]	; (8001008 <accept_callback+0x78>)
 8000fde:	68b8      	ldr	r0, [r7, #8]
 8000fe0:	f006 fb40 	bl	8007664 <tcp_err>
    tcp_poll(newpcb, poll_callback, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4909      	ldr	r1, [pc, #36]	; (800100c <accept_callback+0x7c>)
 8000fe8:	68b8      	ldr	r0, [r7, #8]
 8000fea:	f006 fb75 	bl	80076d8 <tcp_poll>
    ret_err = ERR_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	e001      	b.n	8000ff8 <accept_callback+0x68>
  } else {
    ret_err = ERR_MEM;
 8000ff4:	23ff      	movs	r3, #255	; 0xff
 8000ff6:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	08001011 	.word	0x08001011
 8001008:	0800114d 	.word	0x0800114d
 800100c:	08001171 	.word	0x08001171

08001010 <recv_callback>:

err_t recv_callback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	70fb      	strb	r3, [r7, #3]
  struct conn_state *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <recv_callback+0x20>
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <recv_callback+0x12c>)
 8001026:	2253      	movs	r2, #83	; 0x53
 8001028:	4945      	ldr	r1, [pc, #276]	; (8001140 <recv_callback+0x130>)
 800102a:	4846      	ldr	r0, [pc, #280]	; (8001144 <recv_callback+0x134>)
 800102c:	f00d f87c 	bl	800e128 <iprintf>
  es = (struct conn_state *)arg;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	61bb      	str	r3, [r7, #24]
  if (p == NULL) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d116      	bne.n	8001068 <recv_callback+0x58>
    /* remote host closed connection */
    es->state = CONN_CLOSING;
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	2203      	movs	r2, #3
 800103e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL) {
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d104      	bne.n	8001052 <recv_callback+0x42>
       /* we're done sending, close it */
       conn_close(tpcb, es);
 8001048:	69b9      	ldr	r1, [r7, #24]
 800104a:	68b8      	ldr	r0, [r7, #8]
 800104c:	f000 f936 	bl	80012bc <conn_close>
 8001050:	e007      	b.n	8001062 <recv_callback+0x52>
    } else {
      /* we're not done yet */
      tcp_sent(tpcb, sent_callback);
 8001052:	493d      	ldr	r1, [pc, #244]	; (8001148 <recv_callback+0x138>)
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f006 fae5 	bl	8007624 <tcp_sent>
      send(tpcb, es);
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f000 f8df 	bl	8001220 <send>
    }
    ret_err = ERR_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	77fb      	strb	r3, [r7, #31]
 8001066:	e063      	b.n	8001130 <recv_callback+0x120>
  } else if(err != ERR_OK) {
 8001068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00b      	beq.n	8001088 <recv_callback+0x78>
    /* cleanup, for unknown reason */
    if (p != NULL) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <recv_callback+0x72>
      es->p = NULL;
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f004 fdfd 	bl	8005c7c <pbuf_free>
    }
    ret_err = err;
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	77fb      	strb	r3, [r7, #31]
 8001086:	e053      	b.n	8001130 <recv_callback+0x120>
  } else if(es->state == CONN_ACCEPTED) {
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d110      	bne.n	80010b2 <recv_callback+0xa2>
    /* first data chunk in p->payload */
    es->state = CONN_RECEIVED;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2202      	movs	r2, #2
 8001094:	701a      	strb	r2, [r3, #0]
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	609a      	str	r2, [r3, #8]
    /* install send completion notifier */
    tcp_sent(tpcb, sent_callback);
 800109c:	492a      	ldr	r1, [pc, #168]	; (8001148 <recv_callback+0x138>)
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f006 fac0 	bl	8007624 <tcp_sent>
    send(tpcb, es);
 80010a4:	69b9      	ldr	r1, [r7, #24]
 80010a6:	68b8      	ldr	r0, [r7, #8]
 80010a8:	f000 f8ba 	bl	8001220 <send>
    ret_err = ERR_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	77fb      	strb	r3, [r7, #31]
 80010b0:	e03e      	b.n	8001130 <recv_callback+0x120>
  } else if (es->state == CONN_RECEIVED) {
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d119      	bne.n	80010ee <recv_callback+0xde>
    /* read some more data */
    if(es->p == NULL) {
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10b      	bne.n	80010da <recv_callback+0xca>
      es->p = p;
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	609a      	str	r2, [r3, #8]
      tcp_sent(tpcb, sent_callback);
 80010c8:	491f      	ldr	r1, [pc, #124]	; (8001148 <recv_callback+0x138>)
 80010ca:	68b8      	ldr	r0, [r7, #8]
 80010cc:	f006 faaa 	bl	8007624 <tcp_sent>
      send(tpcb, es);
 80010d0:	69b9      	ldr	r1, [r7, #24]
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f000 f8a4 	bl	8001220 <send>
 80010d8:	e006      	b.n	80010e8 <recv_callback+0xd8>
    } else {
      struct pbuf *ptr;
      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f004 feee 	bl	8005ec4 <pbuf_chain>
    }
    ret_err = ERR_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	77fb      	strb	r3, [r7, #31]
 80010ec:	e020      	b.n	8001130 <recv_callback+0x120>
  } else if(es->state == CONN_CLOSING) {
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d10e      	bne.n	8001114 <recv_callback+0x104>
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	891b      	ldrh	r3, [r3, #8]
 80010fa:	4619      	mov	r1, r3
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	f005 fc6f 	bl	80069e0 <tcp_recved>
    es->p = NULL;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f004 fdb7 	bl	8005c7c <pbuf_free>
    ret_err = ERR_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	77fb      	strb	r3, [r7, #31]
 8001112:	e00d      	b.n	8001130 <recv_callback+0x120>
  } else {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	891b      	ldrh	r3, [r3, #8]
 8001118:	4619      	mov	r1, r3
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f005 fc60 	bl	80069e0 <tcp_recved>
    es->p = NULL;
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f004 fda8 	bl	8005c7c <pbuf_free>
    ret_err = ERR_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001130:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800f2cc 	.word	0x0800f2cc
 8001140:	0800f2e4 	.word	0x0800f2e4
 8001144:	0800f2f0 	.word	0x0800f2f0
 8001148:	080011d1 	.word	0x080011d1

0800114c <error_callback>:

void error_callback(void *arg, err_t err) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
  struct conn_state *es;

  LWIP_UNUSED_ARG(err);

  es = (struct conn_state *)arg;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	60fb      	str	r3, [r7, #12]
  if (es != NULL) {
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <error_callback+0x1c>
    mem_free(es);
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f003 fd74 	bl	8004c50 <mem_free>
  }
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <poll_callback>:

err_t poll_callback(void *arg, struct tcp_pcb *tpcb) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct conn_state *es;

  es = (struct conn_state *)arg;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60bb      	str	r3, [r7, #8]
  if (es != NULL) {
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d017      	beq.n	80011b4 <poll_callback+0x44>
    if (es->p != NULL) {
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d008      	beq.n	800119e <poll_callback+0x2e>
      /* there is a remaining pbuf (chain)  */
      tcp_sent(tpcb, sent_callback);
 800118c:	490f      	ldr	r1, [pc, #60]	; (80011cc <poll_callback+0x5c>)
 800118e:	6838      	ldr	r0, [r7, #0]
 8001190:	f006 fa48 	bl	8007624 <tcp_sent>
      send(tpcb, es);
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f000 f842 	bl	8001220 <send>
 800119c:	e007      	b.n	80011ae <poll_callback+0x3e>
    } else {
      /* no remaining pbuf (chain)  */
      if(es->state == CONN_CLOSING) {
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d103      	bne.n	80011ae <poll_callback+0x3e>
        conn_close(tpcb, es);
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	6838      	ldr	r0, [r7, #0]
 80011aa:	f000 f887 	bl	80012bc <conn_close>
      }
    }
    ret_err = ERR_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	e004      	b.n	80011be <poll_callback+0x4e>
  } else {
    /* nothing to be done */
    tcp_abort(tpcb);
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f005 fa6d 	bl	8006694 <tcp_abort>
    ret_err = ERR_ABRT;
 80011ba:	23f3      	movs	r3, #243	; 0xf3
 80011bc:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	080011d1 	.word	0x080011d1

080011d0 <sent_callback>:

err_t sent_callback(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	4613      	mov	r3, r2
 80011dc:	80fb      	strh	r3, [r7, #6]
  struct conn_state *es;

  LWIP_UNUSED_ARG(len);

  es = (struct conn_state *)arg;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2200      	movs	r2, #0
 80011e6:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL) {
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d008      	beq.n	8001202 <sent_callback+0x32>
    /* still got pbufs to send */
    tcp_sent(tpcb, sent_callback);
 80011f0:	490a      	ldr	r1, [pc, #40]	; (800121c <sent_callback+0x4c>)
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f006 fa16 	bl	8007624 <tcp_sent>
    send(tpcb, es);
 80011f8:	6979      	ldr	r1, [r7, #20]
 80011fa:	68b8      	ldr	r0, [r7, #8]
 80011fc:	f000 f810 	bl	8001220 <send>
 8001200:	e007      	b.n	8001212 <sent_callback+0x42>
  } else {
    /* no more pbufs to send */
    if(es->state == CONN_CLOSING) {
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d103      	bne.n	8001212 <sent_callback+0x42>
      conn_close(tpcb, es);
 800120a:	6979      	ldr	r1, [r7, #20]
 800120c:	68b8      	ldr	r0, [r7, #8]
 800120e:	f000 f855 	bl	80012bc <conn_close>
    }
  }
  return ERR_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	080011d1 	.word	0x080011d1

08001220 <send>:

void send(struct tcp_pcb *tpcb, struct conn_state *es) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 800122e:	e031      	b.n	8001294 <send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb))) {
  ptr = es->p;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]

  /* enqueue data for transmission */
  char* answer = handle_packet(tpcb, ptr);
 8001236:	6939      	ldr	r1, [r7, #16]
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fa03 	bl	8001644 <handle_packet>
 800123e:	60f8      	str	r0, [r7, #12]
  if (answer != NULL) {
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <send+0x3a>
	  tcp_write(tpcb, answer, strlen(answer), TCP_WRITE_FLAG_COPY);
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7fe ffd2 	bl	80001f0 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	b29a      	uxth	r2, r3
 8001250:	2301      	movs	r3, #1
 8001252:	68f9      	ldr	r1, [r7, #12]
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f008 fff1 	bl	800a23c <tcp_write>
  }

  u16_t plen;
  u8_t freed;

  plen = ptr->len;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	895b      	ldrh	r3, [r3, #10]
 800125e:	817b      	strh	r3, [r7, #10]
  /* continue with next pbuf in chain (if any) */
  es->p = ptr->next;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	609a      	str	r2, [r3, #8]
  if(es->p != NULL) {
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <send+0x5a>
     /* new reference! */
     pbuf_ref(es->p);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4618      	mov	r0, r3
 8001276:	f004 fdad 	bl	8005dd4 <pbuf_ref>
  } do { // chop first pbuf from chain
     /* try hard to free pbuf */
     freed = pbuf_free(ptr);
 800127a:	6938      	ldr	r0, [r7, #16]
 800127c:	f004 fcfe 	bl	8005c7c <pbuf_free>
 8001280:	4603      	mov	r3, r0
 8001282:	727b      	strb	r3, [r7, #9]
  } while(freed == 0);
 8001284:	7a7b      	ldrb	r3, [r7, #9]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f7      	beq.n	800127a <send+0x5a>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 800128a:	897b      	ldrh	r3, [r7, #10]
 800128c:	4619      	mov	r1, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f005 fba6 	bl	80069e0 <tcp_recved>
  while ((wr_err == ERR_OK) &&
 8001294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10b      	bne.n	80012b4 <send+0x94>
         (es->p != NULL) &&
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb))) {
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	895a      	ldrh	r2, [r3, #10]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d9bd      	bls.n	8001230 <send+0x10>
  }
}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <conn_close>:

void conn_close(struct tcp_pcb *tpcb, struct conn_state *es) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  tcp_arg(tpcb, NULL);
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f006 f977 	bl	80075bc <tcp_arg>
  tcp_sent(tpcb, NULL);
 80012ce:	2100      	movs	r1, #0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f006 f9a7 	bl	8007624 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80012d6:	2100      	movs	r1, #0
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f006 f981 	bl	80075e0 <tcp_recv>
  tcp_err(tpcb, NULL);
 80012de:	2100      	movs	r1, #0
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f006 f9bf 	bl	8007664 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f006 f9f4 	bl	80076d8 <tcp_poll>

  if (es != NULL) {
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <conn_close+0x40>
    mem_free(es);
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	f003 fcaa 	bl	8004c50 <mem_free>
  }
  tcp_close(tpcb);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f005 f8ff 	bl	8006500 <tcp_close>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130e:	f000 fb5f 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001312:	f000 f809 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001316:	f7ff fb6b 	bl	80009f0 <MX_GPIO_Init>
  MX_LWIP_Init();
 800131a:	f002 ff5d 	bl	80041d8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  lwip_tcp_init();
 800131e:	f7ff fe03 	bl	8000f28 <lwip_tcp_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MX_LWIP_Process();
 8001322:	f003 f885 	bl	8004430 <MX_LWIP_Process>
 8001326:	e7fc      	b.n	8001322 <main+0x18>

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	; 0x50
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	2230      	movs	r2, #48	; 0x30
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f00c fe0e 	bl	800df58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <SystemClock_Config+0xdc>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a2b      	ldr	r2, [pc, #172]	; (8001404 <SystemClock_Config+0xdc>)
 8001356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <SystemClock_Config+0xdc>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	4b26      	ldr	r3, [pc, #152]	; (8001408 <SystemClock_Config+0xe0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a25      	ldr	r2, [pc, #148]	; (8001408 <SystemClock_Config+0xe0>)
 8001372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <SystemClock_Config+0xe0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001384:	2301      	movs	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138e:	2302      	movs	r3, #2
 8001390:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001392:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001398:	2319      	movs	r3, #25
 800139a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800139c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013a6:	2304      	movs	r3, #4
 80013a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 f976 	bl	80036a0 <HAL_RCC_OscConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013ba:	f000 f827 	bl	800140c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013be:	230f      	movs	r3, #15
 80013c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c2:	2302      	movs	r3, #2
 80013c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	2105      	movs	r1, #5
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fbd7 	bl	8003b90 <HAL_RCC_ClockConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013e8:	f000 f810 	bl	800140c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80013f2:	2000      	movs	r0, #0
 80013f4:	f002 fcb2 	bl	8003d5c <HAL_RCC_MCOConfig>
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80013f8:	f002 fd18 	bl	8003e2c <HAL_RCC_EnableCSS>
}
 80013fc:	bf00      	nop
 80013fe:	3750      	adds	r7, #80	; 0x50
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <HAL_MspInit+0x4c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_MspInit+0x4c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f000 fb10 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <ETH_IRQHandler+0x10>)
 80014c6:	f001 f80f 	bl	80024e8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000376c 	.word	0x2000376c

080014d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e00a      	b.n	80014fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014e6:	f3af 8000 	nop.w
 80014ea:	4601      	mov	r1, r0
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	dbf0      	blt.n	80014e6 <_read+0x12>
	}

return len;
 8001504:	687b      	ldr	r3, [r7, #4]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e009      	b.n	8001534 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	60ba      	str	r2, [r7, #8]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	dbf1      	blt.n	8001520 <_write+0x12>
	}
	return len;
 800153c:	687b      	ldr	r3, [r7, #4]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_close>:

int _close(int file)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
	return -1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156e:	605a      	str	r2, [r3, #4]
	return 0;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_isatty>:

int _isatty(int file)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
	return 1;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
	return 0;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d205      	bcs.n	80015ec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <_sbrk+0x6c>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e009      	b.n	8001600 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a06      	ldr	r2, [pc, #24]	; (8001614 <_sbrk+0x64>)
 80015fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	4618      	mov	r0, r3
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	20030000 	.word	0x20030000
 8001610:	00004000 	.word	0x00004000
 8001614:	200001d4 	.word	0x200001d4
 8001618:	20006e80 	.word	0x20006e80
 800161c:	20006e74 	.word	0x20006e74

08001620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <handle_packet>:

/* Local functions. */
void addRemainingDataToCurrentBuf(uint8_t* receivedData, uint16_t length);
void cutBuf();

char* handle_packet(struct tcp_pcb* tpcb, struct pbuf* p) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	if (p == NULL || p->len <= 0 || p->payload == NULL) return "handle error";
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d007      	beq.n	8001664 <handle_packet+0x20>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	895b      	ldrh	r3, [r3, #10]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <handle_packet+0x20>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <handle_packet+0x24>
 8001664:	4b6e      	ldr	r3, [pc, #440]	; (8001820 <handle_packet+0x1dc>)
 8001666:	e0d6      	b.n	8001816 <handle_packet+0x1d2>
	uint8_t header;
	uint8_t* data = NULL;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
	uint16_t length = p->len - 1;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	895b      	ldrh	r3, [r3, #10]
 8001670:	3b01      	subs	r3, #1
 8001672:	827b      	strh	r3, [r7, #18]
	memcpy(&header, p->payload, 1);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	743b      	strb	r3, [r7, #16]
	if (length > 0) {
 800167c:	8a7b      	ldrh	r3, [r7, #18]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00d      	beq.n	800169e <handle_packet+0x5a>
		data = malloc(sizeof(uint8_t) * length);
 8001682:	8a7b      	ldrh	r3, [r7, #18]
 8001684:	4618      	mov	r0, r3
 8001686:	f00c fc39 	bl	800defc <malloc>
 800168a:	4603      	mov	r3, r0
 800168c:	617b      	str	r3, [r7, #20]
		memcpy(data, p->payload + 1, length);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	8a7a      	ldrh	r2, [r7, #18]
 8001696:	4619      	mov	r1, r3
 8001698:	6978      	ldr	r0, [r7, #20]
 800169a:	f00c fc4f 	bl	800df3c <memcpy>
	}
	if (tr_status == CODE) {
 800169e:	4b61      	ldr	r3, [pc, #388]	; (8001824 <handle_packet+0x1e0>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d15f      	bne.n	8001766 <handle_packet+0x122>
		switch (header) {
 80016a6:	7c3b      	ldrb	r3, [r7, #16]
 80016a8:	2b63      	cmp	r3, #99	; 0x63
 80016aa:	d021      	beq.n	80016f0 <handle_packet+0xac>
 80016ac:	2b63      	cmp	r3, #99	; 0x63
 80016ae:	dc52      	bgt.n	8001756 <handle_packet+0x112>
 80016b0:	2b43      	cmp	r3, #67	; 0x43
 80016b2:	d042      	beq.n	800173a <handle_packet+0xf6>
 80016b4:	2b43      	cmp	r3, #67	; 0x43
 80016b6:	dc4e      	bgt.n	8001756 <handle_packet+0x112>
 80016b8:	2b21      	cmp	r3, #33	; 0x21
 80016ba:	d006      	beq.n	80016ca <handle_packet+0x86>
 80016bc:	2b21      	cmp	r3, #33	; 0x21
 80016be:	dc4a      	bgt.n	8001756 <handle_packet+0x112>
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d026      	beq.n	8001712 <handle_packet+0xce>
 80016c4:	2b10      	cmp	r3, #16
 80016c6:	d030      	beq.n	800172a <handle_packet+0xe6>
 80016c8:	e045      	b.n	8001756 <handle_packet+0x112>
			case JUMP:
				if(!data) free(data);
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <handle_packet+0x92>
 80016d0:	6978      	ldr	r0, [r7, #20]
 80016d2:	f00c fc1b 	bl	800df0c <free>
				validateApplications();
 80016d6:	f7ff f855 	bl	8000784 <validateApplications>
				if (getLatestApplicationAddress() == 0) {
 80016da:	f7fe ffab 	bl	8000634 <getLatestApplicationAddress>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <handle_packet+0xa4>
					return "No valid application in flash\n";
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <handle_packet+0x1e4>)
 80016e6:	e096      	b.n	8001816 <handle_packet+0x1d2>
				} else {
					jumpToApp();
 80016e8:	f7ff f8be 	bl	8000868 <jumpToApp>
					return "Done";
 80016ec:	4b4f      	ldr	r3, [pc, #316]	; (800182c <handle_packet+0x1e8>)
 80016ee:	e092      	b.n	8001816 <handle_packet+0x1d2>
				}
			case UPDATE:
				validateApplications();
 80016f0:	f7ff f848 	bl	8000784 <validateApplications>
				updateConfig();
 80016f4:	f7fe ffcc 	bl	8000690 <updateConfig>
				setAppVersion((uint32_t) data[0]);//TODO
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fffd 	bl	80006fc <setAppVersion>
				free(data);
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f00c fc02 	bl	800df0c <free>
				tr_status = DATA;
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <handle_packet+0x1e0>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
				return "Send hex file: \n";
 800170e:	4b48      	ldr	r3, [pc, #288]	; (8001830 <handle_packet+0x1ec>)
 8001710:	e081      	b.n	8001816 <handle_packet+0x1d2>
			case VER:
				if(!data) free(data);
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <handle_packet+0xda>
 8001718:	6978      	ldr	r0, [r7, #20]
 800171a:	f00c fbf7 	bl	800df0c <free>
				validateApplications();
 800171e:	f7ff f831 	bl	8000784 <validateApplications>
				return getVersions();
 8001722:	f7fe ff3f 	bl	80005a4 <getVersions>
 8001726:	4603      	mov	r3, r0
 8001728:	e075      	b.n	8001816 <handle_packet+0x1d2>
			case HELP:
				if(!data) free(data);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <handle_packet+0xf2>
 8001730:	6978      	ldr	r0, [r7, #20]
 8001732:	f00c fbeb 	bl	800df0c <free>
				return "jump: jump to application\
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <handle_packet+0x1f0>)
 8001738:	e06d      	b.n	8001816 <handle_packet+0x1d2>
				\nupdate <version>: download firmware and jump to it\
				\nversion: get current version of application\
				\nhelp: get information about commands\
				\nclear: erase configs\n";
			case CLR:
				if(!data) free(data);
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <handle_packet+0x102>
 8001740:	6978      	ldr	r0, [r7, #20]
 8001742:	f00c fbe3 	bl	800df0c <free>
				EraseSector(CONFIG_1_SECTOR);
 8001746:	200e      	movs	r0, #14
 8001748:	f7ff f92a 	bl	80009a0 <EraseSector>
				EraseSector(CONFIG_2_SECTOR);
 800174c:	200f      	movs	r0, #15
 800174e:	f7ff f927 	bl	80009a0 <EraseSector>
				return "Configs erased\n";
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <handle_packet+0x1f4>)
 8001754:	e05f      	b.n	8001816 <handle_packet+0x1d2>
			default:
				if(!data) free(data);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <handle_packet+0x11e>
 800175c:	6978      	ldr	r0, [r7, #20]
 800175e:	f00c fbd5 	bl	800df0c <free>
				return "No such command\n";
 8001762:	4b36      	ldr	r3, [pc, #216]	; (800183c <handle_packet+0x1f8>)
 8001764:	e057      	b.n	8001816 <handle_packet+0x1d2>
		}
	} else if (tr_status == DATA) {
 8001766:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <handle_packet+0x1e0>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d152      	bne.n	8001814 <handle_packet+0x1d0>
		if (header == EOT) {
 800176e:	7c3b      	ldrb	r3, [r7, #16]
 8001770:	2bf5      	cmp	r3, #245	; 0xf5
 8001772:	d108      	bne.n	8001786 <handle_packet+0x142>
			tr_status = CODE;
 8001774:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <handle_packet+0x1e0>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
			setCorrectUpdateFlag();
 800177a:	f7fe ffe1 	bl	8000740 <setCorrectUpdateFlag>
			jumpToApp();
 800177e:	f7ff f873 	bl	8000868 <jumpToApp>
			return "Done";
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <handle_packet+0x1e8>)
 8001784:	e047      	b.n	8001816 <handle_packet+0x1d2>
		}
	    /* Add remaining data from previous packet to current data */
		if (length <= 0) return "data empty error";
 8001786:	8a7b      	ldrh	r3, [r7, #18]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <handle_packet+0x14c>
 800178c:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <handle_packet+0x1fc>)
 800178e:	e042      	b.n	8001816 <handle_packet+0x1d2>
		addRemainingDataToCurrentBuf(data, length);
 8001790:	8a7b      	ldrh	r3, [r7, #18]
 8001792:	4619      	mov	r1, r3
 8001794:	6978      	ldr	r0, [r7, #20]
 8001796:	f000 f85b 	bl	8001850 <addRemainingDataToCurrentBuf>

	    /* Remove unfinished line from flashBuf and place it to remaining data */
	    cutBuf();
 800179a:	f000 f8a5 	bl	80018e8 <cutBuf>

	    /* Move data to flash */
	    uint8_t flashHexCode = flashHex(flashBuf, flashBufSize);
 800179e:	4b29      	ldr	r3, [pc, #164]	; (8001844 <handle_packet+0x200>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4828      	ldr	r0, [pc, #160]	; (8001848 <handle_packet+0x204>)
 80017a6:	f7ff f9fd 	bl	8000ba4 <flashHex>
 80017aa:	4603      	mov	r3, r0
 80017ac:	747b      	strb	r3, [r7, #17]
	    uint8_t answer;
	    if (flashHexCode == 0) { //Flash write error   TODO
 80017ae:	7c7b      	ldrb	r3, [r7, #17]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10d      	bne.n	80017d0 <handle_packet+0x18c>
	    	answer = NACK;
 80017b4:	231f      	movs	r3, #31
 80017b6:	73fb      	strb	r3, [r7, #15]
	    	tcp_write(tpcb, &answer, 1, 1);
 80017b8:	f107 010f 	add.w	r1, r7, #15
 80017bc:	2301      	movs	r3, #1
 80017be:	2201      	movs	r2, #1
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f008 fd3b 	bl	800a23c <tcp_write>
	    	tcp_output(tpcb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f009 f9ea 	bl	800aba0 <tcp_output>
	    	return NULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e022      	b.n	8001816 <handle_packet+0x1d2>
	    }
	    if (flashHexCode == 2) { //Wrong bank firmware error
 80017d0:	7c7b      	ldrb	r3, [r7, #17]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d10d      	bne.n	80017f2 <handle_packet+0x1ae>
	    	answer = NACK;
 80017d6:	231f      	movs	r3, #31
 80017d8:	73fb      	strb	r3, [r7, #15]
	    	tcp_write(tpcb, &answer, 1, 1);
 80017da:	f107 010f 	add.w	r1, r7, #15
 80017de:	2301      	movs	r3, #1
 80017e0:	2201      	movs	r2, #1
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f008 fd2a 	bl	800a23c <tcp_write>
	    	tcp_output(tpcb);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f009 f9d9 	bl	800aba0 <tcp_output>
	    	return NULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e011      	b.n	8001816 <handle_packet+0x1d2>
	    }

	    answer = ACK;
 80017f2:	2379      	movs	r3, #121	; 0x79
 80017f4:	73fb      	strb	r3, [r7, #15]
		tcp_write(tpcb, &answer, 1, 1);
 80017f6:	f107 010f 	add.w	r1, r7, #15
 80017fa:	2301      	movs	r3, #1
 80017fc:	2201      	movs	r2, #1
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f008 fd1c 	bl	800a23c <tcp_write>
		tcp_output(tpcb); //TODO
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f009 f9cb 	bl	800aba0 <tcp_output>
		free(data);
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f00c fb7e 	bl	800df0c <free>
		return NULL;
 8001810:	2300      	movs	r3, #0
 8001812:	e000      	b.n	8001816 <handle_packet+0x1d2>
	}
	return "unknown error";
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <handle_packet+0x208>)
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	0800f318 	.word	0x0800f318
 8001824:	2000065e 	.word	0x2000065e
 8001828:	0800f328 	.word	0x0800f328
 800182c:	0800f348 	.word	0x0800f348
 8001830:	0800f350 	.word	0x0800f350
 8001834:	0800f364 	.word	0x0800f364
 8001838:	0800f428 	.word	0x0800f428
 800183c:	0800f438 	.word	0x0800f438
 8001840:	0800f44c 	.word	0x0800f44c
 8001844:	200005d8 	.word	0x200005d8
 8001848:	200001d8 	.word	0x200001d8
 800184c:	0800f460 	.word	0x0800f460

08001850 <addRemainingDataToCurrentBuf>:

void addRemainingDataToCurrentBuf(uint8_t* receivedData, uint16_t length) {
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	if (remainingDataSize != 0) {
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <addRemainingDataToCurrentBuf+0x88>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d010      	beq.n	8001886 <addRemainingDataToCurrentBuf+0x36>
		for (i = 0; i < remainingDataSize; i++) {
 8001864:	2300      	movs	r3, #0
 8001866:	81fb      	strh	r3, [r7, #14]
 8001868:	e008      	b.n	800187c <addRemainingDataToCurrentBuf+0x2c>
			flashBuf[i] = remainingDataBuf[i];
 800186a:	89fa      	ldrh	r2, [r7, #14]
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	491b      	ldr	r1, [pc, #108]	; (80018dc <addRemainingDataToCurrentBuf+0x8c>)
 8001870:	5c89      	ldrb	r1, [r1, r2]
 8001872:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <addRemainingDataToCurrentBuf+0x90>)
 8001874:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < remainingDataSize; i++) {
 8001876:	89fb      	ldrh	r3, [r7, #14]
 8001878:	3301      	adds	r3, #1
 800187a:	81fb      	strh	r3, [r7, #14]
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <addRemainingDataToCurrentBuf+0x88>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	89fa      	ldrh	r2, [r7, #14]
 8001882:	429a      	cmp	r2, r3
 8001884:	d3f1      	bcc.n	800186a <addRemainingDataToCurrentBuf+0x1a>
		}
	}
	flashBufSize = remainingDataSize;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <addRemainingDataToCurrentBuf+0x88>)
 8001888:	881a      	ldrh	r2, [r3, #0]
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <addRemainingDataToCurrentBuf+0x94>)
 800188c:	801a      	strh	r2, [r3, #0]
	remainingDataSize = 0;
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <addRemainingDataToCurrentBuf+0x88>)
 8001890:	2200      	movs	r2, #0
 8001892:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < length; i++) {
 8001894:	2300      	movs	r3, #0
 8001896:	81fb      	strh	r3, [r7, #14]
 8001898:	e00d      	b.n	80018b6 <addRemainingDataToCurrentBuf+0x66>
		flashBuf[flashBufSize + i] = receivedData[i];
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	441a      	add	r2, r3
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <addRemainingDataToCurrentBuf+0x94>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	440b      	add	r3, r1
 80018aa:	7811      	ldrb	r1, [r2, #0]
 80018ac:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <addRemainingDataToCurrentBuf+0x90>)
 80018ae:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < length; i++) {
 80018b0:	89fb      	ldrh	r3, [r7, #14]
 80018b2:	3301      	adds	r3, #1
 80018b4:	81fb      	strh	r3, [r7, #14]
 80018b6:	89fa      	ldrh	r2, [r7, #14]
 80018b8:	887b      	ldrh	r3, [r7, #2]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3ed      	bcc.n	800189a <addRemainingDataToCurrentBuf+0x4a>
	}
	flashBufSize += length;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <addRemainingDataToCurrentBuf+0x94>)
 80018c0:	881a      	ldrh	r2, [r3, #0]
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	4413      	add	r3, r2
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <addRemainingDataToCurrentBuf+0x94>)
 80018ca:	801a      	strh	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	2000065c 	.word	0x2000065c
 80018dc:	200005dc 	.word	0x200005dc
 80018e0:	200001d8 	.word	0x200001d8
 80018e4:	200005d8 	.word	0x200005d8

080018e8 <cutBuf>:

void cutBuf() {
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t linePtr;

	for (i = flashBufSize - 1; i >= 0; i--) {
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <cutBuf+0x84>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	80fb      	strh	r3, [r7, #6]
		if (flashBuf[i] == '\n') {
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <cutBuf+0x88>)
 80018fa:	5cd3      	ldrb	r3, [r2, r3]
 80018fc:	2b0a      	cmp	r3, #10
 80018fe:	d110      	bne.n	8001922 <cutBuf+0x3a>
			linePtr = i;
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	80bb      	strh	r3, [r7, #4]
			break;
 8001904:	bf00      	nop
		}
	}
	remainingDataSize = flashBufSize - linePtr - 1;
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <cutBuf+0x84>)
 8001908:	881a      	ldrh	r2, [r3, #0]
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	b29b      	uxth	r3, r3
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <cutBuf+0x8c>)
 8001916:	801a      	strh	r2, [r3, #0]
	if (remainingDataSize == 0) return;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <cutBuf+0x8c>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d104      	bne.n	800192a <cutBuf+0x42>
 8001920:	e01f      	b.n	8001962 <cutBuf+0x7a>
	for (i = flashBufSize - 1; i >= 0; i--) {
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	3b01      	subs	r3, #1
 8001926:	80fb      	strh	r3, [r7, #6]
		if (flashBuf[i] == '\n') {
 8001928:	e7e5      	b.n	80018f6 <cutBuf+0xe>
	flashBufSize -= remainingDataSize;
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <cutBuf+0x84>)
 800192c:	881a      	ldrh	r2, [r3, #0]
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <cutBuf+0x8c>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <cutBuf+0x84>)
 8001938:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < remainingDataSize; i++) {
 800193a:	2300      	movs	r3, #0
 800193c:	80fb      	strh	r3, [r7, #6]
 800193e:	e00b      	b.n	8001958 <cutBuf+0x70>
		remainingDataBuf[i] = flashBuf[(linePtr + 1) + i];
 8001940:	88bb      	ldrh	r3, [r7, #4]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	441a      	add	r2, r3
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	4909      	ldr	r1, [pc, #36]	; (8001970 <cutBuf+0x88>)
 800194c:	5c89      	ldrb	r1, [r1, r2]
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <cutBuf+0x90>)
 8001950:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < remainingDataSize; i++) {
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	3301      	adds	r3, #1
 8001956:	80fb      	strh	r3, [r7, #6]
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <cutBuf+0x8c>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	88fa      	ldrh	r2, [r7, #6]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3ee      	bcc.n	8001940 <cutBuf+0x58>
	}
}
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	200005d8 	.word	0x200005d8
 8001970:	200001d8 	.word	0x200001d8
 8001974:	2000065c 	.word	0x2000065c
 8001978:	200005dc 	.word	0x200005dc

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001982:	490e      	ldr	r1, [pc, #56]	; (80019bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001998:	4c0b      	ldr	r4, [pc, #44]	; (80019c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019a6:	f7ff fe3b 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f00c fa83 	bl	800deb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff fcac 	bl	800130a <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80019c0:	080112c4 	.word	0x080112c4
  ldr r2, =_sbss
 80019c4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80019c8:	20006e7c 	.word	0x20006e7c

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_Init+0x40>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_Init+0x40>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_Init+0x40>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f965 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	200f      	movs	r0, #15
 8001a00:	f000 f83c 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fd0a 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_DeInit+0x54>)
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_DeInit+0x54>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_DeInit+0x54>)
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_DeInit+0x54>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_DeInit+0x54>)
 8001a36:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_DeInit+0x54>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_DeInit+0x54>)
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_DeInit+0x54>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_DeInit+0x54>)
 8001a52:	f04f 32ff 	mov.w	r2, #4294967295
 8001a56:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_DeInit+0x54>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001a5e:	f000 f805 	bl	8001a6c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f93b 	bl	8001d16 <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f911 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2000008c 	.word	0x2000008c
 8001ad4:	20000094 	.word	0x20000094
 8001ad8:	20000090 	.word	0x20000090

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000094 	.word	0x20000094
 8001b00:	20000660 	.word	0x20000660

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000660 	.word	0x20000660

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000094 	.word	0x20000094

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff47 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff5c 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffb0 	bl	8001c84 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001d40:	4ba1      	ldr	r3, [pc, #644]	; (8001fc8 <HAL_ETH_Init+0x298>)
 8001d42:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e182      	b.n	800205c <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f002 fb6c 	bl	8004448 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	4b95      	ldr	r3, [pc, #596]	; (8001fcc <HAL_ETH_Init+0x29c>)
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	4a94      	ldr	r2, [pc, #592]	; (8001fcc <HAL_ETH_Init+0x29c>)
 8001d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d80:	4b92      	ldr	r3, [pc, #584]	; (8001fcc <HAL_ETH_Init+0x29c>)
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d8c:	4b90      	ldr	r3, [pc, #576]	; (8001fd0 <HAL_ETH_Init+0x2a0>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a8f      	ldr	r2, [pc, #572]	; (8001fd0 <HAL_ETH_Init+0x2a0>)
 8001d92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d96:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d98:	4b8d      	ldr	r3, [pc, #564]	; (8001fd0 <HAL_ETH_Init+0x2a0>)
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	498b      	ldr	r1, [pc, #556]	; (8001fd0 <HAL_ETH_Init+0x2a0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dbc:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dbe:	f7ff fea1 	bl	8001b04 <HAL_GetTick>
 8001dc2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001dc4:	e011      	b.n	8001dea <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001dc6:	f7ff fe9d 	bl	8001b04 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dd4:	d909      	bls.n	8001dea <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e138      	b.n	800205c <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e4      	bne.n	8001dc6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f023 031c 	bic.w	r3, r3, #28
 8001e0a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e0c:	f002 f8e0 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8001e10:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4a6f      	ldr	r2, [pc, #444]	; (8001fd4 <HAL_ETH_Init+0x2a4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d908      	bls.n	8001e2c <HAL_ETH_Init+0xfc>
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4a6e      	ldr	r2, [pc, #440]	; (8001fd8 <HAL_ETH_Init+0x2a8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d804      	bhi.n	8001e2c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f043 0308 	orr.w	r3, r3, #8
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e027      	b.n	8001e7c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	4a6a      	ldr	r2, [pc, #424]	; (8001fd8 <HAL_ETH_Init+0x2a8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d908      	bls.n	8001e46 <HAL_ETH_Init+0x116>
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	4a64      	ldr	r2, [pc, #400]	; (8001fc8 <HAL_ETH_Init+0x298>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d204      	bcs.n	8001e46 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f043 030c 	orr.w	r3, r3, #12
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	e01a      	b.n	8001e7c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	4a5f      	ldr	r2, [pc, #380]	; (8001fc8 <HAL_ETH_Init+0x298>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d303      	bcc.n	8001e56 <HAL_ETH_Init+0x126>
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4a62      	ldr	r2, [pc, #392]	; (8001fdc <HAL_ETH_Init+0x2ac>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d911      	bls.n	8001e7a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4a60      	ldr	r2, [pc, #384]	; (8001fdc <HAL_ETH_Init+0x2ac>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d908      	bls.n	8001e70 <HAL_ETH_Init+0x140>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4a5f      	ldr	r2, [pc, #380]	; (8001fe0 <HAL_ETH_Init+0x2b0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d804      	bhi.n	8001e70 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	e005      	b.n	8001e7c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f043 0310 	orr.w	r3, r3, #16
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	e000      	b.n	8001e7c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e7a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001e84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e88:	2100      	movs	r1, #0
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fc16 	bl	80026bc <HAL_ETH_WritePHYRegister>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001e9a:	6939      	ldr	r1, [r7, #16]
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fca3 	bl	80027e8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0d6      	b.n	800205c <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001eae:	20ff      	movs	r0, #255	; 0xff
 8001eb0:	f7ff fe34 	bl	8001b1c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a4 	beq.w	8002006 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ebe:	f7ff fe21 	bl	8001b04 <HAL_GetTick>
 8001ec2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2101      	movs	r1, #1
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fb8d 	bl	80025ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001ed2:	f7ff fe17 	bl	8001b04 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d90f      	bls.n	8001f04 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ee8:	6939      	ldr	r1, [r7, #16]
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fc7c 	bl	80027e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0ab      	b.n	800205c <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0da      	beq.n	8001ec4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f12:	2100      	movs	r1, #0
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fbd1 	bl	80026bc <HAL_ETH_WritePHYRegister>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00b      	beq.n	8001f38 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f24:	6939      	ldr	r1, [r7, #16]
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fc5e 	bl	80027e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f34:	2301      	movs	r3, #1
 8001f36:	e091      	b.n	800205c <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f38:	f7ff fde4 	bl	8001b04 <HAL_GetTick>
 8001f3c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	461a      	mov	r2, r3
 8001f44:	2101      	movs	r1, #1
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fb50 	bl	80025ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001f4c:	f7ff fdda 	bl	8001b04 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d90f      	bls.n	8001f7e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f62:	6939      	ldr	r1, [r7, #16]
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fc3f 	bl	80027e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e06e      	b.n	800205c <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0da      	beq.n	8001f3e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	211f      	movs	r1, #31
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fb2b 	bl	80025ec <HAL_ETH_ReadPHYRegister>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00b      	beq.n	8001fb4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fa0:	6939      	ldr	r1, [r7, #16]
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fc20 	bl	80027e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e053      	b.n	800205c <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	e010      	b.n	8001fea <HAL_ETH_Init+0x2ba>
 8001fc8:	03938700 	.word	0x03938700
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	01312cff 	.word	0x01312cff
 8001fd8:	02160ebf 	.word	0x02160ebf
 8001fdc:	05f5e0ff 	.word	0x05f5e0ff
 8001fe0:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	e026      	b.n	800204a <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	e021      	b.n	800204a <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	08db      	lsrs	r3, r3, #3
 800200c:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002016:	4313      	orrs	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	2100      	movs	r1, #0
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fb4c 	bl	80026bc <HAL_ETH_WritePHYRegister>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800202e:	6939      	ldr	r1, [r7, #16]
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fbd9 	bl	80027e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00c      	b.n	800205c <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002042:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002046:	f7ff fd69 	bl	8001b1c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800204a:	6939      	ldr	r1, [r7, #16]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fbcb 	bl	80027e8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_ETH_DMATxDescListInit+0x20>
 8002080:	2302      	movs	r3, #2
 8002082:	e051      	b.n	8002128 <HAL_ETH_DMATxDescListInit+0xc4>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e030      	b.n	8002102 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	015b      	lsls	r3, r3, #5
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	4413      	add	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020b0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d105      	bne.n	80020da <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	3b01      	subs	r3, #1
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d208      	bcs.n	80020f6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	015b      	lsls	r3, r3, #5
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4413      	add	r3, r2
 80020ee:	461a      	mov	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	e002      	b.n	80020fc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d3ca      	bcc.n	80020a0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002114:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_ETH_DMARxDescListInit+0x20>
 8002150:	2302      	movs	r3, #2
 8002152:	e055      	b.n	8002200 <HAL_ETH_DMARxDescListInit+0xcc>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e034      	b.n	80021da <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	015b      	lsls	r3, r3, #5
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	4413      	add	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002180:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002188:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	461a      	mov	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d208      	bcs.n	80021ce <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3301      	adds	r3, #1
 80021c0:	015b      	lsls	r3, r3, #5
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	4413      	add	r3, r2
 80021c6:	461a      	mov	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	e002      	b.n	80021d4 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3301      	adds	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d3c6      	bcc.n	8002170 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ec:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_ETH_TransmitFrame+0x24>
 800222c:	2302      	movs	r3, #2
 800222e:	e0cc      	b.n	80023ca <HAL_ETH_TransmitFrame+0x1be>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002256:	2301      	movs	r3, #1
 8002258:	e0b7      	b.n	80023ca <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	da09      	bge.n	8002278 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2212      	movs	r2, #18
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0a8      	b.n	80023ca <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800227e:	4293      	cmp	r3, r2
 8002280:	d915      	bls.n	80022ae <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	4a54      	ldr	r2, [pc, #336]	; (80023d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	0a9b      	lsrs	r3, r3, #10
 800228c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002292:	fba3 1302 	umull	r1, r3, r3, r2
 8002296:	0a9b      	lsrs	r3, r3, #10
 8002298:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e001      	b.n	80022b2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80022ae:	2301      	movs	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d11c      	bne.n	80022f2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80022c6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80022d2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022e2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80022f0:	e04b      	b.n	800238a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e044      	b.n	8002382 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002306:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d107      	bne.n	800231e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800231c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002326:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3b01      	subs	r3, #1
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	429a      	cmp	r2, r3
 8002330:	d116      	bne.n	8002360 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002340:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	4a25      	ldr	r2, [pc, #148]	; (80023dc <HAL_ETH_TransmitFrame+0x1d0>)
 8002346:	fb03 f202 	mul.w	r2, r3, r2
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002352:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800235e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800236e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	3301      	adds	r3, #1
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	429a      	cmp	r2, r3
 8002388:	d3b6      	bcc.n	80022f8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00d      	beq.n	80023b8 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a4:	461a      	mov	r2, r3
 80023a6:	2304      	movs	r3, #4
 80023a8:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b2:	461a      	mov	r2, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	ac02b00b 	.word	0xac02b00b
 80023dc:	fffffa0c 	.word	0xfffffa0c

080023e0 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_ETH_GetReceivedFrame+0x1a>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e070      	b.n	80024dc <HAL_ETH_GetReceivedFrame+0xfc>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2202      	movs	r2, #2
 8002406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db5a      	blt.n	80024ca <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d030      	beq.n	8002484 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	2b01      	cmp	r3, #1
 8002432:	d103      	bne.n	800243c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0c1b      	lsrs	r3, r3, #16
 800244c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002450:	3b04      	subs	r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e02b      	b.n	80024dc <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	461a      	mov	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
 80024b2:	e00a      	b.n	80024ca <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	461a      	mov	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d112      	bne.n	8002528 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f85e 	bl	80025c4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002510:	461a      	mov	r2, r3
 8002512:	2340      	movs	r3, #64	; 0x40
 8002514:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002526:	e01a      	b.n	800255e <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d111      	bne.n	800255e <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f838 	bl	80025b0 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002548:	461a      	mov	r2, r3
 800254a:	2301      	movs	r3, #1
 800254c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002566:	461a      	mov	r2, r3
 8002568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800256c:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002580:	d112      	bne.n	80025a8 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f828 	bl	80025d8 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002590:	461a      	mov	r2, r3
 8002592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002596:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	460b      	mov	r3, r1
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b82      	cmp	r3, #130	; 0x82
 800260c:	d101      	bne.n	8002612 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
 8002610:	e050      	b.n	80026b4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2282      	movs	r2, #130	; 0x82
 8002616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 031c 	and.w	r3, r3, #28
 8002628:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8a1b      	ldrh	r3, [r3, #16]
 800262e:	02db      	lsls	r3, r3, #11
 8002630:	b29b      	uxth	r3, r3
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002638:	897b      	ldrh	r3, [r7, #10]
 800263a:	019b      	lsls	r3, r3, #6
 800263c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f023 0302 	bic.w	r3, r3, #2
 800264c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800265e:	f7ff fa51 	bl	8001b04 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002664:	e015      	b.n	8002692 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002666:	f7ff fa4d 	bl	8001b04 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002674:	d309      	bcc.n	800268a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e014      	b.n	80026b4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e4      	bne.n	8002666 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	460b      	mov	r3, r1
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b42      	cmp	r3, #66	; 0x42
 80026dc:	d101      	bne.n	80026e2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80026de:	2302      	movs	r3, #2
 80026e0:	e04e      	b.n	8002780 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2242      	movs	r2, #66	; 0x42
 80026e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 031c 	and.w	r3, r3, #28
 80026f8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8a1b      	ldrh	r3, [r3, #16]
 80026fe:	02db      	lsls	r3, r3, #11
 8002700:	b29b      	uxth	r3, r3
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002708:	897b      	ldrh	r3, [r7, #10]
 800270a:	019b      	lsls	r3, r3, #6
 800270c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002738:	f7ff f9e4 	bl	8001b04 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800273e:	e015      	b.n	800276c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002740:	f7ff f9e0 	bl	8001b04 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274e:	d309      	bcc.n	8002764 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e00d      	b.n	8002780 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e4      	bne.n	8002740 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ETH_Start+0x16>
 800279a:	2302      	movs	r3, #2
 800279c:	e01f      	b.n	80027de <HAL_ETH_Start+0x56>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa18 	bl	8002be4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fa32 	bl	8002c1e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fa78 	bl	8002cb0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fa49 	bl	8002c58 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa5c 	bl	8002c84 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b0b0      	sub	sp, #192	; 0xc0
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002804:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800280c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002812:	2300      	movs	r3, #0
 8002814:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002816:	2300      	movs	r3, #0
 8002818:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800282e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002832:	663b      	str	r3, [r7, #96]	; 0x60
 8002834:	e001      	b.n	800283a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800283a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800283e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002844:	2300      	movs	r3, #0
 8002846:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002854:	2340      	movs	r3, #64	; 0x40
 8002856:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800287c:	2300      	movs	r3, #0
 800287e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028c0:	4baa      	ldr	r3, [pc, #680]	; (8002b6c <ETH_MACDMAConfig+0x384>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80028c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80028ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80028cc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80028ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80028d0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80028d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80028d4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80028da:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80028dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80028de:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80028e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80028e2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80028e8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80028ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80028ec:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80028ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80028f0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80028f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80028f4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80028f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80028f8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80028fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80028fc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80028fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002910:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800291c:	2001      	movs	r0, #1
 800291e:	f7ff f8fd 	bl	8001b1c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800292a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800292c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800292e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002930:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002934:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002936:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800293a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800293c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002940:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002942:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002946:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800294c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002950:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002958:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800295a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002966:	2001      	movs	r0, #1
 8002968:	f7ff f8d8 	bl	8001b1c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002974:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800297e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002988:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002994:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002998:	f64f 7341 	movw	r3, #65345	; 0xff41
 800299c:	4013      	ands	r3, r2
 800299e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80029a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029a6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80029a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80029ac:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80029ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80029b2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80029b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80029b8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80029ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80029be:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80029c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80029c4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80029c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029d8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7ff f899 	bl	8001b1c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029f2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80029f4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80029f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7ff f884 	bl	8001b1c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a1c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a26:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002a2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a30:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002a42:	2304      	movs	r3, #4
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a66:	2300      	movs	r3, #0
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a7c:	4b3c      	ldr	r3, [pc, #240]	; (8002b70 <ETH_MACDMAConfig+0x388>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a84:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002a86:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a88:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002a8a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002a8c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002a8e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002a90:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002a92:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002a94:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002a96:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002a98:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002a9c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002aa0:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002aa4:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002aa6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002abe:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f7ff f824 	bl	8001b1c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002adc:	461a      	mov	r2, r3
 8002ade:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ae2:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ae8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002aec:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002af0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002af4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002afa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002afe:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b0c:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f7fe fffd 	bl	8001b1c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b30:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10d      	bne.n	8002b56 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b54:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f808 	bl	8002b74 <ETH_MACAddressConfig>
}
 8002b64:	bf00      	nop
 8002b66:	37c0      	adds	r7, #192	; 0xc0
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	ff20810f 	.word	0xff20810f
 8002b70:	f8de3f23 	.word	0xf8de3f23

08002b74 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3305      	adds	r3, #5
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	3204      	adds	r2, #4
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <ETH_MACAddressConfig+0x68>)
 8002b96:	4413      	add	r3, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3303      	adds	r3, #3
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	061a      	lsls	r2, r3, #24
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3302      	adds	r3, #2
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	7812      	ldrb	r2, [r2, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <ETH_MACAddressConfig+0x6c>)
 8002bc6:	4413      	add	r3, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	6013      	str	r3, [r2, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40028040 	.word	0x40028040
 8002be0:	40028044 	.word	0x40028044

08002be4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0208 	orr.w	r2, r2, #8
 8002bfe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f000 f877 	bl	8002cfc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	601a      	str	r2, [r3, #0]
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0204 	orr.w	r2, r2, #4
 8002c38:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f000 f85a 	bl	8002cfc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c76:	6193      	str	r3, [r2, #24]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ca2:	6193      	str	r3, [r2, #24]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cd2:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f000 f80b 	bl	8002cfc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cf0:	6193      	str	r3, [r2, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <ETH_Delay+0x38>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <ETH_Delay+0x3c>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0a5b      	lsrs	r3, r3, #9
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002d18:	bf00      	nop
  } 
  while (Delay --);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1e5a      	subs	r2, r3, #1
 8002d1e:	60fa      	str	r2, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f9      	bne.n	8002d18 <ETH_Delay+0x1c>
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	2000008c 	.word	0x2000008c
 8002d38:	10624dd3 	.word	0x10624dd3

08002d3c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_FLASH_Program+0xa0>)
 8002d50:	7e1b      	ldrb	r3, [r3, #24]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_FLASH_Program+0x1e>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e03b      	b.n	8002dd2 <HAL_FLASH_Program+0x96>
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_FLASH_Program+0xa0>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d64:	f000 f870 	bl	8002e48 <FLASH_WaitForLastOperation>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d12b      	bne.n	8002dca <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002d78:	783b      	ldrb	r3, [r7, #0]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	68b8      	ldr	r0, [r7, #8]
 8002d7e:	f000 f91b 	bl	8002fb8 <FLASH_Program_Byte>
 8002d82:	e016      	b.n	8002db2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d105      	bne.n	8002d96 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002d8a:	883b      	ldrh	r3, [r7, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68b8      	ldr	r0, [r7, #8]
 8002d90:	f000 f8ee 	bl	8002f70 <FLASH_Program_HalfWord>
 8002d94:	e00d      	b.n	8002db2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d105      	bne.n	8002da8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	68b8      	ldr	r0, [r7, #8]
 8002da2:	f000 f8c3 	bl	8002f2c <FLASH_Program_Word>
 8002da6:	e004      	b.n	8002db2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dac:	68b8      	ldr	r0, [r7, #8]
 8002dae:	f000 f88b 	bl	8002ec8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002db2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002db6:	f000 f847 	bl	8002e48 <FLASH_WaitForLastOperation>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_FLASH_Program+0xa4>)
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_FLASH_Program+0xa4>)
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002dca:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <HAL_FLASH_Program+0xa0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000664 	.word	0x20000664
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_FLASH_Unlock+0x38>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da0b      	bge.n	8002e0e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_FLASH_Unlock+0x38>)
 8002df8:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <HAL_FLASH_Unlock+0x3c>)
 8002dfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <HAL_FLASH_Unlock+0x38>)
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_FLASH_Unlock+0x40>)
 8002e00:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_FLASH_Unlock+0x38>)
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da01      	bge.n	8002e0e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40023c00 	.word	0x40023c00
 8002e20:	45670123 	.word	0x45670123
 8002e24:	cdef89ab 	.word	0xcdef89ab

08002e28 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_FLASH_Lock+0x1c>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_FLASH_Lock+0x1c>)
 8002e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e36:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40023c00 	.word	0x40023c00

08002e48 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <FLASH_WaitForLastOperation+0x78>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e5a:	f7fe fe53 	bl	8001b04 <HAL_GetTick>
 8002e5e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002e60:	e010      	b.n	8002e84 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d00c      	beq.n	8002e84 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <FLASH_WaitForLastOperation+0x38>
 8002e70:	f7fe fe48 	bl	8001b04 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d201      	bcs.n	8002e84 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e019      	b.n	8002eb8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <FLASH_WaitForLastOperation+0x7c>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e8      	bne.n	8002e62 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <FLASH_WaitForLastOperation+0x7c>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <FLASH_WaitForLastOperation+0x7c>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <FLASH_WaitForLastOperation+0x7c>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002eae:	f000 f8a5 	bl	8002ffc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
  
}  
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000664 	.word	0x20000664
 8002ec4:	40023c00 	.word	0x40023c00

08002ec8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <FLASH_Program_DoubleWord+0x60>)
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <FLASH_Program_DoubleWord+0x60>)
 8002eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ede:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <FLASH_Program_DoubleWord+0x60>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	4a10      	ldr	r2, [pc, #64]	; (8002f28 <FLASH_Program_DoubleWord+0x60>)
 8002ee6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002eea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <FLASH_Program_DoubleWord+0x60>)
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <FLASH_Program_DoubleWord+0x60>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002efe:	f3bf 8f6f 	isb	sy
}
 8002f02:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002f04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	000a      	movs	r2, r1
 8002f12:	2300      	movs	r3, #0
 8002f14:	68f9      	ldr	r1, [r7, #12]
 8002f16:	3104      	adds	r1, #4
 8002f18:	4613      	mov	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40023c00 	.word	0x40023c00

08002f2c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <FLASH_Program_Word+0x40>)
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <FLASH_Program_Word+0x40>)
 8002f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <FLASH_Program_Word+0x40>)
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <FLASH_Program_Word+0x40>)
 8002f48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <FLASH_Program_Word+0x40>)
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	4a06      	ldr	r2, [pc, #24]	; (8002f6c <FLASH_Program_Word+0x40>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	601a      	str	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40023c00 	.word	0x40023c00

08002f70 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <FLASH_Program_HalfWord+0x44>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <FLASH_Program_HalfWord+0x44>)
 8002f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <FLASH_Program_HalfWord+0x44>)
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <FLASH_Program_HalfWord+0x44>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002f94:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <FLASH_Program_HalfWord+0x44>)
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	4a06      	ldr	r2, [pc, #24]	; (8002fb4 <FLASH_Program_HalfWord+0x44>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	801a      	strh	r2, [r3, #0]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023c00 	.word	0x40023c00

08002fb8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <FLASH_Program_Byte+0x40>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <FLASH_Program_Byte+0x40>)
 8002fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <FLASH_Program_Byte+0x40>)
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <FLASH_Program_Byte+0x40>)
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002fd8:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <FLASH_Program_Byte+0x40>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <FLASH_Program_Byte+0x40>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	701a      	strb	r2, [r3, #0]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40023c00 	.word	0x40023c00

08002ffc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003000:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800300c:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f043 0310 	orr.w	r3, r3, #16
 8003014:	4a2b      	ldr	r2, [pc, #172]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 8003016:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003018:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 800301a:	2210      	movs	r2, #16
 800301c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f043 0308 	orr.w	r3, r3, #8
 8003032:	4a24      	ldr	r2, [pc, #144]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 8003034:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 8003038:	2220      	movs	r2, #32
 800303a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800303c:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 8003052:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 8003056:	2240      	movs	r2, #64	; 0x40
 8003058:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f043 0302 	orr.w	r3, r3, #2
 800306e:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 8003070:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d009      	beq.n	8003098 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 800308e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 8003092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003096:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80030a4:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f043 0320 	orr.w	r3, r3, #32
 80030ac:	4a05      	ldr	r2, [pc, #20]	; (80030c4 <FLASH_SetErrorCode+0xc8>)
 80030ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <FLASH_SetErrorCode+0xc4>)
 80030b2:	2202      	movs	r2, #2
 80030b4:	60da      	str	r2, [r3, #12]
  }
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40023c00 	.word	0x40023c00
 80030c4:	20000664 	.word	0x20000664

080030c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030da:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_FLASHEx_Erase+0xdc>)
 80030dc:	7e1b      	ldrb	r3, [r3, #24]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_FLASHEx_Erase+0x1e>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e05a      	b.n	800319c <HAL_FLASHEx_Erase+0xd4>
 80030e6:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_FLASHEx_Erase+0xdc>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030f0:	f7ff feaa 	bl	8002e48 <FLASH_WaitForLastOperation>
 80030f4:	4603      	mov	r3, r0
 80030f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d14a      	bne.n	8003194 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	f04f 32ff 	mov.w	r2, #4294967295
 8003104:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d117      	bne.n	800313e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f000 f846 	bl	80031ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003120:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003124:	f7ff fe90 	bl	8002e48 <FLASH_WaitForLastOperation>
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_FLASHEx_Erase+0xe0>)
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_FLASHEx_Erase+0xe0>)
 8003132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003136:	f023 0304 	bic.w	r3, r3, #4
 800313a:	6113      	str	r3, [r2, #16]
 800313c:	e028      	b.n	8003190 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	e01c      	b.n	8003180 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	4619      	mov	r1, r3
 800314e:	68b8      	ldr	r0, [r7, #8]
 8003150:	f000 f866 	bl	8003220 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003154:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003158:	f7ff fe76 	bl	8002e48 <FLASH_WaitForLastOperation>
 800315c:	4603      	mov	r3, r0
 800315e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_FLASHEx_Erase+0xe0>)
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <HAL_FLASHEx_Erase+0xe0>)
 8003166:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800316a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	601a      	str	r2, [r3, #0]
          break;
 8003178:	e00a      	b.n	8003190 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3301      	adds	r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4413      	add	r3, r2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	429a      	cmp	r2, r3
 800318e:	d3da      	bcc.n	8003146 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003190:	f000 f894 	bl	80032bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_FLASHEx_Erase+0xdc>)
 8003196:	2200      	movs	r2, #0
 8003198:	761a      	strb	r2, [r3, #24]

  return status;
 800319a:	7bfb      	ldrb	r3, [r7, #15]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000664 	.word	0x20000664
 80031a8:	40023c00 	.word	0x40023c00

080031ac <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031b8:	4b18      	ldr	r3, [pc, #96]	; (800321c <FLASH_MassErase+0x70>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	4a17      	ldr	r2, [pc, #92]	; (800321c <FLASH_MassErase+0x70>)
 80031be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c2:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d108      	bne.n	80031dc <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <FLASH_MassErase+0x70>)
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	4a13      	ldr	r2, [pc, #76]	; (800321c <FLASH_MassErase+0x70>)
 80031d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6113      	str	r3, [r2, #16]
 80031da:	e00f      	b.n	80031fc <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d106      	bne.n	80031f0 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <FLASH_MassErase+0x70>)
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	4a0d      	ldr	r2, [pc, #52]	; (800321c <FLASH_MassErase+0x70>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	6113      	str	r3, [r2, #16]
 80031ee:	e005      	b.n	80031fc <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <FLASH_MassErase+0x70>)
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	4a09      	ldr	r2, [pc, #36]	; (800321c <FLASH_MassErase+0x70>)
 80031f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031fa:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <FLASH_MassErase+0x70>)
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	4313      	orrs	r3, r2
 8003206:	4a05      	ldr	r2, [pc, #20]	; (800321c <FLASH_MassErase+0x70>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	6113      	str	r3, [r2, #16]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40023c00 	.word	0x40023c00

08003220 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e010      	b.n	800325e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d103      	bne.n	800324a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e009      	b.n	800325e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d103      	bne.n	8003258 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e002      	b.n	800325e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800325c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b0b      	cmp	r3, #11
 8003262:	d902      	bls.n	800326a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <FLASH_Erase_Sector+0x98>)
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <FLASH_Erase_Sector+0x98>)
 8003270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003274:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <FLASH_Erase_Sector+0x98>)
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	490f      	ldr	r1, [pc, #60]	; (80032b8 <FLASH_Erase_Sector+0x98>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <FLASH_Erase_Sector+0x98>)
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <FLASH_Erase_Sector+0x98>)
 8003288:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800328c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <FLASH_Erase_Sector+0x98>)
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4313      	orrs	r3, r2
 8003298:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <FLASH_Erase_Sector+0x98>)
 800329a:	f043 0302 	orr.w	r3, r3, #2
 800329e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <FLASH_Erase_Sector+0x98>)
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <FLASH_Erase_Sector+0x98>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032aa:	6113      	str	r3, [r2, #16]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40023c00 	.word	0x40023c00

080032bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80032c0:	4b20      	ldr	r3, [pc, #128]	; (8003344 <FLASH_FlushCaches+0x88>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d017      	beq.n	80032fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <FLASH_FlushCaches+0x88>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <FLASH_FlushCaches+0x88>)
 80032d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <FLASH_FlushCaches+0x88>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a19      	ldr	r2, [pc, #100]	; (8003344 <FLASH_FlushCaches+0x88>)
 80032de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b17      	ldr	r3, [pc, #92]	; (8003344 <FLASH_FlushCaches+0x88>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a16      	ldr	r2, [pc, #88]	; (8003344 <FLASH_FlushCaches+0x88>)
 80032ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <FLASH_FlushCaches+0x88>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a13      	ldr	r2, [pc, #76]	; (8003344 <FLASH_FlushCaches+0x88>)
 80032f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <FLASH_FlushCaches+0x88>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d017      	beq.n	8003338 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <FLASH_FlushCaches+0x88>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <FLASH_FlushCaches+0x88>)
 800330e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003312:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <FLASH_FlushCaches+0x88>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <FLASH_FlushCaches+0x88>)
 800331a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <FLASH_FlushCaches+0x88>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a07      	ldr	r2, [pc, #28]	; (8003344 <FLASH_FlushCaches+0x88>)
 8003326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800332a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <FLASH_FlushCaches+0x88>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <FLASH_FlushCaches+0x88>)
 8003332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003336:	6013      	str	r3, [r2, #0]
  }
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40023c00 	.word	0x40023c00

08003348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	; 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	e177      	b.n	8003654 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003364:	2201      	movs	r2, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	429a      	cmp	r2, r3
 800337e:	f040 8166 	bne.w	800364e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d005      	beq.n	800339a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003396:	2b02      	cmp	r3, #2
 8003398:	d130      	bne.n	80033fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 0201 	and.w	r2, r3, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b03      	cmp	r3, #3
 8003406:	d017      	beq.n	8003438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d123      	bne.n	800348c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	08da      	lsrs	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3208      	adds	r2, #8
 800344c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	220f      	movs	r2, #15
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	08da      	lsrs	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3208      	adds	r2, #8
 8003486:	69b9      	ldr	r1, [r7, #24]
 8003488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0203 	and.w	r2, r3, #3
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80c0 	beq.w	800364e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	4b66      	ldr	r3, [pc, #408]	; (800366c <HAL_GPIO_Init+0x324>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	4a65      	ldr	r2, [pc, #404]	; (800366c <HAL_GPIO_Init+0x324>)
 80034d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034dc:	6453      	str	r3, [r2, #68]	; 0x44
 80034de:	4b63      	ldr	r3, [pc, #396]	; (800366c <HAL_GPIO_Init+0x324>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ea:	4a61      	ldr	r2, [pc, #388]	; (8003670 <HAL_GPIO_Init+0x328>)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	3302      	adds	r3, #2
 80034f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	220f      	movs	r2, #15
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_GPIO_Init+0x32c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d037      	beq.n	8003586 <HAL_GPIO_Init+0x23e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a57      	ldr	r2, [pc, #348]	; (8003678 <HAL_GPIO_Init+0x330>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_GPIO_Init+0x23a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a56      	ldr	r2, [pc, #344]	; (800367c <HAL_GPIO_Init+0x334>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02b      	beq.n	800357e <HAL_GPIO_Init+0x236>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a55      	ldr	r2, [pc, #340]	; (8003680 <HAL_GPIO_Init+0x338>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d025      	beq.n	800357a <HAL_GPIO_Init+0x232>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a54      	ldr	r2, [pc, #336]	; (8003684 <HAL_GPIO_Init+0x33c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01f      	beq.n	8003576 <HAL_GPIO_Init+0x22e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a53      	ldr	r2, [pc, #332]	; (8003688 <HAL_GPIO_Init+0x340>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d019      	beq.n	8003572 <HAL_GPIO_Init+0x22a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a52      	ldr	r2, [pc, #328]	; (800368c <HAL_GPIO_Init+0x344>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0x226>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a51      	ldr	r2, [pc, #324]	; (8003690 <HAL_GPIO_Init+0x348>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_Init+0x222>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a50      	ldr	r2, [pc, #320]	; (8003694 <HAL_GPIO_Init+0x34c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_Init+0x21e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4f      	ldr	r2, [pc, #316]	; (8003698 <HAL_GPIO_Init+0x350>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_Init+0x21a>
 800355e:	2309      	movs	r3, #9
 8003560:	e012      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003562:	230a      	movs	r3, #10
 8003564:	e010      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003566:	2308      	movs	r3, #8
 8003568:	e00e      	b.n	8003588 <HAL_GPIO_Init+0x240>
 800356a:	2307      	movs	r3, #7
 800356c:	e00c      	b.n	8003588 <HAL_GPIO_Init+0x240>
 800356e:	2306      	movs	r3, #6
 8003570:	e00a      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003572:	2305      	movs	r3, #5
 8003574:	e008      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003576:	2304      	movs	r3, #4
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x240>
 800357a:	2303      	movs	r3, #3
 800357c:	e004      	b.n	8003588 <HAL_GPIO_Init+0x240>
 800357e:	2302      	movs	r3, #2
 8003580:	e002      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003586:	2300      	movs	r3, #0
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	f002 0203 	and.w	r2, r2, #3
 800358e:	0092      	lsls	r2, r2, #2
 8003590:	4093      	lsls	r3, r2
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003598:	4935      	ldr	r1, [pc, #212]	; (8003670 <HAL_GPIO_Init+0x328>)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	3302      	adds	r3, #2
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035a6:	4b3d      	ldr	r3, [pc, #244]	; (800369c <HAL_GPIO_Init+0x354>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ca:	4a34      	ldr	r2, [pc, #208]	; (800369c <HAL_GPIO_Init+0x354>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d0:	4b32      	ldr	r3, [pc, #200]	; (800369c <HAL_GPIO_Init+0x354>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035f4:	4a29      	ldr	r2, [pc, #164]	; (800369c <HAL_GPIO_Init+0x354>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035fa:	4b28      	ldr	r3, [pc, #160]	; (800369c <HAL_GPIO_Init+0x354>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800361e:	4a1f      	ldr	r2, [pc, #124]	; (800369c <HAL_GPIO_Init+0x354>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_GPIO_Init+0x354>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003648:	4a14      	ldr	r2, [pc, #80]	; (800369c <HAL_GPIO_Init+0x354>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3301      	adds	r3, #1
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b0f      	cmp	r3, #15
 8003658:	f67f ae84 	bls.w	8003364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3724      	adds	r7, #36	; 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	40013800 	.word	0x40013800
 8003674:	40020000 	.word	0x40020000
 8003678:	40020400 	.word	0x40020400
 800367c:	40020800 	.word	0x40020800
 8003680:	40020c00 	.word	0x40020c00
 8003684:	40021000 	.word	0x40021000
 8003688:	40021400 	.word	0x40021400
 800368c:	40021800 	.word	0x40021800
 8003690:	40021c00 	.word	0x40021c00
 8003694:	40022000 	.word	0x40022000
 8003698:	40022400 	.word	0x40022400
 800369c:	40013c00 	.word	0x40013c00

080036a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e267      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d075      	beq.n	80037aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036be:	4b88      	ldr	r3, [pc, #544]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d00c      	beq.n	80036e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ca:	4b85      	ldr	r3, [pc, #532]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d112      	bne.n	80036fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d6:	4b82      	ldr	r3, [pc, #520]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e2:	d10b      	bne.n	80036fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e4:	4b7e      	ldr	r3, [pc, #504]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05b      	beq.n	80037a8 <HAL_RCC_OscConfig+0x108>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d157      	bne.n	80037a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e242      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d106      	bne.n	8003714 <HAL_RCC_OscConfig+0x74>
 8003706:	4b76      	ldr	r3, [pc, #472]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a75      	ldr	r2, [pc, #468]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e01d      	b.n	8003750 <HAL_RCC_OscConfig+0xb0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x98>
 800371e:	4b70      	ldr	r3, [pc, #448]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6f      	ldr	r2, [pc, #444]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 8003724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b6d      	ldr	r3, [pc, #436]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6c      	ldr	r2, [pc, #432]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0xb0>
 8003738:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a68      	ldr	r2, [pc, #416]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 800373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a65      	ldr	r2, [pc, #404]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 800374a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe f9d4 	bl	8001b04 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe f9d0 	bl	8001b04 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e207      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	4b5b      	ldr	r3, [pc, #364]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0xc0>
 800377e:	e014      	b.n	80037aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe f9c0 	bl	8001b04 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe f9bc 	bl	8001b04 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e1f3      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379a:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0xe8>
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d063      	beq.n	800387e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037b6:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d11c      	bne.n	8003808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ce:	4b44      	ldr	r3, [pc, #272]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d116      	bne.n	8003808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_RCC_OscConfig+0x152>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e1c7      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4937      	ldr	r1, [pc, #220]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003806:	e03a      	b.n	800387e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d020      	beq.n	8003852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003810:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <HAL_RCC_OscConfig+0x244>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7fe f975 	bl	8001b04 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800381e:	f7fe f971 	bl	8001b04 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e1a8      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003830:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383c:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4925      	ldr	r1, [pc, #148]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]
 8003850:	e015      	b.n	800387e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003852:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <HAL_RCC_OscConfig+0x244>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fe f954 	bl	8001b04 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003860:	f7fe f950 	bl	8001b04 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e187      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003872:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d036      	beq.n	80038f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d016      	beq.n	80038c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_RCC_OscConfig+0x248>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003898:	f7fe f934 	bl	8001b04 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a0:	f7fe f930 	bl	8001b04 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e167      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_OscConfig+0x240>)
 80038b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x200>
 80038be:	e01b      	b.n	80038f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_OscConfig+0x248>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fe f91d 	bl	8001b04 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038cc:	e00e      	b.n	80038ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ce:	f7fe f919 	bl	8001b04 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d907      	bls.n	80038ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e150      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
 80038e0:	40023800 	.word	0x40023800
 80038e4:	42470000 	.word	0x42470000
 80038e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	4b88      	ldr	r3, [pc, #544]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 80038ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1ea      	bne.n	80038ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8097 	beq.w	8003a34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390a:	4b81      	ldr	r3, [pc, #516]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10f      	bne.n	8003936 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	4b7d      	ldr	r3, [pc, #500]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	4a7c      	ldr	r2, [pc, #496]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	; 0x40
 8003926:	4b7a      	ldr	r3, [pc, #488]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003936:	4b77      	ldr	r3, [pc, #476]	; (8003b14 <HAL_RCC_OscConfig+0x474>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d118      	bne.n	8003974 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003942:	4b74      	ldr	r3, [pc, #464]	; (8003b14 <HAL_RCC_OscConfig+0x474>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a73      	ldr	r2, [pc, #460]	; (8003b14 <HAL_RCC_OscConfig+0x474>)
 8003948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394e:	f7fe f8d9 	bl	8001b04 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003956:	f7fe f8d5 	bl	8001b04 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e10c      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003968:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_RCC_OscConfig+0x474>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d106      	bne.n	800398a <HAL_RCC_OscConfig+0x2ea>
 800397c:	4b64      	ldr	r3, [pc, #400]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	4a63      	ldr	r2, [pc, #396]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6713      	str	r3, [r2, #112]	; 0x70
 8003988:	e01c      	b.n	80039c4 <HAL_RCC_OscConfig+0x324>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b05      	cmp	r3, #5
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x30c>
 8003992:	4b5f      	ldr	r3, [pc, #380]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	4a5e      	ldr	r2, [pc, #376]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003998:	f043 0304 	orr.w	r3, r3, #4
 800399c:	6713      	str	r3, [r2, #112]	; 0x70
 800399e:	4b5c      	ldr	r3, [pc, #368]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	4a5b      	ldr	r2, [pc, #364]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6713      	str	r3, [r2, #112]	; 0x70
 80039aa:	e00b      	b.n	80039c4 <HAL_RCC_OscConfig+0x324>
 80039ac:	4b58      	ldr	r3, [pc, #352]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	4a57      	ldr	r2, [pc, #348]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	6713      	str	r3, [r2, #112]	; 0x70
 80039b8:	4b55      	ldr	r3, [pc, #340]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	4a54      	ldr	r2, [pc, #336]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 80039be:	f023 0304 	bic.w	r3, r3, #4
 80039c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d015      	beq.n	80039f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe f89a 	bl	8001b04 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d4:	f7fe f896 	bl	8001b04 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e0cb      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ea:	4b49      	ldr	r3, [pc, #292]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0ee      	beq.n	80039d4 <HAL_RCC_OscConfig+0x334>
 80039f6:	e014      	b.n	8003a22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f8:	f7fe f884 	bl	8001b04 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a00:	f7fe f880 	bl	8001b04 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e0b5      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a16:	4b3e      	ldr	r3, [pc, #248]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1ee      	bne.n	8003a00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d105      	bne.n	8003a34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a28:	4b39      	ldr	r3, [pc, #228]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	4a38      	ldr	r2, [pc, #224]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80a1 	beq.w	8003b80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a3e:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d05c      	beq.n	8003b04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d141      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a52:	4b31      	ldr	r3, [pc, #196]	; (8003b18 <HAL_RCC_OscConfig+0x478>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fe f854 	bl	8001b04 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fe f850 	bl	8001b04 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e087      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	4b27      	ldr	r3, [pc, #156]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	019b      	lsls	r3, r3, #6
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	3b01      	subs	r3, #1
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	491b      	ldr	r1, [pc, #108]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <HAL_RCC_OscConfig+0x478>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7fe f829 	bl	8001b04 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fe f825 	bl	8001b04 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e05c      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x416>
 8003ad4:	e054      	b.n	8003b80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <HAL_RCC_OscConfig+0x478>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fe f812 	bl	8001b04 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fe f80e 	bl	8001b04 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e045      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCC_OscConfig+0x470>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x444>
 8003b02:	e03d      	b.n	8003b80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e038      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40007000 	.word	0x40007000
 8003b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_RCC_OscConfig+0x4ec>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d028      	beq.n	8003b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d121      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d11a      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d111      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	3b01      	subs	r3, #1
 8003b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800

08003b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0cc      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b68      	ldr	r3, [pc, #416]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d90c      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b63      	ldr	r3, [pc, #396]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0b8      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be4:	4b59      	ldr	r3, [pc, #356]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a58      	ldr	r2, [pc, #352]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bfc:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4a52      	ldr	r2, [pc, #328]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b50      	ldr	r3, [pc, #320]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	494d      	ldr	r1, [pc, #308]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d044      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d119      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e07f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d003      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5e:	4b3b      	ldr	r3, [pc, #236]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e067      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f023 0203 	bic.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4934      	ldr	r1, [pc, #208]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c80:	f7fd ff40 	bl	8001b04 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7fd ff3c 	bl	8001b04 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e04f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 020c 	and.w	r2, r3, #12
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1eb      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d20c      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e032      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4916      	ldr	r1, [pc, #88]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	490e      	ldr	r1, [pc, #56]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d16:	f000 f895 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	490a      	ldr	r1, [pc, #40]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003d28:	5ccb      	ldrb	r3, [r1, r3]
 8003d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd fea0 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	08011128 	.word	0x08011128
 8003d54:	2000008c 	.word	0x2000008c
 8003d58:	20000090 	.word	0x20000090

08003d5c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08c      	sub	sp, #48	; 0x30
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d129      	bne.n	8003dc2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_RCC_MCOConfig+0xc4>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <HAL_RCC_MCOConfig+0xc4>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <HAL_RCC_MCOConfig+0xc4>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d90:	2302      	movs	r3, #2
 8003d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d94:	2303      	movs	r3, #3
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003da0:	f107 031c 	add.w	r3, r7, #28
 8003da4:	4619      	mov	r1, r3
 8003da6:	481f      	ldr	r0, [pc, #124]	; (8003e24 <HAL_RCC_MCOConfig+0xc8>)
 8003da8:	f7ff face 	bl	8003348 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003dac:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <HAL_RCC_MCOConfig+0xc4>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	4919      	ldr	r1, [pc, #100]	; (8003e20 <HAL_RCC_MCOConfig+0xc4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003dc0:	e029      	b.n	8003e16 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <HAL_RCC_MCOConfig+0xc4>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <HAL_RCC_MCOConfig+0xc4>)
 8003dcc:	f043 0304 	orr.w	r3, r3, #4
 8003dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <HAL_RCC_MCOConfig+0xc4>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de4:	2302      	movs	r3, #2
 8003de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de8:	2303      	movs	r3, #3
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003df0:	2300      	movs	r3, #0
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003df4:	f107 031c 	add.w	r3, r7, #28
 8003df8:	4619      	mov	r1, r3
 8003dfa:	480b      	ldr	r0, [pc, #44]	; (8003e28 <HAL_RCC_MCOConfig+0xcc>)
 8003dfc:	f7ff faa4 	bl	8003348 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <HAL_RCC_MCOConfig+0xc4>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	00d9      	lsls	r1, r3, #3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	4903      	ldr	r1, [pc, #12]	; (8003e20 <HAL_RCC_MCOConfig+0xc4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
}
 8003e16:	bf00      	nop
 8003e18:	3730      	adds	r7, #48	; 0x30
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40020000 	.word	0x40020000
 8003e28:	40020800 	.word	0x40020800

08003e2c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_RCC_EnableCSS+0x14>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	4247004c 	.word	0x4247004c

08003e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e48:	b090      	sub	sp, #64	; 0x40
 8003e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e50:	2300      	movs	r3, #0
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e54:	2300      	movs	r3, #0
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e5c:	4b59      	ldr	r3, [pc, #356]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d00d      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x40>
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	f200 80a1 	bhi.w	8003fb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x34>
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e76:	e09b      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e78:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e7c:	e09b      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e7e:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e82:	e098      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e84:	4b4f      	ldr	r3, [pc, #316]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8e:	4b4d      	ldr	r3, [pc, #308]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d028      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9a:	4b4a      	ldr	r3, [pc, #296]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	623b      	str	r3, [r7, #32]
 8003ea4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003eac:	2100      	movs	r1, #0
 8003eae:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003eb0:	fb03 f201 	mul.w	r2, r3, r1
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	fb00 f303 	mul.w	r3, r0, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	4a43      	ldr	r2, [pc, #268]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ebe:	fba0 1202 	umull	r1, r2, r0, r2
 8003ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eca:	4413      	add	r3, r2
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	61fa      	str	r2, [r7, #28]
 8003ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ede:	f7fc f9df 	bl	80002a0 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eea:	e053      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eec:	4b35      	ldr	r3, [pc, #212]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	617a      	str	r2, [r7, #20]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003efe:	f04f 0b00 	mov.w	fp, #0
 8003f02:	4652      	mov	r2, sl
 8003f04:	465b      	mov	r3, fp
 8003f06:	f04f 0000 	mov.w	r0, #0
 8003f0a:	f04f 0100 	mov.w	r1, #0
 8003f0e:	0159      	lsls	r1, r3, #5
 8003f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f14:	0150      	lsls	r0, r2, #5
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f1e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f36:	ebb2 0408 	subs.w	r4, r2, r8
 8003f3a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	00eb      	lsls	r3, r5, #3
 8003f48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f4c:	00e2      	lsls	r2, r4, #3
 8003f4e:	4614      	mov	r4, r2
 8003f50:	461d      	mov	r5, r3
 8003f52:	eb14 030a 	adds.w	r3, r4, sl
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	eb45 030b 	adc.w	r3, r5, fp
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	028b      	lsls	r3, r1, #10
 8003f6e:	4621      	mov	r1, r4
 8003f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f74:	4621      	mov	r1, r4
 8003f76:	028a      	lsls	r2, r1, #10
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7e:	2200      	movs	r2, #0
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	60fa      	str	r2, [r7, #12]
 8003f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f88:	f7fc f98a 	bl	80002a0 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4613      	mov	r3, r2
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003fa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fae:	e002      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3740      	adds	r7, #64	; 0x40
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	00f42400 	.word	0x00f42400
 8003fcc:	017d7840 	.word	0x017d7840

08003fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	2000008c 	.word	0x2000008c

08003fe8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003fee:	f7fd fd89 	bl	8001b04 <HAL_GetTick>
 8003ff2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ff4:	4b72      	ldr	r3, [pc, #456]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a71      	ldr	r2, [pc, #452]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004002:	f7fd fd7f 	bl	8001b04 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e0d0      	b.n	80041b6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004014:	4b6a      	ldr	r3, [pc, #424]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8004020:	4b67      	ldr	r3, [pc, #412]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a66      	ldr	r2, [pc, #408]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800402c:	f7fd fd6a 	bl	8001b04 <HAL_GetTick>
 8004030:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8004032:	4b63      	ldr	r3, [pc, #396]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004038:	e00a      	b.n	8004050 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403a:	f7fd fd63 	bl	8001b04 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	; 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e0b2      	b.n	80041b6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004050:	4b5b      	ldr	r3, [pc, #364]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1ee      	bne.n	800403a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800405c:	f7fd fd52 	bl	8001b04 <HAL_GetTick>
 8004060:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8004062:	4b57      	ldr	r3, [pc, #348]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a56      	ldr	r2, [pc, #344]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004068:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800406c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7fd fd48 	bl	8001b04 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e099      	b.n	80041b6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004082:	4b4f      	ldr	r3, [pc, #316]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800408e:	f7fd fd39 	bl	8001b04 <HAL_GetTick>
 8004092:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004094:	4b4a      	ldr	r3, [pc, #296]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a49      	ldr	r2, [pc, #292]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 800409a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800409e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fd fd2f 	bl	8001b04 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e080      	b.n	80041b6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80040b4:	4b42      	ldr	r3, [pc, #264]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040c0:	f7fd fd20 	bl	8001b04 <HAL_GetTick>
 80040c4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80040c6:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3d      	ldr	r2, [pc, #244]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 80040cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040d0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040d4:	f7fd fd16 	bl	8001b04 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e067      	b.n	80041b6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80040e6:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040f2:	f7fd fd07 	bl	8001b04 <HAL_GetTick>
 80040f6:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80040f8:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a30      	ldr	r2, [pc, #192]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 80040fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004102:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004106:	f7fd fcfd 	bl	8001b04 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e04e      	b.n	80041b6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8004118:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8004124:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004126:	4a27      	ldr	r2, [pc, #156]	; (80041c4 <HAL_RCC_DeInit+0x1dc>)
 8004128:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800412a:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <HAL_RCC_DeInit+0x1e0>)
 800412e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8004132:	4b23      	ldr	r3, [pc, #140]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004134:	4a24      	ldr	r2, [pc, #144]	; (80041c8 <HAL_RCC_DeInit+0x1e0>)
 8004136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800413a:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	4a20      	ldr	r2, [pc, #128]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004140:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004144:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8004146:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 800414c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004150:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	4a1a      	ldr	r2, [pc, #104]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800415c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4a17      	ldr	r2, [pc, #92]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004164:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8004168:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004174:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 800417c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004180:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004186:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004192:	4a0b      	ldr	r2, [pc, #44]	; (80041c0 <HAL_RCC_DeInit+0x1d8>)
 8004194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004198:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <HAL_RCC_DeInit+0x1e4>)
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <HAL_RCC_DeInit+0x1e8>)
 800419e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCC_DeInit+0x1ec>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd fc69 	bl	8001a7c <HAL_InitTick>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
  }
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	04003010 	.word	0x04003010
 80041c8:	24003000 	.word	0x24003000
 80041cc:	2000008c 	.word	0x2000008c
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	20000090 	.word	0x20000090

080041d8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 80041de:	4b8b      	ldr	r3, [pc, #556]	; (800440c <MX_LWIP_Init+0x234>)
 80041e0:	22a9      	movs	r2, #169	; 0xa9
 80041e2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 80041e4:	4b89      	ldr	r3, [pc, #548]	; (800440c <MX_LWIP_Init+0x234>)
 80041e6:	22fe      	movs	r2, #254	; 0xfe
 80041e8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 80041ea:	4b88      	ldr	r3, [pc, #544]	; (800440c <MX_LWIP_Init+0x234>)
 80041ec:	2208      	movs	r2, #8
 80041ee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 45;
 80041f0:	4b86      	ldr	r3, [pc, #536]	; (800440c <MX_LWIP_Init+0x234>)
 80041f2:	222d      	movs	r2, #45	; 0x2d
 80041f4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80041f6:	4b86      	ldr	r3, [pc, #536]	; (8004410 <MX_LWIP_Init+0x238>)
 80041f8:	22ff      	movs	r2, #255	; 0xff
 80041fa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80041fc:	4b84      	ldr	r3, [pc, #528]	; (8004410 <MX_LWIP_Init+0x238>)
 80041fe:	22ff      	movs	r2, #255	; 0xff
 8004200:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8004202:	4b83      	ldr	r3, [pc, #524]	; (8004410 <MX_LWIP_Init+0x238>)
 8004204:	2200      	movs	r2, #0
 8004206:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004208:	4b81      	ldr	r3, [pc, #516]	; (8004410 <MX_LWIP_Init+0x238>)
 800420a:	2200      	movs	r2, #0
 800420c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800420e:	4b81      	ldr	r3, [pc, #516]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004210:	22c0      	movs	r2, #192	; 0xc0
 8004212:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004214:	4b7f      	ldr	r3, [pc, #508]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004216:	22a8      	movs	r2, #168	; 0xa8
 8004218:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800421a:	4b7e      	ldr	r3, [pc, #504]	; (8004414 <MX_LWIP_Init+0x23c>)
 800421c:	2200      	movs	r2, #0
 800421e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004220:	4b7c      	ldr	r3, [pc, #496]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004222:	2201      	movs	r2, #1
 8004224:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004226:	f000 fc27 	bl	8004a78 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800422a:	4b78      	ldr	r3, [pc, #480]	; (800440c <MX_LWIP_Init+0x234>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	061a      	lsls	r2, r3, #24
 8004230:	4b76      	ldr	r3, [pc, #472]	; (800440c <MX_LWIP_Init+0x234>)
 8004232:	785b      	ldrb	r3, [r3, #1]
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	431a      	orrs	r2, r3
 8004238:	4b74      	ldr	r3, [pc, #464]	; (800440c <MX_LWIP_Init+0x234>)
 800423a:	789b      	ldrb	r3, [r3, #2]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	4313      	orrs	r3, r2
 8004240:	4a72      	ldr	r2, [pc, #456]	; (800440c <MX_LWIP_Init+0x234>)
 8004242:	78d2      	ldrb	r2, [r2, #3]
 8004244:	4313      	orrs	r3, r2
 8004246:	061a      	lsls	r2, r3, #24
 8004248:	4b70      	ldr	r3, [pc, #448]	; (800440c <MX_LWIP_Init+0x234>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	0619      	lsls	r1, r3, #24
 800424e:	4b6f      	ldr	r3, [pc, #444]	; (800440c <MX_LWIP_Init+0x234>)
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	041b      	lsls	r3, r3, #16
 8004254:	4319      	orrs	r1, r3
 8004256:	4b6d      	ldr	r3, [pc, #436]	; (800440c <MX_LWIP_Init+0x234>)
 8004258:	789b      	ldrb	r3, [r3, #2]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	430b      	orrs	r3, r1
 800425e:	496b      	ldr	r1, [pc, #428]	; (800440c <MX_LWIP_Init+0x234>)
 8004260:	78c9      	ldrb	r1, [r1, #3]
 8004262:	430b      	orrs	r3, r1
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800426a:	431a      	orrs	r2, r3
 800426c:	4b67      	ldr	r3, [pc, #412]	; (800440c <MX_LWIP_Init+0x234>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	0619      	lsls	r1, r3, #24
 8004272:	4b66      	ldr	r3, [pc, #408]	; (800440c <MX_LWIP_Init+0x234>)
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	4319      	orrs	r1, r3
 800427a:	4b64      	ldr	r3, [pc, #400]	; (800440c <MX_LWIP_Init+0x234>)
 800427c:	789b      	ldrb	r3, [r3, #2]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	430b      	orrs	r3, r1
 8004282:	4962      	ldr	r1, [pc, #392]	; (800440c <MX_LWIP_Init+0x234>)
 8004284:	78c9      	ldrb	r1, [r1, #3]
 8004286:	430b      	orrs	r3, r1
 8004288:	0a1b      	lsrs	r3, r3, #8
 800428a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800428e:	431a      	orrs	r2, r3
 8004290:	4b5e      	ldr	r3, [pc, #376]	; (800440c <MX_LWIP_Init+0x234>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	0619      	lsls	r1, r3, #24
 8004296:	4b5d      	ldr	r3, [pc, #372]	; (800440c <MX_LWIP_Init+0x234>)
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	4319      	orrs	r1, r3
 800429e:	4b5b      	ldr	r3, [pc, #364]	; (800440c <MX_LWIP_Init+0x234>)
 80042a0:	789b      	ldrb	r3, [r3, #2]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	430b      	orrs	r3, r1
 80042a6:	4959      	ldr	r1, [pc, #356]	; (800440c <MX_LWIP_Init+0x234>)
 80042a8:	78c9      	ldrb	r1, [r1, #3]
 80042aa:	430b      	orrs	r3, r1
 80042ac:	0e1b      	lsrs	r3, r3, #24
 80042ae:	4313      	orrs	r3, r2
 80042b0:	4a59      	ldr	r2, [pc, #356]	; (8004418 <MX_LWIP_Init+0x240>)
 80042b2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80042b4:	4b56      	ldr	r3, [pc, #344]	; (8004410 <MX_LWIP_Init+0x238>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	061a      	lsls	r2, r3, #24
 80042ba:	4b55      	ldr	r3, [pc, #340]	; (8004410 <MX_LWIP_Init+0x238>)
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	4b53      	ldr	r3, [pc, #332]	; (8004410 <MX_LWIP_Init+0x238>)
 80042c4:	789b      	ldrb	r3, [r3, #2]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4313      	orrs	r3, r2
 80042ca:	4a51      	ldr	r2, [pc, #324]	; (8004410 <MX_LWIP_Init+0x238>)
 80042cc:	78d2      	ldrb	r2, [r2, #3]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	061a      	lsls	r2, r3, #24
 80042d2:	4b4f      	ldr	r3, [pc, #316]	; (8004410 <MX_LWIP_Init+0x238>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	0619      	lsls	r1, r3, #24
 80042d8:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <MX_LWIP_Init+0x238>)
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	4319      	orrs	r1, r3
 80042e0:	4b4b      	ldr	r3, [pc, #300]	; (8004410 <MX_LWIP_Init+0x238>)
 80042e2:	789b      	ldrb	r3, [r3, #2]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	430b      	orrs	r3, r1
 80042e8:	4949      	ldr	r1, [pc, #292]	; (8004410 <MX_LWIP_Init+0x238>)
 80042ea:	78c9      	ldrb	r1, [r1, #3]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042f4:	431a      	orrs	r2, r3
 80042f6:	4b46      	ldr	r3, [pc, #280]	; (8004410 <MX_LWIP_Init+0x238>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	0619      	lsls	r1, r3, #24
 80042fc:	4b44      	ldr	r3, [pc, #272]	; (8004410 <MX_LWIP_Init+0x238>)
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	4319      	orrs	r1, r3
 8004304:	4b42      	ldr	r3, [pc, #264]	; (8004410 <MX_LWIP_Init+0x238>)
 8004306:	789b      	ldrb	r3, [r3, #2]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	430b      	orrs	r3, r1
 800430c:	4940      	ldr	r1, [pc, #256]	; (8004410 <MX_LWIP_Init+0x238>)
 800430e:	78c9      	ldrb	r1, [r1, #3]
 8004310:	430b      	orrs	r3, r1
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004318:	431a      	orrs	r2, r3
 800431a:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <MX_LWIP_Init+0x238>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	0619      	lsls	r1, r3, #24
 8004320:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <MX_LWIP_Init+0x238>)
 8004322:	785b      	ldrb	r3, [r3, #1]
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	4319      	orrs	r1, r3
 8004328:	4b39      	ldr	r3, [pc, #228]	; (8004410 <MX_LWIP_Init+0x238>)
 800432a:	789b      	ldrb	r3, [r3, #2]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	430b      	orrs	r3, r1
 8004330:	4937      	ldr	r1, [pc, #220]	; (8004410 <MX_LWIP_Init+0x238>)
 8004332:	78c9      	ldrb	r1, [r1, #3]
 8004334:	430b      	orrs	r3, r1
 8004336:	0e1b      	lsrs	r3, r3, #24
 8004338:	4313      	orrs	r3, r2
 800433a:	4a38      	ldr	r2, [pc, #224]	; (800441c <MX_LWIP_Init+0x244>)
 800433c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800433e:	4b35      	ldr	r3, [pc, #212]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	061a      	lsls	r2, r3, #24
 8004344:	4b33      	ldr	r3, [pc, #204]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	431a      	orrs	r2, r3
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <MX_LWIP_Init+0x23c>)
 800434e:	789b      	ldrb	r3, [r3, #2]
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	4313      	orrs	r3, r2
 8004354:	4a2f      	ldr	r2, [pc, #188]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004356:	78d2      	ldrb	r2, [r2, #3]
 8004358:	4313      	orrs	r3, r2
 800435a:	061a      	lsls	r2, r3, #24
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <MX_LWIP_Init+0x23c>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	0619      	lsls	r1, r3, #24
 8004362:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	4319      	orrs	r1, r3
 800436a:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <MX_LWIP_Init+0x23c>)
 800436c:	789b      	ldrb	r3, [r3, #2]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	430b      	orrs	r3, r1
 8004372:	4928      	ldr	r1, [pc, #160]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004374:	78c9      	ldrb	r1, [r1, #3]
 8004376:	430b      	orrs	r3, r1
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800437e:	431a      	orrs	r2, r3
 8004380:	4b24      	ldr	r3, [pc, #144]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	0619      	lsls	r1, r3, #24
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004388:	785b      	ldrb	r3, [r3, #1]
 800438a:	041b      	lsls	r3, r3, #16
 800438c:	4319      	orrs	r1, r3
 800438e:	4b21      	ldr	r3, [pc, #132]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004390:	789b      	ldrb	r3, [r3, #2]
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	430b      	orrs	r3, r1
 8004396:	491f      	ldr	r1, [pc, #124]	; (8004414 <MX_LWIP_Init+0x23c>)
 8004398:	78c9      	ldrb	r1, [r1, #3]
 800439a:	430b      	orrs	r3, r1
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80043a2:	431a      	orrs	r2, r3
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <MX_LWIP_Init+0x23c>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	0619      	lsls	r1, r3, #24
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <MX_LWIP_Init+0x23c>)
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	041b      	lsls	r3, r3, #16
 80043b0:	4319      	orrs	r1, r3
 80043b2:	4b18      	ldr	r3, [pc, #96]	; (8004414 <MX_LWIP_Init+0x23c>)
 80043b4:	789b      	ldrb	r3, [r3, #2]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	430b      	orrs	r3, r1
 80043ba:	4916      	ldr	r1, [pc, #88]	; (8004414 <MX_LWIP_Init+0x23c>)
 80043bc:	78c9      	ldrb	r1, [r1, #3]
 80043be:	430b      	orrs	r3, r1
 80043c0:	0e1b      	lsrs	r3, r3, #24
 80043c2:	4313      	orrs	r3, r2
 80043c4:	4a16      	ldr	r2, [pc, #88]	; (8004420 <MX_LWIP_Init+0x248>)
 80043c6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80043c8:	4b16      	ldr	r3, [pc, #88]	; (8004424 <MX_LWIP_Init+0x24c>)
 80043ca:	9302      	str	r3, [sp, #8]
 80043cc:	4b16      	ldr	r3, [pc, #88]	; (8004428 <MX_LWIP_Init+0x250>)
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	2300      	movs	r3, #0
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <MX_LWIP_Init+0x248>)
 80043d6:	4a11      	ldr	r2, [pc, #68]	; (800441c <MX_LWIP_Init+0x244>)
 80043d8:	490f      	ldr	r1, [pc, #60]	; (8004418 <MX_LWIP_Init+0x240>)
 80043da:	4814      	ldr	r0, [pc, #80]	; (800442c <MX_LWIP_Init+0x254>)
 80043dc:	f000 ff50 	bl	8005280 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80043e0:	4812      	ldr	r0, [pc, #72]	; (800442c <MX_LWIP_Init+0x254>)
 80043e2:	f001 f82d 	bl	8005440 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <MX_LWIP_Init+0x254>)
 80043e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80043ec:	089b      	lsrs	r3, r3, #2
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80043f8:	480c      	ldr	r0, [pc, #48]	; (800442c <MX_LWIP_Init+0x254>)
 80043fa:	f001 f831 	bl	8005460 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80043fe:	e002      	b.n	8004406 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8004400:	480a      	ldr	r0, [pc, #40]	; (800442c <MX_LWIP_Init+0x254>)
 8004402:	f001 f871 	bl	80054e8 <netif_set_down>
}
 8004406:	bf00      	nop
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	200006c0 	.word	0x200006c0
 8004410:	200006c4 	.word	0x200006c4
 8004414:	200006c8 	.word	0x200006c8
 8004418:	200006b4 	.word	0x200006b4
 800441c:	200006b8 	.word	0x200006b8
 8004420:	200006bc 	.word	0x200006bc
 8004424:	0800dcf9 	.word	0x0800dcf9
 8004428:	080049c1 	.word	0x080049c1
 800442c:	20000684 	.word	0x20000684

08004430 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004434:	4803      	ldr	r0, [pc, #12]	; (8004444 <MX_LWIP_Process+0x14>)
 8004436:	f000 faa3 	bl	8004980 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800443a:	f007 f97f 	bl	800b73c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000684 	.word	0x20000684

08004448 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08e      	sub	sp, #56	; 0x38
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a46      	ldr	r2, [pc, #280]	; (8004580 <HAL_ETH_MspInit+0x138>)
 8004466:	4293      	cmp	r3, r2
 8004468:	f040 8085 	bne.w	8004576 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800446c:	2300      	movs	r3, #0
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	4b44      	ldr	r3, [pc, #272]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	4a43      	ldr	r2, [pc, #268]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 8004476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800447a:	6313      	str	r3, [r2, #48]	; 0x30
 800447c:	4b41      	ldr	r3, [pc, #260]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004484:	623b      	str	r3, [r7, #32]
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
 800448c:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	4a3c      	ldr	r2, [pc, #240]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 8004492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004496:	6313      	str	r3, [r2, #48]	; 0x30
 8004498:	4b3a      	ldr	r3, [pc, #232]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2300      	movs	r3, #0
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	4b36      	ldr	r3, [pc, #216]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	4a35      	ldr	r2, [pc, #212]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 80044ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044b2:	6313      	str	r3, [r2, #48]	; 0x30
 80044b4:	4b33      	ldr	r3, [pc, #204]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4a2e      	ldr	r2, [pc, #184]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 80044ca:	f043 0304 	orr.w	r3, r3, #4
 80044ce:	6313      	str	r3, [r2, #48]	; 0x30
 80044d0:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	4b28      	ldr	r3, [pc, #160]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	4a27      	ldr	r2, [pc, #156]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6313      	str	r3, [r2, #48]	; 0x30
 80044ec:	4b25      	ldr	r3, [pc, #148]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	4b21      	ldr	r3, [pc, #132]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	4a20      	ldr	r2, [pc, #128]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 8004502:	f043 0302 	orr.w	r3, r3, #2
 8004506:	6313      	str	r3, [r2, #48]	; 0x30
 8004508:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <HAL_ETH_MspInit+0x13c>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004514:	2332      	movs	r3, #50	; 0x32
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004518:	2302      	movs	r3, #2
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004520:	2303      	movs	r3, #3
 8004522:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004524:	230b      	movs	r3, #11
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800452c:	4619      	mov	r1, r3
 800452e:	4816      	ldr	r0, [pc, #88]	; (8004588 <HAL_ETH_MspInit+0x140>)
 8004530:	f7fe ff0a 	bl	8003348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004534:	2386      	movs	r3, #134	; 0x86
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004538:	2302      	movs	r3, #2
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453c:	2300      	movs	r3, #0
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004540:	2303      	movs	r3, #3
 8004542:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004544:	230b      	movs	r3, #11
 8004546:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800454c:	4619      	mov	r1, r3
 800454e:	480f      	ldr	r0, [pc, #60]	; (800458c <HAL_ETH_MspInit+0x144>)
 8004550:	f7fe fefa 	bl	8003348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004554:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455a:	2302      	movs	r3, #2
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004562:	2303      	movs	r3, #3
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004566:	230b      	movs	r3, #11
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800456a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800456e:	4619      	mov	r1, r3
 8004570:	4807      	ldr	r0, [pc, #28]	; (8004590 <HAL_ETH_MspInit+0x148>)
 8004572:	f7fe fee9 	bl	8003348 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004576:	bf00      	nop
 8004578:	3738      	adds	r7, #56	; 0x38
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40028000 	.word	0x40028000
 8004584:	40023800 	.word	0x40023800
 8004588:	40020800 	.word	0x40020800
 800458c:	40020000 	.word	0x40020000
 8004590:	40020400 	.word	0x40020400

08004594 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80045a0:	4b49      	ldr	r3, [pc, #292]	; (80046c8 <low_level_init+0x134>)
 80045a2:	4a4a      	ldr	r2, [pc, #296]	; (80046cc <low_level_init+0x138>)
 80045a4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80045a6:	4b48      	ldr	r3, [pc, #288]	; (80046c8 <low_level_init+0x134>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80045ac:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <low_level_init+0x134>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80045b2:	2300      	movs	r3, #0
 80045b4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80045b6:	2380      	movs	r3, #128	; 0x80
 80045b8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80045ba:	23e1      	movs	r3, #225	; 0xe1
 80045bc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80045be:	2300      	movs	r3, #0
 80045c0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80045c2:	2300      	movs	r3, #0
 80045c4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80045c6:	2300      	movs	r3, #0
 80045c8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80045ca:	4a3f      	ldr	r2, [pc, #252]	; (80046c8 <low_level_init+0x134>)
 80045cc:	f107 0308 	add.w	r3, r7, #8
 80045d0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80045d2:	4b3d      	ldr	r3, [pc, #244]	; (80046c8 <low_level_init+0x134>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80045d8:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <low_level_init+0x134>)
 80045da:	2200      	movs	r2, #0
 80045dc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80045de:	4b3a      	ldr	r3, [pc, #232]	; (80046c8 <low_level_init+0x134>)
 80045e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045e4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80045e6:	4838      	ldr	r0, [pc, #224]	; (80046c8 <low_level_init+0x134>)
 80045e8:	f7fd fba2 	bl	8001d30 <HAL_ETH_Init>
 80045ec:	4603      	mov	r3, r0
 80045ee:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d108      	bne.n	8004608 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80045fc:	f043 0304 	orr.w	r3, r3, #4
 8004600:	b2da      	uxtb	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004608:	2304      	movs	r3, #4
 800460a:	4a31      	ldr	r2, [pc, #196]	; (80046d0 <low_level_init+0x13c>)
 800460c:	4931      	ldr	r1, [pc, #196]	; (80046d4 <low_level_init+0x140>)
 800460e:	482e      	ldr	r0, [pc, #184]	; (80046c8 <low_level_init+0x134>)
 8004610:	f7fd fd28 	bl	8002064 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004614:	2304      	movs	r3, #4
 8004616:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <low_level_init+0x144>)
 8004618:	4930      	ldr	r1, [pc, #192]	; (80046dc <low_level_init+0x148>)
 800461a:	482b      	ldr	r0, [pc, #172]	; (80046c8 <low_level_init+0x134>)
 800461c:	f7fd fd8a 	bl	8002134 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2206      	movs	r2, #6
 8004624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004628:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <low_level_init+0x134>)
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <low_level_init+0x134>)
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	785a      	ldrb	r2, [r3, #1]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004640:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <low_level_init+0x134>)
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	789a      	ldrb	r2, [r3, #2]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <low_level_init+0x134>)
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	78da      	ldrb	r2, [r3, #3]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004658:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <low_level_init+0x134>)
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	791a      	ldrb	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004664:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <low_level_init+0x134>)
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	795a      	ldrb	r2, [r3, #5]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004676:	845a      	strh	r2, [r3, #34]	; 0x22

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800467e:	f043 030a 	orr.w	r3, r3, #10
 8004682:	b2da      	uxtb	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800468a:	480f      	ldr	r0, [pc, #60]	; (80046c8 <low_level_init+0x134>)
 800468c:	f7fe f87c 	bl	8002788 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004690:	f107 0310 	add.w	r3, r7, #16
 8004694:	461a      	mov	r2, r3
 8004696:	211d      	movs	r1, #29
 8004698:	480b      	ldr	r0, [pc, #44]	; (80046c8 <low_level_init+0x134>)
 800469a:	f7fd ffa7 	bl	80025ec <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f043 0310 	orr.w	r3, r3, #16
 80046a4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	461a      	mov	r2, r3
 80046aa:	211d      	movs	r1, #29
 80046ac:	4806      	ldr	r0, [pc, #24]	; (80046c8 <low_level_init+0x134>)
 80046ae:	f7fe f805 	bl	80026bc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80046b2:	f107 0310 	add.w	r3, r7, #16
 80046b6:	461a      	mov	r2, r3
 80046b8:	211d      	movs	r1, #29
 80046ba:	4803      	ldr	r0, [pc, #12]	; (80046c8 <low_level_init+0x134>)
 80046bc:	f7fd ff96 	bl	80025ec <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80046c0:	bf00      	nop
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	2000376c 	.word	0x2000376c
 80046cc:	40028000 	.word	0x40028000
 80046d0:	20001f9c 	.word	0x20001f9c
 80046d4:	2000074c 	.word	0x2000074c
 80046d8:	200007cc 	.word	0x200007cc
 80046dc:	200006cc 	.word	0x200006cc

080046e0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80046ea:	4b4b      	ldr	r3, [pc, #300]	; (8004818 <low_level_output+0x138>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004702:	4b45      	ldr	r3, [pc, #276]	; (8004818 <low_level_output+0x138>)
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	623b      	str	r3, [r7, #32]
 8004710:	e05a      	b.n	80047c8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	da03      	bge.n	8004722 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800471a:	23f8      	movs	r3, #248	; 0xf8
 800471c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004720:	e05c      	b.n	80047dc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	895b      	ldrh	r3, [r3, #10]
 8004726:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800472c:	e02f      	b.n	800478e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	18d0      	adds	r0, r2, r3
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	18d1      	adds	r1, r2, r3
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004742:	3304      	adds	r3, #4
 8004744:	461a      	mov	r2, r3
 8004746:	f009 fbf9 	bl	800df3c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	da03      	bge.n	8004760 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004758:	23f8      	movs	r3, #248	; 0xf8
 800475a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800475e:	e03d      	b.n	80047dc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004770:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800477c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004788:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004798:	4293      	cmp	r3, r2
 800479a:	d8c8      	bhi.n	800472e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	18d0      	adds	r0, r2, r3
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4413      	add	r3, r2
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4619      	mov	r1, r3
 80047ae:	f009 fbc5 	bl	800df3c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	623b      	str	r3, [r7, #32]
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1a1      	bne.n	8004712 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80047ce:	6979      	ldr	r1, [r7, #20]
 80047d0:	4811      	ldr	r0, [pc, #68]	; (8004818 <low_level_output+0x138>)
 80047d2:	f7fd fd1b 	bl	800220c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80047dc:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <low_level_output+0x138>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00d      	beq.n	800480a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <low_level_output+0x138>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f6:	461a      	mov	r2, r3
 80047f8:	2320      	movs	r3, #32
 80047fa:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <low_level_output+0x138>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004804:	461a      	mov	r2, r3
 8004806:	2300      	movs	r3, #0
 8004808:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800480a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800480e:	4618      	mov	r0, r3
 8004810:	3728      	adds	r7, #40	; 0x28
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	2000376c 	.word	0x2000376c

0800481c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004824:	2300      	movs	r3, #0
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004828:	2300      	movs	r3, #0
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004840:	484e      	ldr	r0, [pc, #312]	; (800497c <low_level_input+0x160>)
 8004842:	f7fd fdcd 	bl	80023e0 <HAL_ETH_GetReceivedFrame>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <low_level_input+0x34>
    return NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	e090      	b.n	8004972 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004850:	4b4a      	ldr	r3, [pc, #296]	; (800497c <low_level_input+0x160>)
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004856:	4b49      	ldr	r3, [pc, #292]	; (800497c <low_level_input+0x160>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800485c:	89fb      	ldrh	r3, [r7, #14]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004862:	89fb      	ldrh	r3, [r7, #14]
 8004864:	2203      	movs	r2, #3
 8004866:	4619      	mov	r1, r3
 8004868:	2004      	movs	r0, #4
 800486a:	f000 fe8f 	bl	800558c <pbuf_alloc>
 800486e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d04b      	beq.n	800490e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004876:	4b41      	ldr	r3, [pc, #260]	; (800497c <low_level_input+0x160>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
 8004884:	e040      	b.n	8004908 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	895b      	ldrh	r3, [r3, #10]
 800488a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004890:	e021      	b.n	80048d6 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	18d0      	adds	r0, r2, r3
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	18d1      	adds	r1, r2, r3
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80048a6:	3304      	adds	r3, #4
 80048a8:	461a      	mov	r2, r3
 80048aa:	f009 fb47 	bl	800df3c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	4413      	add	r3, r2
 80048c0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80048c4:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80048d0:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	4413      	add	r3, r2
 80048dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d8d6      	bhi.n	8004892 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	18d0      	adds	r0, r2, r3
 80048ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4619      	mov	r1, r3
 80048f6:	f009 fb21 	bl	800df3c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4413      	add	r3, r2
 8004900:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1bb      	bne.n	8004886 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800490e:	4b1b      	ldr	r3, [pc, #108]	; (800497c <low_level_input+0x160>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004914:	2300      	movs	r3, #0
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	e00b      	b.n	8004932 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3301      	adds	r3, #1
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <low_level_input+0x160>)
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	429a      	cmp	r2, r3
 800493a:	d3ee      	bcc.n	800491a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <low_level_input+0x160>)
 800493e:	2200      	movs	r2, #0
 8004940:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004942:	4b0e      	ldr	r3, [pc, #56]	; (800497c <low_level_input+0x160>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <low_level_input+0x160>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495c:	461a      	mov	r2, r3
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <low_level_input+0x160>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496a:	461a      	mov	r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	6093      	str	r3, [r2, #8]
  }
  return p;
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004972:	4618      	mov	r0, r3
 8004974:	3730      	adds	r7, #48	; 0x30
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	2000376c 	.word	0x2000376c

08004980 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ff47 	bl	800481c <low_level_input>
 800498e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d010      	beq.n	80049b8 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	4798      	blx	r3
 80049a0:	4603      	mov	r3, r0
 80049a2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80049a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d006      	beq.n	80049ba <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f001 f965 	bl	8005c7c <pbuf_free>
    p = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e000      	b.n	80049ba <ethernetif_input+0x3a>
  if (p == NULL) return;
 80049b8:	bf00      	nop
  }
}
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <ethernetif_init+0x1c>
 80049ce:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <ethernetif_init+0x48>)
 80049d0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80049d4:	490d      	ldr	r1, [pc, #52]	; (8004a0c <ethernetif_init+0x4c>)
 80049d6:	480e      	ldr	r0, [pc, #56]	; (8004a10 <ethernetif_init+0x50>)
 80049d8:	f009 fba6 	bl	800e128 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2273      	movs	r2, #115	; 0x73
 80049e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2274      	movs	r2, #116	; 0x74
 80049e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <ethernetif_init+0x54>)
 80049f0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <ethernetif_init+0x58>)
 80049f6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fdcb 	bl	8004594 <low_level_init>

  return ERR_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	0800f470 	.word	0x0800f470
 8004a0c:	0800f48c 	.word	0x0800f48c
 8004a10:	0800f49c 	.word	0x0800f49c
 8004a14:	0800c2d5 	.word	0x0800c2d5
 8004a18:	080046e1 	.word	0x080046e1

08004a1c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004a20:	f7fd f870 	bl	8001b04 <HAL_GetTick>
 8004a24:	4603      	mov	r3, r0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	4603      	mov	r3, r0
 8004a32:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	ba5b      	rev16	r3, r3
 8004a38:	b29b      	uxth	r3, r3
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	061a      	lsls	r2, r3, #24
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	0e1b      	lsrs	r3, r3, #24
 8004a6a:	4313      	orrs	r3, r2
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004a82:	f000 f8a7 	bl	8004bd4 <mem_init>
  memp_init();
 8004a86:	f000 fb39 	bl	80050fc <memp_init>
  pbuf_init();
  netif_init();
 8004a8a:	f000 fbf1 	bl	8005270 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004a8e:	f006 fea7 	bl	800b7e0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004a92:	f001 fb6d 	bl	8006170 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8004a96:	f006 fd85 	bl	800b5a4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004aac:	4b40      	ldr	r3, [pc, #256]	; (8004bb0 <plug_holes+0x10c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d206      	bcs.n	8004ac4 <plug_holes+0x20>
 8004ab6:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <plug_holes+0x110>)
 8004ab8:	f240 125d 	movw	r2, #349	; 0x15d
 8004abc:	493e      	ldr	r1, [pc, #248]	; (8004bb8 <plug_holes+0x114>)
 8004abe:	483f      	ldr	r0, [pc, #252]	; (8004bbc <plug_holes+0x118>)
 8004ac0:	f009 fb32 	bl	800e128 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004ac4:	4b3e      	ldr	r3, [pc, #248]	; (8004bc0 <plug_holes+0x11c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d306      	bcc.n	8004adc <plug_holes+0x38>
 8004ace:	4b39      	ldr	r3, [pc, #228]	; (8004bb4 <plug_holes+0x110>)
 8004ad0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004ad4:	493b      	ldr	r1, [pc, #236]	; (8004bc4 <plug_holes+0x120>)
 8004ad6:	4839      	ldr	r0, [pc, #228]	; (8004bbc <plug_holes+0x118>)
 8004ad8:	f009 fb26 	bl	800e128 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	791b      	ldrb	r3, [r3, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d006      	beq.n	8004af2 <plug_holes+0x4e>
 8004ae4:	4b33      	ldr	r3, [pc, #204]	; (8004bb4 <plug_holes+0x110>)
 8004ae6:	f240 125f 	movw	r2, #351	; 0x15f
 8004aea:	4937      	ldr	r1, [pc, #220]	; (8004bc8 <plug_holes+0x124>)
 8004aec:	4833      	ldr	r0, [pc, #204]	; (8004bbc <plug_holes+0x118>)
 8004aee:	f009 fb1b 	bl	800e128 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004afa:	d906      	bls.n	8004b0a <plug_holes+0x66>
 8004afc:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <plug_holes+0x110>)
 8004afe:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8004b02:	4932      	ldr	r1, [pc, #200]	; (8004bcc <plug_holes+0x128>)
 8004b04:	482d      	ldr	r0, [pc, #180]	; (8004bbc <plug_holes+0x118>)
 8004b06:	f009 fb0f 	bl	800e128 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8004b0a:	4b29      	ldr	r3, [pc, #164]	; (8004bb0 <plug_holes+0x10c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	8812      	ldrh	r2, [r2, #0]
 8004b12:	4413      	add	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d01f      	beq.n	8004b5e <plug_holes+0xba>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	791b      	ldrb	r3, [r3, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11b      	bne.n	8004b5e <plug_holes+0xba>
 8004b26:	4b26      	ldr	r3, [pc, #152]	; (8004bc0 <plug_holes+0x11c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d016      	beq.n	8004b5e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <plug_holes+0x12c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d102      	bne.n	8004b40 <plug_holes+0x9c>
      lfree = mem;
 8004b3a:	4a25      	ldr	r2, [pc, #148]	; (8004bd0 <plug_holes+0x12c>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	881a      	ldrh	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <plug_holes+0x10c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	1ad1      	subs	r1, r2, r3
 8004b50:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <plug_holes+0x10c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	8812      	ldrh	r2, [r2, #0]
 8004b58:	4413      	add	r3, r2
 8004b5a:	b28a      	uxth	r2, r1
 8004b5c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8004b5e:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <plug_holes+0x10c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	8852      	ldrh	r2, [r2, #2]
 8004b66:	4413      	add	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d01a      	beq.n	8004ba8 <plug_holes+0x104>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	791b      	ldrb	r3, [r3, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d116      	bne.n	8004ba8 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004b7a:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <plug_holes+0x12c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d102      	bne.n	8004b8a <plug_holes+0xe6>
      lfree = pmem;
 8004b84:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <plug_holes+0x12c>)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	881a      	ldrh	r2, [r3, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8004b92:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <plug_holes+0x10c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	1ad1      	subs	r1, r2, r3
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <plug_holes+0x10c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	b28a      	uxth	r2, r1
 8004ba6:	805a      	strh	r2, [r3, #2]
  }
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20003e20 	.word	0x20003e20
 8004bb4:	0800f4c4 	.word	0x0800f4c4
 8004bb8:	0800f4f4 	.word	0x0800f4f4
 8004bbc:	0800f50c 	.word	0x0800f50c
 8004bc0:	20003e24 	.word	0x20003e24
 8004bc4:	0800f534 	.word	0x0800f534
 8004bc8:	0800f550 	.word	0x0800f550
 8004bcc:	0800f56c 	.word	0x0800f56c
 8004bd0:	20003e28 	.word	0x20003e28

08004bd4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004bda:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <mem_init+0x6c>)
 8004bdc:	3303      	adds	r3, #3
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	461a      	mov	r2, r3
 8004be4:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <mem_init+0x70>)
 8004be6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004be8:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <mem_init+0x70>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004bf4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004c02:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <mem_init+0x70>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8004c0a:	4a0f      	ldr	r2, [pc, #60]	; (8004c48 <mem_init+0x74>)
 8004c0c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <mem_init+0x74>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2201      	movs	r2, #1
 8004c14:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <mem_init+0x74>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c1e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <mem_init+0x74>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c28:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <mem_init+0x70>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <mem_init+0x78>)
 8004c30:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	200037cc 	.word	0x200037cc
 8004c44:	20003e20 	.word	0x20003e20
 8004c48:	20003e24 	.word	0x20003e24
 8004c4c:	20003e28 	.word	0x20003e28

08004c50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d043      	beq.n	8004ce6 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d006      	beq.n	8004c76 <mem_free+0x26>
 8004c68:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <mem_free+0xa4>)
 8004c6a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8004c6e:	4922      	ldr	r1, [pc, #136]	; (8004cf8 <mem_free+0xa8>)
 8004c70:	4822      	ldr	r0, [pc, #136]	; (8004cfc <mem_free+0xac>)
 8004c72:	f009 fa59 	bl	800e128 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004c76:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <mem_free+0xb0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d304      	bcc.n	8004c8a <mem_free+0x3a>
 8004c80:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <mem_free+0xb4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d306      	bcc.n	8004c98 <mem_free+0x48>
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <mem_free+0xa4>)
 8004c8c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8004c90:	491d      	ldr	r1, [pc, #116]	; (8004d08 <mem_free+0xb8>)
 8004c92:	481a      	ldr	r0, [pc, #104]	; (8004cfc <mem_free+0xac>)
 8004c94:	f009 fa48 	bl	800e128 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004c98:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <mem_free+0xb0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d323      	bcc.n	8004cea <mem_free+0x9a>
 8004ca2:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <mem_free+0xb4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d21e      	bcs.n	8004cea <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3b08      	subs	r3, #8
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	791b      	ldrb	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <mem_free+0x78>
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <mem_free+0xa4>)
 8004cbc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004cc0:	4912      	ldr	r1, [pc, #72]	; (8004d0c <mem_free+0xbc>)
 8004cc2:	480e      	ldr	r0, [pc, #56]	; (8004cfc <mem_free+0xac>)
 8004cc4:	f009 fa30 	bl	800e128 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <mem_free+0xc0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d202      	bcs.n	8004cde <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <mem_free+0xc0>)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff fee0 	bl	8004aa4 <plug_holes>
 8004ce4:	e002      	b.n	8004cec <mem_free+0x9c>
    return;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <mem_free+0x9c>
    return;
 8004cea:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	0800f4c4 	.word	0x0800f4c4
 8004cf8:	0800f598 	.word	0x0800f598
 8004cfc:	0800f50c 	.word	0x0800f50c
 8004d00:	20003e20 	.word	0x20003e20
 8004d04:	20003e24 	.word	0x20003e24
 8004d08:	0800f5bc 	.word	0x0800f5bc
 8004d0c:	0800f5d4 	.word	0x0800f5d4
 8004d10:	20003e28 	.word	0x20003e28

08004d14 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	3303      	adds	r3, #3
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f023 0303 	bic.w	r3, r3, #3
 8004d2a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	2b0b      	cmp	r3, #11
 8004d30:	d801      	bhi.n	8004d36 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004d32:	230c      	movs	r3, #12
 8004d34:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004d36:	887b      	ldrh	r3, [r7, #2]
 8004d38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d3c:	d901      	bls.n	8004d42 <mem_trim+0x2e>
    return NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e0b1      	b.n	8004ea6 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004d42:	4b5b      	ldr	r3, [pc, #364]	; (8004eb0 <mem_trim+0x19c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d304      	bcc.n	8004d56 <mem_trim+0x42>
 8004d4c:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <mem_trim+0x1a0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d306      	bcc.n	8004d64 <mem_trim+0x50>
 8004d56:	4b58      	ldr	r3, [pc, #352]	; (8004eb8 <mem_trim+0x1a4>)
 8004d58:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004d5c:	4957      	ldr	r1, [pc, #348]	; (8004ebc <mem_trim+0x1a8>)
 8004d5e:	4858      	ldr	r0, [pc, #352]	; (8004ec0 <mem_trim+0x1ac>)
 8004d60:	f009 f9e2 	bl	800e128 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004d64:	4b52      	ldr	r3, [pc, #328]	; (8004eb0 <mem_trim+0x19c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d304      	bcc.n	8004d78 <mem_trim+0x64>
 8004d6e:	4b51      	ldr	r3, [pc, #324]	; (8004eb4 <mem_trim+0x1a0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d301      	bcc.n	8004d7c <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	e094      	b.n	8004ea6 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3b08      	subs	r3, #8
 8004d80:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004d82:	4b4b      	ldr	r3, [pc, #300]	; (8004eb0 <mem_trim+0x19c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	8a7b      	ldrh	r3, [r7, #18]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b08      	subs	r3, #8
 8004d98:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004d9a:	887a      	ldrh	r2, [r7, #2]
 8004d9c:	8a3b      	ldrh	r3, [r7, #16]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d906      	bls.n	8004db0 <mem_trim+0x9c>
 8004da2:	4b45      	ldr	r3, [pc, #276]	; (8004eb8 <mem_trim+0x1a4>)
 8004da4:	f240 2206 	movw	r2, #518	; 0x206
 8004da8:	4946      	ldr	r1, [pc, #280]	; (8004ec4 <mem_trim+0x1b0>)
 8004daa:	4845      	ldr	r0, [pc, #276]	; (8004ec0 <mem_trim+0x1ac>)
 8004dac:	f009 f9bc 	bl	800e128 <iprintf>
  if (newsize > size) {
 8004db0:	887a      	ldrh	r2, [r7, #2]
 8004db2:	8a3b      	ldrh	r3, [r7, #16]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d901      	bls.n	8004dbc <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e074      	b.n	8004ea6 <mem_trim+0x192>
  }
  if (newsize == size) {
 8004dbc:	887a      	ldrh	r2, [r7, #2]
 8004dbe:	8a3b      	ldrh	r3, [r7, #16]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d101      	bne.n	8004dc8 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	e06e      	b.n	8004ea6 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004dc8:	4b39      	ldr	r3, [pc, #228]	; (8004eb0 <mem_trim+0x19c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	8812      	ldrh	r2, [r2, #0]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	791b      	ldrb	r3, [r3, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d131      	bne.n	8004e40 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004de2:	8a7a      	ldrh	r2, [r7, #18]
 8004de4:	887b      	ldrh	r3, [r7, #2]
 8004de6:	4413      	add	r3, r2
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3308      	adds	r3, #8
 8004dec:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8004dee:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <mem_trim+0x1b4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d105      	bne.n	8004e04 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004df8:	4b2d      	ldr	r3, [pc, #180]	; (8004eb0 <mem_trim+0x19c>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	897b      	ldrh	r3, [r7, #10]
 8004dfe:	4413      	add	r3, r2
 8004e00:	4a31      	ldr	r2, [pc, #196]	; (8004ec8 <mem_trim+0x1b4>)
 8004e02:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004e04:	4b2a      	ldr	r3, [pc, #168]	; (8004eb0 <mem_trim+0x19c>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	897b      	ldrh	r3, [r7, #10]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	893a      	ldrh	r2, [r7, #8]
 8004e18:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8a7a      	ldrh	r2, [r7, #18]
 8004e1e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	897a      	ldrh	r2, [r7, #10]
 8004e24:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e2e:	d039      	beq.n	8004ea4 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004e30:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <mem_trim+0x19c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	8812      	ldrh	r2, [r2, #0]
 8004e38:	4413      	add	r3, r2
 8004e3a:	897a      	ldrh	r2, [r7, #10]
 8004e3c:	805a      	strh	r2, [r3, #2]
 8004e3e:	e031      	b.n	8004ea4 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004e40:	887b      	ldrh	r3, [r7, #2]
 8004e42:	f103 0214 	add.w	r2, r3, #20
 8004e46:	8a3b      	ldrh	r3, [r7, #16]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d82b      	bhi.n	8004ea4 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004e4c:	8a7a      	ldrh	r2, [r7, #18]
 8004e4e:	887b      	ldrh	r3, [r7, #2]
 8004e50:	4413      	add	r3, r2
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3308      	adds	r3, #8
 8004e56:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004e58:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <mem_trim+0x19c>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	897b      	ldrh	r3, [r7, #10]
 8004e5e:	4413      	add	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8004e62:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <mem_trim+0x1b4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d202      	bcs.n	8004e72 <mem_trim+0x15e>
      lfree = mem2;
 8004e6c:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <mem_trim+0x1b4>)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	881a      	ldrh	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8a7a      	ldrh	r2, [r7, #18]
 8004e84:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	897a      	ldrh	r2, [r7, #10]
 8004e8a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e94:	d006      	beq.n	8004ea4 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <mem_trim+0x19c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	8812      	ldrh	r2, [r2, #0]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	897a      	ldrh	r2, [r7, #10]
 8004ea2:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004ea4:	687b      	ldr	r3, [r7, #4]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20003e20 	.word	0x20003e20
 8004eb4:	20003e24 	.word	0x20003e24
 8004eb8:	0800f4c4 	.word	0x0800f4c4
 8004ebc:	0800f5e8 	.word	0x0800f5e8
 8004ec0:	0800f50c 	.word	0x0800f50c
 8004ec4:	0800f600 	.word	0x0800f600
 8004ec8:	20003e28 	.word	0x20003e28

08004ecc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <mem_malloc+0x14>
    return NULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e0c7      	b.n	8005070 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	3303      	adds	r3, #3
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	2b0b      	cmp	r3, #11
 8004ef0:	d801      	bhi.n	8004ef6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004efc:	d901      	bls.n	8004f02 <mem_malloc+0x36>
    return NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e0b6      	b.n	8005070 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004f02:	4b5d      	ldr	r3, [pc, #372]	; (8005078 <mem_malloc+0x1ac>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b5d      	ldr	r3, [pc, #372]	; (800507c <mem_malloc+0x1b0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	83fb      	strh	r3, [r7, #30]
 8004f0e:	e0a7      	b.n	8005060 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004f10:	4b5a      	ldr	r3, [pc, #360]	; (800507c <mem_malloc+0x1b0>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	8bfb      	ldrh	r3, [r7, #30]
 8004f16:	4413      	add	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	791b      	ldrb	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 8098 	bne.w	8005054 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	8bfb      	ldrh	r3, [r7, #30]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f1a3 0208 	sub.w	r2, r3, #8
 8004f32:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004f34:	429a      	cmp	r2, r3
 8004f36:	f0c0 808d 	bcc.w	8005054 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	8bfb      	ldrh	r3, [r7, #30]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f1a3 0208 	sub.w	r2, r3, #8
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	3314      	adds	r3, #20
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d327      	bcc.n	8004fa0 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004f50:	8bfa      	ldrh	r2, [r7, #30]
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	4413      	add	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3308      	adds	r3, #8
 8004f5a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004f5c:	4b47      	ldr	r3, [pc, #284]	; (800507c <mem_malloc+0x1b0>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	8a7b      	ldrh	r3, [r7, #18]
 8004f62:	4413      	add	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8bfa      	ldrh	r2, [r7, #30]
 8004f78:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	8a7a      	ldrh	r2, [r7, #18]
 8004f7e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2201      	movs	r2, #1
 8004f84:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f8e:	d00a      	beq.n	8004fa6 <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004f90:	4b3a      	ldr	r3, [pc, #232]	; (800507c <mem_malloc+0x1b0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	8812      	ldrh	r2, [r2, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	8a7a      	ldrh	r2, [r7, #18]
 8004f9c:	805a      	strh	r2, [r3, #2]
 8004f9e:	e002      	b.n	8004fa6 <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004fa6:	4b34      	ldr	r3, [pc, #208]	; (8005078 <mem_malloc+0x1ac>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d127      	bne.n	8005000 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8004fb0:	4b31      	ldr	r3, [pc, #196]	; (8005078 <mem_malloc+0x1ac>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004fb6:	e005      	b.n	8004fc4 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8004fb8:	4b30      	ldr	r3, [pc, #192]	; (800507c <mem_malloc+0x1b0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	8812      	ldrh	r2, [r2, #0]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	791b      	ldrb	r3, [r3, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d004      	beq.n	8004fd6 <mem_malloc+0x10a>
 8004fcc:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <mem_malloc+0x1b4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d1f0      	bne.n	8004fb8 <mem_malloc+0xec>
          }
          lfree = cur;
 8004fd6:	4a28      	ldr	r2, [pc, #160]	; (8005078 <mem_malloc+0x1ac>)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004fdc:	4b26      	ldr	r3, [pc, #152]	; (8005078 <mem_malloc+0x1ac>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4b27      	ldr	r3, [pc, #156]	; (8005080 <mem_malloc+0x1b4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d00b      	beq.n	8005000 <mem_malloc+0x134>
 8004fe8:	4b23      	ldr	r3, [pc, #140]	; (8005078 <mem_malloc+0x1ac>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	791b      	ldrb	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d006      	beq.n	8005000 <mem_malloc+0x134>
 8004ff2:	4b24      	ldr	r3, [pc, #144]	; (8005084 <mem_malloc+0x1b8>)
 8004ff4:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004ff8:	4923      	ldr	r1, [pc, #140]	; (8005088 <mem_malloc+0x1bc>)
 8004ffa:	4824      	ldr	r0, [pc, #144]	; (800508c <mem_malloc+0x1c0>)
 8004ffc:	f009 f894 	bl	800e128 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	4413      	add	r3, r2
 8005006:	3308      	adds	r3, #8
 8005008:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <mem_malloc+0x1b4>)
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	4293      	cmp	r3, r2
 800500e:	d906      	bls.n	800501e <mem_malloc+0x152>
 8005010:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <mem_malloc+0x1b8>)
 8005012:	f240 22d3 	movw	r2, #723	; 0x2d3
 8005016:	491e      	ldr	r1, [pc, #120]	; (8005090 <mem_malloc+0x1c4>)
 8005018:	481c      	ldr	r0, [pc, #112]	; (800508c <mem_malloc+0x1c0>)
 800501a:	f009 f885 	bl	800e128 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d006      	beq.n	8005036 <mem_malloc+0x16a>
 8005028:	4b16      	ldr	r3, [pc, #88]	; (8005084 <mem_malloc+0x1b8>)
 800502a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800502e:	4919      	ldr	r1, [pc, #100]	; (8005094 <mem_malloc+0x1c8>)
 8005030:	4816      	ldr	r0, [pc, #88]	; (800508c <mem_malloc+0x1c0>)
 8005032:	f009 f879 	bl	800e128 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d006      	beq.n	800504e <mem_malloc+0x182>
 8005040:	4b10      	ldr	r3, [pc, #64]	; (8005084 <mem_malloc+0x1b8>)
 8005042:	f240 22d7 	movw	r2, #727	; 0x2d7
 8005046:	4914      	ldr	r1, [pc, #80]	; (8005098 <mem_malloc+0x1cc>)
 8005048:	4810      	ldr	r0, [pc, #64]	; (800508c <mem_malloc+0x1c0>)
 800504a:	f009 f86d 	bl	800e128 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	3308      	adds	r3, #8
 8005052:	e00d      	b.n	8005070 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8005054:	4b09      	ldr	r3, [pc, #36]	; (800507c <mem_malloc+0x1b0>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	8bfb      	ldrh	r3, [r7, #30]
 800505a:	4413      	add	r3, r2
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005060:	8bfa      	ldrh	r2, [r7, #30]
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005068:	429a      	cmp	r2, r3
 800506a:	f4ff af51 	bcc.w	8004f10 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3720      	adds	r7, #32
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20003e28 	.word	0x20003e28
 800507c:	20003e20 	.word	0x20003e20
 8005080:	20003e24 	.word	0x20003e24
 8005084:	0800f4c4 	.word	0x0800f4c4
 8005088:	0800f620 	.word	0x0800f620
 800508c:	0800f50c 	.word	0x0800f50c
 8005090:	0800f63c 	.word	0x0800f63c
 8005094:	0800f66c 	.word	0x0800f66c
 8005098:	0800f69c 	.word	0x0800f69c

0800509c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	3303      	adds	r3, #3
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e011      	b.n	80050e2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4413      	add	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3301      	adds	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	885b      	ldrh	r3, [r3, #2]
 80050e6:	461a      	mov	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4293      	cmp	r3, r2
 80050ec:	dbe7      	blt.n	80050be <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005102:	2300      	movs	r3, #0
 8005104:	80fb      	strh	r3, [r7, #6]
 8005106:	e009      	b.n	800511c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	4a08      	ldr	r2, [pc, #32]	; (800512c <memp_init+0x30>)
 800510c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff ffc3 	bl	800509c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	3301      	adds	r3, #1
 800511a:	80fb      	strh	r3, [r7, #6]
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d9f2      	bls.n	8005108 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	080111a4 	.word	0x080111a4

08005130 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d012      	beq.n	800516c <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d006      	beq.n	8005168 <do_memp_malloc_pool+0x38>
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <do_memp_malloc_pool+0x48>)
 800515c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8005160:	4906      	ldr	r1, [pc, #24]	; (800517c <do_memp_malloc_pool+0x4c>)
 8005162:	4807      	ldr	r0, [pc, #28]	; (8005180 <do_memp_malloc_pool+0x50>)
 8005164:	f008 ffe0 	bl	800e128 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	e000      	b.n	800516e <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	0800f6c0 	.word	0x0800f6c0
 800517c:	0800f6f0 	.word	0x0800f6f0
 8005180:	0800f714 	.word	0x0800f714

08005184 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d908      	bls.n	80051a6 <memp_malloc+0x22>
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <memp_malloc+0x3c>)
 8005196:	f240 1287 	movw	r2, #391	; 0x187
 800519a:	490a      	ldr	r1, [pc, #40]	; (80051c4 <memp_malloc+0x40>)
 800519c:	480a      	ldr	r0, [pc, #40]	; (80051c8 <memp_malloc+0x44>)
 800519e:	f008 ffc3 	bl	800e128 <iprintf>
 80051a2:	2300      	movs	r3, #0
 80051a4:	e008      	b.n	80051b8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	4a08      	ldr	r2, [pc, #32]	; (80051cc <memp_malloc+0x48>)
 80051aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff ffbe 	bl	8005130 <do_memp_malloc_pool>
 80051b4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80051b6:	68fb      	ldr	r3, [r7, #12]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	0800f6c0 	.word	0x0800f6c0
 80051c4:	0800f750 	.word	0x0800f750
 80051c8:	0800f714 	.word	0x0800f714
 80051cc:	080111a4 	.word	0x080111a4

080051d0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d006      	beq.n	80051f2 <do_memp_free_pool+0x22>
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <do_memp_free_pool+0x40>)
 80051e6:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80051ea:	490a      	ldr	r1, [pc, #40]	; (8005214 <do_memp_free_pool+0x44>)
 80051ec:	480a      	ldr	r0, [pc, #40]	; (8005218 <do_memp_free_pool+0x48>)
 80051ee:	f008 ff9b 	bl	800e128 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	0800f6c0 	.word	0x0800f6c0
 8005214:	0800f770 	.word	0x0800f770
 8005218:	0800f714 	.word	0x0800f714

0800521c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	6039      	str	r1, [r7, #0]
 8005226:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b08      	cmp	r3, #8
 800522c:	d907      	bls.n	800523e <memp_free+0x22>
 800522e:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <memp_free+0x44>)
 8005230:	f240 12db 	movw	r2, #475	; 0x1db
 8005234:	490b      	ldr	r1, [pc, #44]	; (8005264 <memp_free+0x48>)
 8005236:	480c      	ldr	r0, [pc, #48]	; (8005268 <memp_free+0x4c>)
 8005238:	f008 ff76 	bl	800e128 <iprintf>
 800523c:	e00c      	b.n	8005258 <memp_free+0x3c>

  if (mem == NULL) {
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	4a09      	ldr	r2, [pc, #36]	; (800526c <memp_free+0x50>)
 8005248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff ffbe 	bl	80051d0 <do_memp_free_pool>
 8005254:	e000      	b.n	8005258 <memp_free+0x3c>
    return;
 8005256:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	0800f6c0 	.word	0x0800f6c0
 8005264:	0800f790 	.word	0x0800f790
 8005268:	0800f714 	.word	0x0800f714
 800526c:	080111a4 	.word	0x080111a4

08005270 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
	...

08005280 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <netif_add+0x20>
 8005294:	4b1f      	ldr	r3, [pc, #124]	; (8005314 <netif_add+0x94>)
 8005296:	22fb      	movs	r2, #251	; 0xfb
 8005298:	491f      	ldr	r1, [pc, #124]	; (8005318 <netif_add+0x98>)
 800529a:	4820      	ldr	r0, [pc, #128]	; (800531c <netif_add+0x9c>)
 800529c:	f008 ff44 	bl	800e128 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2203      	movs	r2, #3
 80052be:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 80052c8:	4b15      	ldr	r3, [pc, #84]	; (8005320 <netif_add+0xa0>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	b2d1      	uxtb	r1, r2
 80052d0:	4a13      	ldr	r2, [pc, #76]	; (8005320 <netif_add+0xa0>)
 80052d2:	7011      	strb	r1, [r2, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a3a      	ldr	r2, [r7, #32]
 80052de:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f81e 	bl	8005328 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	4798      	blx	r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <netif_add+0x7c>
    return NULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	e007      	b.n	800530c <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <netif_add+0xa4>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005304:	4a07      	ldr	r2, [pc, #28]	; (8005324 <netif_add+0xa4>)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800530a:	68fb      	ldr	r3, [r7, #12]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	0800f7ac 	.word	0x0800f7ac
 8005318:	0800f7e0 	.word	0x0800f7e0
 800531c:	0800f7f8 	.word	0x0800f7f8
 8005320:	20006d0c 	.word	0x20006d0c
 8005324:	20006d04 	.word	0x20006d04

08005328 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <netif_set_addr+0x1c>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10c      	bne.n	800535e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f81a 	bl	8005380 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f862 	bl	8005418 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f84a 	bl	80053f0 <netif_set_gw>
 800535c:	e00c      	b.n	8005378 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f859 	bl	8005418 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8005366:	6839      	ldr	r1, [r7, #0]
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f841 	bl	80053f0 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f805 	bl	8005380 <netif_set_ipaddr>
  }
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <netif_set_ipaddr+0x18>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	e002      	b.n	800539e <netif_set_ipaddr+0x1e>
 8005398:	4b14      	ldr	r3, [pc, #80]	; (80053ec <netif_set_ipaddr+0x6c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d01c      	beq.n	80053e4 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3304      	adds	r3, #4
 80053ae:	f107 020c 	add.w	r2, r7, #12
 80053b2:	4611      	mov	r1, r2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f002 facf 	bl	8007958 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	f107 020c 	add.w	r2, r7, #12
 80053c2:	4611      	mov	r1, r2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f006 fb35 	bl	800ba34 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <netif_set_ipaddr+0x56>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	e000      	b.n	80053d8 <netif_set_ipaddr+0x58>
 80053d6:	2300      	movs	r3, #0
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80053dc:	2101      	movs	r1, #1
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f861 	bl	80054a6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	08011208 	.word	0x08011208

080053f0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <netif_set_gw+0x16>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	e000      	b.n	8005408 <netif_set_gw+0x18>
 8005406:	2300      	movs	r3, #0
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <netif_set_netmask+0x16>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	e000      	b.n	8005430 <netif_set_netmask+0x18>
 800542e:	2300      	movs	r3, #0
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005448:	4a04      	ldr	r2, [pc, #16]	; (800545c <netif_set_default+0x1c>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20006d08 	.word	0x20006d08

08005460 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d113      	bne.n	800549e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	b2da      	uxtb	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8005496:	2103      	movs	r1, #3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f804 	bl	80054a6 <netif_issue_reports>
    }
  }
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d011      	beq.n	80054e0 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f007 f9de 	bl	800c89c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d012      	beq.n	8005524 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	b2da      	uxtb	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f006 fd82 	bl	800c028 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005532:	4b0e      	ldr	r3, [pc, #56]	; (800556c <pbuf_free_ooseq+0x40>)
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005538:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <pbuf_free_ooseq+0x44>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	e00f      	b.n	8005560 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	4618      	mov	r0, r3
 800554e:	f001 fe74 	bl	800723a <tcp_segs_free>
      pcb->ooseq = NULL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8005558:	e005      	b.n	8005566 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1ec      	bne.n	8005540 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20006d0d 	.word	0x20006d0d
 8005570:	20006d1c 	.word	0x20006d1c

08005574 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005578:	4b03      	ldr	r3, [pc, #12]	; (8005588 <pbuf_pool_is_empty+0x14>)
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800557e:	bf00      	nop
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20006d0d 	.word	0x20006d0d

0800558c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
 8005596:	460b      	mov	r3, r1
 8005598:	80bb      	strh	r3, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d81c      	bhi.n	80055de <pbuf_alloc+0x52>
 80055a4:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <pbuf_alloc+0x20>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055c1 	.word	0x080055c1
 80055b0:	080055c7 	.word	0x080055c7
 80055b4:	080055cd 	.word	0x080055cd
 80055b8:	080055d3 	.word	0x080055d3
 80055bc:	080055d9 	.word	0x080055d9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80055c0:	2336      	movs	r3, #54	; 0x36
 80055c2:	82fb      	strh	r3, [r7, #22]
    break;
 80055c4:	e014      	b.n	80055f0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80055c6:	2322      	movs	r3, #34	; 0x22
 80055c8:	82fb      	strh	r3, [r7, #22]
    break;
 80055ca:	e011      	b.n	80055f0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80055cc:	230e      	movs	r3, #14
 80055ce:	82fb      	strh	r3, [r7, #22]
    break;
 80055d0:	e00e      	b.n	80055f0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80055d2:	2300      	movs	r3, #0
 80055d4:	82fb      	strh	r3, [r7, #22]
    break;
 80055d6:	e00b      	b.n	80055f0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	82fb      	strh	r3, [r7, #22]
    break;
 80055dc:	e008      	b.n	80055f0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80055de:	4ba1      	ldr	r3, [pc, #644]	; (8005864 <pbuf_alloc+0x2d8>)
 80055e0:	f44f 728b 	mov.w	r2, #278	; 0x116
 80055e4:	49a0      	ldr	r1, [pc, #640]	; (8005868 <pbuf_alloc+0x2dc>)
 80055e6:	48a1      	ldr	r0, [pc, #644]	; (800586c <pbuf_alloc+0x2e0>)
 80055e8:	f008 fd9e 	bl	800e128 <iprintf>
    return NULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e15c      	b.n	80058aa <pbuf_alloc+0x31e>
  }

  switch (type) {
 80055f0:	79bb      	ldrb	r3, [r7, #6]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d00d      	beq.n	8005612 <pbuf_alloc+0x86>
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	f300 8146 	bgt.w	8005888 <pbuf_alloc+0x2fc>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80d0 	beq.w	80057a2 <pbuf_alloc+0x216>
 8005602:	2b00      	cmp	r3, #0
 8005604:	f2c0 8140 	blt.w	8005888 <pbuf_alloc+0x2fc>
 8005608:	3b01      	subs	r3, #1
 800560a:	2b01      	cmp	r3, #1
 800560c:	f200 813c 	bhi.w	8005888 <pbuf_alloc+0x2fc>
 8005610:	e10d      	b.n	800582e <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005612:	2008      	movs	r0, #8
 8005614:	f7ff fdb6 	bl	8005184 <memp_malloc>
 8005618:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8005620:	f7ff ffa8 	bl	8005574 <pbuf_pool_is_empty>
      return NULL;
 8005624:	2300      	movs	r3, #0
 8005626:	e140      	b.n	80058aa <pbuf_alloc+0x31e>
    }
    p->type = type;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	79ba      	ldrb	r2, [r7, #6]
 800562c:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005634:	8afb      	ldrh	r3, [r7, #22]
 8005636:	3310      	adds	r3, #16
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	3303      	adds	r3, #3
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	461a      	mov	r2, r3
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d006      	beq.n	8005662 <pbuf_alloc+0xd6>
 8005654:	4b83      	ldr	r3, [pc, #524]	; (8005864 <pbuf_alloc+0x2d8>)
 8005656:	f44f 7294 	mov.w	r2, #296	; 0x128
 800565a:	4985      	ldr	r1, [pc, #532]	; (8005870 <pbuf_alloc+0x2e4>)
 800565c:	4883      	ldr	r0, [pc, #524]	; (800586c <pbuf_alloc+0x2e0>)
 800565e:	f008 fd63 	bl	800e128 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	88ba      	ldrh	r2, [r7, #4]
 8005666:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005668:	8afb      	ldrh	r3, [r7, #22]
 800566a:	3303      	adds	r3, #3
 800566c:	f023 0303 	bic.w	r3, r3, #3
 8005670:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8005674:	88bb      	ldrh	r3, [r7, #4]
 8005676:	4293      	cmp	r3, r2
 8005678:	bf28      	it	cs
 800567a:	4613      	movcs	r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	8952      	ldrh	r2, [r2, #10]
 800568a:	441a      	add	r2, r3
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005692:	429a      	cmp	r2, r3
 8005694:	d906      	bls.n	80056a4 <pbuf_alloc+0x118>
 8005696:	4b73      	ldr	r3, [pc, #460]	; (8005864 <pbuf_alloc+0x2d8>)
 8005698:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800569c:	4975      	ldr	r1, [pc, #468]	; (8005874 <pbuf_alloc+0x2e8>)
 800569e:	4873      	ldr	r0, [pc, #460]	; (800586c <pbuf_alloc+0x2e0>)
 80056a0:	f008 fd42 	bl	800e128 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80056a4:	8afb      	ldrh	r3, [r7, #22]
 80056a6:	3303      	adds	r3, #3
 80056a8:	f023 0303 	bic.w	r3, r3, #3
 80056ac:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80056b0:	d106      	bne.n	80056c0 <pbuf_alloc+0x134>
 80056b2:	4b6c      	ldr	r3, [pc, #432]	; (8005864 <pbuf_alloc+0x2d8>)
 80056b4:	f240 1231 	movw	r2, #305	; 0x131
 80056b8:	496f      	ldr	r1, [pc, #444]	; (8005878 <pbuf_alloc+0x2ec>)
 80056ba:	486c      	ldr	r0, [pc, #432]	; (800586c <pbuf_alloc+0x2e0>)
 80056bc:	f008 fd34 	bl	800e128 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2201      	movs	r2, #1
 80056c4:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80056ca:	88bb      	ldrh	r3, [r7, #4]
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	8952      	ldrh	r2, [r2, #10]
 80056d0:	1a9b      	subs	r3, r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80056d4:	e061      	b.n	800579a <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80056d6:	2008      	movs	r0, #8
 80056d8:	f7ff fd54 	bl	8005184 <memp_malloc>
 80056dc:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80056e4:	f7ff ff46 	bl	8005574 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80056e8:	69f8      	ldr	r0, [r7, #28]
 80056ea:	f000 fac7 	bl	8005c7c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e0db      	b.n	80058aa <pbuf_alloc+0x31e>
      }
      q->type = type;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	79ba      	ldrb	r2, [r7, #6]
 80056f6:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005710:	4293      	cmp	r3, r2
 8005712:	dd06      	ble.n	8005722 <pbuf_alloc+0x196>
 8005714:	4b53      	ldr	r3, [pc, #332]	; (8005864 <pbuf_alloc+0x2d8>)
 8005716:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800571a:	4958      	ldr	r1, [pc, #352]	; (800587c <pbuf_alloc+0x2f0>)
 800571c:	4853      	ldr	r0, [pc, #332]	; (800586c <pbuf_alloc+0x2e0>)
 800571e:	f008 fd03 	bl	800e128 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005732:	bf28      	it	cs
 8005734:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f103 0210 	add.w	r2, r3, #16
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <pbuf_alloc+0x1d6>
 8005754:	4b43      	ldr	r3, [pc, #268]	; (8005864 <pbuf_alloc+0x2d8>)
 8005756:	f240 1251 	movw	r2, #337	; 0x151
 800575a:	4949      	ldr	r1, [pc, #292]	; (8005880 <pbuf_alloc+0x2f4>)
 800575c:	4843      	ldr	r0, [pc, #268]	; (800586c <pbuf_alloc+0x2e0>)
 800575e:	f008 fce3 	bl	800e128 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	8952      	ldrh	r2, [r2, #10]
 800576a:	441a      	add	r2, r3
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005772:	429a      	cmp	r2, r3
 8005774:	d906      	bls.n	8005784 <pbuf_alloc+0x1f8>
 8005776:	4b3b      	ldr	r3, [pc, #236]	; (8005864 <pbuf_alloc+0x2d8>)
 8005778:	f240 1253 	movw	r2, #339	; 0x153
 800577c:	493d      	ldr	r1, [pc, #244]	; (8005874 <pbuf_alloc+0x2e8>)
 800577e:	483b      	ldr	r0, [pc, #236]	; (800586c <pbuf_alloc+0x2e0>)
 8005780:	f008 fcd2 	bl	800e128 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	895b      	ldrh	r3, [r3, #10]
 800578e:	461a      	mov	r2, r3
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	dc9a      	bgt.n	80056d6 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80057a0:	e07c      	b.n	800589c <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80057a2:	8afb      	ldrh	r3, [r7, #22]
 80057a4:	3313      	adds	r3, #19
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f023 0303 	bic.w	r3, r3, #3
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	88bb      	ldrh	r3, [r7, #4]
 80057b0:	3303      	adds	r3, #3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f023 0303 	bic.w	r3, r3, #3
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	4413      	add	r3, r2
 80057bc:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80057be:	897a      	ldrh	r2, [r7, #10]
 80057c0:	88bb      	ldrh	r3, [r7, #4]
 80057c2:	3303      	adds	r3, #3
 80057c4:	f023 0303 	bic.w	r3, r3, #3
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d201      	bcs.n	80057d0 <pbuf_alloc+0x244>
        return NULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	e06c      	b.n	80058aa <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80057d0:	897b      	ldrh	r3, [r7, #10]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fb7a 	bl	8004ecc <mem_malloc>
 80057d8:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <pbuf_alloc+0x258>
      return NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e062      	b.n	80058aa <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80057e4:	8afb      	ldrh	r3, [r7, #22]
 80057e6:	3310      	adds	r3, #16
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	3303      	adds	r3, #3
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	461a      	mov	r2, r3
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	88ba      	ldrh	r2, [r7, #4]
 80057fc:	811a      	strh	r2, [r3, #8]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	891a      	ldrh	r2, [r3, #8]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	79ba      	ldrb	r2, [r7, #6]
 8005810:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d03d      	beq.n	800589a <pbuf_alloc+0x30e>
 800581e:	4b11      	ldr	r3, [pc, #68]	; (8005864 <pbuf_alloc+0x2d8>)
 8005820:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8005824:	4917      	ldr	r1, [pc, #92]	; (8005884 <pbuf_alloc+0x2f8>)
 8005826:	4811      	ldr	r0, [pc, #68]	; (800586c <pbuf_alloc+0x2e0>)
 8005828:	f008 fc7e 	bl	800e128 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800582c:	e035      	b.n	800589a <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800582e:	2007      	movs	r0, #7
 8005830:	f7ff fca8 	bl	8005184 <memp_malloc>
 8005834:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	e034      	b.n	80058aa <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2200      	movs	r2, #0
 8005844:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	88ba      	ldrh	r2, [r7, #4]
 800584a:	811a      	strh	r2, [r3, #8]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	891a      	ldrh	r2, [r3, #8]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
    p->type = type;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	79ba      	ldrb	r2, [r7, #6]
 800585e:	731a      	strb	r2, [r3, #12]
    break;
 8005860:	e01c      	b.n	800589c <pbuf_alloc+0x310>
 8005862:	bf00      	nop
 8005864:	0800f820 	.word	0x0800f820
 8005868:	0800f850 	.word	0x0800f850
 800586c:	0800f86c 	.word	0x0800f86c
 8005870:	0800f894 	.word	0x0800f894
 8005874:	0800f8c4 	.word	0x0800f8c4
 8005878:	0800f8f8 	.word	0x0800f8f8
 800587c:	0800f92c 	.word	0x0800f92c
 8005880:	0800f940 	.word	0x0800f940
 8005884:	0800f970 	.word	0x0800f970
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <pbuf_alloc+0x328>)
 800588a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800588e:	490a      	ldr	r1, [pc, #40]	; (80058b8 <pbuf_alloc+0x32c>)
 8005890:	480a      	ldr	r0, [pc, #40]	; (80058bc <pbuf_alloc+0x330>)
 8005892:	f008 fc49 	bl	800e128 <iprintf>
    return NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	e007      	b.n	80058aa <pbuf_alloc+0x31e>
    break;
 800589a:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2201      	movs	r2, #1
 80058a0:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	2200      	movs	r2, #0
 80058a6:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80058a8:	69fb      	ldr	r3, [r7, #28]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	0800f820 	.word	0x0800f820
 80058b8:	0800f99c 	.word	0x0800f99c
 80058bc:	0800f86c 	.word	0x0800f86c

080058c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4603      	mov	r3, r0
 80058ca:	71fb      	strb	r3, [r7, #7]
 80058cc:	460b      	mov	r3, r1
 80058ce:	80bb      	strh	r3, [r7, #4]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d81b      	bhi.n	8005912 <pbuf_alloced_custom+0x52>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <pbuf_alloced_custom+0x20>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	080058f5 	.word	0x080058f5
 80058e4:	080058fb 	.word	0x080058fb
 80058e8:	08005901 	.word	0x08005901
 80058ec:	08005907 	.word	0x08005907
 80058f0:	0800590d 	.word	0x0800590d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80058f4:	2336      	movs	r3, #54	; 0x36
 80058f6:	81fb      	strh	r3, [r7, #14]
    break;
 80058f8:	e014      	b.n	8005924 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80058fa:	2322      	movs	r3, #34	; 0x22
 80058fc:	81fb      	strh	r3, [r7, #14]
    break;
 80058fe:	e011      	b.n	8005924 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005900:	230e      	movs	r3, #14
 8005902:	81fb      	strh	r3, [r7, #14]
    break;
 8005904:	e00e      	b.n	8005924 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8005906:	2300      	movs	r3, #0
 8005908:	81fb      	strh	r3, [r7, #14]
    break;
 800590a:	e00b      	b.n	8005924 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	81fb      	strh	r3, [r7, #14]
    break;
 8005910:	e008      	b.n	8005924 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8005912:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <pbuf_alloced_custom+0xc8>)
 8005914:	f240 12c5 	movw	r2, #453	; 0x1c5
 8005918:	491c      	ldr	r1, [pc, #112]	; (800598c <pbuf_alloced_custom+0xcc>)
 800591a:	481d      	ldr	r0, [pc, #116]	; (8005990 <pbuf_alloced_custom+0xd0>)
 800591c:	f008 fc04 	bl	800e128 <iprintf>
    return NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	e02d      	b.n	8005980 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005924:	89fb      	ldrh	r3, [r7, #14]
 8005926:	3303      	adds	r3, #3
 8005928:	f023 0203 	bic.w	r2, r3, #3
 800592c:	88bb      	ldrh	r3, [r7, #4]
 800592e:	441a      	add	r2, r3
 8005930:	8bbb      	ldrh	r3, [r7, #28]
 8005932:	429a      	cmp	r2, r3
 8005934:	d901      	bls.n	800593a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005936:	2300      	movs	r3, #0
 8005938:	e022      	b.n	8005980 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d008      	beq.n	8005958 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005946:	89fb      	ldrh	r3, [r7, #14]
 8005948:	3303      	adds	r3, #3
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	441a      	add	r2, r3
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	e002      	b.n	800595e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2200      	movs	r2, #0
 800595c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2202      	movs	r2, #2
 8005962:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	88ba      	ldrh	r2, [r7, #4]
 8005968:	811a      	strh	r2, [r3, #8]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	891a      	ldrh	r2, [r3, #8]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	79ba      	ldrb	r2, [r7, #6]
 8005976:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2201      	movs	r2, #1
 800597c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800597e:	683b      	ldr	r3, [r7, #0]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	0800f820 	.word	0x0800f820
 800598c:	0800f9b8 	.word	0x0800f9b8
 8005990:	0800f86c 	.word	0x0800f86c

08005994 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <pbuf_realloc+0x20>
 80059a6:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <pbuf_realloc+0x140>)
 80059a8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80059ac:	494a      	ldr	r1, [pc, #296]	; (8005ad8 <pbuf_realloc+0x144>)
 80059ae:	484b      	ldr	r0, [pc, #300]	; (8005adc <pbuf_realloc+0x148>)
 80059b0:	f008 fbba 	bl	800e128 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	7b1b      	ldrb	r3, [r3, #12]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d012      	beq.n	80059e2 <pbuf_realloc+0x4e>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	7b1b      	ldrb	r3, [r3, #12]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d00e      	beq.n	80059e2 <pbuf_realloc+0x4e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	7b1b      	ldrb	r3, [r3, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <pbuf_realloc+0x4e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7b1b      	ldrb	r3, [r3, #12]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d006      	beq.n	80059e2 <pbuf_realloc+0x4e>
 80059d4:	4b3f      	ldr	r3, [pc, #252]	; (8005ad4 <pbuf_realloc+0x140>)
 80059d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80059da:	4941      	ldr	r1, [pc, #260]	; (8005ae0 <pbuf_realloc+0x14c>)
 80059dc:	483f      	ldr	r0, [pc, #252]	; (8005adc <pbuf_realloc+0x148>)
 80059de:	f008 fba3 	bl	800e128 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	891b      	ldrh	r3, [r3, #8]
 80059e6:	887a      	ldrh	r2, [r7, #2]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d26e      	bcs.n	8005aca <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	8912      	ldrh	r2, [r2, #8]
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80059f6:	887b      	ldrh	r3, [r7, #2]
 80059f8:	827b      	strh	r3, [r7, #18]
  q = p;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80059fe:	e025      	b.n	8005a4c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	895b      	ldrh	r3, [r3, #10]
 8005a04:	8a7a      	ldrh	r2, [r7, #18]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a10:	4293      	cmp	r3, r2
 8005a12:	dd06      	ble.n	8005a22 <pbuf_realloc+0x8e>
 8005a14:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <pbuf_realloc+0x140>)
 8005a16:	f240 220b 	movw	r2, #523	; 0x20b
 8005a1a:	4932      	ldr	r1, [pc, #200]	; (8005ae4 <pbuf_realloc+0x150>)
 8005a1c:	482f      	ldr	r0, [pc, #188]	; (8005adc <pbuf_realloc+0x148>)
 8005a1e:	f008 fb83 	bl	800e128 <iprintf>
    q->tot_len += (u16_t)grow;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	891a      	ldrh	r2, [r3, #8]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <pbuf_realloc+0xb8>
 8005a3e:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <pbuf_realloc+0x140>)
 8005a40:	f240 220f 	movw	r2, #527	; 0x20f
 8005a44:	4928      	ldr	r1, [pc, #160]	; (8005ae8 <pbuf_realloc+0x154>)
 8005a46:	4825      	ldr	r0, [pc, #148]	; (8005adc <pbuf_realloc+0x148>)
 8005a48:	f008 fb6e 	bl	800e128 <iprintf>
  while (rem_len > q->len) {
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	895b      	ldrh	r3, [r3, #10]
 8005a50:	8a7a      	ldrh	r2, [r7, #18]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d8d4      	bhi.n	8005a00 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	7b1b      	ldrb	r3, [r3, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d121      	bne.n	8005aa2 <pbuf_realloc+0x10e>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	895b      	ldrh	r3, [r3, #10]
 8005a62:	8a7a      	ldrh	r2, [r7, #18]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d01c      	beq.n	8005aa2 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	7b5b      	ldrb	r3, [r3, #13]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d116      	bne.n	8005aa2 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	8a7b      	ldrh	r3, [r7, #18]
 8005a80:	4413      	add	r3, r2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	4619      	mov	r1, r3
 8005a86:	6978      	ldr	r0, [r7, #20]
 8005a88:	f7ff f944 	bl	8004d14 <mem_trim>
 8005a8c:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <pbuf_realloc+0x10e>
 8005a94:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <pbuf_realloc+0x140>)
 8005a96:	f240 221d 	movw	r2, #541	; 0x21d
 8005a9a:	4914      	ldr	r1, [pc, #80]	; (8005aec <pbuf_realloc+0x158>)
 8005a9c:	480f      	ldr	r0, [pc, #60]	; (8005adc <pbuf_realloc+0x148>)
 8005a9e:	f008 fb43 	bl	800e128 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	8a7a      	ldrh	r2, [r7, #18]
 8005aa6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	895a      	ldrh	r2, [r3, #10]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d004      	beq.n	8005ac2 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f8dd 	bl	8005c7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e000      	b.n	8005acc <pbuf_realloc+0x138>
    return;
 8005aca:	bf00      	nop

}
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	0800f820 	.word	0x0800f820
 8005ad8:	0800f9dc 	.word	0x0800f9dc
 8005adc:	0800f86c 	.word	0x0800f86c
 8005ae0:	0800f9f4 	.word	0x0800f9f4
 8005ae4:	0800fa10 	.word	0x0800fa10
 8005ae8:	0800fa24 	.word	0x0800fa24
 8005aec:	0800fa3c 	.word	0x0800fa3c

08005af0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	807b      	strh	r3, [r7, #2]
 8005afc:	4613      	mov	r3, r2
 8005afe:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <pbuf_header_impl+0x24>
 8005b06:	4b46      	ldr	r3, [pc, #280]	; (8005c20 <pbuf_header_impl+0x130>)
 8005b08:	f240 223f 	movw	r2, #575	; 0x23f
 8005b0c:	4945      	ldr	r1, [pc, #276]	; (8005c24 <pbuf_header_impl+0x134>)
 8005b0e:	4846      	ldr	r0, [pc, #280]	; (8005c28 <pbuf_header_impl+0x138>)
 8005b10:	f008 fb0a 	bl	800e128 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8005b14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <pbuf_header_impl+0x32>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <pbuf_header_impl+0x36>
    return 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e078      	b.n	8005c18 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8005b26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	da10      	bge.n	8005b50 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8005b2e:	887b      	ldrh	r3, [r7, #2]
 8005b30:	425b      	negs	r3, r3
 8005b32:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	895b      	ldrh	r3, [r3, #10]
 8005b38:	89fa      	ldrh	r2, [r7, #14]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d90a      	bls.n	8005b54 <pbuf_header_impl+0x64>
 8005b3e:	4b38      	ldr	r3, [pc, #224]	; (8005c20 <pbuf_header_impl+0x130>)
 8005b40:	f240 2247 	movw	r2, #583	; 0x247
 8005b44:	4939      	ldr	r1, [pc, #228]	; (8005c2c <pbuf_header_impl+0x13c>)
 8005b46:	4838      	ldr	r0, [pc, #224]	; (8005c28 <pbuf_header_impl+0x138>)
 8005b48:	f008 faee 	bl	800e128 <iprintf>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e063      	b.n	8005c18 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8005b50:	887b      	ldrh	r3, [r7, #2]
 8005b52:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	7b1b      	ldrb	r3, [r3, #12]
 8005b58:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8005b60:	89bb      	ldrh	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <pbuf_header_impl+0x7c>
 8005b66:	89bb      	ldrh	r3, [r7, #12]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d112      	bne.n	8005b92 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b74:	425b      	negs	r3, r3
 8005b76:	441a      	add	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3310      	adds	r3, #16
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d238      	bcs.n	8005bfa <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e042      	b.n	8005c18 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8005b92:	89bb      	ldrh	r3, [r7, #12]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d002      	beq.n	8005b9e <pbuf_header_impl+0xae>
 8005b98:	89bb      	ldrh	r3, [r7, #12]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d124      	bne.n	8005be8 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005b9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	da0d      	bge.n	8005bc2 <pbuf_header_impl+0xd2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	895b      	ldrh	r3, [r3, #10]
 8005baa:	89fa      	ldrh	r2, [r7, #14]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d808      	bhi.n	8005bc2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bb8:	425b      	negs	r3, r3
 8005bba:	441a      	add	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	605a      	str	r2, [r3, #4]
 8005bc0:	e011      	b.n	8005be6 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8005bc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	dd0b      	ble.n	8005be2 <pbuf_header_impl+0xf2>
 8005bca:	787b      	ldrb	r3, [r7, #1]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bd8:	425b      	negs	r3, r3
 8005bda:	441a      	add	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	605a      	str	r2, [r3, #4]
 8005be0:	e001      	b.n	8005be6 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e018      	b.n	8005c18 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005be6:	e008      	b.n	8005bfa <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8005be8:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <pbuf_header_impl+0x130>)
 8005bea:	f240 2277 	movw	r2, #631	; 0x277
 8005bee:	4910      	ldr	r1, [pc, #64]	; (8005c30 <pbuf_header_impl+0x140>)
 8005bf0:	480d      	ldr	r0, [pc, #52]	; (8005c28 <pbuf_header_impl+0x138>)
 8005bf2:	f008 fa99 	bl	800e128 <iprintf>
    return 1;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e00e      	b.n	8005c18 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	895a      	ldrh	r2, [r3, #10]
 8005bfe:	887b      	ldrh	r3, [r7, #2]
 8005c00:	4413      	add	r3, r2
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	891a      	ldrh	r2, [r3, #8]
 8005c0c:	887b      	ldrh	r3, [r7, #2]
 8005c0e:	4413      	add	r3, r2
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	0800f820 	.word	0x0800f820
 8005c24:	0800fa58 	.word	0x0800fa58
 8005c28:	0800f86c 	.word	0x0800f86c
 8005c2c:	0800fa64 	.word	0x0800fa64
 8005c30:	0800fa84 	.word	0x0800fa84

08005c34 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8005c40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c44:	2200      	movs	r2, #0
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ff51 	bl	8005af0 <pbuf_header_impl>
 8005c4e:	4603      	mov	r3, r0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8005c64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff ff3f 	bl	8005af0 <pbuf_header_impl>
 8005c72:	4603      	mov	r3, r0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <pbuf_free+0x22>
 8005c90:	4b3e      	ldr	r3, [pc, #248]	; (8005d8c <pbuf_free+0x110>)
 8005c92:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005c96:	493e      	ldr	r1, [pc, #248]	; (8005d90 <pbuf_free+0x114>)
 8005c98:	483e      	ldr	r0, [pc, #248]	; (8005d94 <pbuf_free+0x118>)
 8005c9a:	f008 fa45 	bl	800e128 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e070      	b.n	8005d84 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	7b1b      	ldrb	r3, [r3, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d012      	beq.n	8005cd0 <pbuf_free+0x54>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	7b1b      	ldrb	r3, [r3, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d00e      	beq.n	8005cd0 <pbuf_free+0x54>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	7b1b      	ldrb	r3, [r3, #12]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d00a      	beq.n	8005cd0 <pbuf_free+0x54>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	7b1b      	ldrb	r3, [r3, #12]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d006      	beq.n	8005cd0 <pbuf_free+0x54>
 8005cc2:	4b32      	ldr	r3, [pc, #200]	; (8005d8c <pbuf_free+0x110>)
 8005cc4:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005cc8:	4933      	ldr	r1, [pc, #204]	; (8005d98 <pbuf_free+0x11c>)
 8005cca:	4832      	ldr	r0, [pc, #200]	; (8005d94 <pbuf_free+0x118>)
 8005ccc:	f008 fa2c 	bl	800e128 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005cd4:	e052      	b.n	8005d7c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	89db      	ldrh	r3, [r3, #14]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <pbuf_free+0x70>
 8005cde:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <pbuf_free+0x110>)
 8005ce0:	f240 22eb 	movw	r2, #747	; 0x2eb
 8005ce4:	492d      	ldr	r1, [pc, #180]	; (8005d9c <pbuf_free+0x120>)
 8005ce6:	482b      	ldr	r0, [pc, #172]	; (8005d94 <pbuf_free+0x118>)
 8005ce8:	f008 fa1e 	bl	800e128 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	89db      	ldrh	r3, [r3, #14]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	81da      	strh	r2, [r3, #14]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	89db      	ldrh	r3, [r3, #14]
 8005cfc:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005cfe:	8abb      	ldrh	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d139      	bne.n	8005d78 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	7b1b      	ldrb	r3, [r3, #12]
 8005d0e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	7b5b      	ldrb	r3, [r3, #13]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d011      	beq.n	8005d40 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <pbuf_free+0xba>
 8005d28:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <pbuf_free+0x110>)
 8005d2a:	f240 22f9 	movw	r2, #761	; 0x2f9
 8005d2e:	491c      	ldr	r1, [pc, #112]	; (8005da0 <pbuf_free+0x124>)
 8005d30:	4818      	ldr	r0, [pc, #96]	; (8005d94 <pbuf_free+0x118>)
 8005d32:	f008 f9f9 	bl	800e128 <iprintf>
        pc->custom_free_function(p);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
 8005d3e:	e015      	b.n	8005d6c <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8005d40:	89fb      	ldrh	r3, [r7, #14]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d104      	bne.n	8005d50 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	2008      	movs	r0, #8
 8005d4a:	f7ff fa67 	bl	800521c <memp_free>
 8005d4e:	e00d      	b.n	8005d6c <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005d50:	89fb      	ldrh	r3, [r7, #14]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d002      	beq.n	8005d5c <pbuf_free+0xe0>
 8005d56:	89fb      	ldrh	r3, [r7, #14]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d104      	bne.n	8005d66 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	2007      	movs	r0, #7
 8005d60:	f7ff fa5c 	bl	800521c <memp_free>
 8005d64:	e002      	b.n	8005d6c <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fe ff72 	bl	8004c50 <mem_free>
        }
      }
      count++;
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	e001      	b.n	8005d7c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1a9      	bne.n	8005cd6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	0800f820 	.word	0x0800f820
 8005d90:	0800fa58 	.word	0x0800fa58
 8005d94:	0800f86c 	.word	0x0800f86c
 8005d98:	0800fa94 	.word	0x0800fa94
 8005d9c:	0800faac 	.word	0x0800faac
 8005da0:	0800fac4 	.word	0x0800fac4

08005da4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005db0:	e005      	b.n	8005dbe <pbuf_clen+0x1a>
    ++len;
 8005db2:	89fb      	ldrh	r3, [r7, #14]
 8005db4:	3301      	adds	r3, #1
 8005db6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1f6      	bne.n	8005db2 <pbuf_clen+0xe>
  }
  return len;
 8005dc4:	89fb      	ldrh	r3, [r7, #14]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d010      	beq.n	8005e04 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	89db      	ldrh	r3, [r3, #14]
 8005de6:	3301      	adds	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	89db      	ldrh	r3, [r3, #14]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <pbuf_ref+0x30>
 8005df6:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <pbuf_ref+0x38>)
 8005df8:	f240 3239 	movw	r2, #825	; 0x339
 8005dfc:	4904      	ldr	r1, [pc, #16]	; (8005e10 <pbuf_ref+0x3c>)
 8005dfe:	4805      	ldr	r0, [pc, #20]	; (8005e14 <pbuf_ref+0x40>)
 8005e00:	f008 f992 	bl	800e128 <iprintf>
  }
}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	0800f820 	.word	0x0800f820
 8005e10:	0800fae8 	.word	0x0800fae8
 8005e14:	0800f86c 	.word	0x0800f86c

08005e18 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <pbuf_cat+0x16>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d107      	bne.n	8005e3e <pbuf_cat+0x26>
 8005e2e:	4b20      	ldr	r3, [pc, #128]	; (8005eb0 <pbuf_cat+0x98>)
 8005e30:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8005e34:	491f      	ldr	r1, [pc, #124]	; (8005eb4 <pbuf_cat+0x9c>)
 8005e36:	4820      	ldr	r0, [pc, #128]	; (8005eb8 <pbuf_cat+0xa0>)
 8005e38:	f008 f976 	bl	800e128 <iprintf>
 8005e3c:	e034      	b.n	8005ea8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	e00a      	b.n	8005e5a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	891a      	ldrh	r2, [r3, #8]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	891b      	ldrh	r3, [r3, #8]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	891a      	ldrh	r2, [r3, #8]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	895b      	ldrh	r3, [r3, #10]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d006      	beq.n	8005e7c <pbuf_cat+0x64>
 8005e6e:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <pbuf_cat+0x98>)
 8005e70:	f240 3255 	movw	r2, #853	; 0x355
 8005e74:	4911      	ldr	r1, [pc, #68]	; (8005ebc <pbuf_cat+0xa4>)
 8005e76:	4810      	ldr	r0, [pc, #64]	; (8005eb8 <pbuf_cat+0xa0>)
 8005e78:	f008 f956 	bl	800e128 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d006      	beq.n	8005e92 <pbuf_cat+0x7a>
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <pbuf_cat+0x98>)
 8005e86:	f240 3256 	movw	r2, #854	; 0x356
 8005e8a:	490d      	ldr	r1, [pc, #52]	; (8005ec0 <pbuf_cat+0xa8>)
 8005e8c:	480a      	ldr	r0, [pc, #40]	; (8005eb8 <pbuf_cat+0xa0>)
 8005e8e:	f008 f94b 	bl	800e128 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	891a      	ldrh	r2, [r3, #8]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	891b      	ldrh	r3, [r3, #8]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	0800f820 	.word	0x0800f820
 8005eb4:	0800fafc 	.word	0x0800fafc
 8005eb8:	0800f86c 	.word	0x0800f86c
 8005ebc:	0800fb34 	.word	0x0800fb34
 8005ec0:	0800fb64 	.word	0x0800fb64

08005ec4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff ffa1 	bl	8005e18 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005ed6:	6838      	ldr	r0, [r7, #0]
 8005ed8:	f7ff ff7c 	bl	8005dd4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	81fb      	strh	r3, [r7, #14]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d008      	beq.n	8005f0e <pbuf_copy+0x2a>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <pbuf_copy+0x2a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	891a      	ldrh	r2, [r3, #8]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	891b      	ldrh	r3, [r3, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d209      	bcs.n	8005f22 <pbuf_copy+0x3e>
 8005f0e:	4b54      	ldr	r3, [pc, #336]	; (8006060 <pbuf_copy+0x17c>)
 8005f10:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8005f14:	4953      	ldr	r1, [pc, #332]	; (8006064 <pbuf_copy+0x180>)
 8005f16:	4854      	ldr	r0, [pc, #336]	; (8006068 <pbuf_copy+0x184>)
 8005f18:	f008 f906 	bl	800e128 <iprintf>
 8005f1c:	f06f 030f 	mvn.w	r3, #15
 8005f20:	e099      	b.n	8006056 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	895b      	ldrh	r3, [r3, #10]
 8005f26:	461a      	mov	r2, r3
 8005f28:	89fb      	ldrh	r3, [r7, #14]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	895b      	ldrh	r3, [r3, #10]
 8005f30:	4619      	mov	r1, r3
 8005f32:	89bb      	ldrh	r3, [r7, #12]
 8005f34:	1acb      	subs	r3, r1, r3
 8005f36:	429a      	cmp	r2, r3
 8005f38:	db05      	blt.n	8005f46 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	895a      	ldrh	r2, [r3, #10]
 8005f3e:	89bb      	ldrh	r3, [r7, #12]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	817b      	strh	r3, [r7, #10]
 8005f44:	e004      	b.n	8005f50 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	895a      	ldrh	r2, [r3, #10]
 8005f4a:	89fb      	ldrh	r3, [r7, #14]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	89fb      	ldrh	r3, [r7, #14]
 8005f56:	18d0      	adds	r0, r2, r3
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	89bb      	ldrh	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	897a      	ldrh	r2, [r7, #10]
 8005f62:	4619      	mov	r1, r3
 8005f64:	f007 ffea 	bl	800df3c <memcpy>
    offset_to += len;
 8005f68:	89fa      	ldrh	r2, [r7, #14]
 8005f6a:	897b      	ldrh	r3, [r7, #10]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8005f70:	89ba      	ldrh	r2, [r7, #12]
 8005f72:	897b      	ldrh	r3, [r7, #10]
 8005f74:	4413      	add	r3, r2
 8005f76:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	895b      	ldrh	r3, [r3, #10]
 8005f7c:	89fa      	ldrh	r2, [r7, #14]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d906      	bls.n	8005f90 <pbuf_copy+0xac>
 8005f82:	4b37      	ldr	r3, [pc, #220]	; (8006060 <pbuf_copy+0x17c>)
 8005f84:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005f88:	4938      	ldr	r1, [pc, #224]	; (800606c <pbuf_copy+0x188>)
 8005f8a:	4837      	ldr	r0, [pc, #220]	; (8006068 <pbuf_copy+0x184>)
 8005f8c:	f008 f8cc 	bl	800e128 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	895b      	ldrh	r3, [r3, #10]
 8005f94:	89ba      	ldrh	r2, [r7, #12]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d906      	bls.n	8005fa8 <pbuf_copy+0xc4>
 8005f9a:	4b31      	ldr	r3, [pc, #196]	; (8006060 <pbuf_copy+0x17c>)
 8005f9c:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005fa0:	4933      	ldr	r1, [pc, #204]	; (8006070 <pbuf_copy+0x18c>)
 8005fa2:	4831      	ldr	r0, [pc, #196]	; (8006068 <pbuf_copy+0x184>)
 8005fa4:	f008 f8c0 	bl	800e128 <iprintf>
    if (offset_from >= p_from->len) {
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	895b      	ldrh	r3, [r3, #10]
 8005fac:	89ba      	ldrh	r2, [r7, #12]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d304      	bcc.n	8005fbc <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	895b      	ldrh	r3, [r3, #10]
 8005fc0:	89fa      	ldrh	r2, [r7, #14]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d114      	bne.n	8005ff0 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10c      	bne.n	8005ff0 <pbuf_copy+0x10c>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d009      	beq.n	8005ff0 <pbuf_copy+0x10c>
 8005fdc:	4b20      	ldr	r3, [pc, #128]	; (8006060 <pbuf_copy+0x17c>)
 8005fde:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005fe2:	4924      	ldr	r1, [pc, #144]	; (8006074 <pbuf_copy+0x190>)
 8005fe4:	4820      	ldr	r0, [pc, #128]	; (8006068 <pbuf_copy+0x184>)
 8005fe6:	f008 f89f 	bl	800e128 <iprintf>
 8005fea:	f06f 030f 	mvn.w	r3, #15
 8005fee:	e032      	b.n	8006056 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d013      	beq.n	800601e <pbuf_copy+0x13a>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	895a      	ldrh	r2, [r3, #10]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	891b      	ldrh	r3, [r3, #8]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d10d      	bne.n	800601e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <pbuf_copy+0x13a>
 800600a:	4b15      	ldr	r3, [pc, #84]	; (8006060 <pbuf_copy+0x17c>)
 800600c:	f240 32dd 	movw	r2, #989	; 0x3dd
 8006010:	4919      	ldr	r1, [pc, #100]	; (8006078 <pbuf_copy+0x194>)
 8006012:	4815      	ldr	r0, [pc, #84]	; (8006068 <pbuf_copy+0x184>)
 8006014:	f008 f888 	bl	800e128 <iprintf>
 8006018:	f06f 0305 	mvn.w	r3, #5
 800601c:	e01b      	b.n	8006056 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d013      	beq.n	800604c <pbuf_copy+0x168>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	895a      	ldrh	r2, [r3, #10]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	891b      	ldrh	r3, [r3, #8]
 800602c:	429a      	cmp	r2, r3
 800602e:	d10d      	bne.n	800604c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d009      	beq.n	800604c <pbuf_copy+0x168>
 8006038:	4b09      	ldr	r3, [pc, #36]	; (8006060 <pbuf_copy+0x17c>)
 800603a:	f240 32e2 	movw	r2, #994	; 0x3e2
 800603e:	490e      	ldr	r1, [pc, #56]	; (8006078 <pbuf_copy+0x194>)
 8006040:	4809      	ldr	r0, [pc, #36]	; (8006068 <pbuf_copy+0x184>)
 8006042:	f008 f871 	bl	800e128 <iprintf>
 8006046:	f06f 0305 	mvn.w	r3, #5
 800604a:	e004      	b.n	8006056 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f47f af67 	bne.w	8005f22 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	0800f820 	.word	0x0800f820
 8006064:	0800fbb0 	.word	0x0800fbb0
 8006068:	0800f86c 	.word	0x0800f86c
 800606c:	0800fbe0 	.word	0x0800fbe0
 8006070:	0800fbf8 	.word	0x0800fbf8
 8006074:	0800fc14 	.word	0x0800fc14
 8006078:	0800fc24 	.word	0x0800fc24

0800607c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4611      	mov	r1, r2
 8006088:	461a      	mov	r2, r3
 800608a:	460b      	mov	r3, r1
 800608c:	80fb      	strh	r3, [r7, #6]
 800608e:	4613      	mov	r3, r2
 8006090:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d108      	bne.n	80060ae <pbuf_copy_partial+0x32>
 800609c:	4b30      	ldr	r3, [pc, #192]	; (8006160 <pbuf_copy_partial+0xe4>)
 800609e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80060a2:	4930      	ldr	r1, [pc, #192]	; (8006164 <pbuf_copy_partial+0xe8>)
 80060a4:	4830      	ldr	r0, [pc, #192]	; (8006168 <pbuf_copy_partial+0xec>)
 80060a6:	f008 f83f 	bl	800e128 <iprintf>
 80060aa:	2300      	movs	r3, #0
 80060ac:	e054      	b.n	8006158 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d108      	bne.n	80060c6 <pbuf_copy_partial+0x4a>
 80060b4:	4b2a      	ldr	r3, [pc, #168]	; (8006160 <pbuf_copy_partial+0xe4>)
 80060b6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80060ba:	492c      	ldr	r1, [pc, #176]	; (800616c <pbuf_copy_partial+0xf0>)
 80060bc:	482a      	ldr	r0, [pc, #168]	; (8006168 <pbuf_copy_partial+0xec>)
 80060be:	f008 f833 	bl	800e128 <iprintf>
 80060c2:	2300      	movs	r3, #0
 80060c4:	e048      	b.n	8006158 <pbuf_copy_partial+0xdc>

  left = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <pbuf_copy_partial+0x5a>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <pbuf_copy_partial+0x5e>
    return 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e03e      	b.n	8006158 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	e034      	b.n	800614a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80060e0:	88bb      	ldrh	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <pbuf_copy_partial+0x80>
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	895b      	ldrh	r3, [r3, #10]
 80060ea:	88ba      	ldrh	r2, [r7, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d305      	bcc.n	80060fc <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	895b      	ldrh	r3, [r3, #10]
 80060f4:	88ba      	ldrh	r2, [r7, #4]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	80bb      	strh	r3, [r7, #4]
 80060fa:	e023      	b.n	8006144 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	895a      	ldrh	r2, [r3, #10]
 8006100:	88bb      	ldrh	r3, [r7, #4]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006106:	8b3a      	ldrh	r2, [r7, #24]
 8006108:	88fb      	ldrh	r3, [r7, #6]
 800610a:	429a      	cmp	r2, r3
 800610c:	d901      	bls.n	8006112 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8006112:	8b7b      	ldrh	r3, [r7, #26]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	18d0      	adds	r0, r2, r3
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	88bb      	ldrh	r3, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	8b3a      	ldrh	r2, [r7, #24]
 8006122:	4619      	mov	r1, r3
 8006124:	f007 ff0a 	bl	800df3c <memcpy>
      copied_total += buf_copy_len;
 8006128:	8afa      	ldrh	r2, [r7, #22]
 800612a:	8b3b      	ldrh	r3, [r7, #24]
 800612c:	4413      	add	r3, r2
 800612e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8006130:	8b7a      	ldrh	r2, [r7, #26]
 8006132:	8b3b      	ldrh	r3, [r7, #24]
 8006134:	4413      	add	r3, r2
 8006136:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8006138:	88fa      	ldrh	r2, [r7, #6]
 800613a:	8b3b      	ldrh	r3, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <pbuf_copy_partial+0xda>
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1c4      	bne.n	80060e0 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8006156:	8afb      	ldrh	r3, [r7, #22]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	0800f820 	.word	0x0800f820
 8006164:	0800fc50 	.word	0x0800fc50
 8006168:	0800f86c 	.word	0x0800f86c
 800616c:	0800fc70 	.word	0x0800fc70

08006170 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006184:	f000 ff8c 	bl	80070a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <tcp_tmr+0x28>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	b2da      	uxtb	r2, r3
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <tcp_tmr+0x28>)
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <tcp_tmr+0x28>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80061a0:	f000 fcbc 	bl	8006b1c <tcp_slowtmr>
  }
}
 80061a4:	bf00      	nop
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20006d25 	.word	0x20006d25

080061ac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	e00a      	b.n	80061d2 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d102      	bne.n	80061cc <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1f1      	bne.n	80061bc <tcp_remove_listener+0x10>
      }
   }
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d105      	bne.n	8006202 <tcp_listen_closed+0x1a>
 80061f6:	4b13      	ldr	r3, [pc, #76]	; (8006244 <tcp_listen_closed+0x5c>)
 80061f8:	22c0      	movs	r2, #192	; 0xc0
 80061fa:	4913      	ldr	r1, [pc, #76]	; (8006248 <tcp_listen_closed+0x60>)
 80061fc:	4813      	ldr	r0, [pc, #76]	; (800624c <tcp_listen_closed+0x64>)
 80061fe:	f007 ff93 	bl	800e128 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	7d1b      	ldrb	r3, [r3, #20]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d005      	beq.n	8006216 <tcp_listen_closed+0x2e>
 800620a:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <tcp_listen_closed+0x5c>)
 800620c:	22c1      	movs	r2, #193	; 0xc1
 800620e:	4910      	ldr	r1, [pc, #64]	; (8006250 <tcp_listen_closed+0x68>)
 8006210:	480e      	ldr	r0, [pc, #56]	; (800624c <tcp_listen_closed+0x64>)
 8006212:	f007 ff89 	bl	800e128 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006216:	2301      	movs	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e00b      	b.n	8006234 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800621c:	4a0d      	ldr	r2, [pc, #52]	; (8006254 <tcp_listen_closed+0x6c>)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff ffbf 	bl	80061ac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d9f0      	bls.n	800621c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	0800fda4 	.word	0x0800fda4
 8006248:	0800fdd4 	.word	0x0800fdd4
 800624c:	0800fde0 	.word	0x0800fde0
 8006250:	0800fe08 	.word	0x0800fe08
 8006254:	080111e0 	.word	0x080111e0

08006258 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af02      	add	r7, sp, #8
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d075      	beq.n	8006356 <tcp_close_shutdown+0xfe>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	7d1b      	ldrb	r3, [r3, #20]
 800626e:	2b04      	cmp	r3, #4
 8006270:	d003      	beq.n	800627a <tcp_close_shutdown+0x22>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	7d1b      	ldrb	r3, [r3, #20]
 8006276:	2b07      	cmp	r3, #7
 8006278:	d16d      	bne.n	8006356 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <tcp_close_shutdown+0x34>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006286:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800628a:	d064      	beq.n	8006356 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	7e9b      	ldrb	r3, [r3, #26]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <tcp_close_shutdown+0x4e>
 8006298:	4b5b      	ldr	r3, [pc, #364]	; (8006408 <tcp_close_shutdown+0x1b0>)
 800629a:	f240 120f 	movw	r2, #271	; 0x10f
 800629e:	495b      	ldr	r1, [pc, #364]	; (800640c <tcp_close_shutdown+0x1b4>)
 80062a0:	485b      	ldr	r0, [pc, #364]	; (8006410 <tcp_close_shutdown+0x1b8>)
 80062a2:	f007 ff41 	bl	800e128 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80062ae:	687c      	ldr	r4, [r7, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	1d1d      	adds	r5, r3, #4
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	8adb      	ldrh	r3, [r3, #22]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	8b12      	ldrh	r2, [r2, #24]
 80062bc:	9201      	str	r2, [sp, #4]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	462b      	mov	r3, r5
 80062c2:	4622      	mov	r2, r4
 80062c4:	f004 fef0 	bl	800b0a8 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fa29 	bl	8007720 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80062ce:	4b51      	ldr	r3, [pc, #324]	; (8006414 <tcp_close_shutdown+0x1bc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d105      	bne.n	80062e4 <tcp_close_shutdown+0x8c>
 80062d8:	4b4e      	ldr	r3, [pc, #312]	; (8006414 <tcp_close_shutdown+0x1bc>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4a4d      	ldr	r2, [pc, #308]	; (8006414 <tcp_close_shutdown+0x1bc>)
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	e013      	b.n	800630c <tcp_close_shutdown+0xb4>
 80062e4:	4b4b      	ldr	r3, [pc, #300]	; (8006414 <tcp_close_shutdown+0x1bc>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e00c      	b.n	8006306 <tcp_close_shutdown+0xae>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d104      	bne.n	8006300 <tcp_close_shutdown+0xa8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	60da      	str	r2, [r3, #12]
 80062fe:	e005      	b.n	800630c <tcp_close_shutdown+0xb4>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1ef      	bne.n	80062ec <tcp_close_shutdown+0x94>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	60da      	str	r2, [r3, #12]
 8006312:	4b41      	ldr	r3, [pc, #260]	; (8006418 <tcp_close_shutdown+0x1c0>)
 8006314:	2201      	movs	r2, #1
 8006316:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	7d1b      	ldrb	r3, [r3, #20]
 800631c:	2b04      	cmp	r3, #4
 800631e:	d10c      	bne.n	800633a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	220a      	movs	r2, #10
 8006324:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006326:	4b3d      	ldr	r3, [pc, #244]	; (800641c <tcp_close_shutdown+0x1c4>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]
 800632e:	4a3b      	ldr	r2, [pc, #236]	; (800641c <tcp_close_shutdown+0x1c4>)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	f005 f900 	bl	800b538 <tcp_timer_needed>
 8006338:	e00b      	b.n	8006352 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800633a:	4b39      	ldr	r3, [pc, #228]	; (8006420 <tcp_close_shutdown+0x1c8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d102      	bne.n	800634a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8006344:	f003 fd50 	bl	8009de8 <tcp_trigger_input_pcb_close>
 8006348:	e003      	b.n	8006352 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	2001      	movs	r0, #1
 800634e:	f7fe ff65 	bl	800521c <memp_free>
        }
      }
      return ERR_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	e053      	b.n	80063fe <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	7d1b      	ldrb	r3, [r3, #20]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d03d      	beq.n	80063da <tcp_close_shutdown+0x182>
 800635e:	2b02      	cmp	r3, #2
 8006360:	dc47      	bgt.n	80063f2 <tcp_close_shutdown+0x19a>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <tcp_close_shutdown+0x114>
 8006366:	2b01      	cmp	r3, #1
 8006368:	d02b      	beq.n	80063c2 <tcp_close_shutdown+0x16a>
 800636a:	e042      	b.n	80063f2 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	8adb      	ldrh	r3, [r3, #22]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d021      	beq.n	80063b8 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006374:	4b2b      	ldr	r3, [pc, #172]	; (8006424 <tcp_close_shutdown+0x1cc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d105      	bne.n	800638a <tcp_close_shutdown+0x132>
 800637e:	4b29      	ldr	r3, [pc, #164]	; (8006424 <tcp_close_shutdown+0x1cc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4a27      	ldr	r2, [pc, #156]	; (8006424 <tcp_close_shutdown+0x1cc>)
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	e013      	b.n	80063b2 <tcp_close_shutdown+0x15a>
 800638a:	4b26      	ldr	r3, [pc, #152]	; (8006424 <tcp_close_shutdown+0x1cc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60bb      	str	r3, [r7, #8]
 8006390:	e00c      	b.n	80063ac <tcp_close_shutdown+0x154>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	429a      	cmp	r2, r3
 800639a:	d104      	bne.n	80063a6 <tcp_close_shutdown+0x14e>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	60da      	str	r2, [r3, #12]
 80063a4:	e005      	b.n	80063b2 <tcp_close_shutdown+0x15a>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	60bb      	str	r3, [r7, #8]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1ef      	bne.n	8006392 <tcp_close_shutdown+0x13a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	2001      	movs	r0, #1
 80063bc:	f7fe ff2e 	bl	800521c <memp_free>
    break;
 80063c0:	e01c      	b.n	80063fc <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff ff10 	bl	80061e8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4817      	ldr	r0, [pc, #92]	; (8006428 <tcp_close_shutdown+0x1d0>)
 80063cc:	f001 f9ea 	bl	80077a4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	2002      	movs	r0, #2
 80063d4:	f7fe ff22 	bl	800521c <memp_free>
    break;
 80063d8:	e010      	b.n	80063fc <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	480d      	ldr	r0, [pc, #52]	; (8006414 <tcp_close_shutdown+0x1bc>)
 80063de:	f001 f9e1 	bl	80077a4 <tcp_pcb_remove>
 80063e2:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <tcp_close_shutdown+0x1c0>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	2001      	movs	r0, #1
 80063ec:	f7fe ff16 	bl	800521c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80063f0:	e004      	b.n	80063fc <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f81a 	bl	800642c <tcp_close_shutdown_fin>
 80063f8:	4603      	mov	r3, r0
 80063fa:	e000      	b.n	80063fe <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bdb0      	pop	{r4, r5, r7, pc}
 8006406:	bf00      	nop
 8006408:	0800fda4 	.word	0x0800fda4
 800640c:	0800fe20 	.word	0x0800fe20
 8006410:	0800fde0 	.word	0x0800fde0
 8006414:	20006d1c 	.word	0x20006d1c
 8006418:	20006d24 	.word	0x20006d24
 800641c:	20006d20 	.word	0x20006d20
 8006420:	20006d5c 	.word	0x20006d5c
 8006424:	20006d14 	.word	0x20006d14
 8006428:	20006d18 	.word	0x20006d18

0800642c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <tcp_close_shutdown_fin+0x1c>
 800643a:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <tcp_close_shutdown_fin+0xc8>)
 800643c:	f240 124d 	movw	r2, #333	; 0x14d
 8006440:	492d      	ldr	r1, [pc, #180]	; (80064f8 <tcp_close_shutdown_fin+0xcc>)
 8006442:	482e      	ldr	r0, [pc, #184]	; (80064fc <tcp_close_shutdown_fin+0xd0>)
 8006444:	f007 fe70 	bl	800e128 <iprintf>

  switch (pcb->state) {
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	7d1b      	ldrb	r3, [r3, #20]
 800644c:	2b07      	cmp	r3, #7
 800644e:	d020      	beq.n	8006492 <tcp_close_shutdown_fin+0x66>
 8006450:	2b07      	cmp	r3, #7
 8006452:	dc2b      	bgt.n	80064ac <tcp_close_shutdown_fin+0x80>
 8006454:	2b03      	cmp	r3, #3
 8006456:	d002      	beq.n	800645e <tcp_close_shutdown_fin+0x32>
 8006458:	2b04      	cmp	r3, #4
 800645a:	d00d      	beq.n	8006478 <tcp_close_shutdown_fin+0x4c>
 800645c:	e026      	b.n	80064ac <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f003 fd4c 	bl	8009efc <tcp_send_fin>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d11f      	bne.n	80064b0 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2205      	movs	r2, #5
 8006474:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006476:	e01b      	b.n	80064b0 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f003 fd3f 	bl	8009efc <tcp_send_fin>
 800647e:	4603      	mov	r3, r0
 8006480:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d114      	bne.n	80064b4 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2205      	movs	r2, #5
 800648e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006490:	e010      	b.n	80064b4 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f003 fd32 	bl	8009efc <tcp_send_fin>
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800649c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2209      	movs	r2, #9
 80064a8:	751a      	strb	r2, [r3, #20]
    }
    break;
 80064aa:	e005      	b.n	80064b8 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e01c      	b.n	80064ea <tcp_close_shutdown_fin+0xbe>
    break;
 80064b0:	bf00      	nop
 80064b2:	e002      	b.n	80064ba <tcp_close_shutdown_fin+0x8e>
    break;
 80064b4:	bf00      	nop
 80064b6:	e000      	b.n	80064ba <tcp_close_shutdown_fin+0x8e>
    break;
 80064b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80064ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d103      	bne.n	80064ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f004 fb6c 	bl	800aba0 <tcp_output>
 80064c8:	e00d      	b.n	80064e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80064ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	d108      	bne.n	80064e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	7e9b      	ldrb	r3, [r3, #26]
 80064d8:	f043 0308 	orr.w	r3, r3, #8
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e001      	b.n	80064ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80064e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	0800fda4 	.word	0x0800fda4
 80064f8:	0800fdd4 	.word	0x0800fdd4
 80064fc:	0800fde0 	.word	0x0800fde0

08006500 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	7d1b      	ldrb	r3, [r3, #20]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d006      	beq.n	800651e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	7e9b      	ldrb	r3, [r3, #26]
 8006514:	f043 0310 	orr.w	r3, r3, #16
 8006518:	b2da      	uxtb	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800651e:	2101      	movs	r1, #1
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff fe99 	bl	8006258 <tcp_close_shutdown>
 8006526:	4603      	mov	r3, r0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08c      	sub	sp, #48	; 0x30
 8006534:	af02      	add	r7, sp, #8
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	7d1b      	ldrb	r3, [r3, #20]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d106      	bne.n	8006550 <tcp_abandon+0x20>
 8006542:	4b4d      	ldr	r3, [pc, #308]	; (8006678 <tcp_abandon+0x148>)
 8006544:	f240 12df 	movw	r2, #479	; 0x1df
 8006548:	494c      	ldr	r1, [pc, #304]	; (800667c <tcp_abandon+0x14c>)
 800654a:	484d      	ldr	r0, [pc, #308]	; (8006680 <tcp_abandon+0x150>)
 800654c:	f007 fdec 	bl	800e128 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	7d1b      	ldrb	r3, [r3, #20]
 8006554:	2b0a      	cmp	r3, #10
 8006556:	d108      	bne.n	800656a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	484a      	ldr	r0, [pc, #296]	; (8006684 <tcp_abandon+0x154>)
 800655c:	f001 f922 	bl	80077a4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	2001      	movs	r0, #1
 8006564:	f7fe fe5a 	bl	800521c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8006568:	e081      	b.n	800666e <tcp_abandon+0x13e>
    int send_rst = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006576:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006584:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	7d1b      	ldrb	r3, [r3, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d126      	bne.n	80065e2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8adb      	ldrh	r3, [r3, #22]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d02e      	beq.n	80065fa <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800659c:	4b3a      	ldr	r3, [pc, #232]	; (8006688 <tcp_abandon+0x158>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d105      	bne.n	80065b2 <tcp_abandon+0x82>
 80065a6:	4b38      	ldr	r3, [pc, #224]	; (8006688 <tcp_abandon+0x158>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4a36      	ldr	r2, [pc, #216]	; (8006688 <tcp_abandon+0x158>)
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	e013      	b.n	80065da <tcp_abandon+0xaa>
 80065b2:	4b35      	ldr	r3, [pc, #212]	; (8006688 <tcp_abandon+0x158>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	e00c      	b.n	80065d4 <tcp_abandon+0xa4>
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d104      	bne.n	80065ce <tcp_abandon+0x9e>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	60da      	str	r2, [r3, #12]
 80065cc:	e005      	b.n	80065da <tcp_abandon+0xaa>
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1ef      	bne.n	80065ba <tcp_abandon+0x8a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	60da      	str	r2, [r3, #12]
 80065e0:	e00b      	b.n	80065fa <tcp_abandon+0xca>
      send_rst = reset;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	8adb      	ldrh	r3, [r3, #22]
 80065ea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4827      	ldr	r0, [pc, #156]	; (800668c <tcp_abandon+0x15c>)
 80065f0:	f001 f8d8 	bl	80077a4 <tcp_pcb_remove>
 80065f4:	4b26      	ldr	r3, [pc, #152]	; (8006690 <tcp_abandon+0x160>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d004      	beq.n	800660c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fe17 	bl	800723a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006610:	2b00      	cmp	r3, #0
 8006612:	d004      	beq.n	800661e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fe0e 	bl	800723a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006622:	2b00      	cmp	r3, #0
 8006624:	d004      	beq.n	8006630 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fe05 	bl	800723a <tcp_segs_free>
    if (send_rst) {
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00c      	beq.n	8006650 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	1d19      	adds	r1, r3, #4
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8b1b      	ldrh	r3, [r3, #24]
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	460b      	mov	r3, r1
 8006648:	6979      	ldr	r1, [r7, #20]
 800664a:	69b8      	ldr	r0, [r7, #24]
 800664c:	f004 fd2c 	bl	800b0a8 <tcp_rst>
    last_state = pcb->state;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	7d1b      	ldrb	r3, [r3, #20]
 8006654:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	2001      	movs	r0, #1
 800665a:	f7fe fddf 	bl	800521c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <tcp_abandon+0x13e>
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f06f 010c 	mvn.w	r1, #12
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	4798      	blx	r3
}
 800666e:	bf00      	nop
 8006670:	3728      	adds	r7, #40	; 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	0800fda4 	.word	0x0800fda4
 800667c:	0800fe3c 	.word	0x0800fe3c
 8006680:	0800fde0 	.word	0x0800fde0
 8006684:	20006d20 	.word	0x20006d20
 8006688:	20006d14 	.word	0x20006d14
 800668c:	20006d1c 	.word	0x20006d1c
 8006690:	20006d24 	.word	0x20006d24

08006694 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800669c:	2101      	movs	r1, #1
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff ff46 	bl	8006530 <tcp_abandon>
}
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80066ba:	2304      	movs	r3, #4
 80066bc:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80066c4:	4b3c      	ldr	r3, [pc, #240]	; (80067b8 <tcp_bind+0x10c>)
 80066c6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <tcp_bind+0x28>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d102      	bne.n	80066da <tcp_bind+0x2e>
    return ERR_VAL;
 80066d4:	f06f 0305 	mvn.w	r3, #5
 80066d8:	e06a      	b.n	80067b0 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	7d1b      	ldrb	r3, [r3, #20]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d009      	beq.n	80066f6 <tcp_bind+0x4a>
 80066e2:	4b36      	ldr	r3, [pc, #216]	; (80067bc <tcp_bind+0x110>)
 80066e4:	f44f 7211 	mov.w	r2, #580	; 0x244
 80066e8:	4935      	ldr	r1, [pc, #212]	; (80067c0 <tcp_bind+0x114>)
 80066ea:	4836      	ldr	r0, [pc, #216]	; (80067c4 <tcp_bind+0x118>)
 80066ec:	f007 fd1c 	bl	800e128 <iprintf>
 80066f0:	f06f 0305 	mvn.w	r3, #5
 80066f4:	e05c      	b.n	80067b0 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d109      	bne.n	8006710 <tcp_bind+0x64>
    port = tcp_new_port();
 80066fc:	f000 f9ca 	bl	8006a94 <tcp_new_port>
 8006700:	4603      	mov	r3, r0
 8006702:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d135      	bne.n	8006776 <tcp_bind+0xca>
      return ERR_BUF;
 800670a:	f06f 0301 	mvn.w	r3, #1
 800670e:	e04f      	b.n	80067b0 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	e02b      	b.n	800676e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006716:	4a2c      	ldr	r2, [pc, #176]	; (80067c8 <tcp_bind+0x11c>)
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	e01e      	b.n	8006762 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	8adb      	ldrh	r3, [r3, #22]
 8006728:	88fa      	ldrh	r2, [r7, #6]
 800672a:	429a      	cmp	r2, r3
 800672c:	d116      	bne.n	800675c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800672e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006730:	2b00      	cmp	r3, #0
 8006732:	d010      	beq.n	8006756 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00c      	beq.n	8006756 <tcp_bind+0xaa>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d009      	beq.n	8006756 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006752:	429a      	cmp	r2, r3
 8006754:	d102      	bne.n	800675c <tcp_bind+0xb0>
              return ERR_USE;
 8006756:	f06f 0307 	mvn.w	r3, #7
 800675a:	e029      	b.n	80067b0 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1dd      	bne.n	8006724 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	3301      	adds	r3, #1
 800676c:	61fb      	str	r3, [r7, #28]
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	429a      	cmp	r2, r3
 8006774:	dbcf      	blt.n	8006716 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00c      	beq.n	8006796 <tcp_bind+0xea>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <tcp_bind+0xe4>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	e000      	b.n	8006792 <tcp_bind+0xe6>
 8006790:	2300      	movs	r3, #0
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	88fa      	ldrh	r2, [r7, #6]
 800679a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800679c:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <tcp_bind+0x120>)
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	60da      	str	r2, [r3, #12]
 80067a4:	4a09      	ldr	r2, [pc, #36]	; (80067cc <tcp_bind+0x120>)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	f004 fec5 	bl	800b538 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3720      	adds	r7, #32
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	08011208 	.word	0x08011208
 80067bc:	0800fda4 	.word	0x0800fda4
 80067c0:	0800fe70 	.word	0x0800fe70
 80067c4:	0800fde0 	.word	0x0800fde0
 80067c8:	080111e0 	.word	0x080111e0
 80067cc:	20006d14 	.word	0x20006d14

080067d0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4613      	mov	r3, r2
 80067dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 80067de:	68b8      	ldr	r0, [r7, #8]
 80067e0:	f7ff ff58 	bl	8006694 <tcp_abort>

  return ERR_ABRT;
 80067e4:	f06f 030c 	mvn.w	r3, #12
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	2200      	movs	r2, #0
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f806 	bl	8006814 <tcp_listen_with_backlog_and_err>
 8006808:	4603      	mov	r3, r0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	460b      	mov	r3, r1
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	7d1b      	ldrb	r3, [r3, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <tcp_listen_with_backlog_and_err+0x2e>
 800682e:	4b3f      	ldr	r3, [pc, #252]	; (800692c <tcp_listen_with_backlog_and_err+0x118>)
 8006830:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8006834:	493e      	ldr	r1, [pc, #248]	; (8006930 <tcp_listen_with_backlog_and_err+0x11c>)
 8006836:	483f      	ldr	r0, [pc, #252]	; (8006934 <tcp_listen_with_backlog_and_err+0x120>)
 8006838:	f007 fc76 	bl	800e128 <iprintf>
 800683c:	23f1      	movs	r3, #241	; 0xf1
 800683e:	76fb      	strb	r3, [r7, #27]
 8006840:	e069      	b.n	8006916 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	7d1b      	ldrb	r3, [r3, #20]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d104      	bne.n	8006854 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800684e:	23f7      	movs	r3, #247	; 0xf7
 8006850:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006852:	e060      	b.n	8006916 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006854:	2002      	movs	r0, #2
 8006856:	f7fe fc95 	bl	8005184 <memp_malloc>
 800685a:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d102      	bne.n	8006868 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8006862:	23ff      	movs	r3, #255	; 0xff
 8006864:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006866:	e056      	b.n	8006916 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8ada      	ldrh	r2, [r3, #22]
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	2201      	movs	r2, #1
 800687c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	7d5a      	ldrb	r2, [r3, #21]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	7a1a      	ldrb	r2, [r3, #8]
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	7a9a      	ldrb	r2, [r3, #10]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	7a5a      	ldrb	r2, [r3, #9]
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8adb      	ldrh	r3, [r3, #22]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d021      	beq.n	80068f2 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80068ae:	4b22      	ldr	r3, [pc, #136]	; (8006938 <tcp_listen_with_backlog_and_err+0x124>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d105      	bne.n	80068c4 <tcp_listen_with_backlog_and_err+0xb0>
 80068b8:	4b1f      	ldr	r3, [pc, #124]	; (8006938 <tcp_listen_with_backlog_and_err+0x124>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <tcp_listen_with_backlog_and_err+0x124>)
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	e013      	b.n	80068ec <tcp_listen_with_backlog_and_err+0xd8>
 80068c4:	4b1c      	ldr	r3, [pc, #112]	; (8006938 <tcp_listen_with_backlog_and_err+0x124>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	e00c      	b.n	80068e6 <tcp_listen_with_backlog_and_err+0xd2>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d104      	bne.n	80068e0 <tcp_listen_with_backlog_and_err+0xcc>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	e005      	b.n	80068ec <tcp_listen_with_backlog_and_err+0xd8>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ef      	bne.n	80068cc <tcp_listen_with_backlog_and_err+0xb8>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	2001      	movs	r0, #1
 80068f6:	f7fe fc91 	bl	800521c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	4a0f      	ldr	r2, [pc, #60]	; (800693c <tcp_listen_with_backlog_and_err+0x128>)
 80068fe:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006900:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <tcp_listen_with_backlog_and_err+0x12c>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	60da      	str	r2, [r3, #12]
 8006908:	4a0d      	ldr	r2, [pc, #52]	; (8006940 <tcp_listen_with_backlog_and_err+0x12c>)
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	f004 fe13 	bl	800b538 <tcp_timer_needed>
  res = ERR_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	7efa      	ldrb	r2, [r7, #27]
 8006920:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006922:	69fb      	ldr	r3, [r7, #28]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	0800fda4 	.word	0x0800fda4
 8006930:	0800fe98 	.word	0x0800fe98
 8006934:	0800fde0 	.word	0x0800fde0
 8006938:	20006d14 	.word	0x20006d14
 800693c:	080067d1 	.word	0x080067d1
 8006940:	20006d18 	.word	0x20006d18

08006944 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006954:	4413      	add	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006960:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006964:	bf28      	it	cs
 8006966:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800696a:	b292      	uxth	r2, r2
 800696c:	4413      	add	r3, r2
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	db08      	blt.n	8006988 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	e020      	b.n	80069ca <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	dd03      	ble.n	800699e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800699c:	e014      	b.n	80069c8 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b0:	d306      	bcc.n	80069c0 <tcp_update_rcv_ann_wnd+0x7c>
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <tcp_update_rcv_ann_wnd+0x90>)
 80069b4:	f44f 7242 	mov.w	r2, #776	; 0x308
 80069b8:	4907      	ldr	r1, [pc, #28]	; (80069d8 <tcp_update_rcv_ann_wnd+0x94>)
 80069ba:	4808      	ldr	r0, [pc, #32]	; (80069dc <tcp_update_rcv_ann_wnd+0x98>)
 80069bc:	f007 fbb4 	bl	800e128 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80069c8:	2300      	movs	r3, #0
  }
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	0800fda4 	.word	0x0800fda4
 80069d8:	0800febc 	.word	0x0800febc
 80069dc:	0800fde0 	.word	0x0800fde0

080069e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	7d1b      	ldrb	r3, [r3, #20]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d106      	bne.n	8006a02 <tcp_recved+0x22>
 80069f4:	4b23      	ldr	r3, [pc, #140]	; (8006a84 <tcp_recved+0xa4>)
 80069f6:	f240 321f 	movw	r2, #799	; 0x31f
 80069fa:	4923      	ldr	r1, [pc, #140]	; (8006a88 <tcp_recved+0xa8>)
 80069fc:	4823      	ldr	r0, [pc, #140]	; (8006a8c <tcp_recved+0xac>)
 80069fe:	f007 fb93 	bl	800e128 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006a06:	887b      	ldrh	r3, [r7, #2]
 8006a08:	4413      	add	r3, r2
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a14:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006a18:	d904      	bls.n	8006a24 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006a20:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a22:	e017      	b.n	8006a54 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d113      	bne.n	8006a54 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	7d1b      	ldrb	r3, [r3, #20]
 8006a30:	2b07      	cmp	r3, #7
 8006a32:	d003      	beq.n	8006a3c <tcp_recved+0x5c>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	7d1b      	ldrb	r3, [r3, #20]
 8006a38:	2b09      	cmp	r3, #9
 8006a3a:	d104      	bne.n	8006a46 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006a42:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a44:	e006      	b.n	8006a54 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <tcp_recved+0xa4>)
 8006a48:	f240 322d 	movw	r2, #813	; 0x32d
 8006a4c:	4910      	ldr	r1, [pc, #64]	; (8006a90 <tcp_recved+0xb0>)
 8006a4e:	480f      	ldr	r0, [pc, #60]	; (8006a8c <tcp_recved+0xac>)
 8006a50:	f007 fb6a 	bl	800e128 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ff75 	bl	8006944 <tcp_update_rcv_ann_wnd>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006a64:	db09      	blt.n	8006a7a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7e9b      	ldrb	r3, [r3, #26]
 8006a6a:	f043 0302 	orr.w	r3, r3, #2
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f004 f893 	bl	800aba0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	0800fda4 	.word	0x0800fda4
 8006a88:	0800fed8 	.word	0x0800fed8
 8006a8c:	0800fde0 	.word	0x0800fde0
 8006a90:	0800ff00 	.word	0x0800ff00

08006a94 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8006a9e:	4b1d      	ldr	r3, [pc, #116]	; (8006b14 <tcp_new_port+0x80>)
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	b291      	uxth	r1, r2
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <tcp_new_port+0x80>)
 8006aa8:	8011      	strh	r1, [r2, #0]
 8006aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d103      	bne.n	8006aba <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006ab2:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <tcp_new_port+0x80>)
 8006ab4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006ab8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006aba:	2300      	movs	r3, #0
 8006abc:	71fb      	strb	r3, [r7, #7]
 8006abe:	e01e      	b.n	8006afe <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <tcp_new_port+0x84>)
 8006ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	e011      	b.n	8006af2 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	8ada      	ldrh	r2, [r3, #22]
 8006ad2:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <tcp_new_port+0x80>)
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d108      	bne.n	8006aec <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006ada:	88bb      	ldrh	r3, [r7, #4]
 8006adc:	3301      	adds	r3, #1
 8006ade:	80bb      	strh	r3, [r7, #4]
 8006ae0:	88bb      	ldrh	r3, [r7, #4]
 8006ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ae6:	d3da      	bcc.n	8006a9e <tcp_new_port+0xa>
          return 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e00d      	b.n	8006b08 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	603b      	str	r3, [r7, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1ea      	bne.n	8006ace <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006af8:	79fb      	ldrb	r3, [r7, #7]
 8006afa:	3301      	adds	r3, #1
 8006afc:	71fb      	strb	r3, [r7, #7]
 8006afe:	79fb      	ldrb	r3, [r7, #7]
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d9dd      	bls.n	8006ac0 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006b04:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <tcp_new_port+0x80>)
 8006b06:	881b      	ldrh	r3, [r3, #0]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	20000096 	.word	0x20000096
 8006b18:	080111e0 	.word	0x080111e0

08006b1c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006b1c:	b5b0      	push	{r4, r5, r7, lr}
 8006b1e:	b08c      	sub	sp, #48	; 0x30
 8006b20:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8006b26:	4b97      	ldr	r3, [pc, #604]	; (8006d84 <tcp_slowtmr+0x268>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	4a95      	ldr	r2, [pc, #596]	; (8006d84 <tcp_slowtmr+0x268>)
 8006b2e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006b30:	4b95      	ldr	r3, [pc, #596]	; (8006d88 <tcp_slowtmr+0x26c>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	3301      	adds	r3, #1
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	4b93      	ldr	r3, [pc, #588]	; (8006d88 <tcp_slowtmr+0x26c>)
 8006b3a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8006b40:	4b92      	ldr	r3, [pc, #584]	; (8006d8c <tcp_slowtmr+0x270>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006b46:	e227      	b.n	8006f98 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	7d1b      	ldrb	r3, [r3, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d106      	bne.n	8006b5e <tcp_slowtmr+0x42>
 8006b50:	4b8f      	ldr	r3, [pc, #572]	; (8006d90 <tcp_slowtmr+0x274>)
 8006b52:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8006b56:	498f      	ldr	r1, [pc, #572]	; (8006d94 <tcp_slowtmr+0x278>)
 8006b58:	488f      	ldr	r0, [pc, #572]	; (8006d98 <tcp_slowtmr+0x27c>)
 8006b5a:	f007 fae5 	bl	800e128 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	7d1b      	ldrb	r3, [r3, #20]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d106      	bne.n	8006b74 <tcp_slowtmr+0x58>
 8006b66:	4b8a      	ldr	r3, [pc, #552]	; (8006d90 <tcp_slowtmr+0x274>)
 8006b68:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006b6c:	498b      	ldr	r1, [pc, #556]	; (8006d9c <tcp_slowtmr+0x280>)
 8006b6e:	488a      	ldr	r0, [pc, #552]	; (8006d98 <tcp_slowtmr+0x27c>)
 8006b70:	f007 fada 	bl	800e128 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	7d1b      	ldrb	r3, [r3, #20]
 8006b78:	2b0a      	cmp	r3, #10
 8006b7a:	d106      	bne.n	8006b8a <tcp_slowtmr+0x6e>
 8006b7c:	4b84      	ldr	r3, [pc, #528]	; (8006d90 <tcp_slowtmr+0x274>)
 8006b7e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006b82:	4987      	ldr	r1, [pc, #540]	; (8006da0 <tcp_slowtmr+0x284>)
 8006b84:	4884      	ldr	r0, [pc, #528]	; (8006d98 <tcp_slowtmr+0x27c>)
 8006b86:	f007 facf 	bl	800e128 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	7f5a      	ldrb	r2, [r3, #29]
 8006b8e:	4b7e      	ldr	r3, [pc, #504]	; (8006d88 <tcp_slowtmr+0x26c>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d103      	bne.n	8006b9e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8006b9c:	e1fc      	b.n	8006f98 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006b9e:	4b7a      	ldr	r3, [pc, #488]	; (8006d88 <tcp_slowtmr+0x26c>)
 8006ba0:	781a      	ldrb	r2, [r3, #0]
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	7d1b      	ldrb	r3, [r3, #20]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d108      	bne.n	8006bc8 <tcp_slowtmr+0xac>
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bbc:	2b05      	cmp	r3, #5
 8006bbe:	d903      	bls.n	8006bc8 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8006bc0:	7ffb      	ldrb	r3, [r7, #31]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	77fb      	strb	r3, [r7, #31]
 8006bc6:	e0a2      	b.n	8006d0e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bce:	2b0b      	cmp	r3, #11
 8006bd0:	d903      	bls.n	8006bda <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8006bd2:	7ffb      	ldrb	r3, [r7, #31]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	77fb      	strb	r3, [r7, #31]
 8006bd8:	e099      	b.n	8006d0e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d032      	beq.n	8006c4a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006bea:	3b01      	subs	r3, #1
 8006bec:	4a6d      	ldr	r2, [pc, #436]	; (8006da4 <tcp_slowtmr+0x288>)
 8006bee:	5cd3      	ldrb	r3, [r2, r3]
 8006bf0:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006bf8:	7cfa      	ldrb	r2, [r7, #19]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d907      	bls.n	8006c0e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006c04:	3301      	adds	r3, #1
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006c14:	7cfa      	ldrb	r2, [r7, #19]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d879      	bhi.n	8006d0e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8006c1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c1c:	f004 fbcb 	bl	800b3b6 <tcp_zero_window_probe>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d173      	bne.n	8006d0e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006c34:	2b06      	cmp	r3, #6
 8006c36:	d86a      	bhi.n	8006d0e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006c3e:	3301      	adds	r3, #1
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8006c48:	e061      	b.n	8006d0e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	db08      	blt.n	8006c66 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	b21a      	sxth	r2, r3
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d04f      	beq.n	8006d0e <tcp_slowtmr+0x1f2>
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	db47      	blt.n	8006d0e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	7d1b      	ldrb	r3, [r3, #20]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d018      	beq.n	8006cb8 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c8c:	2b0c      	cmp	r3, #12
 8006c8e:	bf28      	it	cs
 8006c90:	230c      	movcs	r3, #12
 8006c92:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006c9a:	10db      	asrs	r3, r3, #3
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006ca6:	4413      	add	r3, r2
 8006ca8:	7dfa      	ldrb	r2, [r7, #23]
 8006caa:	493f      	ldr	r1, [pc, #252]	; (8006da8 <tcp_slowtmr+0x28c>)
 8006cac:	5c8a      	ldrb	r2, [r1, r2]
 8006cae:	4093      	lsls	r3, r2
 8006cb0:	b21a      	sxth	r2, r3
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	2200      	movs	r2, #0
 8006cbc:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	bf28      	it	cs
 8006cce:	4613      	movcs	r3, r2
 8006cd0:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8006cd2:	8abb      	ldrh	r3, [r7, #20]
 8006cd4:	085b      	lsrs	r3, r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d206      	bcs.n	8006cfe <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8006d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d0a:	f004 fa43 	bl	800b194 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	7d1b      	ldrb	r3, [r3, #20]
 8006d12:	2b06      	cmp	r3, #6
 8006d14:	d10f      	bne.n	8006d36 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	7e9b      	ldrb	r3, [r3, #26]
 8006d1a:	f003 0310 	and.w	r3, r3, #16
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d009      	beq.n	8006d36 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d22:	4b18      	ldr	r3, [pc, #96]	; (8006d84 <tcp_slowtmr+0x268>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b28      	cmp	r3, #40	; 0x28
 8006d2e:	d902      	bls.n	8006d36 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006d30:	7ffb      	ldrb	r3, [r7, #31]
 8006d32:	3301      	adds	r3, #1
 8006d34:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	7a1b      	ldrb	r3, [r3, #8]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d05d      	beq.n	8006dfe <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d003      	beq.n	8006d52 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8006d4e:	2b07      	cmp	r3, #7
 8006d50:	d155      	bne.n	8006dfe <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d52:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <tcp_slowtmr+0x268>)
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d62:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006d66:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006d6a:	4910      	ldr	r1, [pc, #64]	; (8006dac <tcp_slowtmr+0x290>)
 8006d6c:	fba1 1303 	umull	r1, r3, r1, r3
 8006d70:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d91c      	bls.n	8006db0 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006d76:	7ffb      	ldrb	r3, [r7, #31]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8006d7c:	7fbb      	ldrb	r3, [r7, #30]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	77bb      	strb	r3, [r7, #30]
 8006d82:	e03c      	b.n	8006dfe <tcp_slowtmr+0x2e2>
 8006d84:	20006d10 	.word	0x20006d10
 8006d88:	20006d26 	.word	0x20006d26
 8006d8c:	20006d1c 	.word	0x20006d1c
 8006d90:	0800fda4 	.word	0x0800fda4
 8006d94:	0800ff54 	.word	0x0800ff54
 8006d98:	0800fde0 	.word	0x0800fde0
 8006d9c:	0800ff80 	.word	0x0800ff80
 8006da0:	0800ffac 	.word	0x0800ffac
 8006da4:	080111d8 	.word	0x080111d8
 8006da8:	080111c8 	.word	0x080111c8
 8006dac:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006db0:	4b97      	ldr	r3, [pc, #604]	; (8007010 <tcp_slowtmr+0x4f4>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	4b92      	ldr	r3, [pc, #584]	; (8007014 <tcp_slowtmr+0x4f8>)
 8006dca:	fb00 f303 	mul.w	r3, r0, r3
 8006dce:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8006dd0:	4991      	ldr	r1, [pc, #580]	; (8007018 <tcp_slowtmr+0x4fc>)
 8006dd2:	fba1 1303 	umull	r1, r3, r1, r3
 8006dd6:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d910      	bls.n	8006dfe <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8006ddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dde:	f004 faad 	bl	800b33c <tcp_keepalive>
 8006de2:	4603      	mov	r3, r0
 8006de4:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8006de6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d107      	bne.n	8006dfe <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006df4:	3301      	adds	r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d016      	beq.n	8006e34 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8006e06:	4b82      	ldr	r3, [pc, #520]	; (8007010 <tcp_slowtmr+0x4f4>)
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006e16:	4619      	mov	r1, r3
 8006e18:	460b      	mov	r3, r1
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	440b      	add	r3, r1
 8006e1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d307      	bcc.n	8006e34 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 fa06 	bl	800723a <tcp_segs_free>
      pcb->ooseq = NULL;
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	2200      	movs	r2, #0
 8006e32:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	7d1b      	ldrb	r3, [r3, #20]
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d109      	bne.n	8006e50 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e3c:	4b74      	ldr	r3, [pc, #464]	; (8007010 <tcp_slowtmr+0x4f4>)
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b28      	cmp	r3, #40	; 0x28
 8006e48:	d902      	bls.n	8006e50 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006e4a:	7ffb      	ldrb	r3, [r7, #31]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	7d1b      	ldrb	r3, [r3, #20]
 8006e54:	2b09      	cmp	r3, #9
 8006e56:	d109      	bne.n	8006e6c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006e58:	4b6d      	ldr	r3, [pc, #436]	; (8007010 <tcp_slowtmr+0x4f4>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2bf0      	cmp	r3, #240	; 0xf0
 8006e64:	d902      	bls.n	8006e6c <tcp_slowtmr+0x350>
        ++pcb_remove;
 8006e66:	7ffb      	ldrb	r3, [r7, #31]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006e6c:	7ffb      	ldrb	r3, [r7, #31]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d05d      	beq.n	8006f2e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e78:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e7c:	f000 fc50 	bl	8007720 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d010      	beq.n	8006ea8 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006e86:	4b65      	ldr	r3, [pc, #404]	; (800701c <tcp_slowtmr+0x500>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d106      	bne.n	8006e9e <tcp_slowtmr+0x382>
 8006e90:	4b63      	ldr	r3, [pc, #396]	; (8007020 <tcp_slowtmr+0x504>)
 8006e92:	f240 4289 	movw	r2, #1161	; 0x489
 8006e96:	4963      	ldr	r1, [pc, #396]	; (8007024 <tcp_slowtmr+0x508>)
 8006e98:	4863      	ldr	r0, [pc, #396]	; (8007028 <tcp_slowtmr+0x50c>)
 8006e9a:	f007 f945 	bl	800e128 <iprintf>
        prev->next = pcb->next;
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	60da      	str	r2, [r3, #12]
 8006ea6:	e00f      	b.n	8006ec8 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006ea8:	4b5c      	ldr	r3, [pc, #368]	; (800701c <tcp_slowtmr+0x500>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d006      	beq.n	8006ec0 <tcp_slowtmr+0x3a4>
 8006eb2:	4b5b      	ldr	r3, [pc, #364]	; (8007020 <tcp_slowtmr+0x504>)
 8006eb4:	f240 428d 	movw	r2, #1165	; 0x48d
 8006eb8:	495c      	ldr	r1, [pc, #368]	; (800702c <tcp_slowtmr+0x510>)
 8006eba:	485b      	ldr	r0, [pc, #364]	; (8007028 <tcp_slowtmr+0x50c>)
 8006ebc:	f007 f934 	bl	800e128 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4a55      	ldr	r2, [pc, #340]	; (800701c <tcp_slowtmr+0x500>)
 8006ec6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006ec8:	7fbb      	ldrb	r3, [r7, #30]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d010      	beq.n	8006ef0 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ed6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	1d1d      	adds	r5, r3, #4
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	8adb      	ldrh	r3, [r3, #22]
 8006ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee2:	8b12      	ldrh	r2, [r2, #24]
 8006ee4:	9201      	str	r2, [sp, #4]
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	462b      	mov	r3, r5
 8006eea:	4622      	mov	r2, r4
 8006eec:	f004 f8dc 	bl	800b0a8 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	7d1b      	ldrb	r3, [r3, #20]
 8006efa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	2001      	movs	r0, #1
 8006f0a:	f7fe f987 	bl	800521c <memp_free>

      tcp_active_pcbs_changed = 0;
 8006f0e:	4b48      	ldr	r3, [pc, #288]	; (8007030 <tcp_slowtmr+0x514>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <tcp_slowtmr+0x408>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f06f 010c 	mvn.w	r1, #12
 8006f20:	68b8      	ldr	r0, [r7, #8]
 8006f22:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006f24:	4b42      	ldr	r3, [pc, #264]	; (8007030 <tcp_slowtmr+0x514>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d035      	beq.n	8006f98 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8006f2c:	e606      	b.n	8006b3c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	7edb      	ldrb	r3, [r3, #27]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	7eda      	ldrb	r2, [r3, #27]
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	7f1b      	ldrb	r3, [r3, #28]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d323      	bcc.n	8006f98 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	2200      	movs	r2, #0
 8006f54:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006f56:	4b36      	ldr	r3, [pc, #216]	; (8007030 <tcp_slowtmr+0x514>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <tcp_slowtmr+0x460>
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6c:	6a3a      	ldr	r2, [r7, #32]
 8006f6e:	6912      	ldr	r2, [r2, #16]
 8006f70:	6a39      	ldr	r1, [r7, #32]
 8006f72:	4610      	mov	r0, r2
 8006f74:	4798      	blx	r3
 8006f76:	4603      	mov	r3, r0
 8006f78:	777b      	strb	r3, [r7, #29]
 8006f7a:	e001      	b.n	8006f80 <tcp_slowtmr+0x464>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006f80:	4b2b      	ldr	r3, [pc, #172]	; (8007030 <tcp_slowtmr+0x514>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d000      	beq.n	8006f8a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8006f88:	e5d8      	b.n	8006b3c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006f8a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d102      	bne.n	8006f98 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8006f92:	6a38      	ldr	r0, [r7, #32]
 8006f94:	f003 fe04 	bl	800aba0 <tcp_output>
  while (pcb != NULL) {
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f47f add4 	bne.w	8006b48 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8006fa4:	4b23      	ldr	r3, [pc, #140]	; (8007034 <tcp_slowtmr+0x518>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006faa:	e068      	b.n	800707e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	7d1b      	ldrb	r3, [r3, #20]
 8006fb0:	2b0a      	cmp	r3, #10
 8006fb2:	d006      	beq.n	8006fc2 <tcp_slowtmr+0x4a6>
 8006fb4:	4b1a      	ldr	r3, [pc, #104]	; (8007020 <tcp_slowtmr+0x504>)
 8006fb6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006fba:	491f      	ldr	r1, [pc, #124]	; (8007038 <tcp_slowtmr+0x51c>)
 8006fbc:	481a      	ldr	r0, [pc, #104]	; (8007028 <tcp_slowtmr+0x50c>)
 8006fbe:	f007 f8b3 	bl	800e128 <iprintf>
    pcb_remove = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006fc6:	4b12      	ldr	r3, [pc, #72]	; (8007010 <tcp_slowtmr+0x4f4>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2bf0      	cmp	r3, #240	; 0xf0
 8006fd2:	d902      	bls.n	8006fda <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8006fd4:	7ffb      	ldrb	r3, [r7, #31]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006fda:	7ffb      	ldrb	r3, [r7, #31]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d049      	beq.n	8007074 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fe2:	f000 fb9d 	bl	8007720 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d029      	beq.n	8007040 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006fec:	4b11      	ldr	r3, [pc, #68]	; (8007034 <tcp_slowtmr+0x518>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d106      	bne.n	8007004 <tcp_slowtmr+0x4e8>
 8006ff6:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <tcp_slowtmr+0x504>)
 8006ff8:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006ffc:	490f      	ldr	r1, [pc, #60]	; (800703c <tcp_slowtmr+0x520>)
 8006ffe:	480a      	ldr	r0, [pc, #40]	; (8007028 <tcp_slowtmr+0x50c>)
 8007000:	f007 f892 	bl	800e128 <iprintf>
        prev->next = pcb->next;
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	60da      	str	r2, [r3, #12]
 800700c:	e028      	b.n	8007060 <tcp_slowtmr+0x544>
 800700e:	bf00      	nop
 8007010:	20006d10 	.word	0x20006d10
 8007014:	000124f8 	.word	0x000124f8
 8007018:	10624dd3 	.word	0x10624dd3
 800701c:	20006d1c 	.word	0x20006d1c
 8007020:	0800fda4 	.word	0x0800fda4
 8007024:	0800ffdc 	.word	0x0800ffdc
 8007028:	0800fde0 	.word	0x0800fde0
 800702c:	08010008 	.word	0x08010008
 8007030:	20006d24 	.word	0x20006d24
 8007034:	20006d20 	.word	0x20006d20
 8007038:	08010034 	.word	0x08010034
 800703c:	08010064 	.word	0x08010064
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007040:	4b13      	ldr	r3, [pc, #76]	; (8007090 <tcp_slowtmr+0x574>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007046:	429a      	cmp	r2, r3
 8007048:	d006      	beq.n	8007058 <tcp_slowtmr+0x53c>
 800704a:	4b12      	ldr	r3, [pc, #72]	; (8007094 <tcp_slowtmr+0x578>)
 800704c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8007050:	4911      	ldr	r1, [pc, #68]	; (8007098 <tcp_slowtmr+0x57c>)
 8007052:	4812      	ldr	r0, [pc, #72]	; (800709c <tcp_slowtmr+0x580>)
 8007054:	f007 f868 	bl	800e128 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	4a0c      	ldr	r2, [pc, #48]	; (8007090 <tcp_slowtmr+0x574>)
 800705e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800706a:	69b9      	ldr	r1, [r7, #24]
 800706c:	2001      	movs	r0, #1
 800706e:	f7fe f8d5 	bl	800521c <memp_free>
 8007072:	e004      	b.n	800707e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	2b00      	cmp	r3, #0
 8007082:	d193      	bne.n	8006fac <tcp_slowtmr+0x490>
    }
  }
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	3728      	adds	r7, #40	; 0x28
 800708a:	46bd      	mov	sp, r7
 800708c:	bdb0      	pop	{r4, r5, r7, pc}
 800708e:	bf00      	nop
 8007090:	20006d20 	.word	0x20006d20
 8007094:	0800fda4 	.word	0x0800fda4
 8007098:	0801008c 	.word	0x0801008c
 800709c:	0800fde0 	.word	0x0800fde0

080070a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80070a6:	4b2d      	ldr	r3, [pc, #180]	; (800715c <tcp_fasttmr+0xbc>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	3301      	adds	r3, #1
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	4b2b      	ldr	r3, [pc, #172]	; (800715c <tcp_fasttmr+0xbc>)
 80070b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80070b2:	4b2b      	ldr	r3, [pc, #172]	; (8007160 <tcp_fasttmr+0xc0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80070b8:	e048      	b.n	800714c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	7f5a      	ldrb	r2, [r3, #29]
 80070be:	4b27      	ldr	r3, [pc, #156]	; (800715c <tcp_fasttmr+0xbc>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d03f      	beq.n	8007146 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80070c6:	4b25      	ldr	r3, [pc, #148]	; (800715c <tcp_fasttmr+0xbc>)
 80070c8:	781a      	ldrb	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	7e9b      	ldrb	r3, [r3, #26]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d010      	beq.n	80070fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	7e9b      	ldrb	r3, [r3, #26]
 80070de:	f043 0302 	orr.w	r3, r3, #2
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f003 fd59 	bl	800aba0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	7e9b      	ldrb	r3, [r3, #26]
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	7e9b      	ldrb	r3, [r3, #26]
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b00      	cmp	r3, #0
 8007106:	d009      	beq.n	800711c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	7e9b      	ldrb	r3, [r3, #26]
 800710c:	f023 0308 	bic.w	r3, r3, #8
 8007110:	b2da      	uxtb	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff f988 	bl	800642c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800712a:	4b0e      	ldr	r3, [pc, #56]	; (8007164 <tcp_fasttmr+0xc4>)
 800712c:	2200      	movs	r2, #0
 800712e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f819 	bl	8007168 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007136:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <tcp_fasttmr+0xc4>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d000      	beq.n	8007140 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800713e:	e7b8      	b.n	80070b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	607b      	str	r3, [r7, #4]
 8007144:	e002      	b.n	800714c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1b3      	bne.n	80070ba <tcp_fasttmr+0x1a>
    }
  }
}
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20006d26 	.word	0x20006d26
 8007160:	20006d1c 	.word	0x20006d1c
 8007164:	20006d24 	.word	0x20006d24

08007168 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007168:	b590      	push	{r4, r7, lr}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007174:	7b5b      	ldrb	r3, [r3, #13]
 8007176:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00b      	beq.n	80071a6 <tcp_process_refused_data+0x3e>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6918      	ldr	r0, [r3, #16]
 8007198:	2300      	movs	r3, #0
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	47a0      	blx	r4
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]
 80071a4:	e007      	b.n	80071b6 <tcp_process_refused_data+0x4e>
 80071a6:	2300      	movs	r3, #0
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	2000      	movs	r0, #0
 80071ae:	f000 f89c 	bl	80072ea <tcp_recv_null>
 80071b2:	4603      	mov	r3, r0
 80071b4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80071b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d12a      	bne.n	8007214 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d033      	beq.n	8007230 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071cc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80071d0:	d005      	beq.n	80071de <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d6:	3301      	adds	r3, #1
 80071d8:	b29a      	uxth	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <tcp_process_refused_data+0x98>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6918      	ldr	r0, [r3, #16]
 80071f2:	2300      	movs	r3, #0
 80071f4:	2200      	movs	r2, #0
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	47a0      	blx	r4
 80071fa:	4603      	mov	r3, r0
 80071fc:	73fb      	strb	r3, [r7, #15]
 80071fe:	e001      	b.n	8007204 <tcp_process_refused_data+0x9c>
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007208:	f113 0f0d 	cmn.w	r3, #13
 800720c:	d110      	bne.n	8007230 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800720e:	f06f 030c 	mvn.w	r3, #12
 8007212:	e00e      	b.n	8007232 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8007214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007218:	f113 0f0d 	cmn.w	r3, #13
 800721c:	d102      	bne.n	8007224 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800721e:	f06f 030c 	mvn.w	r3, #12
 8007222:	e006      	b.n	8007232 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800722a:	f06f 0304 	mvn.w	r3, #4
 800722e:	e000      	b.n	8007232 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	bd90      	pop	{r4, r7, pc}

0800723a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007242:	e007      	b.n	8007254 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f80a 	bl	8007264 <tcp_seg_free>
    seg = next;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1f4      	bne.n	8007244 <tcp_segs_free+0xa>
  }
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00c      	beq.n	800728c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d004      	beq.n	8007284 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe fcfc 	bl	8005c7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	2003      	movs	r0, #3
 8007288:	f7fd ffc8 	bl	800521c <memp_free>
  }
}
 800728c:	bf00      	nop
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	755a      	strb	r2, [r3, #21]
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80072ba:	2003      	movs	r0, #3
 80072bc:	f7fd ff62 	bl	8005184 <memp_malloc>
 80072c0:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <tcp_seg_copy+0x1a>
    return NULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e00a      	b.n	80072e2 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80072cc:	2210      	movs	r2, #16
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f006 fe33 	bl	800df3c <memcpy>
  pbuf_ref(cseg->p);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fd7a 	bl	8005dd4 <pbuf_ref>
  return cseg;
 80072e0:	68fb      	ldr	r3, [r7, #12]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	891b      	ldrh	r3, [r3, #8]
 8007302:	4619      	mov	r1, r3
 8007304:	68b8      	ldr	r0, [r7, #8]
 8007306:	f7ff fb6b 	bl	80069e0 <tcp_recved>
    pbuf_free(p);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7fe fcb6 	bl	8005c7c <pbuf_free>
 8007310:	e008      	b.n	8007324 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8007312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d104      	bne.n	8007324 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800731a:	68b8      	ldr	r0, [r7, #8]
 800731c:	f7ff f8f0 	bl	8006500 <tcp_close>
 8007320:	4603      	mov	r3, r0
 8007322:	e000      	b.n	8007326 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800733a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800733e:	2b00      	cmp	r3, #0
 8007340:	db01      	blt.n	8007346 <tcp_kill_prio+0x16>
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	e000      	b.n	8007348 <tcp_kill_prio+0x18>
 8007346:	237f      	movs	r3, #127	; 0x7f
 8007348:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800734e:	2300      	movs	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007352:	4b16      	ldr	r3, [pc, #88]	; (80073ac <tcp_kill_prio+0x7c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e01a      	b.n	8007390 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	7d5b      	ldrb	r3, [r3, #21]
 800735e:	7afa      	ldrb	r2, [r7, #11]
 8007360:	429a      	cmp	r2, r3
 8007362:	d312      	bcc.n	800738a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007364:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <tcp_kill_prio+0x80>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	429a      	cmp	r2, r3
 8007372:	d80a      	bhi.n	800738a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8007374:	4b0e      	ldr	r3, [pc, #56]	; (80073b0 <tcp_kill_prio+0x80>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	7d5b      	ldrb	r3, [r3, #21]
 8007388:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e1      	bne.n	800735a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800739c:	6938      	ldr	r0, [r7, #16]
 800739e:	f7ff f979 	bl	8006694 <tcp_abort>
  }
}
 80073a2:	bf00      	nop
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20006d1c 	.word	0x20006d1c
 80073b0:	20006d10 	.word	0x20006d10

080073b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	4603      	mov	r3, r0
 80073bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d009      	beq.n	80073d8 <tcp_kill_state+0x24>
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	2b09      	cmp	r3, #9
 80073c8:	d006      	beq.n	80073d8 <tcp_kill_state+0x24>
 80073ca:	4b1a      	ldr	r3, [pc, #104]	; (8007434 <tcp_kill_state+0x80>)
 80073cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80073d0:	4919      	ldr	r1, [pc, #100]	; (8007438 <tcp_kill_state+0x84>)
 80073d2:	481a      	ldr	r0, [pc, #104]	; (800743c <tcp_kill_state+0x88>)
 80073d4:	f006 fea8 	bl	800e128 <iprintf>

  inactivity = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073e0:	4b17      	ldr	r3, [pc, #92]	; (8007440 <tcp_kill_state+0x8c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	e017      	b.n	8007418 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	7d1b      	ldrb	r3, [r3, #20]
 80073ec:	79fa      	ldrb	r2, [r7, #7]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d10f      	bne.n	8007412 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80073f2:	4b14      	ldr	r3, [pc, #80]	; (8007444 <tcp_kill_state+0x90>)
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d807      	bhi.n	8007412 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007402:	4b10      	ldr	r3, [pc, #64]	; (8007444 <tcp_kill_state+0x90>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e4      	bne.n	80073e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007424:	2100      	movs	r1, #0
 8007426:	6938      	ldr	r0, [r7, #16]
 8007428:	f7ff f882 	bl	8006530 <tcp_abandon>
  }
}
 800742c:	bf00      	nop
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	0800fda4 	.word	0x0800fda4
 8007438:	080100b4 	.word	0x080100b4
 800743c:	0800fde0 	.word	0x0800fde0
 8007440:	20006d1c 	.word	0x20006d1c
 8007444:	20006d10 	.word	0x20006d10

08007448 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007456:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <tcp_kill_timewait+0x58>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	e012      	b.n	8007484 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800745e:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <tcp_kill_timewait+0x5c>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	429a      	cmp	r2, r3
 800746c:	d807      	bhi.n	800747e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <tcp_kill_timewait+0x5c>)
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e9      	bne.n	800745e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007490:	68b8      	ldr	r0, [r7, #8]
 8007492:	f7ff f8ff 	bl	8006694 <tcp_abort>
  }
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20006d20 	.word	0x20006d20
 80074a4:	20006d10 	.word	0x20006d10

080074a8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80074b2:	2001      	movs	r0, #1
 80074b4:	f7fd fe66 	bl	8005184 <memp_malloc>
 80074b8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d124      	bne.n	800750a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80074c0:	f7ff ffc2 	bl	8007448 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80074c4:	2001      	movs	r0, #1
 80074c6:	f7fd fe5d 	bl	8005184 <memp_malloc>
 80074ca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d11b      	bne.n	800750a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80074d2:	2009      	movs	r0, #9
 80074d4:	f7ff ff6e 	bl	80073b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80074d8:	2001      	movs	r0, #1
 80074da:	f7fd fe53 	bl	8005184 <memp_malloc>
 80074de:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d111      	bne.n	800750a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80074e6:	2008      	movs	r0, #8
 80074e8:	f7ff ff64 	bl	80073b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80074ec:	2001      	movs	r0, #1
 80074ee:	f7fd fe49 	bl	8005184 <memp_malloc>
 80074f2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d107      	bne.n	800750a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff ff17 	bl	8007330 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007502:	2001      	movs	r0, #1
 8007504:	f7fd fe3e 	bl	8005184 <memp_malloc>
 8007508:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d03f      	beq.n	8007590 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007510:	2298      	movs	r2, #152	; 0x98
 8007512:	2100      	movs	r1, #0
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f006 fd1f 	bl	800df58 <memset>
    pcb->prio = prio;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	79fa      	ldrb	r2, [r7, #7]
 800751e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007526:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007530:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	22ff      	movs	r2, #255	; 0xff
 800753e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007546:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2206      	movs	r2, #6
 800754c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2206      	movs	r2, #6
 8007554:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800755c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <tcp_alloc+0xf4>)
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <tcp_alloc+0xf8>)
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800757c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a08      	ldr	r2, [pc, #32]	; (80075a4 <tcp_alloc+0xfc>)
 8007584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4a07      	ldr	r2, [pc, #28]	; (80075a8 <tcp_alloc+0x100>)
 800758c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007590:	68fb      	ldr	r3, [r7, #12]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20006d10 	.word	0x20006d10
 80075a0:	20006d26 	.word	0x20006d26
 80075a4:	080072eb 	.word	0x080072eb
 80075a8:	006ddd00 	.word	0x006ddd00

080075ac <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80075b0:	2040      	movs	r0, #64	; 0x40
 80075b2:	f7ff ff79 	bl	80074a8 <tcp_alloc>
 80075b6:	4603      	mov	r3, r0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	bd80      	pop	{r7, pc}

080075bc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	611a      	str	r2, [r3, #16]
  }
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
	...

080075e0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00e      	beq.n	800760e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	7d1b      	ldrb	r3, [r3, #20]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d106      	bne.n	8007606 <tcp_recv+0x26>
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <tcp_recv+0x38>)
 80075fa:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80075fe:	4907      	ldr	r1, [pc, #28]	; (800761c <tcp_recv+0x3c>)
 8007600:	4807      	ldr	r0, [pc, #28]	; (8007620 <tcp_recv+0x40>)
 8007602:	f006 fd91 	bl	800e128 <iprintf>
    pcb->recv = recv;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	0800fda4 	.word	0x0800fda4
 800761c:	080100c4 	.word	0x080100c4
 8007620:	0800fde0 	.word	0x0800fde0

08007624 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00d      	beq.n	8007650 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	7d1b      	ldrb	r3, [r3, #20]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d106      	bne.n	800764a <tcp_sent+0x26>
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <tcp_sent+0x34>)
 800763e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8007642:	4906      	ldr	r1, [pc, #24]	; (800765c <tcp_sent+0x38>)
 8007644:	4806      	ldr	r0, [pc, #24]	; (8007660 <tcp_sent+0x3c>)
 8007646:	f006 fd6f 	bl	800e128 <iprintf>
    pcb->sent = sent;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	0800fda4 	.word	0x0800fda4
 800765c:	080100ec 	.word	0x080100ec
 8007660:	0800fde0 	.word	0x0800fde0

08007664 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00e      	beq.n	8007692 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7d1b      	ldrb	r3, [r3, #20]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d106      	bne.n	800768a <tcp_err+0x26>
 800767c:	4b07      	ldr	r3, [pc, #28]	; (800769c <tcp_err+0x38>)
 800767e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8007682:	4907      	ldr	r1, [pc, #28]	; (80076a0 <tcp_err+0x3c>)
 8007684:	4807      	ldr	r0, [pc, #28]	; (80076a4 <tcp_err+0x40>)
 8007686:	f006 fd4f 	bl	800e128 <iprintf>
    pcb->errf = err;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8007692:	bf00      	nop
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	0800fda4 	.word	0x0800fda4
 80076a0:	08010114 	.word	0x08010114
 80076a4:	0800fde0 	.word	0x0800fde0

080076a8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d008      	beq.n	80076ca <tcp_accept+0x22>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	7d1b      	ldrb	r3, [r3, #20]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d104      	bne.n	80076ca <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	619a      	str	r2, [r3, #24]
  }
}
 80076ca:	bf00      	nop
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
	...

080076d8 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	4613      	mov	r3, r2
 80076e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	7d1b      	ldrb	r3, [r3, #20]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d106      	bne.n	80076fc <tcp_poll+0x24>
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <tcp_poll+0x3c>)
 80076f0:	f240 7203 	movw	r2, #1795	; 0x703
 80076f4:	4908      	ldr	r1, [pc, #32]	; (8007718 <tcp_poll+0x40>)
 80076f6:	4809      	ldr	r0, [pc, #36]	; (800771c <tcp_poll+0x44>)
 80076f8:	f006 fd16 	bl	800e128 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	79fa      	ldrb	r2, [r7, #7]
 8007708:	771a      	strb	r2, [r3, #28]
}
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	0800fda4 	.word	0x0800fda4
 8007718:	0801013c 	.word	0x0801013c
 800771c:	0800fde0 	.word	0x0800fde0

08007720 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	7d1b      	ldrb	r3, [r3, #20]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d034      	beq.n	800779a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007734:	2b0a      	cmp	r3, #10
 8007736:	d030      	beq.n	800779a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800773c:	2b01      	cmp	r3, #1
 800773e:	d02c      	beq.n	800779a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774c:	4618      	mov	r0, r3
 800774e:	f7fe fa95 	bl	8005c7c <pbuf_free>
      pcb->refused_data = NULL;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff fd6c 	bl	800723a <tcp_segs_free>
    pcb->ooseq = NULL;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800776e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff fd60 	bl	800723a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fd5b 	bl	800723a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	669a      	str	r2, [r3, #104]	; 0x68
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800779a:	bf00      	nop
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d105      	bne.n	80077c4 <tcp_pcb_remove+0x20>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	e013      	b.n	80077ec <tcp_pcb_remove+0x48>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	e00c      	b.n	80077e6 <tcp_pcb_remove+0x42>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d104      	bne.n	80077e0 <tcp_pcb_remove+0x3c>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	60da      	str	r2, [r3, #12]
 80077de:	e005      	b.n	80077ec <tcp_pcb_remove+0x48>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1ef      	bne.n	80077cc <tcp_pcb_remove+0x28>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2200      	movs	r2, #0
 80077f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80077f2:	6838      	ldr	r0, [r7, #0]
 80077f4:	f7ff ff94 	bl	8007720 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	7d1b      	ldrb	r3, [r3, #20]
 80077fc:	2b0a      	cmp	r3, #10
 80077fe:	d013      	beq.n	8007828 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8007804:	2b01      	cmp	r3, #1
 8007806:	d00f      	beq.n	8007828 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	7e9b      	ldrb	r3, [r3, #26]
 800780c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	7e9b      	ldrb	r3, [r3, #26]
 8007818:	f043 0302 	orr.w	r3, r3, #2
 800781c:	b2da      	uxtb	r2, r3
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007822:	6838      	ldr	r0, [r7, #0]
 8007824:	f003 f9bc 	bl	800aba0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	7d1b      	ldrb	r3, [r3, #20]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d020      	beq.n	8007872 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007834:	2b00      	cmp	r3, #0
 8007836:	d006      	beq.n	8007846 <tcp_pcb_remove+0xa2>
 8007838:	4b13      	ldr	r3, [pc, #76]	; (8007888 <tcp_pcb_remove+0xe4>)
 800783a:	f240 7253 	movw	r2, #1875	; 0x753
 800783e:	4913      	ldr	r1, [pc, #76]	; (800788c <tcp_pcb_remove+0xe8>)
 8007840:	4813      	ldr	r0, [pc, #76]	; (8007890 <tcp_pcb_remove+0xec>)
 8007842:	f006 fc71 	bl	800e128 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d006      	beq.n	800785c <tcp_pcb_remove+0xb8>
 800784e:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <tcp_pcb_remove+0xe4>)
 8007850:	f240 7254 	movw	r2, #1876	; 0x754
 8007854:	490f      	ldr	r1, [pc, #60]	; (8007894 <tcp_pcb_remove+0xf0>)
 8007856:	480e      	ldr	r0, [pc, #56]	; (8007890 <tcp_pcb_remove+0xec>)
 8007858:	f006 fc66 	bl	800e128 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	2b00      	cmp	r3, #0
 8007862:	d006      	beq.n	8007872 <tcp_pcb_remove+0xce>
 8007864:	4b08      	ldr	r3, [pc, #32]	; (8007888 <tcp_pcb_remove+0xe4>)
 8007866:	f240 7256 	movw	r2, #1878	; 0x756
 800786a:	490b      	ldr	r1, [pc, #44]	; (8007898 <tcp_pcb_remove+0xf4>)
 800786c:	4808      	ldr	r0, [pc, #32]	; (8007890 <tcp_pcb_remove+0xec>)
 800786e:	f006 fc5b 	bl	800e128 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2200      	movs	r2, #0
 8007876:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2200      	movs	r2, #0
 800787c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	0800fda4 	.word	0x0800fda4
 800788c:	0801015c 	.word	0x0801015c
 8007890:	0800fde0 	.word	0x0800fde0
 8007894:	08010174 	.word	0x08010174
 8007898:	08010190 	.word	0x08010190

0800789c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80078a4:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <tcp_next_iss+0x28>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	4b07      	ldr	r3, [pc, #28]	; (80078c8 <tcp_next_iss+0x2c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4413      	add	r3, r2
 80078ae:	4a05      	ldr	r2, [pc, #20]	; (80078c4 <tcp_next_iss+0x28>)
 80078b0:	6013      	str	r3, [r2, #0]
  return iss;
 80078b2:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <tcp_next_iss+0x28>)
 80078b4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20000098 	.word	0x20000098
 80078c8:	20006d10 	.word	0x20006d10

080078cc <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80078d8:	6838      	ldr	r0, [r7, #0]
 80078da:	f005 f97f 	bl	800cbdc <ip4_route>
 80078de:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	e010      	b.n	800790c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80078ee:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80078f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d008      	beq.n	800790a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80078f8:	897b      	ldrh	r3, [r7, #10]
 80078fa:	3b28      	subs	r3, #40	; 0x28
 80078fc:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80078fe:	893a      	ldrh	r2, [r7, #8]
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	4293      	cmp	r3, r2
 8007904:	bf28      	it	cs
 8007906:	4613      	movcs	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800790a:	88fb      	ldrh	r3, [r7, #6]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007922:	e011      	b.n	8007948 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	429a      	cmp	r2, r3
 800792e:	d108      	bne.n	8007942 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7fe feac 	bl	8006694 <tcp_abort>
      pcb = next;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	e002      	b.n	8007948 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1ea      	bne.n	8007924 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d02c      	beq.n	80079c2 <tcp_netif_ip_addr_changed+0x6a>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d028      	beq.n	80079c2 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007970:	4b16      	ldr	r3, [pc, #88]	; (80079cc <tcp_netif_ip_addr_changed+0x74>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff ffcc 	bl	8007914 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800797c:	4b14      	ldr	r3, [pc, #80]	; (80079d0 <tcp_netif_ip_addr_changed+0x78>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff ffc6 	bl	8007914 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d019      	beq.n	80079c2 <tcp_netif_ip_addr_changed+0x6a>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d015      	beq.n	80079c2 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007996:	4b0f      	ldr	r3, [pc, #60]	; (80079d4 <tcp_netif_ip_addr_changed+0x7c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	e00e      	b.n	80079bc <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d103      	bne.n	80079b8 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1ed      	bne.n	800799e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20006d1c 	.word	0x20006d1c
 80079d0:	20006d14 	.word	0x20006d14
 80079d4:	20006d18 	.word	0x20006d18

080079d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80079d8:	b590      	push	{r4, r7, lr}
 80079da:	b08b      	sub	sp, #44	; 0x2c
 80079dc:	af02      	add	r7, sp, #8
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	4a82      	ldr	r2, [pc, #520]	; (8007bf0 <tcp_input+0x218>)
 80079e8:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	895b      	ldrh	r3, [r3, #10]
 80079ee:	2b13      	cmp	r3, #19
 80079f0:	f240 8398 	bls.w	8008124 <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80079f4:	4b7f      	ldr	r3, [pc, #508]	; (8007bf4 <tcp_input+0x21c>)
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	4a7e      	ldr	r2, [pc, #504]	; (8007bf4 <tcp_input+0x21c>)
 80079fa:	6812      	ldr	r2, [r2, #0]
 80079fc:	4611      	mov	r1, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f005 fb68 	bl	800d0d4 <ip4_addr_isbroadcast_u32>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f040 838e 	bne.w	8008128 <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007a0c:	4b79      	ldr	r3, [pc, #484]	; (8007bf4 <tcp_input+0x21c>)
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007a14:	2be0      	cmp	r3, #224	; 0xe0
 8007a16:	f000 8387 	beq.w	8008128 <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8007a1a:	4b75      	ldr	r3, [pc, #468]	; (8007bf0 <tcp_input+0x218>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	899b      	ldrh	r3, [r3, #12]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fd f801 	bl	8004a2a <lwip_htons>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	0b1b      	lsrs	r3, r3, #12
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007a34:	7cbb      	ldrb	r3, [r7, #18]
 8007a36:	2b13      	cmp	r3, #19
 8007a38:	f240 8378 	bls.w	800812c <tcp_input+0x754>
 8007a3c:	7cbb      	ldrb	r3, [r7, #18]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	891b      	ldrh	r3, [r3, #8]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	f200 8371 	bhi.w	800812c <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007a4a:	7cbb      	ldrb	r3, [r7, #18]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b14      	subs	r3, #20
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	4b69      	ldr	r3, [pc, #420]	; (8007bf8 <tcp_input+0x220>)
 8007a54:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007a56:	4b69      	ldr	r3, [pc, #420]	; (8007bfc <tcp_input+0x224>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	895a      	ldrh	r2, [r3, #10]
 8007a60:	7cbb      	ldrb	r3, [r7, #18]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d30d      	bcc.n	8007a84 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007a68:	4b63      	ldr	r3, [pc, #396]	; (8007bf8 <tcp_input+0x220>)
 8007a6a:	881a      	ldrh	r2, [r3, #0]
 8007a6c:	4b64      	ldr	r3, [pc, #400]	; (8007c00 <tcp_input+0x228>)
 8007a6e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007a70:	7cbb      	ldrb	r3, [r7, #18]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	425b      	negs	r3, r3
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	b21b      	sxth	r3, r3
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7fe f8d9 	bl	8005c34 <pbuf_header>
 8007a82:	e055      	b.n	8007b30 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d105      	bne.n	8007a98 <tcp_input+0xc0>
 8007a8c:	4b5d      	ldr	r3, [pc, #372]	; (8007c04 <tcp_input+0x22c>)
 8007a8e:	22b2      	movs	r2, #178	; 0xb2
 8007a90:	495d      	ldr	r1, [pc, #372]	; (8007c08 <tcp_input+0x230>)
 8007a92:	485e      	ldr	r0, [pc, #376]	; (8007c0c <tcp_input+0x234>)
 8007a94:	f006 fb48 	bl	800e128 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8007a98:	f06f 0113 	mvn.w	r1, #19
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fe f8c9 	bl	8005c34 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	895a      	ldrh	r2, [r3, #10]
 8007aa6:	4b56      	ldr	r3, [pc, #344]	; (8007c00 <tcp_input+0x228>)
 8007aa8:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007aaa:	4b53      	ldr	r3, [pc, #332]	; (8007bf8 <tcp_input+0x220>)
 8007aac:	881a      	ldrh	r2, [r3, #0]
 8007aae:	4b54      	ldr	r3, [pc, #336]	; (8007c00 <tcp_input+0x228>)
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8007ab6:	4b52      	ldr	r3, [pc, #328]	; (8007c00 <tcp_input+0x228>)
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	425b      	negs	r3, r3
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	b21b      	sxth	r3, r3
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7fe f8b6 	bl	8005c34 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	895b      	ldrh	r3, [r3, #10]
 8007ace:	8a3a      	ldrh	r2, [r7, #16]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	f200 832d 	bhi.w	8008130 <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	4a47      	ldr	r2, [pc, #284]	; (8007bfc <tcp_input+0x224>)
 8007ade:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	8a3b      	ldrh	r3, [r7, #16]
 8007ae6:	425b      	negs	r3, r3
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	b21b      	sxth	r3, r3
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f7fe f8a0 	bl	8005c34 <pbuf_header>
    p->tot_len -= opt2len;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	891a      	ldrh	r2, [r3, #8]
 8007af8:	8a3b      	ldrh	r3, [r7, #16]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	895b      	ldrh	r3, [r3, #10]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d005      	beq.n	8007b16 <tcp_input+0x13e>
 8007b0a:	4b3e      	ldr	r3, [pc, #248]	; (8007c04 <tcp_input+0x22c>)
 8007b0c:	22cf      	movs	r2, #207	; 0xcf
 8007b0e:	4940      	ldr	r1, [pc, #256]	; (8007c10 <tcp_input+0x238>)
 8007b10:	483e      	ldr	r0, [pc, #248]	; (8007c0c <tcp_input+0x234>)
 8007b12:	f006 fb09 	bl	800e128 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	891a      	ldrh	r2, [r3, #8]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	891b      	ldrh	r3, [r3, #8]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d005      	beq.n	8007b30 <tcp_input+0x158>
 8007b24:	4b37      	ldr	r3, [pc, #220]	; (8007c04 <tcp_input+0x22c>)
 8007b26:	22d0      	movs	r2, #208	; 0xd0
 8007b28:	493a      	ldr	r1, [pc, #232]	; (8007c14 <tcp_input+0x23c>)
 8007b2a:	4838      	ldr	r0, [pc, #224]	; (8007c0c <tcp_input+0x234>)
 8007b2c:	f006 fafc 	bl	800e128 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007b30:	4b2f      	ldr	r3, [pc, #188]	; (8007bf0 <tcp_input+0x218>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4a2d      	ldr	r2, [pc, #180]	; (8007bf0 <tcp_input+0x218>)
 8007b3a:	6814      	ldr	r4, [r2, #0]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fc ff74 	bl	8004a2a <lwip_htons>
 8007b42:	4603      	mov	r3, r0
 8007b44:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007b46:	4b2a      	ldr	r3, [pc, #168]	; (8007bf0 <tcp_input+0x218>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	885b      	ldrh	r3, [r3, #2]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4a28      	ldr	r2, [pc, #160]	; (8007bf0 <tcp_input+0x218>)
 8007b50:	6814      	ldr	r4, [r2, #0]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fc ff69 	bl	8004a2a <lwip_htons>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007b5c:	4b24      	ldr	r3, [pc, #144]	; (8007bf0 <tcp_input+0x218>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	4a23      	ldr	r2, [pc, #140]	; (8007bf0 <tcp_input+0x218>)
 8007b64:	6814      	ldr	r4, [r2, #0]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fc ff6d 	bl	8004a46 <lwip_htonl>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	6063      	str	r3, [r4, #4]
 8007b70:	6863      	ldr	r3, [r4, #4]
 8007b72:	4a29      	ldr	r2, [pc, #164]	; (8007c18 <tcp_input+0x240>)
 8007b74:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007b76:	4b1e      	ldr	r3, [pc, #120]	; (8007bf0 <tcp_input+0x218>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	4a1c      	ldr	r2, [pc, #112]	; (8007bf0 <tcp_input+0x218>)
 8007b7e:	6814      	ldr	r4, [r2, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fc ff60 	bl	8004a46 <lwip_htonl>
 8007b86:	4603      	mov	r3, r0
 8007b88:	60a3      	str	r3, [r4, #8]
 8007b8a:	68a3      	ldr	r3, [r4, #8]
 8007b8c:	4a23      	ldr	r2, [pc, #140]	; (8007c1c <tcp_input+0x244>)
 8007b8e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007b90:	4b17      	ldr	r3, [pc, #92]	; (8007bf0 <tcp_input+0x218>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	89db      	ldrh	r3, [r3, #14]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <tcp_input+0x218>)
 8007b9a:	6814      	ldr	r4, [r2, #0]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fc ff44 	bl	8004a2a <lwip_htons>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007ba6:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <tcp_input+0x218>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	899b      	ldrh	r3, [r3, #12]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fc ff3b 	bl	8004a2a <lwip_htons>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	4b18      	ldr	r3, [pc, #96]	; (8007c20 <tcp_input+0x248>)
 8007bc0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	891a      	ldrh	r2, [r3, #8]
 8007bc6:	4b16      	ldr	r3, [pc, #88]	; (8007c20 <tcp_input+0x248>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	bf14      	ite	ne
 8007bd2:	2301      	movne	r3, #1
 8007bd4:	2300      	moveq	r3, #0
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4413      	add	r3, r2
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <tcp_input+0x24c>)
 8007be0:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007be6:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <tcp_input+0x250>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	61fb      	str	r3, [r7, #28]
 8007bec:	e082      	b.n	8007cf4 <tcp_input+0x31c>
 8007bee:	bf00      	nop
 8007bf0:	20006d38 	.word	0x20006d38
 8007bf4:	200037b4 	.word	0x200037b4
 8007bf8:	20006d3c 	.word	0x20006d3c
 8007bfc:	20006d40 	.word	0x20006d40
 8007c00:	20006d3e 	.word	0x20006d3e
 8007c04:	080101a8 	.word	0x080101a8
 8007c08:	080101dc 	.word	0x080101dc
 8007c0c:	080101ec 	.word	0x080101ec
 8007c10:	08010214 	.word	0x08010214
 8007c14:	08010220 	.word	0x08010220
 8007c18:	20006d48 	.word	0x20006d48
 8007c1c:	20006d4c 	.word	0x20006d4c
 8007c20:	20006d54 	.word	0x20006d54
 8007c24:	20006d52 	.word	0x20006d52
 8007c28:	20006d1c 	.word	0x20006d1c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	7d1b      	ldrb	r3, [r3, #20]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d105      	bne.n	8007c40 <tcp_input+0x268>
 8007c34:	4b6e      	ldr	r3, [pc, #440]	; (8007df0 <tcp_input+0x418>)
 8007c36:	22e2      	movs	r2, #226	; 0xe2
 8007c38:	496e      	ldr	r1, [pc, #440]	; (8007df4 <tcp_input+0x41c>)
 8007c3a:	486f      	ldr	r0, [pc, #444]	; (8007df8 <tcp_input+0x420>)
 8007c3c:	f006 fa74 	bl	800e128 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	7d1b      	ldrb	r3, [r3, #20]
 8007c44:	2b0a      	cmp	r3, #10
 8007c46:	d105      	bne.n	8007c54 <tcp_input+0x27c>
 8007c48:	4b69      	ldr	r3, [pc, #420]	; (8007df0 <tcp_input+0x418>)
 8007c4a:	22e3      	movs	r2, #227	; 0xe3
 8007c4c:	496b      	ldr	r1, [pc, #428]	; (8007dfc <tcp_input+0x424>)
 8007c4e:	486a      	ldr	r0, [pc, #424]	; (8007df8 <tcp_input+0x420>)
 8007c50:	f006 fa6a 	bl	800e128 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	7d1b      	ldrb	r3, [r3, #20]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d105      	bne.n	8007c68 <tcp_input+0x290>
 8007c5c:	4b64      	ldr	r3, [pc, #400]	; (8007df0 <tcp_input+0x418>)
 8007c5e:	22e4      	movs	r2, #228	; 0xe4
 8007c60:	4967      	ldr	r1, [pc, #412]	; (8007e00 <tcp_input+0x428>)
 8007c62:	4865      	ldr	r0, [pc, #404]	; (8007df8 <tcp_input+0x420>)
 8007c64:	f006 fa60 	bl	800e128 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	8b1a      	ldrh	r2, [r3, #24]
 8007c6c:	4b65      	ldr	r3, [pc, #404]	; (8007e04 <tcp_input+0x42c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d138      	bne.n	8007cea <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	8ada      	ldrh	r2, [r3, #22]
 8007c7c:	4b61      	ldr	r3, [pc, #388]	; (8007e04 <tcp_input+0x42c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	885b      	ldrh	r3, [r3, #2]
 8007c82:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d130      	bne.n	8007cea <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	4b5e      	ldr	r3, [pc, #376]	; (8007e08 <tcp_input+0x430>)
 8007c8e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d12a      	bne.n	8007cea <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	4b5b      	ldr	r3, [pc, #364]	; (8007e08 <tcp_input+0x430>)
 8007c9a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d124      	bne.n	8007cea <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d105      	bne.n	8007cb6 <tcp_input+0x2de>
 8007caa:	4b51      	ldr	r3, [pc, #324]	; (8007df0 <tcp_input+0x418>)
 8007cac:	22ec      	movs	r2, #236	; 0xec
 8007cae:	4957      	ldr	r1, [pc, #348]	; (8007e0c <tcp_input+0x434>)
 8007cb0:	4851      	ldr	r0, [pc, #324]	; (8007df8 <tcp_input+0x420>)
 8007cb2:	f006 fa39 	bl	800e128 <iprintf>
      if (prev != NULL) {
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00a      	beq.n	8007cd2 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007cc4:	4b52      	ldr	r3, [pc, #328]	; (8007e10 <tcp_input+0x438>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007ccc:	4a50      	ldr	r2, [pc, #320]	; (8007e10 <tcp_input+0x438>)
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d10f      	bne.n	8007cfc <tcp_input+0x324>
 8007cdc:	4b44      	ldr	r3, [pc, #272]	; (8007df0 <tcp_input+0x418>)
 8007cde:	22f4      	movs	r2, #244	; 0xf4
 8007ce0:	494c      	ldr	r1, [pc, #304]	; (8007e14 <tcp_input+0x43c>)
 8007ce2:	4845      	ldr	r0, [pc, #276]	; (8007df8 <tcp_input+0x420>)
 8007ce4:	f006 fa20 	bl	800e128 <iprintf>
      break;
 8007ce8:	e008      	b.n	8007cfc <tcp_input+0x324>
    }
    prev = pcb;
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	61fb      	str	r3, [r7, #28]
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d198      	bne.n	8007c2c <tcp_input+0x254>
 8007cfa:	e000      	b.n	8007cfe <tcp_input+0x326>
      break;
 8007cfc:	bf00      	nop
  }

  if (pcb == NULL) {
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f040 808f 	bne.w	8007e24 <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d06:	4b44      	ldr	r3, [pc, #272]	; (8007e18 <tcp_input+0x440>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	e02f      	b.n	8007d6e <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	7d1b      	ldrb	r3, [r3, #20]
 8007d12:	2b0a      	cmp	r3, #10
 8007d14:	d005      	beq.n	8007d22 <tcp_input+0x34a>
 8007d16:	4b36      	ldr	r3, [pc, #216]	; (8007df0 <tcp_input+0x418>)
 8007d18:	22fe      	movs	r2, #254	; 0xfe
 8007d1a:	4940      	ldr	r1, [pc, #256]	; (8007e1c <tcp_input+0x444>)
 8007d1c:	4836      	ldr	r0, [pc, #216]	; (8007df8 <tcp_input+0x420>)
 8007d1e:	f006 fa03 	bl	800e128 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	8b1a      	ldrh	r2, [r3, #24]
 8007d26:	4b37      	ldr	r3, [pc, #220]	; (8007e04 <tcp_input+0x42c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d11a      	bne.n	8007d68 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	8ada      	ldrh	r2, [r3, #22]
 8007d36:	4b33      	ldr	r3, [pc, #204]	; (8007e04 <tcp_input+0x42c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	885b      	ldrh	r3, [r3, #2]
 8007d3c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d112      	bne.n	8007d68 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	4b30      	ldr	r3, [pc, #192]	; (8007e08 <tcp_input+0x430>)
 8007d48:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d10c      	bne.n	8007d68 <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b2d      	ldr	r3, [pc, #180]	; (8007e08 <tcp_input+0x430>)
 8007d54:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d106      	bne.n	8007d68 <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8007d5a:	69f8      	ldr	r0, [r7, #28]
 8007d5c:	f000 fb16 	bl	800838c <tcp_timewait_input>
        pbuf_free(p);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7fd ff8b 	bl	8005c7c <pbuf_free>
        return;
 8007d66:	e1e9      	b.n	800813c <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	61fb      	str	r3, [r7, #28]
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1cc      	bne.n	8007d0e <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d78:	4b29      	ldr	r3, [pc, #164]	; (8007e20 <tcp_input+0x448>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	e019      	b.n	8007db4 <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	8ada      	ldrh	r2, [r3, #22]
 8007d84:	4b1f      	ldr	r3, [pc, #124]	; (8007e04 <tcp_input+0x42c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	885b      	ldrh	r3, [r3, #2]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d10c      	bne.n	8007daa <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	4b1c      	ldr	r3, [pc, #112]	; (8007e08 <tcp_input+0x430>)
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d00f      	beq.n	8007dbc <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00d      	beq.n	8007dbe <tcp_input+0x3e6>
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e2      	bne.n	8007d80 <tcp_input+0x3a8>
 8007dba:	e000      	b.n	8007dbe <tcp_input+0x3e6>
            break;
 8007dbc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d02f      	beq.n	8007e24 <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007dd2:	4b13      	ldr	r3, [pc, #76]	; (8007e20 <tcp_input+0x448>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007dda:	4a11      	ldr	r2, [pc, #68]	; (8007e20 <tcp_input+0x448>)
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8007de0:	6978      	ldr	r0, [r7, #20]
 8007de2:	f000 f9f3 	bl	80081cc <tcp_listen_input>
      pbuf_free(p);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fd ff48 	bl	8005c7c <pbuf_free>
      return;
 8007dec:	e1a6      	b.n	800813c <tcp_input+0x764>
 8007dee:	bf00      	nop
 8007df0:	080101a8 	.word	0x080101a8
 8007df4:	08010240 	.word	0x08010240
 8007df8:	080101ec 	.word	0x080101ec
 8007dfc:	08010268 	.word	0x08010268
 8007e00:	08010294 	.word	0x08010294
 8007e04:	20006d38 	.word	0x20006d38
 8007e08:	200037b4 	.word	0x200037b4
 8007e0c:	080102bc 	.word	0x080102bc
 8007e10:	20006d1c 	.word	0x20006d1c
 8007e14:	080102e8 	.word	0x080102e8
 8007e18:	20006d20 	.word	0x20006d20
 8007e1c:	08010314 	.word	0x08010314
 8007e20:	20006d18 	.word	0x20006d18
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 8156 	beq.w	80080d8 <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007e2c:	4b94      	ldr	r3, [pc, #592]	; (8008080 <tcp_input+0x6a8>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	891a      	ldrh	r2, [r3, #8]
 8007e36:	4b92      	ldr	r3, [pc, #584]	; (8008080 <tcp_input+0x6a8>)
 8007e38:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007e3a:	4a91      	ldr	r2, [pc, #580]	; (8008080 <tcp_input+0x6a8>)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007e40:	4b90      	ldr	r3, [pc, #576]	; (8008084 <tcp_input+0x6ac>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a8e      	ldr	r2, [pc, #568]	; (8008080 <tcp_input+0x6a8>)
 8007e46:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007e48:	4b8f      	ldr	r3, [pc, #572]	; (8008088 <tcp_input+0x6b0>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007e4e:	4b8f      	ldr	r3, [pc, #572]	; (800808c <tcp_input+0x6b4>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007e54:	4b8e      	ldr	r3, [pc, #568]	; (8008090 <tcp_input+0x6b8>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007e5a:	4b8e      	ldr	r3, [pc, #568]	; (8008094 <tcp_input+0x6bc>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f003 0308 	and.w	r3, r3, #8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d006      	beq.n	8007e74 <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	7b5b      	ldrb	r3, [r3, #13]
 8007e6a:	f043 0301 	orr.w	r3, r3, #1
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d017      	beq.n	8007eac <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007e7c:	69f8      	ldr	r0, [r7, #28]
 8007e7e:	f7ff f973 	bl	8007168 <tcp_process_refused_data>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f113 0f0d 	cmn.w	r3, #13
 8007e88:	d007      	beq.n	8007e9a <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00c      	beq.n	8007eac <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007e92:	4b81      	ldr	r3, [pc, #516]	; (8008098 <tcp_input+0x6c0>)
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d008      	beq.n	8007eac <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f040 80e2 	bne.w	8008068 <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007ea4:	69f8      	ldr	r0, [r7, #28]
 8007ea6:	f002 fe1f 	bl	800aae8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007eaa:	e0dd      	b.n	8008068 <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 8007eac:	4a7b      	ldr	r2, [pc, #492]	; (800809c <tcp_input+0x6c4>)
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007eb2:	69f8      	ldr	r0, [r7, #28]
 8007eb4:	f000 fad2 	bl	800845c <tcp_process>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007ebc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ec0:	f113 0f0d 	cmn.w	r3, #13
 8007ec4:	f000 80d2 	beq.w	800806c <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 8007ec8:	4b70      	ldr	r3, [pc, #448]	; (800808c <tcp_input+0x6b4>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d016      	beq.n	8007f02 <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d008      	beq.n	8007ef0 <tcp_input+0x518>
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	6912      	ldr	r2, [r2, #16]
 8007ee8:	f06f 010d 	mvn.w	r1, #13
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007ef0:	69f9      	ldr	r1, [r7, #28]
 8007ef2:	486b      	ldr	r0, [pc, #428]	; (80080a0 <tcp_input+0x6c8>)
 8007ef4:	f7ff fc56 	bl	80077a4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007ef8:	69f9      	ldr	r1, [r7, #28]
 8007efa:	2001      	movs	r0, #1
 8007efc:	f7fd f98e 	bl	800521c <memp_free>
 8007f00:	e0d7      	b.n	80080b2 <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007f06:	4b62      	ldr	r3, [pc, #392]	; (8008090 <tcp_input+0x6b8>)
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01b      	beq.n	8007f46 <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007f0e:	4b60      	ldr	r3, [pc, #384]	; (8008090 <tcp_input+0x6b8>)
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d009      	beq.n	8007f30 <tcp_input+0x558>
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	6910      	ldr	r0, [r2, #16]
 8007f24:	89fa      	ldrh	r2, [r7, #14]
 8007f26:	69f9      	ldr	r1, [r7, #28]
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	74fb      	strb	r3, [r7, #19]
 8007f2e:	e001      	b.n	8007f34 <tcp_input+0x55c>
 8007f30:	2300      	movs	r3, #0
 8007f32:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007f34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f38:	f113 0f0d 	cmn.w	r3, #13
 8007f3c:	f000 8098 	beq.w	8008070 <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007f40:	4b53      	ldr	r3, [pc, #332]	; (8008090 <tcp_input+0x6b8>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007f46:	69f8      	ldr	r0, [r7, #28]
 8007f48:	f000 f90e 	bl	8008168 <tcp_input_delayed_close>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f040 8090 	bne.w	8008074 <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007f54:	4b4c      	ldr	r3, [pc, #304]	; (8008088 <tcp_input+0x6b0>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d041      	beq.n	8007fe0 <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d006      	beq.n	8007f72 <tcp_input+0x59a>
 8007f64:	4b4f      	ldr	r3, [pc, #316]	; (80080a4 <tcp_input+0x6cc>)
 8007f66:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007f6a:	494f      	ldr	r1, [pc, #316]	; (80080a8 <tcp_input+0x6d0>)
 8007f6c:	484f      	ldr	r0, [pc, #316]	; (80080ac <tcp_input+0x6d4>)
 8007f6e:	f006 f8db 	bl	800e128 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	7e9b      	ldrb	r3, [r3, #26]
 8007f76:	f003 0310 	and.w	r3, r3, #16
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d008      	beq.n	8007f90 <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007f7e:	4b42      	ldr	r3, [pc, #264]	; (8008088 <tcp_input+0x6b0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fd fe7a 	bl	8005c7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007f88:	69f8      	ldr	r0, [r7, #28]
 8007f8a:	f7fe fb83 	bl	8006694 <tcp_abort>
            goto aborted;
 8007f8e:	e090      	b.n	80080b2 <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00c      	beq.n	8007fb4 <tcp_input+0x5dc>
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	6918      	ldr	r0, [r3, #16]
 8007fa4:	4b38      	ldr	r3, [pc, #224]	; (8008088 <tcp_input+0x6b0>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	69f9      	ldr	r1, [r7, #28]
 8007fac:	47a0      	blx	r4
 8007fae:	4603      	mov	r3, r0
 8007fb0:	74fb      	strb	r3, [r7, #19]
 8007fb2:	e008      	b.n	8007fc6 <tcp_input+0x5ee>
 8007fb4:	4b34      	ldr	r3, [pc, #208]	; (8008088 <tcp_input+0x6b0>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	69f9      	ldr	r1, [r7, #28]
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f7ff f994 	bl	80072ea <tcp_recv_null>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007fc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fca:	f113 0f0d 	cmn.w	r3, #13
 8007fce:	d053      	beq.n	8008078 <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007fd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007fd8:	4b2b      	ldr	r3, [pc, #172]	; (8008088 <tcp_input+0x6b0>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007fe0:	4b2a      	ldr	r3, [pc, #168]	; (800808c <tcp_input+0x6b4>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	f003 0320 	and.w	r3, r3, #32
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d030      	beq.n	800804e <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d009      	beq.n	8008008 <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff8:	7b5a      	ldrb	r2, [r3, #13]
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ffe:	f042 0220 	orr.w	r2, r2, #32
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	735a      	strb	r2, [r3, #13]
 8008006:	e022      	b.n	800804e <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008010:	d005      	beq.n	800801e <tcp_input+0x646>
              pcb->rcv_wnd++;
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008016:	3301      	adds	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <tcp_input+0x668>
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	6918      	ldr	r0, [r3, #16]
 8008032:	2300      	movs	r3, #0
 8008034:	2200      	movs	r2, #0
 8008036:	69f9      	ldr	r1, [r7, #28]
 8008038:	47a0      	blx	r4
 800803a:	4603      	mov	r3, r0
 800803c:	74fb      	strb	r3, [r7, #19]
 800803e:	e001      	b.n	8008044 <tcp_input+0x66c>
 8008040:	2300      	movs	r3, #0
 8008042:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008044:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008048:	f113 0f0d 	cmn.w	r3, #13
 800804c:	d016      	beq.n	800807c <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800804e:	4b13      	ldr	r3, [pc, #76]	; (800809c <tcp_input+0x6c4>)
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008054:	69f8      	ldr	r0, [r7, #28]
 8008056:	f000 f887 	bl	8008168 <tcp_input_delayed_close>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d127      	bne.n	80080b0 <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008060:	69f8      	ldr	r0, [r7, #28]
 8008062:	f002 fd9d 	bl	800aba0 <tcp_output>
 8008066:	e024      	b.n	80080b2 <tcp_input+0x6da>
        goto aborted;
 8008068:	bf00      	nop
 800806a:	e022      	b.n	80080b2 <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800806c:	bf00      	nop
 800806e:	e020      	b.n	80080b2 <tcp_input+0x6da>
              goto aborted;
 8008070:	bf00      	nop
 8008072:	e01e      	b.n	80080b2 <tcp_input+0x6da>
          goto aborted;
 8008074:	bf00      	nop
 8008076:	e01c      	b.n	80080b2 <tcp_input+0x6da>
            goto aborted;
 8008078:	bf00      	nop
 800807a:	e01a      	b.n	80080b2 <tcp_input+0x6da>
              goto aborted;
 800807c:	bf00      	nop
 800807e:	e018      	b.n	80080b2 <tcp_input+0x6da>
 8008080:	20006d28 	.word	0x20006d28
 8008084:	20006d38 	.word	0x20006d38
 8008088:	20006d58 	.word	0x20006d58
 800808c:	20006d55 	.word	0x20006d55
 8008090:	20006d50 	.word	0x20006d50
 8008094:	20006d54 	.word	0x20006d54
 8008098:	20006d52 	.word	0x20006d52
 800809c:	20006d5c 	.word	0x20006d5c
 80080a0:	20006d1c 	.word	0x20006d1c
 80080a4:	080101a8 	.word	0x080101a8
 80080a8:	08010344 	.word	0x08010344
 80080ac:	080101ec 	.word	0x080101ec
          goto aborted;
 80080b0:	bf00      	nop
    tcp_input_pcb = NULL;
 80080b2:	4b24      	ldr	r3, [pc, #144]	; (8008144 <tcp_input+0x76c>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80080b8:	4b23      	ldr	r3, [pc, #140]	; (8008148 <tcp_input+0x770>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80080be:	4b23      	ldr	r3, [pc, #140]	; (800814c <tcp_input+0x774>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d039      	beq.n	800813a <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 80080c6:	4b21      	ldr	r3, [pc, #132]	; (800814c <tcp_input+0x774>)
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fd fdd6 	bl	8005c7c <pbuf_free>
      inseg.p = NULL;
 80080d0:	4b1e      	ldr	r3, [pc, #120]	; (800814c <tcp_input+0x774>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80080d6:	e030      	b.n	800813a <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80080d8:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <tcp_input+0x778>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	899b      	ldrh	r3, [r3, #12]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fc fca2 	bl	8004a2a <lwip_htons>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d115      	bne.n	800811c <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80080f0:	4b18      	ldr	r3, [pc, #96]	; (8008154 <tcp_input+0x77c>)
 80080f2:	6818      	ldr	r0, [r3, #0]
 80080f4:	4b18      	ldr	r3, [pc, #96]	; (8008158 <tcp_input+0x780>)
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	461a      	mov	r2, r3
 80080fa:	4b18      	ldr	r3, [pc, #96]	; (800815c <tcp_input+0x784>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008100:	4b13      	ldr	r3, [pc, #76]	; (8008150 <tcp_input+0x778>)
 8008102:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008108:	4a11      	ldr	r2, [pc, #68]	; (8008150 <tcp_input+0x778>)
 800810a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800810c:	8812      	ldrh	r2, [r2, #0]
 800810e:	b292      	uxth	r2, r2
 8008110:	9201      	str	r2, [sp, #4]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	4b12      	ldr	r3, [pc, #72]	; (8008160 <tcp_input+0x788>)
 8008116:	4a13      	ldr	r2, [pc, #76]	; (8008164 <tcp_input+0x78c>)
 8008118:	f002 ffc6 	bl	800b0a8 <tcp_rst>
    pbuf_free(p);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7fd fdad 	bl	8005c7c <pbuf_free>
  return;
 8008122:	e00a      	b.n	800813a <tcp_input+0x762>
    goto dropped;
 8008124:	bf00      	nop
 8008126:	e004      	b.n	8008132 <tcp_input+0x75a>
    goto dropped;
 8008128:	bf00      	nop
 800812a:	e002      	b.n	8008132 <tcp_input+0x75a>
    goto dropped;
 800812c:	bf00      	nop
 800812e:	e000      	b.n	8008132 <tcp_input+0x75a>
      goto dropped;
 8008130:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fd fda2 	bl	8005c7c <pbuf_free>
 8008138:	e000      	b.n	800813c <tcp_input+0x764>
  return;
 800813a:	bf00      	nop
}
 800813c:	3724      	adds	r7, #36	; 0x24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd90      	pop	{r4, r7, pc}
 8008142:	bf00      	nop
 8008144:	20006d5c 	.word	0x20006d5c
 8008148:	20006d58 	.word	0x20006d58
 800814c:	20006d28 	.word	0x20006d28
 8008150:	20006d38 	.word	0x20006d38
 8008154:	20006d4c 	.word	0x20006d4c
 8008158:	20006d52 	.word	0x20006d52
 800815c:	20006d48 	.word	0x20006d48
 8008160:	200037c4 	.word	0x200037c4
 8008164:	200037c8 	.word	0x200037c8

08008168 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8008170:	4b14      	ldr	r3, [pc, #80]	; (80081c4 <tcp_input_delayed_close+0x5c>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b00      	cmp	r3, #0
 800817a:	d01d      	beq.n	80081b8 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7e9b      	ldrb	r3, [r3, #26]
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10d      	bne.n	80081a4 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d008      	beq.n	80081a4 <tcp_input_delayed_close+0x3c>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6912      	ldr	r2, [r2, #16]
 800819c:	f06f 010e 	mvn.w	r1, #14
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	4808      	ldr	r0, [pc, #32]	; (80081c8 <tcp_input_delayed_close+0x60>)
 80081a8:	f7ff fafc 	bl	80077a4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	2001      	movs	r0, #1
 80081b0:	f7fd f834 	bl	800521c <memp_free>
    return 1;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <tcp_input_delayed_close+0x52>
  }
  return 0;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20006d55 	.word	0x20006d55
 80081c8:	20006d1c 	.word	0x20006d1c

080081cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b088      	sub	sp, #32
 80081d0:	af02      	add	r7, sp, #8
 80081d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80081d4:	4b63      	ldr	r3, [pc, #396]	; (8008364 <tcp_listen_input+0x198>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f040 80bb 	bne.w	8008358 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80081e2:	4b60      	ldr	r3, [pc, #384]	; (8008364 <tcp_listen_input+0x198>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	f003 0310 	and.w	r3, r3, #16
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d016      	beq.n	800821c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80081ee:	4b5e      	ldr	r3, [pc, #376]	; (8008368 <tcp_listen_input+0x19c>)
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	4b5e      	ldr	r3, [pc, #376]	; (800836c <tcp_listen_input+0x1a0>)
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	4b5d      	ldr	r3, [pc, #372]	; (8008370 <tcp_listen_input+0x1a4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081fe:	4b5d      	ldr	r3, [pc, #372]	; (8008374 <tcp_listen_input+0x1a8>)
 8008200:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008202:	885b      	ldrh	r3, [r3, #2]
 8008204:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008206:	4a5b      	ldr	r2, [pc, #364]	; (8008374 <tcp_listen_input+0x1a8>)
 8008208:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800820a:	8812      	ldrh	r2, [r2, #0]
 800820c:	b292      	uxth	r2, r2
 800820e:	9201      	str	r2, [sp, #4]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	4b59      	ldr	r3, [pc, #356]	; (8008378 <tcp_listen_input+0x1ac>)
 8008214:	4a59      	ldr	r2, [pc, #356]	; (800837c <tcp_listen_input+0x1b0>)
 8008216:	f002 ff47 	bl	800b0a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800821a:	e09f      	b.n	800835c <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800821c:	4b51      	ldr	r3, [pc, #324]	; (8008364 <tcp_listen_input+0x198>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 8099 	beq.w	800835c <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	7d5b      	ldrb	r3, [r3, #21]
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff f93a 	bl	80074a8 <tcp_alloc>
 8008234:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d111      	bne.n	8008260 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00a      	beq.n	800825a <tcp_listen_input+0x8e>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6910      	ldr	r0, [r2, #16]
 800824c:	f04f 32ff 	mov.w	r2, #4294967295
 8008250:	2100      	movs	r1, #0
 8008252:	4798      	blx	r3
 8008254:	4603      	mov	r3, r0
 8008256:	73bb      	strb	r3, [r7, #14]
      return;
 8008258:	e081      	b.n	800835e <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800825a:	23f0      	movs	r3, #240	; 0xf0
 800825c:	73bb      	strb	r3, [r7, #14]
      return;
 800825e:	e07e      	b.n	800835e <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008260:	4b47      	ldr	r3, [pc, #284]	; (8008380 <tcp_listen_input+0x1b4>)
 8008262:	695a      	ldr	r2, [r3, #20]
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008268:	4b45      	ldr	r3, [pc, #276]	; (8008380 <tcp_listen_input+0x1b4>)
 800826a:	691a      	ldr	r2, [r3, #16]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8ada      	ldrh	r2, [r3, #22]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008278:	4b3e      	ldr	r3, [pc, #248]	; (8008374 <tcp_listen_input+0x1a8>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29a      	uxth	r2, r3
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2203      	movs	r2, #3
 8008288:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800828a:	4b39      	ldr	r3, [pc, #228]	; (8008370 <tcp_listen_input+0x1a4>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800829c:	6978      	ldr	r0, [r7, #20]
 800829e:	f7ff fafd 	bl	800789c <tcp_next_iss>
 80082a2:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80082bc:	4b2c      	ldr	r3, [pc, #176]	; (8008370 <tcp_listen_input+0x1a4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	1e5a      	subs	r2, r3, #1
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7a1b      	ldrb	r3, [r3, #8]
 80082d8:	f003 030c 	and.w	r3, r3, #12
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80082e2:	4b28      	ldr	r3, [pc, #160]	; (8008384 <tcp_listen_input+0x1b8>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	60da      	str	r2, [r3, #12]
 80082ea:	4a26      	ldr	r2, [pc, #152]	; (8008384 <tcp_listen_input+0x1b8>)
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	f003 f922 	bl	800b538 <tcp_timer_needed>
 80082f4:	4b24      	ldr	r3, [pc, #144]	; (8008388 <tcp_listen_input+0x1bc>)
 80082f6:	2201      	movs	r2, #1
 80082f8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80082fa:	6978      	ldr	r0, [r7, #20]
 80082fc:	f001 fd0e 	bl	8009d1c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008300:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <tcp_listen_input+0x1a8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	89db      	ldrh	r3, [r3, #14]
 8008306:	b29a      	uxth	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	3304      	adds	r3, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f7ff fad1 	bl	80078cc <tcp_eff_send_mss_impl>
 800832a:	4603      	mov	r3, r0
 800832c:	461a      	mov	r2, r3
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008332:	2112      	movs	r1, #18
 8008334:	6978      	ldr	r0, [r7, #20]
 8008336:	f002 fadb 	bl	800a8f0 <tcp_enqueue_flags>
 800833a:	4603      	mov	r3, r0
 800833c:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800833e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d004      	beq.n	8008350 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8008346:	2100      	movs	r1, #0
 8008348:	6978      	ldr	r0, [r7, #20]
 800834a:	f7fe f8f1 	bl	8006530 <tcp_abandon>
      return;
 800834e:	e006      	b.n	800835e <tcp_listen_input+0x192>
    tcp_output(npcb);
 8008350:	6978      	ldr	r0, [r7, #20]
 8008352:	f002 fc25 	bl	800aba0 <tcp_output>
  return;
 8008356:	e001      	b.n	800835c <tcp_listen_input+0x190>
    return;
 8008358:	bf00      	nop
 800835a:	e000      	b.n	800835e <tcp_listen_input+0x192>
  return;
 800835c:	bf00      	nop
}
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20006d54 	.word	0x20006d54
 8008368:	20006d4c 	.word	0x20006d4c
 800836c:	20006d52 	.word	0x20006d52
 8008370:	20006d48 	.word	0x20006d48
 8008374:	20006d38 	.word	0x20006d38
 8008378:	200037c4 	.word	0x200037c4
 800837c:	200037c8 	.word	0x200037c8
 8008380:	200037b4 	.word	0x200037b4
 8008384:	20006d1c 	.word	0x20006d1c
 8008388:	20006d24 	.word	0x20006d24

0800838c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af02      	add	r7, sp, #8
 8008392:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008394:	4b29      	ldr	r3, [pc, #164]	; (800843c <tcp_timewait_input+0xb0>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	d146      	bne.n	800842e <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80083a0:	4b26      	ldr	r3, [pc, #152]	; (800843c <tcp_timewait_input+0xb0>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d027      	beq.n	80083fc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80083ac:	4b24      	ldr	r3, [pc, #144]	; (8008440 <tcp_timewait_input+0xb4>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	db2a      	blt.n	8008410 <tcp_timewait_input+0x84>
 80083ba:	4b21      	ldr	r3, [pc, #132]	; (8008440 <tcp_timewait_input+0xb4>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80083c6:	440b      	add	r3, r1
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	dc20      	bgt.n	8008410 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80083ce:	4b1d      	ldr	r3, [pc, #116]	; (8008444 <tcp_timewait_input+0xb8>)
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	4b1d      	ldr	r3, [pc, #116]	; (8008448 <tcp_timewait_input+0xbc>)
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	4b19      	ldr	r3, [pc, #100]	; (8008440 <tcp_timewait_input+0xb4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083de:	4b1b      	ldr	r3, [pc, #108]	; (800844c <tcp_timewait_input+0xc0>)
 80083e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80083e2:	885b      	ldrh	r3, [r3, #2]
 80083e4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083e6:	4a19      	ldr	r2, [pc, #100]	; (800844c <tcp_timewait_input+0xc0>)
 80083e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80083ea:	8812      	ldrh	r2, [r2, #0]
 80083ec:	b292      	uxth	r2, r2
 80083ee:	9201      	str	r2, [sp, #4]
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	4b17      	ldr	r3, [pc, #92]	; (8008450 <tcp_timewait_input+0xc4>)
 80083f4:	4a17      	ldr	r2, [pc, #92]	; (8008454 <tcp_timewait_input+0xc8>)
 80083f6:	f002 fe57 	bl	800b0a8 <tcp_rst>
      return;
 80083fa:	e01b      	b.n	8008434 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 80083fc:	4b0f      	ldr	r3, [pc, #60]	; (800843c <tcp_timewait_input+0xb0>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008408:	4b13      	ldr	r3, [pc, #76]	; (8008458 <tcp_timewait_input+0xcc>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008410:	4b0d      	ldr	r3, [pc, #52]	; (8008448 <tcp_timewait_input+0xbc>)
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00c      	beq.n	8008432 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	7e9b      	ldrb	r3, [r3, #26]
 800841c:	f043 0302 	orr.w	r3, r3, #2
 8008420:	b2da      	uxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f002 fbba 	bl	800aba0 <tcp_output>
  }
  return;
 800842c:	e001      	b.n	8008432 <tcp_timewait_input+0xa6>
    return;
 800842e:	bf00      	nop
 8008430:	e000      	b.n	8008434 <tcp_timewait_input+0xa8>
  return;
 8008432:	bf00      	nop
}
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20006d54 	.word	0x20006d54
 8008440:	20006d48 	.word	0x20006d48
 8008444:	20006d4c 	.word	0x20006d4c
 8008448:	20006d52 	.word	0x20006d52
 800844c:	20006d38 	.word	0x20006d38
 8008450:	200037c4 	.word	0x200037c4
 8008454:	200037c8 	.word	0x200037c8
 8008458:	20006d10 	.word	0x20006d10

0800845c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08a      	sub	sp, #40	; 0x28
 8008460:	af02      	add	r7, sp, #8
 8008462:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008464:	2300      	movs	r3, #0
 8008466:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800846c:	4b93      	ldr	r3, [pc, #588]	; (80086bc <tcp_process+0x260>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d04e      	beq.n	8008516 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7d1b      	ldrb	r3, [r3, #20]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d108      	bne.n	8008492 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008484:	4b8e      	ldr	r3, [pc, #568]	; (80086c0 <tcp_process+0x264>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d123      	bne.n	80084d4 <tcp_process+0x78>
        acceptable = 1;
 800848c:	2301      	movs	r3, #1
 800848e:	76fb      	strb	r3, [r7, #27]
 8008490:	e020      	b.n	80084d4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008496:	4b8b      	ldr	r3, [pc, #556]	; (80086c4 <tcp_process+0x268>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d102      	bne.n	80084a4 <tcp_process+0x48>
        acceptable = 1;
 800849e:	2301      	movs	r3, #1
 80084a0:	76fb      	strb	r3, [r7, #27]
 80084a2:	e017      	b.n	80084d4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80084a4:	4b87      	ldr	r3, [pc, #540]	; (80086c4 <tcp_process+0x268>)
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	db10      	blt.n	80084d4 <tcp_process+0x78>
 80084b2:	4b84      	ldr	r3, [pc, #528]	; (80086c4 <tcp_process+0x268>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80084be:	440b      	add	r3, r1
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dc06      	bgt.n	80084d4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7e9b      	ldrb	r3, [r3, #26]
 80084ca:	f043 0302 	orr.w	r3, r3, #2
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80084d4:	7efb      	ldrb	r3, [r7, #27]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d01b      	beq.n	8008512 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	7d1b      	ldrb	r3, [r3, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d106      	bne.n	80084f0 <tcp_process+0x94>
 80084e2:	4b79      	ldr	r3, [pc, #484]	; (80086c8 <tcp_process+0x26c>)
 80084e4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80084e8:	4978      	ldr	r1, [pc, #480]	; (80086cc <tcp_process+0x270>)
 80084ea:	4879      	ldr	r0, [pc, #484]	; (80086d0 <tcp_process+0x274>)
 80084ec:	f005 fe1c 	bl	800e128 <iprintf>
      recv_flags |= TF_RESET;
 80084f0:	4b78      	ldr	r3, [pc, #480]	; (80086d4 <tcp_process+0x278>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f043 0308 	orr.w	r3, r3, #8
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	4b76      	ldr	r3, [pc, #472]	; (80086d4 <tcp_process+0x278>)
 80084fc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7e9b      	ldrb	r3, [r3, #26]
 8008502:	f023 0301 	bic.w	r3, r3, #1
 8008506:	b2da      	uxtb	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800850c:	f06f 030d 	mvn.w	r3, #13
 8008510:	e348      	b.n	8008ba4 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	e346      	b.n	8008ba4 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008516:	4b69      	ldr	r3, [pc, #420]	; (80086bc <tcp_process+0x260>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d010      	beq.n	8008544 <tcp_process+0xe8>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	7d1b      	ldrb	r3, [r3, #20]
 8008526:	2b02      	cmp	r3, #2
 8008528:	d00c      	beq.n	8008544 <tcp_process+0xe8>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	7d1b      	ldrb	r3, [r3, #20]
 800852e:	2b03      	cmp	r3, #3
 8008530:	d008      	beq.n	8008544 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7e9b      	ldrb	r3, [r3, #26]
 8008536:	f043 0302 	orr.w	r3, r3, #2
 800853a:	b2da      	uxtb	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	e32f      	b.n	8008ba4 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7e9b      	ldrb	r3, [r3, #26]
 8008548:	f003 0310 	and.w	r3, r3, #16
 800854c:	2b00      	cmp	r3, #0
 800854e:	d103      	bne.n	8008558 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008550:	4b61      	ldr	r3, [pc, #388]	; (80086d8 <tcp_process+0x27c>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 fbdb 	bl	8009d1c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	7d1b      	ldrb	r3, [r3, #20]
 800856a:	3b02      	subs	r3, #2
 800856c:	2b07      	cmp	r3, #7
 800856e:	f200 8309 	bhi.w	8008b84 <tcp_process+0x728>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <tcp_process+0x11c>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	08008599 	.word	0x08008599
 800857c:	0800878f 	.word	0x0800878f
 8008580:	080088e7 	.word	0x080088e7
 8008584:	08008911 	.word	0x08008911
 8008588:	08008a33 	.word	0x08008a33
 800858c:	080088e7 	.word	0x080088e7
 8008590:	08008abf 	.word	0x08008abf
 8008594:	08008b4f 	.word	0x08008b4f
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008598:	4b48      	ldr	r3, [pc, #288]	; (80086bc <tcp_process+0x260>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	f003 0310 	and.w	r3, r3, #16
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 80ca 	beq.w	800873a <tcp_process+0x2de>
 80085a6:	4b45      	ldr	r3, [pc, #276]	; (80086bc <tcp_process+0x260>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 80c3 	beq.w	800873a <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	4b41      	ldr	r3, [pc, #260]	; (80086c0 <tcp_process+0x264>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	f040 80bb 	bne.w	800873a <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 80085c4:	4b3f      	ldr	r3, [pc, #252]	; (80086c4 <tcp_process+0x268>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80085d6:	4b3a      	ldr	r3, [pc, #232]	; (80086c0 <tcp_process+0x264>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80085de:	4b3f      	ldr	r3, [pc, #252]	; (80086dc <tcp_process+0x280>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	89db      	ldrh	r3, [r3, #14]
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80085f8:	4b32      	ldr	r3, [pc, #200]	; (80086c4 <tcp_process+0x268>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	1e5a      	subs	r2, r3, #1
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2204      	movs	r2, #4
 8008606:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	4610      	mov	r0, r2
 8008614:	f7ff f95a 	bl	80078cc <tcp_eff_send_mss_impl>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	f241 121c 	movw	r2, #4380	; 0x111c
 800862a:	429a      	cmp	r2, r3
 800862c:	bf38      	it	cc
 800862e:	461a      	movcc	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4293      	cmp	r3, r2
 8008638:	bf28      	it	cs
 800863a:	4613      	movcs	r3, r2
 800863c:	b29a      	uxth	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <tcp_process+0x200>
 800864e:	4b1e      	ldr	r3, [pc, #120]	; (80086c8 <tcp_process+0x26c>)
 8008650:	f240 321a 	movw	r2, #794	; 0x31a
 8008654:	4922      	ldr	r1, [pc, #136]	; (80086e0 <tcp_process+0x284>)
 8008656:	481e      	ldr	r0, [pc, #120]	; (80086d0 <tcp_process+0x274>)
 8008658:	f005 fd66 	bl	800e128 <iprintf>
      --pcb->snd_queuelen;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008662:	3b01      	subs	r3, #1
 8008664:	b29a      	uxth	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008670:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d111      	bne.n	800869c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800867c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d106      	bne.n	8008692 <tcp_process+0x236>
 8008684:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <tcp_process+0x26c>)
 8008686:	f240 3222 	movw	r2, #802	; 0x322
 800868a:	4916      	ldr	r1, [pc, #88]	; (80086e4 <tcp_process+0x288>)
 800868c:	4810      	ldr	r0, [pc, #64]	; (80086d0 <tcp_process+0x274>)
 800868e:	f005 fd4b 	bl	800e128 <iprintf>
        pcb->unsent = rseg->next;
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	669a      	str	r2, [r3, #104]	; 0x68
 800869a:	e003      	b.n	80086a4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80086a4:	69f8      	ldr	r0, [r7, #28]
 80086a6:	f7fe fddd 	bl	8007264 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d11a      	bne.n	80086e8 <tcp_process+0x28c>
        pcb->rtime = -1;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80086ba:	e01c      	b.n	80086f6 <tcp_process+0x29a>
 80086bc:	20006d54 	.word	0x20006d54
 80086c0:	20006d4c 	.word	0x20006d4c
 80086c4:	20006d48 	.word	0x20006d48
 80086c8:	080101a8 	.word	0x080101a8
 80086cc:	08010360 	.word	0x08010360
 80086d0:	080101ec 	.word	0x080101ec
 80086d4:	20006d55 	.word	0x20006d55
 80086d8:	20006d10 	.word	0x20006d10
 80086dc:	20006d38 	.word	0x20006d38
 80086e0:	08010380 	.word	0x08010380
 80086e4:	08010398 	.word	0x08010398
      } else {
        pcb->rtime = 0;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00a      	beq.n	8008716 <tcp_process+0x2ba>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6910      	ldr	r0, [r2, #16]
 800870a:	2200      	movs	r2, #0
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	4798      	blx	r3
 8008710:	4603      	mov	r3, r0
 8008712:	76bb      	strb	r3, [r7, #26]
 8008714:	e001      	b.n	800871a <tcp_process+0x2be>
 8008716:	2300      	movs	r3, #0
 8008718:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800871a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800871e:	f113 0f0d 	cmn.w	r3, #13
 8008722:	d102      	bne.n	800872a <tcp_process+0x2ce>
        return ERR_ABRT;
 8008724:	f06f 030c 	mvn.w	r3, #12
 8008728:	e23c      	b.n	8008ba4 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7e9b      	ldrb	r3, [r3, #26]
 800872e:	f043 0302 	orr.w	r3, r3, #2
 8008732:	b2da      	uxtb	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8008738:	e226      	b.n	8008b88 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800873a:	4b93      	ldr	r3, [pc, #588]	; (8008988 <tcp_process+0x52c>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	f003 0310 	and.w	r3, r3, #16
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8220 	beq.w	8008b88 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008748:	4b90      	ldr	r3, [pc, #576]	; (800898c <tcp_process+0x530>)
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	4b90      	ldr	r3, [pc, #576]	; (8008990 <tcp_process+0x534>)
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	4b90      	ldr	r3, [pc, #576]	; (8008994 <tcp_process+0x538>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008758:	4b8f      	ldr	r3, [pc, #572]	; (8008998 <tcp_process+0x53c>)
 800875a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800875c:	885b      	ldrh	r3, [r3, #2]
 800875e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008760:	4a8d      	ldr	r2, [pc, #564]	; (8008998 <tcp_process+0x53c>)
 8008762:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008764:	8812      	ldrh	r2, [r2, #0]
 8008766:	b292      	uxth	r2, r2
 8008768:	9201      	str	r2, [sp, #4]
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	4b8b      	ldr	r3, [pc, #556]	; (800899c <tcp_process+0x540>)
 800876e:	4a8c      	ldr	r2, [pc, #560]	; (80089a0 <tcp_process+0x544>)
 8008770:	f002 fc9a 	bl	800b0a8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800877a:	2b05      	cmp	r3, #5
 800877c:	f200 8204 	bhi.w	8008b88 <tcp_process+0x72c>
        pcb->rtime = 0;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f002 fd04 	bl	800b194 <tcp_rexmit_rto>
    break;
 800878c:	e1fc      	b.n	8008b88 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800878e:	4b7e      	ldr	r3, [pc, #504]	; (8008988 <tcp_process+0x52c>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	f003 0310 	and.w	r3, r3, #16
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 8091 	beq.w	80088be <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800879c:	4b7b      	ldr	r3, [pc, #492]	; (800898c <tcp_process+0x530>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	3b01      	subs	r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	db71      	blt.n	8008890 <tcp_process+0x434>
 80087ac:	4b77      	ldr	r3, [pc, #476]	; (800898c <tcp_process+0x530>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	dc6a      	bgt.n	8008890 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2204      	movs	r2, #4
 80087be:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <tcp_process+0x384>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <tcp_process+0x384>
 80087d2:	4b74      	ldr	r3, [pc, #464]	; (80089a4 <tcp_process+0x548>)
 80087d4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80087d8:	4973      	ldr	r1, [pc, #460]	; (80089a8 <tcp_process+0x54c>)
 80087da:	4874      	ldr	r0, [pc, #464]	; (80089ac <tcp_process+0x550>)
 80087dc:	f005 fca4 	bl	800e128 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80087e8:	23fa      	movs	r3, #250	; 0xfa
 80087ea:	76bb      	strb	r3, [r7, #26]
 80087ec:	e011      	b.n	8008812 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <tcp_process+0x3b2>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	6910      	ldr	r0, [r2, #16]
 8008802:	2200      	movs	r2, #0
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4798      	blx	r3
 8008808:	4603      	mov	r3, r0
 800880a:	76bb      	strb	r3, [r7, #26]
 800880c:	e001      	b.n	8008812 <tcp_process+0x3b6>
 800880e:	23f0      	movs	r3, #240	; 0xf0
 8008810:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8008812:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800881a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800881e:	f113 0f0d 	cmn.w	r3, #13
 8008822:	d002      	beq.n	800882a <tcp_process+0x3ce>
            tcp_abort(pcb);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7fd ff35 	bl	8006694 <tcp_abort>
          }
          return ERR_ABRT;
 800882a:	f06f 030c 	mvn.w	r3, #12
 800882e:	e1b9      	b.n	8008ba4 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fa3d 	bl	8008cb0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8008836:	4b5e      	ldr	r3, [pc, #376]	; (80089b0 <tcp_process+0x554>)
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d005      	beq.n	800884a <tcp_process+0x3ee>
          recv_acked--;
 800883e:	4b5c      	ldr	r3, [pc, #368]	; (80089b0 <tcp_process+0x554>)
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	3b01      	subs	r3, #1
 8008844:	b29a      	uxth	r2, r3
 8008846:	4b5a      	ldr	r3, [pc, #360]	; (80089b0 <tcp_process+0x554>)
 8008848:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	f241 121c 	movw	r2, #4380	; 0x111c
 8008854:	429a      	cmp	r2, r3
 8008856:	bf38      	it	cc
 8008858:	461a      	movcc	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4293      	cmp	r3, r2
 8008862:	bf28      	it	cs
 8008864:	4613      	movcs	r3, r2
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800886e:	4b51      	ldr	r3, [pc, #324]	; (80089b4 <tcp_process+0x558>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	f003 0320 	and.w	r3, r3, #32
 8008876:	2b00      	cmp	r3, #0
 8008878:	d034      	beq.n	80088e4 <tcp_process+0x488>
          tcp_ack_now(pcb);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	7e9b      	ldrb	r3, [r3, #26]
 800887e:	f043 0302 	orr.w	r3, r3, #2
 8008882:	b2da      	uxtb	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2207      	movs	r2, #7
 800888c:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800888e:	e029      	b.n	80088e4 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008890:	4b3e      	ldr	r3, [pc, #248]	; (800898c <tcp_process+0x530>)
 8008892:	6818      	ldr	r0, [r3, #0]
 8008894:	4b3e      	ldr	r3, [pc, #248]	; (8008990 <tcp_process+0x534>)
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	4b3e      	ldr	r3, [pc, #248]	; (8008994 <tcp_process+0x538>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088a0:	4b3d      	ldr	r3, [pc, #244]	; (8008998 <tcp_process+0x53c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80088a4:	885b      	ldrh	r3, [r3, #2]
 80088a6:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088a8:	4a3b      	ldr	r2, [pc, #236]	; (8008998 <tcp_process+0x53c>)
 80088aa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80088ac:	8812      	ldrh	r2, [r2, #0]
 80088ae:	b292      	uxth	r2, r2
 80088b0:	9201      	str	r2, [sp, #4]
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	4b39      	ldr	r3, [pc, #228]	; (800899c <tcp_process+0x540>)
 80088b6:	4a3a      	ldr	r2, [pc, #232]	; (80089a0 <tcp_process+0x544>)
 80088b8:	f002 fbf6 	bl	800b0a8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80088bc:	e166      	b.n	8008b8c <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80088be:	4b32      	ldr	r3, [pc, #200]	; (8008988 <tcp_process+0x52c>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 8160 	beq.w	8008b8c <tcp_process+0x730>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	1e5a      	subs	r2, r3, #1
 80088d2:	4b30      	ldr	r3, [pc, #192]	; (8008994 <tcp_process+0x538>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	f040 8158 	bne.w	8008b8c <tcp_process+0x730>
      tcp_rexmit(pcb);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f002 fc8f 	bl	800b200 <tcp_rexmit>
    break;
 80088e2:	e153      	b.n	8008b8c <tcp_process+0x730>
 80088e4:	e152      	b.n	8008b8c <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f9e2 	bl	8008cb0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80088ec:	4b31      	ldr	r3, [pc, #196]	; (80089b4 <tcp_process+0x558>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 814b 	beq.w	8008b90 <tcp_process+0x734>
      tcp_ack_now(pcb);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	7e9b      	ldrb	r3, [r3, #26]
 80088fe:	f043 0302 	orr.w	r3, r3, #2
 8008902:	b2da      	uxtb	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2207      	movs	r2, #7
 800890c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800890e:	e13f      	b.n	8008b90 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f9cd 	bl	8008cb0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008916:	4b27      	ldr	r3, [pc, #156]	; (80089b4 <tcp_process+0x558>)
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	f003 0320 	and.w	r3, r3, #32
 800891e:	2b00      	cmp	r3, #0
 8008920:	d070      	beq.n	8008a04 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008922:	4b19      	ldr	r3, [pc, #100]	; (8008988 <tcp_process+0x52c>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	f003 0310 	and.w	r3, r3, #16
 800892a:	2b00      	cmp	r3, #0
 800892c:	d05f      	beq.n	80089ee <tcp_process+0x592>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008932:	4b16      	ldr	r3, [pc, #88]	; (800898c <tcp_process+0x530>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d159      	bne.n	80089ee <tcp_process+0x592>
          pcb->unsent == NULL) {
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800893e:	2b00      	cmp	r3, #0
 8008940:	d155      	bne.n	80089ee <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	7e9b      	ldrb	r3, [r3, #26]
 8008946:	f043 0302 	orr.w	r3, r3, #2
 800894a:	b2da      	uxtb	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7fe fee5 	bl	8007720 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008956:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <tcp_process+0x55c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	429a      	cmp	r2, r3
 800895e:	d105      	bne.n	800896c <tcp_process+0x510>
 8008960:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <tcp_process+0x55c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	4a14      	ldr	r2, [pc, #80]	; (80089b8 <tcp_process+0x55c>)
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	e02d      	b.n	80089c8 <tcp_process+0x56c>
 800896c:	4b12      	ldr	r3, [pc, #72]	; (80089b8 <tcp_process+0x55c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	e026      	b.n	80089c2 <tcp_process+0x566>
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	429a      	cmp	r2, r3
 800897c:	d11e      	bne.n	80089bc <tcp_process+0x560>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	60da      	str	r2, [r3, #12]
 8008986:	e01f      	b.n	80089c8 <tcp_process+0x56c>
 8008988:	20006d54 	.word	0x20006d54
 800898c:	20006d4c 	.word	0x20006d4c
 8008990:	20006d52 	.word	0x20006d52
 8008994:	20006d48 	.word	0x20006d48
 8008998:	20006d38 	.word	0x20006d38
 800899c:	200037c4 	.word	0x200037c4
 80089a0:	200037c8 	.word	0x200037c8
 80089a4:	080101a8 	.word	0x080101a8
 80089a8:	080103ac 	.word	0x080103ac
 80089ac:	080101ec 	.word	0x080101ec
 80089b0:	20006d50 	.word	0x20006d50
 80089b4:	20006d55 	.word	0x20006d55
 80089b8:	20006d1c 	.word	0x20006d1c
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1d5      	bne.n	8008974 <tcp_process+0x518>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	60da      	str	r2, [r3, #12]
 80089ce:	4b77      	ldr	r3, [pc, #476]	; (8008bac <tcp_process+0x750>)
 80089d0:	2201      	movs	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	220a      	movs	r2, #10
 80089d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80089da:	4b75      	ldr	r3, [pc, #468]	; (8008bb0 <tcp_process+0x754>)
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	60da      	str	r2, [r3, #12]
 80089e2:	4a73      	ldr	r2, [pc, #460]	; (8008bb0 <tcp_process+0x754>)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	f002 fda6 	bl	800b538 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80089ec:	e0d2      	b.n	8008b94 <tcp_process+0x738>
        tcp_ack_now(pcb);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	7e9b      	ldrb	r3, [r3, #26]
 80089f2:	f043 0302 	orr.w	r3, r3, #2
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2208      	movs	r2, #8
 8008a00:	751a      	strb	r2, [r3, #20]
    break;
 8008a02:	e0c7      	b.n	8008b94 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008a04:	4b6b      	ldr	r3, [pc, #428]	; (8008bb4 <tcp_process+0x758>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 80c1 	beq.w	8008b94 <tcp_process+0x738>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a16:	4b68      	ldr	r3, [pc, #416]	; (8008bb8 <tcp_process+0x75c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	f040 80ba 	bne.w	8008b94 <tcp_process+0x738>
               pcb->unsent == NULL) {
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f040 80b5 	bne.w	8008b94 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2206      	movs	r2, #6
 8008a2e:	751a      	strb	r2, [r3, #20]
    break;
 8008a30:	e0b0      	b.n	8008b94 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f93c 	bl	8008cb0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008a38:	4b60      	ldr	r3, [pc, #384]	; (8008bbc <tcp_process+0x760>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	f003 0320 	and.w	r3, r3, #32
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 80a9 	beq.w	8008b98 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	7e9b      	ldrb	r3, [r3, #26]
 8008a4a:	f043 0302 	orr.w	r3, r3, #2
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7fe fe63 	bl	8007720 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008a5a:	4b59      	ldr	r3, [pc, #356]	; (8008bc0 <tcp_process+0x764>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d105      	bne.n	8008a70 <tcp_process+0x614>
 8008a64:	4b56      	ldr	r3, [pc, #344]	; (8008bc0 <tcp_process+0x764>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	4a55      	ldr	r2, [pc, #340]	; (8008bc0 <tcp_process+0x764>)
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	e013      	b.n	8008a98 <tcp_process+0x63c>
 8008a70:	4b53      	ldr	r3, [pc, #332]	; (8008bc0 <tcp_process+0x764>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	613b      	str	r3, [r7, #16]
 8008a76:	e00c      	b.n	8008a92 <tcp_process+0x636>
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d104      	bne.n	8008a8c <tcp_process+0x630>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	60da      	str	r2, [r3, #12]
 8008a8a:	e005      	b.n	8008a98 <tcp_process+0x63c>
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	613b      	str	r3, [r7, #16]
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1ef      	bne.n	8008a78 <tcp_process+0x61c>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	60da      	str	r2, [r3, #12]
 8008a9e:	4b43      	ldr	r3, [pc, #268]	; (8008bac <tcp_process+0x750>)
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	220a      	movs	r2, #10
 8008aa8:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008aaa:	4b41      	ldr	r3, [pc, #260]	; (8008bb0 <tcp_process+0x754>)
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	60da      	str	r2, [r3, #12]
 8008ab2:	4a3f      	ldr	r2, [pc, #252]	; (8008bb0 <tcp_process+0x754>)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6013      	str	r3, [r2, #0]
 8008ab8:	f002 fd3e 	bl	800b538 <tcp_timer_needed>
    }
    break;
 8008abc:	e06c      	b.n	8008b98 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f8f6 	bl	8008cb0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008ac4:	4b3b      	ldr	r3, [pc, #236]	; (8008bb4 <tcp_process+0x758>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d065      	beq.n	8008b9c <tcp_process+0x740>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ad4:	4b38      	ldr	r3, [pc, #224]	; (8008bb8 <tcp_process+0x75c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d15f      	bne.n	8008b9c <tcp_process+0x740>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d15b      	bne.n	8008b9c <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7fe fe1b 	bl	8007720 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008aea:	4b35      	ldr	r3, [pc, #212]	; (8008bc0 <tcp_process+0x764>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d105      	bne.n	8008b00 <tcp_process+0x6a4>
 8008af4:	4b32      	ldr	r3, [pc, #200]	; (8008bc0 <tcp_process+0x764>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	4a31      	ldr	r2, [pc, #196]	; (8008bc0 <tcp_process+0x764>)
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	e013      	b.n	8008b28 <tcp_process+0x6cc>
 8008b00:	4b2f      	ldr	r3, [pc, #188]	; (8008bc0 <tcp_process+0x764>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	e00c      	b.n	8008b22 <tcp_process+0x6c6>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d104      	bne.n	8008b1c <tcp_process+0x6c0>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	60da      	str	r2, [r3, #12]
 8008b1a:	e005      	b.n	8008b28 <tcp_process+0x6cc>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1ef      	bne.n	8008b08 <tcp_process+0x6ac>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	60da      	str	r2, [r3, #12]
 8008b2e:	4b1f      	ldr	r3, [pc, #124]	; (8008bac <tcp_process+0x750>)
 8008b30:	2201      	movs	r2, #1
 8008b32:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	220a      	movs	r2, #10
 8008b38:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008b3a:	4b1d      	ldr	r3, [pc, #116]	; (8008bb0 <tcp_process+0x754>)
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60da      	str	r2, [r3, #12]
 8008b42:	4a1b      	ldr	r2, [pc, #108]	; (8008bb0 <tcp_process+0x754>)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	f002 fcf6 	bl	800b538 <tcp_timer_needed>
    }
    break;
 8008b4c:	e026      	b.n	8008b9c <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f8ae 	bl	8008cb0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008b54:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <tcp_process+0x758>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d01f      	beq.n	8008ba0 <tcp_process+0x744>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b64:	4b14      	ldr	r3, [pc, #80]	; (8008bb8 <tcp_process+0x75c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d119      	bne.n	8008ba0 <tcp_process+0x744>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d115      	bne.n	8008ba0 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8008b74:	4b11      	ldr	r3, [pc, #68]	; (8008bbc <tcp_process+0x760>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	f043 0310 	orr.w	r3, r3, #16
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	4b0f      	ldr	r3, [pc, #60]	; (8008bbc <tcp_process+0x760>)
 8008b80:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008b82:	e00d      	b.n	8008ba0 <tcp_process+0x744>
  default:
    break;
 8008b84:	bf00      	nop
 8008b86:	e00c      	b.n	8008ba2 <tcp_process+0x746>
    break;
 8008b88:	bf00      	nop
 8008b8a:	e00a      	b.n	8008ba2 <tcp_process+0x746>
    break;
 8008b8c:	bf00      	nop
 8008b8e:	e008      	b.n	8008ba2 <tcp_process+0x746>
    break;
 8008b90:	bf00      	nop
 8008b92:	e006      	b.n	8008ba2 <tcp_process+0x746>
    break;
 8008b94:	bf00      	nop
 8008b96:	e004      	b.n	8008ba2 <tcp_process+0x746>
    break;
 8008b98:	bf00      	nop
 8008b9a:	e002      	b.n	8008ba2 <tcp_process+0x746>
    break;
 8008b9c:	bf00      	nop
 8008b9e:	e000      	b.n	8008ba2 <tcp_process+0x746>
    break;
 8008ba0:	bf00      	nop
  }
  return ERR_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20006d24 	.word	0x20006d24
 8008bb0:	20006d20 	.word	0x20006d20
 8008bb4:	20006d54 	.word	0x20006d54
 8008bb8:	20006d4c 	.word	0x20006d4c
 8008bbc:	20006d55 	.word	0x20006d55
 8008bc0:	20006d1c 	.word	0x20006d1c

08008bc4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008bc4:	b590      	push	{r4, r7, lr}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	899b      	ldrh	r3, [r3, #12]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fb ff27 	bl	8004a2a <lwip_htons>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d027      	beq.n	8008c36 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008be6:	6838      	ldr	r0, [r7, #0]
 8008be8:	f7fe fb27 	bl	800723a <tcp_segs_free>
    next = NULL;
 8008bec:	2300      	movs	r3, #0
 8008bee:	603b      	str	r3, [r7, #0]
 8008bf0:	e055      	b.n	8008c9e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	899b      	ldrh	r3, [r3, #12]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fb ff15 	bl	8004a2a <lwip_htons>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00d      	beq.n	8008c26 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	899b      	ldrh	r3, [r3, #12]
 8008c10:	b29c      	uxth	r4, r3
 8008c12:	2001      	movs	r0, #1
 8008c14:	f7fb ff09 	bl	8004a2a <lwip_htons>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	4322      	orrs	r2, r4
 8008c22:	b292      	uxth	r2, r2
 8008c24:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f7fe fb17 	bl	8007264 <tcp_seg_free>
    while (next &&
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00e      	beq.n	8008c5a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	891b      	ldrh	r3, [r3, #8]
 8008c40:	461a      	mov	r2, r3
 8008c42:	4b1a      	ldr	r3, [pc, #104]	; (8008cac <tcp_oos_insert_segment+0xe8>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	441a      	add	r2, r3
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	8909      	ldrh	r1, [r1, #8]
 8008c52:	440b      	add	r3, r1
 8008c54:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	dacb      	bge.n	8008bf2 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01e      	beq.n	8008c9e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	891b      	ldrh	r3, [r3, #8]
 8008c64:	461a      	mov	r2, r3
 8008c66:	4b11      	ldr	r3, [pc, #68]	; (8008cac <tcp_oos_insert_segment+0xe8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	441a      	add	r2, r3
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	dd12      	ble.n	8008c9e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <tcp_oos_insert_segment+0xe8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	891b      	ldrh	r3, [r3, #8]
 8008c96:	4619      	mov	r1, r3
 8008c98:	4610      	mov	r0, r2
 8008c9a:	f7fc fe7b 	bl	8005994 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	601a      	str	r2, [r3, #0]
}
 8008ca4:	bf00      	nop
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd90      	pop	{r4, r7, pc}
 8008cac:	20006d48 	.word	0x20006d48

08008cb0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cb2:	b08d      	sub	sp, #52	; 0x34
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	7d1b      	ldrb	r3, [r3, #20]
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d806      	bhi.n	8008cd2 <tcp_receive+0x22>
 8008cc4:	4b98      	ldr	r3, [pc, #608]	; (8008f28 <tcp_receive+0x278>)
 8008cc6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8008cca:	4998      	ldr	r1, [pc, #608]	; (8008f2c <tcp_receive+0x27c>)
 8008ccc:	4898      	ldr	r0, [pc, #608]	; (8008f30 <tcp_receive+0x280>)
 8008cce:	f005 fa2b 	bl	800e128 <iprintf>

  if (flags & TCP_ACK) {
 8008cd2:	4b98      	ldr	r3, [pc, #608]	; (8008f34 <tcp_receive+0x284>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	f003 0310 	and.w	r3, r3, #16
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 82c1 	beq.w	8009262 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cec:	4413      	add	r3, r2
 8008cee:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cf4:	4b90      	ldr	r3, [pc, #576]	; (8008f38 <tcp_receive+0x288>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	db1b      	blt.n	8008d36 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d02:	4b8d      	ldr	r3, [pc, #564]	; (8008f38 <tcp_receive+0x288>)
 8008d04:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d106      	bne.n	8008d18 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d0e:	4b8b      	ldr	r3, [pc, #556]	; (8008f3c <tcp_receive+0x28c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	db0e      	blt.n	8008d36 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d1c:	4b87      	ldr	r3, [pc, #540]	; (8008f3c <tcp_receive+0x28c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d141      	bne.n	8008da8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008d24:	4b86      	ldr	r3, [pc, #536]	; (8008f40 <tcp_receive+0x290>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	89db      	ldrh	r3, [r3, #14]
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d938      	bls.n	8008da8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008d36:	4b82      	ldr	r3, [pc, #520]	; (8008f40 <tcp_receive+0x290>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	89db      	ldrh	r3, [r3, #14]
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d205      	bcs.n	8008d60 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8008d60:	4b75      	ldr	r3, [pc, #468]	; (8008f38 <tcp_receive+0x288>)
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8008d68:	4b74      	ldr	r3, [pc, #464]	; (8008f3c <tcp_receive+0x28c>)
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10d      	bne.n	8008d96 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d111      	bne.n	8008da8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8008d94:	e008      	b.n	8008da8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008da8:	4b64      	ldr	r3, [pc, #400]	; (8008f3c <tcp_receive+0x28c>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dc53      	bgt.n	8008e5e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8008db6:	4b63      	ldr	r3, [pc, #396]	; (8008f44 <tcp_receive+0x294>)
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d146      	bne.n	8008e4c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8008dc8:	4413      	add	r3, r2
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d13d      	bne.n	8008e4c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	db38      	blt.n	8008e4c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dde:	4b57      	ldr	r3, [pc, #348]	; (8008f3c <tcp_receive+0x28c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d132      	bne.n	8008e4c <tcp_receive+0x19c>
              found_dupack = 1;
 8008de6:	2301      	movs	r3, #1
 8008de8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008df0:	2bff      	cmp	r3, #255	; 0xff
 8008df2:	d007      	beq.n	8008e04 <tcp_receive+0x154>
                ++pcb->dupacks;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	d916      	bls.n	8008e3c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e18:	4413      	add	r3, r2
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d912      	bls.n	8008e4c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e30:	4413      	add	r3, r2
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008e3a:	e007      	b.n	8008e4c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d102      	bne.n	8008e4c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f002 fa2a 	bl	800b2a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f040 816a 	bne.w	8009128 <tcp_receive+0x478>
        pcb->dupacks = 0;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e5c:	e164      	b.n	8009128 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008e5e:	4b37      	ldr	r3, [pc, #220]	; (8008f3c <tcp_receive+0x28c>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f2c0 8108 	blt.w	8009080 <tcp_receive+0x3d0>
 8008e70:	4b32      	ldr	r3, [pc, #200]	; (8008f3c <tcp_receive+0x28c>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f300 8100 	bgt.w	8009080 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	7e9b      	ldrb	r3, [r3, #26]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00c      	beq.n	8008ea6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	7e9b      	ldrb	r3, [r3, #26]
 8008e90:	f023 0304 	bic.w	r3, r3, #4
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008eb4:	10db      	asrs	r3, r3, #3
 8008eb6:	b21b      	sxth	r3, r3
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	4413      	add	r3, r2
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	b21a      	sxth	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008ed6:	4b19      	ldr	r3, [pc, #100]	; (8008f3c <tcp_receive+0x28c>)
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	7d1b      	ldrb	r3, [r3, #20]
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	f240 8095 	bls.w	8009012 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d227      	bcs.n	8008f48 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f02:	4413      	add	r3, r2
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	f240 8080 	bls.w	8009012 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f1c:	4413      	add	r3, r2
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008f26:	e074      	b.n	8009012 <tcp_receive+0x362>
 8008f28:	080101a8 	.word	0x080101a8
 8008f2c:	080103cc 	.word	0x080103cc
 8008f30:	080101ec 	.word	0x080101ec
 8008f34:	20006d54 	.word	0x20006d54
 8008f38:	20006d48 	.word	0x20006d48
 8008f3c:	20006d4c 	.word	0x20006d4c
 8008f40:	20006d38 	.word	0x20006d38
 8008f44:	20006d52 	.word	0x20006d52
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f52:	4619      	mov	r1, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f58:	fb01 f303 	mul.w	r3, r1, r3
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8008f62:	fb93 f3f1 	sdiv	r3, r3, r1
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	4413      	add	r3, r2
 8008f6a:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f72:	8a7a      	ldrh	r2, [r7, #18]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d94c      	bls.n	8009012 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	8a7a      	ldrh	r2, [r7, #18]
 8008f7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8008f80:	e047      	b.n	8009012 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fc ff01 	bl	8005da4 <pbuf_clen>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	429c      	cmp	r4, r3
 8008fa6:	d206      	bcs.n	8008fb6 <tcp_receive+0x306>
 8008fa8:	4b70      	ldr	r3, [pc, #448]	; (800916c <tcp_receive+0x4bc>)
 8008faa:	f240 429e 	movw	r2, #1182	; 0x49e
 8008fae:	4970      	ldr	r1, [pc, #448]	; (8009170 <tcp_receive+0x4c0>)
 8008fb0:	4870      	ldr	r0, [pc, #448]	; (8009174 <tcp_receive+0x4c4>)
 8008fb2:	f005 f8b9 	bl	800e128 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fc fef2 	bl	8005da4 <pbuf_clen>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fca:	1a9b      	subs	r3, r3, r2
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	891a      	ldrh	r2, [r3, #8]
 8008fd8:	4b67      	ldr	r3, [pc, #412]	; (8009178 <tcp_receive+0x4c8>)
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	4413      	add	r3, r2
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	4b65      	ldr	r3, [pc, #404]	; (8009178 <tcp_receive+0x4c8>)
 8008fe2:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8008fe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fe6:	f7fe f93d 	bl	8007264 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00e      	beq.n	8009012 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <tcp_receive+0x362>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009000:	2b00      	cmp	r3, #0
 8009002:	d106      	bne.n	8009012 <tcp_receive+0x362>
 8009004:	4b59      	ldr	r3, [pc, #356]	; (800916c <tcp_receive+0x4bc>)
 8009006:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800900a:	495c      	ldr	r1, [pc, #368]	; (800917c <tcp_receive+0x4cc>)
 800900c:	4859      	ldr	r0, [pc, #356]	; (8009174 <tcp_receive+0x4c4>)
 800900e:	f005 f88b 	bl	800e128 <iprintf>
      while (pcb->unacked != NULL &&
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009016:	2b00      	cmp	r3, #0
 8009018:	d022      	beq.n	8009060 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	4618      	mov	r0, r3
 8009024:	f7fb fd0f 	bl	8004a46 <lwip_htonl>
 8009028:	4604      	mov	r4, r0
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800902e:	891b      	ldrh	r3, [r3, #8]
 8009030:	461d      	mov	r5, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	899b      	ldrh	r3, [r3, #12]
 800903a:	b29b      	uxth	r3, r3
 800903c:	4618      	mov	r0, r3
 800903e:	f7fb fcf4 	bl	8004a2a <lwip_htons>
 8009042:	4603      	mov	r3, r0
 8009044:	f003 0303 	and.w	r3, r3, #3
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <tcp_receive+0x3a0>
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <tcp_receive+0x3a2>
 8009050:	2300      	movs	r3, #0
 8009052:	442b      	add	r3, r5
 8009054:	18e2      	adds	r2, r4, r3
 8009056:	4b4a      	ldr	r3, [pc, #296]	; (8009180 <tcp_receive+0x4d0>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800905c:	2b00      	cmp	r3, #0
 800905e:	dd90      	ble.n	8008f82 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d104      	bne.n	8009072 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800906e:	861a      	strh	r2, [r3, #48]	; 0x30
 8009070:	e002      	b.n	8009078 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	76da      	strb	r2, [r3, #27]
 800907e:	e002      	b.n	8009086 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f001 fd31 	bl	800aae8 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8009086:	e04f      	b.n	8009128 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800908c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800909c:	2b00      	cmp	r3, #0
 800909e:	d103      	bne.n	80090a8 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fc fe76 	bl	8005da4 <pbuf_clen>
 80090b8:	4603      	mov	r3, r0
 80090ba:	429c      	cmp	r4, r3
 80090bc:	d206      	bcs.n	80090cc <tcp_receive+0x41c>
 80090be:	4b2b      	ldr	r3, [pc, #172]	; (800916c <tcp_receive+0x4bc>)
 80090c0:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80090c4:	492a      	ldr	r1, [pc, #168]	; (8009170 <tcp_receive+0x4c0>)
 80090c6:	482b      	ldr	r0, [pc, #172]	; (8009174 <tcp_receive+0x4c4>)
 80090c8:	f005 f82e 	bl	800e128 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80090cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fc fe67 	bl	8005da4 <pbuf_clen>
 80090d6:	4603      	mov	r3, r0
 80090d8:	461a      	mov	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	891a      	ldrh	r2, [r3, #8]
 80090ee:	4b22      	ldr	r3, [pc, #136]	; (8009178 <tcp_receive+0x4c8>)
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	4413      	add	r3, r2
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	4b20      	ldr	r3, [pc, #128]	; (8009178 <tcp_receive+0x4c8>)
 80090f8:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80090fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090fc:	f7fe f8b2 	bl	8007264 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00e      	beq.n	8009128 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10a      	bne.n	8009128 <tcp_receive+0x478>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <tcp_receive+0x478>
 800911a:	4b14      	ldr	r3, [pc, #80]	; (800916c <tcp_receive+0x4bc>)
 800911c:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8009120:	4916      	ldr	r1, [pc, #88]	; (800917c <tcp_receive+0x4cc>)
 8009122:	4814      	ldr	r0, [pc, #80]	; (8009174 <tcp_receive+0x4c4>)
 8009124:	f005 f800 	bl	800e128 <iprintf>
    while (pcb->unsent != NULL &&
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800912c:	2b00      	cmp	r3, #0
 800912e:	d037      	beq.n	80091a0 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009130:	4b13      	ldr	r3, [pc, #76]	; (8009180 <tcp_receive+0x4d0>)
 8009132:	681c      	ldr	r4, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	4618      	mov	r0, r3
 800913e:	f7fb fc82 	bl	8004a46 <lwip_htonl>
 8009142:	4605      	mov	r5, r0
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009148:	891b      	ldrh	r3, [r3, #8]
 800914a:	461e      	mov	r6, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	899b      	ldrh	r3, [r3, #12]
 8009154:	b29b      	uxth	r3, r3
 8009156:	4618      	mov	r0, r3
 8009158:	f7fb fc67 	bl	8004a2a <lwip_htons>
 800915c:	4603      	mov	r3, r0
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00e      	beq.n	8009184 <tcp_receive+0x4d4>
 8009166:	2301      	movs	r3, #1
 8009168:	e00d      	b.n	8009186 <tcp_receive+0x4d6>
 800916a:	bf00      	nop
 800916c:	080101a8 	.word	0x080101a8
 8009170:	080103e8 	.word	0x080103e8
 8009174:	080101ec 	.word	0x080101ec
 8009178:	20006d50 	.word	0x20006d50
 800917c:	08010410 	.word	0x08010410
 8009180:	20006d4c 	.word	0x20006d4c
 8009184:	2300      	movs	r3, #0
 8009186:	4433      	add	r3, r6
 8009188:	442b      	add	r3, r5
 800918a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800918c:	2b00      	cmp	r3, #0
 800918e:	db07      	blt.n	80091a0 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009190:	4b8d      	ldr	r3, [pc, #564]	; (80093c8 <tcp_receive+0x718>)
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	f77f af74 	ble.w	8009088 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80091a6:	4b89      	ldr	r3, [pc, #548]	; (80093cc <tcp_receive+0x71c>)
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	4413      	add	r3, r2
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d052      	beq.n	8009262 <tcp_receive+0x5b2>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091c0:	4b81      	ldr	r3, [pc, #516]	; (80093c8 <tcp_receive+0x718>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	da4b      	bge.n	8009262 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80091ca:	4b81      	ldr	r3, [pc, #516]	; (80093d0 <tcp_receive+0x720>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	b29b      	uxth	r3, r3
 80091da:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80091dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80091e4:	10db      	asrs	r3, r3, #3
 80091e6:	b21b      	sxth	r3, r3
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091fa:	4413      	add	r3, r2
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	b21a      	sxth	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009204:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009208:	2b00      	cmp	r3, #0
 800920a:	da03      	bge.n	8009214 <tcp_receive+0x564>
        m = -m;
 800920c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800920e:	425b      	negs	r3, r3
 8009210:	b29b      	uxth	r3, r3
 8009212:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8009214:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800921c:	109b      	asrs	r3, r3, #2
 800921e:	b21b      	sxth	r3, r3
 8009220:	b29b      	uxth	r3, r3
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	b29b      	uxth	r3, r3
 8009226:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800922e:	b29a      	uxth	r2, r3
 8009230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009232:	4413      	add	r3, r2
 8009234:	b29b      	uxth	r3, r3
 8009236:	b21a      	sxth	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009242:	10db      	asrs	r3, r3, #3
 8009244:	b21b      	sxth	r3, r3
 8009246:	b29a      	uxth	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800924e:	b29b      	uxth	r3, r3
 8009250:	4413      	add	r3, r2
 8009252:	b29b      	uxth	r3, r3
 8009254:	b21a      	sxth	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009262:	4b5c      	ldr	r3, [pc, #368]	; (80093d4 <tcp_receive+0x724>)
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 84f1 	beq.w	8009c4e <tcp_receive+0xf9e>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	7d1b      	ldrb	r3, [r3, #20]
 8009270:	2b06      	cmp	r3, #6
 8009272:	f200 84ec 	bhi.w	8009c4e <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800927a:	4b57      	ldr	r3, [pc, #348]	; (80093d8 <tcp_receive+0x728>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	3b01      	subs	r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	f2c0 80b8 	blt.w	80093f8 <tcp_receive+0x748>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800928c:	4b51      	ldr	r3, [pc, #324]	; (80093d4 <tcp_receive+0x724>)
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	4619      	mov	r1, r3
 8009292:	4b51      	ldr	r3, [pc, #324]	; (80093d8 <tcp_receive+0x728>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	440b      	add	r3, r1
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	3301      	adds	r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	f300 80ab 	bgt.w	80093f8 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80092a2:	4b4e      	ldr	r3, [pc, #312]	; (80093dc <tcp_receive+0x72c>)
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ac:	4b4a      	ldr	r3, [pc, #296]	; (80093d8 <tcp_receive+0x728>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80092b4:	4b49      	ldr	r3, [pc, #292]	; (80093dc <tcp_receive+0x72c>)
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d106      	bne.n	80092ca <tcp_receive+0x61a>
 80092bc:	4b48      	ldr	r3, [pc, #288]	; (80093e0 <tcp_receive+0x730>)
 80092be:	f240 523c 	movw	r2, #1340	; 0x53c
 80092c2:	4948      	ldr	r1, [pc, #288]	; (80093e4 <tcp_receive+0x734>)
 80092c4:	4848      	ldr	r0, [pc, #288]	; (80093e8 <tcp_receive+0x738>)
 80092c6:	f004 ff2f 	bl	800e128 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80092d0:	4293      	cmp	r3, r2
 80092d2:	dd06      	ble.n	80092e2 <tcp_receive+0x632>
 80092d4:	4b42      	ldr	r3, [pc, #264]	; (80093e0 <tcp_receive+0x730>)
 80092d6:	f240 523d 	movw	r2, #1341	; 0x53d
 80092da:	4944      	ldr	r1, [pc, #272]	; (80093ec <tcp_receive+0x73c>)
 80092dc:	4842      	ldr	r0, [pc, #264]	; (80093e8 <tcp_receive+0x738>)
 80092de:	f004 ff23 	bl	800e128 <iprintf>
      if (inseg.p->len < off) {
 80092e2:	4b3e      	ldr	r3, [pc, #248]	; (80093dc <tcp_receive+0x72c>)
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	895b      	ldrh	r3, [r3, #10]
 80092e8:	461a      	mov	r2, r3
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	4293      	cmp	r3, r2
 80092ee:	dd3e      	ble.n	800936e <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80092f0:	4b3a      	ldr	r3, [pc, #232]	; (80093dc <tcp_receive+0x72c>)
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	891b      	ldrh	r3, [r3, #8]
 80092f6:	461a      	mov	r2, r3
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	4293      	cmp	r3, r2
 80092fc:	dd06      	ble.n	800930c <tcp_receive+0x65c>
 80092fe:	4b38      	ldr	r3, [pc, #224]	; (80093e0 <tcp_receive+0x730>)
 8009300:	f240 523f 	movw	r2, #1343	; 0x53f
 8009304:	493a      	ldr	r1, [pc, #232]	; (80093f0 <tcp_receive+0x740>)
 8009306:	4838      	ldr	r0, [pc, #224]	; (80093e8 <tcp_receive+0x738>)
 8009308:	f004 ff0e 	bl	800e128 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800930c:	4b33      	ldr	r3, [pc, #204]	; (80093dc <tcp_receive+0x72c>)
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	891a      	ldrh	r2, [r3, #8]
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	b29b      	uxth	r3, r3
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800931a:	e00e      	b.n	800933a <tcp_receive+0x68a>
          off -= p->len;
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	895b      	ldrh	r3, [r3, #10]
 8009320:	461a      	mov	r2, r3
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	1a9b      	subs	r3, r3, r2
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	8a3a      	ldrh	r2, [r7, #16]
 800932c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	2200      	movs	r2, #0
 8009332:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	895b      	ldrh	r3, [r3, #10]
 800933e:	461a      	mov	r2, r3
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	4293      	cmp	r3, r2
 8009344:	dcea      	bgt.n	800931c <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	b29b      	uxth	r3, r3
 800934a:	425b      	negs	r3, r3
 800934c:	b29b      	uxth	r3, r3
 800934e:	b21b      	sxth	r3, r3
 8009350:	4619      	mov	r1, r3
 8009352:	69b8      	ldr	r0, [r7, #24]
 8009354:	f7fc fc6e 	bl	8005c34 <pbuf_header>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d01c      	beq.n	8009398 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800935e:	4b20      	ldr	r3, [pc, #128]	; (80093e0 <tcp_receive+0x730>)
 8009360:	f240 524c 	movw	r2, #1356	; 0x54c
 8009364:	4923      	ldr	r1, [pc, #140]	; (80093f4 <tcp_receive+0x744>)
 8009366:	4820      	ldr	r0, [pc, #128]	; (80093e8 <tcp_receive+0x738>)
 8009368:	f004 fede 	bl	800e128 <iprintf>
 800936c:	e014      	b.n	8009398 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800936e:	4b1b      	ldr	r3, [pc, #108]	; (80093dc <tcp_receive+0x72c>)
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009374:	b292      	uxth	r2, r2
 8009376:	4252      	negs	r2, r2
 8009378:	b292      	uxth	r2, r2
 800937a:	b212      	sxth	r2, r2
 800937c:	4611      	mov	r1, r2
 800937e:	4618      	mov	r0, r3
 8009380:	f7fc fc58 	bl	8005c34 <pbuf_header>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d006      	beq.n	8009398 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800938a:	4b15      	ldr	r3, [pc, #84]	; (80093e0 <tcp_receive+0x730>)
 800938c:	f240 5251 	movw	r2, #1361	; 0x551
 8009390:	4918      	ldr	r1, [pc, #96]	; (80093f4 <tcp_receive+0x744>)
 8009392:	4815      	ldr	r0, [pc, #84]	; (80093e8 <tcp_receive+0x738>)
 8009394:	f004 fec8 	bl	800e128 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8009398:	4b10      	ldr	r3, [pc, #64]	; (80093dc <tcp_receive+0x72c>)
 800939a:	891a      	ldrh	r2, [r3, #8]
 800939c:	4b0e      	ldr	r3, [pc, #56]	; (80093d8 <tcp_receive+0x728>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	b299      	uxth	r1, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	1acb      	subs	r3, r1, r3
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	4413      	add	r3, r2
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <tcp_receive+0x72c>)
 80093b2:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	4a07      	ldr	r2, [pc, #28]	; (80093d8 <tcp_receive+0x728>)
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	4b07      	ldr	r3, [pc, #28]	; (80093dc <tcp_receive+0x72c>)
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	4a05      	ldr	r2, [pc, #20]	; (80093d8 <tcp_receive+0x728>)
 80093c2:	6812      	ldr	r2, [r2, #0]
 80093c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80093c6:	e025      	b.n	8009414 <tcp_receive+0x764>
 80093c8:	20006d4c 	.word	0x20006d4c
 80093cc:	20006d50 	.word	0x20006d50
 80093d0:	20006d10 	.word	0x20006d10
 80093d4:	20006d52 	.word	0x20006d52
 80093d8:	20006d48 	.word	0x20006d48
 80093dc:	20006d28 	.word	0x20006d28
 80093e0:	080101a8 	.word	0x080101a8
 80093e4:	08010430 	.word	0x08010430
 80093e8:	080101ec 	.word	0x080101ec
 80093ec:	08010440 	.word	0x08010440
 80093f0:	08010450 	.word	0x08010450
 80093f4:	08010460 	.word	0x08010460
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80093f8:	4b87      	ldr	r3, [pc, #540]	; (8009618 <tcp_receive+0x968>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	da06      	bge.n	8009414 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	7e9b      	ldrb	r3, [r3, #26]
 800940a:	f043 0302 	orr.w	r3, r3, #2
 800940e:	b2da      	uxtb	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009414:	4b80      	ldr	r3, [pc, #512]	; (8009618 <tcp_receive+0x968>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	f2c0 8410 	blt.w	8009c44 <tcp_receive+0xf94>
 8009424:	4b7c      	ldr	r3, [pc, #496]	; (8009618 <tcp_receive+0x968>)
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009430:	440b      	add	r3, r1
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	3301      	adds	r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	f300 8404 	bgt.w	8009c44 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009440:	4b75      	ldr	r3, [pc, #468]	; (8009618 <tcp_receive+0x968>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	f040 8287 	bne.w	8009958 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800944a:	4b74      	ldr	r3, [pc, #464]	; (800961c <tcp_receive+0x96c>)
 800944c:	891c      	ldrh	r4, [r3, #8]
 800944e:	4b73      	ldr	r3, [pc, #460]	; (800961c <tcp_receive+0x96c>)
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	899b      	ldrh	r3, [r3, #12]
 8009454:	b29b      	uxth	r3, r3
 8009456:	4618      	mov	r0, r3
 8009458:	f7fb fae7 	bl	8004a2a <lwip_htons>
 800945c:	4603      	mov	r3, r0
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <tcp_receive+0x7ba>
 8009466:	2301      	movs	r3, #1
 8009468:	e000      	b.n	800946c <tcp_receive+0x7bc>
 800946a:	2300      	movs	r3, #0
 800946c:	4423      	add	r3, r4
 800946e:	b29a      	uxth	r2, r3
 8009470:	4b6b      	ldr	r3, [pc, #428]	; (8009620 <tcp_receive+0x970>)
 8009472:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009478:	4b69      	ldr	r3, [pc, #420]	; (8009620 <tcp_receive+0x970>)
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	429a      	cmp	r2, r3
 800947e:	d26e      	bcs.n	800955e <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009480:	4b66      	ldr	r3, [pc, #408]	; (800961c <tcp_receive+0x96c>)
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	899b      	ldrh	r3, [r3, #12]
 8009486:	b29b      	uxth	r3, r3
 8009488:	4618      	mov	r0, r3
 800948a:	f7fb face 	bl	8004a2a <lwip_htons>
 800948e:	4603      	mov	r3, r0
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01b      	beq.n	80094d0 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009498:	4b60      	ldr	r3, [pc, #384]	; (800961c <tcp_receive+0x96c>)
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	899b      	ldrh	r3, [r3, #12]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80094a4:	b29c      	uxth	r4, r3
 80094a6:	4b5d      	ldr	r3, [pc, #372]	; (800961c <tcp_receive+0x96c>)
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	899b      	ldrh	r3, [r3, #12]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fb fabb 	bl	8004a2a <lwip_htons>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fb fab4 	bl	8004a2a <lwip_htons>
 80094c2:	4603      	mov	r3, r0
 80094c4:	461a      	mov	r2, r3
 80094c6:	4b55      	ldr	r3, [pc, #340]	; (800961c <tcp_receive+0x96c>)
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	4322      	orrs	r2, r4
 80094cc:	b292      	uxth	r2, r2
 80094ce:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80094d4:	4b51      	ldr	r3, [pc, #324]	; (800961c <tcp_receive+0x96c>)
 80094d6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80094d8:	4b50      	ldr	r3, [pc, #320]	; (800961c <tcp_receive+0x96c>)
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	899b      	ldrh	r3, [r3, #12]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fb faa2 	bl	8004a2a <lwip_htons>
 80094e6:	4603      	mov	r3, r0
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <tcp_receive+0x84c>
            inseg.len -= 1;
 80094f0:	4b4a      	ldr	r3, [pc, #296]	; (800961c <tcp_receive+0x96c>)
 80094f2:	891b      	ldrh	r3, [r3, #8]
 80094f4:	3b01      	subs	r3, #1
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	4b48      	ldr	r3, [pc, #288]	; (800961c <tcp_receive+0x96c>)
 80094fa:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80094fc:	4b47      	ldr	r3, [pc, #284]	; (800961c <tcp_receive+0x96c>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	4a46      	ldr	r2, [pc, #280]	; (800961c <tcp_receive+0x96c>)
 8009502:	8912      	ldrh	r2, [r2, #8]
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f7fc fa44 	bl	8005994 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800950c:	4b43      	ldr	r3, [pc, #268]	; (800961c <tcp_receive+0x96c>)
 800950e:	891c      	ldrh	r4, [r3, #8]
 8009510:	4b42      	ldr	r3, [pc, #264]	; (800961c <tcp_receive+0x96c>)
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	899b      	ldrh	r3, [r3, #12]
 8009516:	b29b      	uxth	r3, r3
 8009518:	4618      	mov	r0, r3
 800951a:	f7fb fa86 	bl	8004a2a <lwip_htons>
 800951e:	4603      	mov	r3, r0
 8009520:	f003 0303 	and.w	r3, r3, #3
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <tcp_receive+0x87c>
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <tcp_receive+0x87e>
 800952c:	2300      	movs	r3, #0
 800952e:	4423      	add	r3, r4
 8009530:	b29a      	uxth	r2, r3
 8009532:	4b3b      	ldr	r3, [pc, #236]	; (8009620 <tcp_receive+0x970>)
 8009534:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009536:	4b3a      	ldr	r3, [pc, #232]	; (8009620 <tcp_receive+0x970>)
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	4b36      	ldr	r3, [pc, #216]	; (8009618 <tcp_receive+0x968>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	441a      	add	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800954a:	440b      	add	r3, r1
 800954c:	429a      	cmp	r2, r3
 800954e:	d006      	beq.n	800955e <tcp_receive+0x8ae>
 8009550:	4b34      	ldr	r3, [pc, #208]	; (8009624 <tcp_receive+0x974>)
 8009552:	f240 527e 	movw	r2, #1406	; 0x57e
 8009556:	4934      	ldr	r1, [pc, #208]	; (8009628 <tcp_receive+0x978>)
 8009558:	4834      	ldr	r0, [pc, #208]	; (800962c <tcp_receive+0x97c>)
 800955a:	f004 fde5 	bl	800e128 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80e1 	beq.w	800972a <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009568:	4b2c      	ldr	r3, [pc, #176]	; (800961c <tcp_receive+0x96c>)
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	899b      	ldrh	r3, [r3, #12]
 800956e:	b29b      	uxth	r3, r3
 8009570:	4618      	mov	r0, r3
 8009572:	f7fb fa5a 	bl	8004a2a <lwip_htons>
 8009576:	4603      	mov	r3, r0
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d010      	beq.n	80095a2 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009580:	e00a      	b.n	8009598 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009586:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8009592:	68b8      	ldr	r0, [r7, #8]
 8009594:	f7fd fe66 	bl	8007264 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1f0      	bne.n	8009582 <tcp_receive+0x8d2>
 80095a0:	e0c3      	b.n	800972a <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80095a8:	e04f      	b.n	800964a <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80095aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	899b      	ldrh	r3, [r3, #12]
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fb fa39 	bl	8004a2a <lwip_htons>
 80095b8:	4603      	mov	r3, r0
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d03b      	beq.n	800963a <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80095c2:	4b16      	ldr	r3, [pc, #88]	; (800961c <tcp_receive+0x96c>)
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	899b      	ldrh	r3, [r3, #12]
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fb fa2d 	bl	8004a2a <lwip_htons>
 80095d0:	4603      	mov	r3, r0
 80095d2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d12f      	bne.n	800963a <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80095da:	4b10      	ldr	r3, [pc, #64]	; (800961c <tcp_receive+0x96c>)
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	899b      	ldrh	r3, [r3, #12]
 80095e0:	b29c      	uxth	r4, r3
 80095e2:	2001      	movs	r0, #1
 80095e4:	f7fb fa21 	bl	8004a2a <lwip_htons>
 80095e8:	4603      	mov	r3, r0
 80095ea:	461a      	mov	r2, r3
 80095ec:	4b0b      	ldr	r3, [pc, #44]	; (800961c <tcp_receive+0x96c>)
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	4322      	orrs	r2, r4
 80095f2:	b292      	uxth	r2, r2
 80095f4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80095f6:	4b09      	ldr	r3, [pc, #36]	; (800961c <tcp_receive+0x96c>)
 80095f8:	891c      	ldrh	r4, [r3, #8]
 80095fa:	4b08      	ldr	r3, [pc, #32]	; (800961c <tcp_receive+0x96c>)
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	899b      	ldrh	r3, [r3, #12]
 8009600:	b29b      	uxth	r3, r3
 8009602:	4618      	mov	r0, r3
 8009604:	f7fb fa11 	bl	8004a2a <lwip_htons>
 8009608:	4603      	mov	r3, r0
 800960a:	f003 0303 	and.w	r3, r3, #3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00e      	beq.n	8009630 <tcp_receive+0x980>
 8009612:	2301      	movs	r3, #1
 8009614:	e00d      	b.n	8009632 <tcp_receive+0x982>
 8009616:	bf00      	nop
 8009618:	20006d48 	.word	0x20006d48
 800961c:	20006d28 	.word	0x20006d28
 8009620:	20006d52 	.word	0x20006d52
 8009624:	080101a8 	.word	0x080101a8
 8009628:	08010474 	.word	0x08010474
 800962c:	080101ec 	.word	0x080101ec
 8009630:	2300      	movs	r3, #0
 8009632:	4423      	add	r3, r4
 8009634:	b29a      	uxth	r2, r3
 8009636:	4b95      	ldr	r3, [pc, #596]	; (800988c <tcp_receive+0xbdc>)
 8009638:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8009644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009646:	f7fd fe0d 	bl	8007264 <tcp_seg_free>
            while (next &&
 800964a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00e      	beq.n	800966e <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009650:	4b8e      	ldr	r3, [pc, #568]	; (800988c <tcp_receive+0xbdc>)
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	4b8e      	ldr	r3, [pc, #568]	; (8009890 <tcp_receive+0xbe0>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	441a      	add	r2, r3
 800965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009664:	8909      	ldrh	r1, [r1, #8]
 8009666:	440b      	add	r3, r1
 8009668:	1ad3      	subs	r3, r2, r3
            while (next &&
 800966a:	2b00      	cmp	r3, #0
 800966c:	da9d      	bge.n	80095aa <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800966e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009670:	2b00      	cmp	r3, #0
 8009672:	d057      	beq.n	8009724 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8009674:	4b85      	ldr	r3, [pc, #532]	; (800988c <tcp_receive+0xbdc>)
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	4b85      	ldr	r3, [pc, #532]	; (8009890 <tcp_receive+0xbe0>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	441a      	add	r2, r3
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009688:	2b00      	cmp	r3, #0
 800968a:	dd4b      	ble.n	8009724 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	b29a      	uxth	r2, r3
 8009694:	4b7e      	ldr	r3, [pc, #504]	; (8009890 <tcp_receive+0xbe0>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	b29b      	uxth	r3, r3
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	b29a      	uxth	r2, r3
 800969e:	4b7d      	ldr	r3, [pc, #500]	; (8009894 <tcp_receive+0xbe4>)
 80096a0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80096a2:	4b7c      	ldr	r3, [pc, #496]	; (8009894 <tcp_receive+0xbe4>)
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	899b      	ldrh	r3, [r3, #12]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fb f9bd 	bl	8004a2a <lwip_htons>
 80096b0:	4603      	mov	r3, r0
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <tcp_receive+0xa16>
                inseg.len -= 1;
 80096ba:	4b76      	ldr	r3, [pc, #472]	; (8009894 <tcp_receive+0xbe4>)
 80096bc:	891b      	ldrh	r3, [r3, #8]
 80096be:	3b01      	subs	r3, #1
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	4b74      	ldr	r3, [pc, #464]	; (8009894 <tcp_receive+0xbe4>)
 80096c4:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80096c6:	4b73      	ldr	r3, [pc, #460]	; (8009894 <tcp_receive+0xbe4>)
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	4a72      	ldr	r2, [pc, #456]	; (8009894 <tcp_receive+0xbe4>)
 80096cc:	8912      	ldrh	r2, [r2, #8]
 80096ce:	4611      	mov	r1, r2
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fc f95f 	bl	8005994 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80096d6:	4b6f      	ldr	r3, [pc, #444]	; (8009894 <tcp_receive+0xbe4>)
 80096d8:	891c      	ldrh	r4, [r3, #8]
 80096da:	4b6e      	ldr	r3, [pc, #440]	; (8009894 <tcp_receive+0xbe4>)
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	899b      	ldrh	r3, [r3, #12]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fb f9a1 	bl	8004a2a <lwip_htons>
 80096e8:	4603      	mov	r3, r0
 80096ea:	f003 0303 	and.w	r3, r3, #3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <tcp_receive+0xa46>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e000      	b.n	80096f8 <tcp_receive+0xa48>
 80096f6:	2300      	movs	r3, #0
 80096f8:	4423      	add	r3, r4
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	4b63      	ldr	r3, [pc, #396]	; (800988c <tcp_receive+0xbdc>)
 80096fe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009700:	4b62      	ldr	r3, [pc, #392]	; (800988c <tcp_receive+0xbdc>)
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	4b62      	ldr	r3, [pc, #392]	; (8009890 <tcp_receive+0xbe0>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	441a      	add	r2, r3
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	429a      	cmp	r2, r3
 8009714:	d006      	beq.n	8009724 <tcp_receive+0xa74>
 8009716:	4b60      	ldr	r3, [pc, #384]	; (8009898 <tcp_receive+0xbe8>)
 8009718:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800971c:	495f      	ldr	r1, [pc, #380]	; (800989c <tcp_receive+0xbec>)
 800971e:	4860      	ldr	r0, [pc, #384]	; (80098a0 <tcp_receive+0xbf0>)
 8009720:	f004 fd02 	bl	800e128 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009728:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800972a:	4b58      	ldr	r3, [pc, #352]	; (800988c <tcp_receive+0xbdc>)
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	4b57      	ldr	r3, [pc, #348]	; (8009890 <tcp_receive+0xbe0>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	441a      	add	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800973e:	4b53      	ldr	r3, [pc, #332]	; (800988c <tcp_receive+0xbdc>)
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d206      	bcs.n	8009754 <tcp_receive+0xaa4>
 8009746:	4b54      	ldr	r3, [pc, #336]	; (8009898 <tcp_receive+0xbe8>)
 8009748:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800974c:	4955      	ldr	r1, [pc, #340]	; (80098a4 <tcp_receive+0xbf4>)
 800974e:	4854      	ldr	r0, [pc, #336]	; (80098a0 <tcp_receive+0xbf0>)
 8009750:	f004 fcea 	bl	800e128 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009758:	4b4c      	ldr	r3, [pc, #304]	; (800988c <tcp_receive+0xbdc>)
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	b29a      	uxth	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7fd f8ed 	bl	8006944 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800976a:	4b4a      	ldr	r3, [pc, #296]	; (8009894 <tcp_receive+0xbe4>)
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	891b      	ldrh	r3, [r3, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d006      	beq.n	8009782 <tcp_receive+0xad2>
          recv_data = inseg.p;
 8009774:	4b47      	ldr	r3, [pc, #284]	; (8009894 <tcp_receive+0xbe4>)
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	4a4b      	ldr	r2, [pc, #300]	; (80098a8 <tcp_receive+0xbf8>)
 800977a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800977c:	4b45      	ldr	r3, [pc, #276]	; (8009894 <tcp_receive+0xbe4>)
 800977e:	2200      	movs	r2, #0
 8009780:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009782:	4b44      	ldr	r3, [pc, #272]	; (8009894 <tcp_receive+0xbe4>)
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	899b      	ldrh	r3, [r3, #12]
 8009788:	b29b      	uxth	r3, r3
 800978a:	4618      	mov	r0, r3
 800978c:	f7fb f94d 	bl	8004a2a <lwip_htons>
 8009790:	4603      	mov	r3, r0
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 80b4 	beq.w	8009904 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800979c:	4b43      	ldr	r3, [pc, #268]	; (80098ac <tcp_receive+0xbfc>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	f043 0320 	orr.w	r3, r3, #32
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	4b41      	ldr	r3, [pc, #260]	; (80098ac <tcp_receive+0xbfc>)
 80097a8:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80097aa:	e0ab      	b.n	8009904 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b0:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	4a35      	ldr	r2, [pc, #212]	; (8009890 <tcp_receive+0xbe0>)
 80097bc:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	891b      	ldrh	r3, [r3, #8]
 80097c2:	461c      	mov	r4, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	899b      	ldrh	r3, [r3, #12]
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fb f92c 	bl	8004a2a <lwip_htons>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f003 0303 	and.w	r3, r3, #3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <tcp_receive+0xb30>
 80097dc:	2301      	movs	r3, #1
 80097de:	e000      	b.n	80097e2 <tcp_receive+0xb32>
 80097e0:	2300      	movs	r3, #0
 80097e2:	191a      	adds	r2, r3, r4
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e8:	441a      	add	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f2:	461c      	mov	r4, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	891b      	ldrh	r3, [r3, #8]
 80097f8:	461d      	mov	r5, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	899b      	ldrh	r3, [r3, #12]
 8009800:	b29b      	uxth	r3, r3
 8009802:	4618      	mov	r0, r3
 8009804:	f7fb f911 	bl	8004a2a <lwip_htons>
 8009808:	4603      	mov	r3, r0
 800980a:	f003 0303 	and.w	r3, r3, #3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <tcp_receive+0xb66>
 8009812:	2301      	movs	r3, #1
 8009814:	e000      	b.n	8009818 <tcp_receive+0xb68>
 8009816:	2300      	movs	r3, #0
 8009818:	442b      	add	r3, r5
 800981a:	429c      	cmp	r4, r3
 800981c:	d206      	bcs.n	800982c <tcp_receive+0xb7c>
 800981e:	4b1e      	ldr	r3, [pc, #120]	; (8009898 <tcp_receive+0xbe8>)
 8009820:	f240 52dd 	movw	r2, #1501	; 0x5dd
 8009824:	4922      	ldr	r1, [pc, #136]	; (80098b0 <tcp_receive+0xc00>)
 8009826:	481e      	ldr	r0, [pc, #120]	; (80098a0 <tcp_receive+0xbf0>)
 8009828:	f004 fc7e 	bl	800e128 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	891b      	ldrh	r3, [r3, #8]
 8009830:	461c      	mov	r4, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	899b      	ldrh	r3, [r3, #12]
 8009838:	b29b      	uxth	r3, r3
 800983a:	4618      	mov	r0, r3
 800983c:	f7fb f8f5 	bl	8004a2a <lwip_htons>
 8009840:	4603      	mov	r3, r0
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <tcp_receive+0xb9e>
 800984a:	2301      	movs	r3, #1
 800984c:	e000      	b.n	8009850 <tcp_receive+0xba0>
 800984e:	2300      	movs	r3, #0
 8009850:	1919      	adds	r1, r3, r4
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009856:	b28b      	uxth	r3, r1
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	b29a      	uxth	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7fd f86f 	bl	8006944 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	891b      	ldrh	r3, [r3, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d028      	beq.n	80098c2 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009870:	4b0d      	ldr	r3, [pc, #52]	; (80098a8 <tcp_receive+0xbf8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01d      	beq.n	80098b4 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8009878:	4b0b      	ldr	r3, [pc, #44]	; (80098a8 <tcp_receive+0xbf8>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f7fc fac8 	bl	8005e18 <pbuf_cat>
 8009888:	e018      	b.n	80098bc <tcp_receive+0xc0c>
 800988a:	bf00      	nop
 800988c:	20006d52 	.word	0x20006d52
 8009890:	20006d48 	.word	0x20006d48
 8009894:	20006d28 	.word	0x20006d28
 8009898:	080101a8 	.word	0x080101a8
 800989c:	080104ac 	.word	0x080104ac
 80098a0:	080101ec 	.word	0x080101ec
 80098a4:	080104e8 	.word	0x080104e8
 80098a8:	20006d58 	.word	0x20006d58
 80098ac:	20006d55 	.word	0x20006d55
 80098b0:	08010508 	.word	0x08010508
            } else {
              recv_data = cseg->p;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	4a71      	ldr	r2, [pc, #452]	; (8009a80 <tcp_receive+0xdd0>)
 80098ba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	899b      	ldrh	r3, [r3, #12]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fb f8ad 	bl	8004a2a <lwip_htons>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00d      	beq.n	80098f6 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80098da:	4b6a      	ldr	r3, [pc, #424]	; (8009a84 <tcp_receive+0xdd4>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	f043 0320 	orr.w	r3, r3, #32
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	4b67      	ldr	r3, [pc, #412]	; (8009a84 <tcp_receive+0xdd4>)
 80098e6:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	7d1b      	ldrb	r3, [r3, #20]
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d102      	bne.n	80098f6 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2207      	movs	r2, #7
 80098f4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f7fd fcb0 	bl	8007264 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009908:	2b00      	cmp	r3, #0
 800990a:	d008      	beq.n	800991e <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009918:	429a      	cmp	r2, r3
 800991a:	f43f af47 	beq.w	80097ac <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	7e9b      	ldrb	r3, [r3, #26]
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00e      	beq.n	8009948 <tcp_receive+0xc98>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	7e9b      	ldrb	r3, [r3, #26]
 800992e:	f023 0301 	bic.w	r3, r3, #1
 8009932:	b2da      	uxtb	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	769a      	strb	r2, [r3, #26]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	7e9b      	ldrb	r3, [r3, #26]
 800993c:	f043 0302 	orr.w	r3, r3, #2
 8009940:	b2da      	uxtb	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009946:	e181      	b.n	8009c4c <tcp_receive+0xf9c>
        tcp_ack(pcb);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	7e9b      	ldrb	r3, [r3, #26]
 800994c:	f043 0301 	orr.w	r3, r3, #1
 8009950:	b2da      	uxtb	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009956:	e179      	b.n	8009c4c <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f001 f8c5 	bl	800aae8 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009966:	4848      	ldr	r0, [pc, #288]	; (8009a88 <tcp_receive+0xdd8>)
 8009968:	f7fd fca3 	bl	80072b2 <tcp_seg_copy>
 800996c:	4602      	mov	r2, r0
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8009972:	e16b      	b.n	8009c4c <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8009974:	2300      	movs	r3, #0
 8009976:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800997e:	e150      	b.n	8009c22 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8009980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	4b41      	ldr	r3, [pc, #260]	; (8009a8c <tcp_receive+0xddc>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d11d      	bne.n	80099ca <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800998e:	4b3e      	ldr	r3, [pc, #248]	; (8009a88 <tcp_receive+0xdd8>)
 8009990:	891a      	ldrh	r2, [r3, #8]
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	891b      	ldrh	r3, [r3, #8]
 8009996:	429a      	cmp	r2, r3
 8009998:	f240 8148 	bls.w	8009c2c <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800999c:	483a      	ldr	r0, [pc, #232]	; (8009a88 <tcp_receive+0xdd8>)
 800999e:	f7fd fc88 	bl	80072b2 <tcp_seg_copy>
 80099a2:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 8142 	beq.w	8009c30 <tcp_receive+0xf80>
                  if (prev != NULL) {
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d003      	beq.n	80099ba <tcp_receive+0xd0a>
                    prev->next = cseg;
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	e002      	b.n	80099c0 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80099c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f7ff f8fe 	bl	8008bc4 <tcp_oos_insert_segment>
                }
                break;
 80099c8:	e132      	b.n	8009c30 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d117      	bne.n	8009a00 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80099d0:	4b2e      	ldr	r3, [pc, #184]	; (8009a8c <tcp_receive+0xddc>)
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	da57      	bge.n	8009a90 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80099e0:	4829      	ldr	r0, [pc, #164]	; (8009a88 <tcp_receive+0xdd8>)
 80099e2:	f7fd fc66 	bl	80072b2 <tcp_seg_copy>
 80099e6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 8122 	beq.w	8009c34 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80099f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f7ff f8e3 	bl	8008bc4 <tcp_oos_insert_segment>
                  }
                  break;
 80099fe:	e119      	b.n	8009c34 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8009a00:	4b22      	ldr	r3, [pc, #136]	; (8009a8c <tcp_receive+0xddc>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	db3e      	blt.n	8009a90 <tcp_receive+0xde0>
 8009a12:	4b1e      	ldr	r3, [pc, #120]	; (8009a8c <tcp_receive+0xddc>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	3301      	adds	r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	dc35      	bgt.n	8009a90 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8009a24:	4818      	ldr	r0, [pc, #96]	; (8009a88 <tcp_receive+0xdd8>)
 8009a26:	f7fd fc44 	bl	80072b2 <tcp_seg_copy>
 8009a2a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 8102 	beq.w	8009c38 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a3c:	8912      	ldrh	r2, [r2, #8]
 8009a3e:	441a      	add	r2, r3
 8009a40:	4b12      	ldr	r3, [pc, #72]	; (8009a8c <tcp_receive+0xddc>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	dd12      	ble.n	8009a70 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009a4a:	4b10      	ldr	r3, [pc, #64]	; (8009a8c <tcp_receive+0xddc>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	891b      	ldrh	r3, [r3, #8]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	f7fb ff92 	bl	8005994 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7ff f8a3 	bl	8008bc4 <tcp_oos_insert_segment>
                  }
                  break;
 8009a7e:	e0db      	b.n	8009c38 <tcp_receive+0xf88>
 8009a80:	20006d58 	.word	0x20006d58
 8009a84:	20006d55 	.word	0x20006d55
 8009a88:	20006d28 	.word	0x20006d28
 8009a8c:	20006d48 	.word	0x20006d48
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f040 80bf 	bne.w	8009c18 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009a9a:	4b7c      	ldr	r3, [pc, #496]	; (8009c8c <tcp_receive+0xfdc>)
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f340 80b6 	ble.w	8009c18 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	899b      	ldrh	r3, [r3, #12]
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fa ffb8 	bl	8004a2a <lwip_htons>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f040 80bb 	bne.w	8009c3c <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009ac6:	4872      	ldr	r0, [pc, #456]	; (8009c90 <tcp_receive+0xfe0>)
 8009ac8:	f7fd fbf3 	bl	80072b2 <tcp_seg_copy>
 8009acc:	4602      	mov	r2, r0
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f000 80b2 	beq.w	8009c40 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ae4:	8912      	ldrh	r2, [r2, #8]
 8009ae6:	441a      	add	r2, r3
 8009ae8:	4b68      	ldr	r3, [pc, #416]	; (8009c8c <tcp_receive+0xfdc>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	dd12      	ble.n	8009b18 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009af2:	4b66      	ldr	r3, [pc, #408]	; (8009c8c <tcp_receive+0xfdc>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b06:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	891b      	ldrh	r3, [r3, #8]
 8009b10:	4619      	mov	r1, r3
 8009b12:	4610      	mov	r0, r2
 8009b14:	f7fb ff3e 	bl	8005994 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009b18:	4b5e      	ldr	r3, [pc, #376]	; (8009c94 <tcp_receive+0xfe4>)
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	4b5b      	ldr	r3, [pc, #364]	; (8009c8c <tcp_receive+0xfdc>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	441a      	add	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	6879      	ldr	r1, [r7, #4]
 8009b2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b2c:	440b      	add	r3, r1
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f340 8085 	ble.w	8009c40 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	899b      	ldrh	r3, [r3, #12]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fa ff72 	bl	8004a2a <lwip_htons>
 8009b46:	4603      	mov	r3, r0
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01e      	beq.n	8009b8e <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	899b      	ldrh	r3, [r3, #12]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b5e:	b29c      	uxth	r4, r3
 8009b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	899b      	ldrh	r3, [r3, #12]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fa ff5d 	bl	8004a2a <lwip_htons>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fa ff56 	bl	8004a2a <lwip_htons>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	461a      	mov	r2, r3
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	4322      	orrs	r2, r4
 8009b8a:	b292      	uxth	r2, r2
 8009b8c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b98:	4413      	add	r3, r2
 8009b9a:	b299      	uxth	r1, r3
 8009b9c:	4b3b      	ldr	r3, [pc, #236]	; (8009c8c <tcp_receive+0xfdc>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	1a8a      	subs	r2, r1, r2
 8009ba8:	b292      	uxth	r2, r2
 8009baa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	891b      	ldrh	r3, [r3, #8]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7fb feea 	bl	8005994 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	891c      	ldrh	r4, [r3, #8]
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	899b      	ldrh	r3, [r3, #12]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fa ff2a 	bl	8004a2a <lwip_htons>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	f003 0303 	and.w	r3, r3, #3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <tcp_receive+0xf34>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e000      	b.n	8009be6 <tcp_receive+0xf36>
 8009be4:	2300      	movs	r3, #0
 8009be6:	4423      	add	r3, r4
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	4b2a      	ldr	r3, [pc, #168]	; (8009c94 <tcp_receive+0xfe4>)
 8009bec:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009bee:	4b29      	ldr	r3, [pc, #164]	; (8009c94 <tcp_receive+0xfe4>)
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	4b25      	ldr	r3, [pc, #148]	; (8009c8c <tcp_receive+0xfdc>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	441a      	add	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009c02:	440b      	add	r3, r1
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d01b      	beq.n	8009c40 <tcp_receive+0xf90>
 8009c08:	4b23      	ldr	r3, [pc, #140]	; (8009c98 <tcp_receive+0xfe8>)
 8009c0a:	f240 627a 	movw	r2, #1658	; 0x67a
 8009c0e:	4923      	ldr	r1, [pc, #140]	; (8009c9c <tcp_receive+0xfec>)
 8009c10:	4823      	ldr	r0, [pc, #140]	; (8009ca0 <tcp_receive+0xff0>)
 8009c12:	f004 fa89 	bl	800e128 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009c16:	e013      	b.n	8009c40 <tcp_receive+0xf90>
              }
            }
            prev = next;
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f47f aeab 	bne.w	8009980 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8009c2a:	e00f      	b.n	8009c4c <tcp_receive+0xf9c>
                break;
 8009c2c:	bf00      	nop
 8009c2e:	e00d      	b.n	8009c4c <tcp_receive+0xf9c>
                break;
 8009c30:	bf00      	nop
 8009c32:	e00b      	b.n	8009c4c <tcp_receive+0xf9c>
                  break;
 8009c34:	bf00      	nop
 8009c36:	e009      	b.n	8009c4c <tcp_receive+0xf9c>
                  break;
 8009c38:	bf00      	nop
 8009c3a:	e007      	b.n	8009c4c <tcp_receive+0xf9c>
                  break;
 8009c3c:	bf00      	nop
 8009c3e:	e005      	b.n	8009c4c <tcp_receive+0xf9c>
                break;
 8009c40:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8009c42:	e003      	b.n	8009c4c <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 ff4f 	bl	800aae8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009c4a:	e01a      	b.n	8009c82 <tcp_receive+0xfd2>
 8009c4c:	e019      	b.n	8009c82 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009c4e:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <tcp_receive+0xfdc>)
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	db0a      	blt.n	8009c72 <tcp_receive+0xfc2>
 8009c5c:	4b0b      	ldr	r3, [pc, #44]	; (8009c8c <tcp_receive+0xfdc>)
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009c68:	440b      	add	r3, r1
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	dd07      	ble.n	8009c82 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	7e9b      	ldrb	r3, [r3, #26]
 8009c76:	f043 0302 	orr.w	r3, r3, #2
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8009c80:	e7ff      	b.n	8009c82 <tcp_receive+0xfd2>
 8009c82:	bf00      	nop
 8009c84:	3734      	adds	r7, #52	; 0x34
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20006d48 	.word	0x20006d48
 8009c90:	20006d28 	.word	0x20006d28
 8009c94:	20006d52 	.word	0x20006d52
 8009c98:	080101a8 	.word	0x080101a8
 8009c9c:	08010474 	.word	0x08010474
 8009ca0:	080101ec 	.word	0x080101ec

08009ca4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8009caa:	4b18      	ldr	r3, [pc, #96]	; (8009d0c <tcp_getoptbyte+0x68>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d005      	beq.n	8009cbe <tcp_getoptbyte+0x1a>
 8009cb2:	4b17      	ldr	r3, [pc, #92]	; (8009d10 <tcp_getoptbyte+0x6c>)
 8009cb4:	881a      	ldrh	r2, [r3, #0]
 8009cb6:	4b17      	ldr	r3, [pc, #92]	; (8009d14 <tcp_getoptbyte+0x70>)
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d20e      	bcs.n	8009cdc <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8009cbe:	4b16      	ldr	r3, [pc, #88]	; (8009d18 <tcp_getoptbyte+0x74>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3314      	adds	r3, #20
 8009cc4:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8009cc6:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <tcp_getoptbyte+0x6c>)
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	b291      	uxth	r1, r2
 8009cce:	4a10      	ldr	r2, [pc, #64]	; (8009d10 <tcp_getoptbyte+0x6c>)
 8009cd0:	8011      	strh	r1, [r2, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	e010      	b.n	8009cfe <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8009cdc:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <tcp_getoptbyte+0x6c>)
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	1c5a      	adds	r2, r3, #1
 8009ce2:	b291      	uxth	r1, r2
 8009ce4:	4a0a      	ldr	r2, [pc, #40]	; (8009d10 <tcp_getoptbyte+0x6c>)
 8009ce6:	8011      	strh	r1, [r2, #0]
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	4b0a      	ldr	r3, [pc, #40]	; (8009d14 <tcp_getoptbyte+0x70>)
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8009cf4:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <tcp_getoptbyte+0x68>)
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	79fb      	ldrb	r3, [r7, #7]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	20006d40 	.word	0x20006d40
 8009d10:	20006d44 	.word	0x20006d44
 8009d14:	20006d3e 	.word	0x20006d3e
 8009d18:	20006d38 	.word	0x20006d38

08009d1c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009d24:	4b2e      	ldr	r3, [pc, #184]	; (8009de0 <tcp_parseopt+0xc4>)
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d055      	beq.n	8009dd8 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009d2c:	4b2d      	ldr	r3, [pc, #180]	; (8009de4 <tcp_parseopt+0xc8>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	801a      	strh	r2, [r3, #0]
 8009d32:	e045      	b.n	8009dc0 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8009d34:	f7ff ffb6 	bl	8009ca4 <tcp_getoptbyte>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d006      	beq.n	8009d50 <tcp_parseopt+0x34>
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	dc2b      	bgt.n	8009d9e <tcp_parseopt+0x82>
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d041      	beq.n	8009dce <tcp_parseopt+0xb2>
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d127      	bne.n	8009d9e <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 8009d4e:	e037      	b.n	8009dc0 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009d50:	f7ff ffa8 	bl	8009ca4 <tcp_getoptbyte>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	d13b      	bne.n	8009dd2 <tcp_parseopt+0xb6>
 8009d5a:	4b22      	ldr	r3, [pc, #136]	; (8009de4 <tcp_parseopt+0xc8>)
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	4a1f      	ldr	r2, [pc, #124]	; (8009de0 <tcp_parseopt+0xc4>)
 8009d62:	8812      	ldrh	r2, [r2, #0]
 8009d64:	4293      	cmp	r3, r2
 8009d66:	da34      	bge.n	8009dd2 <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8009d68:	f7ff ff9c 	bl	8009ca4 <tcp_getoptbyte>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	021b      	lsls	r3, r3, #8
 8009d72:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8009d74:	f7ff ff96 	bl	8009ca4 <tcp_getoptbyte>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	89bb      	ldrh	r3, [r7, #12]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009d82:	89bb      	ldrh	r3, [r7, #12]
 8009d84:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009d88:	d804      	bhi.n	8009d94 <tcp_parseopt+0x78>
 8009d8a:	89bb      	ldrh	r3, [r7, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <tcp_parseopt+0x78>
 8009d90:	89ba      	ldrh	r2, [r7, #12]
 8009d92:	e001      	b.n	8009d98 <tcp_parseopt+0x7c>
 8009d94:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8009d9c:	e010      	b.n	8009dc0 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8009d9e:	f7ff ff81 	bl	8009ca4 <tcp_getoptbyte>
 8009da2:	4603      	mov	r3, r0
 8009da4:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8009da6:	7afb      	ldrb	r3, [r7, #11]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d914      	bls.n	8009dd6 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	4b0c      	ldr	r3, [pc, #48]	; (8009de4 <tcp_parseopt+0xc8>)
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	4413      	add	r3, r2
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	3b02      	subs	r3, #2
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	4b09      	ldr	r3, [pc, #36]	; (8009de4 <tcp_parseopt+0xc8>)
 8009dbe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009dc0:	4b08      	ldr	r3, [pc, #32]	; (8009de4 <tcp_parseopt+0xc8>)
 8009dc2:	881a      	ldrh	r2, [r3, #0]
 8009dc4:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <tcp_parseopt+0xc4>)
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d3b3      	bcc.n	8009d34 <tcp_parseopt+0x18>
 8009dcc:	e004      	b.n	8009dd8 <tcp_parseopt+0xbc>
        return;
 8009dce:	bf00      	nop
 8009dd0:	e002      	b.n	8009dd8 <tcp_parseopt+0xbc>
          return;
 8009dd2:	bf00      	nop
 8009dd4:	e000      	b.n	8009dd8 <tcp_parseopt+0xbc>
          return;
 8009dd6:	bf00      	nop
      }
    }
  }
}
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	20006d3c 	.word	0x20006d3c
 8009de4:	20006d44 	.word	0x20006d44

08009de8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009de8:	b480      	push	{r7}
 8009dea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009dec:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <tcp_trigger_input_pcb_close+0x1c>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	f043 0310 	orr.w	r3, r3, #16
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	4b03      	ldr	r3, [pc, #12]	; (8009e04 <tcp_trigger_input_pcb_close+0x1c>)
 8009df8:	701a      	strb	r2, [r3, #0]
}
 8009dfa:	bf00      	nop
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	20006d55 	.word	0x20006d55

08009e08 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	607b      	str	r3, [r7, #4]
 8009e12:	460b      	mov	r3, r1
 8009e14:	817b      	strh	r3, [r7, #10]
 8009e16:	4613      	mov	r3, r2
 8009e18:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009e1a:	897a      	ldrh	r2, [r7, #10]
 8009e1c:	893b      	ldrh	r3, [r7, #8]
 8009e1e:	4413      	add	r3, r2
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	3314      	adds	r3, #20
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	2200      	movs	r2, #0
 8009e28:	4619      	mov	r1, r3
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	f7fb fbae 	bl	800558c <pbuf_alloc>
 8009e30:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d056      	beq.n	8009ee6 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009e38:	897b      	ldrh	r3, [r7, #10]
 8009e3a:	3313      	adds	r3, #19
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	8952      	ldrh	r2, [r2, #10]
 8009e40:	4293      	cmp	r3, r2
 8009e42:	db05      	blt.n	8009e50 <tcp_output_alloc_header+0x48>
 8009e44:	4b2a      	ldr	r3, [pc, #168]	; (8009ef0 <tcp_output_alloc_header+0xe8>)
 8009e46:	2272      	movs	r2, #114	; 0x72
 8009e48:	492a      	ldr	r1, [pc, #168]	; (8009ef4 <tcp_output_alloc_header+0xec>)
 8009e4a:	482b      	ldr	r0, [pc, #172]	; (8009ef8 <tcp_output_alloc_header+0xf0>)
 8009e4c:	f004 f96c 	bl	800e128 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	8adb      	ldrh	r3, [r3, #22]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fa fde5 	bl	8004a2a <lwip_htons>
 8009e60:	4603      	mov	r3, r0
 8009e62:	461a      	mov	r2, r3
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	8b1b      	ldrh	r3, [r3, #24]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fa fddc 	bl	8004a2a <lwip_htons>
 8009e72:	4603      	mov	r3, r0
 8009e74:	461a      	mov	r2, r3
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fa fdde 	bl	8004a46 <lwip_htonl>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009e90:	897b      	ldrh	r3, [r7, #10]
 8009e92:	089b      	lsrs	r3, r3, #2
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	3305      	adds	r3, #5
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	031b      	lsls	r3, r3, #12
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	f043 0310 	orr.w	r3, r3, #16
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fa fdc0 	bl	8004a2a <lwip_htons>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	461a      	mov	r2, r3
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fa fdb7 	bl	8004a2a <lwip_htons>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	741a      	strb	r2, [r3, #16]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	749a      	strb	r2, [r3, #18]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009ee0:	441a      	add	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009ee6:	697b      	ldr	r3, [r7, #20]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	08010530 	.word	0x08010530
 8009ef4:	08010564 	.word	0x08010564
 8009ef8:	08010594 	.word	0x08010594

08009efc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009efc:	b590      	push	{r4, r7, lr}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d02d      	beq.n	8009f68 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e002      	b.n	8009f1a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1f8      	bne.n	8009f14 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	899b      	ldrh	r3, [r3, #12]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fa fd7d 	bl	8004a2a <lwip_htons>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d116      	bne.n	8009f68 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	899b      	ldrh	r3, [r3, #12]
 8009f40:	b29c      	uxth	r4, r3
 8009f42:	2001      	movs	r0, #1
 8009f44:	f7fa fd71 	bl	8004a2a <lwip_htons>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	4322      	orrs	r2, r4
 8009f52:	b292      	uxth	r2, r2
 8009f54:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	7e9b      	ldrb	r3, [r3, #26]
 8009f5a:	f043 0320 	orr.w	r3, r3, #32
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	e004      	b.n	8009f72 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009f68:	2101      	movs	r1, #1
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fcc0 	bl	800a8f0 <tcp_enqueue_flags>
 8009f70:	4603      	mov	r3, r0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd90      	pop	{r4, r7, pc}
	...

08009f7c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009f7c:	b590      	push	{r4, r7, lr}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	603b      	str	r3, [r7, #0]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009f8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f9a:	2003      	movs	r0, #3
 8009f9c:	f7fb f8f2 	bl	8005184 <memp_malloc>
 8009fa0:	6138      	str	r0, [r7, #16]
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d104      	bne.n	8009fb2 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009fa8:	68b8      	ldr	r0, [r7, #8]
 8009faa:	f7fb fe67 	bl	8005c7c <pbuf_free>
    return NULL;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e061      	b.n	800a076 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009fb8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	891a      	ldrh	r2, [r3, #8]
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d205      	bcs.n	8009fde <tcp_create_segment+0x62>
 8009fd2:	4b2b      	ldr	r3, [pc, #172]	; (800a080 <tcp_create_segment+0x104>)
 8009fd4:	22ba      	movs	r2, #186	; 0xba
 8009fd6:	492b      	ldr	r1, [pc, #172]	; (800a084 <tcp_create_segment+0x108>)
 8009fd8:	482b      	ldr	r0, [pc, #172]	; (800a088 <tcp_create_segment+0x10c>)
 8009fda:	f004 f8a5 	bl	800e128 <iprintf>
  seg->len = p->tot_len - optlen;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	891a      	ldrh	r2, [r3, #8]
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8009fee:	2114      	movs	r1, #20
 8009ff0:	68b8      	ldr	r0, [r7, #8]
 8009ff2:	f7fb fe1f 	bl	8005c34 <pbuf_header>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009ffc:	6938      	ldr	r0, [r7, #16]
 8009ffe:	f7fd f931 	bl	8007264 <tcp_seg_free>
    return NULL;
 800a002:	2300      	movs	r3, #0
 800a004:	e037      	b.n	800a076 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8ada      	ldrh	r2, [r3, #22]
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	68dc      	ldr	r4, [r3, #12]
 800a018:	4610      	mov	r0, r2
 800a01a:	f7fa fd06 	bl	8004a2a <lwip_htons>
 800a01e:	4603      	mov	r3, r0
 800a020:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	8b1a      	ldrh	r2, [r3, #24]
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	68dc      	ldr	r4, [r3, #12]
 800a02a:	4610      	mov	r0, r2
 800a02c:	f7fa fcfd 	bl	8004a2a <lwip_htons>
 800a030:	4603      	mov	r3, r0
 800a032:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	68dc      	ldr	r4, [r3, #12]
 800a038:	6838      	ldr	r0, [r7, #0]
 800a03a:	f7fa fd04 	bl	8004a46 <lwip_htonl>
 800a03e:	4603      	mov	r3, r0
 800a040:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	089b      	lsrs	r3, r3, #2
 800a046:	b2db      	uxtb	r3, r3
 800a048:	b29b      	uxth	r3, r3
 800a04a:	3305      	adds	r3, #5
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	031b      	lsls	r3, r3, #12
 800a050:	b29a      	uxth	r2, r3
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	b29b      	uxth	r3, r3
 800a056:	4313      	orrs	r3, r2
 800a058:	b29a      	uxth	r2, r3
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	68dc      	ldr	r4, [r3, #12]
 800a05e:	4610      	mov	r0, r2
 800a060:	f7fa fce3 	bl	8004a2a <lwip_htons>
 800a064:	4603      	mov	r3, r0
 800a066:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	749a      	strb	r2, [r3, #18]
 800a070:	2200      	movs	r2, #0
 800a072:	74da      	strb	r2, [r3, #19]
  return seg;
 800a074:	693b      	ldr	r3, [r7, #16]
}
 800a076:	4618      	mov	r0, r3
 800a078:	371c      	adds	r7, #28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd90      	pop	{r4, r7, pc}
 800a07e:	bf00      	nop
 800a080:	08010530 	.word	0x08010530
 800a084:	080105bc 	.word	0x080105bc
 800a088:	08010594 	.word	0x08010594

0800a08c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	607b      	str	r3, [r7, #4]
 800a094:	4603      	mov	r3, r0
 800a096:	73fb      	strb	r3, [r7, #15]
 800a098:	460b      	mov	r3, r1
 800a09a:	81bb      	strh	r3, [r7, #12]
 800a09c:	4613      	mov	r3, r2
 800a09e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a0a0:	89bb      	ldrh	r3, [r7, #12]
 800a0a2:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800a0a4:	89ba      	ldrh	r2, [r7, #12]
 800a0a6:	897b      	ldrh	r3, [r7, #10]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d221      	bcs.n	800a0f0 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a0ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a0b0:	f003 0302 	and.w	r3, r3, #2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d111      	bne.n	800a0dc <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	7e9b      	ldrb	r3, [r3, #26]
 800a0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d115      	bne.n	800a0f0 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800a0c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d103      	bne.n	800a0dc <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a0dc:	89bb      	ldrh	r3, [r7, #12]
 800a0de:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800a0e2:	f023 0203 	bic.w	r2, r3, #3
 800a0e6:	897b      	ldrh	r3, [r7, #10]
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	bf28      	it	cs
 800a0ec:	4613      	movcs	r3, r2
 800a0ee:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a0f0:	8af9      	ldrh	r1, [r7, #22]
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fb fa48 	bl	800558c <pbuf_alloc>
 800a0fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800a104:	2300      	movs	r3, #0
 800a106:	e019      	b.n	800a13c <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d006      	beq.n	800a11e <tcp_pbuf_prealloc+0x92>
 800a110:	4b0c      	ldr	r3, [pc, #48]	; (800a144 <tcp_pbuf_prealloc+0xb8>)
 800a112:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a116:	490c      	ldr	r1, [pc, #48]	; (800a148 <tcp_pbuf_prealloc+0xbc>)
 800a118:	480c      	ldr	r0, [pc, #48]	; (800a14c <tcp_pbuf_prealloc+0xc0>)
 800a11a:	f004 f805 	bl	800e128 <iprintf>
  *oversize = p->len - length;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	895a      	ldrh	r2, [r3, #10]
 800a122:	89bb      	ldrh	r3, [r7, #12]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	b29a      	uxth	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	89ba      	ldrh	r2, [r7, #12]
 800a130:	811a      	strh	r2, [r3, #8]
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	891a      	ldrh	r2, [r3, #8]
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	815a      	strh	r2, [r3, #10]
  return p;
 800a13a:	693b      	ldr	r3, [r7, #16]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	08010530 	.word	0x08010530
 800a148:	080105d4 	.word	0x080105d4
 800a14c:	08010594 	.word	0x08010594

0800a150 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	7d1b      	ldrb	r3, [r3, #20]
 800a160:	2b04      	cmp	r3, #4
 800a162:	d00e      	beq.n	800a182 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a168:	2b07      	cmp	r3, #7
 800a16a:	d00a      	beq.n	800a182 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a170:	2b02      	cmp	r3, #2
 800a172:	d006      	beq.n	800a182 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d002      	beq.n	800a182 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a17c:	f06f 030a 	mvn.w	r3, #10
 800a180:	e04f      	b.n	800a222 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800a182:	887b      	ldrh	r3, [r7, #2]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <tcp_write_checks+0x3c>
    return ERR_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	e04a      	b.n	800a222 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a192:	887a      	ldrh	r2, [r7, #2]
 800a194:	429a      	cmp	r2, r3
 800a196:	d909      	bls.n	800a1ac <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	7e9b      	ldrb	r3, [r3, #26]
 800a19c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1aa:	e03a      	b.n	800a222 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1b2:	2b08      	cmp	r3, #8
 800a1b4:	d806      	bhi.n	800a1c4 <tcp_write_checks+0x74>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1bc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d909      	bls.n	800a1d8 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	7e9b      	ldrb	r3, [r3, #26]
 800a1c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d6:	e024      	b.n	800a222 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00f      	beq.n	800a202 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d11a      	bne.n	800a220 <tcp_write_checks+0xd0>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d116      	bne.n	800a220 <tcp_write_checks+0xd0>
 800a1f2:	4b0e      	ldr	r3, [pc, #56]	; (800a22c <tcp_write_checks+0xdc>)
 800a1f4:	f240 1255 	movw	r2, #341	; 0x155
 800a1f8:	490d      	ldr	r1, [pc, #52]	; (800a230 <tcp_write_checks+0xe0>)
 800a1fa:	480e      	ldr	r0, [pc, #56]	; (800a234 <tcp_write_checks+0xe4>)
 800a1fc:	f003 ff94 	bl	800e128 <iprintf>
 800a200:	e00e      	b.n	800a220 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a206:	2b00      	cmp	r3, #0
 800a208:	d103      	bne.n	800a212 <tcp_write_checks+0xc2>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d006      	beq.n	800a220 <tcp_write_checks+0xd0>
 800a212:	4b06      	ldr	r3, [pc, #24]	; (800a22c <tcp_write_checks+0xdc>)
 800a214:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800a218:	4907      	ldr	r1, [pc, #28]	; (800a238 <tcp_write_checks+0xe8>)
 800a21a:	4806      	ldr	r0, [pc, #24]	; (800a234 <tcp_write_checks+0xe4>)
 800a21c:	f003 ff84 	bl	800e128 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	08010530 	.word	0x08010530
 800a230:	080105e8 	.word	0x080105e8
 800a234:	08010594 	.word	0x08010594
 800a238:	08010624 	.word	0x08010624

0800a23c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a23c:	b590      	push	{r4, r7, lr}
 800a23e:	b09b      	sub	sp, #108	; 0x6c
 800a240:	af04      	add	r7, sp, #16
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	4611      	mov	r1, r2
 800a248:	461a      	mov	r2, r3
 800a24a:	460b      	mov	r3, r1
 800a24c:	80fb      	strh	r3, [r7, #6]
 800a24e:	4613      	mov	r3, r2
 800a250:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a256:	2300      	movs	r3, #0
 800a258:	653b      	str	r3, [r7, #80]	; 0x50
 800a25a:	2300      	movs	r3, #0
 800a25c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a25e:	2300      	movs	r3, #0
 800a260:	64bb      	str	r3, [r7, #72]	; 0x48
 800a262:	2300      	movs	r3, #0
 800a264:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a266:	2300      	movs	r3, #0
 800a268:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a280:	2300      	movs	r3, #0
 800a282:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a28a:	085b      	lsrs	r3, r3, #1
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a292:	4293      	cmp	r3, r2
 800a294:	bf28      	it	cs
 800a296:	4613      	movcs	r3, r2
 800a298:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a29a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <tcp_write+0x6a>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2a4:	e000      	b.n	800a2a8 <tcp_write+0x6c>
 800a2a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d109      	bne.n	800a2c4 <tcp_write+0x88>
 800a2b0:	4b92      	ldr	r3, [pc, #584]	; (800a4fc <tcp_write+0x2c0>)
 800a2b2:	f240 1291 	movw	r2, #401	; 0x191
 800a2b6:	4992      	ldr	r1, [pc, #584]	; (800a500 <tcp_write+0x2c4>)
 800a2b8:	4892      	ldr	r0, [pc, #584]	; (800a504 <tcp_write+0x2c8>)
 800a2ba:	f003 ff35 	bl	800e128 <iprintf>
 800a2be:	f06f 030f 	mvn.w	r3, #15
 800a2c2:	e30a      	b.n	800a8da <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a2c4:	88fb      	ldrh	r3, [r7, #6]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7ff ff41 	bl	800a150 <tcp_write_checks>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800a2d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <tcp_write+0xa6>
    return err;
 800a2dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a2e0:	e2fb      	b.n	800a8da <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 80f4 	beq.w	800a4de <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2fa:	653b      	str	r3, [r7, #80]	; 0x50
 800a2fc:	e002      	b.n	800a304 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800a2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1f8      	bne.n	800a2fe <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a30e:	7a9b      	ldrb	r3, [r3, #10]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	b29b      	uxth	r3, r3
 800a314:	f003 0304 	and.w	r3, r3, #4
 800a318:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a31a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a31e:	891b      	ldrh	r3, [r3, #8]
 800a320:	4619      	mov	r1, r3
 800a322:	8c3b      	ldrh	r3, [r7, #32]
 800a324:	440b      	add	r3, r1
 800a326:	429a      	cmp	r2, r3
 800a328:	da06      	bge.n	800a338 <tcp_write+0xfc>
 800a32a:	4b74      	ldr	r3, [pc, #464]	; (800a4fc <tcp_write+0x2c0>)
 800a32c:	f240 12c7 	movw	r2, #455	; 0x1c7
 800a330:	4975      	ldr	r1, [pc, #468]	; (800a508 <tcp_write+0x2cc>)
 800a332:	4874      	ldr	r0, [pc, #464]	; (800a504 <tcp_write+0x2c8>)
 800a334:	f003 fef8 	bl	800e128 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a33a:	891a      	ldrh	r2, [r3, #8]
 800a33c:	8c3b      	ldrh	r3, [r7, #32]
 800a33e:	4413      	add	r3, r2
 800a340:	b29b      	uxth	r3, r3
 800a342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a34e:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a350:	8a7b      	ldrh	r3, [r7, #18]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d026      	beq.n	800a3a4 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a356:	8a7b      	ldrh	r3, [r7, #18]
 800a358:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d206      	bcs.n	800a36c <tcp_write+0x130>
 800a35e:	4b67      	ldr	r3, [pc, #412]	; (800a4fc <tcp_write+0x2c0>)
 800a360:	f240 12d9 	movw	r2, #473	; 0x1d9
 800a364:	4969      	ldr	r1, [pc, #420]	; (800a50c <tcp_write+0x2d0>)
 800a366:	4867      	ldr	r0, [pc, #412]	; (800a504 <tcp_write+0x2c8>)
 800a368:	f003 fede 	bl	800e128 <iprintf>
      seg = last_unsent;
 800a36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a36e:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a370:	8a7b      	ldrh	r3, [r7, #18]
 800a372:	88fa      	ldrh	r2, [r7, #6]
 800a374:	4293      	cmp	r3, r2
 800a376:	bf28      	it	cs
 800a378:	4613      	movcs	r3, r2
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a37e:	4293      	cmp	r3, r2
 800a380:	bf28      	it	cs
 800a382:	4613      	movcs	r3, r2
 800a384:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800a386:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a38a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a38c:	4413      	add	r3, r2
 800a38e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800a392:	8a7a      	ldrh	r2, [r7, #18]
 800a394:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	b29b      	uxth	r3, r3
 800a39a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a39c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a39e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a3a4:	8a7b      	ldrh	r3, [r7, #18]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00b      	beq.n	800a3c2 <tcp_write+0x186>
 800a3aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a3ae:	88fb      	ldrh	r3, [r7, #6]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d006      	beq.n	800a3c2 <tcp_write+0x186>
 800a3b4:	4b51      	ldr	r3, [pc, #324]	; (800a4fc <tcp_write+0x2c0>)
 800a3b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a3ba:	4955      	ldr	r1, [pc, #340]	; (800a510 <tcp_write+0x2d4>)
 800a3bc:	4851      	ldr	r0, [pc, #324]	; (800a504 <tcp_write+0x2c8>)
 800a3be:	f003 feb3 	bl	800e128 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a3c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a3c6:	88fb      	ldrh	r3, [r7, #6]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	f080 8169 	bcs.w	800a6a0 <tcp_write+0x464>
 800a3ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 8165 	beq.w	800a6a0 <tcp_write+0x464>
 800a3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3d8:	891b      	ldrh	r3, [r3, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 8160 	beq.w	800a6a0 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a3e0:	88fa      	ldrh	r2, [r7, #6]
 800a3e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a3e6:	1ad2      	subs	r2, r2, r3
 800a3e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	bfa8      	it	ge
 800a3ee:	4613      	movge	r3, r2
 800a3f0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3f4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a3f6:	797b      	ldrb	r3, [r7, #5]
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d027      	beq.n	800a450 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a400:	f107 0012 	add.w	r0, r7, #18
 800a404:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a406:	8bf9      	ldrh	r1, [r7, #30]
 800a408:	2301      	movs	r3, #1
 800a40a:	9302      	str	r3, [sp, #8]
 800a40c:	797b      	ldrb	r3, [r7, #5]
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	4603      	mov	r3, r0
 800a416:	2004      	movs	r0, #4
 800a418:	f7ff fe38 	bl	800a08c <tcp_pbuf_prealloc>
 800a41c:	6578      	str	r0, [r7, #84]	; 0x54
 800a41e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 8228 	beq.w	800a876 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a428:	6858      	ldr	r0, [r3, #4]
 800a42a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	4413      	add	r3, r2
 800a432:	8bfa      	ldrh	r2, [r7, #30]
 800a434:	4619      	mov	r1, r3
 800a436:	f003 fd81 	bl	800df3c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a43a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a43c:	f7fb fcb2 	bl	8005da4 <pbuf_clen>
 800a440:	4603      	mov	r3, r0
 800a442:	461a      	mov	r2, r3
 800a444:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a448:	4413      	add	r3, r2
 800a44a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a44e:	e03f      	b.n	800a4d0 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
 800a456:	e002      	b.n	800a45e <tcp_write+0x222>
 800a458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	637b      	str	r3, [r7, #52]	; 0x34
 800a45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1f8      	bne.n	800a458 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a468:	7b1b      	ldrb	r3, [r3, #12]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d115      	bne.n	800a49a <tcp_write+0x25e>
 800a46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a474:	8952      	ldrh	r2, [r2, #10]
 800a476:	4413      	add	r3, r2
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d10d      	bne.n	800a49a <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a47e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a482:	2b00      	cmp	r3, #0
 800a484:	d006      	beq.n	800a494 <tcp_write+0x258>
 800a486:	4b1d      	ldr	r3, [pc, #116]	; (800a4fc <tcp_write+0x2c0>)
 800a488:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a48c:	4921      	ldr	r1, [pc, #132]	; (800a514 <tcp_write+0x2d8>)
 800a48e:	481d      	ldr	r0, [pc, #116]	; (800a504 <tcp_write+0x2c8>)
 800a490:	f003 fe4a 	bl	800e128 <iprintf>
          extendlen = seglen;
 800a494:	8bfb      	ldrh	r3, [r7, #30]
 800a496:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a498:	e01a      	b.n	800a4d0 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a49a:	8bfb      	ldrh	r3, [r7, #30]
 800a49c:	2201      	movs	r2, #1
 800a49e:	4619      	mov	r1, r3
 800a4a0:	2004      	movs	r0, #4
 800a4a2:	f7fb f873 	bl	800558c <pbuf_alloc>
 800a4a6:	6578      	str	r0, [r7, #84]	; 0x54
 800a4a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 81e5 	beq.w	800a87a <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800a4b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	441a      	add	r2, r3
 800a4b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ba:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a4bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a4be:	f7fb fc71 	bl	8005da4 <pbuf_clen>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a4d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a4d4:	8bfb      	ldrh	r3, [r7, #30]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a4dc:	e0e0      	b.n	800a6a0 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 80db 	beq.w	800a6a0 <tcp_write+0x464>
 800a4ea:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <tcp_write+0x2c0>)
 800a4ec:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a4f0:	4909      	ldr	r1, [pc, #36]	; (800a518 <tcp_write+0x2dc>)
 800a4f2:	4804      	ldr	r0, [pc, #16]	; (800a504 <tcp_write+0x2c8>)
 800a4f4:	f003 fe18 	bl	800e128 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a4f8:	e0d2      	b.n	800a6a0 <tcp_write+0x464>
 800a4fa:	bf00      	nop
 800a4fc:	08010530 	.word	0x08010530
 800a500:	08010658 	.word	0x08010658
 800a504:	08010594 	.word	0x08010594
 800a508:	0801068c 	.word	0x0801068c
 800a50c:	080106a4 	.word	0x080106a4
 800a510:	080106c4 	.word	0x080106c4
 800a514:	080106e4 	.word	0x080106e4
 800a518:	08010710 	.word	0x08010710
    struct pbuf *p;
    u16_t left = len - pos;
 800a51c:	88fa      	ldrh	r2, [r7, #6]
 800a51e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a532:	8b7a      	ldrh	r2, [r7, #26]
 800a534:	8bbb      	ldrh	r3, [r7, #28]
 800a536:	4293      	cmp	r3, r2
 800a538:	bf28      	it	cs
 800a53a:	4613      	movcs	r3, r2
 800a53c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a53e:	797b      	ldrb	r3, [r7, #5]
 800a540:	f003 0301 	and.w	r3, r3, #1
 800a544:	2b00      	cmp	r3, #0
 800a546:	d036      	beq.n	800a5b6 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	8b3b      	ldrh	r3, [r7, #24]
 800a550:	4413      	add	r3, r2
 800a552:	b299      	uxth	r1, r3
 800a554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a556:	2b00      	cmp	r3, #0
 800a558:	bf0c      	ite	eq
 800a55a:	2301      	moveq	r3, #1
 800a55c:	2300      	movne	r3, #0
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f107 0012 	add.w	r0, r7, #18
 800a564:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a566:	9302      	str	r3, [sp, #8]
 800a568:	797b      	ldrb	r3, [r7, #5]
 800a56a:	9301      	str	r3, [sp, #4]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4603      	mov	r3, r0
 800a572:	2000      	movs	r0, #0
 800a574:	f7ff fd8a 	bl	800a08c <tcp_pbuf_prealloc>
 800a578:	6338      	str	r0, [r7, #48]	; 0x30
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 817e 	beq.w	800a87e <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	895b      	ldrh	r3, [r3, #10]
 800a586:	8b3a      	ldrh	r2, [r7, #24]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d906      	bls.n	800a59a <tcp_write+0x35e>
 800a58c:	4b8f      	ldr	r3, [pc, #572]	; (800a7cc <tcp_write+0x590>)
 800a58e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a592:	498f      	ldr	r1, [pc, #572]	; (800a7d0 <tcp_write+0x594>)
 800a594:	488f      	ldr	r0, [pc, #572]	; (800a7d4 <tcp_write+0x598>)
 800a596:	f003 fdc7 	bl	800e128 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5a2:	18d0      	adds	r0, r2, r3
 800a5a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	8b3a      	ldrh	r2, [r7, #24]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	f003 fcc4 	bl	800df3c <memcpy>
 800a5b4:	e02e      	b.n	800a614 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a5b6:	8a7b      	ldrh	r3, [r7, #18]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d006      	beq.n	800a5ca <tcp_write+0x38e>
 800a5bc:	4b83      	ldr	r3, [pc, #524]	; (800a7cc <tcp_write+0x590>)
 800a5be:	f240 224b 	movw	r2, #587	; 0x24b
 800a5c2:	4985      	ldr	r1, [pc, #532]	; (800a7d8 <tcp_write+0x59c>)
 800a5c4:	4883      	ldr	r0, [pc, #524]	; (800a7d4 <tcp_write+0x598>)
 800a5c6:	f003 fdaf 	bl	800e128 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a5ca:	8b3b      	ldrh	r3, [r7, #24]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	f7fa ffdb 	bl	800558c <pbuf_alloc>
 800a5d6:	6178      	str	r0, [r7, #20]
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 8151 	beq.w	800a882 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800a5e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	441a      	add	r2, r3
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	f7fa ffc8 	bl	800558c <pbuf_alloc>
 800a5fc:	6338      	str	r0, [r7, #48]	; 0x30
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a600:	2b00      	cmp	r3, #0
 800a602:	d103      	bne.n	800a60c <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a604:	6978      	ldr	r0, [r7, #20]
 800a606:	f7fb fb39 	bl	8005c7c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a60a:	e13d      	b.n	800a888 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a60c:	6979      	ldr	r1, [r7, #20]
 800a60e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a610:	f7fb fc02 	bl	8005e18 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a616:	f7fb fbc5 	bl	8005da4 <pbuf_clen>
 800a61a:	4603      	mov	r3, r0
 800a61c:	461a      	mov	r2, r3
 800a61e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a622:	4413      	add	r3, r2
 800a624:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a628:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a62c:	2b09      	cmp	r3, #9
 800a62e:	d805      	bhi.n	800a63c <tcp_write+0x400>
 800a630:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a634:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a638:	4293      	cmp	r3, r2
 800a63a:	d903      	bls.n	800a644 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a63c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a63e:	f7fb fb1d 	bl	8005c7c <pbuf_free>
      goto memerr;
 800a642:	e121      	b.n	800a888 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a648:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a64c:	441a      	add	r2, r3
 800a64e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	4613      	mov	r3, r2
 800a656:	2200      	movs	r2, #0
 800a658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff fc8e 	bl	8009f7c <tcp_create_segment>
 800a660:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 810e 	beq.w	800a886 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d102      	bne.n	800a676 <tcp_write+0x43a>
      queue = seg;
 800a670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a672:	647b      	str	r3, [r7, #68]	; 0x44
 800a674:	e00c      	b.n	800a690 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d106      	bne.n	800a68a <tcp_write+0x44e>
 800a67c:	4b53      	ldr	r3, [pc, #332]	; (800a7cc <tcp_write+0x590>)
 800a67e:	f240 2285 	movw	r2, #645	; 0x285
 800a682:	4956      	ldr	r1, [pc, #344]	; (800a7dc <tcp_write+0x5a0>)
 800a684:	4853      	ldr	r0, [pc, #332]	; (800a7d4 <tcp_write+0x598>)
 800a686:	f003 fd4f 	bl	800e128 <iprintf>
      prev_seg->next = seg;
 800a68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a68c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a68e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a692:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a694:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a698:	8b3b      	ldrh	r3, [r7, #24]
 800a69a:	4413      	add	r3, r2
 800a69c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800a6a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a6a4:	88fb      	ldrh	r3, [r7, #6]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	f4ff af38 	bcc.w	800a51c <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a6ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d02c      	beq.n	800a70c <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6b8:	e01e      	b.n	800a6f8 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800a6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6bc:	891a      	ldrh	r2, [r3, #8]
 800a6be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a6c0:	4413      	add	r3, r2
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c6:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d110      	bne.n	800a6f2 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6d6:	8952      	ldrh	r2, [r2, #10]
 800a6d8:	4413      	add	r3, r2
 800a6da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a6dc:	68b9      	ldr	r1, [r7, #8]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f003 fc2c 	bl	800df3c <memcpy>
        p->len += oversize_used;
 800a6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e6:	895a      	ldrh	r2, [r3, #10]
 800a6e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a6ea:	4413      	add	r3, r2
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1dd      	bne.n	800a6ba <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800a6fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a700:	891a      	ldrh	r2, [r3, #8]
 800a702:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a704:	4413      	add	r3, r2
 800a706:	b29a      	uxth	r2, r3
 800a708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a70a:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a70c:	8a7a      	ldrh	r2, [r7, #18]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a716:	2b00      	cmp	r3, #0
 800a718:	d018      	beq.n	800a74c <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d106      	bne.n	800a72e <tcp_write+0x4f2>
 800a720:	4b2a      	ldr	r3, [pc, #168]	; (800a7cc <tcp_write+0x590>)
 800a722:	f240 22ba 	movw	r2, #698	; 0x2ba
 800a726:	492e      	ldr	r1, [pc, #184]	; (800a7e0 <tcp_write+0x5a4>)
 800a728:	482a      	ldr	r0, [pc, #168]	; (800a7d4 <tcp_write+0x598>)
 800a72a:	f003 fcfd 	bl	800e128 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a72e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a734:	4618      	mov	r0, r3
 800a736:	f7fb fb6f 	bl	8005e18 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a73a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a73c:	891a      	ldrh	r2, [r3, #8]
 800a73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a740:	891b      	ldrh	r3, [r3, #8]
 800a742:	4413      	add	r3, r2
 800a744:	b29a      	uxth	r2, r3
 800a746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a748:	811a      	strh	r2, [r3, #8]
 800a74a:	e037      	b.n	800a7bc <tcp_write+0x580>
  } else if (extendlen > 0) {
 800a74c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d034      	beq.n	800a7bc <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a754:	2b00      	cmp	r3, #0
 800a756:	d003      	beq.n	800a760 <tcp_write+0x524>
 800a758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d106      	bne.n	800a76e <tcp_write+0x532>
 800a760:	4b1a      	ldr	r3, [pc, #104]	; (800a7cc <tcp_write+0x590>)
 800a762:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800a766:	491f      	ldr	r1, [pc, #124]	; (800a7e4 <tcp_write+0x5a8>)
 800a768:	481a      	ldr	r0, [pc, #104]	; (800a7d4 <tcp_write+0x598>)
 800a76a:	f003 fcdd 	bl	800e128 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a76e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	62bb      	str	r3, [r7, #40]	; 0x28
 800a774:	e009      	b.n	800a78a <tcp_write+0x54e>
      p->tot_len += extendlen;
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	891a      	ldrh	r2, [r3, #8]
 800a77a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a77c:	4413      	add	r3, r2
 800a77e:	b29a      	uxth	r2, r3
 800a780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a782:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	62bb      	str	r3, [r7, #40]	; 0x28
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1f1      	bne.n	800a776 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	891a      	ldrh	r2, [r3, #8]
 800a796:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a798:	4413      	add	r3, r2
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a2:	895a      	ldrh	r2, [r3, #10]
 800a7a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a7a6:	4413      	add	r3, r2
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7b0:	891a      	ldrh	r2, [r3, #8]
 800a7b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a7b4:	4413      	add	r3, r2
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7ba:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d112      	bne.n	800a7e8 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7c6:	669a      	str	r2, [r3, #104]	; 0x68
 800a7c8:	e011      	b.n	800a7ee <tcp_write+0x5b2>
 800a7ca:	bf00      	nop
 800a7cc:	08010530 	.word	0x08010530
 800a7d0:	08010740 	.word	0x08010740
 800a7d4:	08010594 	.word	0x08010594
 800a7d8:	08010780 	.word	0x08010780
 800a7dc:	08010790 	.word	0x08010790
 800a7e0:	080107a4 	.word	0x080107a4
 800a7e4:	080107dc 	.word	0x080107dc
  } else {
    last_unsent->next = queue;
 800a7e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7ec:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7f2:	88fb      	ldrh	r3, [r7, #6]
 800a7f4:	441a      	add	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a800:	88fb      	ldrh	r3, [r7, #6]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	b29a      	uxth	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a812:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00e      	beq.n	800a83e <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10a      	bne.n	800a83e <tcp_write+0x602>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d106      	bne.n	800a83e <tcp_write+0x602>
 800a830:	4b2c      	ldr	r3, [pc, #176]	; (800a8e4 <tcp_write+0x6a8>)
 800a832:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800a836:	492c      	ldr	r1, [pc, #176]	; (800a8e8 <tcp_write+0x6ac>)
 800a838:	482c      	ldr	r0, [pc, #176]	; (800a8ec <tcp_write+0x6b0>)
 800a83a:	f003 fc75 	bl	800e128 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a840:	2b00      	cmp	r3, #0
 800a842:	d016      	beq.n	800a872 <tcp_write+0x636>
 800a844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d012      	beq.n	800a872 <tcp_write+0x636>
 800a84c:	797b      	ldrb	r3, [r7, #5]
 800a84e:	f003 0302 	and.w	r3, r3, #2
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10d      	bne.n	800a872 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	899b      	ldrh	r3, [r3, #12]
 800a85c:	b29c      	uxth	r4, r3
 800a85e:	2008      	movs	r0, #8
 800a860:	f7fa f8e3 	bl	8004a2a <lwip_htons>
 800a864:	4603      	mov	r3, r0
 800a866:	461a      	mov	r2, r3
 800a868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	4322      	orrs	r2, r4
 800a86e:	b292      	uxth	r2, r2
 800a870:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	e031      	b.n	800a8da <tcp_write+0x69e>
          goto memerr;
 800a876:	bf00      	nop
 800a878:	e006      	b.n	800a888 <tcp_write+0x64c>
            goto memerr;
 800a87a:	bf00      	nop
 800a87c:	e004      	b.n	800a888 <tcp_write+0x64c>
        goto memerr;
 800a87e:	bf00      	nop
 800a880:	e002      	b.n	800a888 <tcp_write+0x64c>
        goto memerr;
 800a882:	bf00      	nop
 800a884:	e000      	b.n	800a888 <tcp_write+0x64c>
      goto memerr;
 800a886:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	7e9b      	ldrb	r3, [r3, #26]
 800a88c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a890:	b2da      	uxtb	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <tcp_write+0x666>
    pbuf_free(concat_p);
 800a89c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a89e:	f7fb f9ed 	bl	8005c7c <pbuf_free>
  }
  if (queue != NULL) {
 800a8a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <tcp_write+0x672>
    tcp_segs_free(queue);
 800a8a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a8aa:	f7fc fcc6 	bl	800723a <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00e      	beq.n	800a8d6 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <tcp_write+0x69a>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d106      	bne.n	800a8d6 <tcp_write+0x69a>
 800a8c8:	4b06      	ldr	r3, [pc, #24]	; (800a8e4 <tcp_write+0x6a8>)
 800a8ca:	f240 3201 	movw	r2, #769	; 0x301
 800a8ce:	4906      	ldr	r1, [pc, #24]	; (800a8e8 <tcp_write+0x6ac>)
 800a8d0:	4806      	ldr	r0, [pc, #24]	; (800a8ec <tcp_write+0x6b0>)
 800a8d2:	f003 fc29 	bl	800e128 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a8d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	375c      	adds	r7, #92	; 0x5c
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd90      	pop	{r4, r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	08010530 	.word	0x08010530
 800a8e8:	08010814 	.word	0x08010814
 800a8ec:	08010594 	.word	0x08010594

0800a8f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08a      	sub	sp, #40	; 0x28
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a904:	78fb      	ldrb	r3, [r7, #3]
 800a906:	f003 0303 	and.w	r3, r3, #3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d106      	bne.n	800a91c <tcp_enqueue_flags+0x2c>
 800a90e:	4b6f      	ldr	r3, [pc, #444]	; (800aacc <tcp_enqueue_flags+0x1dc>)
 800a910:	f240 321a 	movw	r2, #794	; 0x31a
 800a914:	496e      	ldr	r1, [pc, #440]	; (800aad0 <tcp_enqueue_flags+0x1e0>)
 800a916:	486f      	ldr	r0, [pc, #444]	; (800aad4 <tcp_enqueue_flags+0x1e4>)
 800a918:	f003 fc06 	bl	800e128 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a922:	2b08      	cmp	r3, #8
 800a924:	d806      	bhi.n	800a934 <tcp_enqueue_flags+0x44>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a92c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a930:	4293      	cmp	r3, r2
 800a932:	d90e      	bls.n	800a952 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800a934:	78fb      	ldrb	r3, [r7, #3]
 800a936:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d109      	bne.n	800a952 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	7e9b      	ldrb	r3, [r3, #26]
 800a942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a946:	b2da      	uxtb	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a94c:	f04f 33ff 	mov.w	r3, #4294967295
 800a950:	e0b7      	b.n	800aac2 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800a952:	78fb      	ldrb	r3, [r7, #3]
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800a95c:	2301      	movs	r3, #1
 800a95e:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a960:	7ffb      	ldrb	r3, [r7, #31]
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	b2db      	uxtb	r3, r3
 800a966:	f003 0304 	and.w	r3, r3, #4
 800a96a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a96c:	7dfb      	ldrb	r3, [r7, #23]
 800a96e:	b29b      	uxth	r3, r3
 800a970:	2200      	movs	r2, #0
 800a972:	4619      	mov	r1, r3
 800a974:	2000      	movs	r0, #0
 800a976:	f7fa fe09 	bl	800558c <pbuf_alloc>
 800a97a:	6138      	str	r0, [r7, #16]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d109      	bne.n	800a996 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	7e9b      	ldrb	r3, [r3, #26]
 800a986:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a990:	f04f 33ff 	mov.w	r3, #4294967295
 800a994:	e095      	b.n	800aac2 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	895a      	ldrh	r2, [r3, #10]
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d206      	bcs.n	800a9b0 <tcp_enqueue_flags+0xc0>
 800a9a2:	4b4a      	ldr	r3, [pc, #296]	; (800aacc <tcp_enqueue_flags+0x1dc>)
 800a9a4:	f44f 7250 	mov.w	r2, #832	; 0x340
 800a9a8:	494b      	ldr	r1, [pc, #300]	; (800aad8 <tcp_enqueue_flags+0x1e8>)
 800a9aa:	484a      	ldr	r0, [pc, #296]	; (800aad4 <tcp_enqueue_flags+0x1e4>)
 800a9ac:	f003 fbbc 	bl	800e128 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800a9b4:	78fa      	ldrb	r2, [r7, #3]
 800a9b6:	7ffb      	ldrb	r3, [r7, #31]
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	6939      	ldr	r1, [r7, #16]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff fadc 	bl	8009f7c <tcp_create_segment>
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d109      	bne.n	800a9e0 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	7e9b      	ldrb	r3, [r3, #26]
 800a9d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9d4:	b2da      	uxtb	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a9da:	f04f 33ff 	mov.w	r3, #4294967295
 800a9de:	e070      	b.n	800aac2 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f003 0303 	and.w	r3, r3, #3
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d006      	beq.n	800a9fa <tcp_enqueue_flags+0x10a>
 800a9ec:	4b37      	ldr	r3, [pc, #220]	; (800aacc <tcp_enqueue_flags+0x1dc>)
 800a9ee:	f240 3249 	movw	r2, #841	; 0x349
 800a9f2:	493a      	ldr	r1, [pc, #232]	; (800aadc <tcp_enqueue_flags+0x1ec>)
 800a9f4:	4837      	ldr	r0, [pc, #220]	; (800aad4 <tcp_enqueue_flags+0x1e4>)
 800a9f6:	f003 fb97 	bl	800e128 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	891b      	ldrh	r3, [r3, #8]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d006      	beq.n	800aa10 <tcp_enqueue_flags+0x120>
 800aa02:	4b32      	ldr	r3, [pc, #200]	; (800aacc <tcp_enqueue_flags+0x1dc>)
 800aa04:	f240 324a 	movw	r2, #842	; 0x34a
 800aa08:	4935      	ldr	r1, [pc, #212]	; (800aae0 <tcp_enqueue_flags+0x1f0>)
 800aa0a:	4832      	ldr	r0, [pc, #200]	; (800aad4 <tcp_enqueue_flags+0x1e4>)
 800aa0c:	f003 fb8c 	bl	800e128 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d103      	bne.n	800aa20 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	669a      	str	r2, [r3, #104]	; 0x68
 800aa1e:	e00d      	b.n	800aa3c <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa24:	61bb      	str	r3, [r7, #24]
 800aa26:	e002      	b.n	800aa2e <tcp_enqueue_flags+0x13e>
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	61bb      	str	r3, [r7, #24]
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1f8      	bne.n	800aa28 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d104      	bne.n	800aa58 <tcp_enqueue_flags+0x168>
 800aa4e:	78fb      	ldrb	r3, [r7, #3]
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d004      	beq.n	800aa62 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800aa62:	78fb      	ldrb	r3, [r7, #3]
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d006      	beq.n	800aa7a <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	7e9b      	ldrb	r3, [r3, #26]
 800aa70:	f043 0320 	orr.w	r3, r3, #32
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fb f990 	bl	8005da4 <pbuf_clen>
 800aa84:	4603      	mov	r3, r0
 800aa86:	461a      	mov	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa8e:	4413      	add	r3, r2
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00e      	beq.n	800aac0 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10a      	bne.n	800aac0 <tcp_enqueue_flags+0x1d0>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <tcp_enqueue_flags+0x1d0>
 800aab2:	4b06      	ldr	r3, [pc, #24]	; (800aacc <tcp_enqueue_flags+0x1dc>)
 800aab4:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800aab8:	490a      	ldr	r1, [pc, #40]	; (800aae4 <tcp_enqueue_flags+0x1f4>)
 800aaba:	4806      	ldr	r0, [pc, #24]	; (800aad4 <tcp_enqueue_flags+0x1e4>)
 800aabc:	f003 fb34 	bl	800e128 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3720      	adds	r7, #32
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	08010530 	.word	0x08010530
 800aad0:	08010834 	.word	0x08010834
 800aad4:	08010594 	.word	0x08010594
 800aad8:	0801088c 	.word	0x0801088c
 800aadc:	080108c8 	.word	0x080108c8
 800aae0:	080108e0 	.word	0x080108e0
 800aae4:	0801090c 	.word	0x0801090c

0800aae8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800aae8:	b590      	push	{r4, r7, lr}
 800aaea:	b08b      	sub	sp, #44	; 0x2c
 800aaec:	af04      	add	r7, sp, #16
 800aaee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800aaf4:	7dbb      	ldrb	r3, [r7, #22]
 800aaf6:	b29c      	uxth	r4, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7f9 ffa2 	bl	8004a46 <lwip_htonl>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2200      	movs	r2, #0
 800ab06:	4621      	mov	r1, r4
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7ff f97d 	bl	8009e08 <tcp_output_alloc_header>
 800ab0e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d109      	bne.n	800ab2a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7e9b      	ldrb	r3, [r3, #26]
 800ab1a:	f043 0303 	orr.w	r3, r3, #3
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ab24:	f06f 0301 	mvn.w	r3, #1
 800ab28:	e036      	b.n	800ab98 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	3304      	adds	r3, #4
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f002 f854 	bl	800cbdc <ip4_route>
 800ab34:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d102      	bne.n	800ab42 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800ab3c:	23fc      	movs	r3, #252	; 0xfc
 800ab3e:	75fb      	strb	r3, [r7, #23]
 800ab40:	e012      	b.n	800ab68 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	1d18      	adds	r0, r3, #4
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	7a9c      	ldrb	r4, [r3, #10]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	7a5b      	ldrb	r3, [r3, #9]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	9202      	str	r2, [sp, #8]
 800ab54:	2206      	movs	r2, #6
 800ab56:	9201      	str	r2, [sp, #4]
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	4623      	mov	r3, r4
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	6938      	ldr	r0, [r7, #16]
 800ab60:	f002 f9e6 	bl	800cf30 <ip4_output_if>
 800ab64:	4603      	mov	r3, r0
 800ab66:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ab68:	6938      	ldr	r0, [r7, #16]
 800ab6a:	f7fb f887 	bl	8005c7c <pbuf_free>

  if (err != ERR_OK) {
 800ab6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d007      	beq.n	800ab86 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	7e9b      	ldrb	r3, [r3, #26]
 800ab7a:	f043 0303 	orr.w	r3, r3, #3
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	769a      	strb	r2, [r3, #26]
 800ab84:	e006      	b.n	800ab94 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	7e9b      	ldrb	r3, [r3, #26]
 800ab8a:	f023 0303 	bic.w	r3, r3, #3
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800ab94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	371c      	adds	r7, #28
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd90      	pop	{r4, r7, pc}

0800aba0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800aba0:	b5b0      	push	{r4, r5, r7, lr}
 800aba2:	b08a      	sub	sp, #40	; 0x28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	7d1b      	ldrb	r3, [r3, #20]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d106      	bne.n	800abbe <tcp_output+0x1e>
 800abb0:	4b99      	ldr	r3, [pc, #612]	; (800ae18 <tcp_output+0x278>)
 800abb2:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800abb6:	4999      	ldr	r1, [pc, #612]	; (800ae1c <tcp_output+0x27c>)
 800abb8:	4899      	ldr	r0, [pc, #612]	; (800ae20 <tcp_output+0x280>)
 800abba:	f003 fab5 	bl	800e128 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800abbe:	4b99      	ldr	r3, [pc, #612]	; (800ae24 <tcp_output+0x284>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d101      	bne.n	800abcc <tcp_output+0x2c>
    return ERR_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	e1cb      	b.n	800af64 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800abd8:	4293      	cmp	r3, r2
 800abda:	bf28      	it	cs
 800abdc:	4613      	movcs	r3, r2
 800abde:	b29b      	uxth	r3, r3
 800abe0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	7e9b      	ldrb	r3, [r3, #26]
 800abec:	f003 0302 	and.w	r3, r3, #2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d017      	beq.n	800ac24 <tcp_output+0x84>
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00f      	beq.n	800ac1a <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f9 ff20 	bl	8004a46 <lwip_htonl>
 800ac06:	4602      	mov	r2, r0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac10:	8912      	ldrh	r2, [r2, #8]
 800ac12:	4413      	add	r3, r2
     (seg == NULL ||
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d204      	bcs.n	800ac24 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff ff64 	bl	800aae8 <tcp_send_empty_ack>
 800ac20:	4603      	mov	r3, r0
 800ac22:	e19f      	b.n	800af64 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac28:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d007      	beq.n	800ac40 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800ac30:	e002      	b.n	800ac38 <tcp_output+0x98>
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	623b      	str	r3, [r7, #32]
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1f8      	bne.n	800ac32 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	3304      	adds	r3, #4
 800ac44:	4618      	mov	r0, r3
 800ac46:	f001 ffc9 	bl	800cbdc <ip4_route>
 800ac4a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d102      	bne.n	800ac58 <tcp_output+0xb8>
    return ERR_RTE;
 800ac52:	f06f 0303 	mvn.w	r3, #3
 800ac56:	e185      	b.n	800af64 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <tcp_output+0xc6>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d111      	bne.n	800ac8a <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <tcp_output+0xd2>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	3304      	adds	r3, #4
 800ac70:	e000      	b.n	800ac74 <tcp_output+0xd4>
 800ac72:	2300      	movs	r3, #0
 800ac74:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d102      	bne.n	800ac82 <tcp_output+0xe2>
      return ERR_RTE;
 800ac7c:	f06f 0303 	mvn.w	r3, #3
 800ac80:	e170      	b.n	800af64 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 813f 	beq.w	800af10 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7f9 fed4 	bl	8004a46 <lwip_htonl>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca8:	8912      	ldrh	r2, [r2, #8]
 800acaa:	4413      	add	r3, r2
  if (seg != NULL &&
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	429a      	cmp	r2, r3
 800acb0:	f080 812e 	bcs.w	800af10 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 812a 	beq.w	800af10 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acc2:	461a      	mov	r2, r3
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	4293      	cmp	r3, r2
 800acc8:	f040 8122 	bne.w	800af10 <tcp_output+0x370>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f040 811d 	bne.w	800af10 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f040 812c 	bne.w	800af3a <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800acf2:	e122      	b.n	800af3a <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	899b      	ldrh	r3, [r3, #12]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7f9 fe94 	bl	8004a2a <lwip_htons>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d006      	beq.n	800ad1a <tcp_output+0x17a>
 800ad0c:	4b42      	ldr	r3, [pc, #264]	; (800ae18 <tcp_output+0x278>)
 800ad0e:	f240 4245 	movw	r2, #1093	; 0x445
 800ad12:	4945      	ldr	r1, [pc, #276]	; (800ae28 <tcp_output+0x288>)
 800ad14:	4842      	ldr	r0, [pc, #264]	; (800ae20 <tcp_output+0x280>)
 800ad16:	f003 fa07 	bl	800e128 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d01f      	beq.n	800ad62 <tcp_output+0x1c2>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	7e9b      	ldrb	r3, [r3, #26]
 800ad26:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d119      	bne.n	800ad62 <tcp_output+0x1c2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00b      	beq.n	800ad4e <tcp_output+0x1ae>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d110      	bne.n	800ad62 <tcp_output+0x1c2>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad44:	891a      	ldrh	r2, [r3, #8]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d209      	bcs.n	800ad62 <tcp_output+0x1c2>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d004      	beq.n	800ad62 <tcp_output+0x1c2>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad5e:	2b08      	cmp	r3, #8
 800ad60:	d901      	bls.n	800ad66 <tcp_output+0x1c6>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <tcp_output+0x1c8>
 800ad66:	2300      	movs	r3, #0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d106      	bne.n	800ad7a <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	7e9b      	ldrb	r3, [r3, #26]
 800ad70:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 80e2 	beq.w	800af3e <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	7d1b      	ldrb	r3, [r3, #20]
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d00d      	beq.n	800ad9e <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	899b      	ldrh	r3, [r3, #12]
 800ad88:	b29c      	uxth	r4, r3
 800ad8a:	2010      	movs	r0, #16
 800ad8c:	f7f9 fe4d 	bl	8004a2a <lwip_htons>
 800ad90:	4603      	mov	r3, r0
 800ad92:	461a      	mov	r2, r3
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	4322      	orrs	r2, r4
 800ad9a:	b292      	uxth	r2, r2
 800ad9c:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ada4:	f000 f8e2 	bl	800af6c <tcp_output_segment>
 800ada8:	4603      	mov	r3, r0
 800adaa:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800adac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d009      	beq.n	800adc8 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	7e9b      	ldrb	r3, [r3, #26]
 800adb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	769a      	strb	r2, [r3, #26]
      return err;
 800adc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adc6:	e0cd      	b.n	800af64 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	7d1b      	ldrb	r3, [r3, #20]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d006      	beq.n	800ade6 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7e9b      	ldrb	r3, [r3, #26]
 800addc:	f023 0303 	bic.w	r3, r3, #3
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	4618      	mov	r0, r3
 800adee:	f7f9 fe2a 	bl	8004a46 <lwip_htonl>
 800adf2:	4604      	mov	r4, r0
 800adf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf6:	891b      	ldrh	r3, [r3, #8]
 800adf8:	461d      	mov	r5, r3
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	899b      	ldrh	r3, [r3, #12]
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7f9 fe11 	bl	8004a2a <lwip_htons>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	f003 0303 	and.w	r3, r3, #3
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00c      	beq.n	800ae2c <tcp_output+0x28c>
 800ae12:	2301      	movs	r3, #1
 800ae14:	e00b      	b.n	800ae2e <tcp_output+0x28e>
 800ae16:	bf00      	nop
 800ae18:	08010530 	.word	0x08010530
 800ae1c:	08010934 	.word	0x08010934
 800ae20:	08010594 	.word	0x08010594
 800ae24:	20006d5c 	.word	0x20006d5c
 800ae28:	0801095c 	.word	0x0801095c
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	442b      	add	r3, r5
 800ae30:	4423      	add	r3, r4
 800ae32:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	da02      	bge.n	800ae46 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	891b      	ldrh	r3, [r3, #8]
 800ae4a:	461c      	mov	r4, r3
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	899b      	ldrh	r3, [r3, #12]
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7f9 fde8 	bl	8004a2a <lwip_htons>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	f003 0303 	and.w	r3, r3, #3
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <tcp_output+0x2c8>
 800ae64:	2301      	movs	r3, #1
 800ae66:	e000      	b.n	800ae6a <tcp_output+0x2ca>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	4423      	add	r3, r4
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d049      	beq.n	800af04 <tcp_output+0x364>
      seg->next = NULL;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d105      	bne.n	800ae8a <tcp_output+0x2ea>
        pcb->unacked = seg;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae82:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	623b      	str	r3, [r7, #32]
 800ae88:	e03f      	b.n	800af0a <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f9 fdd8 	bl	8004a46 <lwip_htonl>
 800ae96:	4604      	mov	r4, r0
 800ae98:	6a3b      	ldr	r3, [r7, #32]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f9 fdd1 	bl	8004a46 <lwip_htonl>
 800aea4:	4603      	mov	r3, r0
 800aea6:	1ae3      	subs	r3, r4, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	da24      	bge.n	800aef6 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	336c      	adds	r3, #108	; 0x6c
 800aeb0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aeb2:	e002      	b.n	800aeba <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d011      	beq.n	800aee6 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7f9 fdbb 	bl	8004a46 <lwip_htonl>
 800aed0:	4604      	mov	r4, r0
 800aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7f9 fdb4 	bl	8004a46 <lwip_htonl>
 800aede:	4603      	mov	r3, r0
 800aee0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dbe6      	blt.n	800aeb4 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeec:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	e009      	b.n	800af0a <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aefa:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	623b      	str	r3, [r7, #32]
 800af02:	e002      	b.n	800af0a <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800af04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af06:	f7fc f9ad 	bl	8007264 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	2b00      	cmp	r3, #0
 800af14:	d015      	beq.n	800af42 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7f9 fd92 	bl	8004a46 <lwip_htonl>
 800af22:	4602      	mov	r2, r0
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af2c:	8912      	ldrh	r2, [r2, #8]
 800af2e:	4413      	add	r3, r2
  while (seg != NULL &&
 800af30:	69ba      	ldr	r2, [r7, #24]
 800af32:	429a      	cmp	r2, r3
 800af34:	f4bf aede 	bcs.w	800acf4 <tcp_output+0x154>
  }
output_done:
 800af38:	e003      	b.n	800af42 <tcp_output+0x3a2>
    goto output_done;
 800af3a:	bf00      	nop
 800af3c:	e002      	b.n	800af44 <tcp_output+0x3a4>
      break;
 800af3e:	bf00      	nop
 800af40:	e000      	b.n	800af44 <tcp_output+0x3a4>
output_done:
 800af42:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d103      	bne.n	800af54 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	7e9b      	ldrb	r3, [r3, #26]
 800af58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3728      	adds	r7, #40	; 0x28
 800af68:	46bd      	mov	sp, r7
 800af6a:	bdb0      	pop	{r4, r5, r7, pc}

0800af6c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800af6c:	b5b0      	push	{r4, r5, r7, lr}
 800af6e:	b08c      	sub	sp, #48	; 0x30
 800af70:	af04      	add	r7, sp, #16
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	89db      	ldrh	r3, [r3, #14]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d001      	beq.n	800af86 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	e08a      	b.n	800b09c <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	68dc      	ldr	r4, [r3, #12]
 800af8e:	4610      	mov	r0, r2
 800af90:	f7f9 fd59 	bl	8004a46 <lwip_htonl>
 800af94:	4603      	mov	r3, r0
 800af96:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	68dc      	ldr	r4, [r3, #12]
 800afa0:	4610      	mov	r0, r2
 800afa2:	f7f9 fd42 	bl	8004a2a <lwip_htons>
 800afa6:	4603      	mov	r3, r0
 800afa8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800afb2:	441a      	add	r2, r3
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	3314      	adds	r3, #20
 800afbe:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	7a9b      	ldrb	r3, [r3, #10]
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d014      	beq.n	800aff6 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	3304      	adds	r3, #4
 800afd0:	4619      	mov	r1, r3
 800afd2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800afd6:	f7fc fc79 	bl	80078cc <tcp_eff_send_mss_impl>
 800afda:	4603      	mov	r3, r0
 800afdc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800afde:	8b7b      	ldrh	r3, [r7, #26]
 800afe0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7f9 fd2e 	bl	8004a46 <lwip_htonl>
 800afea:	4602      	mov	r2, r0
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	601a      	str	r2, [r3, #0]
    opts += 1;
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	3304      	adds	r3, #4
 800aff4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800affc:	2b00      	cmp	r3, #0
 800affe:	da02      	bge.n	800b006 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2200      	movs	r2, #0
 800b004:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10c      	bne.n	800b028 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800b00e:	4b25      	ldr	r3, [pc, #148]	; (800b0a4 <tcp_output_segment+0x138>)
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7f9 fd12 	bl	8004a46 <lwip_htonl>
 800b022:	4602      	mov	r2, r0
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	68da      	ldr	r2, [r3, #12]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	8959      	ldrh	r1, [r3, #10]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	8b3a      	ldrh	r2, [r7, #24]
 800b042:	1a8a      	subs	r2, r1, r2
 800b044:	b292      	uxth	r2, r2
 800b046:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	8919      	ldrh	r1, [r3, #8]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	8b3a      	ldrh	r2, [r7, #24]
 800b054:	1a8a      	subs	r2, r1, r2
 800b056:	b292      	uxth	r2, r2
 800b058:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	68d2      	ldr	r2, [r2, #12]
 800b062:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	741a      	strb	r2, [r3, #16]
 800b06c:	2200      	movs	r2, #0
 800b06e:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6858      	ldr	r0, [r3, #4]
 800b074:	68b9      	ldr	r1, [r7, #8]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	1d1c      	adds	r4, r3, #4
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	7a9d      	ldrb	r5, [r3, #10]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	7a5b      	ldrb	r3, [r3, #9]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	9202      	str	r2, [sp, #8]
 800b086:	2206      	movs	r2, #6
 800b088:	9201      	str	r2, [sp, #4]
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	462b      	mov	r3, r5
 800b08e:	4622      	mov	r2, r4
 800b090:	f001 ff4e 	bl	800cf30 <ip4_output_if>
 800b094:	4603      	mov	r3, r0
 800b096:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800b098:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3720      	adds	r7, #32
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bdb0      	pop	{r4, r5, r7, pc}
 800b0a4:	20006d10 	.word	0x20006d10

0800b0a8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08c      	sub	sp, #48	; 0x30
 800b0ac:	af04      	add	r7, sp, #16
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
 800b0b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	2114      	movs	r1, #20
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	f7fa fa66 	bl	800558c <pbuf_alloc>
 800b0c0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d05b      	beq.n	800b180 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	895b      	ldrh	r3, [r3, #10]
 800b0cc:	2b13      	cmp	r3, #19
 800b0ce:	d806      	bhi.n	800b0de <tcp_rst+0x36>
 800b0d0:	4b2d      	ldr	r3, [pc, #180]	; (800b188 <tcp_rst+0xe0>)
 800b0d2:	f240 524c 	movw	r2, #1356	; 0x54c
 800b0d6:	492d      	ldr	r1, [pc, #180]	; (800b18c <tcp_rst+0xe4>)
 800b0d8:	482d      	ldr	r0, [pc, #180]	; (800b190 <tcp_rst+0xe8>)
 800b0da:	f003 f825 	bl	800e128 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800b0e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7f9 fc9f 	bl	8004a2a <lwip_htons>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800b0f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7f9 fc97 	bl	8004a2a <lwip_htons>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	461a      	mov	r2, r3
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7f9 fc9e 	bl	8004a46 <lwip_htonl>
 800b10a:	4602      	mov	r2, r0
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800b110:	68b8      	ldr	r0, [r7, #8]
 800b112:	f7f9 fc98 	bl	8004a46 <lwip_htonl>
 800b116:	4602      	mov	r2, r0
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800b11c:	f245 0014 	movw	r0, #20500	; 0x5014
 800b120:	f7f9 fc83 	bl	8004a2a <lwip_htons>
 800b124:	4603      	mov	r3, r0
 800b126:	461a      	mov	r2, r3
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	2200      	movs	r2, #0
 800b130:	f042 0208 	orr.w	r2, r2, #8
 800b134:	739a      	strb	r2, [r3, #14]
 800b136:	2200      	movs	r2, #0
 800b138:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b13c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	2200      	movs	r2, #0
 800b142:	741a      	strb	r2, [r3, #16]
 800b144:	2200      	movs	r2, #0
 800b146:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	2200      	movs	r2, #0
 800b14c:	749a      	strb	r2, [r3, #18]
 800b14e:	2200      	movs	r2, #0
 800b150:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800b152:	6838      	ldr	r0, [r7, #0]
 800b154:	f001 fd42 	bl	800cbdc <ip4_route>
 800b158:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	9302      	str	r3, [sp, #8]
 800b164:	2306      	movs	r3, #6
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	2300      	movs	r3, #0
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	23ff      	movs	r3, #255	; 0xff
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	6879      	ldr	r1, [r7, #4]
 800b172:	69f8      	ldr	r0, [r7, #28]
 800b174:	f001 fedc 	bl	800cf30 <ip4_output_if>
  }
  pbuf_free(p);
 800b178:	69f8      	ldr	r0, [r7, #28]
 800b17a:	f7fa fd7f 	bl	8005c7c <pbuf_free>
 800b17e:	e000      	b.n	800b182 <tcp_rst+0xda>
    return;
 800b180:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b182:	3720      	adds	r7, #32
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	08010530 	.word	0x08010530
 800b18c:	08010564 	.word	0x08010564
 800b190:	08010594 	.word	0x08010594

0800b194 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d029      	beq.n	800b1f8 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	e002      	b.n	800b1b2 <tcp_rexmit_rto+0x1e>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1f8      	bne.n	800b1ac <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1d6:	2bff      	cmp	r3, #255	; 0xff
 800b1d8:	d007      	beq.n	800b1ea <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7ff fcd5 	bl	800aba0 <tcp_output>
 800b1f6:	e000      	b.n	800b1fa <tcp_rexmit_rto+0x66>
    return;
 800b1f8:	bf00      	nop
}
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b200:	b590      	push	{r4, r7, lr}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d043      	beq.n	800b298 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b214:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3368      	adds	r3, #104	; 0x68
 800b222:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b224:	e002      	b.n	800b22c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d011      	beq.n	800b258 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7f9 fc02 	bl	8004a46 <lwip_htonl>
 800b242:	4604      	mov	r4, r0
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7f9 fbfb 	bl	8004a46 <lwip_htonl>
 800b250:	4603      	mov	r3, r0
 800b252:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b254:	2b00      	cmp	r3, #0
 800b256:	dbe6      	blt.n	800b226 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d103      	bne.n	800b276 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b27c:	2bff      	cmp	r3, #255	; 0xff
 800b27e:	d007      	beq.n	800b290 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b286:	3301      	adds	r3, #1
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	635a      	str	r2, [r3, #52]	; 0x34
 800b296:	e000      	b.n	800b29a <tcp_rexmit+0x9a>
    return;
 800b298:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd90      	pop	{r4, r7, pc}

0800b2a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d041      	beq.n	800b334 <tcp_rexmit_fast+0x94>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	7e9b      	ldrb	r3, [r3, #26]
 800b2b4:	f003 0304 	and.w	r3, r3, #4
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d13b      	bne.n	800b334 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff ff9f 	bl	800b200 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	bf28      	it	cs
 800b2d2:	4613      	movcs	r3, r2
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	0fda      	lsrs	r2, r3, #31
 800b2d8:	4413      	add	r3, r2
 800b2da:	105b      	asrs	r3, r3, #1
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2f0:	005b      	lsls	r3, r3, #1
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d206      	bcs.n	800b304 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b30e:	4619      	mov	r1, r3
 800b310:	0049      	lsls	r1, r1, #1
 800b312:	440b      	add	r3, r1
 800b314:	b29b      	uxth	r3, r3
 800b316:	4413      	add	r3, r2
 800b318:	b29a      	uxth	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	7e9b      	ldrb	r3, [r3, #26]
 800b324:	f043 0304 	orr.w	r3, r3, #4
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800b334:	bf00      	nop
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08a      	sub	sp, #40	; 0x28
 800b340:	af04      	add	r7, sp, #16
 800b342:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b348:	3b01      	subs	r3, #1
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7f9 fb7b 	bl	8004a46 <lwip_htonl>
 800b350:	4603      	mov	r3, r0
 800b352:	2200      	movs	r2, #0
 800b354:	2100      	movs	r1, #0
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7fe fd56 	bl	8009e08 <tcp_output_alloc_header>
 800b35c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d102      	bne.n	800b36a <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b364:	f04f 33ff 	mov.w	r3, #4294967295
 800b368:	e021      	b.n	800b3ae <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3304      	adds	r3, #4
 800b36e:	4618      	mov	r0, r3
 800b370:	f001 fc34 	bl	800cbdc <ip4_route>
 800b374:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d102      	bne.n	800b382 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800b37c:	23fc      	movs	r3, #252	; 0xfc
 800b37e:	75fb      	strb	r3, [r7, #23]
 800b380:	e010      	b.n	800b3a4 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800b382:	6879      	ldr	r1, [r7, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	7a98      	ldrb	r0, [r3, #10]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	9302      	str	r3, [sp, #8]
 800b390:	2306      	movs	r3, #6
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	2300      	movs	r3, #0
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	4603      	mov	r3, r0
 800b39a:	6938      	ldr	r0, [r7, #16]
 800b39c:	f001 fdc8 	bl	800cf30 <ip4_output_if>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800b3a4:	6938      	ldr	r0, [r7, #16]
 800b3a6:	f7fa fc69 	bl	8005c7c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b3aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b3b6:	b590      	push	{r4, r7, lr}
 800b3b8:	b08f      	sub	sp, #60	; 0x3c
 800b3ba:	af04      	add	r7, sp, #16
 800b3bc:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3c2:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800b3c4:	6a3b      	ldr	r3, [r7, #32]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d102      	bne.n	800b3d0 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3ce:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e085      	b.n	800b4e6 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	899b      	ldrh	r3, [r3, #12]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7f9 fb21 	bl	8004a2a <lwip_htons>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d005      	beq.n	800b3fe <tcp_zero_window_probe+0x48>
 800b3f2:	6a3b      	ldr	r3, [r7, #32]
 800b3f4:	891b      	ldrh	r3, [r3, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <tcp_zero_window_probe+0x48>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e000      	b.n	800b400 <tcp_zero_window_probe+0x4a>
 800b3fe:	2300      	movs	r3, #0
 800b400:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b402:	7ffb      	ldrb	r3, [r7, #31]
 800b404:	2b00      	cmp	r3, #0
 800b406:	bf0c      	ite	eq
 800b408:	2301      	moveq	r3, #1
 800b40a:	2300      	movne	r3, #0
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800b410:	6a3b      	ldr	r3, [r7, #32]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	8bba      	ldrh	r2, [r7, #28]
 800b418:	2100      	movs	r1, #0
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7fe fcf4 	bl	8009e08 <tcp_output_alloc_header>
 800b420:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d102      	bne.n	800b42e <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b428:	f04f 33ff 	mov.w	r3, #4294967295
 800b42c:	e05b      	b.n	800b4e6 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b434:	7ffb      	ldrb	r3, [r7, #31]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00e      	beq.n	800b458 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	899b      	ldrh	r3, [r3, #12]
 800b43e:	b29b      	uxth	r3, r3
 800b440:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b444:	b29c      	uxth	r4, r3
 800b446:	2011      	movs	r0, #17
 800b448:	f7f9 faef 	bl	8004a2a <lwip_htons>
 800b44c:	4603      	mov	r3, r0
 800b44e:	4323      	orrs	r3, r4
 800b450:	b29a      	uxth	r2, r3
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	819a      	strh	r2, [r3, #12]
 800b456:	e010      	b.n	800b47a <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	3314      	adds	r3, #20
 800b45e:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	6858      	ldr	r0, [r3, #4]
 800b464:	6a3b      	ldr	r3, [r7, #32]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	891a      	ldrh	r2, [r3, #8]
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	891b      	ldrh	r3, [r3, #8]
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	b29b      	uxth	r3, r3
 800b472:	2201      	movs	r2, #1
 800b474:	6939      	ldr	r1, [r7, #16]
 800b476:	f7fa fe01 	bl	800607c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	4618      	mov	r0, r3
 800b482:	f7f9 fae0 	bl	8004a46 <lwip_htonl>
 800b486:	4603      	mov	r3, r0
 800b488:	3301      	adds	r3, #1
 800b48a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	da02      	bge.n	800b49e <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f001 fb9a 	bl	800cbdc <ip4_route>
 800b4a8:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d103      	bne.n	800b4b8 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800b4b0:	23fc      	movs	r3, #252	; 0xfc
 800b4b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4b6:	e011      	b.n	800b4dc <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b4b8:	6879      	ldr	r1, [r7, #4]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	1d1a      	adds	r2, r3, #4
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	7a98      	ldrb	r0, [r3, #10]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	9302      	str	r3, [sp, #8]
 800b4c6:	2306      	movs	r3, #6
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	69b8      	ldr	r0, [r7, #24]
 800b4d2:	f001 fd2d 	bl	800cf30 <ip4_output_if>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800b4dc:	69b8      	ldr	r0, [r7, #24]
 800b4de:	f7fa fbcd 	bl	8005c7c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b4e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	372c      	adds	r7, #44	; 0x2c
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd90      	pop	{r4, r7, pc}
	...

0800b4f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b4f8:	f7fa fe42 	bl	8006180 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b4fc:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <tcpip_tcp_timer+0x38>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d103      	bne.n	800b50c <tcpip_tcp_timer+0x1c>
 800b504:	4b09      	ldr	r3, [pc, #36]	; (800b52c <tcpip_tcp_timer+0x3c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d005      	beq.n	800b518 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b50c:	2200      	movs	r2, #0
 800b50e:	4908      	ldr	r1, [pc, #32]	; (800b530 <tcpip_tcp_timer+0x40>)
 800b510:	20fa      	movs	r0, #250	; 0xfa
 800b512:	f000 f86f 	bl	800b5f4 <sys_timeout>
 800b516:	e003      	b.n	800b520 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b518:	4b06      	ldr	r3, [pc, #24]	; (800b534 <tcpip_tcp_timer+0x44>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	601a      	str	r2, [r3, #0]
  }
}
 800b51e:	bf00      	nop
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	20006d1c 	.word	0x20006d1c
 800b52c:	20006d20 	.word	0x20006d20
 800b530:	0800b4f1 	.word	0x0800b4f1
 800b534:	20006d68 	.word	0x20006d68

0800b538 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b53c:	4b0a      	ldr	r3, [pc, #40]	; (800b568 <tcp_timer_needed+0x30>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10f      	bne.n	800b564 <tcp_timer_needed+0x2c>
 800b544:	4b09      	ldr	r3, [pc, #36]	; (800b56c <tcp_timer_needed+0x34>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d103      	bne.n	800b554 <tcp_timer_needed+0x1c>
 800b54c:	4b08      	ldr	r3, [pc, #32]	; (800b570 <tcp_timer_needed+0x38>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d007      	beq.n	800b564 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b554:	4b04      	ldr	r3, [pc, #16]	; (800b568 <tcp_timer_needed+0x30>)
 800b556:	2201      	movs	r2, #1
 800b558:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b55a:	2200      	movs	r2, #0
 800b55c:	4905      	ldr	r1, [pc, #20]	; (800b574 <tcp_timer_needed+0x3c>)
 800b55e:	20fa      	movs	r0, #250	; 0xfa
 800b560:	f000 f848 	bl	800b5f4 <sys_timeout>
  }
}
 800b564:	bf00      	nop
 800b566:	bd80      	pop	{r7, pc}
 800b568:	20006d68 	.word	0x20006d68
 800b56c:	20006d1c 	.word	0x20006d1c
 800b570:	20006d20 	.word	0x20006d20
 800b574:	0800b4f1 	.word	0x0800b4f1

0800b578 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	4903      	ldr	r1, [pc, #12]	; (800b5a0 <cyclic_timer+0x28>)
 800b592:	4618      	mov	r0, r3
 800b594:	f000 f82e 	bl	800b5f4 <sys_timeout>
}
 800b598:	bf00      	nop
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	0800b579 	.word	0x0800b579

0800b5a4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	607b      	str	r3, [r7, #4]
 800b5ae:	e00e      	b.n	800b5ce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800b5b0:	4a0d      	ldr	r2, [pc, #52]	; (800b5e8 <sys_timeouts_init+0x44>)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	4a0a      	ldr	r2, [pc, #40]	; (800b5e8 <sys_timeouts_init+0x44>)
 800b5be:	4413      	add	r3, r2
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	490a      	ldr	r1, [pc, #40]	; (800b5ec <sys_timeouts_init+0x48>)
 800b5c4:	f000 f816 	bl	800b5f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	607b      	str	r3, [r7, #4]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d9ed      	bls.n	800b5b0 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800b5d4:	f7f9 fa22 	bl	8004a1c <sys_now>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	4a05      	ldr	r2, [pc, #20]	; (800b5f0 <sys_timeouts_init+0x4c>)
 800b5dc:	6013      	str	r3, [r2, #0]
}
 800b5de:	bf00      	nop
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	080111f0 	.word	0x080111f0
 800b5ec:	0800b579 	.word	0x0800b579
 800b5f0:	20006d64 	.word	0x20006d64

0800b5f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b600:	2006      	movs	r0, #6
 800b602:	f7f9 fdbf 	bl	8005184 <memp_malloc>
 800b606:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10a      	bne.n	800b624 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	f040 8084 	bne.w	800b71e <sys_timeout+0x12a>
 800b616:	4b44      	ldr	r3, [pc, #272]	; (800b728 <sys_timeout+0x134>)
 800b618:	22d4      	movs	r2, #212	; 0xd4
 800b61a:	4944      	ldr	r1, [pc, #272]	; (800b72c <sys_timeout+0x138>)
 800b61c:	4844      	ldr	r0, [pc, #272]	; (800b730 <sys_timeout+0x13c>)
 800b61e:	f002 fd83 	bl	800e128 <iprintf>
    return;
 800b622:	e07c      	b.n	800b71e <sys_timeout+0x12a>
  }

  now = sys_now();
 800b624:	f7f9 f9fa 	bl	8004a1c <sys_now>
 800b628:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800b62a:	4b42      	ldr	r3, [pc, #264]	; (800b734 <sys_timeout+0x140>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d105      	bne.n	800b63e <sys_timeout+0x4a>
    diff = 0;
 800b632:	2300      	movs	r3, #0
 800b634:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800b636:	4a40      	ldr	r2, [pc, #256]	; (800b738 <sys_timeout+0x144>)
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	e004      	b.n	800b648 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800b63e:	4b3e      	ldr	r3, [pc, #248]	; (800b738 <sys_timeout+0x144>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	693a      	ldr	r2, [r7, #16]
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	2200      	movs	r2, #0
 800b64c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	441a      	add	r2, r3
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b664:	4b33      	ldr	r3, [pc, #204]	; (800b734 <sys_timeout+0x140>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d103      	bne.n	800b674 <sys_timeout+0x80>
    next_timeout = timeout;
 800b66c:	4a31      	ldr	r2, [pc, #196]	; (800b734 <sys_timeout+0x140>)
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	6013      	str	r3, [r2, #0]
    return;
 800b672:	e055      	b.n	800b720 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800b674:	4b2f      	ldr	r3, [pc, #188]	; (800b734 <sys_timeout+0x140>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d20f      	bcs.n	800b6a0 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800b680:	4b2c      	ldr	r3, [pc, #176]	; (800b734 <sys_timeout+0x140>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6859      	ldr	r1, [r3, #4]
 800b686:	4b2b      	ldr	r3, [pc, #172]	; (800b734 <sys_timeout+0x140>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	1a8a      	subs	r2, r1, r2
 800b68e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800b690:	4b28      	ldr	r3, [pc, #160]	; (800b734 <sys_timeout+0x140>)
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b698:	4a26      	ldr	r2, [pc, #152]	; (800b734 <sys_timeout+0x140>)
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	e03f      	b.n	800b720 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b6a0:	4b24      	ldr	r3, [pc, #144]	; (800b734 <sys_timeout+0x140>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	61fb      	str	r3, [r7, #28]
 800b6a6:	e036      	b.n	800b716 <sys_timeout+0x122>
      timeout->time -= t->time;
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	685a      	ldr	r2, [r3, #4]
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	1ad2      	subs	r2, r2, r3
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d006      	beq.n	800b6cc <sys_timeout+0xd8>
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d921      	bls.n	800b710 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d009      	beq.n	800b6e8 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6859      	ldr	r1, [r3, #4]
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	1a8a      	subs	r2, r1, r2
 800b6e4:	605a      	str	r2, [r3, #4]
 800b6e6:	e00b      	b.n	800b700 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d206      	bcs.n	800b700 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800b6f2:	4b10      	ldr	r3, [pc, #64]	; (800b734 <sys_timeout+0x140>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	441a      	add	r2, r3
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	601a      	str	r2, [r3, #0]
        break;
 800b70e:	e007      	b.n	800b720 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	61fb      	str	r3, [r7, #28]
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1c5      	bne.n	800b6a8 <sys_timeout+0xb4>
 800b71c:	e000      	b.n	800b720 <sys_timeout+0x12c>
    return;
 800b71e:	bf00      	nop
      }
    }
  }
}
 800b720:	3720      	adds	r7, #32
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	08010974 	.word	0x08010974
 800b72c:	080109a8 	.word	0x080109a8
 800b730:	080109e8 	.word	0x080109e8
 800b734:	20006d60 	.word	0x20006d60
 800b738:	20006d64 	.word	0x20006d64

0800b73c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800b742:	4b24      	ldr	r3, [pc, #144]	; (800b7d4 <sys_check_timeouts+0x98>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d040      	beq.n	800b7cc <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800b74a:	f7f9 f967 	bl	8004a1c <sys_now>
 800b74e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800b750:	4b21      	ldr	r3, [pc, #132]	; (800b7d8 <sys_check_timeouts+0x9c>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800b75a:	4b20      	ldr	r3, [pc, #128]	; (800b7dc <sys_check_timeouts+0xa0>)
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b00      	cmp	r3, #0
 800b762:	d001      	beq.n	800b768 <sys_check_timeouts+0x2c>
 800b764:	f7f9 fee2 	bl	800552c <pbuf_free_ooseq>
      had_one = 0;
 800b768:	2300      	movs	r3, #0
 800b76a:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800b76c:	4b19      	ldr	r3, [pc, #100]	; (800b7d4 <sys_check_timeouts+0x98>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d026      	beq.n	800b7c6 <sys_check_timeouts+0x8a>
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	697a      	ldr	r2, [r7, #20]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d321      	bcc.n	800b7c6 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800b782:	2301      	movs	r3, #1
 800b784:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	685a      	ldr	r2, [r3, #4]
 800b78a:	4b13      	ldr	r3, [pc, #76]	; (800b7d8 <sys_check_timeouts+0x9c>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4413      	add	r3, r2
 800b790:	4a11      	ldr	r2, [pc, #68]	; (800b7d8 <sys_check_timeouts+0x9c>)
 800b792:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	697a      	ldr	r2, [r7, #20]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a0c      	ldr	r2, [pc, #48]	; (800b7d4 <sys_check_timeouts+0x98>)
 800b7a4:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b7b2:	68b9      	ldr	r1, [r7, #8]
 800b7b4:	2006      	movs	r0, #6
 800b7b6:	f7f9 fd31 	bl	800521c <memp_free>
        if (handler != NULL) {
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6838      	ldr	r0, [r7, #0]
 800b7c4:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800b7c6:	7cfb      	ldrb	r3, [r7, #19]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1c6      	bne.n	800b75a <sys_check_timeouts+0x1e>
  }
}
 800b7cc:	bf00      	nop
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	20006d60 	.word	0x20006d60
 800b7d8:	20006d64 	.word	0x20006d64
 800b7dc:	20006d0d 	.word	0x20006d0d

0800b7e0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800b7e4:	bf00      	nop
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
	...

0800b7f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b7fe:	79fb      	ldrb	r3, [r7, #7]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d018      	beq.n	800b836 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d013      	beq.n	800b832 <udp_input_local_match+0x42>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00f      	beq.n	800b832 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b812:	4b14      	ldr	r3, [pc, #80]	; (800b864 <udp_input_local_match+0x74>)
 800b814:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81a:	d00a      	beq.n	800b832 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	4b10      	ldr	r3, [pc, #64]	; (800b864 <udp_input_local_match+0x74>)
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	405a      	eors	r2, r3
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	3308      	adds	r3, #8
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d110      	bne.n	800b854 <udp_input_local_match+0x64>
          return 1;
 800b832:	2301      	movs	r3, #1
 800b834:	e00f      	b.n	800b856 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d009      	beq.n	800b850 <udp_input_local_match+0x60>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d005      	beq.n	800b850 <udp_input_local_match+0x60>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	4b06      	ldr	r3, [pc, #24]	; (800b864 <udp_input_local_match+0x74>)
 800b84a:	695b      	ldr	r3, [r3, #20]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d101      	bne.n	800b854 <udp_input_local_match+0x64>
      return 1;
 800b850:	2301      	movs	r3, #1
 800b852:	e000      	b.n	800b856 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	200037b4 	.word	0x200037b4

0800b868 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b868:	b590      	push	{r4, r7, lr}
 800b86a:	b08d      	sub	sp, #52	; 0x34
 800b86c:	af02      	add	r7, sp, #8
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	895b      	ldrh	r3, [r3, #10]
 800b87a:	2b07      	cmp	r3, #7
 800b87c:	d803      	bhi.n	800b886 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7fa f9fc 	bl	8005c7c <pbuf_free>
    goto end;
 800b884:	e0c6      	b.n	800ba14 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b88c:	4b63      	ldr	r3, [pc, #396]	; (800ba1c <udp_input+0x1b4>)
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	4a62      	ldr	r2, [pc, #392]	; (800ba1c <udp_input+0x1b4>)
 800b892:	6812      	ldr	r2, [r2, #0]
 800b894:	4611      	mov	r1, r2
 800b896:	4618      	mov	r0, r3
 800b898:	f001 fc1c 	bl	800d0d4 <ip4_addr_isbroadcast_u32>
 800b89c:	4603      	mov	r3, r0
 800b89e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7f9 f8bf 	bl	8004a2a <lwip_htons>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	885b      	ldrh	r3, [r3, #2]
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7f9 f8b7 	bl	8004a2a <lwip_htons>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b8cc:	4b54      	ldr	r3, [pc, #336]	; (800ba20 <udp_input+0x1b8>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8d2:	e03b      	b.n	800b94c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	8a5b      	ldrh	r3, [r3, #18]
 800b8d8:	89fa      	ldrh	r2, [r7, #14]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d131      	bne.n	800b942 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b8de:	7cfb      	ldrb	r3, [r7, #19]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8e6:	f7ff ff83 	bl	800b7f0 <udp_input_local_match>
 800b8ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d028      	beq.n	800b942 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	7c1b      	ldrb	r3, [r3, #16]
 800b8f4:	f003 0304 	and.w	r3, r3, #4
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d104      	bne.n	800b906 <udp_input+0x9e>
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b908:	8a9b      	ldrh	r3, [r3, #20]
 800b90a:	8a3a      	ldrh	r2, [r7, #16]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d118      	bne.n	800b942 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b914:	2b00      	cmp	r3, #0
 800b916:	d005      	beq.n	800b924 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	4b3f      	ldr	r3, [pc, #252]	; (800ba1c <udp_input+0x1b4>)
 800b91e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b920:	429a      	cmp	r2, r3
 800b922:	d10e      	bne.n	800b942 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d014      	beq.n	800b954 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	68da      	ldr	r2, [r3, #12]
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b932:	4b3b      	ldr	r3, [pc, #236]	; (800ba20 <udp_input+0x1b8>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b93a:	4a39      	ldr	r2, [pc, #228]	; (800ba20 <udp_input+0x1b8>)
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b940:	e008      	b.n	800b954 <udp_input+0xec>
      }
    }

    prev = pcb;
 800b942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b944:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	627b      	str	r3, [r7, #36]	; 0x24
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1c0      	bne.n	800b8d4 <udp_input+0x6c>
 800b952:	e000      	b.n	800b956 <udp_input+0xee>
        break;
 800b954:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d101      	bne.n	800b960 <udp_input+0xf8>
    pcb = uncon_pcb;
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <udp_input+0x104>
    for_us = 1;
 800b966:	2301      	movs	r3, #1
 800b968:	76fb      	strb	r3, [r7, #27]
 800b96a:	e00a      	b.n	800b982 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	3304      	adds	r3, #4
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	4b2a      	ldr	r3, [pc, #168]	; (800ba1c <udp_input+0x1b4>)
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	429a      	cmp	r2, r3
 800b978:	bf0c      	ite	eq
 800b97a:	2301      	moveq	r3, #1
 800b97c:	2300      	movne	r3, #0
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b982:	7efb      	ldrb	r3, [r7, #27]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d042      	beq.n	800ba0e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800b988:	f06f 0107 	mvn.w	r1, #7
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7fa f951 	bl	8005c34 <pbuf_header>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00a      	beq.n	800b9ae <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b998:	4b22      	ldr	r3, [pc, #136]	; (800ba24 <udp_input+0x1bc>)
 800b99a:	f240 1255 	movw	r2, #341	; 0x155
 800b99e:	4922      	ldr	r1, [pc, #136]	; (800ba28 <udp_input+0x1c0>)
 800b9a0:	4822      	ldr	r0, [pc, #136]	; (800ba2c <udp_input+0x1c4>)
 800b9a2:	f002 fbc1 	bl	800e128 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7fa f968 	bl	8005c7c <pbuf_free>
      goto end;
 800b9ac:	e032      	b.n	800ba14 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d012      	beq.n	800b9da <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00a      	beq.n	800b9d2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	699c      	ldr	r4, [r3, #24]
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	69d8      	ldr	r0, [r3, #28]
 800b9c4:	8a3b      	ldrh	r3, [r7, #16]
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	4b19      	ldr	r3, [pc, #100]	; (800ba30 <udp_input+0x1c8>)
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9ce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b9d0:	e021      	b.n	800ba16 <udp_input+0x1ae>
        pbuf_free(p);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7fa f952 	bl	8005c7c <pbuf_free>
        goto end;
 800b9d8:	e01c      	b.n	800ba14 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b9da:	7cfb      	ldrb	r3, [r7, #19]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d112      	bne.n	800ba06 <udp_input+0x19e>
 800b9e0:	4b0e      	ldr	r3, [pc, #56]	; (800ba1c <udp_input+0x1b4>)
 800b9e2:	695b      	ldr	r3, [r3, #20]
 800b9e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9e8:	2be0      	cmp	r3, #224	; 0xe0
 800b9ea:	d00c      	beq.n	800ba06 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b9ec:	4b0b      	ldr	r3, [pc, #44]	; (800ba1c <udp_input+0x1b4>)
 800b9ee:	899b      	ldrh	r3, [r3, #12]
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	b21b      	sxth	r3, r3
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7fa f92d 	bl	8005c58 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b9fe:	2103      	movs	r1, #3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f001 f863 	bl	800cacc <icmp_dest_unreach>
      pbuf_free(p);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7fa f938 	bl	8005c7c <pbuf_free>
  return;
 800ba0c:	e003      	b.n	800ba16 <udp_input+0x1ae>
    pbuf_free(p);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7fa f934 	bl	8005c7c <pbuf_free>
  return;
 800ba14:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ba16:	372c      	adds	r7, #44	; 0x2c
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd90      	pop	{r4, r7, pc}
 800ba1c:	200037b4 	.word	0x200037b4
 800ba20:	20006d6c 	.word	0x20006d6c
 800ba24:	08010a10 	.word	0x08010a10
 800ba28:	08010a40 	.word	0x08010a40
 800ba2c:	08010a54 	.word	0x08010a54
 800ba30:	200037c4 	.word	0x200037c4

0800ba34 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d01e      	beq.n	800ba82 <udp_netif_ip_addr_changed+0x4e>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d01a      	beq.n	800ba82 <udp_netif_ip_addr_changed+0x4e>
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d017      	beq.n	800ba82 <udp_netif_ip_addr_changed+0x4e>
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d013      	beq.n	800ba82 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ba5a:	4b0d      	ldr	r3, [pc, #52]	; (800ba90 <udp_netif_ip_addr_changed+0x5c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	60fb      	str	r3, [r7, #12]
 800ba60:	e00c      	b.n	800ba7c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d103      	bne.n	800ba76 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1ef      	bne.n	800ba62 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ba82:	bf00      	nop
 800ba84:	3714      	adds	r7, #20
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	20006d6c 	.word	0x20006d6c

0800ba94 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ba9c:	4915      	ldr	r1, [pc, #84]	; (800baf4 <etharp_free_entry+0x60>)
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	4613      	mov	r3, r2
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	4413      	add	r3, r2
 800baa6:	00db      	lsls	r3, r3, #3
 800baa8:	440b      	add	r3, r1
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d013      	beq.n	800bad8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bab0:	4910      	ldr	r1, [pc, #64]	; (800baf4 <etharp_free_entry+0x60>)
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	4613      	mov	r3, r2
 800bab6:	005b      	lsls	r3, r3, #1
 800bab8:	4413      	add	r3, r2
 800baba:	00db      	lsls	r3, r3, #3
 800babc:	440b      	add	r3, r1
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fa f8db 	bl	8005c7c <pbuf_free>
    arp_table[i].q = NULL;
 800bac6:	490b      	ldr	r1, [pc, #44]	; (800baf4 <etharp_free_entry+0x60>)
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4613      	mov	r3, r2
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	4413      	add	r3, r2
 800bad0:	00db      	lsls	r3, r3, #3
 800bad2:	440b      	add	r3, r1
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bad8:	4906      	ldr	r1, [pc, #24]	; (800baf4 <etharp_free_entry+0x60>)
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	4613      	mov	r3, r2
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	4413      	add	r3, r2
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	440b      	add	r3, r1
 800bae6:	3314      	adds	r3, #20
 800bae8:	2200      	movs	r2, #0
 800baea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800baec:	bf00      	nop
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	20006d70 	.word	0x20006d70

0800baf8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bafe:	2300      	movs	r3, #0
 800bb00:	71fb      	strb	r3, [r7, #7]
 800bb02:	e096      	b.n	800bc32 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bb04:	79fa      	ldrb	r2, [r7, #7]
 800bb06:	494f      	ldr	r1, [pc, #316]	; (800bc44 <etharp_tmr+0x14c>)
 800bb08:	4613      	mov	r3, r2
 800bb0a:	005b      	lsls	r3, r3, #1
 800bb0c:	4413      	add	r3, r2
 800bb0e:	00db      	lsls	r3, r3, #3
 800bb10:	440b      	add	r3, r1
 800bb12:	3314      	adds	r3, #20
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800bb18:	79bb      	ldrb	r3, [r7, #6]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f000 8086 	beq.w	800bc2c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800bb20:	79fa      	ldrb	r2, [r7, #7]
 800bb22:	4948      	ldr	r1, [pc, #288]	; (800bc44 <etharp_tmr+0x14c>)
 800bb24:	4613      	mov	r3, r2
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	4413      	add	r3, r2
 800bb2a:	00db      	lsls	r3, r3, #3
 800bb2c:	440b      	add	r3, r1
 800bb2e:	3312      	adds	r3, #18
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	b298      	uxth	r0, r3
 800bb36:	4943      	ldr	r1, [pc, #268]	; (800bc44 <etharp_tmr+0x14c>)
 800bb38:	4613      	mov	r3, r2
 800bb3a:	005b      	lsls	r3, r3, #1
 800bb3c:	4413      	add	r3, r2
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	440b      	add	r3, r1
 800bb42:	3312      	adds	r3, #18
 800bb44:	4602      	mov	r2, r0
 800bb46:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bb48:	79fa      	ldrb	r2, [r7, #7]
 800bb4a:	493e      	ldr	r1, [pc, #248]	; (800bc44 <etharp_tmr+0x14c>)
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	005b      	lsls	r3, r3, #1
 800bb50:	4413      	add	r3, r2
 800bb52:	00db      	lsls	r3, r3, #3
 800bb54:	440b      	add	r3, r1
 800bb56:	3312      	adds	r3, #18
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bb5e:	d215      	bcs.n	800bb8c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bb60:	79fa      	ldrb	r2, [r7, #7]
 800bb62:	4938      	ldr	r1, [pc, #224]	; (800bc44 <etharp_tmr+0x14c>)
 800bb64:	4613      	mov	r3, r2
 800bb66:	005b      	lsls	r3, r3, #1
 800bb68:	4413      	add	r3, r2
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	440b      	add	r3, r1
 800bb6e:	3314      	adds	r3, #20
 800bb70:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d10f      	bne.n	800bb96 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bb76:	79fa      	ldrb	r2, [r7, #7]
 800bb78:	4932      	ldr	r1, [pc, #200]	; (800bc44 <etharp_tmr+0x14c>)
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	005b      	lsls	r3, r3, #1
 800bb7e:	4413      	add	r3, r2
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	440b      	add	r3, r1
 800bb84:	3312      	adds	r3, #18
 800bb86:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	d904      	bls.n	800bb96 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7ff ff80 	bl	800ba94 <etharp_free_entry>
 800bb94:	e04a      	b.n	800bc2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bb96:	79fa      	ldrb	r2, [r7, #7]
 800bb98:	492a      	ldr	r1, [pc, #168]	; (800bc44 <etharp_tmr+0x14c>)
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	005b      	lsls	r3, r3, #1
 800bb9e:	4413      	add	r3, r2
 800bba0:	00db      	lsls	r3, r3, #3
 800bba2:	440b      	add	r3, r1
 800bba4:	3314      	adds	r3, #20
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b03      	cmp	r3, #3
 800bbaa:	d10a      	bne.n	800bbc2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bbac:	79fa      	ldrb	r2, [r7, #7]
 800bbae:	4925      	ldr	r1, [pc, #148]	; (800bc44 <etharp_tmr+0x14c>)
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	005b      	lsls	r3, r3, #1
 800bbb4:	4413      	add	r3, r2
 800bbb6:	00db      	lsls	r3, r3, #3
 800bbb8:	440b      	add	r3, r1
 800bbba:	3314      	adds	r3, #20
 800bbbc:	2204      	movs	r2, #4
 800bbbe:	701a      	strb	r2, [r3, #0]
 800bbc0:	e034      	b.n	800bc2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bbc2:	79fa      	ldrb	r2, [r7, #7]
 800bbc4:	491f      	ldr	r1, [pc, #124]	; (800bc44 <etharp_tmr+0x14c>)
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	005b      	lsls	r3, r3, #1
 800bbca:	4413      	add	r3, r2
 800bbcc:	00db      	lsls	r3, r3, #3
 800bbce:	440b      	add	r3, r1
 800bbd0:	3314      	adds	r3, #20
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b04      	cmp	r3, #4
 800bbd6:	d10a      	bne.n	800bbee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bbd8:	79fa      	ldrb	r2, [r7, #7]
 800bbda:	491a      	ldr	r1, [pc, #104]	; (800bc44 <etharp_tmr+0x14c>)
 800bbdc:	4613      	mov	r3, r2
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	4413      	add	r3, r2
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	440b      	add	r3, r1
 800bbe6:	3314      	adds	r3, #20
 800bbe8:	2202      	movs	r2, #2
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	e01e      	b.n	800bc2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bbee:	79fa      	ldrb	r2, [r7, #7]
 800bbf0:	4914      	ldr	r1, [pc, #80]	; (800bc44 <etharp_tmr+0x14c>)
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	005b      	lsls	r3, r3, #1
 800bbf6:	4413      	add	r3, r2
 800bbf8:	00db      	lsls	r3, r3, #3
 800bbfa:	440b      	add	r3, r1
 800bbfc:	3314      	adds	r3, #20
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d113      	bne.n	800bc2c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bc04:	79fa      	ldrb	r2, [r7, #7]
 800bc06:	490f      	ldr	r1, [pc, #60]	; (800bc44 <etharp_tmr+0x14c>)
 800bc08:	4613      	mov	r3, r2
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	4413      	add	r3, r2
 800bc0e:	00db      	lsls	r3, r3, #3
 800bc10:	440b      	add	r3, r1
 800bc12:	3308      	adds	r3, #8
 800bc14:	6818      	ldr	r0, [r3, #0]
 800bc16:	79fa      	ldrb	r2, [r7, #7]
 800bc18:	4613      	mov	r3, r2
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	4413      	add	r3, r2
 800bc1e:	00db      	lsls	r3, r3, #3
 800bc20:	4a08      	ldr	r2, [pc, #32]	; (800bc44 <etharp_tmr+0x14c>)
 800bc22:	4413      	add	r3, r2
 800bc24:	3304      	adds	r3, #4
 800bc26:	4619      	mov	r1, r3
 800bc28:	f000 fe38 	bl	800c89c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc2c:	79fb      	ldrb	r3, [r7, #7]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	71fb      	strb	r3, [r7, #7]
 800bc32:	79fb      	ldrb	r3, [r7, #7]
 800bc34:	2b09      	cmp	r3, #9
 800bc36:	f67f af65 	bls.w	800bb04 <etharp_tmr+0xc>
      }
    }
  }
}
 800bc3a:	bf00      	nop
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	20006d70 	.word	0x20006d70

0800bc48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	460b      	mov	r3, r1
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bc56:	230a      	movs	r3, #10
 800bc58:	77fb      	strb	r3, [r7, #31]
 800bc5a:	230a      	movs	r3, #10
 800bc5c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800bc5e:	230a      	movs	r3, #10
 800bc60:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800bc62:	2300      	movs	r3, #0
 800bc64:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800bc66:	230a      	movs	r3, #10
 800bc68:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	833b      	strh	r3, [r7, #24]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	82fb      	strh	r3, [r7, #22]
 800bc72:	2300      	movs	r3, #0
 800bc74:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc76:	2300      	movs	r3, #0
 800bc78:	773b      	strb	r3, [r7, #28]
 800bc7a:	e093      	b.n	800bda4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800bc7c:	7f3a      	ldrb	r2, [r7, #28]
 800bc7e:	4990      	ldr	r1, [pc, #576]	; (800bec0 <etharp_find_entry+0x278>)
 800bc80:	4613      	mov	r3, r2
 800bc82:	005b      	lsls	r3, r3, #1
 800bc84:	4413      	add	r3, r2
 800bc86:	00db      	lsls	r3, r3, #3
 800bc88:	440b      	add	r3, r1
 800bc8a:	3314      	adds	r3, #20
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bc90:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bc94:	2b0a      	cmp	r3, #10
 800bc96:	d105      	bne.n	800bca4 <etharp_find_entry+0x5c>
 800bc98:	7cfb      	ldrb	r3, [r7, #19]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d102      	bne.n	800bca4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800bc9e:	7f3b      	ldrb	r3, [r7, #28]
 800bca0:	777b      	strb	r3, [r7, #29]
 800bca2:	e07c      	b.n	800bd9e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bca4:	7cfb      	ldrb	r3, [r7, #19]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d079      	beq.n	800bd9e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bcaa:	7cfb      	ldrb	r3, [r7, #19]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d009      	beq.n	800bcc4 <etharp_find_entry+0x7c>
 800bcb0:	7cfb      	ldrb	r3, [r7, #19]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d806      	bhi.n	800bcc4 <etharp_find_entry+0x7c>
 800bcb6:	4b83      	ldr	r3, [pc, #524]	; (800bec4 <etharp_find_entry+0x27c>)
 800bcb8:	f240 1225 	movw	r2, #293	; 0x125
 800bcbc:	4982      	ldr	r1, [pc, #520]	; (800bec8 <etharp_find_entry+0x280>)
 800bcbe:	4883      	ldr	r0, [pc, #524]	; (800becc <etharp_find_entry+0x284>)
 800bcc0:	f002 fa32 	bl	800e128 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00f      	beq.n	800bcea <etharp_find_entry+0xa2>
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6819      	ldr	r1, [r3, #0]
 800bcce:	7f3a      	ldrb	r2, [r7, #28]
 800bcd0:	487b      	ldr	r0, [pc, #492]	; (800bec0 <etharp_find_entry+0x278>)
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	4413      	add	r3, r2
 800bcd8:	00db      	lsls	r3, r3, #3
 800bcda:	4403      	add	r3, r0
 800bcdc:	3304      	adds	r3, #4
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4299      	cmp	r1, r3
 800bce2:	d102      	bne.n	800bcea <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bce4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bce8:	e0e5      	b.n	800beb6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bcea:	7cfb      	ldrb	r3, [r7, #19]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d13b      	bne.n	800bd68 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bcf0:	7f3a      	ldrb	r2, [r7, #28]
 800bcf2:	4973      	ldr	r1, [pc, #460]	; (800bec0 <etharp_find_entry+0x278>)
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	4413      	add	r3, r2
 800bcfa:	00db      	lsls	r3, r3, #3
 800bcfc:	440b      	add	r3, r1
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d018      	beq.n	800bd36 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800bd04:	7f3a      	ldrb	r2, [r7, #28]
 800bd06:	496e      	ldr	r1, [pc, #440]	; (800bec0 <etharp_find_entry+0x278>)
 800bd08:	4613      	mov	r3, r2
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	4413      	add	r3, r2
 800bd0e:	00db      	lsls	r3, r3, #3
 800bd10:	440b      	add	r3, r1
 800bd12:	3312      	adds	r3, #18
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	8b3a      	ldrh	r2, [r7, #24]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d840      	bhi.n	800bd9e <etharp_find_entry+0x156>
            old_queue = i;
 800bd1c:	7f3b      	ldrb	r3, [r7, #28]
 800bd1e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800bd20:	7f3a      	ldrb	r2, [r7, #28]
 800bd22:	4967      	ldr	r1, [pc, #412]	; (800bec0 <etharp_find_entry+0x278>)
 800bd24:	4613      	mov	r3, r2
 800bd26:	005b      	lsls	r3, r3, #1
 800bd28:	4413      	add	r3, r2
 800bd2a:	00db      	lsls	r3, r3, #3
 800bd2c:	440b      	add	r3, r1
 800bd2e:	3312      	adds	r3, #18
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	833b      	strh	r3, [r7, #24]
 800bd34:	e033      	b.n	800bd9e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bd36:	7f3a      	ldrb	r2, [r7, #28]
 800bd38:	4961      	ldr	r1, [pc, #388]	; (800bec0 <etharp_find_entry+0x278>)
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	4413      	add	r3, r2
 800bd40:	00db      	lsls	r3, r3, #3
 800bd42:	440b      	add	r3, r1
 800bd44:	3312      	adds	r3, #18
 800bd46:	881b      	ldrh	r3, [r3, #0]
 800bd48:	8afa      	ldrh	r2, [r7, #22]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d827      	bhi.n	800bd9e <etharp_find_entry+0x156>
            old_pending = i;
 800bd4e:	7f3b      	ldrb	r3, [r7, #28]
 800bd50:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800bd52:	7f3a      	ldrb	r2, [r7, #28]
 800bd54:	495a      	ldr	r1, [pc, #360]	; (800bec0 <etharp_find_entry+0x278>)
 800bd56:	4613      	mov	r3, r2
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	4413      	add	r3, r2
 800bd5c:	00db      	lsls	r3, r3, #3
 800bd5e:	440b      	add	r3, r1
 800bd60:	3312      	adds	r3, #18
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	82fb      	strh	r3, [r7, #22]
 800bd66:	e01a      	b.n	800bd9e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bd68:	7cfb      	ldrb	r3, [r7, #19]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d917      	bls.n	800bd9e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bd6e:	7f3a      	ldrb	r2, [r7, #28]
 800bd70:	4953      	ldr	r1, [pc, #332]	; (800bec0 <etharp_find_entry+0x278>)
 800bd72:	4613      	mov	r3, r2
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	4413      	add	r3, r2
 800bd78:	00db      	lsls	r3, r3, #3
 800bd7a:	440b      	add	r3, r1
 800bd7c:	3312      	adds	r3, #18
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	8aba      	ldrh	r2, [r7, #20]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d80b      	bhi.n	800bd9e <etharp_find_entry+0x156>
            old_stable = i;
 800bd86:	7f3b      	ldrb	r3, [r7, #28]
 800bd88:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800bd8a:	7f3a      	ldrb	r2, [r7, #28]
 800bd8c:	494c      	ldr	r1, [pc, #304]	; (800bec0 <etharp_find_entry+0x278>)
 800bd8e:	4613      	mov	r3, r2
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	4413      	add	r3, r2
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	440b      	add	r3, r1
 800bd98:	3312      	adds	r3, #18
 800bd9a:	881b      	ldrh	r3, [r3, #0]
 800bd9c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd9e:	7f3b      	ldrb	r3, [r7, #28]
 800bda0:	3301      	adds	r3, #1
 800bda2:	773b      	strb	r3, [r7, #28]
 800bda4:	7f3b      	ldrb	r3, [r7, #28]
 800bda6:	2b09      	cmp	r3, #9
 800bda8:	f67f af68 	bls.w	800bc7c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bdac:	7afb      	ldrb	r3, [r7, #11]
 800bdae:	f003 0302 	and.w	r3, r3, #2
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d108      	bne.n	800bdc8 <etharp_find_entry+0x180>
 800bdb6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bdba:	2b0a      	cmp	r3, #10
 800bdbc:	d107      	bne.n	800bdce <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bdbe:	7afb      	ldrb	r3, [r7, #11]
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d102      	bne.n	800bdce <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800bdc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdcc:	e073      	b.n	800beb6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bdce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bdd2:	2b09      	cmp	r3, #9
 800bdd4:	dc02      	bgt.n	800bddc <etharp_find_entry+0x194>
    i = empty;
 800bdd6:	7f7b      	ldrb	r3, [r7, #29]
 800bdd8:	773b      	strb	r3, [r7, #28]
 800bdda:	e036      	b.n	800be4a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bddc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bde0:	2b09      	cmp	r3, #9
 800bde2:	dc13      	bgt.n	800be0c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800bde4:	7fbb      	ldrb	r3, [r7, #30]
 800bde6:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bde8:	7f3a      	ldrb	r2, [r7, #28]
 800bdea:	4935      	ldr	r1, [pc, #212]	; (800bec0 <etharp_find_entry+0x278>)
 800bdec:	4613      	mov	r3, r2
 800bdee:	005b      	lsls	r3, r3, #1
 800bdf0:	4413      	add	r3, r2
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	440b      	add	r3, r1
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d018      	beq.n	800be2e <etharp_find_entry+0x1e6>
 800bdfc:	4b31      	ldr	r3, [pc, #196]	; (800bec4 <etharp_find_entry+0x27c>)
 800bdfe:	f240 126f 	movw	r2, #367	; 0x16f
 800be02:	4933      	ldr	r1, [pc, #204]	; (800bed0 <etharp_find_entry+0x288>)
 800be04:	4831      	ldr	r0, [pc, #196]	; (800becc <etharp_find_entry+0x284>)
 800be06:	f002 f98f 	bl	800e128 <iprintf>
 800be0a:	e010      	b.n	800be2e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800be0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be10:	2b09      	cmp	r3, #9
 800be12:	dc02      	bgt.n	800be1a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800be14:	7ffb      	ldrb	r3, [r7, #31]
 800be16:	773b      	strb	r3, [r7, #28]
 800be18:	e009      	b.n	800be2e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800be1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be1e:	2b09      	cmp	r3, #9
 800be20:	dc02      	bgt.n	800be28 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800be22:	7efb      	ldrb	r3, [r7, #27]
 800be24:	773b      	strb	r3, [r7, #28]
 800be26:	e002      	b.n	800be2e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800be28:	f04f 33ff 	mov.w	r3, #4294967295
 800be2c:	e043      	b.n	800beb6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800be2e:	7f3b      	ldrb	r3, [r7, #28]
 800be30:	2b09      	cmp	r3, #9
 800be32:	d906      	bls.n	800be42 <etharp_find_entry+0x1fa>
 800be34:	4b23      	ldr	r3, [pc, #140]	; (800bec4 <etharp_find_entry+0x27c>)
 800be36:	f240 1281 	movw	r2, #385	; 0x181
 800be3a:	4926      	ldr	r1, [pc, #152]	; (800bed4 <etharp_find_entry+0x28c>)
 800be3c:	4823      	ldr	r0, [pc, #140]	; (800becc <etharp_find_entry+0x284>)
 800be3e:	f002 f973 	bl	800e128 <iprintf>
    etharp_free_entry(i);
 800be42:	7f3b      	ldrb	r3, [r7, #28]
 800be44:	4618      	mov	r0, r3
 800be46:	f7ff fe25 	bl	800ba94 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800be4a:	7f3b      	ldrb	r3, [r7, #28]
 800be4c:	2b09      	cmp	r3, #9
 800be4e:	d906      	bls.n	800be5e <etharp_find_entry+0x216>
 800be50:	4b1c      	ldr	r3, [pc, #112]	; (800bec4 <etharp_find_entry+0x27c>)
 800be52:	f240 1285 	movw	r2, #389	; 0x185
 800be56:	491f      	ldr	r1, [pc, #124]	; (800bed4 <etharp_find_entry+0x28c>)
 800be58:	481c      	ldr	r0, [pc, #112]	; (800becc <etharp_find_entry+0x284>)
 800be5a:	f002 f965 	bl	800e128 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800be5e:	7f3a      	ldrb	r2, [r7, #28]
 800be60:	4917      	ldr	r1, [pc, #92]	; (800bec0 <etharp_find_entry+0x278>)
 800be62:	4613      	mov	r3, r2
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	4413      	add	r3, r2
 800be68:	00db      	lsls	r3, r3, #3
 800be6a:	440b      	add	r3, r1
 800be6c:	3314      	adds	r3, #20
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d006      	beq.n	800be82 <etharp_find_entry+0x23a>
 800be74:	4b13      	ldr	r3, [pc, #76]	; (800bec4 <etharp_find_entry+0x27c>)
 800be76:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800be7a:	4917      	ldr	r1, [pc, #92]	; (800bed8 <etharp_find_entry+0x290>)
 800be7c:	4813      	ldr	r0, [pc, #76]	; (800becc <etharp_find_entry+0x284>)
 800be7e:	f002 f953 	bl	800e128 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00a      	beq.n	800be9e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800be88:	7f3a      	ldrb	r2, [r7, #28]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6819      	ldr	r1, [r3, #0]
 800be8e:	480c      	ldr	r0, [pc, #48]	; (800bec0 <etharp_find_entry+0x278>)
 800be90:	4613      	mov	r3, r2
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	4413      	add	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	4403      	add	r3, r0
 800be9a:	3304      	adds	r3, #4
 800be9c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800be9e:	7f3a      	ldrb	r2, [r7, #28]
 800bea0:	4907      	ldr	r1, [pc, #28]	; (800bec0 <etharp_find_entry+0x278>)
 800bea2:	4613      	mov	r3, r2
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	4413      	add	r3, r2
 800bea8:	00db      	lsls	r3, r3, #3
 800beaa:	440b      	add	r3, r1
 800beac:	3312      	adds	r3, #18
 800beae:	2200      	movs	r2, #0
 800beb0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800beb2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3720      	adds	r7, #32
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20006d70 	.word	0x20006d70
 800bec4:	08010aac 	.word	0x08010aac
 800bec8:	08010ae4 	.word	0x08010ae4
 800becc:	08010b24 	.word	0x08010b24
 800bed0:	08010b4c 	.word	0x08010b4c
 800bed4:	08010b64 	.word	0x08010b64
 800bed8:	08010b78 	.word	0x08010b78

0800bedc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b088      	sub	sp, #32
 800bee0:	af02      	add	r7, sp, #8
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
 800bee8:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bef0:	2b06      	cmp	r3, #6
 800bef2:	d006      	beq.n	800bf02 <etharp_update_arp_entry+0x26>
 800bef4:	4b48      	ldr	r3, [pc, #288]	; (800c018 <etharp_update_arp_entry+0x13c>)
 800bef6:	f240 12ab 	movw	r2, #427	; 0x1ab
 800befa:	4948      	ldr	r1, [pc, #288]	; (800c01c <etharp_update_arp_entry+0x140>)
 800befc:	4848      	ldr	r0, [pc, #288]	; (800c020 <etharp_update_arp_entry+0x144>)
 800befe:	f002 f913 	bl	800e128 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d012      	beq.n	800bf2e <etharp_update_arp_entry+0x52>
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00e      	beq.n	800bf2e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68f9      	ldr	r1, [r7, #12]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f001 f8dc 	bl	800d0d4 <ip4_addr_isbroadcast_u32>
 800bf1c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d105      	bne.n	800bf2e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf2a:	2be0      	cmp	r3, #224	; 0xe0
 800bf2c:	d102      	bne.n	800bf34 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bf2e:	f06f 030f 	mvn.w	r3, #15
 800bf32:	e06c      	b.n	800c00e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bf34:	78fb      	ldrb	r3, [r7, #3]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	68b8      	ldr	r0, [r7, #8]
 800bf3c:	f7ff fe84 	bl	800bc48 <etharp_find_entry>
 800bf40:	4603      	mov	r3, r0
 800bf42:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bf44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	da02      	bge.n	800bf52 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bf4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf50:	e05d      	b.n	800c00e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bf52:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bf56:	4933      	ldr	r1, [pc, #204]	; (800c024 <etharp_update_arp_entry+0x148>)
 800bf58:	4613      	mov	r3, r2
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	4413      	add	r3, r2
 800bf5e:	00db      	lsls	r3, r3, #3
 800bf60:	440b      	add	r3, r1
 800bf62:	3314      	adds	r3, #20
 800bf64:	2202      	movs	r2, #2
 800bf66:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bf68:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bf6c:	492d      	ldr	r1, [pc, #180]	; (800c024 <etharp_update_arp_entry+0x148>)
 800bf6e:	4613      	mov	r3, r2
 800bf70:	005b      	lsls	r3, r3, #1
 800bf72:	4413      	add	r3, r2
 800bf74:	00db      	lsls	r3, r3, #3
 800bf76:	440b      	add	r3, r1
 800bf78:	3308      	adds	r3, #8
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800bf7e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bf82:	4613      	mov	r3, r2
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	4413      	add	r3, r2
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	4a25      	ldr	r2, [pc, #148]	; (800c024 <etharp_update_arp_entry+0x148>)
 800bf8e:	4413      	add	r3, r2
 800bf90:	3304      	adds	r3, #4
 800bf92:	2206      	movs	r2, #6
 800bf94:	6879      	ldr	r1, [r7, #4]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f001 ffd0 	bl	800df3c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bf9c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bfa0:	4920      	ldr	r1, [pc, #128]	; (800c024 <etharp_update_arp_entry+0x148>)
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	4413      	add	r3, r2
 800bfa8:	00db      	lsls	r3, r3, #3
 800bfaa:	440b      	add	r3, r1
 800bfac:	3312      	adds	r3, #18
 800bfae:	2200      	movs	r2, #0
 800bfb0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bfb2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bfb6:	491b      	ldr	r1, [pc, #108]	; (800c024 <etharp_update_arp_entry+0x148>)
 800bfb8:	4613      	mov	r3, r2
 800bfba:	005b      	lsls	r3, r3, #1
 800bfbc:	4413      	add	r3, r2
 800bfbe:	00db      	lsls	r3, r3, #3
 800bfc0:	440b      	add	r3, r1
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d021      	beq.n	800c00c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bfc8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bfcc:	4915      	ldr	r1, [pc, #84]	; (800c024 <etharp_update_arp_entry+0x148>)
 800bfce:	4613      	mov	r3, r2
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	4413      	add	r3, r2
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	440b      	add	r3, r1
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bfdc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bfe0:	4910      	ldr	r1, [pc, #64]	; (800c024 <etharp_update_arp_entry+0x148>)
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	005b      	lsls	r3, r3, #1
 800bfe6:	4413      	add	r3, r2
 800bfe8:	00db      	lsls	r3, r3, #3
 800bfea:	440b      	add	r3, r1
 800bfec:	2200      	movs	r2, #0
 800bfee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800bff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6939      	ldr	r1, [r7, #16]
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f001 ff0f 	bl	800de24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c006:	6938      	ldr	r0, [r7, #16]
 800c008:	f7f9 fe38 	bl	8005c7c <pbuf_free>
  }
  return ERR_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3718      	adds	r7, #24
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	08010aac 	.word	0x08010aac
 800c01c:	08010ba4 	.word	0x08010ba4
 800c020:	08010b24 	.word	0x08010b24
 800c024:	20006d70 	.word	0x20006d70

0800c028 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c030:	2300      	movs	r3, #0
 800c032:	73fb      	strb	r3, [r7, #15]
 800c034:	e01f      	b.n	800c076 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800c036:	7bfa      	ldrb	r2, [r7, #15]
 800c038:	4913      	ldr	r1, [pc, #76]	; (800c088 <etharp_cleanup_netif+0x60>)
 800c03a:	4613      	mov	r3, r2
 800c03c:	005b      	lsls	r3, r3, #1
 800c03e:	4413      	add	r3, r2
 800c040:	00db      	lsls	r3, r3, #3
 800c042:	440b      	add	r3, r1
 800c044:	3314      	adds	r3, #20
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00f      	beq.n	800c070 <etharp_cleanup_netif+0x48>
 800c050:	7bfa      	ldrb	r2, [r7, #15]
 800c052:	490d      	ldr	r1, [pc, #52]	; (800c088 <etharp_cleanup_netif+0x60>)
 800c054:	4613      	mov	r3, r2
 800c056:	005b      	lsls	r3, r3, #1
 800c058:	4413      	add	r3, r2
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	440b      	add	r3, r1
 800c05e:	3308      	adds	r3, #8
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	429a      	cmp	r2, r3
 800c066:	d103      	bne.n	800c070 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800c068:	7bfb      	ldrb	r3, [r7, #15]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff fd12 	bl	800ba94 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c070:	7bfb      	ldrb	r3, [r7, #15]
 800c072:	3301      	adds	r3, #1
 800c074:	73fb      	strb	r3, [r7, #15]
 800c076:	7bfb      	ldrb	r3, [r7, #15]
 800c078:	2b09      	cmp	r3, #9
 800c07a:	d9dc      	bls.n	800c036 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c07c:	bf00      	nop
 800c07e:	bf00      	nop
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20006d70 	.word	0x20006d70

0800c08c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c08c:	b5b0      	push	{r4, r5, r7, lr}
 800c08e:	b08a      	sub	sp, #40	; 0x28
 800c090:	af04      	add	r7, sp, #16
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d107      	bne.n	800c0ac <etharp_input+0x20>
 800c09c:	4b3d      	ldr	r3, [pc, #244]	; (800c194 <etharp_input+0x108>)
 800c09e:	f44f 7222 	mov.w	r2, #648	; 0x288
 800c0a2:	493d      	ldr	r1, [pc, #244]	; (800c198 <etharp_input+0x10c>)
 800c0a4:	483d      	ldr	r0, [pc, #244]	; (800c19c <etharp_input+0x110>)
 800c0a6:	f002 f83f 	bl	800e128 <iprintf>
 800c0aa:	e06f      	b.n	800c18c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	881b      	ldrh	r3, [r3, #0]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0bc:	d10c      	bne.n	800c0d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c0c2:	2b06      	cmp	r3, #6
 800c0c4:	d108      	bne.n	800c0d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c0ca:	2b04      	cmp	r3, #4
 800c0cc:	d104      	bne.n	800c0d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	885b      	ldrh	r3, [r3, #2]
 800c0d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c0d4:	2b08      	cmp	r3, #8
 800c0d6:	d003      	beq.n	800c0e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7f9 fdcf 	bl	8005c7c <pbuf_free>
    return;
 800c0de:	e055      	b.n	800c18c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	330e      	adds	r3, #14
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	3318      	adds	r3, #24
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d102      	bne.n	800c100 <etharp_input+0x74>
    for_us = 0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	75fb      	strb	r3, [r7, #23]
 800c0fe:	e009      	b.n	800c114 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	3304      	adds	r3, #4
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	429a      	cmp	r2, r3
 800c10a:	bf0c      	ite	eq
 800c10c:	2301      	moveq	r3, #1
 800c10e:	2300      	movne	r3, #0
 800c110:	b2db      	uxtb	r3, r3
 800c112:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	f103 0208 	add.w	r2, r3, #8
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <etharp_input+0x98>
 800c120:	2301      	movs	r3, #1
 800c122:	e000      	b.n	800c126 <etharp_input+0x9a>
 800c124:	2302      	movs	r3, #2
 800c126:	f107 010c 	add.w	r1, r7, #12
 800c12a:	6838      	ldr	r0, [r7, #0]
 800c12c:	f7ff fed6 	bl	800bedc <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	88db      	ldrh	r3, [r3, #6]
 800c134:	b29b      	uxth	r3, r3
 800c136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c13a:	d003      	beq.n	800c144 <etharp_input+0xb8>
 800c13c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c140:	d01e      	beq.n	800c180 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800c142:	e020      	b.n	800c186 <etharp_input+0xfa>
    if (for_us) {
 800c144:	7dfb      	ldrb	r3, [r7, #23]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d01c      	beq.n	800c184 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800c160:	693a      	ldr	r2, [r7, #16]
 800c162:	3208      	adds	r2, #8
      etharp_raw(netif,
 800c164:	2102      	movs	r1, #2
 800c166:	9103      	str	r1, [sp, #12]
 800c168:	f107 010c 	add.w	r1, r7, #12
 800c16c:	9102      	str	r1, [sp, #8]
 800c16e:	9201      	str	r2, [sp, #4]
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	462b      	mov	r3, r5
 800c174:	4622      	mov	r2, r4
 800c176:	4601      	mov	r1, r0
 800c178:	6838      	ldr	r0, [r7, #0]
 800c17a:	f000 fae1 	bl	800c740 <etharp_raw>
    break;
 800c17e:	e001      	b.n	800c184 <etharp_input+0xf8>
    break;
 800c180:	bf00      	nop
 800c182:	e000      	b.n	800c186 <etharp_input+0xfa>
    break;
 800c184:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7f9 fd78 	bl	8005c7c <pbuf_free>
}
 800c18c:	3718      	adds	r7, #24
 800c18e:	46bd      	mov	sp, r7
 800c190:	bdb0      	pop	{r4, r5, r7, pc}
 800c192:	bf00      	nop
 800c194:	08010aac 	.word	0x08010aac
 800c198:	08010bfc 	.word	0x08010bfc
 800c19c:	08010b24 	.word	0x08010b24

0800c1a0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af02      	add	r7, sp, #8
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c1ae:	79fa      	ldrb	r2, [r7, #7]
 800c1b0:	4944      	ldr	r1, [pc, #272]	; (800c2c4 <etharp_output_to_arp_index+0x124>)
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	4413      	add	r3, r2
 800c1b8:	00db      	lsls	r3, r3, #3
 800c1ba:	440b      	add	r3, r1
 800c1bc:	3314      	adds	r3, #20
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d806      	bhi.n	800c1d2 <etharp_output_to_arp_index+0x32>
 800c1c4:	4b40      	ldr	r3, [pc, #256]	; (800c2c8 <etharp_output_to_arp_index+0x128>)
 800c1c6:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800c1ca:	4940      	ldr	r1, [pc, #256]	; (800c2cc <etharp_output_to_arp_index+0x12c>)
 800c1cc:	4840      	ldr	r0, [pc, #256]	; (800c2d0 <etharp_output_to_arp_index+0x130>)
 800c1ce:	f001 ffab 	bl	800e128 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c1d2:	79fa      	ldrb	r2, [r7, #7]
 800c1d4:	493b      	ldr	r1, [pc, #236]	; (800c2c4 <etharp_output_to_arp_index+0x124>)
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	4413      	add	r3, r2
 800c1dc:	00db      	lsls	r3, r3, #3
 800c1de:	440b      	add	r3, r1
 800c1e0:	3314      	adds	r3, #20
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d153      	bne.n	800c290 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c1e8:	79fa      	ldrb	r2, [r7, #7]
 800c1ea:	4936      	ldr	r1, [pc, #216]	; (800c2c4 <etharp_output_to_arp_index+0x124>)
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	005b      	lsls	r3, r3, #1
 800c1f0:	4413      	add	r3, r2
 800c1f2:	00db      	lsls	r3, r3, #3
 800c1f4:	440b      	add	r3, r1
 800c1f6:	3312      	adds	r3, #18
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c1fe:	d919      	bls.n	800c234 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c200:	79fa      	ldrb	r2, [r7, #7]
 800c202:	4613      	mov	r3, r2
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	4413      	add	r3, r2
 800c208:	00db      	lsls	r3, r3, #3
 800c20a:	4a2e      	ldr	r2, [pc, #184]	; (800c2c4 <etharp_output_to_arp_index+0x124>)
 800c20c:	4413      	add	r3, r2
 800c20e:	3304      	adds	r3, #4
 800c210:	4619      	mov	r1, r3
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f000 fb42 	bl	800c89c <etharp_request>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d138      	bne.n	800c290 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c21e:	79fa      	ldrb	r2, [r7, #7]
 800c220:	4928      	ldr	r1, [pc, #160]	; (800c2c4 <etharp_output_to_arp_index+0x124>)
 800c222:	4613      	mov	r3, r2
 800c224:	005b      	lsls	r3, r3, #1
 800c226:	4413      	add	r3, r2
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	440b      	add	r3, r1
 800c22c:	3314      	adds	r3, #20
 800c22e:	2203      	movs	r2, #3
 800c230:	701a      	strb	r2, [r3, #0]
 800c232:	e02d      	b.n	800c290 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c234:	79fa      	ldrb	r2, [r7, #7]
 800c236:	4923      	ldr	r1, [pc, #140]	; (800c2c4 <etharp_output_to_arp_index+0x124>)
 800c238:	4613      	mov	r3, r2
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	4413      	add	r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	440b      	add	r3, r1
 800c242:	3312      	adds	r3, #18
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c24a:	d321      	bcc.n	800c290 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c24c:	79fa      	ldrb	r2, [r7, #7]
 800c24e:	4613      	mov	r3, r2
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	4413      	add	r3, r2
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	4a1b      	ldr	r2, [pc, #108]	; (800c2c4 <etharp_output_to_arp_index+0x124>)
 800c258:	4413      	add	r3, r2
 800c25a:	1d19      	adds	r1, r3, #4
 800c25c:	79fa      	ldrb	r2, [r7, #7]
 800c25e:	4613      	mov	r3, r2
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	4413      	add	r3, r2
 800c264:	00db      	lsls	r3, r3, #3
 800c266:	3308      	adds	r3, #8
 800c268:	4a16      	ldr	r2, [pc, #88]	; (800c2c4 <etharp_output_to_arp_index+0x124>)
 800c26a:	4413      	add	r3, r2
 800c26c:	3304      	adds	r3, #4
 800c26e:	461a      	mov	r2, r3
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f000 faf1 	bl	800c858 <etharp_request_dst>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d109      	bne.n	800c290 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c27c:	79fa      	ldrb	r2, [r7, #7]
 800c27e:	4911      	ldr	r1, [pc, #68]	; (800c2c4 <etharp_output_to_arp_index+0x124>)
 800c280:	4613      	mov	r3, r2
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	4413      	add	r3, r2
 800c286:	00db      	lsls	r3, r3, #3
 800c288:	440b      	add	r3, r1
 800c28a:	3314      	adds	r3, #20
 800c28c:	2203      	movs	r2, #3
 800c28e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800c296:	79fa      	ldrb	r2, [r7, #7]
 800c298:	4613      	mov	r3, r2
 800c29a:	005b      	lsls	r3, r3, #1
 800c29c:	4413      	add	r3, r2
 800c29e:	00db      	lsls	r3, r3, #3
 800c2a0:	3308      	adds	r3, #8
 800c2a2:	4a08      	ldr	r2, [pc, #32]	; (800c2c4 <etharp_output_to_arp_index+0x124>)
 800c2a4:	4413      	add	r3, r2
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2ac:	9200      	str	r2, [sp, #0]
 800c2ae:	460a      	mov	r2, r1
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f001 fdb6 	bl	800de24 <ethernet_output>
 800c2b8:	4603      	mov	r3, r0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20006d70 	.word	0x20006d70
 800c2c8:	08010aac 	.word	0x08010aac
 800c2cc:	08010c1c 	.word	0x08010c1c
 800c2d0:	08010b24 	.word	0x08010b24

0800c2d4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08a      	sub	sp, #40	; 0x28
 800c2d8:	af02      	add	r7, sp, #8
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d106      	bne.n	800c2f8 <etharp_output+0x24>
 800c2ea:	4b69      	ldr	r3, [pc, #420]	; (800c490 <etharp_output+0x1bc>)
 800c2ec:	f240 321b 	movw	r2, #795	; 0x31b
 800c2f0:	4968      	ldr	r1, [pc, #416]	; (800c494 <etharp_output+0x1c0>)
 800c2f2:	4869      	ldr	r0, [pc, #420]	; (800c498 <etharp_output+0x1c4>)
 800c2f4:	f001 ff18 	bl	800e128 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d106      	bne.n	800c30c <etharp_output+0x38>
 800c2fe:	4b64      	ldr	r3, [pc, #400]	; (800c490 <etharp_output+0x1bc>)
 800c300:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c304:	4965      	ldr	r1, [pc, #404]	; (800c49c <etharp_output+0x1c8>)
 800c306:	4864      	ldr	r0, [pc, #400]	; (800c498 <etharp_output+0x1c4>)
 800c308:	f001 ff0e 	bl	800e128 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d106      	bne.n	800c320 <etharp_output+0x4c>
 800c312:	4b5f      	ldr	r3, [pc, #380]	; (800c490 <etharp_output+0x1bc>)
 800c314:	f240 321d 	movw	r2, #797	; 0x31d
 800c318:	4961      	ldr	r1, [pc, #388]	; (800c4a0 <etharp_output+0x1cc>)
 800c31a:	485f      	ldr	r0, [pc, #380]	; (800c498 <etharp_output+0x1c4>)
 800c31c:	f001 ff04 	bl	800e128 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68f9      	ldr	r1, [r7, #12]
 800c326:	4618      	mov	r0, r3
 800c328:	f000 fed4 	bl	800d0d4 <ip4_addr_isbroadcast_u32>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d002      	beq.n	800c338 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c332:	4b5c      	ldr	r3, [pc, #368]	; (800c4a4 <etharp_output+0x1d0>)
 800c334:	61fb      	str	r3, [r7, #28]
 800c336:	e09b      	b.n	800c470 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c340:	2be0      	cmp	r3, #224	; 0xe0
 800c342:	d118      	bne.n	800c376 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c344:	2301      	movs	r3, #1
 800c346:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c348:	2300      	movs	r3, #0
 800c34a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c34c:	235e      	movs	r3, #94	; 0x5e
 800c34e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3301      	adds	r3, #1
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	3302      	adds	r3, #2
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	3303      	adds	r3, #3
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c36e:	f107 0310 	add.w	r3, r7, #16
 800c372:	61fb      	str	r3, [r7, #28]
 800c374:	e07c      	b.n	800c470 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3304      	adds	r3, #4
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	405a      	eors	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3308      	adds	r3, #8
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4013      	ands	r3, r2
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d012      	beq.n	800c3b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c394:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c398:	4293      	cmp	r3, r2
 800c39a:	d00b      	beq.n	800c3b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	330c      	adds	r3, #12
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	330c      	adds	r3, #12
 800c3aa:	61bb      	str	r3, [r7, #24]
 800c3ac:	e002      	b.n	800c3b4 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c3ae:	f06f 0303 	mvn.w	r3, #3
 800c3b2:	e069      	b.n	800c488 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c3b4:	4b3c      	ldr	r3, [pc, #240]	; (800c4a8 <etharp_output+0x1d4>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	4a3c      	ldr	r2, [pc, #240]	; (800c4ac <etharp_output+0x1d8>)
 800c3bc:	460b      	mov	r3, r1
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	440b      	add	r3, r1
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	4413      	add	r3, r2
 800c3c6:	3314      	adds	r3, #20
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d917      	bls.n	800c3fe <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	4b35      	ldr	r3, [pc, #212]	; (800c4a8 <etharp_output+0x1d4>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	4934      	ldr	r1, [pc, #208]	; (800c4ac <etharp_output+0x1d8>)
 800c3da:	4603      	mov	r3, r0
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	4403      	add	r3, r0
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	440b      	add	r3, r1
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d108      	bne.n	800c3fe <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c3ec:	4b2e      	ldr	r3, [pc, #184]	; (800c4a8 <etharp_output+0x1d4>)
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	68b9      	ldr	r1, [r7, #8]
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f7ff fed3 	bl	800c1a0 <etharp_output_to_arp_index>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	e044      	b.n	800c488 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c3fe:	2300      	movs	r3, #0
 800c400:	75fb      	strb	r3, [r7, #23]
 800c402:	e02a      	b.n	800c45a <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c404:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c408:	4928      	ldr	r1, [pc, #160]	; (800c4ac <etharp_output+0x1d8>)
 800c40a:	4613      	mov	r3, r2
 800c40c:	005b      	lsls	r3, r3, #1
 800c40e:	4413      	add	r3, r2
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	440b      	add	r3, r1
 800c414:	3314      	adds	r3, #20
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d918      	bls.n	800c44e <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	6819      	ldr	r1, [r3, #0]
 800c420:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c424:	4821      	ldr	r0, [pc, #132]	; (800c4ac <etharp_output+0x1d8>)
 800c426:	4613      	mov	r3, r2
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	4413      	add	r3, r2
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	4403      	add	r3, r0
 800c430:	3304      	adds	r3, #4
 800c432:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c434:	4299      	cmp	r1, r3
 800c436:	d10a      	bne.n	800c44e <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800c438:	7dfa      	ldrb	r2, [r7, #23]
 800c43a:	4b1b      	ldr	r3, [pc, #108]	; (800c4a8 <etharp_output+0x1d4>)
 800c43c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c43e:	7dfb      	ldrb	r3, [r7, #23]
 800c440:	461a      	mov	r2, r3
 800c442:	68b9      	ldr	r1, [r7, #8]
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f7ff feab 	bl	800c1a0 <etharp_output_to_arp_index>
 800c44a:	4603      	mov	r3, r0
 800c44c:	e01c      	b.n	800c488 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c44e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	3301      	adds	r3, #1
 800c456:	b2db      	uxtb	r3, r3
 800c458:	75fb      	strb	r3, [r7, #23]
 800c45a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c45e:	2b09      	cmp	r3, #9
 800c460:	ddd0      	ble.n	800c404 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	69b9      	ldr	r1, [r7, #24]
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f000 f822 	bl	800c4b0 <etharp_query>
 800c46c:	4603      	mov	r3, r0
 800c46e:	e00b      	b.n	800c488 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800c476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	68b9      	ldr	r1, [r7, #8]
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f001 fccf 	bl	800de24 <ethernet_output>
 800c486:	4603      	mov	r3, r0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3720      	adds	r7, #32
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	08010aac 	.word	0x08010aac
 800c494:	08010bfc 	.word	0x08010bfc
 800c498:	08010b24 	.word	0x08010b24
 800c49c:	08010c4c 	.word	0x08010c4c
 800c4a0:	08010bec 	.word	0x08010bec
 800c4a4:	0801120c 	.word	0x0801120c
 800c4a8:	20006e60 	.word	0x20006e60
 800c4ac:	20006d70 	.word	0x20006d70

0800c4b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b08c      	sub	sp, #48	; 0x30
 800c4b4:	af02      	add	r7, sp, #8
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3325      	adds	r3, #37	; 0x25
 800c4c0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c4c2:	23ff      	movs	r3, #255	; 0xff
 800c4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68f9      	ldr	r1, [r7, #12]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f000 fdfe 	bl	800d0d4 <ip4_addr_isbroadcast_u32>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10c      	bne.n	800c4f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c4e6:	2be0      	cmp	r3, #224	; 0xe0
 800c4e8:	d006      	beq.n	800c4f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d003      	beq.n	800c4f8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d102      	bne.n	800c4fe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c4f8:	f06f 030f 	mvn.w	r3, #15
 800c4fc:	e10e      	b.n	800c71c <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	2101      	movs	r1, #1
 800c502:	68b8      	ldr	r0, [r7, #8]
 800c504:	f7ff fba0 	bl	800bc48 <etharp_find_entry>
 800c508:	4603      	mov	r3, r0
 800c50a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800c50c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c510:	2b00      	cmp	r3, #0
 800c512:	da02      	bge.n	800c51a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800c514:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c518:	e100      	b.n	800c71c <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c51a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c51e:	4981      	ldr	r1, [pc, #516]	; (800c724 <etharp_query+0x274>)
 800c520:	4613      	mov	r3, r2
 800c522:	005b      	lsls	r3, r3, #1
 800c524:	4413      	add	r3, r2
 800c526:	00db      	lsls	r3, r3, #3
 800c528:	440b      	add	r3, r1
 800c52a:	3314      	adds	r3, #20
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d117      	bne.n	800c562 <etharp_query+0xb2>
    is_new_entry = 1;
 800c532:	2301      	movs	r3, #1
 800c534:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c536:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c53a:	497a      	ldr	r1, [pc, #488]	; (800c724 <etharp_query+0x274>)
 800c53c:	4613      	mov	r3, r2
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	4413      	add	r3, r2
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	440b      	add	r3, r1
 800c546:	3314      	adds	r3, #20
 800c548:	2201      	movs	r2, #1
 800c54a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c54c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c550:	4974      	ldr	r1, [pc, #464]	; (800c724 <etharp_query+0x274>)
 800c552:	4613      	mov	r3, r2
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	4413      	add	r3, r2
 800c558:	00db      	lsls	r3, r3, #3
 800c55a:	440b      	add	r3, r1
 800c55c:	3308      	adds	r3, #8
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c562:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c566:	496f      	ldr	r1, [pc, #444]	; (800c724 <etharp_query+0x274>)
 800c568:	4613      	mov	r3, r2
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	4413      	add	r3, r2
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	440b      	add	r3, r1
 800c572:	3314      	adds	r3, #20
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	2b01      	cmp	r3, #1
 800c578:	d012      	beq.n	800c5a0 <etharp_query+0xf0>
 800c57a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c57e:	4969      	ldr	r1, [pc, #420]	; (800c724 <etharp_query+0x274>)
 800c580:	4613      	mov	r3, r2
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	4413      	add	r3, r2
 800c586:	00db      	lsls	r3, r3, #3
 800c588:	440b      	add	r3, r1
 800c58a:	3314      	adds	r3, #20
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d806      	bhi.n	800c5a0 <etharp_query+0xf0>
 800c592:	4b65      	ldr	r3, [pc, #404]	; (800c728 <etharp_query+0x278>)
 800c594:	f240 32c7 	movw	r2, #967	; 0x3c7
 800c598:	4964      	ldr	r1, [pc, #400]	; (800c72c <etharp_query+0x27c>)
 800c59a:	4865      	ldr	r0, [pc, #404]	; (800c730 <etharp_query+0x280>)
 800c59c:	f001 fdc4 	bl	800e128 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c5a0:	6a3b      	ldr	r3, [r7, #32]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d102      	bne.n	800c5ac <etharp_query+0xfc>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10c      	bne.n	800c5c6 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c5ac:	68b9      	ldr	r1, [r7, #8]
 800c5ae:	68f8      	ldr	r0, [r7, #12]
 800c5b0:	f000 f974 	bl	800c89c <etharp_request>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d102      	bne.n	800c5c6 <etharp_query+0x116>
      return result;
 800c5c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5c4:	e0aa      	b.n	800c71c <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d106      	bne.n	800c5da <etharp_query+0x12a>
 800c5cc:	4b56      	ldr	r3, [pc, #344]	; (800c728 <etharp_query+0x278>)
 800c5ce:	f240 32db 	movw	r2, #987	; 0x3db
 800c5d2:	4958      	ldr	r1, [pc, #352]	; (800c734 <etharp_query+0x284>)
 800c5d4:	4856      	ldr	r0, [pc, #344]	; (800c730 <etharp_query+0x280>)
 800c5d6:	f001 fda7 	bl	800e128 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c5da:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c5de:	4951      	ldr	r1, [pc, #324]	; (800c724 <etharp_query+0x274>)
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	4413      	add	r3, r2
 800c5e6:	00db      	lsls	r3, r3, #3
 800c5e8:	440b      	add	r3, r1
 800c5ea:	3314      	adds	r3, #20
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d918      	bls.n	800c624 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800c5f2:	7cfa      	ldrb	r2, [r7, #19]
 800c5f4:	4b50      	ldr	r3, [pc, #320]	; (800c738 <etharp_query+0x288>)
 800c5f6:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c5f8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	005b      	lsls	r3, r3, #1
 800c600:	4413      	add	r3, r2
 800c602:	00db      	lsls	r3, r3, #3
 800c604:	3308      	adds	r3, #8
 800c606:	4a47      	ldr	r2, [pc, #284]	; (800c724 <etharp_query+0x274>)
 800c608:	4413      	add	r3, r2
 800c60a:	3304      	adds	r3, #4
 800c60c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c610:	9200      	str	r2, [sp, #0]
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	6879      	ldr	r1, [r7, #4]
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f001 fc04 	bl	800de24 <ethernet_output>
 800c61c:	4603      	mov	r3, r0
 800c61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c622:	e079      	b.n	800c718 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c624:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c628:	493e      	ldr	r1, [pc, #248]	; (800c724 <etharp_query+0x274>)
 800c62a:	4613      	mov	r3, r2
 800c62c:	005b      	lsls	r3, r3, #1
 800c62e:	4413      	add	r3, r2
 800c630:	00db      	lsls	r3, r3, #3
 800c632:	440b      	add	r3, r1
 800c634:	3314      	adds	r3, #20
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d16d      	bne.n	800c718 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c644:	e01a      	b.n	800c67c <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	895a      	ldrh	r2, [r3, #10]
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	891b      	ldrh	r3, [r3, #8]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d10a      	bne.n	800c668 <etharp_query+0x1b8>
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d006      	beq.n	800c668 <etharp_query+0x1b8>
 800c65a:	4b33      	ldr	r3, [pc, #204]	; (800c728 <etharp_query+0x278>)
 800c65c:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800c660:	4936      	ldr	r1, [pc, #216]	; (800c73c <etharp_query+0x28c>)
 800c662:	4833      	ldr	r0, [pc, #204]	; (800c730 <etharp_query+0x280>)
 800c664:	f001 fd60 	bl	800e128 <iprintf>
      if (p->type != PBUF_ROM) {
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	7b1b      	ldrb	r3, [r3, #12]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d002      	beq.n	800c676 <etharp_query+0x1c6>
        copy_needed = 1;
 800c670:	2301      	movs	r3, #1
 800c672:	61bb      	str	r3, [r7, #24]
        break;
 800c674:	e005      	b.n	800c682 <etharp_query+0x1d2>
      }
      p = p->next;
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1e1      	bne.n	800c646 <etharp_query+0x196>
    }
    if (copy_needed) {
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d017      	beq.n	800c6b8 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	891b      	ldrh	r3, [r3, #8]
 800c68c:	2200      	movs	r2, #0
 800c68e:	4619      	mov	r1, r3
 800c690:	2002      	movs	r0, #2
 800c692:	f7f8 ff7b 	bl	800558c <pbuf_alloc>
 800c696:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d011      	beq.n	800c6c2 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800c69e:	6879      	ldr	r1, [r7, #4]
 800c6a0:	69f8      	ldr	r0, [r7, #28]
 800c6a2:	f7f9 fc1f 	bl	8005ee4 <pbuf_copy>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00a      	beq.n	800c6c2 <etharp_query+0x212>
          pbuf_free(p);
 800c6ac:	69f8      	ldr	r0, [r7, #28]
 800c6ae:	f7f9 fae5 	bl	8005c7c <pbuf_free>
          p = NULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	61fb      	str	r3, [r7, #28]
 800c6b6:	e004      	b.n	800c6c2 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c6bc:	69f8      	ldr	r0, [r7, #28]
 800c6be:	f7f9 fb89 	bl	8005dd4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d024      	beq.n	800c712 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c6c8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c6cc:	4915      	ldr	r1, [pc, #84]	; (800c724 <etharp_query+0x274>)
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	4413      	add	r3, r2
 800c6d4:	00db      	lsls	r3, r3, #3
 800c6d6:	440b      	add	r3, r1
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00b      	beq.n	800c6f6 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800c6de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c6e2:	4910      	ldr	r1, [pc, #64]	; (800c724 <etharp_query+0x274>)
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	4413      	add	r3, r2
 800c6ea:	00db      	lsls	r3, r3, #3
 800c6ec:	440b      	add	r3, r1
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7f9 fac3 	bl	8005c7c <pbuf_free>
      }
      arp_table[i].q = p;
 800c6f6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c6fa:	490a      	ldr	r1, [pc, #40]	; (800c724 <etharp_query+0x274>)
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	4413      	add	r3, r2
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	440b      	add	r3, r1
 800c706:	69fa      	ldr	r2, [r7, #28]
 800c708:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c710:	e002      	b.n	800c718 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c712:	23ff      	movs	r3, #255	; 0xff
 800c714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3728      	adds	r7, #40	; 0x28
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	20006d70 	.word	0x20006d70
 800c728:	08010aac 	.word	0x08010aac
 800c72c:	08010c58 	.word	0x08010c58
 800c730:	08010b24 	.word	0x08010b24
 800c734:	08010c4c 	.word	0x08010c4c
 800c738:	20006e60 	.word	0x20006e60
 800c73c:	08010c80 	.word	0x08010c80

0800c740 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08a      	sub	sp, #40	; 0x28
 800c744:	af02      	add	r7, sp, #8
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c74e:	2300      	movs	r3, #0
 800c750:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d106      	bne.n	800c766 <etharp_raw+0x26>
 800c758:	4b3a      	ldr	r3, [pc, #232]	; (800c844 <etharp_raw+0x104>)
 800c75a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800c75e:	493a      	ldr	r1, [pc, #232]	; (800c848 <etharp_raw+0x108>)
 800c760:	483a      	ldr	r0, [pc, #232]	; (800c84c <etharp_raw+0x10c>)
 800c762:	f001 fce1 	bl	800e128 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c766:	2200      	movs	r2, #0
 800c768:	211c      	movs	r1, #28
 800c76a:	2002      	movs	r0, #2
 800c76c:	f7f8 ff0e 	bl	800558c <pbuf_alloc>
 800c770:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d102      	bne.n	800c77e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c778:	f04f 33ff 	mov.w	r3, #4294967295
 800c77c:	e05d      	b.n	800c83a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	895b      	ldrh	r3, [r3, #10]
 800c782:	2b1b      	cmp	r3, #27
 800c784:	d806      	bhi.n	800c794 <etharp_raw+0x54>
 800c786:	4b2f      	ldr	r3, [pc, #188]	; (800c844 <etharp_raw+0x104>)
 800c788:	f240 4263 	movw	r2, #1123	; 0x463
 800c78c:	4930      	ldr	r1, [pc, #192]	; (800c850 <etharp_raw+0x110>)
 800c78e:	482f      	ldr	r0, [pc, #188]	; (800c84c <etharp_raw+0x10c>)
 800c790:	f001 fcca 	bl	800e128 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c79a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7f8 f944 	bl	8004a2a <lwip_htons>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c7b0:	2b06      	cmp	r3, #6
 800c7b2:	d006      	beq.n	800c7c2 <etharp_raw+0x82>
 800c7b4:	4b23      	ldr	r3, [pc, #140]	; (800c844 <etharp_raw+0x104>)
 800c7b6:	f240 426a 	movw	r2, #1130	; 0x46a
 800c7ba:	4926      	ldr	r1, [pc, #152]	; (800c854 <etharp_raw+0x114>)
 800c7bc:	4823      	ldr	r0, [pc, #140]	; (800c84c <etharp_raw+0x10c>)
 800c7be:	f001 fcb3 	bl	800e128 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	3308      	adds	r3, #8
 800c7c6:	2206      	movs	r2, #6
 800c7c8:	6839      	ldr	r1, [r7, #0]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f001 fbb6 	bl	800df3c <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	3312      	adds	r3, #18
 800c7d4:	2206      	movs	r2, #6
 800c7d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f001 fbaf 	bl	800df3c <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	330e      	adds	r3, #14
 800c7e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7e4:	6812      	ldr	r2, [r2, #0]
 800c7e6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	3318      	adds	r3, #24
 800c7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ee:	6812      	ldr	r2, [r2, #0]
 800c7f0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	701a      	strb	r2, [r3, #0]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f042 0201 	orr.w	r2, r2, #1
 800c7fe:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	2200      	movs	r2, #0
 800c804:	f042 0208 	orr.w	r2, r2, #8
 800c808:	709a      	strb	r2, [r3, #2]
 800c80a:	2200      	movs	r2, #0
 800c80c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	2206      	movs	r2, #6
 800c812:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2204      	movs	r2, #4
 800c818:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c81a:	f640 0306 	movw	r3, #2054	; 0x806
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	69b9      	ldr	r1, [r7, #24]
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f001 fafc 	bl	800de24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c82c:	69b8      	ldr	r0, [r7, #24]
 800c82e:	f7f9 fa25 	bl	8005c7c <pbuf_free>
  p = NULL;
 800c832:	2300      	movs	r3, #0
 800c834:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c836:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3720      	adds	r7, #32
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	08010aac 	.word	0x08010aac
 800c848:	08010bfc 	.word	0x08010bfc
 800c84c:	08010b24 	.word	0x08010b24
 800c850:	08010c9c 	.word	0x08010c9c
 800c854:	08010cd0 	.word	0x08010cd0

0800c858 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af04      	add	r7, sp, #16
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c874:	2201      	movs	r2, #1
 800c876:	9203      	str	r2, [sp, #12]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	9202      	str	r2, [sp, #8]
 800c87c:	4a06      	ldr	r2, [pc, #24]	; (800c898 <etharp_request_dst+0x40>)
 800c87e:	9201      	str	r2, [sp, #4]
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	4603      	mov	r3, r0
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f7ff ff5a 	bl	800c740 <etharp_raw>
 800c88c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	08011214 	.word	0x08011214

0800c89c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c8a6:	4a05      	ldr	r2, [pc, #20]	; (800c8bc <etharp_request+0x20>)
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7ff ffd4 	bl	800c858 <etharp_request_dst>
 800c8b0:	4603      	mov	r3, r0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	0801120c 	.word	0x0801120c

0800c8c0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08e      	sub	sp, #56	; 0x38
 800c8c4:	af04      	add	r7, sp, #16
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c8ca:	4b7a      	ldr	r3, [pc, #488]	; (800cab4 <icmp_input+0x1f4>)
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	f003 030f 	and.w	r3, r3, #15
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c8e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8e2:	2b13      	cmp	r3, #19
 800c8e4:	f240 80d1 	bls.w	800ca8a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	895b      	ldrh	r3, [r3, #10]
 800c8ec:	2b03      	cmp	r3, #3
 800c8ee:	f240 80ce 	bls.w	800ca8e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c8fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 80bb 	beq.w	800ca7c <icmp_input+0x1bc>
 800c906:	2b08      	cmp	r3, #8
 800c908:	f040 80bb 	bne.w	800ca82 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c90c:	4b6a      	ldr	r3, [pc, #424]	; (800cab8 <icmp_input+0x1f8>)
 800c90e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c910:	4b68      	ldr	r3, [pc, #416]	; (800cab4 <icmp_input+0x1f4>)
 800c912:	695b      	ldr	r3, [r3, #20]
 800c914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c918:	2be0      	cmp	r3, #224	; 0xe0
 800c91a:	f000 80bf 	beq.w	800ca9c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c91e:	4b65      	ldr	r3, [pc, #404]	; (800cab4 <icmp_input+0x1f4>)
 800c920:	695b      	ldr	r3, [r3, #20]
 800c922:	4a64      	ldr	r2, [pc, #400]	; (800cab4 <icmp_input+0x1f4>)
 800c924:	6812      	ldr	r2, [r2, #0]
 800c926:	4611      	mov	r1, r2
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 fbd3 	bl	800d0d4 <ip4_addr_isbroadcast_u32>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	f040 80b5 	bne.w	800caa0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	891b      	ldrh	r3, [r3, #8]
 800c93a:	2b07      	cmp	r3, #7
 800c93c:	f240 80a9 	bls.w	800ca92 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c940:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c942:	330e      	adds	r3, #14
 800c944:	b29b      	uxth	r3, r3
 800c946:	b21b      	sxth	r3, r3
 800c948:	4619      	mov	r1, r3
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7f9 f972 	bl	8005c34 <pbuf_header>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d046      	beq.n	800c9e4 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	891a      	ldrh	r2, [r3, #8]
 800c95a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c95c:	4413      	add	r3, r2
 800c95e:	b29b      	uxth	r3, r3
 800c960:	2200      	movs	r2, #0
 800c962:	4619      	mov	r1, r3
 800c964:	2002      	movs	r0, #2
 800c966:	f7f8 fe11 	bl	800558c <pbuf_alloc>
 800c96a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f000 8098 	beq.w	800caa4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	895b      	ldrh	r3, [r3, #10]
 800c978:	461a      	mov	r2, r3
 800c97a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c97c:	3308      	adds	r3, #8
 800c97e:	429a      	cmp	r2, r3
 800c980:	d203      	bcs.n	800c98a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c982:	69b8      	ldr	r0, [r7, #24]
 800c984:	f7f9 f97a 	bl	8005c7c <pbuf_free>
        goto icmperr;
 800c988:	e08d      	b.n	800caa6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c992:	4618      	mov	r0, r3
 800c994:	f001 fad2 	bl	800df3c <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c998:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c99a:	425b      	negs	r3, r3
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	b21b      	sxth	r3, r3
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	69b8      	ldr	r0, [r7, #24]
 800c9a4:	f7f9 f946 	bl	8005c34 <pbuf_header>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d009      	beq.n	800c9c2 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c9ae:	4b43      	ldr	r3, [pc, #268]	; (800cabc <icmp_input+0x1fc>)
 800c9b0:	22af      	movs	r2, #175	; 0xaf
 800c9b2:	4943      	ldr	r1, [pc, #268]	; (800cac0 <icmp_input+0x200>)
 800c9b4:	4843      	ldr	r0, [pc, #268]	; (800cac4 <icmp_input+0x204>)
 800c9b6:	f001 fbb7 	bl	800e128 <iprintf>
        pbuf_free(r);
 800c9ba:	69b8      	ldr	r0, [r7, #24]
 800c9bc:	f7f9 f95e 	bl	8005c7c <pbuf_free>
        goto icmperr;
 800c9c0:	e071      	b.n	800caa6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c9c2:	6879      	ldr	r1, [r7, #4]
 800c9c4:	69b8      	ldr	r0, [r7, #24]
 800c9c6:	f7f9 fa8d 	bl	8005ee4 <pbuf_copy>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d003      	beq.n	800c9d8 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c9d0:	69b8      	ldr	r0, [r7, #24]
 800c9d2:	f7f9 f953 	bl	8005c7c <pbuf_free>
        goto icmperr;
 800c9d6:	e066      	b.n	800caa6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7f9 f94f 	bl	8005c7c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	607b      	str	r3, [r7, #4]
 800c9e2:	e015      	b.n	800ca10 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c9e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9e6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800c9ea:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c9ee:	33f2      	adds	r3, #242	; 0xf2
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	b21b      	sxth	r3, r3
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7f9 f91c 	bl	8005c34 <pbuf_header>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d006      	beq.n	800ca10 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ca02:	4b2e      	ldr	r3, [pc, #184]	; (800cabc <icmp_input+0x1fc>)
 800ca04:	22c0      	movs	r2, #192	; 0xc0
 800ca06:	4930      	ldr	r1, [pc, #192]	; (800cac8 <icmp_input+0x208>)
 800ca08:	482e      	ldr	r0, [pc, #184]	; (800cac4 <icmp_input+0x204>)
 800ca0a:	f001 fb8d 	bl	800e128 <iprintf>
        goto icmperr;
 800ca0e:	e04a      	b.n	800caa6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800ca16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7f9 f909 	bl	8005c34 <pbuf_header>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d12b      	bne.n	800ca80 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ca36:	4b1f      	ldr	r3, [pc, #124]	; (800cab4 <icmp_input+0x1f4>)
 800ca38:	691a      	ldr	r2, [r3, #16]
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	2200      	movs	r2, #0
 800ca42:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	2200      	movs	r2, #0
 800ca48:	709a      	strb	r2, [r3, #2]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	22ff      	movs	r2, #255	; 0xff
 800ca52:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	2200      	movs	r2, #0
 800ca58:	729a      	strb	r2, [r3, #10]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	9302      	str	r3, [sp, #8]
 800ca62:	2301      	movs	r3, #1
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	2300      	movs	r3, #0
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	23ff      	movs	r3, #255	; 0xff
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	69f9      	ldr	r1, [r7, #28]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 fa5d 	bl	800cf30 <ip4_output_if>
 800ca76:	4603      	mov	r3, r0
 800ca78:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800ca7a:	e001      	b.n	800ca80 <icmp_input+0x1c0>
    break;
 800ca7c:	bf00      	nop
 800ca7e:	e000      	b.n	800ca82 <icmp_input+0x1c2>
    break;
 800ca80:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7f9 f8fa 	bl	8005c7c <pbuf_free>
  return;
 800ca88:	e011      	b.n	800caae <icmp_input+0x1ee>
    goto lenerr;
 800ca8a:	bf00      	nop
 800ca8c:	e002      	b.n	800ca94 <icmp_input+0x1d4>
    goto lenerr;
 800ca8e:	bf00      	nop
 800ca90:	e000      	b.n	800ca94 <icmp_input+0x1d4>
      goto lenerr;
 800ca92:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7f9 f8f1 	bl	8005c7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ca9a:	e008      	b.n	800caae <icmp_input+0x1ee>
      goto icmperr;
 800ca9c:	bf00      	nop
 800ca9e:	e002      	b.n	800caa6 <icmp_input+0x1e6>
      goto icmperr;
 800caa0:	bf00      	nop
 800caa2:	e000      	b.n	800caa6 <icmp_input+0x1e6>
        goto icmperr;
 800caa4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7f9 f8e8 	bl	8005c7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800caac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800caae:	3728      	adds	r7, #40	; 0x28
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	200037b4 	.word	0x200037b4
 800cab8:	200037c8 	.word	0x200037c8
 800cabc:	08010d14 	.word	0x08010d14
 800cac0:	08010d4c 	.word	0x08010d4c
 800cac4:	08010d84 	.word	0x08010d84
 800cac8:	08010dac 	.word	0x08010dac

0800cacc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	460b      	mov	r3, r1
 800cad6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cad8:	78fb      	ldrb	r3, [r7, #3]
 800cada:	461a      	mov	r2, r3
 800cadc:	2103      	movs	r1, #3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 f814 	bl	800cb0c <icmp_send_response>
}
 800cae4:	bf00      	nop
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	460b      	mov	r3, r1
 800caf6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800caf8:	78fb      	ldrb	r3, [r7, #3]
 800cafa:	461a      	mov	r2, r3
 800cafc:	210b      	movs	r1, #11
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 f804 	bl	800cb0c <icmp_send_response>
}
 800cb04:	bf00      	nop
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b08c      	sub	sp, #48	; 0x30
 800cb10:	af04      	add	r7, sp, #16
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	460b      	mov	r3, r1
 800cb16:	70fb      	strb	r3, [r7, #3]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	2124      	movs	r1, #36	; 0x24
 800cb20:	2001      	movs	r0, #1
 800cb22:	f7f8 fd33 	bl	800558c <pbuf_alloc>
 800cb26:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d04c      	beq.n	800cbc8 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	895b      	ldrh	r3, [r3, #10]
 800cb32:	2b23      	cmp	r3, #35	; 0x23
 800cb34:	d806      	bhi.n	800cb44 <icmp_send_response+0x38>
 800cb36:	4b26      	ldr	r3, [pc, #152]	; (800cbd0 <icmp_send_response+0xc4>)
 800cb38:	f240 1261 	movw	r2, #353	; 0x161
 800cb3c:	4925      	ldr	r1, [pc, #148]	; (800cbd4 <icmp_send_response+0xc8>)
 800cb3e:	4826      	ldr	r0, [pc, #152]	; (800cbd8 <icmp_send_response+0xcc>)
 800cb40:	f001 faf2 	bl	800e128 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	78fa      	ldrb	r2, [r7, #3]
 800cb54:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	78ba      	ldrb	r2, [r7, #2]
 800cb5a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	711a      	strb	r2, [r3, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	719a      	strb	r2, [r3, #6]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	f103 0008 	add.w	r0, r3, #8
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	221c      	movs	r2, #28
 800cb7e:	4619      	mov	r1, r3
 800cb80:	f001 f9dc 	bl	800df3c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cb8a:	f107 030c 	add.w	r3, r7, #12
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f000 f824 	bl	800cbdc <ip4_route>
 800cb94:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d011      	beq.n	800cbc0 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	709a      	strb	r2, [r3, #2]
 800cba2:	2200      	movs	r2, #0
 800cba4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cba6:	f107 020c 	add.w	r2, r7, #12
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	9302      	str	r3, [sp, #8]
 800cbae:	2301      	movs	r3, #1
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	23ff      	movs	r3, #255	; 0xff
 800cbb8:	2100      	movs	r1, #0
 800cbba:	69f8      	ldr	r0, [r7, #28]
 800cbbc:	f000 f9b8 	bl	800cf30 <ip4_output_if>
  }
  pbuf_free(q);
 800cbc0:	69f8      	ldr	r0, [r7, #28]
 800cbc2:	f7f9 f85b 	bl	8005c7c <pbuf_free>
 800cbc6:	e000      	b.n	800cbca <icmp_send_response+0xbe>
    return;
 800cbc8:	bf00      	nop
}
 800cbca:	3720      	adds	r7, #32
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	08010d14 	.word	0x08010d14
 800cbd4:	08010de0 	.word	0x08010de0
 800cbd8:	08010d84 	.word	0x08010d84

0800cbdc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800cbe4:	4b30      	ldr	r3, [pc, #192]	; (800cca8 <ip4_route+0xcc>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	60fb      	str	r3, [r7, #12]
 800cbea:	e036      	b.n	800cc5a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cbf2:	f003 0301 	and.w	r3, r3, #1
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d02b      	beq.n	800cc54 <ip4_route+0x78>
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cc02:	089b      	lsrs	r3, r3, #2
 800cc04:	f003 0301 	and.w	r3, r3, #1
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d022      	beq.n	800cc54 <ip4_route+0x78>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3304      	adds	r3, #4
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01d      	beq.n	800cc54 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3304      	adds	r3, #4
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	405a      	eors	r2, r3
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3308      	adds	r3, #8
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d101      	bne.n	800cc34 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	e033      	b.n	800cc9c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cc3a:	f003 0302 	and.w	r3, r3, #2
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d108      	bne.n	800cc54 <ip4_route+0x78>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	330c      	adds	r3, #12
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d101      	bne.n	800cc54 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	e023      	b.n	800cc9c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d1c5      	bne.n	800cbec <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cc60:	4b12      	ldr	r3, [pc, #72]	; (800ccac <ip4_route+0xd0>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d015      	beq.n	800cc94 <ip4_route+0xb8>
 800cc68:	4b10      	ldr	r3, [pc, #64]	; (800ccac <ip4_route+0xd0>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00d      	beq.n	800cc94 <ip4_route+0xb8>
 800cc78:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <ip4_route+0xd0>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cc80:	f003 0304 	and.w	r3, r3, #4
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d005      	beq.n	800cc94 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800cc88:	4b08      	ldr	r3, [pc, #32]	; (800ccac <ip4_route+0xd0>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	e001      	b.n	800cc9c <ip4_route+0xc0>
  }

  return netif_default;
 800cc98:	4b04      	ldr	r3, [pc, #16]	; (800ccac <ip4_route+0xd0>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3714      	adds	r7, #20
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	20006d04 	.word	0x20006d04
 800ccac:	20006d08 	.word	0x20006d08

0800ccb0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	091b      	lsrs	r3, r3, #4
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b04      	cmp	r3, #4
 800ccca:	d004      	beq.n	800ccd6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f7f8 ffd5 	bl	8005c7c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	e124      	b.n	800cf20 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	f003 030f 	and.w	r3, r3, #15
 800cce0:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800cce2:	897b      	ldrh	r3, [r7, #10]
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	885b      	ldrh	r3, [r3, #2]
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7f7 fe9b 	bl	8004a2a <lwip_htons>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	891b      	ldrh	r3, [r3, #8]
 800ccfc:	893a      	ldrh	r2, [r7, #8]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d204      	bcs.n	800cd0c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800cd02:	893b      	ldrh	r3, [r7, #8]
 800cd04:	4619      	mov	r1, r3
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f7f8 fe44 	bl	8005994 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	895b      	ldrh	r3, [r3, #10]
 800cd10:	897a      	ldrh	r2, [r7, #10]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d807      	bhi.n	800cd26 <ip4_input+0x76>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	891b      	ldrh	r3, [r3, #8]
 800cd1a:	893a      	ldrh	r2, [r7, #8]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d802      	bhi.n	800cd26 <ip4_input+0x76>
 800cd20:	897b      	ldrh	r3, [r7, #10]
 800cd22:	2b13      	cmp	r3, #19
 800cd24:	d804      	bhi.n	800cd30 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f7f8 ffa8 	bl	8005c7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	e0f7      	b.n	800cf20 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	4a7c      	ldr	r2, [pc, #496]	; (800cf28 <ip4_input+0x278>)
 800cd36:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	4a7a      	ldr	r2, [pc, #488]	; (800cf28 <ip4_input+0x278>)
 800cd3e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cd40:	4b79      	ldr	r3, [pc, #484]	; (800cf28 <ip4_input+0x278>)
 800cd42:	695b      	ldr	r3, [r3, #20]
 800cd44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd48:	2be0      	cmp	r3, #224	; 0xe0
 800cd4a:	d112      	bne.n	800cd72 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d007      	beq.n	800cd6c <ip4_input+0xbc>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	3304      	adds	r3, #4
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d002      	beq.n	800cd6c <ip4_input+0xbc>
      netif = inp;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	613b      	str	r3, [r7, #16]
 800cd6a:	e041      	b.n	800cdf0 <ip4_input+0x140>
    } else {
      netif = NULL;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	613b      	str	r3, [r7, #16]
 800cd70:	e03e      	b.n	800cdf0 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800cd72:	2301      	movs	r3, #1
 800cd74:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d014      	beq.n	800cdb4 <ip4_input+0x104>
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00f      	beq.n	800cdb4 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cd94:	4b64      	ldr	r3, [pc, #400]	; (800cf28 <ip4_input+0x278>)
 800cd96:	695a      	ldr	r2, [r3, #20]
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d026      	beq.n	800cdf0 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cda2:	4b61      	ldr	r3, [pc, #388]	; (800cf28 <ip4_input+0x278>)
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	6939      	ldr	r1, [r7, #16]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 f993 	bl	800d0d4 <ip4_addr_isbroadcast_u32>
 800cdae:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d11d      	bne.n	800cdf0 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00d      	beq.n	800cdd6 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800cdba:	4b5b      	ldr	r3, [pc, #364]	; (800cf28 <ip4_input+0x278>)
 800cdbc:	695b      	ldr	r3, [r3, #20]
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	2b7f      	cmp	r3, #127	; 0x7f
 800cdc2:	d102      	bne.n	800cdca <ip4_input+0x11a>
          netif = NULL;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	613b      	str	r3, [r7, #16]
          break;
 800cdc8:	e012      	b.n	800cdf0 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800cdce:	4b57      	ldr	r3, [pc, #348]	; (800cf2c <ip4_input+0x27c>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	613b      	str	r3, [r7, #16]
 800cdd4:	e002      	b.n	800cddc <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800cddc:	693a      	ldr	r2, [r7, #16]
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d102      	bne.n	800cdea <ip4_input+0x13a>
        netif = netif->next;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1c4      	bne.n	800cd7a <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cdf0:	4b4d      	ldr	r3, [pc, #308]	; (800cf28 <ip4_input+0x278>)
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 f96c 	bl	800d0d4 <ip4_addr_isbroadcast_u32>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d105      	bne.n	800ce0e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ce02:	4b49      	ldr	r3, [pc, #292]	; (800cf28 <ip4_input+0x278>)
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ce0a:	2be0      	cmp	r3, #224	; 0xe0
 800ce0c:	d104      	bne.n	800ce18 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7f8 ff34 	bl	8005c7c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	e083      	b.n	800cf20 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d104      	bne.n	800ce28 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7f8 ff2c 	bl	8005c7c <pbuf_free>
    return ERR_OK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	e07b      	b.n	800cf20 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	88db      	ldrh	r3, [r3, #6]
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ce34:	4013      	ands	r3, r2
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00b      	beq.n	800ce52 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fc90 	bl	800d760 <ip4_reass>
 800ce40:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d101      	bne.n	800ce4c <ip4_input+0x19c>
      return ERR_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	e069      	b.n	800cf20 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ce52:	4a35      	ldr	r2, [pc, #212]	; (800cf28 <ip4_input+0x278>)
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ce58:	4a33      	ldr	r2, [pc, #204]	; (800cf28 <ip4_input+0x278>)
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ce5e:	4a32      	ldr	r2, [pc, #200]	; (800cf28 <ip4_input+0x278>)
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	f003 030f 	and.w	r3, r3, #15
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	4b2c      	ldr	r3, [pc, #176]	; (800cf28 <ip4_input+0x278>)
 800ce76:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800ce78:	897b      	ldrh	r3, [r7, #10]
 800ce7a:	425b      	negs	r3, r3
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	b21b      	sxth	r3, r3
 800ce80:	4619      	mov	r1, r3
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7f8 fed6 	bl	8005c34 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	7a5b      	ldrb	r3, [r3, #9]
 800ce8c:	2b11      	cmp	r3, #17
 800ce8e:	d006      	beq.n	800ce9e <ip4_input+0x1ee>
 800ce90:	2b11      	cmp	r3, #17
 800ce92:	dc13      	bgt.n	800cebc <ip4_input+0x20c>
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d00c      	beq.n	800ceb2 <ip4_input+0x202>
 800ce98:	2b06      	cmp	r3, #6
 800ce9a:	d005      	beq.n	800cea8 <ip4_input+0x1f8>
 800ce9c:	e00e      	b.n	800cebc <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7fe fce1 	bl	800b868 <udp_input>
      break;
 800cea6:	e028      	b.n	800cefa <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7fa fd94 	bl	80079d8 <tcp_input>
      break;
 800ceb0:	e023      	b.n	800cefa <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ceb2:	6839      	ldr	r1, [r7, #0]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7ff fd03 	bl	800c8c0 <icmp_input>
      break;
 800ceba:	e01e      	b.n	800cefa <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cebc:	4b1a      	ldr	r3, [pc, #104]	; (800cf28 <ip4_input+0x278>)
 800cebe:	695b      	ldr	r3, [r3, #20]
 800cec0:	6939      	ldr	r1, [r7, #16]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 f906 	bl	800d0d4 <ip4_addr_isbroadcast_u32>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d112      	bne.n	800cef4 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cece:	4b16      	ldr	r3, [pc, #88]	; (800cf28 <ip4_input+0x278>)
 800ced0:	695b      	ldr	r3, [r3, #20]
 800ced2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ced6:	2be0      	cmp	r3, #224	; 0xe0
 800ced8:	d00c      	beq.n	800cef4 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ceda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cede:	4619      	mov	r1, r3
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7f8 feb9 	bl	8005c58 <pbuf_header_force>
        p->payload = iphdr;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	697a      	ldr	r2, [r7, #20]
 800ceea:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ceec:	2102      	movs	r1, #2
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7ff fdec 	bl	800cacc <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7f8 fec1 	bl	8005c7c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cefa:	4b0b      	ldr	r3, [pc, #44]	; (800cf28 <ip4_input+0x278>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cf00:	4b09      	ldr	r3, [pc, #36]	; (800cf28 <ip4_input+0x278>)
 800cf02:	2200      	movs	r2, #0
 800cf04:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cf06:	4b08      	ldr	r3, [pc, #32]	; (800cf28 <ip4_input+0x278>)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cf0c:	4b06      	ldr	r3, [pc, #24]	; (800cf28 <ip4_input+0x278>)
 800cf0e:	2200      	movs	r2, #0
 800cf10:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cf12:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <ip4_input+0x278>)
 800cf14:	2200      	movs	r2, #0
 800cf16:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cf18:	4b03      	ldr	r3, [pc, #12]	; (800cf28 <ip4_input+0x278>)
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3718      	adds	r7, #24
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	200037b4 	.word	0x200037b4
 800cf2c:	20006d04 	.word	0x20006d04

0800cf30 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b08a      	sub	sp, #40	; 0x28
 800cf34:	af04      	add	r7, sp, #16
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
 800cf3c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d009      	beq.n	800cf5c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d003      	beq.n	800cf56 <ip4_output_if+0x26>
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d102      	bne.n	800cf5c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf58:	3304      	adds	r3, #4
 800cf5a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cf5c:	78fa      	ldrb	r2, [r7, #3]
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	9302      	str	r3, [sp, #8]
 800cf62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cf66:	9301      	str	r3, [sp, #4]
 800cf68:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	6979      	ldr	r1, [r7, #20]
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f000 f805 	bl	800cf84 <ip4_output_if_src>
 800cf7a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3718      	adds	r7, #24
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b088      	sub	sp, #32
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
 800cf90:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	89db      	ldrh	r3, [r3, #14]
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d006      	beq.n	800cfa8 <ip4_output_if_src+0x24>
 800cf9a:	4b48      	ldr	r3, [pc, #288]	; (800d0bc <ip4_output_if_src+0x138>)
 800cf9c:	f240 3233 	movw	r2, #819	; 0x333
 800cfa0:	4947      	ldr	r1, [pc, #284]	; (800d0c0 <ip4_output_if_src+0x13c>)
 800cfa2:	4848      	ldr	r0, [pc, #288]	; (800d0c4 <ip4_output_if_src+0x140>)
 800cfa4:	f001 f8c0 	bl	800e128 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d060      	beq.n	800d070 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cfae:	2314      	movs	r3, #20
 800cfb0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800cfb2:	2114      	movs	r1, #20
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f7f8 fe3d 	bl	8005c34 <pbuf_header>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cfc0:	f06f 0301 	mvn.w	r3, #1
 800cfc4:	e075      	b.n	800d0b2 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	895b      	ldrh	r3, [r3, #10]
 800cfd0:	2b13      	cmp	r3, #19
 800cfd2:	d806      	bhi.n	800cfe2 <ip4_output_if_src+0x5e>
 800cfd4:	4b39      	ldr	r3, [pc, #228]	; (800d0bc <ip4_output_if_src+0x138>)
 800cfd6:	f44f 7258 	mov.w	r2, #864	; 0x360
 800cfda:	493b      	ldr	r1, [pc, #236]	; (800d0c8 <ip4_output_if_src+0x144>)
 800cfdc:	4839      	ldr	r0, [pc, #228]	; (800d0c4 <ip4_output_if_src+0x140>)
 800cfde:	f001 f8a3 	bl	800e128 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	78fa      	ldrb	r2, [r7, #3]
 800cfe6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800cfee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cff8:	8b7b      	ldrh	r3, [r7, #26]
 800cffa:	089b      	lsrs	r3, r3, #2
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d004:	b2da      	uxtb	r2, r3
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d010:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	891b      	ldrh	r3, [r3, #8]
 800d016:	4618      	mov	r0, r3
 800d018:	f7f7 fd07 	bl	8004a2a <lwip_htons>
 800d01c:	4603      	mov	r3, r0
 800d01e:	461a      	mov	r2, r3
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	2200      	movs	r2, #0
 800d028:	719a      	strb	r2, [r3, #6]
 800d02a:	2200      	movs	r2, #0
 800d02c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d02e:	4b27      	ldr	r3, [pc, #156]	; (800d0cc <ip4_output_if_src+0x148>)
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	4618      	mov	r0, r3
 800d034:	f7f7 fcf9 	bl	8004a2a <lwip_htons>
 800d038:	4603      	mov	r3, r0
 800d03a:	461a      	mov	r2, r3
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d040:	4b22      	ldr	r3, [pc, #136]	; (800d0cc <ip4_output_if_src+0x148>)
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	3301      	adds	r3, #1
 800d046:	b29a      	uxth	r2, r3
 800d048:	4b20      	ldr	r3, [pc, #128]	; (800d0cc <ip4_output_if_src+0x148>)
 800d04a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d104      	bne.n	800d05c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d052:	4b1f      	ldr	r3, [pc, #124]	; (800d0d0 <ip4_output_if_src+0x14c>)
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	60da      	str	r2, [r3, #12]
 800d05a:	e003      	b.n	800d064 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	2200      	movs	r2, #0
 800d068:	729a      	strb	r2, [r3, #10]
 800d06a:	2200      	movs	r2, #0
 800d06c:	72da      	strb	r2, [r3, #11]
 800d06e:	e008      	b.n	800d082 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	691b      	ldr	r3, [r3, #16]
 800d07a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d07c:	f107 0314 	add.w	r3, r7, #20
 800d080:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d084:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00c      	beq.n	800d0a4 <ip4_output_if_src+0x120>
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	891a      	ldrh	r2, [r3, #8]
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d092:	429a      	cmp	r2, r3
 800d094:	d906      	bls.n	800d0a4 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d09a:	68f8      	ldr	r0, [r7, #12]
 800d09c:	f000 fd0c 	bl	800dab8 <ip4_frag>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	e006      	b.n	800d0b2 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a6:	695b      	ldr	r3, [r3, #20]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	68f9      	ldr	r1, [r7, #12]
 800d0ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0ae:	4798      	blx	r3
 800d0b0:	4603      	mov	r3, r0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3720      	adds	r7, #32
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	08010e0c 	.word	0x08010e0c
 800d0c0:	08010e40 	.word	0x08010e40
 800d0c4:	08010e4c 	.word	0x08010e4c
 800d0c8:	08010e74 	.word	0x08010e74
 800d0cc:	20006e62 	.word	0x20006e62
 800d0d0:	08011208 	.word	0x08011208

0800d0d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e8:	d002      	beq.n	800d0f0 <ip4_addr_isbroadcast_u32+0x1c>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d101      	bne.n	800d0f4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e02a      	b.n	800d14a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d0fa:	f003 0302 	and.w	r3, r3, #2
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d102:	2300      	movs	r3, #0
 800d104:	e021      	b.n	800d14a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	3304      	adds	r3, #4
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d101      	bne.n	800d116 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d112:	2300      	movs	r3, #0
 800d114:	e019      	b.n	800d14a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	3304      	adds	r3, #4
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	405a      	eors	r2, r3
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	3308      	adds	r3, #8
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4013      	ands	r3, r2
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10d      	bne.n	800d148 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	3308      	adds	r3, #8
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	43da      	mvns	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	3308      	adds	r3, #8
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d140:	429a      	cmp	r2, r3
 800d142:	d101      	bne.n	800d148 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d144:	2301      	movs	r3, #1
 800d146:	e000      	b.n	800d14a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d148:	2300      	movs	r3, #0
  }
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3714      	adds	r7, #20
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
	...

0800d158 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d15e:	2300      	movs	r3, #0
 800d160:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d162:	4b12      	ldr	r3, [pc, #72]	; (800d1ac <ip_reass_tmr+0x54>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d168:	e018      	b.n	800d19c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	7fdb      	ldrb	r3, [r3, #31]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00b      	beq.n	800d18a <ip_reass_tmr+0x32>
      r->timer--;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	7fdb      	ldrb	r3, [r3, #31]
 800d176:	3b01      	subs	r3, #1
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	60fb      	str	r3, [r7, #12]
 800d188:	e008      	b.n	800d19c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d194:	68b9      	ldr	r1, [r7, #8]
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 f80a 	bl	800d1b0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d1e3      	bne.n	800d16a <ip_reass_tmr+0x12>
     }
   }
}
 800d1a2:	bf00      	nop
 800d1a4:	bf00      	nop
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	20006e64 	.word	0x20006e64

0800d1b0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b088      	sub	sp, #32
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d105      	bne.n	800d1d2 <ip_reass_free_complete_datagram+0x22>
 800d1c6:	4b45      	ldr	r3, [pc, #276]	; (800d2dc <ip_reass_free_complete_datagram+0x12c>)
 800d1c8:	22ab      	movs	r2, #171	; 0xab
 800d1ca:	4945      	ldr	r1, [pc, #276]	; (800d2e0 <ip_reass_free_complete_datagram+0x130>)
 800d1cc:	4845      	ldr	r0, [pc, #276]	; (800d2e4 <ip_reass_free_complete_datagram+0x134>)
 800d1ce:	f000 ffab 	bl	800e128 <iprintf>
  if (prev != NULL) {
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00a      	beq.n	800d1ee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d005      	beq.n	800d1ee <ip_reass_free_complete_datagram+0x3e>
 800d1e2:	4b3e      	ldr	r3, [pc, #248]	; (800d2dc <ip_reass_free_complete_datagram+0x12c>)
 800d1e4:	22ad      	movs	r2, #173	; 0xad
 800d1e6:	4940      	ldr	r1, [pc, #256]	; (800d2e8 <ip_reass_free_complete_datagram+0x138>)
 800d1e8:	483e      	ldr	r0, [pc, #248]	; (800d2e4 <ip_reass_free_complete_datagram+0x134>)
 800d1ea:	f000 ff9d 	bl	800e128 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	889b      	ldrh	r3, [r3, #4]
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d12a      	bne.n	800d256 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	6858      	ldr	r0, [r3, #4]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	3308      	adds	r3, #8
 800d216:	2214      	movs	r2, #20
 800d218:	4619      	mov	r1, r3
 800d21a:	f000 fe8f 	bl	800df3c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d21e:	2101      	movs	r1, #1
 800d220:	69b8      	ldr	r0, [r7, #24]
 800d222:	f7ff fc63 	bl	800caec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d226:	69b8      	ldr	r0, [r7, #24]
 800d228:	f7f8 fdbc 	bl	8005da4 <pbuf_clen>
 800d22c:	4603      	mov	r3, r0
 800d22e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d230:	8bfa      	ldrh	r2, [r7, #30]
 800d232:	8a7b      	ldrh	r3, [r7, #18]
 800d234:	4413      	add	r3, r2
 800d236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d23a:	db05      	blt.n	800d248 <ip_reass_free_complete_datagram+0x98>
 800d23c:	4b27      	ldr	r3, [pc, #156]	; (800d2dc <ip_reass_free_complete_datagram+0x12c>)
 800d23e:	22bc      	movs	r2, #188	; 0xbc
 800d240:	492a      	ldr	r1, [pc, #168]	; (800d2ec <ip_reass_free_complete_datagram+0x13c>)
 800d242:	4828      	ldr	r0, [pc, #160]	; (800d2e4 <ip_reass_free_complete_datagram+0x134>)
 800d244:	f000 ff70 	bl	800e128 <iprintf>
    pbufs_freed += clen;
 800d248:	8bfa      	ldrh	r2, [r7, #30]
 800d24a:	8a7b      	ldrh	r3, [r7, #18]
 800d24c:	4413      	add	r3, r2
 800d24e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d250:	69b8      	ldr	r0, [r7, #24]
 800d252:	f7f8 fd13 	bl	8005c7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d25c:	e01f      	b.n	800d29e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f7f8 fd98 	bl	8005da4 <pbuf_clen>
 800d274:	4603      	mov	r3, r0
 800d276:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d278:	8bfa      	ldrh	r2, [r7, #30]
 800d27a:	8a7b      	ldrh	r3, [r7, #18]
 800d27c:	4413      	add	r3, r2
 800d27e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d282:	db05      	blt.n	800d290 <ip_reass_free_complete_datagram+0xe0>
 800d284:	4b15      	ldr	r3, [pc, #84]	; (800d2dc <ip_reass_free_complete_datagram+0x12c>)
 800d286:	22cc      	movs	r2, #204	; 0xcc
 800d288:	4918      	ldr	r1, [pc, #96]	; (800d2ec <ip_reass_free_complete_datagram+0x13c>)
 800d28a:	4816      	ldr	r0, [pc, #88]	; (800d2e4 <ip_reass_free_complete_datagram+0x134>)
 800d28c:	f000 ff4c 	bl	800e128 <iprintf>
    pbufs_freed += clen;
 800d290:	8bfa      	ldrh	r2, [r7, #30]
 800d292:	8a7b      	ldrh	r3, [r7, #18]
 800d294:	4413      	add	r3, r2
 800d296:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f7f8 fcef 	bl	8005c7c <pbuf_free>
  while (p != NULL) {
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1dc      	bne.n	800d25e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 f8c2 	bl	800d430 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800d2ac:	4b10      	ldr	r3, [pc, #64]	; (800d2f0 <ip_reass_free_complete_datagram+0x140>)
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	8bfa      	ldrh	r2, [r7, #30]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d905      	bls.n	800d2c2 <ip_reass_free_complete_datagram+0x112>
 800d2b6:	4b09      	ldr	r3, [pc, #36]	; (800d2dc <ip_reass_free_complete_datagram+0x12c>)
 800d2b8:	22d2      	movs	r2, #210	; 0xd2
 800d2ba:	490e      	ldr	r1, [pc, #56]	; (800d2f4 <ip_reass_free_complete_datagram+0x144>)
 800d2bc:	4809      	ldr	r0, [pc, #36]	; (800d2e4 <ip_reass_free_complete_datagram+0x134>)
 800d2be:	f000 ff33 	bl	800e128 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800d2c2:	4b0b      	ldr	r3, [pc, #44]	; (800d2f0 <ip_reass_free_complete_datagram+0x140>)
 800d2c4:	881a      	ldrh	r2, [r3, #0]
 800d2c6:	8bfb      	ldrh	r3, [r7, #30]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	4b08      	ldr	r3, [pc, #32]	; (800d2f0 <ip_reass_free_complete_datagram+0x140>)
 800d2ce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d2d0:	8bfb      	ldrh	r3, [r7, #30]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3720      	adds	r7, #32
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	08010ea4 	.word	0x08010ea4
 800d2e0:	08010ee0 	.word	0x08010ee0
 800d2e4:	08010eec 	.word	0x08010eec
 800d2e8:	08010f14 	.word	0x08010f14
 800d2ec:	08010f28 	.word	0x08010f28
 800d2f0:	20006e68 	.word	0x20006e68
 800d2f4:	08010f48 	.word	0x08010f48

0800d2f8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b08a      	sub	sp, #40	; 0x28
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d302:	2300      	movs	r3, #0
 800d304:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d306:	2300      	movs	r3, #0
 800d308:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d30a:	2300      	movs	r3, #0
 800d30c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d30e:	2300      	movs	r3, #0
 800d310:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d316:	4b28      	ldr	r3, [pc, #160]	; (800d3b8 <ip_reass_remove_oldest_datagram+0xc0>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d31c:	e030      	b.n	800d380 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d320:	695a      	ldr	r2, [r3, #20]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	429a      	cmp	r2, r3
 800d328:	d10c      	bne.n	800d344 <ip_reass_remove_oldest_datagram+0x4c>
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32c:	699a      	ldr	r2, [r3, #24]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	429a      	cmp	r2, r3
 800d334:	d106      	bne.n	800d344 <ip_reass_remove_oldest_datagram+0x4c>
 800d336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d338:	899a      	ldrh	r2, [r3, #12]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	889b      	ldrh	r3, [r3, #4]
 800d33e:	b29b      	uxth	r3, r3
 800d340:	429a      	cmp	r2, r3
 800d342:	d014      	beq.n	800d36e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	3301      	adds	r3, #1
 800d348:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d34a:	6a3b      	ldr	r3, [r7, #32]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d104      	bne.n	800d35a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	61bb      	str	r3, [r7, #24]
 800d358:	e009      	b.n	800d36e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35c:	7fda      	ldrb	r2, [r3, #31]
 800d35e:	6a3b      	ldr	r3, [r7, #32]
 800d360:	7fdb      	ldrb	r3, [r3, #31]
 800d362:	429a      	cmp	r2, r3
 800d364:	d803      	bhi.n	800d36e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d368:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d001      	beq.n	800d37a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d378:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	2b00      	cmp	r3, #0
 800d384:	d1cb      	bne.n	800d31e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d386:	6a3b      	ldr	r3, [r7, #32]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d008      	beq.n	800d39e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d38c:	69b9      	ldr	r1, [r7, #24]
 800d38e:	6a38      	ldr	r0, [r7, #32]
 800d390:	f7ff ff0e 	bl	800d1b0 <ip_reass_free_complete_datagram>
 800d394:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d396:	697a      	ldr	r2, [r7, #20]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	4413      	add	r3, r2
 800d39c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d39e:	697a      	ldr	r2, [r7, #20]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	da02      	bge.n	800d3ac <ip_reass_remove_oldest_datagram+0xb4>
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	dcac      	bgt.n	800d306 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d3ac:	697b      	ldr	r3, [r7, #20]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3728      	adds	r7, #40	; 0x28
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20006e64 	.word	0x20006e64

0800d3bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d3c6:	2004      	movs	r0, #4
 800d3c8:	f7f7 fedc 	bl	8005184 <memp_malloc>
 800d3cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d110      	bne.n	800d3f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d3d4:	6839      	ldr	r1, [r7, #0]
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7ff ff8e 	bl	800d2f8 <ip_reass_remove_oldest_datagram>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	dc03      	bgt.n	800d3ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d3e4:	2004      	movs	r0, #4
 800d3e6:	f7f7 fecd 	bl	8005184 <memp_malloc>
 800d3ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d101      	bne.n	800d3f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	e016      	b.n	800d424 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d3f6:	2220      	movs	r2, #32
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f000 fdac 	bl	800df58 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2203      	movs	r2, #3
 800d404:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d406:	4b09      	ldr	r3, [pc, #36]	; (800d42c <ip_reass_enqueue_new_datagram+0x70>)
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d40e:	4a07      	ldr	r2, [pc, #28]	; (800d42c <ip_reass_enqueue_new_datagram+0x70>)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	3308      	adds	r3, #8
 800d418:	2214      	movs	r2, #20
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f000 fd8d 	bl	800df3c <memcpy>
  return ipr;
 800d422:	68fb      	ldr	r3, [r7, #12]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	20006e64 	.word	0x20006e64

0800d430 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d43a:	4b10      	ldr	r3, [pc, #64]	; (800d47c <ip_reass_dequeue_datagram+0x4c>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	429a      	cmp	r2, r3
 800d442:	d104      	bne.n	800d44e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a0c      	ldr	r2, [pc, #48]	; (800d47c <ip_reass_dequeue_datagram+0x4c>)
 800d44a:	6013      	str	r3, [r2, #0]
 800d44c:	e00d      	b.n	800d46a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d106      	bne.n	800d462 <ip_reass_dequeue_datagram+0x32>
 800d454:	4b0a      	ldr	r3, [pc, #40]	; (800d480 <ip_reass_dequeue_datagram+0x50>)
 800d456:	f240 1245 	movw	r2, #325	; 0x145
 800d45a:	490a      	ldr	r1, [pc, #40]	; (800d484 <ip_reass_dequeue_datagram+0x54>)
 800d45c:	480a      	ldr	r0, [pc, #40]	; (800d488 <ip_reass_dequeue_datagram+0x58>)
 800d45e:	f000 fe63 	bl	800e128 <iprintf>
    prev->next = ipr->next;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681a      	ldr	r2, [r3, #0]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d46a:	6879      	ldr	r1, [r7, #4]
 800d46c:	2004      	movs	r0, #4
 800d46e:	f7f7 fed5 	bl	800521c <memp_free>
}
 800d472:	bf00      	nop
 800d474:	3708      	adds	r7, #8
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20006e64 	.word	0x20006e64
 800d480:	08010ea4 	.word	0x08010ea4
 800d484:	08010f64 	.word	0x08010f64
 800d488:	08010eec 	.word	0x08010eec

0800d48c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b08c      	sub	sp, #48	; 0x30
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800d498:	2300      	movs	r3, #0
 800d49a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d49c:	2301      	movs	r3, #1
 800d49e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	885b      	ldrh	r3, [r3, #2]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7f7 fabc 	bl	8004a2a <lwip_htons>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	f003 030f 	and.w	r3, r3, #15
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	88db      	ldrh	r3, [r3, #6]
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7f7 faaa 	bl	8004a2a <lwip_htons>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	701a      	strb	r2, [r3, #0]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	705a      	strb	r2, [r3, #1]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	709a      	strb	r2, [r3, #2]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fc:	8b3a      	ldrh	r2, [r7, #24]
 800d4fe:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800d500:	8b3a      	ldrh	r2, [r7, #24]
 800d502:	8b7b      	ldrh	r3, [r7, #26]
 800d504:	4413      	add	r3, r2
 800d506:	b29a      	uxth	r2, r3
 800d508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50a:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	627b      	str	r3, [r7, #36]	; 0x24
 800d512:	e061      	b.n	800d5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800d51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51c:	889b      	ldrh	r3, [r3, #4]
 800d51e:	b29a      	uxth	r2, r3
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	889b      	ldrh	r3, [r3, #4]
 800d524:	b29b      	uxth	r3, r3
 800d526:	429a      	cmp	r2, r3
 800d528:	d232      	bcs.n	800d590 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d52e:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d532:	2b00      	cmp	r3, #0
 800d534:	d01f      	beq.n	800d576 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	889b      	ldrh	r3, [r3, #4]
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53e:	88db      	ldrh	r3, [r3, #6]
 800d540:	b29b      	uxth	r3, r3
 800d542:	429a      	cmp	r2, r3
 800d544:	f0c0 80e3 	bcc.w	800d70e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	88db      	ldrh	r3, [r3, #6]
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	889b      	ldrh	r3, [r3, #4]
 800d552:	b29b      	uxth	r3, r3
 800d554:	429a      	cmp	r2, r3
 800d556:	f200 80da 	bhi.w	800d70e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d562:	88db      	ldrh	r3, [r3, #6]
 800d564:	b29a      	uxth	r2, r3
 800d566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d568:	889b      	ldrh	r3, [r3, #4]
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d037      	beq.n	800d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d574:	e034      	b.n	800d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800d576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d578:	88db      	ldrh	r3, [r3, #6]
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	889b      	ldrh	r3, [r3, #4]
 800d580:	b29b      	uxth	r3, r3
 800d582:	429a      	cmp	r2, r3
 800d584:	f200 80c5 	bhi.w	800d712 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	605a      	str	r2, [r3, #4]
      break;
 800d58e:	e027      	b.n	800d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800d590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d592:	889b      	ldrh	r3, [r3, #4]
 800d594:	b29a      	uxth	r2, r3
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	889b      	ldrh	r3, [r3, #4]
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	429a      	cmp	r2, r3
 800d59e:	f000 80ba 	beq.w	800d716 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a4:	889b      	ldrh	r3, [r3, #4]
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	88db      	ldrh	r3, [r3, #6]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	f0c0 80b3 	bcc.w	800d71a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d009      	beq.n	800d5ce <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800d5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5bc:	88db      	ldrh	r3, [r3, #6]
 800d5be:	b29a      	uxth	r2, r3
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	889b      	ldrh	r3, [r3, #4]
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d001      	beq.n	800d5ce <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d19a      	bne.n	800d514 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800d5de:	e000      	b.n	800d5e2 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800d5e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d12d      	bne.n	800d644 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800d5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d01c      	beq.n	800d628 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f0:	88db      	ldrh	r3, [r3, #6]
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f6:	889b      	ldrh	r3, [r3, #4]
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d906      	bls.n	800d60c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800d5fe:	4b51      	ldr	r3, [pc, #324]	; (800d744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d600:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d604:	4950      	ldr	r1, [pc, #320]	; (800d748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d606:	4851      	ldr	r0, [pc, #324]	; (800d74c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d608:	f000 fd8e 	bl	800e128 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60e:	68ba      	ldr	r2, [r7, #8]
 800d610:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d614:	88db      	ldrh	r3, [r3, #6]
 800d616:	b29a      	uxth	r2, r3
 800d618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61a:	889b      	ldrh	r3, [r3, #4]
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	429a      	cmp	r2, r3
 800d620:	d010      	beq.n	800d644 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	623b      	str	r3, [r7, #32]
 800d626:	e00d      	b.n	800d644 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d006      	beq.n	800d63e <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800d630:	4b44      	ldr	r3, [pc, #272]	; (800d744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d632:	f240 12b3 	movw	r2, #435	; 0x1b3
 800d636:	4946      	ldr	r1, [pc, #280]	; (800d750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d638:	4844      	ldr	r0, [pc, #272]	; (800d74c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d63a:	f000 fd75 	bl	800e128 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d105      	bne.n	800d656 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	7f9b      	ldrb	r3, [r3, #30]
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d059      	beq.n	800d70a <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d04f      	beq.n	800d6fc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d006      	beq.n	800d672 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	889b      	ldrh	r3, [r3, #4]
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d002      	beq.n	800d678 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d672:	2300      	movs	r3, #0
 800d674:	623b      	str	r3, [r7, #32]
 800d676:	e041      	b.n	800d6fc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d682:	e012      	b.n	800d6aa <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68c:	88db      	ldrh	r3, [r3, #6]
 800d68e:	b29a      	uxth	r2, r3
 800d690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d692:	889b      	ldrh	r3, [r3, #4]
 800d694:	b29b      	uxth	r3, r3
 800d696:	429a      	cmp	r2, r3
 800d698:	d002      	beq.n	800d6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800d69a:	2300      	movs	r3, #0
 800d69c:	623b      	str	r3, [r7, #32]
            break;
 800d69e:	e007      	b.n	800d6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1e9      	bne.n	800d684 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d022      	beq.n	800d6fc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d106      	bne.n	800d6cc <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800d6be:	4b21      	ldr	r3, [pc, #132]	; (800d744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d6c0:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800d6c4:	4923      	ldr	r1, [pc, #140]	; (800d754 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d6c6:	4821      	ldr	r0, [pc, #132]	; (800d74c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d6c8:	f000 fd2e 	bl	800e128 <iprintf>
          LWIP_ASSERT("sanity check",
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d106      	bne.n	800d6e6 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800d6d8:	4b1a      	ldr	r3, [pc, #104]	; (800d744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d6da:	f240 12d5 	movw	r2, #469	; 0x1d5
 800d6de:	491d      	ldr	r1, [pc, #116]	; (800d754 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d6e0:	481a      	ldr	r0, [pc, #104]	; (800d74c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d6e2:	f000 fd21 	bl	800e128 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d006      	beq.n	800d6fc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800d6ee:	4b15      	ldr	r3, [pc, #84]	; (800d744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d6f0:	f240 12d7 	movw	r2, #471	; 0x1d7
 800d6f4:	4918      	ldr	r1, [pc, #96]	; (800d758 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d6f6:	4815      	ldr	r0, [pc, #84]	; (800d74c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d6f8:	f000 fd16 	bl	800e128 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	bf14      	ite	ne
 800d702:	2301      	movne	r3, #1
 800d704:	2300      	moveq	r3, #0
 800d706:	b2db      	uxtb	r3, r3
 800d708:	e018      	b.n	800d73c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d70a:	2300      	movs	r3, #0
 800d70c:	e016      	b.n	800d73c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800d70e:	bf00      	nop
 800d710:	e004      	b.n	800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800d712:	bf00      	nop
 800d714:	e002      	b.n	800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d716:	bf00      	nop
 800d718:	e000      	b.n	800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d71a:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d71c:	68b8      	ldr	r0, [r7, #8]
 800d71e:	f7f8 fb41 	bl	8005da4 <pbuf_clen>
 800d722:	4603      	mov	r3, r0
 800d724:	461a      	mov	r2, r3
 800d726:	4b0d      	ldr	r3, [pc, #52]	; (800d75c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d728:	881b      	ldrh	r3, [r3, #0]
 800d72a:	1a9b      	subs	r3, r3, r2
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	4b0b      	ldr	r3, [pc, #44]	; (800d75c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d730:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d732:	68b8      	ldr	r0, [r7, #8]
 800d734:	f7f8 faa2 	bl	8005c7c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d738:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3730      	adds	r7, #48	; 0x30
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	08010ea4 	.word	0x08010ea4
 800d748:	08010f80 	.word	0x08010f80
 800d74c:	08010eec 	.word	0x08010eec
 800d750:	08010fa0 	.word	0x08010fa0
 800d754:	08010fd8 	.word	0x08010fd8
 800d758:	08010fe8 	.word	0x08010fe8
 800d75c:	20006e68 	.word	0x20006e68

0800d760 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b08e      	sub	sp, #56	; 0x38
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	f003 030f 	and.w	r3, r3, #15
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	2b14      	cmp	r3, #20
 800d77a:	f040 8131 	bne.w	800d9e0 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	88db      	ldrh	r3, [r3, #6]
 800d782:	b29b      	uxth	r3, r3
 800d784:	4618      	mov	r0, r3
 800d786:	f7f7 f950 	bl	8004a2a <lwip_htons>
 800d78a:	4603      	mov	r3, r0
 800d78c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d790:	b29b      	uxth	r3, r3
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	885b      	ldrh	r3, [r3, #2]
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7f7 f944 	bl	8004a2a <lwip_htons>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	f003 030f 	and.w	r3, r3, #15
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7f8 faf2 	bl	8005da4 <pbuf_clen>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d7c4:	4b8e      	ldr	r3, [pc, #568]	; (800da00 <ip4_reass+0x2a0>)
 800d7c6:	881b      	ldrh	r3, [r3, #0]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7cc:	4413      	add	r3, r2
 800d7ce:	2b0a      	cmp	r3, #10
 800d7d0:	dd10      	ble.n	800d7f4 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d7d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7d8:	f7ff fd8e 	bl	800d2f8 <ip_reass_remove_oldest_datagram>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	f000 8100 	beq.w	800d9e4 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d7e4:	4b86      	ldr	r3, [pc, #536]	; (800da00 <ip4_reass+0x2a0>)
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7ec:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d7ee:	2b0a      	cmp	r3, #10
 800d7f0:	f300 80f8 	bgt.w	800d9e4 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d7f4:	4b83      	ldr	r3, [pc, #524]	; (800da04 <ip4_reass+0x2a4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	633b      	str	r3, [r7, #48]	; 0x30
 800d7fa:	e015      	b.n	800d828 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fe:	695a      	ldr	r2, [r3, #20]
 800d800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	429a      	cmp	r2, r3
 800d806:	d10c      	bne.n	800d822 <ip4_reass+0xc2>
 800d808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80a:	699a      	ldr	r2, [r3, #24]
 800d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	429a      	cmp	r2, r3
 800d812:	d106      	bne.n	800d822 <ip4_reass+0xc2>
 800d814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d816:	899a      	ldrh	r2, [r3, #12]
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	889b      	ldrh	r3, [r3, #4]
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	429a      	cmp	r2, r3
 800d820:	d006      	beq.n	800d830 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	633b      	str	r3, [r7, #48]	; 0x30
 800d828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1e6      	bne.n	800d7fc <ip4_reass+0x9c>
 800d82e:	e000      	b.n	800d832 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d830:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	2b00      	cmp	r3, #0
 800d836:	d109      	bne.n	800d84c <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d838:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d83a:	4619      	mov	r1, r3
 800d83c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d83e:	f7ff fdbd 	bl	800d3bc <ip_reass_enqueue_new_datagram>
 800d842:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d846:	2b00      	cmp	r3, #0
 800d848:	d11c      	bne.n	800d884 <ip4_reass+0x124>
      goto nullreturn;
 800d84a:	e0d0      	b.n	800d9ee <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84e:	88db      	ldrh	r3, [r3, #6]
 800d850:	b29b      	uxth	r3, r3
 800d852:	4618      	mov	r0, r3
 800d854:	f7f7 f8e9 	bl	8004a2a <lwip_htons>
 800d858:	4603      	mov	r3, r0
 800d85a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d110      	bne.n	800d884 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d864:	89db      	ldrh	r3, [r3, #14]
 800d866:	4618      	mov	r0, r3
 800d868:	f7f7 f8df 	bl	8004a2a <lwip_htons>
 800d86c:	4603      	mov	r3, r0
 800d86e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d872:	2b00      	cmp	r3, #0
 800d874:	d006      	beq.n	800d884 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	3308      	adds	r3, #8
 800d87a:	2214      	movs	r2, #20
 800d87c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d87e:	4618      	mov	r0, r3
 800d880:	f000 fb5c 	bl	800df3c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	88db      	ldrh	r3, [r3, #6]
 800d888:	b29b      	uxth	r3, r3
 800d88a:	f003 0320 	and.w	r3, r3, #32
 800d88e:	2b00      	cmp	r3, #0
 800d890:	bf0c      	ite	eq
 800d892:	2301      	moveq	r3, #1
 800d894:	2300      	movne	r3, #0
 800d896:	b2db      	uxtb	r3, r3
 800d898:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00e      	beq.n	800d8be <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800d8a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d8a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8a4:	4413      	add	r3, r2
 800d8a6:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d8a8:	8b7a      	ldrh	r2, [r7, #26]
 800d8aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	f0c0 809b 	bcc.w	800d9e8 <ip4_reass+0x288>
 800d8b2:	8b7b      	ldrh	r3, [r7, #26]
 800d8b4:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	f200 8095 	bhi.w	800d9e8 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d8be:	69fa      	ldr	r2, [r7, #28]
 800d8c0:	6879      	ldr	r1, [r7, #4]
 800d8c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8c4:	f7ff fde2 	bl	800d48c <ip_reass_chain_frag_into_datagram_and_validate>
 800d8c8:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d0:	f000 808c 	beq.w	800d9ec <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d8d4:	4b4a      	ldr	r3, [pc, #296]	; (800da00 <ip4_reass+0x2a0>)
 800d8d6:	881a      	ldrh	r2, [r3, #0]
 800d8d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8da:	4413      	add	r3, r2
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	4b48      	ldr	r3, [pc, #288]	; (800da00 <ip4_reass+0x2a0>)
 800d8e0:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00d      	beq.n	800d904 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800d8e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d8ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8ec:	4413      	add	r3, r2
 800d8ee:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f2:	8a7a      	ldrh	r2, [r7, #18]
 800d8f4:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f8:	7f9b      	ldrb	r3, [r3, #30]
 800d8fa:	f043 0301 	orr.w	r3, r3, #1
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d902:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	2b01      	cmp	r3, #1
 800d908:	d168      	bne.n	800d9dc <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90c:	8b9b      	ldrh	r3, [r3, #28]
 800d90e:	3314      	adds	r3, #20
 800d910:	b29a      	uxth	r2, r3
 800d912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d914:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	3308      	adds	r3, #8
 800d92c:	2214      	movs	r2, #20
 800d92e:	4619      	mov	r1, r3
 800d930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d932:	f000 fb03 	bl	800df3c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d938:	8b9b      	ldrh	r3, [r3, #28]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7f7 f875 	bl	8004a2a <lwip_htons>
 800d940:	4603      	mov	r3, r0
 800d942:	461a      	mov	r2, r3
 800d944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d946:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94a:	2200      	movs	r2, #0
 800d94c:	719a      	strb	r2, [r3, #6]
 800d94e:	2200      	movs	r2, #0
 800d950:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d954:	2200      	movs	r2, #0
 800d956:	729a      	strb	r2, [r3, #10]
 800d958:	2200      	movs	r2, #0
 800d95a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d962:	e00e      	b.n	800d982 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800d964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d96a:	f06f 0113 	mvn.w	r1, #19
 800d96e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d970:	f7f8 f960 	bl	8005c34 <pbuf_header>
      pbuf_cat(p, r);
 800d974:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f7f8 fa4e 	bl	8005e18 <pbuf_cat>
      r = iprh->next_pbuf;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1ed      	bne.n	800d964 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d988:	4b1e      	ldr	r3, [pc, #120]	; (800da04 <ip4_reass+0x2a4>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d98e:	429a      	cmp	r2, r3
 800d990:	d102      	bne.n	800d998 <ip4_reass+0x238>
      ipr_prev = NULL;
 800d992:	2300      	movs	r3, #0
 800d994:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d996:	e010      	b.n	800d9ba <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d998:	4b1a      	ldr	r3, [pc, #104]	; (800da04 <ip4_reass+0x2a4>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d99e:	e007      	b.n	800d9b0 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800d9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d006      	beq.n	800d9b8 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1f4      	bne.n	800d9a0 <ip4_reass+0x240>
 800d9b6:	e000      	b.n	800d9ba <ip4_reass+0x25a>
          break;
 800d9b8:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d9ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9be:	f7ff fd37 	bl	800d430 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7f8 f9ee 	bl	8005da4 <pbuf_clen>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	4b0c      	ldr	r3, [pc, #48]	; (800da00 <ip4_reass+0x2a0>)
 800d9ce:	881b      	ldrh	r3, [r3, #0]
 800d9d0:	1a9b      	subs	r3, r3, r2
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	4b0a      	ldr	r3, [pc, #40]	; (800da00 <ip4_reass+0x2a0>)
 800d9d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	e00c      	b.n	800d9f6 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	e00a      	b.n	800d9f6 <ip4_reass+0x296>
    goto nullreturn;
 800d9e0:	bf00      	nop
 800d9e2:	e004      	b.n	800d9ee <ip4_reass+0x28e>
      goto nullreturn;
 800d9e4:	bf00      	nop
 800d9e6:	e002      	b.n	800d9ee <ip4_reass+0x28e>
      goto nullreturn;
 800d9e8:	bf00      	nop
 800d9ea:	e000      	b.n	800d9ee <ip4_reass+0x28e>
    goto nullreturn;
 800d9ec:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7f8 f944 	bl	8005c7c <pbuf_free>
  return NULL;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3738      	adds	r7, #56	; 0x38
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	20006e68 	.word	0x20006e68
 800da04:	20006e64 	.word	0x20006e64

0800da08 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800da0c:	2005      	movs	r0, #5
 800da0e:	f7f7 fbb9 	bl	8005184 <memp_malloc>
 800da12:	4603      	mov	r3, r0
}
 800da14:	4618      	mov	r0, r3
 800da16:	bd80      	pop	{r7, pc}

0800da18 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d106      	bne.n	800da34 <ip_frag_free_pbuf_custom_ref+0x1c>
 800da26:	4b07      	ldr	r3, [pc, #28]	; (800da44 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800da28:	f240 22ae 	movw	r2, #686	; 0x2ae
 800da2c:	4906      	ldr	r1, [pc, #24]	; (800da48 <ip_frag_free_pbuf_custom_ref+0x30>)
 800da2e:	4807      	ldr	r0, [pc, #28]	; (800da4c <ip_frag_free_pbuf_custom_ref+0x34>)
 800da30:	f000 fb7a 	bl	800e128 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800da34:	6879      	ldr	r1, [r7, #4]
 800da36:	2005      	movs	r0, #5
 800da38:	f7f7 fbf0 	bl	800521c <memp_free>
}
 800da3c:	bf00      	nop
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	08010ea4 	.word	0x08010ea4
 800da48:	0801100c 	.word	0x0801100c
 800da4c:	08010eec 	.word	0x08010eec

0800da50 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d106      	bne.n	800da70 <ipfrag_free_pbuf_custom+0x20>
 800da62:	4b11      	ldr	r3, [pc, #68]	; (800daa8 <ipfrag_free_pbuf_custom+0x58>)
 800da64:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800da68:	4910      	ldr	r1, [pc, #64]	; (800daac <ipfrag_free_pbuf_custom+0x5c>)
 800da6a:	4811      	ldr	r0, [pc, #68]	; (800dab0 <ipfrag_free_pbuf_custom+0x60>)
 800da6c:	f000 fb5c 	bl	800e128 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	429a      	cmp	r2, r3
 800da76:	d006      	beq.n	800da86 <ipfrag_free_pbuf_custom+0x36>
 800da78:	4b0b      	ldr	r3, [pc, #44]	; (800daa8 <ipfrag_free_pbuf_custom+0x58>)
 800da7a:	f240 22b9 	movw	r2, #697	; 0x2b9
 800da7e:	490d      	ldr	r1, [pc, #52]	; (800dab4 <ipfrag_free_pbuf_custom+0x64>)
 800da80:	480b      	ldr	r0, [pc, #44]	; (800dab0 <ipfrag_free_pbuf_custom+0x60>)
 800da82:	f000 fb51 	bl	800e128 <iprintf>
  if (pcr->original != NULL) {
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	695b      	ldr	r3, [r3, #20]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d004      	beq.n	800da98 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	695b      	ldr	r3, [r3, #20]
 800da92:	4618      	mov	r0, r3
 800da94:	f7f8 f8f2 	bl	8005c7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f7ff ffbd 	bl	800da18 <ip_frag_free_pbuf_custom_ref>
}
 800da9e:	bf00      	nop
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	08010ea4 	.word	0x08010ea4
 800daac:	08011018 	.word	0x08011018
 800dab0:	08010eec 	.word	0x08010eec
 800dab4:	08011024 	.word	0x08011024

0800dab8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b092      	sub	sp, #72	; 0x48
 800dabc:	af02      	add	r7, sp, #8
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dac4:	2300      	movs	r3, #0
 800dac6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800dacc:	3b14      	subs	r3, #20
 800dace:	2b00      	cmp	r3, #0
 800dad0:	da00      	bge.n	800dad4 <ip4_frag+0x1c>
 800dad2:	3307      	adds	r3, #7
 800dad4:	10db      	asrs	r3, r3, #3
 800dad6:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dad8:	2314      	movs	r3, #20
 800dada:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae4:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800dae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	f003 030f 	and.w	r3, r3, #15
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	2b14      	cmp	r3, #20
 800daf2:	d009      	beq.n	800db08 <ip4_frag+0x50>
 800daf4:	4b7a      	ldr	r3, [pc, #488]	; (800dce0 <ip4_frag+0x228>)
 800daf6:	f240 22e1 	movw	r2, #737	; 0x2e1
 800dafa:	497a      	ldr	r1, [pc, #488]	; (800dce4 <ip4_frag+0x22c>)
 800dafc:	487a      	ldr	r0, [pc, #488]	; (800dce8 <ip4_frag+0x230>)
 800dafe:	f000 fb13 	bl	800e128 <iprintf>
 800db02:	f06f 0305 	mvn.w	r3, #5
 800db06:	e0e6      	b.n	800dcd6 <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0a:	88db      	ldrh	r3, [r3, #6]
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	4618      	mov	r0, r3
 800db10:	f7f6 ff8b 	bl	8004a2a <lwip_htons>
 800db14:	4603      	mov	r3, r0
 800db16:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800db18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800db1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db1e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800db20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800db22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db26:	2b00      	cmp	r3, #0
 800db28:	d009      	beq.n	800db3e <ip4_frag+0x86>
 800db2a:	4b6d      	ldr	r3, [pc, #436]	; (800dce0 <ip4_frag+0x228>)
 800db2c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800db30:	496e      	ldr	r1, [pc, #440]	; (800dcec <ip4_frag+0x234>)
 800db32:	486d      	ldr	r0, [pc, #436]	; (800dce8 <ip4_frag+0x230>)
 800db34:	f000 faf8 	bl	800e128 <iprintf>
 800db38:	f06f 0305 	mvn.w	r3, #5
 800db3c:	e0cb      	b.n	800dcd6 <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	891b      	ldrh	r3, [r3, #8]
 800db42:	3b14      	subs	r3, #20
 800db44:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800db46:	e0bd      	b.n	800dcc4 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800db48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800db4a:	00da      	lsls	r2, r3, #3
 800db4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800db4e:	4293      	cmp	r3, r2
 800db50:	bfa8      	it	ge
 800db52:	4613      	movge	r3, r2
 800db54:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800db56:	2200      	movs	r2, #0
 800db58:	2114      	movs	r1, #20
 800db5a:	2002      	movs	r0, #2
 800db5c:	f7f7 fd16 	bl	800558c <pbuf_alloc>
 800db60:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800db62:	6a3b      	ldr	r3, [r7, #32]
 800db64:	2b00      	cmp	r3, #0
 800db66:	f000 80b3 	beq.w	800dcd0 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	895b      	ldrh	r3, [r3, #10]
 800db6e:	2b13      	cmp	r3, #19
 800db70:	d806      	bhi.n	800db80 <ip4_frag+0xc8>
 800db72:	4b5b      	ldr	r3, [pc, #364]	; (800dce0 <ip4_frag+0x228>)
 800db74:	f44f 7242 	mov.w	r2, #776	; 0x308
 800db78:	495d      	ldr	r1, [pc, #372]	; (800dcf0 <ip4_frag+0x238>)
 800db7a:	485b      	ldr	r0, [pc, #364]	; (800dce8 <ip4_frag+0x230>)
 800db7c:	f000 fad4 	bl	800e128 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	2214      	movs	r2, #20
 800db86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 f9d7 	bl	800df3c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800db8e:	6a3b      	ldr	r3, [r7, #32]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800db94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db96:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800db98:	e04f      	b.n	800dc3a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	895a      	ldrh	r2, [r3, #10]
 800db9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dba4:	8b7a      	ldrh	r2, [r7, #26]
 800dba6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	bf28      	it	cs
 800dbac:	4613      	movcs	r3, r2
 800dbae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dbb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d105      	bne.n	800dbc2 <ip4_frag+0x10a>
        poff = 0;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	60fb      	str	r3, [r7, #12]
        continue;
 800dbc0:	e03b      	b.n	800dc3a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800dbc2:	f7ff ff21 	bl	800da08 <ip_frag_alloc_pbuf_custom_ref>
 800dbc6:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d103      	bne.n	800dbd6 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800dbce:	6a38      	ldr	r0, [r7, #32]
 800dbd0:	f7f8 f854 	bl	8005c7c <pbuf_free>
        goto memerr;
 800dbd4:	e07d      	b.n	800dcd2 <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dbd6:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dbdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dbde:	4413      	add	r3, r2
 800dbe0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800dbe2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dbe4:	9201      	str	r2, [sp, #4]
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2202      	movs	r2, #2
 800dbec:	2004      	movs	r0, #4
 800dbee:	f7f7 fe67 	bl	80058c0 <pbuf_alloced_custom>
 800dbf2:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d106      	bne.n	800dc08 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800dbfa:	6978      	ldr	r0, [r7, #20]
 800dbfc:	f7ff ff0c 	bl	800da18 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800dc00:	6a38      	ldr	r0, [r7, #32]
 800dc02:	f7f8 f83b 	bl	8005c7c <pbuf_free>
        goto memerr;
 800dc06:	e064      	b.n	800dcd2 <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f7f8 f8e3 	bl	8005dd4 <pbuf_ref>
      pcr->original = p;
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	68fa      	ldr	r2, [r7, #12]
 800dc12:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	4a37      	ldr	r2, [pc, #220]	; (800dcf4 <ip4_frag+0x23c>)
 800dc18:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800dc1a:	6939      	ldr	r1, [r7, #16]
 800dc1c:	6a38      	ldr	r0, [r7, #32]
 800dc1e:	f7f8 f8fb 	bl	8005e18 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800dc22:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800dc24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800dc2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d004      	beq.n	800dc3a <ip4_frag+0x182>
        poff = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800dc3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d1ac      	bne.n	800db9a <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800dc40:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dc42:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc44:	4413      	add	r3, r2
 800dc46:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800dc4c:	f1a3 0213 	sub.w	r2, r3, #19
 800dc50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dc52:	429a      	cmp	r2, r3
 800dc54:	bfcc      	ite	gt
 800dc56:	2301      	movgt	r3, #1
 800dc58:	2300      	movle	r3, #0
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800dc5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dc60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc64:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d103      	bne.n	800dc74 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800dc6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dc6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dc72:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800dc74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7f6 fed7 	bl	8004a2a <lwip_htons>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	461a      	mov	r2, r3
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800dc84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc86:	3314      	adds	r3, #20
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7f6 fecd 	bl	8004a2a <lwip_htons>
 800dc90:	4603      	mov	r3, r0
 800dc92:	461a      	mov	r2, r3
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800dc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	729a      	strb	r2, [r3, #10]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	6a39      	ldr	r1, [r7, #32]
 800dcaa:	68b8      	ldr	r0, [r7, #8]
 800dcac:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800dcae:	6a38      	ldr	r0, [r7, #32]
 800dcb0:	f7f7 ffe4 	bl	8005c7c <pbuf_free>
    left -= fragsize;
 800dcb4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dcb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800dcbc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800dcbe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dcc0:	4413      	add	r3, r2
 800dcc2:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800dcc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	f47f af3e 	bne.w	800db48 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	e002      	b.n	800dcd6 <ip4_frag+0x21e>
      goto memerr;
 800dcd0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dcd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3740      	adds	r7, #64	; 0x40
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	08010ea4 	.word	0x08010ea4
 800dce4:	08011030 	.word	0x08011030
 800dce8:	08010eec 	.word	0x08010eec
 800dcec:	08011058 	.word	0x08011058
 800dcf0:	08011074 	.word	0x08011074
 800dcf4:	0800da51 	.word	0x0800da51

0800dcf8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800dd02:	230e      	movs	r3, #14
 800dd04:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	895b      	ldrh	r3, [r3, #10]
 800dd0a:	2b0e      	cmp	r3, #14
 800dd0c:	d977      	bls.n	800ddfe <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	7b1a      	ldrb	r2, [r3, #12]
 800dd18:	7b5b      	ldrb	r3, [r3, #13]
 800dd1a:	021b      	lsls	r3, r3, #8
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	f003 0301 	and.w	r3, r3, #1
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d023      	beq.n	800dd74 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d10f      	bne.n	800dd54 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	785b      	ldrb	r3, [r3, #1]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d11b      	bne.n	800dd74 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dd40:	2b5e      	cmp	r3, #94	; 0x5e
 800dd42:	d117      	bne.n	800dd74 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	7b5b      	ldrb	r3, [r3, #13]
 800dd48:	f043 0310 	orr.w	r3, r3, #16
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	735a      	strb	r2, [r3, #13]
 800dd52:	e00f      	b.n	800dd74 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	2206      	movs	r2, #6
 800dd58:	4931      	ldr	r1, [pc, #196]	; (800de20 <ethernet_input+0x128>)
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 f8de 	bl	800df1c <memcmp>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d106      	bne.n	800dd74 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	7b5b      	ldrb	r3, [r3, #13]
 800dd6a:	f043 0308 	orr.w	r3, r3, #8
 800dd6e:	b2da      	uxtb	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800dd74:	89fb      	ldrh	r3, [r7, #14]
 800dd76:	2b08      	cmp	r3, #8
 800dd78:	d003      	beq.n	800dd82 <ethernet_input+0x8a>
 800dd7a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800dd7e:	d01e      	beq.n	800ddbe <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800dd80:	e046      	b.n	800de10 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800dd88:	f003 0308 	and.w	r3, r3, #8
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d038      	beq.n	800de02 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	895b      	ldrh	r3, [r3, #10]
 800dd94:	461a      	mov	r2, r3
 800dd96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	db33      	blt.n	800de06 <ethernet_input+0x10e>
 800dd9e:	8afb      	ldrh	r3, [r7, #22]
 800dda0:	425b      	negs	r3, r3
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	b21b      	sxth	r3, r3
 800dda6:	4619      	mov	r1, r3
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f7f7 ff43 	bl	8005c34 <pbuf_header>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d128      	bne.n	800de06 <ethernet_input+0x10e>
        ip4_input(p, netif);
 800ddb4:	6839      	ldr	r1, [r7, #0]
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f7fe ff7a 	bl	800ccb0 <ip4_input>
      break;
 800ddbc:	e01d      	b.n	800ddfa <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ddc4:	f003 0308 	and.w	r3, r3, #8
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d01e      	beq.n	800de0a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	895b      	ldrh	r3, [r3, #10]
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	db19      	blt.n	800de0e <ethernet_input+0x116>
 800ddda:	8afb      	ldrh	r3, [r7, #22]
 800dddc:	425b      	negs	r3, r3
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	b21b      	sxth	r3, r3
 800dde2:	4619      	mov	r1, r3
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7f7 ff25 	bl	8005c34 <pbuf_header>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d10e      	bne.n	800de0e <ethernet_input+0x116>
        etharp_input(p, netif);
 800ddf0:	6839      	ldr	r1, [r7, #0]
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7fe f94a 	bl	800c08c <etharp_input>
      break;
 800ddf8:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	e00c      	b.n	800de18 <ethernet_input+0x120>
    goto free_and_return;
 800ddfe:	bf00      	nop
 800de00:	e006      	b.n	800de10 <ethernet_input+0x118>
        goto free_and_return;
 800de02:	bf00      	nop
 800de04:	e004      	b.n	800de10 <ethernet_input+0x118>
        goto free_and_return;
 800de06:	bf00      	nop
 800de08:	e002      	b.n	800de10 <ethernet_input+0x118>
        goto free_and_return;
 800de0a:	bf00      	nop
 800de0c:	e000      	b.n	800de10 <ethernet_input+0x118>
        goto free_and_return;
 800de0e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7f7 ff33 	bl	8005c7c <pbuf_free>
  return ERR_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3718      	adds	r7, #24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	0801120c 	.word	0x0801120c

0800de24 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
 800de30:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800de32:	8c3b      	ldrh	r3, [r7, #32]
 800de34:	4618      	mov	r0, r3
 800de36:	f7f6 fdf8 	bl	8004a2a <lwip_htons>
 800de3a:	4603      	mov	r3, r0
 800de3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800de3e:	210e      	movs	r1, #14
 800de40:	68b8      	ldr	r0, [r7, #8]
 800de42:	f7f7 fef7 	bl	8005c34 <pbuf_header>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d125      	bne.n	800de98 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	8afa      	ldrh	r2, [r7, #22]
 800de56:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	2206      	movs	r2, #6
 800de5c:	6839      	ldr	r1, [r7, #0]
 800de5e:	4618      	mov	r0, r3
 800de60:	f000 f86c 	bl	800df3c <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	3306      	adds	r3, #6
 800de68:	2206      	movs	r2, #6
 800de6a:	6879      	ldr	r1, [r7, #4]
 800de6c:	4618      	mov	r0, r3
 800de6e:	f000 f865 	bl	800df3c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de78:	2b06      	cmp	r3, #6
 800de7a:	d006      	beq.n	800de8a <ethernet_output+0x66>
 800de7c:	4b0a      	ldr	r3, [pc, #40]	; (800dea8 <ethernet_output+0x84>)
 800de7e:	f240 122b 	movw	r2, #299	; 0x12b
 800de82:	490a      	ldr	r1, [pc, #40]	; (800deac <ethernet_output+0x88>)
 800de84:	480a      	ldr	r0, [pc, #40]	; (800deb0 <ethernet_output+0x8c>)
 800de86:	f000 f94f 	bl	800e128 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	699b      	ldr	r3, [r3, #24]
 800de8e:	68b9      	ldr	r1, [r7, #8]
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	4798      	blx	r3
 800de94:	4603      	mov	r3, r0
 800de96:	e002      	b.n	800de9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800de98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800de9a:	f06f 0301 	mvn.w	r3, #1
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3718      	adds	r7, #24
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	08011094 	.word	0x08011094
 800deac:	080110cc 	.word	0x080110cc
 800deb0:	08011100 	.word	0x08011100

0800deb4 <__libc_init_array>:
 800deb4:	b570      	push	{r4, r5, r6, lr}
 800deb6:	4d0d      	ldr	r5, [pc, #52]	; (800deec <__libc_init_array+0x38>)
 800deb8:	4c0d      	ldr	r4, [pc, #52]	; (800def0 <__libc_init_array+0x3c>)
 800deba:	1b64      	subs	r4, r4, r5
 800debc:	10a4      	asrs	r4, r4, #2
 800debe:	2600      	movs	r6, #0
 800dec0:	42a6      	cmp	r6, r4
 800dec2:	d109      	bne.n	800ded8 <__libc_init_array+0x24>
 800dec4:	4d0b      	ldr	r5, [pc, #44]	; (800def4 <__libc_init_array+0x40>)
 800dec6:	4c0c      	ldr	r4, [pc, #48]	; (800def8 <__libc_init_array+0x44>)
 800dec8:	f001 f9aa 	bl	800f220 <_init>
 800decc:	1b64      	subs	r4, r4, r5
 800dece:	10a4      	asrs	r4, r4, #2
 800ded0:	2600      	movs	r6, #0
 800ded2:	42a6      	cmp	r6, r4
 800ded4:	d105      	bne.n	800dee2 <__libc_init_array+0x2e>
 800ded6:	bd70      	pop	{r4, r5, r6, pc}
 800ded8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dedc:	4798      	blx	r3
 800dede:	3601      	adds	r6, #1
 800dee0:	e7ee      	b.n	800dec0 <__libc_init_array+0xc>
 800dee2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dee6:	4798      	blx	r3
 800dee8:	3601      	adds	r6, #1
 800deea:	e7f2      	b.n	800ded2 <__libc_init_array+0x1e>
 800deec:	080112bc 	.word	0x080112bc
 800def0:	080112bc 	.word	0x080112bc
 800def4:	080112bc 	.word	0x080112bc
 800def8:	080112c0 	.word	0x080112c0

0800defc <malloc>:
 800defc:	4b02      	ldr	r3, [pc, #8]	; (800df08 <malloc+0xc>)
 800defe:	4601      	mov	r1, r0
 800df00:	6818      	ldr	r0, [r3, #0]
 800df02:	f000 b89d 	b.w	800e040 <_malloc_r>
 800df06:	bf00      	nop
 800df08:	2000009c 	.word	0x2000009c

0800df0c <free>:
 800df0c:	4b02      	ldr	r3, [pc, #8]	; (800df18 <free+0xc>)
 800df0e:	4601      	mov	r1, r0
 800df10:	6818      	ldr	r0, [r3, #0]
 800df12:	f000 b829 	b.w	800df68 <_free_r>
 800df16:	bf00      	nop
 800df18:	2000009c 	.word	0x2000009c

0800df1c <memcmp>:
 800df1c:	b510      	push	{r4, lr}
 800df1e:	3901      	subs	r1, #1
 800df20:	4402      	add	r2, r0
 800df22:	4290      	cmp	r0, r2
 800df24:	d101      	bne.n	800df2a <memcmp+0xe>
 800df26:	2000      	movs	r0, #0
 800df28:	e005      	b.n	800df36 <memcmp+0x1a>
 800df2a:	7803      	ldrb	r3, [r0, #0]
 800df2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800df30:	42a3      	cmp	r3, r4
 800df32:	d001      	beq.n	800df38 <memcmp+0x1c>
 800df34:	1b18      	subs	r0, r3, r4
 800df36:	bd10      	pop	{r4, pc}
 800df38:	3001      	adds	r0, #1
 800df3a:	e7f2      	b.n	800df22 <memcmp+0x6>

0800df3c <memcpy>:
 800df3c:	440a      	add	r2, r1
 800df3e:	4291      	cmp	r1, r2
 800df40:	f100 33ff 	add.w	r3, r0, #4294967295
 800df44:	d100      	bne.n	800df48 <memcpy+0xc>
 800df46:	4770      	bx	lr
 800df48:	b510      	push	{r4, lr}
 800df4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df52:	4291      	cmp	r1, r2
 800df54:	d1f9      	bne.n	800df4a <memcpy+0xe>
 800df56:	bd10      	pop	{r4, pc}

0800df58 <memset>:
 800df58:	4402      	add	r2, r0
 800df5a:	4603      	mov	r3, r0
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d100      	bne.n	800df62 <memset+0xa>
 800df60:	4770      	bx	lr
 800df62:	f803 1b01 	strb.w	r1, [r3], #1
 800df66:	e7f9      	b.n	800df5c <memset+0x4>

0800df68 <_free_r>:
 800df68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df6a:	2900      	cmp	r1, #0
 800df6c:	d044      	beq.n	800dff8 <_free_r+0x90>
 800df6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df72:	9001      	str	r0, [sp, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	f1a1 0404 	sub.w	r4, r1, #4
 800df7a:	bfb8      	it	lt
 800df7c:	18e4      	addlt	r4, r4, r3
 800df7e:	f000 fa13 	bl	800e3a8 <__malloc_lock>
 800df82:	4a1e      	ldr	r2, [pc, #120]	; (800dffc <_free_r+0x94>)
 800df84:	9801      	ldr	r0, [sp, #4]
 800df86:	6813      	ldr	r3, [r2, #0]
 800df88:	b933      	cbnz	r3, 800df98 <_free_r+0x30>
 800df8a:	6063      	str	r3, [r4, #4]
 800df8c:	6014      	str	r4, [r2, #0]
 800df8e:	b003      	add	sp, #12
 800df90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df94:	f000 ba0e 	b.w	800e3b4 <__malloc_unlock>
 800df98:	42a3      	cmp	r3, r4
 800df9a:	d908      	bls.n	800dfae <_free_r+0x46>
 800df9c:	6825      	ldr	r5, [r4, #0]
 800df9e:	1961      	adds	r1, r4, r5
 800dfa0:	428b      	cmp	r3, r1
 800dfa2:	bf01      	itttt	eq
 800dfa4:	6819      	ldreq	r1, [r3, #0]
 800dfa6:	685b      	ldreq	r3, [r3, #4]
 800dfa8:	1949      	addeq	r1, r1, r5
 800dfaa:	6021      	streq	r1, [r4, #0]
 800dfac:	e7ed      	b.n	800df8a <_free_r+0x22>
 800dfae:	461a      	mov	r2, r3
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	b10b      	cbz	r3, 800dfb8 <_free_r+0x50>
 800dfb4:	42a3      	cmp	r3, r4
 800dfb6:	d9fa      	bls.n	800dfae <_free_r+0x46>
 800dfb8:	6811      	ldr	r1, [r2, #0]
 800dfba:	1855      	adds	r5, r2, r1
 800dfbc:	42a5      	cmp	r5, r4
 800dfbe:	d10b      	bne.n	800dfd8 <_free_r+0x70>
 800dfc0:	6824      	ldr	r4, [r4, #0]
 800dfc2:	4421      	add	r1, r4
 800dfc4:	1854      	adds	r4, r2, r1
 800dfc6:	42a3      	cmp	r3, r4
 800dfc8:	6011      	str	r1, [r2, #0]
 800dfca:	d1e0      	bne.n	800df8e <_free_r+0x26>
 800dfcc:	681c      	ldr	r4, [r3, #0]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	6053      	str	r3, [r2, #4]
 800dfd2:	4421      	add	r1, r4
 800dfd4:	6011      	str	r1, [r2, #0]
 800dfd6:	e7da      	b.n	800df8e <_free_r+0x26>
 800dfd8:	d902      	bls.n	800dfe0 <_free_r+0x78>
 800dfda:	230c      	movs	r3, #12
 800dfdc:	6003      	str	r3, [r0, #0]
 800dfde:	e7d6      	b.n	800df8e <_free_r+0x26>
 800dfe0:	6825      	ldr	r5, [r4, #0]
 800dfe2:	1961      	adds	r1, r4, r5
 800dfe4:	428b      	cmp	r3, r1
 800dfe6:	bf04      	itt	eq
 800dfe8:	6819      	ldreq	r1, [r3, #0]
 800dfea:	685b      	ldreq	r3, [r3, #4]
 800dfec:	6063      	str	r3, [r4, #4]
 800dfee:	bf04      	itt	eq
 800dff0:	1949      	addeq	r1, r1, r5
 800dff2:	6021      	streq	r1, [r4, #0]
 800dff4:	6054      	str	r4, [r2, #4]
 800dff6:	e7ca      	b.n	800df8e <_free_r+0x26>
 800dff8:	b003      	add	sp, #12
 800dffa:	bd30      	pop	{r4, r5, pc}
 800dffc:	20006e6c 	.word	0x20006e6c

0800e000 <sbrk_aligned>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	4e0e      	ldr	r6, [pc, #56]	; (800e03c <sbrk_aligned+0x3c>)
 800e004:	460c      	mov	r4, r1
 800e006:	6831      	ldr	r1, [r6, #0]
 800e008:	4605      	mov	r5, r0
 800e00a:	b911      	cbnz	r1, 800e012 <sbrk_aligned+0x12>
 800e00c:	f000 f8a4 	bl	800e158 <_sbrk_r>
 800e010:	6030      	str	r0, [r6, #0]
 800e012:	4621      	mov	r1, r4
 800e014:	4628      	mov	r0, r5
 800e016:	f000 f89f 	bl	800e158 <_sbrk_r>
 800e01a:	1c43      	adds	r3, r0, #1
 800e01c:	d00a      	beq.n	800e034 <sbrk_aligned+0x34>
 800e01e:	1cc4      	adds	r4, r0, #3
 800e020:	f024 0403 	bic.w	r4, r4, #3
 800e024:	42a0      	cmp	r0, r4
 800e026:	d007      	beq.n	800e038 <sbrk_aligned+0x38>
 800e028:	1a21      	subs	r1, r4, r0
 800e02a:	4628      	mov	r0, r5
 800e02c:	f000 f894 	bl	800e158 <_sbrk_r>
 800e030:	3001      	adds	r0, #1
 800e032:	d101      	bne.n	800e038 <sbrk_aligned+0x38>
 800e034:	f04f 34ff 	mov.w	r4, #4294967295
 800e038:	4620      	mov	r0, r4
 800e03a:	bd70      	pop	{r4, r5, r6, pc}
 800e03c:	20006e70 	.word	0x20006e70

0800e040 <_malloc_r>:
 800e040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e044:	1ccd      	adds	r5, r1, #3
 800e046:	f025 0503 	bic.w	r5, r5, #3
 800e04a:	3508      	adds	r5, #8
 800e04c:	2d0c      	cmp	r5, #12
 800e04e:	bf38      	it	cc
 800e050:	250c      	movcc	r5, #12
 800e052:	2d00      	cmp	r5, #0
 800e054:	4607      	mov	r7, r0
 800e056:	db01      	blt.n	800e05c <_malloc_r+0x1c>
 800e058:	42a9      	cmp	r1, r5
 800e05a:	d905      	bls.n	800e068 <_malloc_r+0x28>
 800e05c:	230c      	movs	r3, #12
 800e05e:	603b      	str	r3, [r7, #0]
 800e060:	2600      	movs	r6, #0
 800e062:	4630      	mov	r0, r6
 800e064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e068:	4e2e      	ldr	r6, [pc, #184]	; (800e124 <_malloc_r+0xe4>)
 800e06a:	f000 f99d 	bl	800e3a8 <__malloc_lock>
 800e06e:	6833      	ldr	r3, [r6, #0]
 800e070:	461c      	mov	r4, r3
 800e072:	bb34      	cbnz	r4, 800e0c2 <_malloc_r+0x82>
 800e074:	4629      	mov	r1, r5
 800e076:	4638      	mov	r0, r7
 800e078:	f7ff ffc2 	bl	800e000 <sbrk_aligned>
 800e07c:	1c43      	adds	r3, r0, #1
 800e07e:	4604      	mov	r4, r0
 800e080:	d14d      	bne.n	800e11e <_malloc_r+0xde>
 800e082:	6834      	ldr	r4, [r6, #0]
 800e084:	4626      	mov	r6, r4
 800e086:	2e00      	cmp	r6, #0
 800e088:	d140      	bne.n	800e10c <_malloc_r+0xcc>
 800e08a:	6823      	ldr	r3, [r4, #0]
 800e08c:	4631      	mov	r1, r6
 800e08e:	4638      	mov	r0, r7
 800e090:	eb04 0803 	add.w	r8, r4, r3
 800e094:	f000 f860 	bl	800e158 <_sbrk_r>
 800e098:	4580      	cmp	r8, r0
 800e09a:	d13a      	bne.n	800e112 <_malloc_r+0xd2>
 800e09c:	6821      	ldr	r1, [r4, #0]
 800e09e:	3503      	adds	r5, #3
 800e0a0:	1a6d      	subs	r5, r5, r1
 800e0a2:	f025 0503 	bic.w	r5, r5, #3
 800e0a6:	3508      	adds	r5, #8
 800e0a8:	2d0c      	cmp	r5, #12
 800e0aa:	bf38      	it	cc
 800e0ac:	250c      	movcc	r5, #12
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	f7ff ffa5 	bl	800e000 <sbrk_aligned>
 800e0b6:	3001      	adds	r0, #1
 800e0b8:	d02b      	beq.n	800e112 <_malloc_r+0xd2>
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	442b      	add	r3, r5
 800e0be:	6023      	str	r3, [r4, #0]
 800e0c0:	e00e      	b.n	800e0e0 <_malloc_r+0xa0>
 800e0c2:	6822      	ldr	r2, [r4, #0]
 800e0c4:	1b52      	subs	r2, r2, r5
 800e0c6:	d41e      	bmi.n	800e106 <_malloc_r+0xc6>
 800e0c8:	2a0b      	cmp	r2, #11
 800e0ca:	d916      	bls.n	800e0fa <_malloc_r+0xba>
 800e0cc:	1961      	adds	r1, r4, r5
 800e0ce:	42a3      	cmp	r3, r4
 800e0d0:	6025      	str	r5, [r4, #0]
 800e0d2:	bf18      	it	ne
 800e0d4:	6059      	strne	r1, [r3, #4]
 800e0d6:	6863      	ldr	r3, [r4, #4]
 800e0d8:	bf08      	it	eq
 800e0da:	6031      	streq	r1, [r6, #0]
 800e0dc:	5162      	str	r2, [r4, r5]
 800e0de:	604b      	str	r3, [r1, #4]
 800e0e0:	4638      	mov	r0, r7
 800e0e2:	f104 060b 	add.w	r6, r4, #11
 800e0e6:	f000 f965 	bl	800e3b4 <__malloc_unlock>
 800e0ea:	f026 0607 	bic.w	r6, r6, #7
 800e0ee:	1d23      	adds	r3, r4, #4
 800e0f0:	1af2      	subs	r2, r6, r3
 800e0f2:	d0b6      	beq.n	800e062 <_malloc_r+0x22>
 800e0f4:	1b9b      	subs	r3, r3, r6
 800e0f6:	50a3      	str	r3, [r4, r2]
 800e0f8:	e7b3      	b.n	800e062 <_malloc_r+0x22>
 800e0fa:	6862      	ldr	r2, [r4, #4]
 800e0fc:	42a3      	cmp	r3, r4
 800e0fe:	bf0c      	ite	eq
 800e100:	6032      	streq	r2, [r6, #0]
 800e102:	605a      	strne	r2, [r3, #4]
 800e104:	e7ec      	b.n	800e0e0 <_malloc_r+0xa0>
 800e106:	4623      	mov	r3, r4
 800e108:	6864      	ldr	r4, [r4, #4]
 800e10a:	e7b2      	b.n	800e072 <_malloc_r+0x32>
 800e10c:	4634      	mov	r4, r6
 800e10e:	6876      	ldr	r6, [r6, #4]
 800e110:	e7b9      	b.n	800e086 <_malloc_r+0x46>
 800e112:	230c      	movs	r3, #12
 800e114:	603b      	str	r3, [r7, #0]
 800e116:	4638      	mov	r0, r7
 800e118:	f000 f94c 	bl	800e3b4 <__malloc_unlock>
 800e11c:	e7a1      	b.n	800e062 <_malloc_r+0x22>
 800e11e:	6025      	str	r5, [r4, #0]
 800e120:	e7de      	b.n	800e0e0 <_malloc_r+0xa0>
 800e122:	bf00      	nop
 800e124:	20006e6c 	.word	0x20006e6c

0800e128 <iprintf>:
 800e128:	b40f      	push	{r0, r1, r2, r3}
 800e12a:	4b0a      	ldr	r3, [pc, #40]	; (800e154 <iprintf+0x2c>)
 800e12c:	b513      	push	{r0, r1, r4, lr}
 800e12e:	681c      	ldr	r4, [r3, #0]
 800e130:	b124      	cbz	r4, 800e13c <iprintf+0x14>
 800e132:	69a3      	ldr	r3, [r4, #24]
 800e134:	b913      	cbnz	r3, 800e13c <iprintf+0x14>
 800e136:	4620      	mov	r0, r4
 800e138:	f000 f896 	bl	800e268 <__sinit>
 800e13c:	ab05      	add	r3, sp, #20
 800e13e:	9a04      	ldr	r2, [sp, #16]
 800e140:	68a1      	ldr	r1, [r4, #8]
 800e142:	9301      	str	r3, [sp, #4]
 800e144:	4620      	mov	r0, r4
 800e146:	f000 fac1 	bl	800e6cc <_vfiprintf_r>
 800e14a:	b002      	add	sp, #8
 800e14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e150:	b004      	add	sp, #16
 800e152:	4770      	bx	lr
 800e154:	2000009c 	.word	0x2000009c

0800e158 <_sbrk_r>:
 800e158:	b538      	push	{r3, r4, r5, lr}
 800e15a:	4d06      	ldr	r5, [pc, #24]	; (800e174 <_sbrk_r+0x1c>)
 800e15c:	2300      	movs	r3, #0
 800e15e:	4604      	mov	r4, r0
 800e160:	4608      	mov	r0, r1
 800e162:	602b      	str	r3, [r5, #0]
 800e164:	f7f3 fa24 	bl	80015b0 <_sbrk>
 800e168:	1c43      	adds	r3, r0, #1
 800e16a:	d102      	bne.n	800e172 <_sbrk_r+0x1a>
 800e16c:	682b      	ldr	r3, [r5, #0]
 800e16e:	b103      	cbz	r3, 800e172 <_sbrk_r+0x1a>
 800e170:	6023      	str	r3, [r4, #0]
 800e172:	bd38      	pop	{r3, r4, r5, pc}
 800e174:	20006e74 	.word	0x20006e74

0800e178 <siprintf>:
 800e178:	b40e      	push	{r1, r2, r3}
 800e17a:	b500      	push	{lr}
 800e17c:	b09c      	sub	sp, #112	; 0x70
 800e17e:	ab1d      	add	r3, sp, #116	; 0x74
 800e180:	9002      	str	r0, [sp, #8]
 800e182:	9006      	str	r0, [sp, #24]
 800e184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e188:	4809      	ldr	r0, [pc, #36]	; (800e1b0 <siprintf+0x38>)
 800e18a:	9107      	str	r1, [sp, #28]
 800e18c:	9104      	str	r1, [sp, #16]
 800e18e:	4909      	ldr	r1, [pc, #36]	; (800e1b4 <siprintf+0x3c>)
 800e190:	f853 2b04 	ldr.w	r2, [r3], #4
 800e194:	9105      	str	r1, [sp, #20]
 800e196:	6800      	ldr	r0, [r0, #0]
 800e198:	9301      	str	r3, [sp, #4]
 800e19a:	a902      	add	r1, sp, #8
 800e19c:	f000 f96c 	bl	800e478 <_svfiprintf_r>
 800e1a0:	9b02      	ldr	r3, [sp, #8]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	701a      	strb	r2, [r3, #0]
 800e1a6:	b01c      	add	sp, #112	; 0x70
 800e1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1ac:	b003      	add	sp, #12
 800e1ae:	4770      	bx	lr
 800e1b0:	2000009c 	.word	0x2000009c
 800e1b4:	ffff0208 	.word	0xffff0208

0800e1b8 <std>:
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	b510      	push	{r4, lr}
 800e1bc:	4604      	mov	r4, r0
 800e1be:	e9c0 3300 	strd	r3, r3, [r0]
 800e1c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1c6:	6083      	str	r3, [r0, #8]
 800e1c8:	8181      	strh	r1, [r0, #12]
 800e1ca:	6643      	str	r3, [r0, #100]	; 0x64
 800e1cc:	81c2      	strh	r2, [r0, #14]
 800e1ce:	6183      	str	r3, [r0, #24]
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	2208      	movs	r2, #8
 800e1d4:	305c      	adds	r0, #92	; 0x5c
 800e1d6:	f7ff febf 	bl	800df58 <memset>
 800e1da:	4b05      	ldr	r3, [pc, #20]	; (800e1f0 <std+0x38>)
 800e1dc:	6263      	str	r3, [r4, #36]	; 0x24
 800e1de:	4b05      	ldr	r3, [pc, #20]	; (800e1f4 <std+0x3c>)
 800e1e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e1e2:	4b05      	ldr	r3, [pc, #20]	; (800e1f8 <std+0x40>)
 800e1e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e1e6:	4b05      	ldr	r3, [pc, #20]	; (800e1fc <std+0x44>)
 800e1e8:	6224      	str	r4, [r4, #32]
 800e1ea:	6323      	str	r3, [r4, #48]	; 0x30
 800e1ec:	bd10      	pop	{r4, pc}
 800e1ee:	bf00      	nop
 800e1f0:	0800ec55 	.word	0x0800ec55
 800e1f4:	0800ec77 	.word	0x0800ec77
 800e1f8:	0800ecaf 	.word	0x0800ecaf
 800e1fc:	0800ecd3 	.word	0x0800ecd3

0800e200 <_cleanup_r>:
 800e200:	4901      	ldr	r1, [pc, #4]	; (800e208 <_cleanup_r+0x8>)
 800e202:	f000 b8af 	b.w	800e364 <_fwalk_reent>
 800e206:	bf00      	nop
 800e208:	0800efad 	.word	0x0800efad

0800e20c <__sfmoreglue>:
 800e20c:	b570      	push	{r4, r5, r6, lr}
 800e20e:	2268      	movs	r2, #104	; 0x68
 800e210:	1e4d      	subs	r5, r1, #1
 800e212:	4355      	muls	r5, r2
 800e214:	460e      	mov	r6, r1
 800e216:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e21a:	f7ff ff11 	bl	800e040 <_malloc_r>
 800e21e:	4604      	mov	r4, r0
 800e220:	b140      	cbz	r0, 800e234 <__sfmoreglue+0x28>
 800e222:	2100      	movs	r1, #0
 800e224:	e9c0 1600 	strd	r1, r6, [r0]
 800e228:	300c      	adds	r0, #12
 800e22a:	60a0      	str	r0, [r4, #8]
 800e22c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e230:	f7ff fe92 	bl	800df58 <memset>
 800e234:	4620      	mov	r0, r4
 800e236:	bd70      	pop	{r4, r5, r6, pc}

0800e238 <__sfp_lock_acquire>:
 800e238:	4801      	ldr	r0, [pc, #4]	; (800e240 <__sfp_lock_acquire+0x8>)
 800e23a:	f000 b8b3 	b.w	800e3a4 <__retarget_lock_acquire_recursive>
 800e23e:	bf00      	nop
 800e240:	20006e79 	.word	0x20006e79

0800e244 <__sfp_lock_release>:
 800e244:	4801      	ldr	r0, [pc, #4]	; (800e24c <__sfp_lock_release+0x8>)
 800e246:	f000 b8ae 	b.w	800e3a6 <__retarget_lock_release_recursive>
 800e24a:	bf00      	nop
 800e24c:	20006e79 	.word	0x20006e79

0800e250 <__sinit_lock_acquire>:
 800e250:	4801      	ldr	r0, [pc, #4]	; (800e258 <__sinit_lock_acquire+0x8>)
 800e252:	f000 b8a7 	b.w	800e3a4 <__retarget_lock_acquire_recursive>
 800e256:	bf00      	nop
 800e258:	20006e7a 	.word	0x20006e7a

0800e25c <__sinit_lock_release>:
 800e25c:	4801      	ldr	r0, [pc, #4]	; (800e264 <__sinit_lock_release+0x8>)
 800e25e:	f000 b8a2 	b.w	800e3a6 <__retarget_lock_release_recursive>
 800e262:	bf00      	nop
 800e264:	20006e7a 	.word	0x20006e7a

0800e268 <__sinit>:
 800e268:	b510      	push	{r4, lr}
 800e26a:	4604      	mov	r4, r0
 800e26c:	f7ff fff0 	bl	800e250 <__sinit_lock_acquire>
 800e270:	69a3      	ldr	r3, [r4, #24]
 800e272:	b11b      	cbz	r3, 800e27c <__sinit+0x14>
 800e274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e278:	f7ff bff0 	b.w	800e25c <__sinit_lock_release>
 800e27c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e280:	6523      	str	r3, [r4, #80]	; 0x50
 800e282:	4b13      	ldr	r3, [pc, #76]	; (800e2d0 <__sinit+0x68>)
 800e284:	4a13      	ldr	r2, [pc, #76]	; (800e2d4 <__sinit+0x6c>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	62a2      	str	r2, [r4, #40]	; 0x28
 800e28a:	42a3      	cmp	r3, r4
 800e28c:	bf04      	itt	eq
 800e28e:	2301      	moveq	r3, #1
 800e290:	61a3      	streq	r3, [r4, #24]
 800e292:	4620      	mov	r0, r4
 800e294:	f000 f820 	bl	800e2d8 <__sfp>
 800e298:	6060      	str	r0, [r4, #4]
 800e29a:	4620      	mov	r0, r4
 800e29c:	f000 f81c 	bl	800e2d8 <__sfp>
 800e2a0:	60a0      	str	r0, [r4, #8]
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f000 f818 	bl	800e2d8 <__sfp>
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	60e0      	str	r0, [r4, #12]
 800e2ac:	2104      	movs	r1, #4
 800e2ae:	6860      	ldr	r0, [r4, #4]
 800e2b0:	f7ff ff82 	bl	800e1b8 <std>
 800e2b4:	68a0      	ldr	r0, [r4, #8]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	2109      	movs	r1, #9
 800e2ba:	f7ff ff7d 	bl	800e1b8 <std>
 800e2be:	68e0      	ldr	r0, [r4, #12]
 800e2c0:	2202      	movs	r2, #2
 800e2c2:	2112      	movs	r1, #18
 800e2c4:	f7ff ff78 	bl	800e1b8 <std>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	61a3      	str	r3, [r4, #24]
 800e2cc:	e7d2      	b.n	800e274 <__sinit+0xc>
 800e2ce:	bf00      	nop
 800e2d0:	0801121c 	.word	0x0801121c
 800e2d4:	0800e201 	.word	0x0800e201

0800e2d8 <__sfp>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	4607      	mov	r7, r0
 800e2dc:	f7ff ffac 	bl	800e238 <__sfp_lock_acquire>
 800e2e0:	4b1e      	ldr	r3, [pc, #120]	; (800e35c <__sfp+0x84>)
 800e2e2:	681e      	ldr	r6, [r3, #0]
 800e2e4:	69b3      	ldr	r3, [r6, #24]
 800e2e6:	b913      	cbnz	r3, 800e2ee <__sfp+0x16>
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	f7ff ffbd 	bl	800e268 <__sinit>
 800e2ee:	3648      	adds	r6, #72	; 0x48
 800e2f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2f4:	3b01      	subs	r3, #1
 800e2f6:	d503      	bpl.n	800e300 <__sfp+0x28>
 800e2f8:	6833      	ldr	r3, [r6, #0]
 800e2fa:	b30b      	cbz	r3, 800e340 <__sfp+0x68>
 800e2fc:	6836      	ldr	r6, [r6, #0]
 800e2fe:	e7f7      	b.n	800e2f0 <__sfp+0x18>
 800e300:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e304:	b9d5      	cbnz	r5, 800e33c <__sfp+0x64>
 800e306:	4b16      	ldr	r3, [pc, #88]	; (800e360 <__sfp+0x88>)
 800e308:	60e3      	str	r3, [r4, #12]
 800e30a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e30e:	6665      	str	r5, [r4, #100]	; 0x64
 800e310:	f000 f847 	bl	800e3a2 <__retarget_lock_init_recursive>
 800e314:	f7ff ff96 	bl	800e244 <__sfp_lock_release>
 800e318:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e31c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e320:	6025      	str	r5, [r4, #0]
 800e322:	61a5      	str	r5, [r4, #24]
 800e324:	2208      	movs	r2, #8
 800e326:	4629      	mov	r1, r5
 800e328:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e32c:	f7ff fe14 	bl	800df58 <memset>
 800e330:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e334:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e338:	4620      	mov	r0, r4
 800e33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e33c:	3468      	adds	r4, #104	; 0x68
 800e33e:	e7d9      	b.n	800e2f4 <__sfp+0x1c>
 800e340:	2104      	movs	r1, #4
 800e342:	4638      	mov	r0, r7
 800e344:	f7ff ff62 	bl	800e20c <__sfmoreglue>
 800e348:	4604      	mov	r4, r0
 800e34a:	6030      	str	r0, [r6, #0]
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d1d5      	bne.n	800e2fc <__sfp+0x24>
 800e350:	f7ff ff78 	bl	800e244 <__sfp_lock_release>
 800e354:	230c      	movs	r3, #12
 800e356:	603b      	str	r3, [r7, #0]
 800e358:	e7ee      	b.n	800e338 <__sfp+0x60>
 800e35a:	bf00      	nop
 800e35c:	0801121c 	.word	0x0801121c
 800e360:	ffff0001 	.word	0xffff0001

0800e364 <_fwalk_reent>:
 800e364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e368:	4606      	mov	r6, r0
 800e36a:	4688      	mov	r8, r1
 800e36c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e370:	2700      	movs	r7, #0
 800e372:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e376:	f1b9 0901 	subs.w	r9, r9, #1
 800e37a:	d505      	bpl.n	800e388 <_fwalk_reent+0x24>
 800e37c:	6824      	ldr	r4, [r4, #0]
 800e37e:	2c00      	cmp	r4, #0
 800e380:	d1f7      	bne.n	800e372 <_fwalk_reent+0xe>
 800e382:	4638      	mov	r0, r7
 800e384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e388:	89ab      	ldrh	r3, [r5, #12]
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d907      	bls.n	800e39e <_fwalk_reent+0x3a>
 800e38e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e392:	3301      	adds	r3, #1
 800e394:	d003      	beq.n	800e39e <_fwalk_reent+0x3a>
 800e396:	4629      	mov	r1, r5
 800e398:	4630      	mov	r0, r6
 800e39a:	47c0      	blx	r8
 800e39c:	4307      	orrs	r7, r0
 800e39e:	3568      	adds	r5, #104	; 0x68
 800e3a0:	e7e9      	b.n	800e376 <_fwalk_reent+0x12>

0800e3a2 <__retarget_lock_init_recursive>:
 800e3a2:	4770      	bx	lr

0800e3a4 <__retarget_lock_acquire_recursive>:
 800e3a4:	4770      	bx	lr

0800e3a6 <__retarget_lock_release_recursive>:
 800e3a6:	4770      	bx	lr

0800e3a8 <__malloc_lock>:
 800e3a8:	4801      	ldr	r0, [pc, #4]	; (800e3b0 <__malloc_lock+0x8>)
 800e3aa:	f7ff bffb 	b.w	800e3a4 <__retarget_lock_acquire_recursive>
 800e3ae:	bf00      	nop
 800e3b0:	20006e78 	.word	0x20006e78

0800e3b4 <__malloc_unlock>:
 800e3b4:	4801      	ldr	r0, [pc, #4]	; (800e3bc <__malloc_unlock+0x8>)
 800e3b6:	f7ff bff6 	b.w	800e3a6 <__retarget_lock_release_recursive>
 800e3ba:	bf00      	nop
 800e3bc:	20006e78 	.word	0x20006e78

0800e3c0 <__ssputs_r>:
 800e3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c4:	688e      	ldr	r6, [r1, #8]
 800e3c6:	429e      	cmp	r6, r3
 800e3c8:	4682      	mov	sl, r0
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	4690      	mov	r8, r2
 800e3ce:	461f      	mov	r7, r3
 800e3d0:	d838      	bhi.n	800e444 <__ssputs_r+0x84>
 800e3d2:	898a      	ldrh	r2, [r1, #12]
 800e3d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3d8:	d032      	beq.n	800e440 <__ssputs_r+0x80>
 800e3da:	6825      	ldr	r5, [r4, #0]
 800e3dc:	6909      	ldr	r1, [r1, #16]
 800e3de:	eba5 0901 	sub.w	r9, r5, r1
 800e3e2:	6965      	ldr	r5, [r4, #20]
 800e3e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	444b      	add	r3, r9
 800e3f0:	106d      	asrs	r5, r5, #1
 800e3f2:	429d      	cmp	r5, r3
 800e3f4:	bf38      	it	cc
 800e3f6:	461d      	movcc	r5, r3
 800e3f8:	0553      	lsls	r3, r2, #21
 800e3fa:	d531      	bpl.n	800e460 <__ssputs_r+0xa0>
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	f7ff fe1f 	bl	800e040 <_malloc_r>
 800e402:	4606      	mov	r6, r0
 800e404:	b950      	cbnz	r0, 800e41c <__ssputs_r+0x5c>
 800e406:	230c      	movs	r3, #12
 800e408:	f8ca 3000 	str.w	r3, [sl]
 800e40c:	89a3      	ldrh	r3, [r4, #12]
 800e40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e412:	81a3      	strh	r3, [r4, #12]
 800e414:	f04f 30ff 	mov.w	r0, #4294967295
 800e418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e41c:	6921      	ldr	r1, [r4, #16]
 800e41e:	464a      	mov	r2, r9
 800e420:	f7ff fd8c 	bl	800df3c <memcpy>
 800e424:	89a3      	ldrh	r3, [r4, #12]
 800e426:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e42e:	81a3      	strh	r3, [r4, #12]
 800e430:	6126      	str	r6, [r4, #16]
 800e432:	6165      	str	r5, [r4, #20]
 800e434:	444e      	add	r6, r9
 800e436:	eba5 0509 	sub.w	r5, r5, r9
 800e43a:	6026      	str	r6, [r4, #0]
 800e43c:	60a5      	str	r5, [r4, #8]
 800e43e:	463e      	mov	r6, r7
 800e440:	42be      	cmp	r6, r7
 800e442:	d900      	bls.n	800e446 <__ssputs_r+0x86>
 800e444:	463e      	mov	r6, r7
 800e446:	6820      	ldr	r0, [r4, #0]
 800e448:	4632      	mov	r2, r6
 800e44a:	4641      	mov	r1, r8
 800e44c:	f000 fe62 	bl	800f114 <memmove>
 800e450:	68a3      	ldr	r3, [r4, #8]
 800e452:	1b9b      	subs	r3, r3, r6
 800e454:	60a3      	str	r3, [r4, #8]
 800e456:	6823      	ldr	r3, [r4, #0]
 800e458:	4433      	add	r3, r6
 800e45a:	6023      	str	r3, [r4, #0]
 800e45c:	2000      	movs	r0, #0
 800e45e:	e7db      	b.n	800e418 <__ssputs_r+0x58>
 800e460:	462a      	mov	r2, r5
 800e462:	f000 fe71 	bl	800f148 <_realloc_r>
 800e466:	4606      	mov	r6, r0
 800e468:	2800      	cmp	r0, #0
 800e46a:	d1e1      	bne.n	800e430 <__ssputs_r+0x70>
 800e46c:	6921      	ldr	r1, [r4, #16]
 800e46e:	4650      	mov	r0, sl
 800e470:	f7ff fd7a 	bl	800df68 <_free_r>
 800e474:	e7c7      	b.n	800e406 <__ssputs_r+0x46>
	...

0800e478 <_svfiprintf_r>:
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	4698      	mov	r8, r3
 800e47e:	898b      	ldrh	r3, [r1, #12]
 800e480:	061b      	lsls	r3, r3, #24
 800e482:	b09d      	sub	sp, #116	; 0x74
 800e484:	4607      	mov	r7, r0
 800e486:	460d      	mov	r5, r1
 800e488:	4614      	mov	r4, r2
 800e48a:	d50e      	bpl.n	800e4aa <_svfiprintf_r+0x32>
 800e48c:	690b      	ldr	r3, [r1, #16]
 800e48e:	b963      	cbnz	r3, 800e4aa <_svfiprintf_r+0x32>
 800e490:	2140      	movs	r1, #64	; 0x40
 800e492:	f7ff fdd5 	bl	800e040 <_malloc_r>
 800e496:	6028      	str	r0, [r5, #0]
 800e498:	6128      	str	r0, [r5, #16]
 800e49a:	b920      	cbnz	r0, 800e4a6 <_svfiprintf_r+0x2e>
 800e49c:	230c      	movs	r3, #12
 800e49e:	603b      	str	r3, [r7, #0]
 800e4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a4:	e0d1      	b.n	800e64a <_svfiprintf_r+0x1d2>
 800e4a6:	2340      	movs	r3, #64	; 0x40
 800e4a8:	616b      	str	r3, [r5, #20]
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ae:	2320      	movs	r3, #32
 800e4b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4b8:	2330      	movs	r3, #48	; 0x30
 800e4ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e664 <_svfiprintf_r+0x1ec>
 800e4be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4c2:	f04f 0901 	mov.w	r9, #1
 800e4c6:	4623      	mov	r3, r4
 800e4c8:	469a      	mov	sl, r3
 800e4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ce:	b10a      	cbz	r2, 800e4d4 <_svfiprintf_r+0x5c>
 800e4d0:	2a25      	cmp	r2, #37	; 0x25
 800e4d2:	d1f9      	bne.n	800e4c8 <_svfiprintf_r+0x50>
 800e4d4:	ebba 0b04 	subs.w	fp, sl, r4
 800e4d8:	d00b      	beq.n	800e4f2 <_svfiprintf_r+0x7a>
 800e4da:	465b      	mov	r3, fp
 800e4dc:	4622      	mov	r2, r4
 800e4de:	4629      	mov	r1, r5
 800e4e0:	4638      	mov	r0, r7
 800e4e2:	f7ff ff6d 	bl	800e3c0 <__ssputs_r>
 800e4e6:	3001      	adds	r0, #1
 800e4e8:	f000 80aa 	beq.w	800e640 <_svfiprintf_r+0x1c8>
 800e4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4ee:	445a      	add	r2, fp
 800e4f0:	9209      	str	r2, [sp, #36]	; 0x24
 800e4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f000 80a2 	beq.w	800e640 <_svfiprintf_r+0x1c8>
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e506:	f10a 0a01 	add.w	sl, sl, #1
 800e50a:	9304      	str	r3, [sp, #16]
 800e50c:	9307      	str	r3, [sp, #28]
 800e50e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e512:	931a      	str	r3, [sp, #104]	; 0x68
 800e514:	4654      	mov	r4, sl
 800e516:	2205      	movs	r2, #5
 800e518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e51c:	4851      	ldr	r0, [pc, #324]	; (800e664 <_svfiprintf_r+0x1ec>)
 800e51e:	f7f1 fe6f 	bl	8000200 <memchr>
 800e522:	9a04      	ldr	r2, [sp, #16]
 800e524:	b9d8      	cbnz	r0, 800e55e <_svfiprintf_r+0xe6>
 800e526:	06d0      	lsls	r0, r2, #27
 800e528:	bf44      	itt	mi
 800e52a:	2320      	movmi	r3, #32
 800e52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e530:	0711      	lsls	r1, r2, #28
 800e532:	bf44      	itt	mi
 800e534:	232b      	movmi	r3, #43	; 0x2b
 800e536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e53a:	f89a 3000 	ldrb.w	r3, [sl]
 800e53e:	2b2a      	cmp	r3, #42	; 0x2a
 800e540:	d015      	beq.n	800e56e <_svfiprintf_r+0xf6>
 800e542:	9a07      	ldr	r2, [sp, #28]
 800e544:	4654      	mov	r4, sl
 800e546:	2000      	movs	r0, #0
 800e548:	f04f 0c0a 	mov.w	ip, #10
 800e54c:	4621      	mov	r1, r4
 800e54e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e552:	3b30      	subs	r3, #48	; 0x30
 800e554:	2b09      	cmp	r3, #9
 800e556:	d94e      	bls.n	800e5f6 <_svfiprintf_r+0x17e>
 800e558:	b1b0      	cbz	r0, 800e588 <_svfiprintf_r+0x110>
 800e55a:	9207      	str	r2, [sp, #28]
 800e55c:	e014      	b.n	800e588 <_svfiprintf_r+0x110>
 800e55e:	eba0 0308 	sub.w	r3, r0, r8
 800e562:	fa09 f303 	lsl.w	r3, r9, r3
 800e566:	4313      	orrs	r3, r2
 800e568:	9304      	str	r3, [sp, #16]
 800e56a:	46a2      	mov	sl, r4
 800e56c:	e7d2      	b.n	800e514 <_svfiprintf_r+0x9c>
 800e56e:	9b03      	ldr	r3, [sp, #12]
 800e570:	1d19      	adds	r1, r3, #4
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	9103      	str	r1, [sp, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	bfbb      	ittet	lt
 800e57a:	425b      	neglt	r3, r3
 800e57c:	f042 0202 	orrlt.w	r2, r2, #2
 800e580:	9307      	strge	r3, [sp, #28]
 800e582:	9307      	strlt	r3, [sp, #28]
 800e584:	bfb8      	it	lt
 800e586:	9204      	strlt	r2, [sp, #16]
 800e588:	7823      	ldrb	r3, [r4, #0]
 800e58a:	2b2e      	cmp	r3, #46	; 0x2e
 800e58c:	d10c      	bne.n	800e5a8 <_svfiprintf_r+0x130>
 800e58e:	7863      	ldrb	r3, [r4, #1]
 800e590:	2b2a      	cmp	r3, #42	; 0x2a
 800e592:	d135      	bne.n	800e600 <_svfiprintf_r+0x188>
 800e594:	9b03      	ldr	r3, [sp, #12]
 800e596:	1d1a      	adds	r2, r3, #4
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	9203      	str	r2, [sp, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	bfb8      	it	lt
 800e5a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5a4:	3402      	adds	r4, #2
 800e5a6:	9305      	str	r3, [sp, #20]
 800e5a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e674 <_svfiprintf_r+0x1fc>
 800e5ac:	7821      	ldrb	r1, [r4, #0]
 800e5ae:	2203      	movs	r2, #3
 800e5b0:	4650      	mov	r0, sl
 800e5b2:	f7f1 fe25 	bl	8000200 <memchr>
 800e5b6:	b140      	cbz	r0, 800e5ca <_svfiprintf_r+0x152>
 800e5b8:	2340      	movs	r3, #64	; 0x40
 800e5ba:	eba0 000a 	sub.w	r0, r0, sl
 800e5be:	fa03 f000 	lsl.w	r0, r3, r0
 800e5c2:	9b04      	ldr	r3, [sp, #16]
 800e5c4:	4303      	orrs	r3, r0
 800e5c6:	3401      	adds	r4, #1
 800e5c8:	9304      	str	r3, [sp, #16]
 800e5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ce:	4826      	ldr	r0, [pc, #152]	; (800e668 <_svfiprintf_r+0x1f0>)
 800e5d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5d4:	2206      	movs	r2, #6
 800e5d6:	f7f1 fe13 	bl	8000200 <memchr>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	d038      	beq.n	800e650 <_svfiprintf_r+0x1d8>
 800e5de:	4b23      	ldr	r3, [pc, #140]	; (800e66c <_svfiprintf_r+0x1f4>)
 800e5e0:	bb1b      	cbnz	r3, 800e62a <_svfiprintf_r+0x1b2>
 800e5e2:	9b03      	ldr	r3, [sp, #12]
 800e5e4:	3307      	adds	r3, #7
 800e5e6:	f023 0307 	bic.w	r3, r3, #7
 800e5ea:	3308      	adds	r3, #8
 800e5ec:	9303      	str	r3, [sp, #12]
 800e5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5f0:	4433      	add	r3, r6
 800e5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e5f4:	e767      	b.n	800e4c6 <_svfiprintf_r+0x4e>
 800e5f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5fa:	460c      	mov	r4, r1
 800e5fc:	2001      	movs	r0, #1
 800e5fe:	e7a5      	b.n	800e54c <_svfiprintf_r+0xd4>
 800e600:	2300      	movs	r3, #0
 800e602:	3401      	adds	r4, #1
 800e604:	9305      	str	r3, [sp, #20]
 800e606:	4619      	mov	r1, r3
 800e608:	f04f 0c0a 	mov.w	ip, #10
 800e60c:	4620      	mov	r0, r4
 800e60e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e612:	3a30      	subs	r2, #48	; 0x30
 800e614:	2a09      	cmp	r2, #9
 800e616:	d903      	bls.n	800e620 <_svfiprintf_r+0x1a8>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d0c5      	beq.n	800e5a8 <_svfiprintf_r+0x130>
 800e61c:	9105      	str	r1, [sp, #20]
 800e61e:	e7c3      	b.n	800e5a8 <_svfiprintf_r+0x130>
 800e620:	fb0c 2101 	mla	r1, ip, r1, r2
 800e624:	4604      	mov	r4, r0
 800e626:	2301      	movs	r3, #1
 800e628:	e7f0      	b.n	800e60c <_svfiprintf_r+0x194>
 800e62a:	ab03      	add	r3, sp, #12
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	462a      	mov	r2, r5
 800e630:	4b0f      	ldr	r3, [pc, #60]	; (800e670 <_svfiprintf_r+0x1f8>)
 800e632:	a904      	add	r1, sp, #16
 800e634:	4638      	mov	r0, r7
 800e636:	f3af 8000 	nop.w
 800e63a:	1c42      	adds	r2, r0, #1
 800e63c:	4606      	mov	r6, r0
 800e63e:	d1d6      	bne.n	800e5ee <_svfiprintf_r+0x176>
 800e640:	89ab      	ldrh	r3, [r5, #12]
 800e642:	065b      	lsls	r3, r3, #25
 800e644:	f53f af2c 	bmi.w	800e4a0 <_svfiprintf_r+0x28>
 800e648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e64a:	b01d      	add	sp, #116	; 0x74
 800e64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e650:	ab03      	add	r3, sp, #12
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	462a      	mov	r2, r5
 800e656:	4b06      	ldr	r3, [pc, #24]	; (800e670 <_svfiprintf_r+0x1f8>)
 800e658:	a904      	add	r1, sp, #16
 800e65a:	4638      	mov	r0, r7
 800e65c:	f000 f9d4 	bl	800ea08 <_printf_i>
 800e660:	e7eb      	b.n	800e63a <_svfiprintf_r+0x1c2>
 800e662:	bf00      	nop
 800e664:	08011280 	.word	0x08011280
 800e668:	0801128a 	.word	0x0801128a
 800e66c:	00000000 	.word	0x00000000
 800e670:	0800e3c1 	.word	0x0800e3c1
 800e674:	08011286 	.word	0x08011286

0800e678 <__sfputc_r>:
 800e678:	6893      	ldr	r3, [r2, #8]
 800e67a:	3b01      	subs	r3, #1
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	b410      	push	{r4}
 800e680:	6093      	str	r3, [r2, #8]
 800e682:	da08      	bge.n	800e696 <__sfputc_r+0x1e>
 800e684:	6994      	ldr	r4, [r2, #24]
 800e686:	42a3      	cmp	r3, r4
 800e688:	db01      	blt.n	800e68e <__sfputc_r+0x16>
 800e68a:	290a      	cmp	r1, #10
 800e68c:	d103      	bne.n	800e696 <__sfputc_r+0x1e>
 800e68e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e692:	f000 bb23 	b.w	800ecdc <__swbuf_r>
 800e696:	6813      	ldr	r3, [r2, #0]
 800e698:	1c58      	adds	r0, r3, #1
 800e69a:	6010      	str	r0, [r2, #0]
 800e69c:	7019      	strb	r1, [r3, #0]
 800e69e:	4608      	mov	r0, r1
 800e6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6a4:	4770      	bx	lr

0800e6a6 <__sfputs_r>:
 800e6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6a8:	4606      	mov	r6, r0
 800e6aa:	460f      	mov	r7, r1
 800e6ac:	4614      	mov	r4, r2
 800e6ae:	18d5      	adds	r5, r2, r3
 800e6b0:	42ac      	cmp	r4, r5
 800e6b2:	d101      	bne.n	800e6b8 <__sfputs_r+0x12>
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	e007      	b.n	800e6c8 <__sfputs_r+0x22>
 800e6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6bc:	463a      	mov	r2, r7
 800e6be:	4630      	mov	r0, r6
 800e6c0:	f7ff ffda 	bl	800e678 <__sfputc_r>
 800e6c4:	1c43      	adds	r3, r0, #1
 800e6c6:	d1f3      	bne.n	800e6b0 <__sfputs_r+0xa>
 800e6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6cc <_vfiprintf_r>:
 800e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d0:	460d      	mov	r5, r1
 800e6d2:	b09d      	sub	sp, #116	; 0x74
 800e6d4:	4614      	mov	r4, r2
 800e6d6:	4698      	mov	r8, r3
 800e6d8:	4606      	mov	r6, r0
 800e6da:	b118      	cbz	r0, 800e6e4 <_vfiprintf_r+0x18>
 800e6dc:	6983      	ldr	r3, [r0, #24]
 800e6de:	b90b      	cbnz	r3, 800e6e4 <_vfiprintf_r+0x18>
 800e6e0:	f7ff fdc2 	bl	800e268 <__sinit>
 800e6e4:	4b89      	ldr	r3, [pc, #548]	; (800e90c <_vfiprintf_r+0x240>)
 800e6e6:	429d      	cmp	r5, r3
 800e6e8:	d11b      	bne.n	800e722 <_vfiprintf_r+0x56>
 800e6ea:	6875      	ldr	r5, [r6, #4]
 800e6ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6ee:	07d9      	lsls	r1, r3, #31
 800e6f0:	d405      	bmi.n	800e6fe <_vfiprintf_r+0x32>
 800e6f2:	89ab      	ldrh	r3, [r5, #12]
 800e6f4:	059a      	lsls	r2, r3, #22
 800e6f6:	d402      	bmi.n	800e6fe <_vfiprintf_r+0x32>
 800e6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6fa:	f7ff fe53 	bl	800e3a4 <__retarget_lock_acquire_recursive>
 800e6fe:	89ab      	ldrh	r3, [r5, #12]
 800e700:	071b      	lsls	r3, r3, #28
 800e702:	d501      	bpl.n	800e708 <_vfiprintf_r+0x3c>
 800e704:	692b      	ldr	r3, [r5, #16]
 800e706:	b9eb      	cbnz	r3, 800e744 <_vfiprintf_r+0x78>
 800e708:	4629      	mov	r1, r5
 800e70a:	4630      	mov	r0, r6
 800e70c:	f000 fb4a 	bl	800eda4 <__swsetup_r>
 800e710:	b1c0      	cbz	r0, 800e744 <_vfiprintf_r+0x78>
 800e712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e714:	07dc      	lsls	r4, r3, #31
 800e716:	d50e      	bpl.n	800e736 <_vfiprintf_r+0x6a>
 800e718:	f04f 30ff 	mov.w	r0, #4294967295
 800e71c:	b01d      	add	sp, #116	; 0x74
 800e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e722:	4b7b      	ldr	r3, [pc, #492]	; (800e910 <_vfiprintf_r+0x244>)
 800e724:	429d      	cmp	r5, r3
 800e726:	d101      	bne.n	800e72c <_vfiprintf_r+0x60>
 800e728:	68b5      	ldr	r5, [r6, #8]
 800e72a:	e7df      	b.n	800e6ec <_vfiprintf_r+0x20>
 800e72c:	4b79      	ldr	r3, [pc, #484]	; (800e914 <_vfiprintf_r+0x248>)
 800e72e:	429d      	cmp	r5, r3
 800e730:	bf08      	it	eq
 800e732:	68f5      	ldreq	r5, [r6, #12]
 800e734:	e7da      	b.n	800e6ec <_vfiprintf_r+0x20>
 800e736:	89ab      	ldrh	r3, [r5, #12]
 800e738:	0598      	lsls	r0, r3, #22
 800e73a:	d4ed      	bmi.n	800e718 <_vfiprintf_r+0x4c>
 800e73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e73e:	f7ff fe32 	bl	800e3a6 <__retarget_lock_release_recursive>
 800e742:	e7e9      	b.n	800e718 <_vfiprintf_r+0x4c>
 800e744:	2300      	movs	r3, #0
 800e746:	9309      	str	r3, [sp, #36]	; 0x24
 800e748:	2320      	movs	r3, #32
 800e74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e752:	2330      	movs	r3, #48	; 0x30
 800e754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e918 <_vfiprintf_r+0x24c>
 800e758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e75c:	f04f 0901 	mov.w	r9, #1
 800e760:	4623      	mov	r3, r4
 800e762:	469a      	mov	sl, r3
 800e764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e768:	b10a      	cbz	r2, 800e76e <_vfiprintf_r+0xa2>
 800e76a:	2a25      	cmp	r2, #37	; 0x25
 800e76c:	d1f9      	bne.n	800e762 <_vfiprintf_r+0x96>
 800e76e:	ebba 0b04 	subs.w	fp, sl, r4
 800e772:	d00b      	beq.n	800e78c <_vfiprintf_r+0xc0>
 800e774:	465b      	mov	r3, fp
 800e776:	4622      	mov	r2, r4
 800e778:	4629      	mov	r1, r5
 800e77a:	4630      	mov	r0, r6
 800e77c:	f7ff ff93 	bl	800e6a6 <__sfputs_r>
 800e780:	3001      	adds	r0, #1
 800e782:	f000 80aa 	beq.w	800e8da <_vfiprintf_r+0x20e>
 800e786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e788:	445a      	add	r2, fp
 800e78a:	9209      	str	r2, [sp, #36]	; 0x24
 800e78c:	f89a 3000 	ldrb.w	r3, [sl]
 800e790:	2b00      	cmp	r3, #0
 800e792:	f000 80a2 	beq.w	800e8da <_vfiprintf_r+0x20e>
 800e796:	2300      	movs	r3, #0
 800e798:	f04f 32ff 	mov.w	r2, #4294967295
 800e79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7a0:	f10a 0a01 	add.w	sl, sl, #1
 800e7a4:	9304      	str	r3, [sp, #16]
 800e7a6:	9307      	str	r3, [sp, #28]
 800e7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800e7ae:	4654      	mov	r4, sl
 800e7b0:	2205      	movs	r2, #5
 800e7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7b6:	4858      	ldr	r0, [pc, #352]	; (800e918 <_vfiprintf_r+0x24c>)
 800e7b8:	f7f1 fd22 	bl	8000200 <memchr>
 800e7bc:	9a04      	ldr	r2, [sp, #16]
 800e7be:	b9d8      	cbnz	r0, 800e7f8 <_vfiprintf_r+0x12c>
 800e7c0:	06d1      	lsls	r1, r2, #27
 800e7c2:	bf44      	itt	mi
 800e7c4:	2320      	movmi	r3, #32
 800e7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7ca:	0713      	lsls	r3, r2, #28
 800e7cc:	bf44      	itt	mi
 800e7ce:	232b      	movmi	r3, #43	; 0x2b
 800e7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800e7da:	d015      	beq.n	800e808 <_vfiprintf_r+0x13c>
 800e7dc:	9a07      	ldr	r2, [sp, #28]
 800e7de:	4654      	mov	r4, sl
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	f04f 0c0a 	mov.w	ip, #10
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7ec:	3b30      	subs	r3, #48	; 0x30
 800e7ee:	2b09      	cmp	r3, #9
 800e7f0:	d94e      	bls.n	800e890 <_vfiprintf_r+0x1c4>
 800e7f2:	b1b0      	cbz	r0, 800e822 <_vfiprintf_r+0x156>
 800e7f4:	9207      	str	r2, [sp, #28]
 800e7f6:	e014      	b.n	800e822 <_vfiprintf_r+0x156>
 800e7f8:	eba0 0308 	sub.w	r3, r0, r8
 800e7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800e800:	4313      	orrs	r3, r2
 800e802:	9304      	str	r3, [sp, #16]
 800e804:	46a2      	mov	sl, r4
 800e806:	e7d2      	b.n	800e7ae <_vfiprintf_r+0xe2>
 800e808:	9b03      	ldr	r3, [sp, #12]
 800e80a:	1d19      	adds	r1, r3, #4
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	9103      	str	r1, [sp, #12]
 800e810:	2b00      	cmp	r3, #0
 800e812:	bfbb      	ittet	lt
 800e814:	425b      	neglt	r3, r3
 800e816:	f042 0202 	orrlt.w	r2, r2, #2
 800e81a:	9307      	strge	r3, [sp, #28]
 800e81c:	9307      	strlt	r3, [sp, #28]
 800e81e:	bfb8      	it	lt
 800e820:	9204      	strlt	r2, [sp, #16]
 800e822:	7823      	ldrb	r3, [r4, #0]
 800e824:	2b2e      	cmp	r3, #46	; 0x2e
 800e826:	d10c      	bne.n	800e842 <_vfiprintf_r+0x176>
 800e828:	7863      	ldrb	r3, [r4, #1]
 800e82a:	2b2a      	cmp	r3, #42	; 0x2a
 800e82c:	d135      	bne.n	800e89a <_vfiprintf_r+0x1ce>
 800e82e:	9b03      	ldr	r3, [sp, #12]
 800e830:	1d1a      	adds	r2, r3, #4
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	9203      	str	r2, [sp, #12]
 800e836:	2b00      	cmp	r3, #0
 800e838:	bfb8      	it	lt
 800e83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e83e:	3402      	adds	r4, #2
 800e840:	9305      	str	r3, [sp, #20]
 800e842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e928 <_vfiprintf_r+0x25c>
 800e846:	7821      	ldrb	r1, [r4, #0]
 800e848:	2203      	movs	r2, #3
 800e84a:	4650      	mov	r0, sl
 800e84c:	f7f1 fcd8 	bl	8000200 <memchr>
 800e850:	b140      	cbz	r0, 800e864 <_vfiprintf_r+0x198>
 800e852:	2340      	movs	r3, #64	; 0x40
 800e854:	eba0 000a 	sub.w	r0, r0, sl
 800e858:	fa03 f000 	lsl.w	r0, r3, r0
 800e85c:	9b04      	ldr	r3, [sp, #16]
 800e85e:	4303      	orrs	r3, r0
 800e860:	3401      	adds	r4, #1
 800e862:	9304      	str	r3, [sp, #16]
 800e864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e868:	482c      	ldr	r0, [pc, #176]	; (800e91c <_vfiprintf_r+0x250>)
 800e86a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e86e:	2206      	movs	r2, #6
 800e870:	f7f1 fcc6 	bl	8000200 <memchr>
 800e874:	2800      	cmp	r0, #0
 800e876:	d03f      	beq.n	800e8f8 <_vfiprintf_r+0x22c>
 800e878:	4b29      	ldr	r3, [pc, #164]	; (800e920 <_vfiprintf_r+0x254>)
 800e87a:	bb1b      	cbnz	r3, 800e8c4 <_vfiprintf_r+0x1f8>
 800e87c:	9b03      	ldr	r3, [sp, #12]
 800e87e:	3307      	adds	r3, #7
 800e880:	f023 0307 	bic.w	r3, r3, #7
 800e884:	3308      	adds	r3, #8
 800e886:	9303      	str	r3, [sp, #12]
 800e888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e88a:	443b      	add	r3, r7
 800e88c:	9309      	str	r3, [sp, #36]	; 0x24
 800e88e:	e767      	b.n	800e760 <_vfiprintf_r+0x94>
 800e890:	fb0c 3202 	mla	r2, ip, r2, r3
 800e894:	460c      	mov	r4, r1
 800e896:	2001      	movs	r0, #1
 800e898:	e7a5      	b.n	800e7e6 <_vfiprintf_r+0x11a>
 800e89a:	2300      	movs	r3, #0
 800e89c:	3401      	adds	r4, #1
 800e89e:	9305      	str	r3, [sp, #20]
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	f04f 0c0a 	mov.w	ip, #10
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8ac:	3a30      	subs	r2, #48	; 0x30
 800e8ae:	2a09      	cmp	r2, #9
 800e8b0:	d903      	bls.n	800e8ba <_vfiprintf_r+0x1ee>
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d0c5      	beq.n	800e842 <_vfiprintf_r+0x176>
 800e8b6:	9105      	str	r1, [sp, #20]
 800e8b8:	e7c3      	b.n	800e842 <_vfiprintf_r+0x176>
 800e8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8be:	4604      	mov	r4, r0
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	e7f0      	b.n	800e8a6 <_vfiprintf_r+0x1da>
 800e8c4:	ab03      	add	r3, sp, #12
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	462a      	mov	r2, r5
 800e8ca:	4b16      	ldr	r3, [pc, #88]	; (800e924 <_vfiprintf_r+0x258>)
 800e8cc:	a904      	add	r1, sp, #16
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	f3af 8000 	nop.w
 800e8d4:	4607      	mov	r7, r0
 800e8d6:	1c78      	adds	r0, r7, #1
 800e8d8:	d1d6      	bne.n	800e888 <_vfiprintf_r+0x1bc>
 800e8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8dc:	07d9      	lsls	r1, r3, #31
 800e8de:	d405      	bmi.n	800e8ec <_vfiprintf_r+0x220>
 800e8e0:	89ab      	ldrh	r3, [r5, #12]
 800e8e2:	059a      	lsls	r2, r3, #22
 800e8e4:	d402      	bmi.n	800e8ec <_vfiprintf_r+0x220>
 800e8e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8e8:	f7ff fd5d 	bl	800e3a6 <__retarget_lock_release_recursive>
 800e8ec:	89ab      	ldrh	r3, [r5, #12]
 800e8ee:	065b      	lsls	r3, r3, #25
 800e8f0:	f53f af12 	bmi.w	800e718 <_vfiprintf_r+0x4c>
 800e8f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8f6:	e711      	b.n	800e71c <_vfiprintf_r+0x50>
 800e8f8:	ab03      	add	r3, sp, #12
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	462a      	mov	r2, r5
 800e8fe:	4b09      	ldr	r3, [pc, #36]	; (800e924 <_vfiprintf_r+0x258>)
 800e900:	a904      	add	r1, sp, #16
 800e902:	4630      	mov	r0, r6
 800e904:	f000 f880 	bl	800ea08 <_printf_i>
 800e908:	e7e4      	b.n	800e8d4 <_vfiprintf_r+0x208>
 800e90a:	bf00      	nop
 800e90c:	08011240 	.word	0x08011240
 800e910:	08011260 	.word	0x08011260
 800e914:	08011220 	.word	0x08011220
 800e918:	08011280 	.word	0x08011280
 800e91c:	0801128a 	.word	0x0801128a
 800e920:	00000000 	.word	0x00000000
 800e924:	0800e6a7 	.word	0x0800e6a7
 800e928:	08011286 	.word	0x08011286

0800e92c <_printf_common>:
 800e92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e930:	4616      	mov	r6, r2
 800e932:	4699      	mov	r9, r3
 800e934:	688a      	ldr	r2, [r1, #8]
 800e936:	690b      	ldr	r3, [r1, #16]
 800e938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e93c:	4293      	cmp	r3, r2
 800e93e:	bfb8      	it	lt
 800e940:	4613      	movlt	r3, r2
 800e942:	6033      	str	r3, [r6, #0]
 800e944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e948:	4607      	mov	r7, r0
 800e94a:	460c      	mov	r4, r1
 800e94c:	b10a      	cbz	r2, 800e952 <_printf_common+0x26>
 800e94e:	3301      	adds	r3, #1
 800e950:	6033      	str	r3, [r6, #0]
 800e952:	6823      	ldr	r3, [r4, #0]
 800e954:	0699      	lsls	r1, r3, #26
 800e956:	bf42      	ittt	mi
 800e958:	6833      	ldrmi	r3, [r6, #0]
 800e95a:	3302      	addmi	r3, #2
 800e95c:	6033      	strmi	r3, [r6, #0]
 800e95e:	6825      	ldr	r5, [r4, #0]
 800e960:	f015 0506 	ands.w	r5, r5, #6
 800e964:	d106      	bne.n	800e974 <_printf_common+0x48>
 800e966:	f104 0a19 	add.w	sl, r4, #25
 800e96a:	68e3      	ldr	r3, [r4, #12]
 800e96c:	6832      	ldr	r2, [r6, #0]
 800e96e:	1a9b      	subs	r3, r3, r2
 800e970:	42ab      	cmp	r3, r5
 800e972:	dc26      	bgt.n	800e9c2 <_printf_common+0x96>
 800e974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e978:	1e13      	subs	r3, r2, #0
 800e97a:	6822      	ldr	r2, [r4, #0]
 800e97c:	bf18      	it	ne
 800e97e:	2301      	movne	r3, #1
 800e980:	0692      	lsls	r2, r2, #26
 800e982:	d42b      	bmi.n	800e9dc <_printf_common+0xb0>
 800e984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e988:	4649      	mov	r1, r9
 800e98a:	4638      	mov	r0, r7
 800e98c:	47c0      	blx	r8
 800e98e:	3001      	adds	r0, #1
 800e990:	d01e      	beq.n	800e9d0 <_printf_common+0xa4>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	68e5      	ldr	r5, [r4, #12]
 800e996:	6832      	ldr	r2, [r6, #0]
 800e998:	f003 0306 	and.w	r3, r3, #6
 800e99c:	2b04      	cmp	r3, #4
 800e99e:	bf08      	it	eq
 800e9a0:	1aad      	subeq	r5, r5, r2
 800e9a2:	68a3      	ldr	r3, [r4, #8]
 800e9a4:	6922      	ldr	r2, [r4, #16]
 800e9a6:	bf0c      	ite	eq
 800e9a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9ac:	2500      	movne	r5, #0
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	bfc4      	itt	gt
 800e9b2:	1a9b      	subgt	r3, r3, r2
 800e9b4:	18ed      	addgt	r5, r5, r3
 800e9b6:	2600      	movs	r6, #0
 800e9b8:	341a      	adds	r4, #26
 800e9ba:	42b5      	cmp	r5, r6
 800e9bc:	d11a      	bne.n	800e9f4 <_printf_common+0xc8>
 800e9be:	2000      	movs	r0, #0
 800e9c0:	e008      	b.n	800e9d4 <_printf_common+0xa8>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	4652      	mov	r2, sl
 800e9c6:	4649      	mov	r1, r9
 800e9c8:	4638      	mov	r0, r7
 800e9ca:	47c0      	blx	r8
 800e9cc:	3001      	adds	r0, #1
 800e9ce:	d103      	bne.n	800e9d8 <_printf_common+0xac>
 800e9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9d8:	3501      	adds	r5, #1
 800e9da:	e7c6      	b.n	800e96a <_printf_common+0x3e>
 800e9dc:	18e1      	adds	r1, r4, r3
 800e9de:	1c5a      	adds	r2, r3, #1
 800e9e0:	2030      	movs	r0, #48	; 0x30
 800e9e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9e6:	4422      	add	r2, r4
 800e9e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9f0:	3302      	adds	r3, #2
 800e9f2:	e7c7      	b.n	800e984 <_printf_common+0x58>
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	4622      	mov	r2, r4
 800e9f8:	4649      	mov	r1, r9
 800e9fa:	4638      	mov	r0, r7
 800e9fc:	47c0      	blx	r8
 800e9fe:	3001      	adds	r0, #1
 800ea00:	d0e6      	beq.n	800e9d0 <_printf_common+0xa4>
 800ea02:	3601      	adds	r6, #1
 800ea04:	e7d9      	b.n	800e9ba <_printf_common+0x8e>
	...

0800ea08 <_printf_i>:
 800ea08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea0c:	7e0f      	ldrb	r7, [r1, #24]
 800ea0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea10:	2f78      	cmp	r7, #120	; 0x78
 800ea12:	4691      	mov	r9, r2
 800ea14:	4680      	mov	r8, r0
 800ea16:	460c      	mov	r4, r1
 800ea18:	469a      	mov	sl, r3
 800ea1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea1e:	d807      	bhi.n	800ea30 <_printf_i+0x28>
 800ea20:	2f62      	cmp	r7, #98	; 0x62
 800ea22:	d80a      	bhi.n	800ea3a <_printf_i+0x32>
 800ea24:	2f00      	cmp	r7, #0
 800ea26:	f000 80d8 	beq.w	800ebda <_printf_i+0x1d2>
 800ea2a:	2f58      	cmp	r7, #88	; 0x58
 800ea2c:	f000 80a3 	beq.w	800eb76 <_printf_i+0x16e>
 800ea30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea38:	e03a      	b.n	800eab0 <_printf_i+0xa8>
 800ea3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea3e:	2b15      	cmp	r3, #21
 800ea40:	d8f6      	bhi.n	800ea30 <_printf_i+0x28>
 800ea42:	a101      	add	r1, pc, #4	; (adr r1, 800ea48 <_printf_i+0x40>)
 800ea44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea48:	0800eaa1 	.word	0x0800eaa1
 800ea4c:	0800eab5 	.word	0x0800eab5
 800ea50:	0800ea31 	.word	0x0800ea31
 800ea54:	0800ea31 	.word	0x0800ea31
 800ea58:	0800ea31 	.word	0x0800ea31
 800ea5c:	0800ea31 	.word	0x0800ea31
 800ea60:	0800eab5 	.word	0x0800eab5
 800ea64:	0800ea31 	.word	0x0800ea31
 800ea68:	0800ea31 	.word	0x0800ea31
 800ea6c:	0800ea31 	.word	0x0800ea31
 800ea70:	0800ea31 	.word	0x0800ea31
 800ea74:	0800ebc1 	.word	0x0800ebc1
 800ea78:	0800eae5 	.word	0x0800eae5
 800ea7c:	0800eba3 	.word	0x0800eba3
 800ea80:	0800ea31 	.word	0x0800ea31
 800ea84:	0800ea31 	.word	0x0800ea31
 800ea88:	0800ebe3 	.word	0x0800ebe3
 800ea8c:	0800ea31 	.word	0x0800ea31
 800ea90:	0800eae5 	.word	0x0800eae5
 800ea94:	0800ea31 	.word	0x0800ea31
 800ea98:	0800ea31 	.word	0x0800ea31
 800ea9c:	0800ebab 	.word	0x0800ebab
 800eaa0:	682b      	ldr	r3, [r5, #0]
 800eaa2:	1d1a      	adds	r2, r3, #4
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	602a      	str	r2, [r5, #0]
 800eaa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eaac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eab0:	2301      	movs	r3, #1
 800eab2:	e0a3      	b.n	800ebfc <_printf_i+0x1f4>
 800eab4:	6820      	ldr	r0, [r4, #0]
 800eab6:	6829      	ldr	r1, [r5, #0]
 800eab8:	0606      	lsls	r6, r0, #24
 800eaba:	f101 0304 	add.w	r3, r1, #4
 800eabe:	d50a      	bpl.n	800ead6 <_printf_i+0xce>
 800eac0:	680e      	ldr	r6, [r1, #0]
 800eac2:	602b      	str	r3, [r5, #0]
 800eac4:	2e00      	cmp	r6, #0
 800eac6:	da03      	bge.n	800ead0 <_printf_i+0xc8>
 800eac8:	232d      	movs	r3, #45	; 0x2d
 800eaca:	4276      	negs	r6, r6
 800eacc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ead0:	485e      	ldr	r0, [pc, #376]	; (800ec4c <_printf_i+0x244>)
 800ead2:	230a      	movs	r3, #10
 800ead4:	e019      	b.n	800eb0a <_printf_i+0x102>
 800ead6:	680e      	ldr	r6, [r1, #0]
 800ead8:	602b      	str	r3, [r5, #0]
 800eada:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eade:	bf18      	it	ne
 800eae0:	b236      	sxthne	r6, r6
 800eae2:	e7ef      	b.n	800eac4 <_printf_i+0xbc>
 800eae4:	682b      	ldr	r3, [r5, #0]
 800eae6:	6820      	ldr	r0, [r4, #0]
 800eae8:	1d19      	adds	r1, r3, #4
 800eaea:	6029      	str	r1, [r5, #0]
 800eaec:	0601      	lsls	r1, r0, #24
 800eaee:	d501      	bpl.n	800eaf4 <_printf_i+0xec>
 800eaf0:	681e      	ldr	r6, [r3, #0]
 800eaf2:	e002      	b.n	800eafa <_printf_i+0xf2>
 800eaf4:	0646      	lsls	r6, r0, #25
 800eaf6:	d5fb      	bpl.n	800eaf0 <_printf_i+0xe8>
 800eaf8:	881e      	ldrh	r6, [r3, #0]
 800eafa:	4854      	ldr	r0, [pc, #336]	; (800ec4c <_printf_i+0x244>)
 800eafc:	2f6f      	cmp	r7, #111	; 0x6f
 800eafe:	bf0c      	ite	eq
 800eb00:	2308      	moveq	r3, #8
 800eb02:	230a      	movne	r3, #10
 800eb04:	2100      	movs	r1, #0
 800eb06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb0a:	6865      	ldr	r5, [r4, #4]
 800eb0c:	60a5      	str	r5, [r4, #8]
 800eb0e:	2d00      	cmp	r5, #0
 800eb10:	bfa2      	ittt	ge
 800eb12:	6821      	ldrge	r1, [r4, #0]
 800eb14:	f021 0104 	bicge.w	r1, r1, #4
 800eb18:	6021      	strge	r1, [r4, #0]
 800eb1a:	b90e      	cbnz	r6, 800eb20 <_printf_i+0x118>
 800eb1c:	2d00      	cmp	r5, #0
 800eb1e:	d04d      	beq.n	800ebbc <_printf_i+0x1b4>
 800eb20:	4615      	mov	r5, r2
 800eb22:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb26:	fb03 6711 	mls	r7, r3, r1, r6
 800eb2a:	5dc7      	ldrb	r7, [r0, r7]
 800eb2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb30:	4637      	mov	r7, r6
 800eb32:	42bb      	cmp	r3, r7
 800eb34:	460e      	mov	r6, r1
 800eb36:	d9f4      	bls.n	800eb22 <_printf_i+0x11a>
 800eb38:	2b08      	cmp	r3, #8
 800eb3a:	d10b      	bne.n	800eb54 <_printf_i+0x14c>
 800eb3c:	6823      	ldr	r3, [r4, #0]
 800eb3e:	07de      	lsls	r6, r3, #31
 800eb40:	d508      	bpl.n	800eb54 <_printf_i+0x14c>
 800eb42:	6923      	ldr	r3, [r4, #16]
 800eb44:	6861      	ldr	r1, [r4, #4]
 800eb46:	4299      	cmp	r1, r3
 800eb48:	bfde      	ittt	le
 800eb4a:	2330      	movle	r3, #48	; 0x30
 800eb4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb50:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb54:	1b52      	subs	r2, r2, r5
 800eb56:	6122      	str	r2, [r4, #16]
 800eb58:	f8cd a000 	str.w	sl, [sp]
 800eb5c:	464b      	mov	r3, r9
 800eb5e:	aa03      	add	r2, sp, #12
 800eb60:	4621      	mov	r1, r4
 800eb62:	4640      	mov	r0, r8
 800eb64:	f7ff fee2 	bl	800e92c <_printf_common>
 800eb68:	3001      	adds	r0, #1
 800eb6a:	d14c      	bne.n	800ec06 <_printf_i+0x1fe>
 800eb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb70:	b004      	add	sp, #16
 800eb72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb76:	4835      	ldr	r0, [pc, #212]	; (800ec4c <_printf_i+0x244>)
 800eb78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eb7c:	6829      	ldr	r1, [r5, #0]
 800eb7e:	6823      	ldr	r3, [r4, #0]
 800eb80:	f851 6b04 	ldr.w	r6, [r1], #4
 800eb84:	6029      	str	r1, [r5, #0]
 800eb86:	061d      	lsls	r5, r3, #24
 800eb88:	d514      	bpl.n	800ebb4 <_printf_i+0x1ac>
 800eb8a:	07df      	lsls	r7, r3, #31
 800eb8c:	bf44      	itt	mi
 800eb8e:	f043 0320 	orrmi.w	r3, r3, #32
 800eb92:	6023      	strmi	r3, [r4, #0]
 800eb94:	b91e      	cbnz	r6, 800eb9e <_printf_i+0x196>
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	f023 0320 	bic.w	r3, r3, #32
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	2310      	movs	r3, #16
 800eba0:	e7b0      	b.n	800eb04 <_printf_i+0xfc>
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	f043 0320 	orr.w	r3, r3, #32
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	2378      	movs	r3, #120	; 0x78
 800ebac:	4828      	ldr	r0, [pc, #160]	; (800ec50 <_printf_i+0x248>)
 800ebae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ebb2:	e7e3      	b.n	800eb7c <_printf_i+0x174>
 800ebb4:	0659      	lsls	r1, r3, #25
 800ebb6:	bf48      	it	mi
 800ebb8:	b2b6      	uxthmi	r6, r6
 800ebba:	e7e6      	b.n	800eb8a <_printf_i+0x182>
 800ebbc:	4615      	mov	r5, r2
 800ebbe:	e7bb      	b.n	800eb38 <_printf_i+0x130>
 800ebc0:	682b      	ldr	r3, [r5, #0]
 800ebc2:	6826      	ldr	r6, [r4, #0]
 800ebc4:	6961      	ldr	r1, [r4, #20]
 800ebc6:	1d18      	adds	r0, r3, #4
 800ebc8:	6028      	str	r0, [r5, #0]
 800ebca:	0635      	lsls	r5, r6, #24
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	d501      	bpl.n	800ebd4 <_printf_i+0x1cc>
 800ebd0:	6019      	str	r1, [r3, #0]
 800ebd2:	e002      	b.n	800ebda <_printf_i+0x1d2>
 800ebd4:	0670      	lsls	r0, r6, #25
 800ebd6:	d5fb      	bpl.n	800ebd0 <_printf_i+0x1c8>
 800ebd8:	8019      	strh	r1, [r3, #0]
 800ebda:	2300      	movs	r3, #0
 800ebdc:	6123      	str	r3, [r4, #16]
 800ebde:	4615      	mov	r5, r2
 800ebe0:	e7ba      	b.n	800eb58 <_printf_i+0x150>
 800ebe2:	682b      	ldr	r3, [r5, #0]
 800ebe4:	1d1a      	adds	r2, r3, #4
 800ebe6:	602a      	str	r2, [r5, #0]
 800ebe8:	681d      	ldr	r5, [r3, #0]
 800ebea:	6862      	ldr	r2, [r4, #4]
 800ebec:	2100      	movs	r1, #0
 800ebee:	4628      	mov	r0, r5
 800ebf0:	f7f1 fb06 	bl	8000200 <memchr>
 800ebf4:	b108      	cbz	r0, 800ebfa <_printf_i+0x1f2>
 800ebf6:	1b40      	subs	r0, r0, r5
 800ebf8:	6060      	str	r0, [r4, #4]
 800ebfa:	6863      	ldr	r3, [r4, #4]
 800ebfc:	6123      	str	r3, [r4, #16]
 800ebfe:	2300      	movs	r3, #0
 800ec00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec04:	e7a8      	b.n	800eb58 <_printf_i+0x150>
 800ec06:	6923      	ldr	r3, [r4, #16]
 800ec08:	462a      	mov	r2, r5
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	4640      	mov	r0, r8
 800ec0e:	47d0      	blx	sl
 800ec10:	3001      	adds	r0, #1
 800ec12:	d0ab      	beq.n	800eb6c <_printf_i+0x164>
 800ec14:	6823      	ldr	r3, [r4, #0]
 800ec16:	079b      	lsls	r3, r3, #30
 800ec18:	d413      	bmi.n	800ec42 <_printf_i+0x23a>
 800ec1a:	68e0      	ldr	r0, [r4, #12]
 800ec1c:	9b03      	ldr	r3, [sp, #12]
 800ec1e:	4298      	cmp	r0, r3
 800ec20:	bfb8      	it	lt
 800ec22:	4618      	movlt	r0, r3
 800ec24:	e7a4      	b.n	800eb70 <_printf_i+0x168>
 800ec26:	2301      	movs	r3, #1
 800ec28:	4632      	mov	r2, r6
 800ec2a:	4649      	mov	r1, r9
 800ec2c:	4640      	mov	r0, r8
 800ec2e:	47d0      	blx	sl
 800ec30:	3001      	adds	r0, #1
 800ec32:	d09b      	beq.n	800eb6c <_printf_i+0x164>
 800ec34:	3501      	adds	r5, #1
 800ec36:	68e3      	ldr	r3, [r4, #12]
 800ec38:	9903      	ldr	r1, [sp, #12]
 800ec3a:	1a5b      	subs	r3, r3, r1
 800ec3c:	42ab      	cmp	r3, r5
 800ec3e:	dcf2      	bgt.n	800ec26 <_printf_i+0x21e>
 800ec40:	e7eb      	b.n	800ec1a <_printf_i+0x212>
 800ec42:	2500      	movs	r5, #0
 800ec44:	f104 0619 	add.w	r6, r4, #25
 800ec48:	e7f5      	b.n	800ec36 <_printf_i+0x22e>
 800ec4a:	bf00      	nop
 800ec4c:	08011291 	.word	0x08011291
 800ec50:	080112a2 	.word	0x080112a2

0800ec54 <__sread>:
 800ec54:	b510      	push	{r4, lr}
 800ec56:	460c      	mov	r4, r1
 800ec58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec5c:	f000 faa4 	bl	800f1a8 <_read_r>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	bfab      	itete	ge
 800ec64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec66:	89a3      	ldrhlt	r3, [r4, #12]
 800ec68:	181b      	addge	r3, r3, r0
 800ec6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec6e:	bfac      	ite	ge
 800ec70:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec72:	81a3      	strhlt	r3, [r4, #12]
 800ec74:	bd10      	pop	{r4, pc}

0800ec76 <__swrite>:
 800ec76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec7a:	461f      	mov	r7, r3
 800ec7c:	898b      	ldrh	r3, [r1, #12]
 800ec7e:	05db      	lsls	r3, r3, #23
 800ec80:	4605      	mov	r5, r0
 800ec82:	460c      	mov	r4, r1
 800ec84:	4616      	mov	r6, r2
 800ec86:	d505      	bpl.n	800ec94 <__swrite+0x1e>
 800ec88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f000 f9c8 	bl	800f024 <_lseek_r>
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec9e:	81a3      	strh	r3, [r4, #12]
 800eca0:	4632      	mov	r2, r6
 800eca2:	463b      	mov	r3, r7
 800eca4:	4628      	mov	r0, r5
 800eca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecaa:	f000 b869 	b.w	800ed80 <_write_r>

0800ecae <__sseek>:
 800ecae:	b510      	push	{r4, lr}
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb6:	f000 f9b5 	bl	800f024 <_lseek_r>
 800ecba:	1c43      	adds	r3, r0, #1
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	bf15      	itete	ne
 800ecc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ecc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ecc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecca:	81a3      	strheq	r3, [r4, #12]
 800eccc:	bf18      	it	ne
 800ecce:	81a3      	strhne	r3, [r4, #12]
 800ecd0:	bd10      	pop	{r4, pc}

0800ecd2 <__sclose>:
 800ecd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecd6:	f000 b8d3 	b.w	800ee80 <_close_r>
	...

0800ecdc <__swbuf_r>:
 800ecdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecde:	460e      	mov	r6, r1
 800ece0:	4614      	mov	r4, r2
 800ece2:	4605      	mov	r5, r0
 800ece4:	b118      	cbz	r0, 800ecee <__swbuf_r+0x12>
 800ece6:	6983      	ldr	r3, [r0, #24]
 800ece8:	b90b      	cbnz	r3, 800ecee <__swbuf_r+0x12>
 800ecea:	f7ff fabd 	bl	800e268 <__sinit>
 800ecee:	4b21      	ldr	r3, [pc, #132]	; (800ed74 <__swbuf_r+0x98>)
 800ecf0:	429c      	cmp	r4, r3
 800ecf2:	d12b      	bne.n	800ed4c <__swbuf_r+0x70>
 800ecf4:	686c      	ldr	r4, [r5, #4]
 800ecf6:	69a3      	ldr	r3, [r4, #24]
 800ecf8:	60a3      	str	r3, [r4, #8]
 800ecfa:	89a3      	ldrh	r3, [r4, #12]
 800ecfc:	071a      	lsls	r2, r3, #28
 800ecfe:	d52f      	bpl.n	800ed60 <__swbuf_r+0x84>
 800ed00:	6923      	ldr	r3, [r4, #16]
 800ed02:	b36b      	cbz	r3, 800ed60 <__swbuf_r+0x84>
 800ed04:	6923      	ldr	r3, [r4, #16]
 800ed06:	6820      	ldr	r0, [r4, #0]
 800ed08:	1ac0      	subs	r0, r0, r3
 800ed0a:	6963      	ldr	r3, [r4, #20]
 800ed0c:	b2f6      	uxtb	r6, r6
 800ed0e:	4283      	cmp	r3, r0
 800ed10:	4637      	mov	r7, r6
 800ed12:	dc04      	bgt.n	800ed1e <__swbuf_r+0x42>
 800ed14:	4621      	mov	r1, r4
 800ed16:	4628      	mov	r0, r5
 800ed18:	f000 f948 	bl	800efac <_fflush_r>
 800ed1c:	bb30      	cbnz	r0, 800ed6c <__swbuf_r+0x90>
 800ed1e:	68a3      	ldr	r3, [r4, #8]
 800ed20:	3b01      	subs	r3, #1
 800ed22:	60a3      	str	r3, [r4, #8]
 800ed24:	6823      	ldr	r3, [r4, #0]
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	6022      	str	r2, [r4, #0]
 800ed2a:	701e      	strb	r6, [r3, #0]
 800ed2c:	6963      	ldr	r3, [r4, #20]
 800ed2e:	3001      	adds	r0, #1
 800ed30:	4283      	cmp	r3, r0
 800ed32:	d004      	beq.n	800ed3e <__swbuf_r+0x62>
 800ed34:	89a3      	ldrh	r3, [r4, #12]
 800ed36:	07db      	lsls	r3, r3, #31
 800ed38:	d506      	bpl.n	800ed48 <__swbuf_r+0x6c>
 800ed3a:	2e0a      	cmp	r6, #10
 800ed3c:	d104      	bne.n	800ed48 <__swbuf_r+0x6c>
 800ed3e:	4621      	mov	r1, r4
 800ed40:	4628      	mov	r0, r5
 800ed42:	f000 f933 	bl	800efac <_fflush_r>
 800ed46:	b988      	cbnz	r0, 800ed6c <__swbuf_r+0x90>
 800ed48:	4638      	mov	r0, r7
 800ed4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed4c:	4b0a      	ldr	r3, [pc, #40]	; (800ed78 <__swbuf_r+0x9c>)
 800ed4e:	429c      	cmp	r4, r3
 800ed50:	d101      	bne.n	800ed56 <__swbuf_r+0x7a>
 800ed52:	68ac      	ldr	r4, [r5, #8]
 800ed54:	e7cf      	b.n	800ecf6 <__swbuf_r+0x1a>
 800ed56:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <__swbuf_r+0xa0>)
 800ed58:	429c      	cmp	r4, r3
 800ed5a:	bf08      	it	eq
 800ed5c:	68ec      	ldreq	r4, [r5, #12]
 800ed5e:	e7ca      	b.n	800ecf6 <__swbuf_r+0x1a>
 800ed60:	4621      	mov	r1, r4
 800ed62:	4628      	mov	r0, r5
 800ed64:	f000 f81e 	bl	800eda4 <__swsetup_r>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d0cb      	beq.n	800ed04 <__swbuf_r+0x28>
 800ed6c:	f04f 37ff 	mov.w	r7, #4294967295
 800ed70:	e7ea      	b.n	800ed48 <__swbuf_r+0x6c>
 800ed72:	bf00      	nop
 800ed74:	08011240 	.word	0x08011240
 800ed78:	08011260 	.word	0x08011260
 800ed7c:	08011220 	.word	0x08011220

0800ed80 <_write_r>:
 800ed80:	b538      	push	{r3, r4, r5, lr}
 800ed82:	4d07      	ldr	r5, [pc, #28]	; (800eda0 <_write_r+0x20>)
 800ed84:	4604      	mov	r4, r0
 800ed86:	4608      	mov	r0, r1
 800ed88:	4611      	mov	r1, r2
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	602a      	str	r2, [r5, #0]
 800ed8e:	461a      	mov	r2, r3
 800ed90:	f7f2 fbbd 	bl	800150e <_write>
 800ed94:	1c43      	adds	r3, r0, #1
 800ed96:	d102      	bne.n	800ed9e <_write_r+0x1e>
 800ed98:	682b      	ldr	r3, [r5, #0]
 800ed9a:	b103      	cbz	r3, 800ed9e <_write_r+0x1e>
 800ed9c:	6023      	str	r3, [r4, #0]
 800ed9e:	bd38      	pop	{r3, r4, r5, pc}
 800eda0:	20006e74 	.word	0x20006e74

0800eda4 <__swsetup_r>:
 800eda4:	4b32      	ldr	r3, [pc, #200]	; (800ee70 <__swsetup_r+0xcc>)
 800eda6:	b570      	push	{r4, r5, r6, lr}
 800eda8:	681d      	ldr	r5, [r3, #0]
 800edaa:	4606      	mov	r6, r0
 800edac:	460c      	mov	r4, r1
 800edae:	b125      	cbz	r5, 800edba <__swsetup_r+0x16>
 800edb0:	69ab      	ldr	r3, [r5, #24]
 800edb2:	b913      	cbnz	r3, 800edba <__swsetup_r+0x16>
 800edb4:	4628      	mov	r0, r5
 800edb6:	f7ff fa57 	bl	800e268 <__sinit>
 800edba:	4b2e      	ldr	r3, [pc, #184]	; (800ee74 <__swsetup_r+0xd0>)
 800edbc:	429c      	cmp	r4, r3
 800edbe:	d10f      	bne.n	800ede0 <__swsetup_r+0x3c>
 800edc0:	686c      	ldr	r4, [r5, #4]
 800edc2:	89a3      	ldrh	r3, [r4, #12]
 800edc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edc8:	0719      	lsls	r1, r3, #28
 800edca:	d42c      	bmi.n	800ee26 <__swsetup_r+0x82>
 800edcc:	06dd      	lsls	r5, r3, #27
 800edce:	d411      	bmi.n	800edf4 <__swsetup_r+0x50>
 800edd0:	2309      	movs	r3, #9
 800edd2:	6033      	str	r3, [r6, #0]
 800edd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800edd8:	81a3      	strh	r3, [r4, #12]
 800edda:	f04f 30ff 	mov.w	r0, #4294967295
 800edde:	e03e      	b.n	800ee5e <__swsetup_r+0xba>
 800ede0:	4b25      	ldr	r3, [pc, #148]	; (800ee78 <__swsetup_r+0xd4>)
 800ede2:	429c      	cmp	r4, r3
 800ede4:	d101      	bne.n	800edea <__swsetup_r+0x46>
 800ede6:	68ac      	ldr	r4, [r5, #8]
 800ede8:	e7eb      	b.n	800edc2 <__swsetup_r+0x1e>
 800edea:	4b24      	ldr	r3, [pc, #144]	; (800ee7c <__swsetup_r+0xd8>)
 800edec:	429c      	cmp	r4, r3
 800edee:	bf08      	it	eq
 800edf0:	68ec      	ldreq	r4, [r5, #12]
 800edf2:	e7e6      	b.n	800edc2 <__swsetup_r+0x1e>
 800edf4:	0758      	lsls	r0, r3, #29
 800edf6:	d512      	bpl.n	800ee1e <__swsetup_r+0x7a>
 800edf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edfa:	b141      	cbz	r1, 800ee0e <__swsetup_r+0x6a>
 800edfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee00:	4299      	cmp	r1, r3
 800ee02:	d002      	beq.n	800ee0a <__swsetup_r+0x66>
 800ee04:	4630      	mov	r0, r6
 800ee06:	f7ff f8af 	bl	800df68 <_free_r>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	6363      	str	r3, [r4, #52]	; 0x34
 800ee0e:	89a3      	ldrh	r3, [r4, #12]
 800ee10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee14:	81a3      	strh	r3, [r4, #12]
 800ee16:	2300      	movs	r3, #0
 800ee18:	6063      	str	r3, [r4, #4]
 800ee1a:	6923      	ldr	r3, [r4, #16]
 800ee1c:	6023      	str	r3, [r4, #0]
 800ee1e:	89a3      	ldrh	r3, [r4, #12]
 800ee20:	f043 0308 	orr.w	r3, r3, #8
 800ee24:	81a3      	strh	r3, [r4, #12]
 800ee26:	6923      	ldr	r3, [r4, #16]
 800ee28:	b94b      	cbnz	r3, 800ee3e <__swsetup_r+0x9a>
 800ee2a:	89a3      	ldrh	r3, [r4, #12]
 800ee2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee34:	d003      	beq.n	800ee3e <__swsetup_r+0x9a>
 800ee36:	4621      	mov	r1, r4
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f000 f92b 	bl	800f094 <__smakebuf_r>
 800ee3e:	89a0      	ldrh	r0, [r4, #12]
 800ee40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee44:	f010 0301 	ands.w	r3, r0, #1
 800ee48:	d00a      	beq.n	800ee60 <__swsetup_r+0xbc>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	60a3      	str	r3, [r4, #8]
 800ee4e:	6963      	ldr	r3, [r4, #20]
 800ee50:	425b      	negs	r3, r3
 800ee52:	61a3      	str	r3, [r4, #24]
 800ee54:	6923      	ldr	r3, [r4, #16]
 800ee56:	b943      	cbnz	r3, 800ee6a <__swsetup_r+0xc6>
 800ee58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee5c:	d1ba      	bne.n	800edd4 <__swsetup_r+0x30>
 800ee5e:	bd70      	pop	{r4, r5, r6, pc}
 800ee60:	0781      	lsls	r1, r0, #30
 800ee62:	bf58      	it	pl
 800ee64:	6963      	ldrpl	r3, [r4, #20]
 800ee66:	60a3      	str	r3, [r4, #8]
 800ee68:	e7f4      	b.n	800ee54 <__swsetup_r+0xb0>
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	e7f7      	b.n	800ee5e <__swsetup_r+0xba>
 800ee6e:	bf00      	nop
 800ee70:	2000009c 	.word	0x2000009c
 800ee74:	08011240 	.word	0x08011240
 800ee78:	08011260 	.word	0x08011260
 800ee7c:	08011220 	.word	0x08011220

0800ee80 <_close_r>:
 800ee80:	b538      	push	{r3, r4, r5, lr}
 800ee82:	4d06      	ldr	r5, [pc, #24]	; (800ee9c <_close_r+0x1c>)
 800ee84:	2300      	movs	r3, #0
 800ee86:	4604      	mov	r4, r0
 800ee88:	4608      	mov	r0, r1
 800ee8a:	602b      	str	r3, [r5, #0]
 800ee8c:	f7f2 fb5b 	bl	8001546 <_close>
 800ee90:	1c43      	adds	r3, r0, #1
 800ee92:	d102      	bne.n	800ee9a <_close_r+0x1a>
 800ee94:	682b      	ldr	r3, [r5, #0]
 800ee96:	b103      	cbz	r3, 800ee9a <_close_r+0x1a>
 800ee98:	6023      	str	r3, [r4, #0]
 800ee9a:	bd38      	pop	{r3, r4, r5, pc}
 800ee9c:	20006e74 	.word	0x20006e74

0800eea0 <__sflush_r>:
 800eea0:	898a      	ldrh	r2, [r1, #12]
 800eea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea6:	4605      	mov	r5, r0
 800eea8:	0710      	lsls	r0, r2, #28
 800eeaa:	460c      	mov	r4, r1
 800eeac:	d458      	bmi.n	800ef60 <__sflush_r+0xc0>
 800eeae:	684b      	ldr	r3, [r1, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	dc05      	bgt.n	800eec0 <__sflush_r+0x20>
 800eeb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	dc02      	bgt.n	800eec0 <__sflush_r+0x20>
 800eeba:	2000      	movs	r0, #0
 800eebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eec2:	2e00      	cmp	r6, #0
 800eec4:	d0f9      	beq.n	800eeba <__sflush_r+0x1a>
 800eec6:	2300      	movs	r3, #0
 800eec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eecc:	682f      	ldr	r7, [r5, #0]
 800eece:	602b      	str	r3, [r5, #0]
 800eed0:	d032      	beq.n	800ef38 <__sflush_r+0x98>
 800eed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eed4:	89a3      	ldrh	r3, [r4, #12]
 800eed6:	075a      	lsls	r2, r3, #29
 800eed8:	d505      	bpl.n	800eee6 <__sflush_r+0x46>
 800eeda:	6863      	ldr	r3, [r4, #4]
 800eedc:	1ac0      	subs	r0, r0, r3
 800eede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eee0:	b10b      	cbz	r3, 800eee6 <__sflush_r+0x46>
 800eee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eee4:	1ac0      	subs	r0, r0, r3
 800eee6:	2300      	movs	r3, #0
 800eee8:	4602      	mov	r2, r0
 800eeea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eeec:	6a21      	ldr	r1, [r4, #32]
 800eeee:	4628      	mov	r0, r5
 800eef0:	47b0      	blx	r6
 800eef2:	1c43      	adds	r3, r0, #1
 800eef4:	89a3      	ldrh	r3, [r4, #12]
 800eef6:	d106      	bne.n	800ef06 <__sflush_r+0x66>
 800eef8:	6829      	ldr	r1, [r5, #0]
 800eefa:	291d      	cmp	r1, #29
 800eefc:	d82c      	bhi.n	800ef58 <__sflush_r+0xb8>
 800eefe:	4a2a      	ldr	r2, [pc, #168]	; (800efa8 <__sflush_r+0x108>)
 800ef00:	40ca      	lsrs	r2, r1
 800ef02:	07d6      	lsls	r6, r2, #31
 800ef04:	d528      	bpl.n	800ef58 <__sflush_r+0xb8>
 800ef06:	2200      	movs	r2, #0
 800ef08:	6062      	str	r2, [r4, #4]
 800ef0a:	04d9      	lsls	r1, r3, #19
 800ef0c:	6922      	ldr	r2, [r4, #16]
 800ef0e:	6022      	str	r2, [r4, #0]
 800ef10:	d504      	bpl.n	800ef1c <__sflush_r+0x7c>
 800ef12:	1c42      	adds	r2, r0, #1
 800ef14:	d101      	bne.n	800ef1a <__sflush_r+0x7a>
 800ef16:	682b      	ldr	r3, [r5, #0]
 800ef18:	b903      	cbnz	r3, 800ef1c <__sflush_r+0x7c>
 800ef1a:	6560      	str	r0, [r4, #84]	; 0x54
 800ef1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef1e:	602f      	str	r7, [r5, #0]
 800ef20:	2900      	cmp	r1, #0
 800ef22:	d0ca      	beq.n	800eeba <__sflush_r+0x1a>
 800ef24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef28:	4299      	cmp	r1, r3
 800ef2a:	d002      	beq.n	800ef32 <__sflush_r+0x92>
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	f7ff f81b 	bl	800df68 <_free_r>
 800ef32:	2000      	movs	r0, #0
 800ef34:	6360      	str	r0, [r4, #52]	; 0x34
 800ef36:	e7c1      	b.n	800eebc <__sflush_r+0x1c>
 800ef38:	6a21      	ldr	r1, [r4, #32]
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	47b0      	blx	r6
 800ef40:	1c41      	adds	r1, r0, #1
 800ef42:	d1c7      	bne.n	800eed4 <__sflush_r+0x34>
 800ef44:	682b      	ldr	r3, [r5, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d0c4      	beq.n	800eed4 <__sflush_r+0x34>
 800ef4a:	2b1d      	cmp	r3, #29
 800ef4c:	d001      	beq.n	800ef52 <__sflush_r+0xb2>
 800ef4e:	2b16      	cmp	r3, #22
 800ef50:	d101      	bne.n	800ef56 <__sflush_r+0xb6>
 800ef52:	602f      	str	r7, [r5, #0]
 800ef54:	e7b1      	b.n	800eeba <__sflush_r+0x1a>
 800ef56:	89a3      	ldrh	r3, [r4, #12]
 800ef58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef5c:	81a3      	strh	r3, [r4, #12]
 800ef5e:	e7ad      	b.n	800eebc <__sflush_r+0x1c>
 800ef60:	690f      	ldr	r7, [r1, #16]
 800ef62:	2f00      	cmp	r7, #0
 800ef64:	d0a9      	beq.n	800eeba <__sflush_r+0x1a>
 800ef66:	0793      	lsls	r3, r2, #30
 800ef68:	680e      	ldr	r6, [r1, #0]
 800ef6a:	bf08      	it	eq
 800ef6c:	694b      	ldreq	r3, [r1, #20]
 800ef6e:	600f      	str	r7, [r1, #0]
 800ef70:	bf18      	it	ne
 800ef72:	2300      	movne	r3, #0
 800ef74:	eba6 0807 	sub.w	r8, r6, r7
 800ef78:	608b      	str	r3, [r1, #8]
 800ef7a:	f1b8 0f00 	cmp.w	r8, #0
 800ef7e:	dd9c      	ble.n	800eeba <__sflush_r+0x1a>
 800ef80:	6a21      	ldr	r1, [r4, #32]
 800ef82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef84:	4643      	mov	r3, r8
 800ef86:	463a      	mov	r2, r7
 800ef88:	4628      	mov	r0, r5
 800ef8a:	47b0      	blx	r6
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	dc06      	bgt.n	800ef9e <__sflush_r+0xfe>
 800ef90:	89a3      	ldrh	r3, [r4, #12]
 800ef92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef96:	81a3      	strh	r3, [r4, #12]
 800ef98:	f04f 30ff 	mov.w	r0, #4294967295
 800ef9c:	e78e      	b.n	800eebc <__sflush_r+0x1c>
 800ef9e:	4407      	add	r7, r0
 800efa0:	eba8 0800 	sub.w	r8, r8, r0
 800efa4:	e7e9      	b.n	800ef7a <__sflush_r+0xda>
 800efa6:	bf00      	nop
 800efa8:	20400001 	.word	0x20400001

0800efac <_fflush_r>:
 800efac:	b538      	push	{r3, r4, r5, lr}
 800efae:	690b      	ldr	r3, [r1, #16]
 800efb0:	4605      	mov	r5, r0
 800efb2:	460c      	mov	r4, r1
 800efb4:	b913      	cbnz	r3, 800efbc <_fflush_r+0x10>
 800efb6:	2500      	movs	r5, #0
 800efb8:	4628      	mov	r0, r5
 800efba:	bd38      	pop	{r3, r4, r5, pc}
 800efbc:	b118      	cbz	r0, 800efc6 <_fflush_r+0x1a>
 800efbe:	6983      	ldr	r3, [r0, #24]
 800efc0:	b90b      	cbnz	r3, 800efc6 <_fflush_r+0x1a>
 800efc2:	f7ff f951 	bl	800e268 <__sinit>
 800efc6:	4b14      	ldr	r3, [pc, #80]	; (800f018 <_fflush_r+0x6c>)
 800efc8:	429c      	cmp	r4, r3
 800efca:	d11b      	bne.n	800f004 <_fflush_r+0x58>
 800efcc:	686c      	ldr	r4, [r5, #4]
 800efce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d0ef      	beq.n	800efb6 <_fflush_r+0xa>
 800efd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efd8:	07d0      	lsls	r0, r2, #31
 800efda:	d404      	bmi.n	800efe6 <_fflush_r+0x3a>
 800efdc:	0599      	lsls	r1, r3, #22
 800efde:	d402      	bmi.n	800efe6 <_fflush_r+0x3a>
 800efe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efe2:	f7ff f9df 	bl	800e3a4 <__retarget_lock_acquire_recursive>
 800efe6:	4628      	mov	r0, r5
 800efe8:	4621      	mov	r1, r4
 800efea:	f7ff ff59 	bl	800eea0 <__sflush_r>
 800efee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eff0:	07da      	lsls	r2, r3, #31
 800eff2:	4605      	mov	r5, r0
 800eff4:	d4e0      	bmi.n	800efb8 <_fflush_r+0xc>
 800eff6:	89a3      	ldrh	r3, [r4, #12]
 800eff8:	059b      	lsls	r3, r3, #22
 800effa:	d4dd      	bmi.n	800efb8 <_fflush_r+0xc>
 800effc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800effe:	f7ff f9d2 	bl	800e3a6 <__retarget_lock_release_recursive>
 800f002:	e7d9      	b.n	800efb8 <_fflush_r+0xc>
 800f004:	4b05      	ldr	r3, [pc, #20]	; (800f01c <_fflush_r+0x70>)
 800f006:	429c      	cmp	r4, r3
 800f008:	d101      	bne.n	800f00e <_fflush_r+0x62>
 800f00a:	68ac      	ldr	r4, [r5, #8]
 800f00c:	e7df      	b.n	800efce <_fflush_r+0x22>
 800f00e:	4b04      	ldr	r3, [pc, #16]	; (800f020 <_fflush_r+0x74>)
 800f010:	429c      	cmp	r4, r3
 800f012:	bf08      	it	eq
 800f014:	68ec      	ldreq	r4, [r5, #12]
 800f016:	e7da      	b.n	800efce <_fflush_r+0x22>
 800f018:	08011240 	.word	0x08011240
 800f01c:	08011260 	.word	0x08011260
 800f020:	08011220 	.word	0x08011220

0800f024 <_lseek_r>:
 800f024:	b538      	push	{r3, r4, r5, lr}
 800f026:	4d07      	ldr	r5, [pc, #28]	; (800f044 <_lseek_r+0x20>)
 800f028:	4604      	mov	r4, r0
 800f02a:	4608      	mov	r0, r1
 800f02c:	4611      	mov	r1, r2
 800f02e:	2200      	movs	r2, #0
 800f030:	602a      	str	r2, [r5, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	f7f2 faae 	bl	8001594 <_lseek>
 800f038:	1c43      	adds	r3, r0, #1
 800f03a:	d102      	bne.n	800f042 <_lseek_r+0x1e>
 800f03c:	682b      	ldr	r3, [r5, #0]
 800f03e:	b103      	cbz	r3, 800f042 <_lseek_r+0x1e>
 800f040:	6023      	str	r3, [r4, #0]
 800f042:	bd38      	pop	{r3, r4, r5, pc}
 800f044:	20006e74 	.word	0x20006e74

0800f048 <__swhatbuf_r>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	460e      	mov	r6, r1
 800f04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f050:	2900      	cmp	r1, #0
 800f052:	b096      	sub	sp, #88	; 0x58
 800f054:	4614      	mov	r4, r2
 800f056:	461d      	mov	r5, r3
 800f058:	da08      	bge.n	800f06c <__swhatbuf_r+0x24>
 800f05a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	602a      	str	r2, [r5, #0]
 800f062:	061a      	lsls	r2, r3, #24
 800f064:	d410      	bmi.n	800f088 <__swhatbuf_r+0x40>
 800f066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f06a:	e00e      	b.n	800f08a <__swhatbuf_r+0x42>
 800f06c:	466a      	mov	r2, sp
 800f06e:	f000 f8ad 	bl	800f1cc <_fstat_r>
 800f072:	2800      	cmp	r0, #0
 800f074:	dbf1      	blt.n	800f05a <__swhatbuf_r+0x12>
 800f076:	9a01      	ldr	r2, [sp, #4]
 800f078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f07c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f080:	425a      	negs	r2, r3
 800f082:	415a      	adcs	r2, r3
 800f084:	602a      	str	r2, [r5, #0]
 800f086:	e7ee      	b.n	800f066 <__swhatbuf_r+0x1e>
 800f088:	2340      	movs	r3, #64	; 0x40
 800f08a:	2000      	movs	r0, #0
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	b016      	add	sp, #88	; 0x58
 800f090:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f094 <__smakebuf_r>:
 800f094:	898b      	ldrh	r3, [r1, #12]
 800f096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f098:	079d      	lsls	r5, r3, #30
 800f09a:	4606      	mov	r6, r0
 800f09c:	460c      	mov	r4, r1
 800f09e:	d507      	bpl.n	800f0b0 <__smakebuf_r+0x1c>
 800f0a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f0a4:	6023      	str	r3, [r4, #0]
 800f0a6:	6123      	str	r3, [r4, #16]
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	6163      	str	r3, [r4, #20]
 800f0ac:	b002      	add	sp, #8
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}
 800f0b0:	ab01      	add	r3, sp, #4
 800f0b2:	466a      	mov	r2, sp
 800f0b4:	f7ff ffc8 	bl	800f048 <__swhatbuf_r>
 800f0b8:	9900      	ldr	r1, [sp, #0]
 800f0ba:	4605      	mov	r5, r0
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f7fe ffbf 	bl	800e040 <_malloc_r>
 800f0c2:	b948      	cbnz	r0, 800f0d8 <__smakebuf_r+0x44>
 800f0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0c8:	059a      	lsls	r2, r3, #22
 800f0ca:	d4ef      	bmi.n	800f0ac <__smakebuf_r+0x18>
 800f0cc:	f023 0303 	bic.w	r3, r3, #3
 800f0d0:	f043 0302 	orr.w	r3, r3, #2
 800f0d4:	81a3      	strh	r3, [r4, #12]
 800f0d6:	e7e3      	b.n	800f0a0 <__smakebuf_r+0xc>
 800f0d8:	4b0d      	ldr	r3, [pc, #52]	; (800f110 <__smakebuf_r+0x7c>)
 800f0da:	62b3      	str	r3, [r6, #40]	; 0x28
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	6020      	str	r0, [r4, #0]
 800f0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0e4:	81a3      	strh	r3, [r4, #12]
 800f0e6:	9b00      	ldr	r3, [sp, #0]
 800f0e8:	6163      	str	r3, [r4, #20]
 800f0ea:	9b01      	ldr	r3, [sp, #4]
 800f0ec:	6120      	str	r0, [r4, #16]
 800f0ee:	b15b      	cbz	r3, 800f108 <__smakebuf_r+0x74>
 800f0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	f000 f87b 	bl	800f1f0 <_isatty_r>
 800f0fa:	b128      	cbz	r0, 800f108 <__smakebuf_r+0x74>
 800f0fc:	89a3      	ldrh	r3, [r4, #12]
 800f0fe:	f023 0303 	bic.w	r3, r3, #3
 800f102:	f043 0301 	orr.w	r3, r3, #1
 800f106:	81a3      	strh	r3, [r4, #12]
 800f108:	89a0      	ldrh	r0, [r4, #12]
 800f10a:	4305      	orrs	r5, r0
 800f10c:	81a5      	strh	r5, [r4, #12]
 800f10e:	e7cd      	b.n	800f0ac <__smakebuf_r+0x18>
 800f110:	0800e201 	.word	0x0800e201

0800f114 <memmove>:
 800f114:	4288      	cmp	r0, r1
 800f116:	b510      	push	{r4, lr}
 800f118:	eb01 0402 	add.w	r4, r1, r2
 800f11c:	d902      	bls.n	800f124 <memmove+0x10>
 800f11e:	4284      	cmp	r4, r0
 800f120:	4623      	mov	r3, r4
 800f122:	d807      	bhi.n	800f134 <memmove+0x20>
 800f124:	1e43      	subs	r3, r0, #1
 800f126:	42a1      	cmp	r1, r4
 800f128:	d008      	beq.n	800f13c <memmove+0x28>
 800f12a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f12e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f132:	e7f8      	b.n	800f126 <memmove+0x12>
 800f134:	4402      	add	r2, r0
 800f136:	4601      	mov	r1, r0
 800f138:	428a      	cmp	r2, r1
 800f13a:	d100      	bne.n	800f13e <memmove+0x2a>
 800f13c:	bd10      	pop	{r4, pc}
 800f13e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f146:	e7f7      	b.n	800f138 <memmove+0x24>

0800f148 <_realloc_r>:
 800f148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f14c:	4680      	mov	r8, r0
 800f14e:	4614      	mov	r4, r2
 800f150:	460e      	mov	r6, r1
 800f152:	b921      	cbnz	r1, 800f15e <_realloc_r+0x16>
 800f154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f158:	4611      	mov	r1, r2
 800f15a:	f7fe bf71 	b.w	800e040 <_malloc_r>
 800f15e:	b92a      	cbnz	r2, 800f16c <_realloc_r+0x24>
 800f160:	f7fe ff02 	bl	800df68 <_free_r>
 800f164:	4625      	mov	r5, r4
 800f166:	4628      	mov	r0, r5
 800f168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f16c:	f000 f850 	bl	800f210 <_malloc_usable_size_r>
 800f170:	4284      	cmp	r4, r0
 800f172:	4607      	mov	r7, r0
 800f174:	d802      	bhi.n	800f17c <_realloc_r+0x34>
 800f176:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f17a:	d812      	bhi.n	800f1a2 <_realloc_r+0x5a>
 800f17c:	4621      	mov	r1, r4
 800f17e:	4640      	mov	r0, r8
 800f180:	f7fe ff5e 	bl	800e040 <_malloc_r>
 800f184:	4605      	mov	r5, r0
 800f186:	2800      	cmp	r0, #0
 800f188:	d0ed      	beq.n	800f166 <_realloc_r+0x1e>
 800f18a:	42bc      	cmp	r4, r7
 800f18c:	4622      	mov	r2, r4
 800f18e:	4631      	mov	r1, r6
 800f190:	bf28      	it	cs
 800f192:	463a      	movcs	r2, r7
 800f194:	f7fe fed2 	bl	800df3c <memcpy>
 800f198:	4631      	mov	r1, r6
 800f19a:	4640      	mov	r0, r8
 800f19c:	f7fe fee4 	bl	800df68 <_free_r>
 800f1a0:	e7e1      	b.n	800f166 <_realloc_r+0x1e>
 800f1a2:	4635      	mov	r5, r6
 800f1a4:	e7df      	b.n	800f166 <_realloc_r+0x1e>
	...

0800f1a8 <_read_r>:
 800f1a8:	b538      	push	{r3, r4, r5, lr}
 800f1aa:	4d07      	ldr	r5, [pc, #28]	; (800f1c8 <_read_r+0x20>)
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	4608      	mov	r0, r1
 800f1b0:	4611      	mov	r1, r2
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	602a      	str	r2, [r5, #0]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	f7f2 f98c 	bl	80014d4 <_read>
 800f1bc:	1c43      	adds	r3, r0, #1
 800f1be:	d102      	bne.n	800f1c6 <_read_r+0x1e>
 800f1c0:	682b      	ldr	r3, [r5, #0]
 800f1c2:	b103      	cbz	r3, 800f1c6 <_read_r+0x1e>
 800f1c4:	6023      	str	r3, [r4, #0]
 800f1c6:	bd38      	pop	{r3, r4, r5, pc}
 800f1c8:	20006e74 	.word	0x20006e74

0800f1cc <_fstat_r>:
 800f1cc:	b538      	push	{r3, r4, r5, lr}
 800f1ce:	4d07      	ldr	r5, [pc, #28]	; (800f1ec <_fstat_r+0x20>)
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	4604      	mov	r4, r0
 800f1d4:	4608      	mov	r0, r1
 800f1d6:	4611      	mov	r1, r2
 800f1d8:	602b      	str	r3, [r5, #0]
 800f1da:	f7f2 f9c0 	bl	800155e <_fstat>
 800f1de:	1c43      	adds	r3, r0, #1
 800f1e0:	d102      	bne.n	800f1e8 <_fstat_r+0x1c>
 800f1e2:	682b      	ldr	r3, [r5, #0]
 800f1e4:	b103      	cbz	r3, 800f1e8 <_fstat_r+0x1c>
 800f1e6:	6023      	str	r3, [r4, #0]
 800f1e8:	bd38      	pop	{r3, r4, r5, pc}
 800f1ea:	bf00      	nop
 800f1ec:	20006e74 	.word	0x20006e74

0800f1f0 <_isatty_r>:
 800f1f0:	b538      	push	{r3, r4, r5, lr}
 800f1f2:	4d06      	ldr	r5, [pc, #24]	; (800f20c <_isatty_r+0x1c>)
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	4608      	mov	r0, r1
 800f1fa:	602b      	str	r3, [r5, #0]
 800f1fc:	f7f2 f9bf 	bl	800157e <_isatty>
 800f200:	1c43      	adds	r3, r0, #1
 800f202:	d102      	bne.n	800f20a <_isatty_r+0x1a>
 800f204:	682b      	ldr	r3, [r5, #0]
 800f206:	b103      	cbz	r3, 800f20a <_isatty_r+0x1a>
 800f208:	6023      	str	r3, [r4, #0]
 800f20a:	bd38      	pop	{r3, r4, r5, pc}
 800f20c:	20006e74 	.word	0x20006e74

0800f210 <_malloc_usable_size_r>:
 800f210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f214:	1f18      	subs	r0, r3, #4
 800f216:	2b00      	cmp	r3, #0
 800f218:	bfbc      	itt	lt
 800f21a:	580b      	ldrlt	r3, [r1, r0]
 800f21c:	18c0      	addlt	r0, r0, r3
 800f21e:	4770      	bx	lr

0800f220 <_init>:
 800f220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f222:	bf00      	nop
 800f224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f226:	bc08      	pop	{r3}
 800f228:	469e      	mov	lr, r3
 800f22a:	4770      	bx	lr

0800f22c <_fini>:
 800f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22e:	bf00      	nop
 800f230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f232:	bc08      	pop	{r3}
 800f234:	469e      	mov	lr, r3
 800f236:	4770      	bx	lr
